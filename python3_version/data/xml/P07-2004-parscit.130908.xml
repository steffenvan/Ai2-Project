<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000257">
<title confidence="0.95209">
SemTAG: a platform for specifying Tree Adjoining Grammars and
performing TAG-based Semantic Construction
</title>
<author confidence="0.771629">
Claire Gardent
</author>
<affiliation confidence="0.451846">
CNRS / LORIA
</affiliation>
<address confidence="0.927060666666667">
Campus scientifique - BP 259
54 506 Vandœuvre-L`es-Nancy CEDEX
France
</address>
<email confidence="0.980537">
Claire.Gardent@loria.fr
</email>
<author confidence="0.538663">
Yannick Parmentier
</author>
<affiliation confidence="0.237652">
INRIA / LORIA - Nancy Universit´e
</affiliation>
<address confidence="0.923128">
Campus scientifique - BP 259
54 506 Vandœuvre-L`es-Nancy CEDEX
France
</address>
<email confidence="0.994673">
Yannick.Parmentier@loria.fr
</email>
<sectionHeader confidence="0.998536" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999805">
In this paper, we introduce SEMTAG, a free
and open software architecture for the de-
velopment of Tree Adjoining Grammars in-
tegrating a compositional semantics. SEM-
TAG differs from XTAG in two main ways.
First, it provides an expressive grammar
formalism and compiler for factorising and
specifying TAGs. Second, it supports se-
mantic construction.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.988501138888889">
Over the last decade, many of the main grammatical
frameworks used in computational linguistics were
extended to support semantic construction (i.e., the
computation of a meaning representation from syn-
tax and word meanings). Thus, the HPSG ERG
grammar for English was extended to output mini-
mal recursive structures as semantic representations
for sentences (Copestake and Flickinger, 2000); the
LFG (Lexical Functional Grammar) grammars to
output lambda terms (Dalrymple, 1999); and Clark
and Curran’s CCG (Combinatory Categorial Gram-
mar) based statistical parser was linked to a seman-
tic construction module allowing for the derivation
of Discourse Representation Structures (Bos et al.,
2004).
For Tree Adjoining Grammar (TAG) on the other
hand, there exists to date no computational frame-
work which supports semantic construction. In this
demo, we present SEMTAG, a free and open soft-
ware architecture that supports TAG based semantic
construction.
13
The structure of the paper is as follows. First,
we briefly introduce the syntactic and semantic for-
malisms that are being handled (section 2). Second,
we situate our approach with respect to other possi-
ble ways of doing TAG based semantic construction
(section 3). Third, we show how XMG, the linguistic
formalism used to specify the grammar (section 4)
differs from existing computational frameworks for
specifying a TAG and in particular, how it supports
the integration of semantic information. Finally, sec-
tion 5 focuses on the semantic construction module
and reports on the coverage of SEMFRAG, a core
TAG for French including both syntactic and seman-
tic information.
</bodyText>
<sectionHeader confidence="0.982907" genericHeader="method">
2 Linguistic formalisms
</sectionHeader>
<bodyText confidence="0.987743125">
We start by briefly introducing the syntactic and se-
mantic formalisms assumed by SEMTAG namely,
Feature-Based Lexicalised Tree Adjoining Gram-
mar and LU.
Tree Adjoining Grammars (TAG) TAG is a tree
rewriting system (Joshi and Schabes, 1997). A TAG
is composed of (i) two tree sets (a set of initial trees
and a set of auxiliary trees) and (ii) two rewriting op-
erations (substitution and adjunction). Furthermore,
in a Lexicalised TAG, each tree has at least one leaf
which is a terminal.
Initial trees are trees where leaf-nodes are labelled
either by a terminal symbol or by a non-terminal
symbol marked for substitution (1). Auxiliary trees
are trees where a leaf-node has the same label as the
root node and is marked for adjunction (⋆). This
leaf-node is called afoot node.
Proceedings of the ACL 2007 Demo and Poster Sessions, pages 13–16,
Prague, June 2007. c�2007 Association for Computational Linguistics
Further, substitution corresponds to the insertion
of an elementary tree t1 into a tree t2 at a frontier
node having the same label as the root node of t1.
Adjunction corresponds to the insertion of an auxil-
iary tree t1 into a tree t2 at an inner node having the
same label as the root and foot nodes of t1.
In a Feature-Based TAG, the nodes of the trees are
labelled with two feature structures called top and
bot. Derivation leads to unification on these nodes as
follows. Given a substitution, the top feature struc-
tures of the merged nodes are unified. Given an
adjunction, (i) the top feature structure of the inner
node receiving the adjunction and of the root node of
the inserted tree are unified, and (ii) the bot feature
structures of the inner node receiving the adjunction
and of the foot node of the inserted tree are unified.
At the end of a derivation, the top and bot feature
structures of each node in a derived tree are unified.
Semantics (LU). The semantic representation lan-
guage we use is a unification-based extension of the
PLU language (Bos, 1995). LU is defined as fol-
lows. Let H be a set of hole constants, Lc the set
of label constants, and Lv the set of label variables.
Let Ic (resp. Iv) be the set of individual constants
(resp. variables), let R be a set of n-ary relations
over Ic U Iv U H, and let &gt; be a relation over H U Lc
called the scope-over relation. Given l E Lc U Lv,
h E H, i1,... , in E Iv U Ic U H, and Rn E R, we
have:
</bodyText>
<listItem confidence="0.9923734">
1. l : Rn(i1, ... , in) is a LU formula.
2. h &gt; l is a LU formula.
3. φ, ψ is LU formula iff both φ and ψ are LU
formulas.
4. Nothing else is a LU formula.
</listItem>
<bodyText confidence="0.98944725">
In short, LU is a flat (i.e., non recursive) version
of first-order predicate logic in which scope may be
underspecified and variables can be unification vari-
ables1.
</bodyText>
<sectionHeader confidence="0.989875" genericHeader="method">
3 TAG based semantic construction
</sectionHeader>
<bodyText confidence="0.9999336">
Semantic construction can be performed either dur-
ing or after derivation of a sentence syntactic struc-
ture. In the first approach, syntactic structure and
semantic representations are built simultaneously.
This is the approach sketched by Montague and
</bodyText>
<footnote confidence="0.84948">
1For mode details on Lu, see (Gardent and Kallmeyer,
2003).
</footnote>
<bodyText confidence="0.999568540540541">
adopted e.g., in the HPSG ERG and in synchronous
TAG (Nesson and Shieber, 2006). In the second
approach, semantic construction proceeds from the
syntactic structure of a complete sentence, from a
lexicon associating each word with a semantic rep-
resentation and from a set of semantic rules speci-
fying how syntactic combinations relate to seman-
tic composition. This is the approach adopted for
instance, in the LFG glue semantic framework, in
the CCG approach and in the approaches to TAG-
based semantic construction that are based on the
TAG derivation tree.
SEMTAG implements a hybrid approach to se-
mantic construction where (i) semantic construction
proceeds after derivation and (ii) the semantic lexi-
con is extracted from a TAG which simultaneously
specifies syntax and semantics. In this approach
(Gardent and Kallmeyer, 2003), the TAG used in-
tegrates syntactic and semantic information as fol-
lows. Each elementary tree is associated with a for-
mula of LU representing its meaning. Importantly,
the meaning representations of semantic functors in-
clude unification variables that are shared with spe-
cific feature values occurring in the associated ele-
mentary trees. For instance in figure 1, the variables
x and y appear both in the semantic representation
associated with the tree for aime (love) and in the
tree itself.
Given such a TAG, the semantics of a tree
t derived from combining the elementary trees
t1, ... , tn is the union of the semantics of t1, ... , tn
modulo the unifications that results from deriving
that tree. For instance, given the sentence Jean aime
vraiment Marie (John really loves Mary) whose
TAG derivation is given in figure 1, the union of the
semantics of the elementary trees used to derived the
sentence tree is:
</bodyText>
<equation confidence="0.97363725">
l0 : jean(j), l1 : aime(x, y), l2 : vraiment(h0),
l3 &lt; h0, l3 : marie(m)
The unifications imposed by the derivations are:
{x — j,y — m,ls — l1}
</equation>
<bodyText confidence="0.8678525">
Hence the final semantics of the sentence Jean aime
vraiment Marie is:
</bodyText>
<equation confidence="0.672499777777778">
l0 : jean(j), l1 : aime(j, m), l2 : vraiment(h0),
l1 &lt; h0, l3 : marie(m)
14
S[lab:l1]
NP[idx:�] NP[idx:x,lab:l1] V[lab:l1] NP[idx:y,lab:l1] V[lab:l2] NP[idx:m]
Jean aime V[lab:ls]⋆ Adv Marie
vraiment
l0 : jean(j) l1 : aimer(x, y) l2 : vraiment(h0), l3 : marie(m)
l3 &lt; h0
</equation>
<figureCaption confidence="0.99991">
Figure 1: Derivation of “Jean aime vraiment Marie”
</figureCaption>
<bodyText confidence="0.999955">
As shown in (Gardent and Parmentier, 2005), se-
mantic construction can be performed either dur-
ing or after derivation. However, performing se-
mantic construction after derivation preserves mod-
ularity (changes to the semantics do not affect syn-
tactic parsing) and allows the grammar used to re-
main within TAG (the grammar need contain nei-
ther an infinite set of variables nor recursive feature
structures). Moreover, it means that standard TAG
parsers can be used (if semantic construction was
done during derivation, the parser would have to be
adapted to handle the association of each elemen-
tary tree with a semantic representation). Hence in
SEMTAG, semantic construction is performed after
derivation. Section 5 gives more detail about this
process.
</bodyText>
<sectionHeader confidence="0.990039" genericHeader="method">
4 The XMG formalism and compiler
</sectionHeader>
<bodyText confidence="0.999949904761905">
SEMTAG makes available to the linguist a formalism
(XMG) designed to facilitate the specification of tree
based grammars integrating a semantic dimension.
XMG differs from similar proposals (Xia et al., 1998)
in three main ways (Duchier et al., 2004). First it
supports the description of both syntax and seman-
tics. Specifically, it permits associating each ele-
mentary tree with an LU formula. Second, XMG pro-
vides an expressive formalism in which to factorise
and combine the recurring tree fragments shared by
several TAG elementary trees. Third, XMG pro-
vides a sophisticated treatment of variables which
inter alia, supports variable sharing between seman-
tic representation and syntactic tree. This sharing is
implemented by means of so-called interfaces i.e.,
feature structures that are associated with a given
(syntactic or semantic) fragment and whose scope
is global to several fragments of the grammar speci-
fication.
To specify the syntax / semantics interface
sketched in section 5, XMG is used as follows:
</bodyText>
<listItem confidence="0.988181777777778">
1. The elementary tree of a semantic functor is
defined as the conjunction of its spine (the projec-
tion of its syntactic head) with the tree fragments
describing each of its arguments. For instance, in
figure 2, the tree for an intransitive verb is defined
as the conjunction of the tree fragment for its spine
(Active) with the tree fragment for (a canonical re-
alisation of) its subject argument (Subject).
2. In the tree fragments representing the different
</listItem>
<bodyText confidence="0.847396666666667">
syntactic realizations (canonical, extracted, etc.) of
a given grammatical function, the node representing
the argument (e.g., the subject) is labelled with an
idx feature whose value is shared with a GFidx fea-
ture in the interface (where GF is the grammatical
function).
</bodyText>
<listItem confidence="0.910839615384616">
3. Semantic representations are encapsulated as
fragments where the semantic arguments are vari-
ables shared with the interface. For instance, the ith
argument of a semantic relation is associated with
the argI interface feature.
4. Finally, the mapping between grammatical
functions and thematic roles is specified when con-
joining an elementary tree fragment with a semantic
representation. For instance, in figure 22, the inter-
face unifies the value of arg1 (the thematic role) with
that of subjIdx (a grammatical function) thereby
specifying that the subject argument provides the
value of the first semantic argument.
</listItem>
<sectionHeader confidence="0.945364" genericHeader="conclusions">
5 Semantic construction
</sectionHeader>
<bodyText confidence="0.9926545">
As mentioned above, SEMTAG performs semantic
construction after derivation. More specifically, se-
mantic construction is supported by the following 3-
step process:
</bodyText>
<footnote confidence="0.931561">
2The interfaces are represented using gray boxes.
</footnote>
<page confidence="0.982298">
15
</page>
<figure confidence="0.9924806">
Intransitive: Subject: Active: 1-ary relation:
S
NPI[ida=X] VP
l0:Rel(X)
arg0=X
subjIdx=X
S
NPI[ida=z] VP
⇐
subjIdx=I
S
l0: Rel (A)
VP
arg0=A
∧
</figure>
<figureCaption confidence="0.997362">
Figure 2: Syntax / semantics interface within the metagrammar.
</figureCaption>
<listItem confidence="0.695220923076923">
1. First, we extract from the TAG generated by
XMG (i) a purely syntactic TAG G′, and (ii) a purely
semantic TAG G″3 A purely syntactic (resp. seman-
tic) Tag is a TAG whose features are purely syntactic
(resp. semantic) – in other words, G″is a TAG with
no semantic features whilst G″is a TAG with only
semantic features. Entries of G′ and G″are indexed
using the same key.
2. We generate a tabular syntactic parser for G′
using the DyALog system of (de la Clergerie, 2005).
This parser is then used to compute the derivation
forest for the input sentence.
3. A semantic construction algorithm is applied to
</listItem>
<bodyText confidence="0.823693590909091">
the derivation forest. In essence, this algorithm re-
trieves from the semantic TAG G″the semantic trees
involved in the derivation(s) and performs on these
the unifications prescribed by the derivation.
SEMTAG has been used to specify a core TAG for
French, called SemFRag. This grammar is currently
under evaluation on the Test Suite for Natural Lan-
guage Processing in terms of syntactic coverage, se-
mantic coverage and semantic ambiguity. For a test-
suite containing 1495 sentences, 62.88 % of the sen-
tences are syntactically parsed, 61.27 % of the sen-
tences are semantically parsed (i.e., at least one se-
mantic representation is computed), and the average
semantic ambiguity (number of semantic represen-
tation per sentence) is 2.46.
SEMTAG is freely available at http://trac.
loria.fr/—semtag.
3As (Nesson and Shieber, 2006) indicates, this extraction in
fact makes the resulting system a special case of synchronous
TAG where the semantic trees are isomorphic to the syntactic
trees and unification variables across the syntactic and semantic
components are interpreted as synchronous links.
</bodyText>
<sectionHeader confidence="0.998877" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999949194444444">
J. Bos, S. Clark, M. Steedman, J. R. Curran, and J. Hock-
enmaier. 2004. Wide-coverage semantic representa-
tions from a ccg parser. In Proceedings of the 20th
COLING, Geneva, Switzerland.
J. Bos. 1995. Predicate Logic Unplugged. In Proceed-
ings of the tenth Amsterdam Colloquium, Amsterdam.
A. Copestake and D. Flickinger. 2000. An open-
source grammar development environment and broad-
coverage english grammar using hpsg. In Proceedings
ofLREC, Athens, Greece.
Mary Dalrymple, editor. 1999. Semantics and Syntax in
Lexical Functional Grammar. MIT Press.
E. de la Clergerie. 2005. DyALog: a tabular logic pro-
gramming based environment for NLP. In Proceed-
ings of CSLP’05, Barcelona.
D. Duchier, J. Le Roux, and Y. Parmentier. 2004. The
Metagrammar Compiler: An NLP Application with
a Multi-paradigm Architecture. In Proceedings of
MOZ’2004, Charleroi.
C. Gardent and L. Kallmeyer. 2003. Semantic construc-
tion in FTAG. In Proceedings of EACL’03, Budapest.
C. Gardent and Y. Parmentier. 2005. Large scale se-
mantic construction for tree adjoining grammars. In
Proceedings ofLACL05, Bordeaux, France.
A. Joshi and Y. Schabes. 1997. Tree-adjoining gram-
mars. In G. Rozenberg and A. Salomaa, editors,
Handbook of Formal Languages, volume 3, pages 69
– 124. Springer, Berlin, New York.
Rebecca Nesson and Stuart M. Shieber. 2006. Sim-
pler TAG semantics through synchronization. In Pro-
ceedings of the 11th Conference on Formal Grammar,
Malaga, Spain, 29–30 July.
F. Xia, M. Palmer, K. Vijay-Shanker, and J. Rosenzweig.
1998. Consistent grammar development using partial-
tree descriptions for lexicalized tree adjoining gram-
mar. Proceedings ofTAG+4.
</reference>
<page confidence="0.998702">
16
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.248556">
<title confidence="0.9966605">SemTAG: a platform for specifying Tree Adjoining Grammars and performing TAG-based Semantic Construction</title>
<author confidence="0.999242">Claire Gardent</author>
<affiliation confidence="0.996386">CNRS / LORIA</affiliation>
<address confidence="0.957677">Campus scientifique - BP 259 54 506 Vandœuvre-L`es-Nancy CEDEX</address>
<title confidence="0.553085">France Claire.Gardent@loria.fr</title>
<author confidence="0.991106">Yannick Parmentier</author>
<affiliation confidence="0.99452">INRIA / LORIA - Nancy Universit´e</affiliation>
<address confidence="0.904609">Campus scientifique - BP 259 54 506 Vandœuvre-L`es-Nancy CEDEX France</address>
<email confidence="0.910077">Yannick.Parmentier@loria.fr</email>
<abstract confidence="0.9859782">this paper, we introduce a free and open software architecture for the development of Tree Adjoining Grammars ina compositional semantics. from XTAG in two main ways. First, it provides an expressive grammar formalism and compiler for factorising and specifying TAGs. Second, it supports semantic construction.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Bos</author>
<author>S Clark</author>
<author>M Steedman</author>
<author>J R Curran</author>
<author>J Hockenmaier</author>
</authors>
<title>Wide-coverage semantic representations from a ccg parser.</title>
<date>2004</date>
<booktitle>In Proceedings of the 20th COLING,</booktitle>
<location>Geneva, Switzerland.</location>
<contexts>
<context position="1445" citStr="Bos et al., 2004" startWordPosition="202" endWordPosition="205">onal linguistics were extended to support semantic construction (i.e., the computation of a meaning representation from syntax and word meanings). Thus, the HPSG ERG grammar for English was extended to output minimal recursive structures as semantic representations for sentences (Copestake and Flickinger, 2000); the LFG (Lexical Functional Grammar) grammars to output lambda terms (Dalrymple, 1999); and Clark and Curran’s CCG (Combinatory Categorial Grammar) based statistical parser was linked to a semantic construction module allowing for the derivation of Discourse Representation Structures (Bos et al., 2004). For Tree Adjoining Grammar (TAG) on the other hand, there exists to date no computational framework which supports semantic construction. In this demo, we present SEMTAG, a free and open software architecture that supports TAG based semantic construction. 13 The structure of the paper is as follows. First, we briefly introduce the syntactic and semantic formalisms that are being handled (section 2). Second, we situate our approach with respect to other possible ways of doing TAG based semantic construction (section 3). Third, we show how XMG, the linguistic formalism used to specify the gram</context>
</contexts>
<marker>Bos, Clark, Steedman, Curran, Hockenmaier, 2004</marker>
<rawString>J. Bos, S. Clark, M. Steedman, J. R. Curran, and J. Hockenmaier. 2004. Wide-coverage semantic representations from a ccg parser. In Proceedings of the 20th COLING, Geneva, Switzerland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Bos</author>
</authors>
<title>Predicate Logic Unplugged.</title>
<date>1995</date>
<booktitle>In Proceedings of the tenth Amsterdam Colloquium,</booktitle>
<location>Amsterdam.</location>
<contexts>
<context position="4388" citStr="Bos, 1995" startWordPosition="698" endWordPosition="699">s as follows. Given a substitution, the top feature structures of the merged nodes are unified. Given an adjunction, (i) the top feature structure of the inner node receiving the adjunction and of the root node of the inserted tree are unified, and (ii) the bot feature structures of the inner node receiving the adjunction and of the foot node of the inserted tree are unified. At the end of a derivation, the top and bot feature structures of each node in a derived tree are unified. Semantics (LU). The semantic representation language we use is a unification-based extension of the PLU language (Bos, 1995). LU is defined as follows. Let H be a set of hole constants, Lc the set of label constants, and Lv the set of label variables. Let Ic (resp. Iv) be the set of individual constants (resp. variables), let R be a set of n-ary relations over Ic U Iv U H, and let &gt; be a relation over H U Lc called the scope-over relation. Given l E Lc U Lv, h E H, i1,... , in E Iv U Ic U H, and Rn E R, we have: 1. l : Rn(i1, ... , in) is a LU formula. 2. h &gt; l is a LU formula. 3. φ, ψ is LU formula iff both φ and ψ are LU formulas. 4. Nothing else is a LU formula. In short, LU is a flat (i.e., non recursive) versi</context>
</contexts>
<marker>Bos, 1995</marker>
<rawString>J. Bos. 1995. Predicate Logic Unplugged. In Proceedings of the tenth Amsterdam Colloquium, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Copestake</author>
<author>D Flickinger</author>
</authors>
<title>An opensource grammar development environment and broadcoverage english grammar using hpsg.</title>
<date>2000</date>
<booktitle>In Proceedings ofLREC,</booktitle>
<location>Athens, Greece.</location>
<contexts>
<context position="1140" citStr="Copestake and Flickinger, 2000" startWordPosition="158" endWordPosition="161">ntegrating a compositional semantics. SEMTAG differs from XTAG in two main ways. First, it provides an expressive grammar formalism and compiler for factorising and specifying TAGs. Second, it supports semantic construction. 1 Introduction Over the last decade, many of the main grammatical frameworks used in computational linguistics were extended to support semantic construction (i.e., the computation of a meaning representation from syntax and word meanings). Thus, the HPSG ERG grammar for English was extended to output minimal recursive structures as semantic representations for sentences (Copestake and Flickinger, 2000); the LFG (Lexical Functional Grammar) grammars to output lambda terms (Dalrymple, 1999); and Clark and Curran’s CCG (Combinatory Categorial Grammar) based statistical parser was linked to a semantic construction module allowing for the derivation of Discourse Representation Structures (Bos et al., 2004). For Tree Adjoining Grammar (TAG) on the other hand, there exists to date no computational framework which supports semantic construction. In this demo, we present SEMTAG, a free and open software architecture that supports TAG based semantic construction. 13 The structure of the paper is as f</context>
</contexts>
<marker>Copestake, Flickinger, 2000</marker>
<rawString>A. Copestake and D. Flickinger. 2000. An opensource grammar development environment and broadcoverage english grammar using hpsg. In Proceedings ofLREC, Athens, Greece.</rawString>
</citation>
<citation valid="true">
<date>1999</date>
<booktitle>Semantics and Syntax in Lexical Functional Grammar.</booktitle>
<editor>Mary Dalrymple, editor.</editor>
<publisher>MIT Press.</publisher>
<marker>1999</marker>
<rawString>Mary Dalrymple, editor. 1999. Semantics and Syntax in Lexical Functional Grammar. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E de la Clergerie</author>
</authors>
<title>DyALog: a tabular logic programming based environment for NLP.</title>
<date>2005</date>
<booktitle>In Proceedings of CSLP’05,</booktitle>
<location>Barcelona.</location>
<contexts>
<context position="11810" citStr="Clergerie, 2005" startWordPosition="1940" endWordPosition="1941">l0:Rel(X) arg0=X subjIdx=X S NPI[ida=z] VP ⇐ subjIdx=I S l0: Rel (A) VP arg0=A ∧ Figure 2: Syntax / semantics interface within the metagrammar. 1. First, we extract from the TAG generated by XMG (i) a purely syntactic TAG G′, and (ii) a purely semantic TAG G″3 A purely syntactic (resp. semantic) Tag is a TAG whose features are purely syntactic (resp. semantic) – in other words, G″is a TAG with no semantic features whilst G″is a TAG with only semantic features. Entries of G′ and G″are indexed using the same key. 2. We generate a tabular syntactic parser for G′ using the DyALog system of (de la Clergerie, 2005). This parser is then used to compute the derivation forest for the input sentence. 3. A semantic construction algorithm is applied to the derivation forest. In essence, this algorithm retrieves from the semantic TAG G″the semantic trees involved in the derivation(s) and performs on these the unifications prescribed by the derivation. SEMTAG has been used to specify a core TAG for French, called SemFRag. This grammar is currently under evaluation on the Test Suite for Natural Language Processing in terms of syntactic coverage, semantic coverage and semantic ambiguity. For a testsuite containin</context>
</contexts>
<marker>Clergerie, 2005</marker>
<rawString>E. de la Clergerie. 2005. DyALog: a tabular logic programming based environment for NLP. In Proceedings of CSLP’05, Barcelona.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Duchier</author>
<author>J Le Roux</author>
<author>Y Parmentier</author>
</authors>
<title>The Metagrammar Compiler: An NLP Application with a Multi-paradigm Architecture. In</title>
<date>2004</date>
<booktitle>Proceedings of MOZ’2004,</booktitle>
<location>Charleroi.</location>
<marker>Duchier, Le Roux, Parmentier, 2004</marker>
<rawString>D. Duchier, J. Le Roux, and Y. Parmentier. 2004. The Metagrammar Compiler: An NLP Application with a Multi-paradigm Architecture. In Proceedings of MOZ’2004, Charleroi.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Gardent</author>
<author>L Kallmeyer</author>
</authors>
<title>Semantic construction in FTAG.</title>
<date>2003</date>
<booktitle>In Proceedings of EACL’03,</booktitle>
<location>Budapest.</location>
<contexts>
<context position="5448" citStr="Gardent and Kallmeyer, 2003" startWordPosition="906" endWordPosition="909">a. 2. h &gt; l is a LU formula. 3. φ, ψ is LU formula iff both φ and ψ are LU formulas. 4. Nothing else is a LU formula. In short, LU is a flat (i.e., non recursive) version of first-order predicate logic in which scope may be underspecified and variables can be unification variables1. 3 TAG based semantic construction Semantic construction can be performed either during or after derivation of a sentence syntactic structure. In the first approach, syntactic structure and semantic representations are built simultaneously. This is the approach sketched by Montague and 1For mode details on Lu, see (Gardent and Kallmeyer, 2003). adopted e.g., in the HPSG ERG and in synchronous TAG (Nesson and Shieber, 2006). In the second approach, semantic construction proceeds from the syntactic structure of a complete sentence, from a lexicon associating each word with a semantic representation and from a set of semantic rules specifying how syntactic combinations relate to semantic composition. This is the approach adopted for instance, in the LFG glue semantic framework, in the CCG approach and in the approaches to TAGbased semantic construction that are based on the TAG derivation tree. SEMTAG implements a hybrid approach to s</context>
</contexts>
<marker>Gardent, Kallmeyer, 2003</marker>
<rawString>C. Gardent and L. Kallmeyer. 2003. Semantic construction in FTAG. In Proceedings of EACL’03, Budapest.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Gardent</author>
<author>Y Parmentier</author>
</authors>
<title>Large scale semantic construction for tree adjoining grammars.</title>
<date>2005</date>
<booktitle>In Proceedings ofLACL05,</booktitle>
<location>Bordeaux, France.</location>
<contexts>
<context position="7777" citStr="Gardent and Parmentier, 2005" startWordPosition="1297" endWordPosition="1300">ntary trees used to derived the sentence tree is: l0 : jean(j), l1 : aime(x, y), l2 : vraiment(h0), l3 &lt; h0, l3 : marie(m) The unifications imposed by the derivations are: {x — j,y — m,ls — l1} Hence the final semantics of the sentence Jean aime vraiment Marie is: l0 : jean(j), l1 : aime(j, m), l2 : vraiment(h0), l1 &lt; h0, l3 : marie(m) 14 S[lab:l1] NP[idx:�] NP[idx:x,lab:l1] V[lab:l1] NP[idx:y,lab:l1] V[lab:l2] NP[idx:m] Jean aime V[lab:ls]⋆ Adv Marie vraiment l0 : jean(j) l1 : aimer(x, y) l2 : vraiment(h0), l3 : marie(m) l3 &lt; h0 Figure 1: Derivation of “Jean aime vraiment Marie” As shown in (Gardent and Parmentier, 2005), semantic construction can be performed either during or after derivation. However, performing semantic construction after derivation preserves modularity (changes to the semantics do not affect syntactic parsing) and allows the grammar used to remain within TAG (the grammar need contain neither an infinite set of variables nor recursive feature structures). Moreover, it means that standard TAG parsers can be used (if semantic construction was done during derivation, the parser would have to be adapted to handle the association of each elementary tree with a semantic representation). Hence in</context>
</contexts>
<marker>Gardent, Parmentier, 2005</marker>
<rawString>C. Gardent and Y. Parmentier. 2005. Large scale semantic construction for tree adjoining grammars. In Proceedings ofLACL05, Bordeaux, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Joshi</author>
<author>Y Schabes</author>
</authors>
<title>Tree-adjoining grammars.</title>
<date>1997</date>
<booktitle>Handbook of Formal Languages,</booktitle>
<volume>3</volume>
<pages>69--124</pages>
<editor>In G. Rozenberg and A. Salomaa, editors,</editor>
<publisher>Springer,</publisher>
<location>Berlin, New York.</location>
<contexts>
<context position="2644" citStr="Joshi and Schabes, 1997" startWordPosition="391" endWordPosition="394"> used to specify the grammar (section 4) differs from existing computational frameworks for specifying a TAG and in particular, how it supports the integration of semantic information. Finally, section 5 focuses on the semantic construction module and reports on the coverage of SEMFRAG, a core TAG for French including both syntactic and semantic information. 2 Linguistic formalisms We start by briefly introducing the syntactic and semantic formalisms assumed by SEMTAG namely, Feature-Based Lexicalised Tree Adjoining Grammar and LU. Tree Adjoining Grammars (TAG) TAG is a tree rewriting system (Joshi and Schabes, 1997). A TAG is composed of (i) two tree sets (a set of initial trees and a set of auxiliary trees) and (ii) two rewriting operations (substitution and adjunction). Furthermore, in a Lexicalised TAG, each tree has at least one leaf which is a terminal. Initial trees are trees where leaf-nodes are labelled either by a terminal symbol or by a non-terminal symbol marked for substitution (1). Auxiliary trees are trees where a leaf-node has the same label as the root node and is marked for adjunction (⋆). This leaf-node is called afoot node. Proceedings of the ACL 2007 Demo and Poster Sessions, pages 13</context>
</contexts>
<marker>Joshi, Schabes, 1997</marker>
<rawString>A. Joshi and Y. Schabes. 1997. Tree-adjoining grammars. In G. Rozenberg and A. Salomaa, editors, Handbook of Formal Languages, volume 3, pages 69 – 124. Springer, Berlin, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca Nesson</author>
<author>Stuart M Shieber</author>
</authors>
<title>Simpler TAG semantics through synchronization.</title>
<date>2006</date>
<booktitle>In Proceedings of the 11th Conference on Formal Grammar,</booktitle>
<location>Malaga,</location>
<contexts>
<context position="5529" citStr="Nesson and Shieber, 2006" startWordPosition="920" endWordPosition="923"> 4. Nothing else is a LU formula. In short, LU is a flat (i.e., non recursive) version of first-order predicate logic in which scope may be underspecified and variables can be unification variables1. 3 TAG based semantic construction Semantic construction can be performed either during or after derivation of a sentence syntactic structure. In the first approach, syntactic structure and semantic representations are built simultaneously. This is the approach sketched by Montague and 1For mode details on Lu, see (Gardent and Kallmeyer, 2003). adopted e.g., in the HPSG ERG and in synchronous TAG (Nesson and Shieber, 2006). In the second approach, semantic construction proceeds from the syntactic structure of a complete sentence, from a lexicon associating each word with a semantic representation and from a set of semantic rules specifying how syntactic combinations relate to semantic composition. This is the approach adopted for instance, in the LFG glue semantic framework, in the CCG approach and in the approaches to TAGbased semantic construction that are based on the TAG derivation tree. SEMTAG implements a hybrid approach to semantic construction where (i) semantic construction proceeds after derivation an</context>
</contexts>
<marker>Nesson, Shieber, 2006</marker>
<rawString>Rebecca Nesson and Stuart M. Shieber. 2006. Simpler TAG semantics through synchronization. In Proceedings of the 11th Conference on Formal Grammar, Malaga, Spain, 29–30 July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Xia</author>
<author>M Palmer</author>
<author>K Vijay-Shanker</author>
<author>J Rosenzweig</author>
</authors>
<title>Consistent grammar development using partialtree descriptions for lexicalized tree adjoining grammar.</title>
<date>1998</date>
<booktitle>Proceedings ofTAG+4.</booktitle>
<contexts>
<context position="8728" citStr="Xia et al., 1998" startWordPosition="1445" endWordPosition="1448">ursive feature structures). Moreover, it means that standard TAG parsers can be used (if semantic construction was done during derivation, the parser would have to be adapted to handle the association of each elementary tree with a semantic representation). Hence in SEMTAG, semantic construction is performed after derivation. Section 5 gives more detail about this process. 4 The XMG formalism and compiler SEMTAG makes available to the linguist a formalism (XMG) designed to facilitate the specification of tree based grammars integrating a semantic dimension. XMG differs from similar proposals (Xia et al., 1998) in three main ways (Duchier et al., 2004). First it supports the description of both syntax and semantics. Specifically, it permits associating each elementary tree with an LU formula. Second, XMG provides an expressive formalism in which to factorise and combine the recurring tree fragments shared by several TAG elementary trees. Third, XMG provides a sophisticated treatment of variables which inter alia, supports variable sharing between semantic representation and syntactic tree. This sharing is implemented by means of so-called interfaces i.e., feature structures that are associated with </context>
</contexts>
<marker>Xia, Palmer, Vijay-Shanker, Rosenzweig, 1998</marker>
<rawString>F. Xia, M. Palmer, K. Vijay-Shanker, and J. Rosenzweig. 1998. Consistent grammar development using partialtree descriptions for lexicalized tree adjoining grammar. Proceedings ofTAG+4.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>