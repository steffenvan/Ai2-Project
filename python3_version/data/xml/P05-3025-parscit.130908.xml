<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.002505">
<title confidence="0.991747">
Interactively Exploring a Machine Translation Model
</title>
<author confidence="0.998647">
Steve DeNeefe, Kevin Knight, and Hayward H. Chan
</author>
<affiliation confidence="0.840139333333333">
Information Sciences Institute and Department of Computer Science
The Viterbi School of Engineering, University of Southern California
4676 Admiralty Way, Suite 1001
</affiliation>
<address confidence="0.647492">
Marina del Rey, CA 90292
</address>
<email confidence="0.999259">
{sdeneefe,knight}@isi.edu, hhchan@umich.edu
</email>
<sectionHeader confidence="0.995646" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999989307692308">
This paper describes a method of in-
teractively visualizing and directing the
process of translating a sentence. The
method allows a user to explore a model
of syntax-based statistical machine trans-
lation (MT), to understand the model’s
strengths and weaknesses, and to compare
it to other MT systems. Using this visual-
ization method, we can find and address
conceptual and practical problems in an
MT system. In our demonstration at ACL,
new users of our tool will drive a syntax-
based decoder for themselves.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9993484375">
There are many new approaches to statistical ma-
chine translation, and more ideas are being sug-
gested all the time. However, it is difficult to deter-
mine how well a model will actually perform. Ex-
perienced researchers have been surprised by the ca-
pability of unintuitive word-for-word models; at the
same time, seemingly capable models often have se-
rious hidden problems — intuition is no substitute
for experimentation. With translation ideas growing
more complex, capturing aspects of linguistic struc-
ture in different ways, it becomes difficult to try out
a new idea without a large-scale software develop-
ment effort.
Anyone who builds a full-scale, trainable trans-
lation system using syntactic information faces this
problem. We know that syntactic models often do
</bodyText>
<page confidence="0.993149">
97
</page>
<bodyText confidence="0.9901922">
not fit the data. For example, the syntactic sys-
tem described in Yamada and Knight (2001) can-
not translate n-to-m-word phrases and does not al-
low for multi-level syntactic transformations; both
phenomena are frequently observed in real data. In
building a new syntax-based MT system which ad-
dresses these flaws, we wanted to find problems in
our framework as early as possible. So we decided
to create a tool that could help us answer questions
like:
</bodyText>
<listItem confidence="0.9168242">
1. Does our framework allow good translations
for real data, and if not, where does it get stuck?
2. How does our framework compare to exist-
ing state-of-the-art phrase-based statistical MT
systems such as Och and Ney (2004)?
</listItem>
<bodyText confidence="0.999918823529412">
The result is DerivTool, an interactive translation
visualization tool. It allows a user to build up a
translation from one language to another, step by
step, presenting the user with the myriad of choices
available to the decoder at each point in the pro-
cess. DerivTool simplifies the user’s experience of
exploring these choices by presenting only the de-
cisions relevant to the context in which the user is
working, and allowing the user to search for choices
that fit a particular set of conditions. Some previ-
ous tools have allowed the user to visualize word
alignment information (Callison-Burch et al., 2004;
Smith and Jahr, 2000), but there has been no cor-
responding deep effort into visualizing the decoding
experience itself. Other tools use visualization to aid
the user in manually developing a grammar (Copes-
take and Flickinger, 2000), while our tool visualizes
</bodyText>
<subsubsectionHeader confidence="0.349527">
Proceedings of the ACL Interactive Poster and Demonstration Sessions,
</subsubsectionHeader>
<bodyText confidence="0.675213">
pages 97–100, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics
Starting with: ú )] d;
and applying the rule: NPB(DT(the) NNS(police)) ↔ *i
</bodyText>
<equation confidence="0.773989">
we get: ú NPB(DT(the) NNS(police)) -&amp;*
</equation>
<bodyText confidence="0.751399">
If we then apply the rule: VBN(killed) ↔ -&amp;*
</bodyText>
<equation confidence="0.774683">
we get: ú NPB(DT(the) NNS(police)) VBN(killed)
</equation>
<bodyText confidence="0.93651925">
Applying the next rule: NP-C(x0:NPB) ↔ x0
results in: ú NP-C(NPB(DT(the) NNS(police))) VBN(killed)
Finally, applying the rule: VP(VBD(was) VP-C(x0:VBN PP(IN(by) x1:NP-C))) ↔ ú x1 x0
results in the final phrase: VP(VBD(was) VP-C(VBN(killed) PP(IN(by) NP-C(NPB(DT(the) NNS(police))))))
</bodyText>
<tableCaption confidence="0.984549">
Table 1: By applying applying four rules, a Chinese verb phrase is translated to English.
</tableCaption>
<bodyText confidence="0.9996728">
the translation process itself, using rules from very
large, automatically learned rule sets. DerivTool can
be adapted to visualize other syntax-based MT mod-
els, other tree-to-tree or tree-to-string MT models, or
models for paraphrasing.
</bodyText>
<sectionHeader confidence="0.978769" genericHeader="method">
2 Translation Framework
</sectionHeader>
<bodyText confidence="0.999990428571429">
It is useful at this point to give a brief descrip-
tion of the syntax-based framework that we work
with, which is based on translating Chinese sen-
tences into English syntax trees. Galley et al. (2004)
describe how to learn hundreds of millions of tree-
transformation rules from a parsed, aligned Chi-
nese/English corpus, and Galley et al. (submitted)
describe probability estimators for those rules. We
decode a new Chinese sentence with a method simi-
lar to parsing, where we apply learned rules to build
up a complete English tree hypothesis from the Chi-
nese string.
The rule extractor learns rules for many situations.
Some are simple phrase-to-phrase rules such as:
</bodyText>
<equation confidence="0.977375">
NPB(DT(the) NNS(police)) ↔ )]
</equation>
<bodyText confidence="0.99994425">
This rule should be read as follows: replace the Chi-
nese word )] with the noun phrase “the police”.
Others rules can take existing tree fragments and
build upon them. For example, the rule
</bodyText>
<equation confidence="0.792417">
S(x0:NP-C x1:VP x2:.) ↔ x0 x1 x2
</equation>
<bodyText confidence="0.99952925">
takes three parts of a sentence, a noun phrase (x0),
a verb phrase (x1), and a period (x2) and ties them
together to build a complete sentence. Rules also
can involve phrase re-ordering, as in
</bodyText>
<equation confidence="0.950611">
NPB(x0:JJ x1:NN) ↔ x1 x0
</equation>
<bodyText confidence="0.99927825">
This rule builds an English noun phrase out of an
adjective (x0) and a noun (x1), but in the Chinese,
the order is reversed. Multilevel rules can tie several
of these concepts together; the rule
</bodyText>
<equation confidence="0.9531615">
VP(VBD(was) VP-C(x0:VBN PP(IN(by) x1:NP-C)))
— ú x1 x0
</equation>
<bodyText confidence="0.961425933333333">
takes a Chinese word ú and two English con-
stituents — x1, a noun phrase, and x0, a past-
participle verb — and translates them into a phrase
of the form “was [verb] by [noun-phrase]”. Notice
that the order of the constituents has been reversed in
the resulting English phrase, and that English func-
tion words have been generated.
The decoder builds up a translation from the
Chinese sentence into an English tree by apply-
ing these rules. It follows the decoding-as-parsing
idea exemplified by Wu (1996) and Yamada and
Knight (2002). For example, the Chinese verb
phrase ú )] -&amp; (literally, “[passive] police
kill”) can be translated to English via four rules (see
Table 1).
</bodyText>
<sectionHeader confidence="0.999113" genericHeader="method">
3 DerivTool
</sectionHeader>
<bodyText confidence="0.999956857142857">
In order to test whether good translations can be gen-
erated with rules learned by Galley et al. (2004),
we created DerivTool as an environment for interac-
tively using these rules as a decoder would. A user
starts with a Chinese sentence and applies rules one
after another, building up a translation from Chinese
to English. After finishing the translation, the user
can save the trace of rule-applications (the deriva-
tion tree) for later analysis.
We now outline the typical procedure for a user
to translate a sentence with DerivTool. To start, the
user loads a set of sentences to translate and chooses
a particular one to work with. The tool then presents
the user with a window split halfway up. The top
</bodyText>
<page confidence="0.988664">
98
</page>
<figureCaption confidence="0.999735">
Figure 1: DerivTool with a completed derivation.
</figureCaption>
<bodyText confidence="0.999028625">
half is the workspace where the user builds a transla-
tion. It initially displays only the Chinese sentence,
with each word as a separate node. The bottom half
presents a set of tabbed panels which allow the user
to select rules to build up the translation. See Fig-
ure 1 for a picture of the interface showing a com-
pleted derivation tree.
The most immediately useful panel is called Se-
lecting Template, which shows a grid of possible En-
glish phrasal translations for Chinese phrases from
the sentence. This phrase grid contains both phrases
learned in our extracted rules (e.g., “the police”
from earlier) and phrases learned by the phrase-
based translation system (Och and Ney, 2004)1. The
user presses a grid button to choose a phrase to in-
clude in the translation. At this point, a frequency-
</bodyText>
<footnote confidence="0.696798666666667">
1The phrase-based system serves as a sparring partner. We
display its best decoding in the center of the screen. Note that
in Figure 1 its output lacks an auxiliary verb and an article.
</footnote>
<bodyText confidence="0.999840722222222">
ordered list of rules will appear; these rules trans-
late the Chinese phrase into the button-selected En-
glish phrase, and the user specifies which one to use.
Often there will be more than one rule (e.g., -&amp;�
may translate via the rule VBD(killed) +-a IM or
VBN(killed) +-+ Ift and sometimes there are no
rules available. When there are no rules, the buttons
are marked in red, telling us that the phrase-based
system has access to this phrasal translation but our
learned syntactic rules did not capture it. Other but-
tons are marked green to represent translations from
the specialized number/name/date system, and oth-
ers are blue, indicating the phrases in the phrase-
based decoder’s best output. A purple button indi-
cates both red and blue, i.e., the phrase was cho-
sen by the phrase-based decoder but is unavailable
in our syntactic framework. This is a bad combina-
tion, showing us where rule learning is weak. The
</bodyText>
<page confidence="0.996903">
99
</page>
<bodyText confidence="0.99938119047619">
remaining buttons are gray.
Once the user has chosen the phrasal rules re-
quired for translating the sentence, the next step is
to stitch these phrases together into a complete En-
glish syntax tree using more general rules. These are
found in another panel called Searching. This panel
allows a user to select a set of adjacent, top-level
nodes in the tree and find a rule that will connect
them together. It is commonly used for building up
larger constituents from smaller ones. For example,
if one has a noun-phrase, a verb-phrase, and a pe-
riod, the user can search for the rule that connects
them and builds an “S” on top, completing the sen-
tence. The results of a search are presented in a list,
again ordered by frequency.
A few more features to note are: 1) loading and
saving your work at any point, 2) adding free-form
notes to the document (e.g. “I couldn’t find a rule
that...”), and 3) manually typing rules if one cannot
be found by the above methods. This allows us to
see deficiencies in the framework.
</bodyText>
<sectionHeader confidence="0.95801" genericHeader="method">
4 How DerivTool Helps
</sectionHeader>
<bodyText confidence="0.999944181818182">
First, DerivTool has given us confidence that our
syntax-based framework can work, and that the rules
we are learning are good. We have been able to
manually build a good translation for each sentence
we tried, both for short and long sentences. In fact,
there are multiple good ways to translate sentences
using these rules, because different DerivTool users
translate sentences differently. Ordering rules by
frequency and/or probability helps us determine if
the rules we want are also frequent and favored by
our model.
DerivTool has also helped us to find problems
with the framework and to see clearly how to fix
them. For example, in one of our first sentences
we realized that there was no rule for translat-
ing a date — likewise for numbers, names, cur-
rency values, and times of day. Our phrase-based
system solves these problems with a specialized
date/name/number translator. Through the process
of manually typing syntactic transformation rules
for dates and numbers in DerivTool, it became clear
that our current date/name/number translator did not
provide enough information to create such syntac-
tic rules automatically. This sparked a new area of
research before we had a fully-functional decoder.
We also found that multi-word noun phrases, such
as “Israeli Prime Minister Sharon” and “the French
Ambassador’s visit” were often parsed in a way that
did not allow us to learn good translation rules.
The flat structure of the constituents in the syntax
tree makes it difficult to learn rules that are general
enough to be useful. Phrases with possessives also
gave particular difficulty due to the awkward mul-
tilevel structure of the parser’s output. We are re-
searching solutions to these problems involving re-
structuring the syntax trees before training.
Finally, our tool has helped us find bugs in our
system. We found many cases where rules we
wanted to use were unexpectedly absent. We eventu-
ally traced these bugs to our rule extraction system.
Our decoder would have simply worked around this
problem, producing less desirable translations, but
DerivTool allowed us to quickly spot the missing
rules.
</bodyText>
<sectionHeader confidence="0.999112" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999986444444444">
We created DerivTool to test our MT framework
against real-world data before building a fully-
functional decoder. By allowing us to play the role
of a decoder and translate sentences manually, it has
given us insight into how well our framework fits
the data, what some of its weaknesses are, and how
it compares to other systems. We continue to use
it as we try out new rule-extraction techniques and
finish the decoding system.
</bodyText>
<sectionHeader confidence="0.999271" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99750785">
Chris Callison-Burch, Colin Bannard and Josh Schroeder.
2004. Improved statistical translation through editing.
EAMT-2004 Workshop.
Ann Copestake and Dan Flickinger. 2000. An open source
grammar development environment and broad-coverage En-
glish grammar using HPSG. Proc. ofLREC 2000.
Michel Galley, Mark Hopkins, Kevin Knight, and Daniel
Marcu. 2004. What’s in a translation rule? Proc. ofNAACL-
HLT 2004.
Franz Och and Hermann Ney. 2004. The alignment template
approach to statistical machine translation. Computational
Linguistics, 30(4).
Noah A. Smith and Michael E. Jahr. 2000. Cairo: An Align-
ment Visualization Tool. Proc. ofLREC 2000.
Dekai Wu. 1996. A polynomial-time algorithm for statistical
machine translation. Proc. ofACL.
Kenji Yamada and Kevin Knight. 2001. A syntax-based statis-
tical translation model. Proc. ofACL.
Kenji Yamada and Kevin Knight. 2002. A decoder for syntax-
based statistical MT. Proc. ofACL.
</reference>
<page confidence="0.990554">
100
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.959061">
<title confidence="0.998645">Interactively Exploring a Machine Translation Model</title>
<author confidence="0.999584">Steve DeNeefe</author>
<author confidence="0.999584">Kevin Knight</author>
<author confidence="0.999584">Hayward H Chan</author>
<affiliation confidence="0.992769">Information Sciences Institute and Department of Computer Science The Viterbi School of Engineering, University of Southern California</affiliation>
<address confidence="0.9977965">4676 Admiralty Way, Suite 1001 Marina del Rey, CA 90292</address>
<email confidence="0.998785">hhchan@umich.edu</email>
<abstract confidence="0.998579785714286">This paper describes a method of interactively visualizing and directing the process of translating a sentence. The method allows a user to explore a model of syntax-based statistical machine translation (MT), to understand the model’s strengths and weaknesses, and to compare it to other MT systems. Using this visualization method, we can find and address conceptual and practical problems in an MT system. In our demonstration at ACL, new users of our tool will drive a syntaxbased decoder for themselves.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Chris Callison-Burch</author>
<author>Colin Bannard</author>
<author>Josh Schroeder</author>
</authors>
<title>Improved statistical translation through editing.</title>
<date>2004</date>
<booktitle>EAMT-2004 Workshop.</booktitle>
<contexts>
<context position="2929" citStr="Callison-Burch et al., 2004" startWordPosition="464" endWordPosition="467">d Ney (2004)? The result is DerivTool, an interactive translation visualization tool. It allows a user to build up a translation from one language to another, step by step, presenting the user with the myriad of choices available to the decoder at each point in the process. DerivTool simplifies the user’s experience of exploring these choices by presenting only the decisions relevant to the context in which the user is working, and allowing the user to search for choices that fit a particular set of conditions. Some previous tools have allowed the user to visualize word alignment information (Callison-Burch et al., 2004; Smith and Jahr, 2000), but there has been no corresponding deep effort into visualizing the decoding experience itself. Other tools use visualization to aid the user in manually developing a grammar (Copestake and Flickinger, 2000), while our tool visualizes Proceedings of the ACL Interactive Poster and Demonstration Sessions, pages 97–100, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics Starting with: ú )] d; and applying the rule: NPB(DT(the) NNS(police)) ↔ *i we get: ú NPB(DT(the) NNS(police)) -&amp;* If we then apply the rule: VBN(killed) ↔ -&amp;* we get: ú NPB(DT(the) NN</context>
</contexts>
<marker>Callison-Burch, Bannard, Schroeder, 2004</marker>
<rawString>Chris Callison-Burch, Colin Bannard and Josh Schroeder. 2004. Improved statistical translation through editing. EAMT-2004 Workshop.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
<author>Dan Flickinger</author>
</authors>
<title>An open source grammar development environment and broad-coverage English grammar using HPSG.</title>
<date>2000</date>
<booktitle>Proc. ofLREC</booktitle>
<contexts>
<context position="3162" citStr="Copestake and Flickinger, 2000" startWordPosition="500" endWordPosition="504"> to the decoder at each point in the process. DerivTool simplifies the user’s experience of exploring these choices by presenting only the decisions relevant to the context in which the user is working, and allowing the user to search for choices that fit a particular set of conditions. Some previous tools have allowed the user to visualize word alignment information (Callison-Burch et al., 2004; Smith and Jahr, 2000), but there has been no corresponding deep effort into visualizing the decoding experience itself. Other tools use visualization to aid the user in manually developing a grammar (Copestake and Flickinger, 2000), while our tool visualizes Proceedings of the ACL Interactive Poster and Demonstration Sessions, pages 97–100, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics Starting with: ú )] d; and applying the rule: NPB(DT(the) NNS(police)) ↔ *i we get: ú NPB(DT(the) NNS(police)) -&amp;* If we then apply the rule: VBN(killed) ↔ -&amp;* we get: ú NPB(DT(the) NNS(police)) VBN(killed) Applying the next rule: NP-C(x0:NPB) ↔ x0 results in: ú NP-C(NPB(DT(the) NNS(police))) VBN(killed) Finally, applying the rule: VP(VBD(was) VP-C(x0:VBN PP(IN(by) x1:NP-C))) ↔ ú x1 x0 results in the final phrase:</context>
</contexts>
<marker>Copestake, Flickinger, 2000</marker>
<rawString>Ann Copestake and Dan Flickinger. 2000. An open source grammar development environment and broad-coverage English grammar using HPSG. Proc. ofLREC 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michel Galley</author>
<author>Mark Hopkins</author>
<author>Kevin Knight</author>
<author>Daniel Marcu</author>
</authors>
<title>What’s in a translation rule?</title>
<date>2004</date>
<booktitle>Proc. ofNAACLHLT</booktitle>
<contexts>
<context position="4387" citStr="Galley et al. (2004)" startWordPosition="682" endWordPosition="685">BD(was) VP-C(VBN(killed) PP(IN(by) NP-C(NPB(DT(the) NNS(police)))))) Table 1: By applying applying four rules, a Chinese verb phrase is translated to English. the translation process itself, using rules from very large, automatically learned rule sets. DerivTool can be adapted to visualize other syntax-based MT models, other tree-to-tree or tree-to-string MT models, or models for paraphrasing. 2 Translation Framework It is useful at this point to give a brief description of the syntax-based framework that we work with, which is based on translating Chinese sentences into English syntax trees. Galley et al. (2004) describe how to learn hundreds of millions of treetransformation rules from a parsed, aligned Chinese/English corpus, and Galley et al. (submitted) describe probability estimators for those rules. We decode a new Chinese sentence with a method similar to parsing, where we apply learned rules to build up a complete English tree hypothesis from the Chinese string. The rule extractor learns rules for many situations. Some are simple phrase-to-phrase rules such as: NPB(DT(the) NNS(police)) ↔ )] This rule should be read as follows: replace the Chinese word )] with the noun phrase “the police”. Oth</context>
<context position="6360" citStr="Galley et al. (2004)" startWordPosition="1022" endWordPosition="1025">[noun-phrase]”. Notice that the order of the constituents has been reversed in the resulting English phrase, and that English function words have been generated. The decoder builds up a translation from the Chinese sentence into an English tree by applying these rules. It follows the decoding-as-parsing idea exemplified by Wu (1996) and Yamada and Knight (2002). For example, the Chinese verb phrase ú )] -&amp; (literally, “[passive] police kill”) can be translated to English via four rules (see Table 1). 3 DerivTool In order to test whether good translations can be generated with rules learned by Galley et al. (2004), we created DerivTool as an environment for interactively using these rules as a decoder would. A user starts with a Chinese sentence and applies rules one after another, building up a translation from Chinese to English. After finishing the translation, the user can save the trace of rule-applications (the derivation tree) for later analysis. We now outline the typical procedure for a user to translate a sentence with DerivTool. To start, the user loads a set of sentences to translate and chooses a particular one to work with. The tool then presents the user with a window split halfway up. T</context>
</contexts>
<marker>Galley, Hopkins, Knight, Marcu, 2004</marker>
<rawString>Michel Galley, Mark Hopkins, Kevin Knight, and Daniel Marcu. 2004. What’s in a translation rule? Proc. ofNAACLHLT 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Franz Och</author>
<author>Hermann Ney</author>
</authors>
<title>The alignment template approach to statistical machine translation.</title>
<date>2004</date>
<journal>Computational Linguistics,</journal>
<volume>30</volume>
<issue>4</issue>
<contexts>
<context position="2314" citStr="Och and Ney (2004)" startWordPosition="362" endWordPosition="365">ribed in Yamada and Knight (2001) cannot translate n-to-m-word phrases and does not allow for multi-level syntactic transformations; both phenomena are frequently observed in real data. In building a new syntax-based MT system which addresses these flaws, we wanted to find problems in our framework as early as possible. So we decided to create a tool that could help us answer questions like: 1. Does our framework allow good translations for real data, and if not, where does it get stuck? 2. How does our framework compare to existing state-of-the-art phrase-based statistical MT systems such as Och and Ney (2004)? The result is DerivTool, an interactive translation visualization tool. It allows a user to build up a translation from one language to another, step by step, presenting the user with the myriad of choices available to the decoder at each point in the process. DerivTool simplifies the user’s experience of exploring these choices by presenting only the decisions relevant to the context in which the user is working, and allowing the user to search for choices that fit a particular set of conditions. Some previous tools have allowed the user to visualize word alignment information (Callison-Bur</context>
<context position="7701" citStr="Och and Ney, 2004" startWordPosition="1251" endWordPosition="1254">itially displays only the Chinese sentence, with each word as a separate node. The bottom half presents a set of tabbed panels which allow the user to select rules to build up the translation. See Figure 1 for a picture of the interface showing a completed derivation tree. The most immediately useful panel is called Selecting Template, which shows a grid of possible English phrasal translations for Chinese phrases from the sentence. This phrase grid contains both phrases learned in our extracted rules (e.g., “the police” from earlier) and phrases learned by the phrasebased translation system (Och and Ney, 2004)1. The user presses a grid button to choose a phrase to include in the translation. At this point, a frequency1The phrase-based system serves as a sparring partner. We display its best decoding in the center of the screen. Note that in Figure 1 its output lacks an auxiliary verb and an article. ordered list of rules will appear; these rules translate the Chinese phrase into the button-selected English phrase, and the user specifies which one to use. Often there will be more than one rule (e.g., -&amp;� may translate via the rule VBD(killed) +-a IM or VBN(killed) +-+ Ift and sometimes there are no </context>
</contexts>
<marker>Och, Ney, 2004</marker>
<rawString>Franz Och and Hermann Ney. 2004. The alignment template approach to statistical machine translation. Computational Linguistics, 30(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noah A Smith</author>
<author>Michael E Jahr</author>
</authors>
<title>Cairo: An Alignment Visualization Tool.</title>
<date>2000</date>
<booktitle>Proc. ofLREC</booktitle>
<contexts>
<context position="2952" citStr="Smith and Jahr, 2000" startWordPosition="468" endWordPosition="471">erivTool, an interactive translation visualization tool. It allows a user to build up a translation from one language to another, step by step, presenting the user with the myriad of choices available to the decoder at each point in the process. DerivTool simplifies the user’s experience of exploring these choices by presenting only the decisions relevant to the context in which the user is working, and allowing the user to search for choices that fit a particular set of conditions. Some previous tools have allowed the user to visualize word alignment information (Callison-Burch et al., 2004; Smith and Jahr, 2000), but there has been no corresponding deep effort into visualizing the decoding experience itself. Other tools use visualization to aid the user in manually developing a grammar (Copestake and Flickinger, 2000), while our tool visualizes Proceedings of the ACL Interactive Poster and Demonstration Sessions, pages 97–100, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics Starting with: ú )] d; and applying the rule: NPB(DT(the) NNS(police)) ↔ *i we get: ú NPB(DT(the) NNS(police)) -&amp;* If we then apply the rule: VBN(killed) ↔ -&amp;* we get: ú NPB(DT(the) NNS(police)) VBN(killed) </context>
</contexts>
<marker>Smith, Jahr, 2000</marker>
<rawString>Noah A. Smith and Michael E. Jahr. 2000. Cairo: An Alignment Visualization Tool. Proc. ofLREC 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dekai Wu</author>
</authors>
<title>A polynomial-time algorithm for statistical machine translation.</title>
<date>1996</date>
<booktitle>Proc. ofACL.</booktitle>
<contexts>
<context position="6074" citStr="Wu (1996)" startWordPosition="974" endWordPosition="975"> can tie several of these concepts together; the rule VP(VBD(was) VP-C(x0:VBN PP(IN(by) x1:NP-C))) — ú x1 x0 takes a Chinese word ú and two English constituents — x1, a noun phrase, and x0, a pastparticiple verb — and translates them into a phrase of the form “was [verb] by [noun-phrase]”. Notice that the order of the constituents has been reversed in the resulting English phrase, and that English function words have been generated. The decoder builds up a translation from the Chinese sentence into an English tree by applying these rules. It follows the decoding-as-parsing idea exemplified by Wu (1996) and Yamada and Knight (2002). For example, the Chinese verb phrase ú )] -&amp; (literally, “[passive] police kill”) can be translated to English via four rules (see Table 1). 3 DerivTool In order to test whether good translations can be generated with rules learned by Galley et al. (2004), we created DerivTool as an environment for interactively using these rules as a decoder would. A user starts with a Chinese sentence and applies rules one after another, building up a translation from Chinese to English. After finishing the translation, the user can save the trace of rule-applications (the deri</context>
</contexts>
<marker>Wu, 1996</marker>
<rawString>Dekai Wu. 1996. A polynomial-time algorithm for statistical machine translation. Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenji Yamada</author>
<author>Kevin Knight</author>
</authors>
<title>A syntax-based statistical translation model.</title>
<date>2001</date>
<booktitle>Proc. ofACL.</booktitle>
<contexts>
<context position="1729" citStr="Yamada and Knight (2001)" startWordPosition="264" endWordPosition="267"> by the capability of unintuitive word-for-word models; at the same time, seemingly capable models often have serious hidden problems — intuition is no substitute for experimentation. With translation ideas growing more complex, capturing aspects of linguistic structure in different ways, it becomes difficult to try out a new idea without a large-scale software development effort. Anyone who builds a full-scale, trainable translation system using syntactic information faces this problem. We know that syntactic models often do 97 not fit the data. For example, the syntactic system described in Yamada and Knight (2001) cannot translate n-to-m-word phrases and does not allow for multi-level syntactic transformations; both phenomena are frequently observed in real data. In building a new syntax-based MT system which addresses these flaws, we wanted to find problems in our framework as early as possible. So we decided to create a tool that could help us answer questions like: 1. Does our framework allow good translations for real data, and if not, where does it get stuck? 2. How does our framework compare to existing state-of-the-art phrase-based statistical MT systems such as Och and Ney (2004)? The result is</context>
</contexts>
<marker>Yamada, Knight, 2001</marker>
<rawString>Kenji Yamada and Kevin Knight. 2001. A syntax-based statistical translation model. Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenji Yamada</author>
<author>Kevin Knight</author>
</authors>
<title>A decoder for syntaxbased statistical MT.</title>
<date>2002</date>
<booktitle>Proc. ofACL.</booktitle>
<contexts>
<context position="6103" citStr="Yamada and Knight (2002)" startWordPosition="977" endWordPosition="980">al of these concepts together; the rule VP(VBD(was) VP-C(x0:VBN PP(IN(by) x1:NP-C))) — ú x1 x0 takes a Chinese word ú and two English constituents — x1, a noun phrase, and x0, a pastparticiple verb — and translates them into a phrase of the form “was [verb] by [noun-phrase]”. Notice that the order of the constituents has been reversed in the resulting English phrase, and that English function words have been generated. The decoder builds up a translation from the Chinese sentence into an English tree by applying these rules. It follows the decoding-as-parsing idea exemplified by Wu (1996) and Yamada and Knight (2002). For example, the Chinese verb phrase ú )] -&amp; (literally, “[passive] police kill”) can be translated to English via four rules (see Table 1). 3 DerivTool In order to test whether good translations can be generated with rules learned by Galley et al. (2004), we created DerivTool as an environment for interactively using these rules as a decoder would. A user starts with a Chinese sentence and applies rules one after another, building up a translation from Chinese to English. After finishing the translation, the user can save the trace of rule-applications (the derivation tree) for later analys</context>
</contexts>
<marker>Yamada, Knight, 2002</marker>
<rawString>Kenji Yamada and Kevin Knight. 2002. A decoder for syntaxbased statistical MT. Proc. ofACL.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>