<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000272">
<title confidence="0.979756">
Extraction of Tree Adjoining Grammars from a Treebank for Korean
</title>
<author confidence="0.65189">
Jungyeul Park
</author>
<affiliation confidence="0.498032">
UFR Linguistique
</affiliation>
<address confidence="0.441608">
Laboratoire de linguistique formelle
Université Paris VII - Denis Diderot
</address>
<email confidence="0.994282">
jungyeul.park@linguist.jussieu.fr
</email>
<sectionHeader confidence="0.99652" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999897666666667">
We present the implementation of a system
which extracts not only lexicalized gram-
mars but also feature-based lexicalized
grammars from Korean Sejong Treebank.
We report on some practical experiments
where we extract TAG grammars and tree
schemata. Above all, full-scale syntactic
tags and well-formed morphological analy-
sis in Sejong Treebank allow us to extract
syntactic features. In addition, we modify
Treebank for extracting lexicalized gram-
mars and convert lexicalized grammars into
tree schemata to resolve limited lexical
coverage problem of extracted lexicalized
grammars.
</bodyText>
<sectionHeader confidence="0.998784" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99999320754717">
An electronic grammar is an interface between the
complexity and the diversity of natural language
and the regularity and the effectiveness of a lan-
guage processing, and it is one of the most impor-
tant elements in the natural language processing.
Since traditional manual grammar development is
a time-consuming and labor-intensive task, many
efforts for automatic and semi-automatic grammar
development have been taken during last decades.
Automatic grammar development means that a
system extracts a grammar from a Treebank which
has an implicit Treebank grammar. The grammar
extraction system takes syntactically analyzed sen-
tences as an input and produces a target grammar.
The extracted grammar would be same as the
Treebank grammar or be different depending on
the user’s specific purpose. The automatically ex-
tracted grammar has the advantage of the coher-
ence of extracted grammars and the rapidity of its
development. However, as it always depends on
the Treebank which the extraction system uses, its
coverage could be limited to the scale of a Tree-
bank. Moreover, the reliable Treebank would be
hardly found, especially in public domain.
Semi-automatic grammar development means
that a system generates the grammar using the de-
scription of the language-specific syntactic (or lin-
guistic) variations and its constraints. A meta-
grammar in Candito (1999) and a tree description
in Xia (2001) are good examples of a semi-
automatic grammar development. Even using
semi-automatic grammar development, we need
the good description of linguistic phenomena for
specific language which requires very high level
knowledge of linguistics and the semi-
automatically generated grammars would easily
have an overflow problem.
Since we might extract the grammar automati-
cally without many efforts if a reliable Treebank is
provided, in this paper we implement a system
which extracts a Lexicalized Tree Adjoining
Grammar and a Feature-based Lexicalized Tree
Adjoining Grammar from Korean Sejong Treebank
(SJTree). SJTree contains 32,054 eojeols (the unity
of segmentation in the Korean sentence), that is,
2,526 sentences. SJTree uses 43 part-of-speech
tags and 55 syntactic tags.
Even though there are many previous works for
extracting grammars from a Treebank, extracting
syntactic features is tried for the first time. 55 full-
scale syntactic tags and well-formed morphologi-
cal analysis in SJTree allow us to extract syntactic
features automatically and to develop FB-LTAG.
</bodyText>
<page confidence="0.983261">
73
</page>
<note confidence="0.7247045">
Proceedings of the COLING/ACL 2006 Student Research Workshop, pages 73–78,
Sydney, July 2006. c�2006 Association for Computational Linguistics
</note>
<bodyText confidence="0.994677258064516">
First, we briefly present features structures
which are focused on FB-LTAG and other previ-
ous works for extracting a grammar from a Tree-
bank. Then, we explain our grammar extraction
scheme and report experimental results. Finally,
we discuss the conclusion.
2 Feature structures and previous works
on extracting grammars from a Tree-
bank
A feature structure is a way of representing gram-
matical information. Formally feature structure
consists of a specification of a set of features, each
of which is paired with a particular value (Sag et
al., 2003). In a unification frame, a feature struc-
ture is associated with each node in an elementary
tree (Vijay-Shanker and Joshi, 1991). This feature
structure contains information about how the node
interacts with other nodes in the tree. It consists of
a top part, which generally contains information
relating to the super-node, and a bottom part,
which generally contains information relating to
the sub-node (Han et al., 2000).
In FB-LTAG, the feature structure of a new
node created by substitution inherits the union of
the features of the original nodes. The top feature
of new node is the union of the top features (f1 ∪ f)
of the two original nodes, while the bottom feature
of the new node is simply the bottom feature (g1)
of the top node of the substituting tree since the
substitution node has no bottom feature as shown
in Figure 1.
</bodyText>
<figureCaption confidence="0.998906">
Figure 1. Substitution in FB-LTAG
</figureCaption>
<bodyText confidence="0.9999808">
The node being adjoined into splits and its top fea-
ture (f) unifies with the top feature (f1) of the root
adjoining node, while its bottom feature (g) unifies
with the bottom feature (g2) of the foot adjoining
node as shown in Figure 2.
</bodyText>
<equation confidence="0.456784">
X
</equation>
<figureCaption confidence="0.999663">
Figure 2. Adjunction in FB-LTAG
</figureCaption>
<bodyText confidence="0.999022882352941">
Several works for extracting grammars, especially
for TAG formalism are proposed. Chen (2001)
extracted lexicalized grammars from English Penn
Treebank and there are other works based on
Chen’s procedure such as Johansen (2004) and
Nasr (2004) for French and Habash and Rambow
(2004) for Arabic. Chiang (2000) used Tree Inser-
tion Grammars, one variation of TAG formalism
for his extraction system from English Penn Tree-
bank. Xia et al. (2000) developed the uniform
method of a grammar extraction for English, Chi-
nese and Korean. Neumann (2003) extracted Lexi-
calized Tree Grammars from English Penn
Treebank for English and from NEGRA Treebank
for German. As mentioned above, none of these
works tried to extract syntactic features for FB-
LTAG.
</bodyText>
<sectionHeader confidence="0.994308" genericHeader="method">
3 Grammar extraction scheme
</sectionHeader>
<bodyText confidence="0.999820571428572">
Before extracting a grammar automatically, we
transform the bracket structure sentence in SJTree
into a tree data structure. Afterward, using depth-
first algorithm for a tree traverse, we determine a
head and the type of operations (substitution or
adjunction) for children nodes of the given node if
the given node is a non-terminal node.
</bodyText>
<subsectionHeader confidence="0.999933">
3.1 Determination of a head
</subsectionHeader>
<bodyText confidence="0.999597142857143">
For the determination of a head, we assume the
right-most child node as a head among its sibling
nodes in end-focus languages like Korean. For in-
stance, the second NP is marked as a head in [NP
NP] composition while the first NP is marked for
adjunction operation for the extracted grammar G1
which uses eojeols directly without modification of
SJTree (see the section 4 for the detail of extrac-
tion experiments). Likewise, in [VP@VV
VP@VX] composition where the first VP has a
VV (verb) anchor and the last VP has a VX (auxil-
iary verb) anchor, a principal verb in the first VP
could be marked for adjunction operation and an
auxiliary verb in the second VP would be a head,
that is, the extracted auxiliary verb tree has every
argument of whole sentence. This phenomenon
could be explained by argument composition.
Head nodes of the extracted grammar for a verb
balpyoha.eoss.da (‘announced’) in (1) are in bold
face in Figure 3 which represents bracketed sen-
tence structure in SJTree
</bodyText>
<figure confidence="0.930658675">
t:f1
b:g1
Y X
Y↓
t:f1 ∪ f
t:f
→
X
Y
b:g1
t:f2
b:g2
→
Y
t31 ∪ f
b:g1
t:f2
b:g2 ∪ g
X Y
t3Y b:g
t:f1
b:g1
Y*
Y
74
(1) OV_V__ -QlT1 2-nlLZt -al10 11z �11R��.
ilbon oimuseong.eun
Japan ministy_of_foreign_affairs.Nom
jeukgak haemyeng
immediately elucidation
seongmyeng.eul balpyo.ha.eoss.da
declaration.Acc announce.Pass.Ter
‘The ministry of foreign affairs in Japan im-
mediately announced their elucidation.’
(S (NP_SBJ (NP ilbon/NNP)
(NP_SBJ oimuseong/NNG+eun/JX))
(VP (AP jeukgak/MAG)
(VP (NP_OBJ (NP haemyeng/NNG)
(NP_OBJ seonmyeng/NNG+eul/JKO))
(VP balpyo/NNG+ha/XSV+eoss/EP+da/EF+./SF))))
</figure>
<figureCaption confidence="0.999511">
Figure 3. Bracketed sentence in SJTree for (1)
</figureCaption>
<subsectionHeader confidence="0.990902">
3.2 Distinction between substitution and ad-
junction operations
</subsectionHeader>
<bodyText confidence="0.9985655625">
Unlike other Treebank corpora such as English
Penn Treebank and French Paris 7 Treebank, full-
scale syntactic tags in SJTree allow us to easily
determine which node would be marked for substi-
tution or adjunction operations. Among 55 syntac-
tic tag in SJTree, nodes labeled with NP (noun
phrase), S (sentence), VNP (copular phrase) and
VP (verb phrase) which end with _CMP (attribute),
_OBJ (object), and _SJB (subject) would be
marked for substitution operation, and nodes la-
beled with the other syntactic tags except a head
node would be marked for adjunction operation. In
this distinction, some VNP and VP phrases might
be marked for substitution operation, which means
that VNP and VP phrases are arguments of a head,
because SJTree labels VNP and VP instead of NP
for the nominalization forms of VNP and VP. In
Figure 4, for example, NP_SBJ and NP_OBJ
nodes are marked for substitution operation and
AP node is marked for adjunction operation.
Children nodes marked for substitution opera-
tion are replace by substitution terminal nodes (e.g.
NP_SBJ↓) and calls recursively the extraction pro-
cedure with its subtree where a root node is the
child node itself. Children nodes marked for ad-
junction operation are removed from the main tree
and also calls recursively the extraction procedure
with its subtree where we add its parent node of a
given child node as a root node and a sibling node
as a foot node (e.g. VP*). As defined in the TAG
formalism, the foot node has the same label as the
root node of the subtree for an adjunction operation.
</bodyText>
<subsectionHeader confidence="0.999595">
3.3 Reducing trunk
</subsectionHeader>
<bodyText confidence="0.99462525">
Extracted grammars as explained above are not
always “correct” TAG grammar. Since nodes
marked for adjunction operation are removed,
there remain intermediate nodes in the main tree.
In this case, we remove these redundant nodes.
Figure 4 shows how to remove the redundant in-
termediate nodes from the extracted tree for a verb
balpyoha.eoss.da (‘announced’) in (1).
</bodyText>
<figure confidence="0.943225">
S
balpyoha.eoss.da
</figure>
<figureCaption confidence="0.9898645">
Figure 4. Removing redundant intermediate nodes
from extracted trees
</figureCaption>
<subsectionHeader confidence="0.980031">
3.4 Extracting features
</subsectionHeader>
<bodyText confidence="0.99352435483871">
55 full-scale syntactic tags and morphological
analysis in SJTree allow us to extract syntactic fea-
tures automatically and to develop FB-LTAG.
Automatically extracted FB-LTAG grammars
eventually use reduced tagset because FB-LTAG
grammars contain their syntactic information in
features structures. For example, NP_SBJ syntactic
tag in LTAG is changed into NP and a syntactic
feature &lt;case=subject&gt; is added. Therefore, we use
actually 13 reduced tagset for FB-LTAG gram-
mars. From full-scale syntactic tags which end
with _SBJ (subject), _OBJ (object) and _M
CP (at-
tribute), we extract &lt;case&gt; features which describe
argument structures in the sentence.
Alongside &lt;case&gt; features, we also extract
&lt;mode&gt; and &lt;tense&gt; from morphological analyses
in SJTree. Since however morphological analyses
for verbal and adjectival endings in SJTree are
simply divided into EP, EF and EC which mean
non-final endings, final endings and conjunctive
endings, respectively, &lt;mode&gt; and &lt;tense&gt; fea-
tures are not extracted directly from SJTree. In this
paper, we analyze 7 non-final endings (EP) and 77
final endings (EF) used in SJTree to extract auto-
matically &lt;mode&gt; and &lt;tense&gt; features. In gen-
eral, EF carries &lt;mode&gt; inflections, and EP carries
&lt;tense&gt; inflections. Conjunctive endings (EC) are
not concerned with &lt;mode&gt; and &lt;tense&gt; features
and we only extract &lt;ec&gt; features with its string
value. &lt;ef&gt; and &lt;ep&gt; features are also extracted
</bodyText>
<figure confidence="0.855263875">
S
NP_SBJ I VP
→
NP_OBJ I VP
balpyoha.eoss.da
NP_OBJ I VP
NP_SBJ I VP
VP
</figure>
<page confidence="0.986148">
75
</page>
<bodyText confidence="0.999060181818182">
with their string values. Some of non-final endings
like si are extracted as &lt;hor&gt; features which have
honorary meaning. In extracted FB-LTAG gram-
mars, we present their lexical heads in a bare in-
finitive with morphological features such as &lt;ep&gt;,
&lt;ef&gt; and &lt;ec&gt; which make correspond with its
inflected forms.
&lt;det&gt; is another automatically extractable fea-
ture in SJTree and it is extracted from both syntac-
tic tag and morphological analysis unlike other
extracted features. For example, while &lt;det=-&gt; is
extracted from dependant nouns which always
need modifiers (extracted by morphological analy-
ses), &lt;det=+&gt; is extracted from _MOD phrases
(extracted by syntactic tags). From syntactic tag
DP which contains MMs (determinative or demon-
strative), &lt;det=+&gt; is also extracted1.
The actual procedure of feature extraction is im-
plemented by 2 phases. In the first phase, we con-
vert syntactic tags and morphological analysis into
feature structure as explained above. In the second
phase, we complete feature structure onto nodes of
dorsal spine. For example, we put the same feature
of VV bottom onto VV top, VP top/bottom and S
bottom because nodes in dorsal spine share certain
number of feature of VV bottom. The initial tree
for a verb balpyoha.eoss.da is completed like Fig-
ure 5 for a FB-LTAG (see Park (2006) for details).
1 Korean does not need features &lt;person&gt; as in English and
&lt;gender &gt; or &lt;number&gt; as in French. Han et al. (2000) pro-
posed several features for Korean FBLTAG which we do not
use in this paper, such as &lt;adv-pp&gt;, &lt;top&gt; and &lt; aux-pp&gt; for
nouns and &lt;clause-type&gt; for predicates. While postpositions
are separated from eojeol during our grammar extraction pro-
cedure, Han el al. considered them as “one” inflectional mor-
phology of noun phrase eojeol. As we will explain the reason
why we separate postpositions from eojeol in the section 4, the
separation of postpositions would be much efficient for the
lexical coverage of extracted grammars. In Han et al. &lt;adv-
pp&gt; simply contains string value of adverbial postpositions.
&lt;aux-pp&gt; adds semantic meaning of auxiliary postpositions
such as only, also etc. which we can not extract automatically
from SJTree or other Korean Treebank corpora because syn-
tactically annotated Treebank corpora generally do not contain
such semantic information. &lt;top&gt; marks the presence or ab-
sence of a topic marker in Korean like neun, however topic
markers are annotated like a subject in SJTree which means
that only &lt;case=subject&gt; is extracted for topic markers.
&lt;clause-type&gt; indicates the type of the clause which has its
values such as main, coord(inative), subordi(native), ad-
nom(inal), nominal, aux-connect. Since the distinction of the
type of the clause is very vague except main clause in Korea,
we do not adopt this feature. Instead &lt;ef&gt; is extracted if a
clause type is a main clause and &lt;ec&gt; is extracted for other
type.
</bodyText>
<equation confidence="0.990008666666667">
t: -
b: &lt;ep&gt; = x, &lt;ef&gt; = y, &lt;mode&gt; = i, &lt;tense&gt; = j
t: &lt;ep&gt; = x, &lt;ef&gt; = y, &lt;mode&gt; = i, &lt;tense&gt; = j
b: &lt;ep&gt; = x, &lt;ef&gt; = y, &lt;mode&gt; = i, &lt;tense&gt; = j
t: &lt;ep&gt; = x, &lt;ef&gt; = y, &lt;mode&gt; = i, &lt;tense&gt; = j
b: &lt;ep&gt; = x, &lt;ef&gt; = y, &lt;mode&gt; = i, &lt;tense&gt; = j
t: &lt;ep&gt; = x, &lt;ef&gt; = y, &lt;mode&gt; = i, &lt;tense&gt; = j
b: &lt;ep&gt; = eoss
&lt;ef&gt; = da
&lt;mode&gt; = decl
&lt;tense&gt; = past
balpyoha
</equation>
<figureCaption confidence="0.890082">
Figure 5. Extracted FB-LTAG grammar for
balpyoha.eoss.da (‘announced’)
</figureCaption>
<sectionHeader confidence="0.77065" genericHeader="method">
4 Extraction experiments and results
</sectionHeader>
<subsectionHeader confidence="0.999274">
4.1 Extraction of lexicalized trees
</subsectionHeader>
<bodyText confidence="0.9993672">
In this paper, we extract not only lexicalized trees
without modification of a Treebank, but also ex-
tract grammars with modifications of a Treebank
using some constraints to improve the lexical cov-
erage in extracted grammars.
</bodyText>
<listItem confidence="0.920255545454545">
• G1: Using eojeols directly without modifi-
cation of SJTree.
• G2: Separating symbols and postpositions
from eojeols. Separated symbols are ex-
tracted and divided into α and R trees
based on their types. Every separated post-
position is α tree. Complex postpositions
consisted of two or more postpositions are
extracted like one α tree2. Finally, convert-
ing NP R trees into α trees and removing
syntactic tag in NP α trees.
</listItem>
<bodyText confidence="0.66368775">
Figure 6 and 7 show extracted lexicalized gram-
mars G1 and G2 from (1) respectively. Theoreti-
cally extracting order is followed by word order in
the sentence.
</bodyText>
<equation confidence="0.8696564">
β1: α1: β3:
haemyeng/NNG NP_OBJ↓ VP
balpyo/NNG+
ha/XSV+eoss/EP
+da/EF+./SF
</equation>
<figureCaption confidence="0.989179">
Figure 6. Extracted lexicalized grammars G1
</figureCaption>
<bodyText confidence="0.98336175">
2 For extracting trees of symbols and of postposition, we
newly add SYM and POSTP syntactic tags which SJTree does
not use. See Figure 11 for extracted symbol and postposition
trees.
</bodyText>
<equation confidence="0.969303590909091">
β2: α2: α3:
NP_OBJ NP_OBJ S
NP_SBJ↓ VP
NP
NP_OBJ*
seongmyeng/NNG
+eul/JKO
VP
AP VP*
jeukgak/MAG
NP_SBJ NP_SBJ
NP NP_SBJ* oimuseong/NNG
ilbon/NNP +eun/JX
S
NP↓ VP
VP
&lt;cas&gt; = nom
&lt;det&gt; = +
NP↓
VV
&lt;cas&gt; = acc
&lt;det&gt; = +
</equation>
<page confidence="0.959861">
76
</page>
<subsectionHeader confidence="0.952359">
4.2 Extraction of feature-based lexicalized
trees
</subsectionHeader>
<bodyText confidence="0.999876">
We extract feature-based lexicalized trees using
reduced tagset because FB-LTAG grammars con-
tain their syntactic information in features struc-
tures. Extracted grammars G3 remove syntactic
tags, eventually use reduced tagset, add extracted
feature structures and use infinitive forms as lexi-
cal anchor.
</bodyText>
<subsectionHeader confidence="0.999655">
4.3 Extraction of tree schemata
</subsectionHeader>
<bodyText confidence="0.944089071428572">
As mentioned in the Introduction, one of the most
serious problems in automatic grammar extraction
is its limited lexical coverage. To resolve this prob-
lem, we enlarge our extracted lexicalized gram-
mars using templates which we call tree schemata.
The lexical anchor is removed from extracted
grammars and anchor mark is replaced to form tree
schemata (for example, @NNG where the lexical-
ized anchor in extracted lexicalized grammars is a
common noun). The number of tree schemata is
much reduced against that of lexicalized grammars.
Table 2 shows the number of template trees and
the average frequency for each template grammars.
T1 means G1’s tree schemata.
</bodyText>
<table confidence="0.999036">
# of tree schemata Average frequencies
per tree schemata
T1 1,158 21.55
T2 1,077 37.05
T3 385 103.65
</table>
<tableCaption confidence="0.8884115">
Table 2. Results of experiments in converting
template grammars
</tableCaption>
<sectionHeader confidence="0.989109" genericHeader="method">
5 Evaluations
</sectionHeader>
<bodyText confidence="0.991801571428572">
First of all, the lexical coverage for G1 and G2 is
tested on the part of Sejong corpus which contains
about 770,000 “morphologically analyzed” eojeols.
After modification of SJTree, the extracted gram-
mar G2 is increased to 17.8 % compared with G1
for its lexical coverage. G2 and G3 have same lexi-
cal coverage since they have same lexical entries.
Extracted grammars in this paper are evaluated
by its size and its coverage. The size of grammars
means tree schemata according to the number of
sentences as shown in Figure 9. The coverage of
grammar is the number of occurrences of unknown
tree schemata in the corpus by the total occur-
rences of tree schemata as shown in Table 3.
</bodyText>
<figure confidence="0.991803">
(a) Threshold =1 (b) Threshold =2
</figure>
<figureCaption confidence="0.998628">
Figure 9. The size of grammars
</figureCaption>
<figure confidence="0.998755090909091">
α4:
α3:
NP
NP
eul/JKO
NP_OBJ↓ VP
SF
.
balpyo/NNG+
ha/XSV+eoss/EP
+da/EF
</figure>
<figureCaption confidence="0.950096">
Figure 7. Extracted lexicalized grammars G2
</figureCaption>
<figure confidence="0.972065522222222">
α7:
S
S
NP_OBJ
α1:
NP
ilbon/NNP
α2:
NP
oimuseong/NNG
α6:
NP_SBJ
NP_SBJ↓
haemyeng/NNG
seongmyeng/NNG
NP_OBJ↓ POSTP
NP_SBJ↓ VP
SYM
β2:
POSTP
eun/JX
AP VP*
jeukgak/MAG
α5:
S*
β1:
VP
eun
eul
jeukgak
.
• G3: Using reduced tagset and a lexical an-
chor is an infinitive and adding extracted
feature structures.
G3 row in Table 1 below shows the results of ex-
traction procedures above. Figure 8 shows ex-
tracted feature-based lexicalized grammars G3
from (1)
α5:
&lt;cas&gt; = x
NP↓ VP
&lt;cas&gt; = nom
&lt;det&gt; = +
ilbon
β1:
α7:
α6:
α1:
NP
α3:
NP
α2:
NP
α4:
NP
NNP
NNG
NNG
NNG
seongmyeng
NP↓
&lt;cas&gt; = acc
&lt;det&gt; = +
β2:
haemyeng
oimuseong
b: &lt;ep&gt; = eoss
&lt;ef&gt; = da
&lt;mode&gt; = decl
&lt;tense&gt; = past
S
&lt;cas&gt; = x &lt;cas&gt; = x &lt;cas&gt; = x
VP
VV
NP↓ POSTP
NP↓ POSTP
ADVP VP*
S*
SYM
JX
JKO
ADV
SF
&lt;cas&gt; = x &lt;cas&gt; = x
NP
NP
&lt;cas&gt; = nom &lt;cas&gt; = acc
VP
S
balpyoha
</figure>
<figureCaption confidence="0.9298525">
Figure 8. Extracted feature-based lexicalized
grammars G3 3.
</figureCaption>
<table confidence="0.9410824">
# of ltrees Average frequen-
(lexicalized tree) cies per ltrees
G1 18,080 1.38
G2 15,551 2.57
G3 12,429 3.21
</table>
<tableCaption confidence="0.9748875">
Table 1. Results of experiments in extracting lexi-
calized and feature-based lexicalized grammars
</tableCaption>
<footnote confidence="0.860029">
3 To simplify the figure, we note only feature structure which
is necessary to understand.
</footnote>
<page confidence="0.992788">
77
</page>
<table confidence="0.991822">
Threshold = 1 Threshold = 2
G1 0.9326 0.9591
G2 0.9326 0.9525
G3 0.9579 0.9638
</table>
<tableCaption confidence="0.92076">
Table 3. Coverage of grammars: 90% of training
set (2,273 sentences) and 10% of test set (253 sen-
</tableCaption>
<bodyText confidence="0.941048555555555">
tences)
We manually overlap our 163 tree schemata for
predicates from T3, which contain 14 subcategori-
zation frames with 11 subcategorization frames of
a FB-LTAG grammar proposed in Han et al.
(2000) to evaluate the coverage of hand-crafted
grammars 4 . Our extracted template grammars
cover 72.7 % of their hand-crafted subcategoriza-
tion frames5.
</bodyText>
<sectionHeader confidence="0.999636" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999541583333333">
In this paper, we have presented a system for
automatic grammar extraction that produces lexi-
calized and feature-based lexicalized grammars
from a Treebank. Also, to resolve the problem of
limited lexical coverage of extracted grammars, we
separated symbols and postposition, and then con-
verted these grammars into template grammars.
Extracted grammars and lexical-anchor-less tem-
plate grammars might be used for parsers to ana-
lyze the Korean sentences and frequency
information might be used to remove ambiguities
among possible syntactic analyses of parsers.
</bodyText>
<sectionHeader confidence="0.99881" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.997822265625">
Candito, Marie-Hélène. 1999. Organisation modulaire
et paramétrable de grammaire électronique lexicali-
sées. Ph.D. thesis, Université Paris 7.
4 Our extracted tree schemata contain not only subcategoriza-
tion frames but also some phenomena of syntactic variations,
the number of lexicalized trees and the frequency information
while Han el al. (2000) only presents subcategorization frames
and some phenomena.
5 Three subcategorization frames in Han el al. (2000) which
contain prepositional phrases are not covered by our extracted
tree schemata. Generally, prepositional phrases in SJTree are
labeled with _AJT which is marked for adjunction operation.
Since there is no difference between noun adverbial phrase
and prepositional phrases in SJTree like [S na.neun [NP_AJT
ojeon.e ‘morning’] [NP_AJT hakgyo.e ‘to school’] ga.ss.da] (‘I
went to school this morning’), we do not consider _AJT
phrases as arguments.
Chen, John. 2001. Towards Efficient Statistical Parsing
Using Lexicalized Grammatical Information. Ph.D.
thesis, University of Delaware.
Chiang, David. 2000. Statistical Parsing with an Auto-
matically-Extracted Tree Adjoining Grammar. In
Data Oriented Parsing, CSLI Publication, pp. 299-
316.
Habash, Nizar and Owen Rambow. 2004. Extracting a
Tree Adjoining Grammar from the Penn Arabic
Treebank. In Proceedings of Traitement Automatique
du Langues Naturelles (TALN-04). Fez, Morocco,
2004.
Han, Chunghye, Juntae Yoon, Nari Kim, and Martha
Palmer. 2000. A Feature-Based Lexicalized Tree Ad-
joining Grammar for Korean. IRCS Technical Re-
port 00-04. University of Pennsylvania.
Johansen, Ane Dybro. 2004. Extraction des grammaires
LTAG à partir d’un corpus étiquette syntaxiquement.
DEA mémoire, Université Paris 7.
Nasr, Alexis. 2004. Analyse syntaxique probabiliste
pour grammaires de dépendances extraites automa-
tiquement. Habilitation à diriger des recherches, Uni-
versité Paris 7.
Neumann, Günter. 2003. A Uniform Method for Auto-
matically Extracting Stochastic Lexicalized Tree
Grammar from Treebank and HPSG, In A. Abeillé
(ed) Treebanks: Building and Using Parsed Corpora,
Kluwer, Dordrecht.
Park, Jungyeul. 2006. Extraction d’une grammaire
d’arbres adjoints à partir d’un corpus arboré pour le
coréen. Ph.D. thesis, Université Paris 7.
Sag, Ivan A., Thomas Wasow, and Emily M. Bender.
2003. Syntactic Theory: A Formal Introduction, 2nd
ed. CSLI Lecture Notes.
Vijay-Shanker, K. and Aravind K. Joshi. 1991. Unifica-
tion Based Tree Adjoining Grammar, in J. Wedekind
ed., Unification-based Grammars, MIT Press, Cam-
bridge, Massachusetts.
Xia, Fei, Martha Palmer, and Aravind K. Joshi. 2000. A
Uniform Method of Grammar Extraction and Its Ap-
plication. In The Joint SIGDAT Conference on Em-
pirical Methods in Natural Language Processing and
Very Large Corpora (EMNLP/VLC-2000), Hong
Kong, Oct 7-8, 2000.
Xia, Fei. 2001. Automatic Grammar Generation from
Two Different Perspectives. Ph.D. thesis, University
of Pennsylvania, PA.
</reference>
<page confidence="0.998828">
78
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.493335">
<title confidence="0.998801">Extraction of Tree Adjoining Grammars from a Treebank for Korean</title>
<author confidence="0.996693">Jungyeul Park</author>
<affiliation confidence="0.9556715">UFR Linguistique Laboratoire de linguistique formelle</affiliation>
<address confidence="0.631313">Université Paris VII - Denis Diderot</address>
<email confidence="0.967597">jungyeul.park@linguist.jussieu.fr</email>
<abstract confidence="0.9877475625">We present the implementation of a system which extracts not only lexicalized grammars but also feature-based lexicalized from Korean We report on some practical experiments where we extract TAG grammars and tree schemata. Above all, full-scale syntactic tags and well-formed morphological analyin allow us to extract syntactic features. In addition, we modify Treebank for extracting lexicalized grammars and convert lexicalized grammars into tree schemata to resolve limited lexical coverage problem of extracted lexicalized grammars.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Marie-Hélène Candito</author>
</authors>
<title>Organisation modulaire et paramétrable de grammaire électronique lexicalisées.</title>
<date>1999</date>
<tech>Ph.D. thesis,</tech>
<institution>Université Paris</institution>
<contexts>
<context position="2172" citStr="Candito (1999)" startWordPosition="319" endWordPosition="320">ferent depending on the user’s specific purpose. The automatically extracted grammar has the advantage of the coherence of extracted grammars and the rapidity of its development. However, as it always depends on the Treebank which the extraction system uses, its coverage could be limited to the scale of a Treebank. Moreover, the reliable Treebank would be hardly found, especially in public domain. Semi-automatic grammar development means that a system generates the grammar using the description of the language-specific syntactic (or linguistic) variations and its constraints. A metagrammar in Candito (1999) and a tree description in Xia (2001) are good examples of a semiautomatic grammar development. Even using semi-automatic grammar development, we need the good description of linguistic phenomena for specific language which requires very high level knowledge of linguistics and the semiautomatically generated grammars would easily have an overflow problem. Since we might extract the grammar automatically without many efforts if a reliable Treebank is provided, in this paper we implement a system which extracts a Lexicalized Tree Adjoining Grammar and a Feature-based Lexicalized Tree Adjoining G</context>
</contexts>
<marker>Candito, 1999</marker>
<rawString>Candito, Marie-Hélène. 1999. Organisation modulaire et paramétrable de grammaire électronique lexicalisées. Ph.D. thesis, Université Paris 7.</rawString>
</citation>
<citation valid="true">
<title>4 Our extracted tree schemata contain not only subcategorization frames but also some phenomena of syntactic variations, the number of lexicalized trees and the frequency information while Han el al.</title>
<date>2000</date>
<contexts>
<context position="5431" citStr="(2000)" startWordPosition="840" endWordPosition="840">. Substitution in FB-LTAG The node being adjoined into splits and its top feature (f) unifies with the top feature (f1) of the root adjoining node, while its bottom feature (g) unifies with the bottom feature (g2) of the foot adjoining node as shown in Figure 2. X Figure 2. Adjunction in FB-LTAG Several works for extracting grammars, especially for TAG formalism are proposed. Chen (2001) extracted lexicalized grammars from English Penn Treebank and there are other works based on Chen’s procedure such as Johansen (2004) and Nasr (2004) for French and Habash and Rambow (2004) for Arabic. Chiang (2000) used Tree Insertion Grammars, one variation of TAG formalism for his extraction system from English Penn Treebank. Xia et al. (2000) developed the uniform method of a grammar extraction for English, Chinese and Korean. Neumann (2003) extracted Lexicalized Tree Grammars from English Penn Treebank for English and from NEGRA Treebank for German. As mentioned above, none of these works tried to extract syntactic features for FBLTAG. 3 Grammar extraction scheme Before extracting a grammar automatically, we transform the bracket structure sentence in SJTree into a tree data structure. Afterward, us</context>
<context position="12925" citStr="(2000)" startWordPosition="2047" endWordPosition="2047">ed by 2 phases. In the first phase, we convert syntactic tags and morphological analysis into feature structure as explained above. In the second phase, we complete feature structure onto nodes of dorsal spine. For example, we put the same feature of VV bottom onto VV top, VP top/bottom and S bottom because nodes in dorsal spine share certain number of feature of VV bottom. The initial tree for a verb balpyoha.eoss.da is completed like Figure 5 for a FB-LTAG (see Park (2006) for details). 1 Korean does not need features &lt;person&gt; as in English and &lt;gender &gt; or &lt;number&gt; as in French. Han et al. (2000) proposed several features for Korean FBLTAG which we do not use in this paper, such as &lt;adv-pp&gt;, &lt;top&gt; and &lt; aux-pp&gt; for nouns and &lt;clause-type&gt; for predicates. While postpositions are separated from eojeol during our grammar extraction procedure, Han el al. considered them as “one” inflectional morphology of noun phrase eojeol. As we will explain the reason why we separate postpositions from eojeol in the section 4, the separation of postpositions would be much efficient for the lexical coverage of extracted grammars. In Han et al. &lt;advpp&gt; simply contains string value of adverbial postpositi</context>
<context position="19832" citStr="(2000)" startWordPosition="3244" endWordPosition="3244">,080 1.38 G2 15,551 2.57 G3 12,429 3.21 Table 1. Results of experiments in extracting lexicalized and feature-based lexicalized grammars 3 To simplify the figure, we note only feature structure which is necessary to understand. 77 Threshold = 1 Threshold = 2 G1 0.9326 0.9591 G2 0.9326 0.9525 G3 0.9579 0.9638 Table 3. Coverage of grammars: 90% of training set (2,273 sentences) and 10% of test set (253 sentences) We manually overlap our 163 tree schemata for predicates from T3, which contain 14 subcategorization frames with 11 subcategorization frames of a FB-LTAG grammar proposed in Han et al. (2000) to evaluate the coverage of hand-crafted grammars 4 . Our extracted template grammars cover 72.7 % of their hand-crafted subcategorization frames5. 6 Conclusion In this paper, we have presented a system for automatic grammar extraction that produces lexicalized and feature-based lexicalized grammars from a Treebank. Also, to resolve the problem of limited lexical coverage of extracted grammars, we separated symbols and postposition, and then converted these grammars into template grammars. Extracted grammars and lexical-anchor-less template grammars might be used for parsers to analyze the Ko</context>
</contexts>
<marker>2000</marker>
<rawString>4 Our extracted tree schemata contain not only subcategorization frames but also some phenomena of syntactic variations, the number of lexicalized trees and the frequency information while Han el al. (2000) only presents subcategorization frames and some phenomena.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Han el al</author>
</authors>
<title>5 Three subcategorization frames in</title>
<date>2000</date>
<marker>el al, 2000</marker>
<rawString>5 Three subcategorization frames in Han el al. (2000) which contain prepositional phrases are not covered by our extracted tree schemata. Generally, prepositional phrases in SJTree are labeled with _AJT which is marked for adjunction operation. Since there is no difference between noun adverbial phrase and prepositional phrases in SJTree like [S na.neun [NP_AJT ojeon.e ‘morning’] [NP_AJT hakgyo.e ‘to school’] ga.ss.da] (‘I went to school this morning’), we do not consider _AJT phrases as arguments.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Chen</author>
</authors>
<title>Towards Efficient Statistical Parsing Using Lexicalized Grammatical Information.</title>
<date>2001</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Delaware.</institution>
<contexts>
<context position="5215" citStr="Chen (2001)" startWordPosition="805" endWordPosition="806"> the two original nodes, while the bottom feature of the new node is simply the bottom feature (g1) of the top node of the substituting tree since the substitution node has no bottom feature as shown in Figure 1. Figure 1. Substitution in FB-LTAG The node being adjoined into splits and its top feature (f) unifies with the top feature (f1) of the root adjoining node, while its bottom feature (g) unifies with the bottom feature (g2) of the foot adjoining node as shown in Figure 2. X Figure 2. Adjunction in FB-LTAG Several works for extracting grammars, especially for TAG formalism are proposed. Chen (2001) extracted lexicalized grammars from English Penn Treebank and there are other works based on Chen’s procedure such as Johansen (2004) and Nasr (2004) for French and Habash and Rambow (2004) for Arabic. Chiang (2000) used Tree Insertion Grammars, one variation of TAG formalism for his extraction system from English Penn Treebank. Xia et al. (2000) developed the uniform method of a grammar extraction for English, Chinese and Korean. Neumann (2003) extracted Lexicalized Tree Grammars from English Penn Treebank for English and from NEGRA Treebank for German. As mentioned above, none of these work</context>
</contexts>
<marker>Chen, 2001</marker>
<rawString>Chen, John. 2001. Towards Efficient Statistical Parsing Using Lexicalized Grammatical Information. Ph.D. thesis, University of Delaware.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Chiang</author>
</authors>
<title>Statistical Parsing with an Automatically-Extracted Tree Adjoining Grammar.</title>
<date>2000</date>
<booktitle>In Data Oriented Parsing, CSLI Publication,</booktitle>
<pages>299--316</pages>
<contexts>
<context position="5431" citStr="Chiang (2000)" startWordPosition="839" endWordPosition="840">igure 1. Substitution in FB-LTAG The node being adjoined into splits and its top feature (f) unifies with the top feature (f1) of the root adjoining node, while its bottom feature (g) unifies with the bottom feature (g2) of the foot adjoining node as shown in Figure 2. X Figure 2. Adjunction in FB-LTAG Several works for extracting grammars, especially for TAG formalism are proposed. Chen (2001) extracted lexicalized grammars from English Penn Treebank and there are other works based on Chen’s procedure such as Johansen (2004) and Nasr (2004) for French and Habash and Rambow (2004) for Arabic. Chiang (2000) used Tree Insertion Grammars, one variation of TAG formalism for his extraction system from English Penn Treebank. Xia et al. (2000) developed the uniform method of a grammar extraction for English, Chinese and Korean. Neumann (2003) extracted Lexicalized Tree Grammars from English Penn Treebank for English and from NEGRA Treebank for German. As mentioned above, none of these works tried to extract syntactic features for FBLTAG. 3 Grammar extraction scheme Before extracting a grammar automatically, we transform the bracket structure sentence in SJTree into a tree data structure. Afterward, us</context>
</contexts>
<marker>Chiang, 2000</marker>
<rawString>Chiang, David. 2000. Statistical Parsing with an Automatically-Extracted Tree Adjoining Grammar. In Data Oriented Parsing, CSLI Publication, pp. 299-316.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nizar Habash</author>
<author>Owen Rambow</author>
</authors>
<title>Extracting a Tree Adjoining Grammar from the Penn Arabic Treebank.</title>
<date>2004</date>
<booktitle>In Proceedings of Traitement Automatique du Langues Naturelles (TALN-04).</booktitle>
<location>Fez, Morocco,</location>
<contexts>
<context position="5405" citStr="Habash and Rambow (2004)" startWordPosition="833" endWordPosition="836">ottom feature as shown in Figure 1. Figure 1. Substitution in FB-LTAG The node being adjoined into splits and its top feature (f) unifies with the top feature (f1) of the root adjoining node, while its bottom feature (g) unifies with the bottom feature (g2) of the foot adjoining node as shown in Figure 2. X Figure 2. Adjunction in FB-LTAG Several works for extracting grammars, especially for TAG formalism are proposed. Chen (2001) extracted lexicalized grammars from English Penn Treebank and there are other works based on Chen’s procedure such as Johansen (2004) and Nasr (2004) for French and Habash and Rambow (2004) for Arabic. Chiang (2000) used Tree Insertion Grammars, one variation of TAG formalism for his extraction system from English Penn Treebank. Xia et al. (2000) developed the uniform method of a grammar extraction for English, Chinese and Korean. Neumann (2003) extracted Lexicalized Tree Grammars from English Penn Treebank for English and from NEGRA Treebank for German. As mentioned above, none of these works tried to extract syntactic features for FBLTAG. 3 Grammar extraction scheme Before extracting a grammar automatically, we transform the bracket structure sentence in SJTree into a tree dat</context>
</contexts>
<marker>Habash, Rambow, 2004</marker>
<rawString>Habash, Nizar and Owen Rambow. 2004. Extracting a Tree Adjoining Grammar from the Penn Arabic Treebank. In Proceedings of Traitement Automatique du Langues Naturelles (TALN-04). Fez, Morocco, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chunghye Han</author>
<author>Juntae Yoon</author>
<author>Nari Kim</author>
<author>Martha Palmer</author>
</authors>
<title>A Feature-Based Lexicalized Tree Adjoining Grammar for Korean.</title>
<date>2000</date>
<tech>IRCS Technical Report 00-04.</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="4400" citStr="Han et al., 2000" startWordPosition="657" endWordPosition="660">is a way of representing grammatical information. Formally feature structure consists of a specification of a set of features, each of which is paired with a particular value (Sag et al., 2003). In a unification frame, a feature structure is associated with each node in an elementary tree (Vijay-Shanker and Joshi, 1991). This feature structure contains information about how the node interacts with other nodes in the tree. It consists of a top part, which generally contains information relating to the super-node, and a bottom part, which generally contains information relating to the sub-node (Han et al., 2000). In FB-LTAG, the feature structure of a new node created by substitution inherits the union of the features of the original nodes. The top feature of new node is the union of the top features (f1 ∪ f) of the two original nodes, while the bottom feature of the new node is simply the bottom feature (g1) of the top node of the substituting tree since the substitution node has no bottom feature as shown in Figure 1. Figure 1. Substitution in FB-LTAG The node being adjoined into splits and its top feature (f) unifies with the top feature (f1) of the root adjoining node, while its bottom feature (g</context>
<context position="12925" citStr="Han et al. (2000)" startWordPosition="2044" endWordPosition="2047">s implemented by 2 phases. In the first phase, we convert syntactic tags and morphological analysis into feature structure as explained above. In the second phase, we complete feature structure onto nodes of dorsal spine. For example, we put the same feature of VV bottom onto VV top, VP top/bottom and S bottom because nodes in dorsal spine share certain number of feature of VV bottom. The initial tree for a verb balpyoha.eoss.da is completed like Figure 5 for a FB-LTAG (see Park (2006) for details). 1 Korean does not need features &lt;person&gt; as in English and &lt;gender &gt; or &lt;number&gt; as in French. Han et al. (2000) proposed several features for Korean FBLTAG which we do not use in this paper, such as &lt;adv-pp&gt;, &lt;top&gt; and &lt; aux-pp&gt; for nouns and &lt;clause-type&gt; for predicates. While postpositions are separated from eojeol during our grammar extraction procedure, Han el al. considered them as “one” inflectional morphology of noun phrase eojeol. As we will explain the reason why we separate postpositions from eojeol in the section 4, the separation of postpositions would be much efficient for the lexical coverage of extracted grammars. In Han et al. &lt;advpp&gt; simply contains string value of adverbial postpositi</context>
<context position="19832" citStr="Han et al. (2000)" startWordPosition="3241" endWordPosition="3244">trees G1 18,080 1.38 G2 15,551 2.57 G3 12,429 3.21 Table 1. Results of experiments in extracting lexicalized and feature-based lexicalized grammars 3 To simplify the figure, we note only feature structure which is necessary to understand. 77 Threshold = 1 Threshold = 2 G1 0.9326 0.9591 G2 0.9326 0.9525 G3 0.9579 0.9638 Table 3. Coverage of grammars: 90% of training set (2,273 sentences) and 10% of test set (253 sentences) We manually overlap our 163 tree schemata for predicates from T3, which contain 14 subcategorization frames with 11 subcategorization frames of a FB-LTAG grammar proposed in Han et al. (2000) to evaluate the coverage of hand-crafted grammars 4 . Our extracted template grammars cover 72.7 % of their hand-crafted subcategorization frames5. 6 Conclusion In this paper, we have presented a system for automatic grammar extraction that produces lexicalized and feature-based lexicalized grammars from a Treebank. Also, to resolve the problem of limited lexical coverage of extracted grammars, we separated symbols and postposition, and then converted these grammars into template grammars. Extracted grammars and lexical-anchor-less template grammars might be used for parsers to analyze the Ko</context>
</contexts>
<marker>Han, Yoon, Kim, Palmer, 2000</marker>
<rawString>Han, Chunghye, Juntae Yoon, Nari Kim, and Martha Palmer. 2000. A Feature-Based Lexicalized Tree Adjoining Grammar for Korean. IRCS Technical Report 00-04. University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ane Dybro Johansen</author>
</authors>
<title>Extraction des grammaires LTAG à partir d’un corpus étiquette syntaxiquement. DEA mémoire, Université Paris 7.</title>
<date>2004</date>
<contexts>
<context position="5349" citStr="Johansen (2004)" startWordPosition="825" endWordPosition="826">uting tree since the substitution node has no bottom feature as shown in Figure 1. Figure 1. Substitution in FB-LTAG The node being adjoined into splits and its top feature (f) unifies with the top feature (f1) of the root adjoining node, while its bottom feature (g) unifies with the bottom feature (g2) of the foot adjoining node as shown in Figure 2. X Figure 2. Adjunction in FB-LTAG Several works for extracting grammars, especially for TAG formalism are proposed. Chen (2001) extracted lexicalized grammars from English Penn Treebank and there are other works based on Chen’s procedure such as Johansen (2004) and Nasr (2004) for French and Habash and Rambow (2004) for Arabic. Chiang (2000) used Tree Insertion Grammars, one variation of TAG formalism for his extraction system from English Penn Treebank. Xia et al. (2000) developed the uniform method of a grammar extraction for English, Chinese and Korean. Neumann (2003) extracted Lexicalized Tree Grammars from English Penn Treebank for English and from NEGRA Treebank for German. As mentioned above, none of these works tried to extract syntactic features for FBLTAG. 3 Grammar extraction scheme Before extracting a grammar automatically, we transform </context>
</contexts>
<marker>Johansen, 2004</marker>
<rawString>Johansen, Ane Dybro. 2004. Extraction des grammaires LTAG à partir d’un corpus étiquette syntaxiquement. DEA mémoire, Université Paris 7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alexis Nasr</author>
</authors>
<title>Analyse syntaxique probabiliste pour grammaires de dépendances extraites automatiquement. Habilitation à diriger des recherches, Université Paris 7.</title>
<date>2004</date>
<contexts>
<context position="5365" citStr="Nasr (2004)" startWordPosition="828" endWordPosition="829"> substitution node has no bottom feature as shown in Figure 1. Figure 1. Substitution in FB-LTAG The node being adjoined into splits and its top feature (f) unifies with the top feature (f1) of the root adjoining node, while its bottom feature (g) unifies with the bottom feature (g2) of the foot adjoining node as shown in Figure 2. X Figure 2. Adjunction in FB-LTAG Several works for extracting grammars, especially for TAG formalism are proposed. Chen (2001) extracted lexicalized grammars from English Penn Treebank and there are other works based on Chen’s procedure such as Johansen (2004) and Nasr (2004) for French and Habash and Rambow (2004) for Arabic. Chiang (2000) used Tree Insertion Grammars, one variation of TAG formalism for his extraction system from English Penn Treebank. Xia et al. (2000) developed the uniform method of a grammar extraction for English, Chinese and Korean. Neumann (2003) extracted Lexicalized Tree Grammars from English Penn Treebank for English and from NEGRA Treebank for German. As mentioned above, none of these works tried to extract syntactic features for FBLTAG. 3 Grammar extraction scheme Before extracting a grammar automatically, we transform the bracket stru</context>
</contexts>
<marker>Nasr, 2004</marker>
<rawString>Nasr, Alexis. 2004. Analyse syntaxique probabiliste pour grammaires de dépendances extraites automatiquement. Habilitation à diriger des recherches, Université Paris 7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Günter Neumann</author>
</authors>
<title>A Uniform Method for Automatically Extracting Stochastic Lexicalized Tree Grammar from Treebank and HPSG, In A. Abeillé (ed) Treebanks: Building and Using Parsed Corpora,</title>
<date>2003</date>
<location>Kluwer, Dordrecht.</location>
<contexts>
<context position="5665" citStr="Neumann (2003)" startWordPosition="878" endWordPosition="879">adjoining node as shown in Figure 2. X Figure 2. Adjunction in FB-LTAG Several works for extracting grammars, especially for TAG formalism are proposed. Chen (2001) extracted lexicalized grammars from English Penn Treebank and there are other works based on Chen’s procedure such as Johansen (2004) and Nasr (2004) for French and Habash and Rambow (2004) for Arabic. Chiang (2000) used Tree Insertion Grammars, one variation of TAG formalism for his extraction system from English Penn Treebank. Xia et al. (2000) developed the uniform method of a grammar extraction for English, Chinese and Korean. Neumann (2003) extracted Lexicalized Tree Grammars from English Penn Treebank for English and from NEGRA Treebank for German. As mentioned above, none of these works tried to extract syntactic features for FBLTAG. 3 Grammar extraction scheme Before extracting a grammar automatically, we transform the bracket structure sentence in SJTree into a tree data structure. Afterward, using depthfirst algorithm for a tree traverse, we determine a head and the type of operations (substitution or adjunction) for children nodes of the given node if the given node is a non-terminal node. 3.1 Determination of a head For t</context>
</contexts>
<marker>Neumann, 2003</marker>
<rawString>Neumann, Günter. 2003. A Uniform Method for Automatically Extracting Stochastic Lexicalized Tree Grammar from Treebank and HPSG, In A. Abeillé (ed) Treebanks: Building and Using Parsed Corpora, Kluwer, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jungyeul Park</author>
</authors>
<title>Extraction d’une grammaire d’arbres adjoints à partir d’un corpus arboré pour le coréen.</title>
<date>2006</date>
<tech>Ph.D. thesis,</tech>
<institution>Université Paris</institution>
<contexts>
<context position="12798" citStr="Park (2006)" startWordPosition="2022" endWordPosition="2023">h contains MMs (determinative or demonstrative), &lt;det=+&gt; is also extracted1. The actual procedure of feature extraction is implemented by 2 phases. In the first phase, we convert syntactic tags and morphological analysis into feature structure as explained above. In the second phase, we complete feature structure onto nodes of dorsal spine. For example, we put the same feature of VV bottom onto VV top, VP top/bottom and S bottom because nodes in dorsal spine share certain number of feature of VV bottom. The initial tree for a verb balpyoha.eoss.da is completed like Figure 5 for a FB-LTAG (see Park (2006) for details). 1 Korean does not need features &lt;person&gt; as in English and &lt;gender &gt; or &lt;number&gt; as in French. Han et al. (2000) proposed several features for Korean FBLTAG which we do not use in this paper, such as &lt;adv-pp&gt;, &lt;top&gt; and &lt; aux-pp&gt; for nouns and &lt;clause-type&gt; for predicates. While postpositions are separated from eojeol during our grammar extraction procedure, Han el al. considered them as “one” inflectional morphology of noun phrase eojeol. As we will explain the reason why we separate postpositions from eojeol in the section 4, the separation of postpositions would be much effic</context>
</contexts>
<marker>Park, 2006</marker>
<rawString>Park, Jungyeul. 2006. Extraction d’une grammaire d’arbres adjoints à partir d’un corpus arboré pour le coréen. Ph.D. thesis, Université Paris 7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ivan A Sag</author>
<author>Thomas Wasow</author>
<author>Emily M Bender</author>
</authors>
<date>2003</date>
<booktitle>Syntactic Theory: A Formal Introduction, 2nd ed. CSLI Lecture Notes.</booktitle>
<contexts>
<context position="3976" citStr="Sag et al., 2003" startWordPosition="590" endWordPosition="593">ydney, July 2006. c�2006 Association for Computational Linguistics First, we briefly present features structures which are focused on FB-LTAG and other previous works for extracting a grammar from a Treebank. Then, we explain our grammar extraction scheme and report experimental results. Finally, we discuss the conclusion. 2 Feature structures and previous works on extracting grammars from a Treebank A feature structure is a way of representing grammatical information. Formally feature structure consists of a specification of a set of features, each of which is paired with a particular value (Sag et al., 2003). In a unification frame, a feature structure is associated with each node in an elementary tree (Vijay-Shanker and Joshi, 1991). This feature structure contains information about how the node interacts with other nodes in the tree. It consists of a top part, which generally contains information relating to the super-node, and a bottom part, which generally contains information relating to the sub-node (Han et al., 2000). In FB-LTAG, the feature structure of a new node created by substitution inherits the union of the features of the original nodes. The top feature of new node is the union of </context>
</contexts>
<marker>Sag, Wasow, Bender, 2003</marker>
<rawString>Sag, Ivan A., Thomas Wasow, and Emily M. Bender. 2003. Syntactic Theory: A Formal Introduction, 2nd ed. CSLI Lecture Notes.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>Aravind K Joshi</author>
</authors>
<title>Unification Based Tree Adjoining Grammar,</title>
<date>1991</date>
<editor>in J. Wedekind ed., Unification-based Grammars,</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, Massachusetts.</location>
<contexts>
<context position="4104" citStr="Vijay-Shanker and Joshi, 1991" startWordPosition="611" endWordPosition="614">ich are focused on FB-LTAG and other previous works for extracting a grammar from a Treebank. Then, we explain our grammar extraction scheme and report experimental results. Finally, we discuss the conclusion. 2 Feature structures and previous works on extracting grammars from a Treebank A feature structure is a way of representing grammatical information. Formally feature structure consists of a specification of a set of features, each of which is paired with a particular value (Sag et al., 2003). In a unification frame, a feature structure is associated with each node in an elementary tree (Vijay-Shanker and Joshi, 1991). This feature structure contains information about how the node interacts with other nodes in the tree. It consists of a top part, which generally contains information relating to the super-node, and a bottom part, which generally contains information relating to the sub-node (Han et al., 2000). In FB-LTAG, the feature structure of a new node created by substitution inherits the union of the features of the original nodes. The top feature of new node is the union of the top features (f1 ∪ f) of the two original nodes, while the bottom feature of the new node is simply the bottom feature (g1) </context>
</contexts>
<marker>Vijay-Shanker, Joshi, 1991</marker>
<rawString>Vijay-Shanker, K. and Aravind K. Joshi. 1991. Unification Based Tree Adjoining Grammar, in J. Wedekind ed., Unification-based Grammars, MIT Press, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fei Xia</author>
<author>Martha Palmer</author>
<author>Aravind K Joshi</author>
</authors>
<title>A Uniform Method of Grammar Extraction and Its Application.</title>
<date>2000</date>
<booktitle>In The Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora (EMNLP/VLC-2000),</booktitle>
<location>Hong Kong,</location>
<contexts>
<context position="5564" citStr="Xia et al. (2000)" startWordPosition="860" endWordPosition="863"> the root adjoining node, while its bottom feature (g) unifies with the bottom feature (g2) of the foot adjoining node as shown in Figure 2. X Figure 2. Adjunction in FB-LTAG Several works for extracting grammars, especially for TAG formalism are proposed. Chen (2001) extracted lexicalized grammars from English Penn Treebank and there are other works based on Chen’s procedure such as Johansen (2004) and Nasr (2004) for French and Habash and Rambow (2004) for Arabic. Chiang (2000) used Tree Insertion Grammars, one variation of TAG formalism for his extraction system from English Penn Treebank. Xia et al. (2000) developed the uniform method of a grammar extraction for English, Chinese and Korean. Neumann (2003) extracted Lexicalized Tree Grammars from English Penn Treebank for English and from NEGRA Treebank for German. As mentioned above, none of these works tried to extract syntactic features for FBLTAG. 3 Grammar extraction scheme Before extracting a grammar automatically, we transform the bracket structure sentence in SJTree into a tree data structure. Afterward, using depthfirst algorithm for a tree traverse, we determine a head and the type of operations (substitution or adjunction) for childre</context>
</contexts>
<marker>Xia, Palmer, Joshi, 2000</marker>
<rawString>Xia, Fei, Martha Palmer, and Aravind K. Joshi. 2000. A Uniform Method of Grammar Extraction and Its Application. In The Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora (EMNLP/VLC-2000), Hong Kong, Oct 7-8, 2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fei Xia</author>
</authors>
<title>Automatic Grammar Generation from Two Different Perspectives.</title>
<date>2001</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania, PA.</institution>
<contexts>
<context position="2209" citStr="Xia (2001)" startWordPosition="326" endWordPosition="327">urpose. The automatically extracted grammar has the advantage of the coherence of extracted grammars and the rapidity of its development. However, as it always depends on the Treebank which the extraction system uses, its coverage could be limited to the scale of a Treebank. Moreover, the reliable Treebank would be hardly found, especially in public domain. Semi-automatic grammar development means that a system generates the grammar using the description of the language-specific syntactic (or linguistic) variations and its constraints. A metagrammar in Candito (1999) and a tree description in Xia (2001) are good examples of a semiautomatic grammar development. Even using semi-automatic grammar development, we need the good description of linguistic phenomena for specific language which requires very high level knowledge of linguistics and the semiautomatically generated grammars would easily have an overflow problem. Since we might extract the grammar automatically without many efforts if a reliable Treebank is provided, in this paper we implement a system which extracts a Lexicalized Tree Adjoining Grammar and a Feature-based Lexicalized Tree Adjoining Grammar from Korean Sejong Treebank (S</context>
</contexts>
<marker>Xia, 2001</marker>
<rawString>Xia, Fei. 2001. Automatic Grammar Generation from Two Different Perspectives. Ph.D. thesis, University of Pennsylvania, PA.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>