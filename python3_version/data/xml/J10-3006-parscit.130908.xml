<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.995595666666667">
Complexity, Parsing, and Factorization
of Tree-Local Multi-Component
Tree-Adjoining Grammar
</title>
<author confidence="0.999265">
Rebecca Nesson*
</author>
<affiliation confidence="0.947547666666667">
School of Engineering and Applied
Sciences,
Harvard University
</affiliation>
<author confidence="0.995848">
Giorgio Satta**
</author>
<affiliation confidence="0.9986695">
Department of Information Engineering
University of Padua
</affiliation>
<author confidence="0.991467">
Stuart M. Shieber†
</author>
<affiliation confidence="0.833424">
School of Engineering and Applied
Sciences
Harvard University
</affiliation>
<subsubsectionHeader confidence="0.36091">
Tree-Local Multi-Component Tree-Adjoining Grammar (TL-MCTAG) is an appealing formal-
</subsubsectionHeader>
<bodyText confidence="0.983799066666666">
ism for natural language representation because it arguably allows the encapsulation of the
appropriate domain of locality within its elementary structures. Its multicomponent structure
allows modeling of lexical items that may ultimately have elements far apart in a sentence, such
as quantifiers and wh-words. When used as the base formalism for a synchronous grammar, its
flexibility allows it to express both the close relationships and the divergent structure necessary
to capture the links between the syntax and semantics of a single language or the syntax of
two different languages. Its limited expressivity provides constraints on movement and, we
posit, may have generated additional popularity based on a misconception about its parsing
complexity.
Although TL-MCTAG was shown to be equivalent in expressivity to TAG when it was
first introduced, the complexity of TL-MCTAG is still not well understood. This article offers
a thorough examination of the problem of TL-MCTAG recognition, showing that even highly
restricted forms of TL-MCTAG are NP-complete to recognize. However, in spite of the provable
difficulty of the recognition problem, we offer several algorithms that can substantially improve
processing efficiency. First, we present a parsing algorithm that improves on the baseline parsing
</bodyText>
<note confidence="0.475870333333333">
* School of Engineering and Applied Sciences, Harvard University, 38 Plymouth St., Cambridge, MA
02141. E-mail: nesson@seas.harvard.edu.
** Department of Information Engineering, University of Padua, via Gradenigo 6/A, 1-35131 Padova, Italy.
</note>
<email confidence="0.979496">
E-mail: satta@dei.unipd.it.
</email>
<note confidence="0.773899777777778">
† School of Engineering and Applied Sciences, Harvard University, Maxwell Dworkin Laboratory,
33 Oxford Street, Cambridge, MA 02138. E-mail: shieber@seas.harvard.edu.
Submission received: 4 November 2008; revised submission received: 13 November 2009; accepted for
publication: 18 March 2010.
© 2010 Association for Computational Linguistics
Computational Linguistics Volume 36, Number 3
method and runs in polynomial time when both the fan-out and rank of the input grammar are
bounded. Second, we offer an optimal, efficient algorithm for factorizing a grammar to produce a
strongly equivalent TL-MCTAG grammar with the rank of the grammar minimized.
</note>
<sectionHeader confidence="0.993551" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.99731272972973">
Tree-Local Multi-Component Tree-Adjoining Grammar (TL-MCTAG) is an appealing
formalism for natural language representation because it arguably allows the encapsu-
lation of the appropriate domain of locality within its elementary structures (Kallmeyer
and Romero 2007). Its flexible multicomponent structure allows modeling of lexical
items that may ultimately have elements far apart in a sentence, such as quantifiers and
wh-words. Its limited expressivity provides constraints on movement and, we posit,
may have generated additional popularity based on a misconception about its parsing
complexity.
TL-MCTAG can model highly structurally divergent but closely related elementary
structures, such as the syntax and the semantics of a single word or construction or the
syntax of a single word or construction and its translation into another language, with a
pair of elementary trees. This flexibility permits conceptually simple, highly expressive,
and tightly coupled modeling of the relationship between the syntax and semantics of
a language or the syntax and semantics of two languages. As a result, it has frequently
been put to use in a growing body of research into incorporating semantics into the Tree-
Adjoining Grammar (TAG) framework (Kallmeyer and Joshi 2003; Han 2006; Nesson
and Shieber 2006, 2007). It is also under investigation as a possible base formalism
for use in synchronous-grammar based machine translations systems (Nesson 2009).
Similar pairing of elementary structures of the TAG formalism is too constrained to
capture the inherent divergence in structure between different languages or even be-
tween the syntax and semantics of a language. Pairing of more expressive formalisms is
too flexible to provide appropriate constraints and has unacceptable consequences for
processing efficiency.
Although TL-MCTAG was first introduced by Weir (1988) and shown at that time
to be equivalent in expressivity to TAG, the complexity of TL-MCTAG is still not
well understood. Perhaps because of its equivalence to TAG, questions of processing
efficiency have not been adequately addressed. This article offers a thorough exami-
nation of the problem of TL-MCTAG recognition, showing that even highly restricted
forms of TL-MCTAG are NP-complete to recognize. However, in spite of the provable
difficulty of the recognition problem, we offer several algorithms that can substantially
improve processing efficiency. First, we present a parsing algorithm that improves
on the baseline parsing method and runs in polynomial time when both the fan-out
(the maximum number of trees in a tree set) and rank (the maximum number of
trees that may be substituted or adjoined into a given tree) of the input grammar are
bounded. Second, we offer an optimal, efficient algorithm for factorizing a grammar
to produce a strongly equivalent TL-MCTAG grammar with the rank of the grammar
minimized.
</bodyText>
<subsectionHeader confidence="0.992962">
1.1 Summary of Results
</subsectionHeader>
<bodyText confidence="0.944318">
TAG is a mildly context-sensitive grammar formalism widely used in natural language
processing. Multicomponent TAG (MCTAG) refers to a group of formalisms that
</bodyText>
<page confidence="0.996926">
444
</page>
<note confidence="0.918241">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.999973684210526">
generalize TAG by allowing elementary structures to be sets of TAG trees. One member
of the MCTAG formalism group is Tree-Local MCTAG (TL-MCTAG), in which all
trees from a single elementary tree set are constrained to adjoin or substitute into a
single tree in another elementary tree set. Weir (1988) shows that this constraint is
sufficient to guarantee that TL-MCTAG has weak generative capacity equivalent to the
polynomially parsable TAG.
Recent work on the complexity of several TAG variants has demonstrated indirectly
that the universal recognition problem for TL-MCTAG is NP-hard. This result calls
into question the practicality of systems that employ TL-MCTAG as the formalism for
expressing a natural language grammar. In this article we present a more fine-grained
analysis of the processing complexity of TL-MCTAG. We demonstrate (Section 3) that
even under restricted definitions where either the rank or the fan-out of the grammar is
bounded, the universal recognition problem is NP-complete.
We define a novel variant of multi-component TAG formalisms that treats the
elementary structures as vectors of trees rather than as unordered sets (Section 4). We
demonstrate that this variant of the definition of the formalism (the vector definition) is
consistent with the linguistic applications of the formalism presented in the literature.
Universal recognition of the vector definition of TL-MCTAG is NP-complete when
both the rank and fan-out are unbounded. However, when the rank is bounded, the
universal recognition problem is polynomial in both the length of the input string and
the grammar size.
We present a novel parsing algorithm for TL-MCTAG (Section 5) that accommo-
dates both the set and vector definitions of TL-MCTAG. Although no algorithms for
parsing TL-MCTAG have previously been published, the standard method for parsing
linear context-free rewriting systems (LCFRS)–equivalent formalisms can be applied
directly to TL-MCTAG to produce a quite inefficient baseline algorithm in which the
polynomial degree of the length of the input string depends on the input grammar.
We offer an alternative parser for TL-MCTAG in which the polynomial degree of the
length of the input string is constant, though the polynomial degree of the grammar size
depends on the input grammar. This alternative parsing algorithm is more appealing
than the baseline algorithm because it performs universal recognition of TL-MCTAG
(vector definition) with constant polynomial degree in both the length of the input string
and the grammar size when rank is bounded.
It may not be generally desirable to impose an arbitrary rank bound on TL-MCTAGs
to be used for linguistic applications. However, it is possible given a TL-MCTAG to
minimize the rank of the grammar. In the penultimate section of the paper (Section 6)
we offer a novel and efficient algorithm for transforming an arbitrary TL-MCTAG into
a strongly equivalent TL-MCTAG where the rank is minimized.
</bodyText>
<sectionHeader confidence="0.959737" genericHeader="related work">
1.2 Related Work
</sectionHeader>
<bodyText confidence="0.999761125">
Our work on TL-MCTAG complexity bears comparison to that of several others.
Kallmeyer (2009) provides a clear and insightful breakdown of the different charac-
teristics of MCTAG variants and the effect of these characteristics on expressivity and
complexity. That work clarifies the definitions of MCTAG variants and the relationship
between them rather than presenting new complexity results. However, it suggests
the possibility of proving results such as ours in its assertion that, after a standard
TAG parse, a check of whether particular trees belong to the same tree set cannot
be performed in polynomial time. Kallmeyer also addresses the problem of parsing
</bodyText>
<page confidence="0.997606">
445
</page>
<note confidence="0.799176">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.999859871794872">
MCTAG, although not specifically for TL-MCTAG. The method proposed differs from
ours in that MCTAGs are parsed first as a standard TAG, with any conditions on tree
or set locality checked on the derivation forest as a second step. No specific algorithm
is presented for performing the check of tree-locality on a TAG derivation forest, so it is
difficult to directly compare the methods. However, that method cannot take advantage
of the gains in efficiency produced by discarding inappropriate partial parses at the
time that they are first considered. Aside from Kallmeyer’s work, little attention has
been paid to the problem of directly parsing TL-MCTAG.
Søgaard, Lichte, and Maier (2007) present several proofs regarding the complexity
of the recognition problem for some linguistically motivated extensions of TAG that are
similar to TL-MCTAG. Their work shows the NP-hardness of the recognition problem
for these variants and, as an indirect result, also demonstrates the NP-hardness of TL-
MCTAG recognition. This work differs from ours in that it does not directly show the
NP-hardness of TL-MCTAG recognition and does not further locate and constrain the
source of the NP-hardness of the problem to the rank of the input grammar, nor does it
provide mitigation through rank reduction of the grammar or by other means.
Our work on TL-MCTAG factorization is thematically though not formally related
to the body of work on induction of TAGs from a treebank exemplified by Chen and
Shanker (2004). The factorization performed in their work is done on the basis of syn-
tactic constraints rather than with the goal of reducing complexity. Working from a
treebank of actual natural language sentences, their work does not have the benefit of
explicitly labeled adjunction sites but rather must attempt to reconstruct a derivation
from complete derived trees.
The factorization problem we address is more closely related to work on factorizing
synchronous context-free grammars (CFGs) (Gildea, Satta, and Zhang 2006; Zhang and
Gildea 2007) and on factorizing synchronous TAGs (Nesson, Satta, and Shieber 2008).
Synchronous grammars are a special case of multicomponent grammars, so the prob-
lems are quite similar to the TL-MCTAG factorization problem. However, synchronous
grammars are fundamentally set-local rather than tree-local formalisms, which in some
cases simplifies their analysis. In the case of CFGs, the problem reduces to one of
identifying problematic permutations of non-terminals (Zhang and Gildea 2007) and
can be done efficiently by using a sorting algorithm to binarize any non-problematic per-
mutations until only the intractable correspondences remain (Gildea, Satta, and Zhang
2006). This method is unavailable in the TAG case because the elementary structures
may have depth greater than one and therefore the concept of adjacency relied upon
in their work is inapplicable. The factorization algorithm of Nesson, Satta, and Shieber
(2008) is the most closely related to this one but is not directly applicable to TL-MCTAG
because each link is presumed to have exactly two locations and all adjunctions occur
in a set-local rather than tree-local manner.
</bodyText>
<sectionHeader confidence="0.992697" genericHeader="method">
2. Technical Background
</sectionHeader>
<bodyText confidence="0.999978571428571">
A tree-adjoining grammar consists of a set of elementary tree structures of arbitrary
depth, which are combined by the operations of adjunction and substitution. Auxiliary
trees are elementary trees in which the root and a frontier node, called the foot node
and distinguished by the diacritic ∗, are labeled with the same nonterminal A. The
adjunction operation entails splicing in an auxiliary tree in an internal node within
an elementary tree also labeled with nonterminal A. Trees without a foot node, which
serve as a base case for derivations and may combine with other trees by substitution,
</bodyText>
<page confidence="0.997181">
446
</page>
<note confidence="0.918337">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.99991027027027">
are called initial trees. Examples of the adjunction and substitution operations are
given in Figure 1. For further background, we refer the reader to the survey by Joshi
and Schabes (1997).
A TAG derivation can be fully specified by a derivation tree, which records how
the elementary structures are combined using the TAG operations to form the derived
tree. The nodes of the derivation tree are labeled by the names of the elementary trees
and the edges are labeled by the addresses at which the child trees substitute or adjoin.
In contrast to CFGs, the derivation and derived trees are distinct.
We depart from the traditional definition in notation only by specifying adjunc-
tion sites explicitly with numbered links in order to simplify the presentation of the
issues raised by multi-component adjunctions. Each link may be used only once in a
derivation. Adjunctions may only occur at nodes marked with a link. A numbered link
at a single site in a tree specifies that a single adjunction is available at that site. An
obligatory adjunction constraint indicates that at least one link at a given node must
be used (Joshi, Levy, and Takahashi, 1975; Vijay-Shanker and Joshi 1985). We notate
obligatory adjunction constraints by underlining the label of the node to which the
constraint applies. Because we use explicit links, the edges in the derivation tree are
labeled with the number of the link used rather than the traditional label of the address
at which the operation takes place.
Multiple adjunction refers to permitting an unbounded number of adjunctions to
occur at a single adjunction site (Vijay-Shanker 1987; Shieber and Schabes 1994). In
the standard definition of TAG, multiple adjunction is disallowed to ensure that each
derivation tree unambiguously specifies a single derived tree (Vijay-Shanker 1987). Be-
cause each available adjunction is explicitly notated with a numbered link, our notation
implicitly disallows multiple adjunction but permits a third possibility: bounded mul-
tiple adjunction. Bounded multiple adjunction permits the formalism to obtain some
of the potential linguistic advantages of allowing multiple adjunction while preventing
unbounded multiple adjunction. The usual constraint of allowing only one adjunction
at a given adjunction site may be enforced in our link notation by permitting only one
link at a particular link site to be used.
MCTAG generalizes TAG by allowing the elementary items to be sets of trees rather
than single trees (Joshi and Schabes 1997). The basic operations are the same but all trees
in a set must adjoin (or substitute) into another tree set in a single step in the derivation.
To allow for multi-component adjunction, a numbered link may appear on two or more
nodes in a tree, signifying that the adjoining trees must be members of the same tree
set. Any tree in a set may adjoin at any link location if it meets other adjunction or
substitution conditions such as a matching node label. Thus a single multicomponent
</bodyText>
<figureCaption confidence="0.736496">
Figure 1
</figureCaption>
<bodyText confidence="0.74641">
An example of TAG operations substitution and adjunction used here to model natural
language syntax.
</bodyText>
<page confidence="0.993767">
447
</page>
<figure confidence="0.871498">
Computational Linguistics Volume 36, Number 3
</figure>
<figureCaption confidence="0.98575">
Figure 2
</figureCaption>
<bodyText confidence="0.994976666666667">
An example of the way in which two tree sets may produce several different derived trees when
combined under the standard definition of multicomponent TAG.
link may give rise to many distinct derived trees even when the link is always used
by the same multicomponent tree set. An example is given in Figure 2. This standard
definition of multicomponent adjunction we will call the set definition for contrast with
a variation we introduce in Section 4. A derivation tree for a multicomponent TAG is
the same as for TAG except that the nodes are labeled with the names of elementary
tree sets.
An MCTAG is tree-local if tree sets are required to adjoin within a single elementary
tree (Weir 1988). Using the numbered link notation introduced earlier for adjunction
sites, a tree-local MCTAG (TL-MCTAG) is one in which the scope of the link numbers
is a single elementary tree. An example TL-MCTAG operation is given in Figure 3. In
contrast, an MCTAG is set-local if the trees from a single tree set are required to adjoin
within a single elementary tree set and an MCTAG is non-local if the trees from a single
tree set may adjoin to trees that are not within a single tree set. In a set-local MCTAG
the scope of a link is a single elementary tree set, and in a non-local MCTAG the scope
of a link is the entire grammar.
Weir (1988) noted in passing that TL-MCTAG has generative capacity equivalent to
TAG; a combination of well-chosen additional constraints and additions of duplicates
of trees to the grammar can produce a weakly equivalent TAG. Alternatively, a feature-
based TAG where the features enforce the same constraints may be used. Although the
generative capacity of the formalism is not increased, any such conversion from TL-
MCTAG to TAG may require an exponential increase in the size of the grammar as we
prove in Section 3.
</bodyText>
<sectionHeader confidence="0.972576" genericHeader="method">
3. Complexity
</sectionHeader>
<bodyText confidence="0.999881">
We present several complexity results for TL-MCTAG. Søgaard, Lichte, and Maier (2007)
show indirectly that TL-MCTAG membership is NP-hard. For clarity, we present a direct
</bodyText>
<footnote confidence="0.352985666666667">
Figure 3
An example TL-MCTAG operation demonstrating the use of TL-MCTAG to model wh-question
syntax.
</footnote>
<page confidence="0.993863">
448
</page>
<note confidence="0.61706">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.999932529411765">
proof here. We then present several novel results demonstrating that the hardness result
holds under significant restrictions of the formalism.
For a TL-MCTAG G we write |G |to denote the size of G, defined as the total number
of nodes appearing in all elementary trees in the tree sets of the grammar. Fan-out, f,
measures the number of trees in the largest tree set in the grammar. We show that even
when the fan-out is bounded to a maximum of two, the NP-hardness result still holds.
The rank, r, of a grammar is the maximum number of derivational children possible
for any tree in the grammar, or in other words, the maximum number of links in any
tree in the grammar. We show that when rank is bounded, the NP-hardness result also
holds.
A notable aspect of all of the proofs given here is that they do not make use of
the additional expressive power provided by the adjunction operation of TAG. Put
simply, the trees in the tree sets used in our constructions meet the constraints of Tree
Insertion Grammar (TIG), a known context-free–equivalent formalism (Schabes and
Waters 1995). As a result, we can conclude that the increase in complexity stems from
the multi-component nature of the formalism rather than from the power added by an
unconstrained adjunction operation.
</bodyText>
<subsectionHeader confidence="0.998934">
3.1 Universal Recognition of TL-MCTAG is NP-Complete
</subsectionHeader>
<bodyText confidence="0.9679088">
In this section we prove that universal recognition of TL-MCTAG is NP-complete when
neither the rank nor the fan-out of the grammar is bounded.
Recall the 3SAT decision problem, which is known to be NP-complete. Let V =
{v1, ... , vp} be a set of variables and C = {c1, ... , cn} be a set of clauses. Each clause in C
is a disjunction of three literals over the alphabet of all literals LV = {v1, v1, ... , vp, vp}.
We represent each clause by a set of three literals. The language 3SAT is defined as the
set of all conjunctive formulas over the members of C that are satisfiable.
Theorem 1
The universal recognition problem for TL-MCTAG with unbounded rank and fan-out
is NP-hard.
</bodyText>
<subsectionHeader confidence="0.743246">
Proof
</subsectionHeader>
<bodyText confidence="0.9999196">
Let (V, C) be an arbitrary instance of the 3SAT problem.1 We use the derivations of the
grammar to guess the truth assignments for V and use the tree sets to keep track of the
dependencies among different clauses in C. Two tree sets are constructed for each vari-
able, one corresponding to an assignment of true to the variable and one corresponding
to an assignment of false. The links in the single initial tree permit only one of these two
sets to be used. The tree set for a particular truth assignment for a particular variable vi
makes it possible to introduce, by means of another adjunction, terminal symbols taken
from the set {1,.. . , n} that correspond to each clause in C that would be satisfied by the
given assignment to vi. In this way, the string w = 1 · · · n can be generated if and only if
all clauses are satisfied by the truth assignment to some variable they contain.
</bodyText>
<footnote confidence="0.930146">
1 We follow the proof strategy of Satta and Peserico (2005) in this and the proof of Theorem 3.
</footnote>
<page confidence="0.991923">
449
</page>
<note confidence="0.29356">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.997187461538461">
We define a tree-local MCTAG G containing the following tree sets. The initial tree
set S contains the single tree:
In this tree, the “rows” correspond to the variables and the “columns” to the clauses.
Each non-terminal node within a row is labeled with the same link to ensure that a tree
set representing a single variable’s effect on each clause will adjoin at each link.
For every variable vi, 1 &lt; i &lt; p, tree set Ti, used when representing an assignment of
the value true to vi, contains n trees, one for each clause cj, 1 &lt; j &lt; n, defined as follows:
For every variable vi, 1 &lt; i &lt; p, tree set Fi — used when representing an assignment
of the value false to vi — contains n trees, one for each clause cj, 1 &lt; j &lt; n, defined as
follows:
For every clause cj, 1 &lt; j &lt; n, tree set Cj contains a single tree as shown here. This
tree allows the corresponding clause number terminal symbol to be recognized by an
appropriate variable instance.2
</bodyText>
<footnote confidence="0.7217725">
2 Note that because adjunction is not obligatory, the tree from Cj need not adjoin into the tree for a
particular variable. In fact, to generate w, exactly one instance of Cj must adjoin for each clause even if
more than one variable satisfies the clause. If w can be generated, however, we can conclude that at least
one variable must have satisfied each clause.
</footnote>
<page confidence="0.992434">
450
</page>
<note confidence="0.61644">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.9670755">
From the definition of G it directly follows that w E L(G) implies the existence of a
truth assignment that satisfies C. A satisfying truth assignment can be read directly off
of any derivation tree for w. If Ti (respectively, Fi) is a child of S in the derivation tree,
then vk is true (respectively, false). The converse can be shown by using a satisfying
truth assignment for C to construct a derivation for w E L(G).
(G, w) can be constructed in deterministic polynomial time because the number of
tree sets in the grammar is 2p + 2n + 1, the total number of trees in the grammar is
bounded by n(2p + 2n + 1), and the length of w is n. All trees in the grammar have
constant size except for the initial tree, which has size np. ■
Theorem 2
The universal recognition problem for TL-MCTAG with unbounded rank and fan-out
is in NP.
</bodyText>
<subsectionHeader confidence="0.536791">
Proof
</subsectionHeader>
<bodyText confidence="0.999036357142857">
We show that given an arbitrary TL-MCTAG grammar G and any input string w, the
determination of w E L(G) can be performed in non-deterministic polynomial time.
Note that the collection of elementary tree sets of G that can generate the empty
string, E, can be generated in time polynomial in |G |using the standard graph reach-
ability algorithm used for context-free grammars in time polynomial in |G |(Sippu and
Soisalon-Soininen 1988).
We begin by showing that given an arbitrary input string w and derivation tree D
for w E L(G), there must exist a truncated derivation tree for w that has size no larger
than |G |· |w|. We define a truncated derivation tree as a derivation tree in which the
children of elementary tree sets in E are optionally removed.
Consider D. Each node in D represents an elementary structure of G: a tuple of
one or more TAG trees. We call a node n of D a non-splitting node if a single one
of its children in the derivation tree, ni, generates the same lexical material from the
input string as n itself.3 We call it a splitting node if more than one of its children
generates a non-empty part of the portion of the input string generated by n itself
or if n itself contributes lexical material. We proceed from the root of D examining
chains of non-splitting nodes. Assume that the root of D is a non-splitting node. This
means that it has a single child node, ni, that generates the lexical material for the entire
input string. Its other children all generate the empty string (and therefore must also be
members of E). We truncate the derivation tree at each child of n other than ni. We now
iterate the process on node ni. If during the examination of a chain of non-splitting
nodes we encounter a node identical to one that we have already seen, we remove
the entire cycle from the derivation tree because it is not essential to the derivation.
Because all cycles are removed, the longest possible chain of non-splitting nodes we
can find before encountering a splitting node or reaching the bottom of the derivation
tree is |G|.
If a splitting node is encountered, we truncate all child nodes that generate the
empty string and then iterate the process of non-splitting node identification on those
</bodyText>
<footnote confidence="0.98698525">
3 The child tree tuple ni may generate the same lexical material in several distinct pieces, which are
arranged into the string generated by n when the adjunction occurs. Because the adjunction necessarily
connects all of these pieces into a single string in a single predetermined way, it does not matter for our
proof that the lexical material derived by the child may be in any order before the adjunctions.
</footnote>
<page confidence="0.98709">
451
</page>
<note confidence="0.293679">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.999941928571428">
children that generate lexical material. In the worst case, the process encounters w − 1
splitting nodes, each of which may be separated by a chain of non-splitting nodes
of maximum length bounded by |G|. This process, therefore, produces a truncated
derivation tree with size bounded by |G |· |w|.
The truncation of the tree at each node that generates the empty string is necessary
because the size of the subderivation tree generating the empty string may not be
bounded by a polynomial in the size of the grammar. However, the content of the part
of the derivation tree used to generate the empty string is not necessary for determining
membership of w E L(G) because we know that each truncated node is a member of E.
To show that TL-MCTAG membership is in NP, we construct a Turing machine
that will non-deterministically guess a truncated derivation tree of size no larger than
|G |· |w|. It then checks that the guessed derivation successfully derives w. Because the
correctness of the derivation can be checked in linear time, this is sufficient to show that
TL-MCTAG membership is in NP. ■
We know from the equivalence of LCFRS and SL-MCTAG (and the rule-to-tree-
tuple conversion method used to prove equivalency) (Weir 1988) and the fact that
LCFRS membership is PSPACE-complete that SL-MCTAG membership is also PSPACE-
complete (Kaji et al. 1992, 1994). Until the results shown in Theorems 1 and 2 it was
not known whether TL-MCTAG was in NP. Although the difference in generative
capacity between TL-MCTAG and SL-MCTAG is well known, this proven difference
in complexity (assuming NP =� PSPACE) is novel.
To understand the reason underlying the difference, we note that the bound on the
length of non-splitting chains does not hold for set-local MCTAG. In set-local MCTAG
a tree tuple may be non-splitting while also performing a permutation of the order of
the lexical output generated by its children. Permutation is possible because set-locality
allows the tuple of strings generated by a tree tuple to be held separate for an arbitrary
number of steps in a derivation. This directly follows the basis of the reasoning of Kaji
et al. (1992) in their proof that LCFRS is PSPACE-complete.
</bodyText>
<subsectionHeader confidence="0.999401">
3.2 Universal Recognition of TL-MCTAG with Bounded Fan-Out is NP-Complete
</subsectionHeader>
<bodyText confidence="0.9790305">
The grammar constructed in the proof of Theorem 1 has fan-out n, the number of
clauses. However, the hardness result proved herein holds even if we restrict tree sets
to have at most two elements (TL-MCTAG(2)).4 The result provided here is as tight
as possible. If tree sets are restricted to a maximum size of one (TL-MCTAG(1)), the
formalism reduces to TAG and the hardness result does not hold.
Theorem 3
The universal recognition problem for TL-MCTAG(2) with fan-out limited to two and
unbounded rank is NP-complete.
</bodyText>
<subsectionHeader confidence="0.489771">
Proof
</subsectionHeader>
<bodyText confidence="0.999853666666667">
Let (V, C) be an arbitrary instance of the 3SAT problem. We define a more complex
string w = w(1)w(2) · · · w(p)w, where w, is a representation of C and w(i) controls the truth
assignment for the variable vi, 1 &lt; i &lt; p. The proof strategy is as follows. We construct
</bodyText>
<footnote confidence="0.700851">
4 We use the postfix (2) to indicate the restriction on the fan-out.
</footnote>
<page confidence="0.991376">
452
</page>
<note confidence="0.585349">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.997951617021277">
a TL-MCTAG(2) grammar G such that each w(i) can be derived from G in exactly two
ways using the left members of tree sets of size 2 that correspond to the variables (and a
single initial tree set of size 1). We call the part of w comprising w(1)w(2) · · · w(p) the prefix
string. The prefix string enforces the constraint of permitting only two derivations by
requiring a strictly alternating string of terminal symbols that can only be generated
by the grammar when the truth assignment is stable for a particular variable. The
derivation of the prefix string w(1)w(2) · · · w(p) therefore corresponds to a guess of a truth
assignment for V. The right trees from the tree sets derive the components of wc that are
compatible with the guessed truth assignments for v1, ... , vp. Subsequently we explain
how (G, w) is constructed given an instance of 3SAT (V, C).
For every variable vi, 1 &lt; i &lt; p, let Ai = {cj  |vi E cj} and Ai = {cj  |vi E cj} be the
sets of clauses in which vi occurs positively and negatively, respectively; let also mi =
|Ai |+ |Ai |be the number of occurrences of the variable vi. Let Σ� = {ai, bi  |1 &lt; i &lt; p}
be an alphabet of not already used symbols; let w(i) (again for 1 &lt; i &lt; p) denote a
sequence of mi + 1 alternating symbols ai and bi such that if mi is even w(i) = (aibi)mi/2ai
and if mi is odd w(i) = (aibi)(mi+1)/2. We define three functions, α, γ, and γ, to aid in
the construction. The functions γ and γ are used to produce pieces of the prefix string
and will only produce the correct prefix string for a variable if the truth assignment is
consistent within the derivation. The function α is used to produce strings representing
the clauses satisfied by a particular truth assignment to a variable. For every variable
vi, 1 &lt; i &lt; p, the clauses α(i, 1), α(i, 2),. . . , α(i,|Ai|) are all the clauses in Ai and the
clauses α(i, |Ai |+ 1),. . . , α(i, mi) are all the clauses in Ai. Further, for every 1 &lt; i &lt; p, let
γ(i, 1) = aibi and let γ(i, h) = ai if h is even and γ(i, h) = bi if h is odd, for 2 &lt; h &lt; mi. For
every 1 &lt; i &lt; p, let γ(i, h) = ai if h is odd, and γ(i, h) = bi if h is even for 1 &lt; h &lt; mi − 1
and let γ(i, mi) = aibi if mi is odd and biai if mi is even. The crucial property of γ and
γ is that a string w(i) can be parsed either as a sequence of γ(i, ·) or γ(i, ·) strings, not
intermixed elements. The grammar must “commit” to parsing the string one way or the
other, corresponding to committing to a value for the variable vi.
We define a TL-MCTAG(2) G to consist of the tree sets described herein. We con-
struct: (1) a tree set of length two for each combination of a variable and clause that the
variable can satisfy under some truth assignment, (2) two filler tree sets for each variable
(one for each truth assignment) of length two that only contribute the string indicating
the truth assignment of the variable but no satisfied clause, and (3) a singleton tree
set containing only an initial tree rooted in S. The initial tree has n + 1 branches with
the first branch intended to yield the prefix string w(1) · · · w(p) and the (k + 1)-st branch
intended to yield ck where 1 &lt; k &lt; n. Although it is possible to generate strings not of
the form of w using this construction, given a pair (G, w) where w respects the definition
above, we show that w E L(G) if and only if C is satisfiable.
The initial tree set S contains the single tree pictured in Figure 4.5 The name of each
link in the initial tree set is composed of three indices that indicate the role of the link.
The first index, i, corresponds to variable vi. The second is an index into the series 1 · · · mi
where mi is defined from vi as described previously. The third index, j, corresponds to a
clause cj. The use of multiple indices to name the links is for clarity only. They may be
renamed freely.
5 Although we permit the presence of multiple links at a single node in the S tree, we follow the usual TAG
convention of disallowing multiple adjunction. If one of the links at a node is used, the other links at that
node are assumed to be unavailable in the derivation.
</bodyText>
<page confidence="0.996805">
453
</page>
<figure confidence="0.887943">
Computational Linguistics Volume 36, Number 3
</figure>
<figureCaption confidence="0.99424">
Figure 4
</figureCaption>
<bodyText confidence="0.929135">
The start tree for TL-MCTAG(2) grammar G. The multiply-indexed link numbers are for clarity
only and are treated as simple link names.
For every variable vi, 1 &lt; i &lt; p, and index h, 1 &lt; h &lt; mi:
</bodyText>
<listItem confidence="0.934077333333333">
• if h &lt; |Ai|, tree set T(h)+
i contains the following two trees:
• if h &gt; |Ai|, tree set F(h)+
</listItem>
<bodyText confidence="0.688633">
i contains the following two trees:
</bodyText>
<page confidence="0.94874">
454
</page>
<bodyText confidence="0.531271">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</bodyText>
<listItem confidence="0.899492">
• for all h, tree set T(h)−
i contains the following two trees:
• for all h, tree set F(h)−
</listItem>
<bodyText confidence="0.959987857142857">
i contains the following two trees:
An illustrative example is provided in Figure 5. In this example we demonstrate
derivations of two possible satisfying truth assignments for Boolean formula (x ∨ y ∨
z) ∧ (x ∨ y ∨ z) ∧ (y ∨ y ∨ z). The truth assignments correspond to whether the T or F tree
sets are used in the derivation of the prefix string for a particular variable. As can be seen
from the example, the structure of the prefix string enforces the requirement that either
all T tree sets or all F tree sets are chosen for a particular variable. Each tree set marked
with a + is used to satisfy a single clause. Which clause a tree set satisfies can be read
off the link number at which it adjoins.
Inspection of the grammar and construction of the input string show that |G |and
|w |are polynomially related to p and n. The sum of the mi is maximally 3n. There are no
Figure 5
Example derivations of two satisfying assignments for the boolean formula
(x ∨ y ∨ z) ∧ (x ∨ y ∨ z) ∧ (y ∨ y ∨ z).
</bodyText>
<page confidence="0.988586">
455
</page>
<note confidence="0.280359">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.9615304375">
more than 9pn + 1 tree sets and no more than 18pn + 1 total trees. The size of the initial
tree is bounded by 3pn and all other trees have constant size.
From a derivation of w E L(G) we can find a truth assignment satisfying C by
examining the derivation. If the tree sets T(h)+
i or T(h)−
i are children of S for some i
and all h where 1 &lt; i &lt; p and 1 &lt; h &lt; mi, then vi is true. If the tree sets F(h)+
i or F(h)−
i
are children of S for some i and all h where 1 &lt; i &lt; p and 1 &lt; h &lt; mi, then vi is false.
By the construction, if w is of the form just described, for a given variable vi only
two derivations of w(i) will be possible, one in which all tree sets corresponding to
that variable are T tree sets and one in which all are F tree sets. Starting from a truth
assignment that satisfies C, we can prove that w E L(G) by induction on IV1.
That this problem is in NP can be seen from the same reasoning as in the proof of
Theorem 2. ■
</bodyText>
<subsectionHeader confidence="0.99778">
3.3 Universal Recognition of TL-MCTAG with Bounded Rank is NP-Complete
</subsectionHeader>
<bodyText confidence="0.952836583333333">
We now show that universal recognition of TL-MCTAG is NP-complete even when the
rank is bounded.
We briefly recall here the definition of a decision problem called 3PAR. Let t and si &lt;
t be positive integers,1 &lt; i &lt; 3m, m &gt; 1. The language 3PAR is defined as the set of all
tuples (s1, ... , s3m, t), satisfying the following condition: The multiset Q = {s1, ... , s3m}
can be partitioned into multisets Qi, 1 &lt; i &lt; m, such that for every 1 &lt; i &lt; m, IQiI = 3
and EscQi s = t.
Language 3PAR is strongly NP-complete (Garey and Johnson 1979). This means that
3PAR is NP-complete even in case the integers si are all represented in unary notation.
Theorem 4
The universal recognition problem for TL-MCTAG with rank 1 and unbounded fan-out
is NP-complete.
</bodyText>
<subsectionHeader confidence="0.566778">
Proof
</subsectionHeader>
<bodyText confidence="0.999993">
We provide a reduction from 3PAR.6 Let (s1,.. . , s3m, t) bean input instance of the 3PAR
problem, with all of the integers si represented in unary notation. Our target grammar G
is defined as follows. We use a set of nonterminal symbols {S, A}, with S being the start
symbol. We take the set of terminal symbols to be {a, $}. G contains two elementary
tree sets. The first set has a single elementary tree γ, corresponding to a context-free
production of the form S -4 (AAA$)m−1AAA:
</bodyText>
<footnote confidence="0.513448">
6 We follow the proof strategy of Barton (1985) in this proof.
</footnote>
<page confidence="0.994942">
456
</page>
<note confidence="0.585777">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.9897455">
Tree -y has a unique link impinging on all of the 3m occurrences of nonterminal
A. The second (multi)set of G contains elementary trees -yi , 1 &lt; i &lt; 3m. Each -yi corre-
sponds to a context-free production of the form A -4 asi:
We also construct a string w = (at$)m−1at.
If there exists a partition for multiset Q = {s1, ... , s3m} satisfying the 3PAR require-
ment, we can directly construct a derivation for w in G, by sorting the elementary trees in
the second set accordingly, and by inserting these trees into the link of the elementary
tree -y. Conversely, from any derivation of w in G, we can read off a partition for Q
satisfying the requirement for membership in 3PAR for the input instance of the 3PAR
problem.
Finally, it is easy to see that G and w can be constructed in linear deterministic time
with respect to the size of the input instance of the 3PAR problem.
That this problem is in NP can be seen from the same reasoning as in the proof of
Theorem 2. ■
</bodyText>
<subsectionHeader confidence="0.99122">
3.4 Universal Recognition of TL-MCTAG with Fixed Input String is NP-Complete
</subsectionHeader>
<bodyText confidence="0.9622953">
We now show the unusual complexity result that universal recognition of TL-MCTAG is
NP-complete even when the input string is fixed. Although it is uncommon to require
this result, we rely on it in Section 5 to demonstrate that our parser has better time
complexity than the baseline parsing method for TL-MCTAG that we generalize from
the standard parsing method for LCFRS-equivalent formalisms.
We reduce from a variant of the 3SAT problem introduced above in which each
variable occurs in at most four clauses with no repeats in a clause. This problem was
shown to be NP-complete by Tovey (1984).
Theorem 5
Universal recognition of TL-MCTAG is NP-complete when the input string is fixed.
</bodyText>
<subsectionHeader confidence="0.545693">
Proof
</subsectionHeader>
<bodyText confidence="0.9999669">
Let (V, C) be an arbitrary instance of the 3SAT problem where each variable occurs in
no more than four clauses and does not repeat within a single clause. As in the proof of
Theorem 1, we use the derivations of the grammar to guess the truth assignments for
V and use the tree sets to keep track of the dependencies among different clauses in C.
Two tree sets are constructed for each variable, one corresponding to a true assignment
and one corresponding to a false assignment. The prohibition on multiple adjunction
ensures that only one of these two tree sets can be used for each variable. The tree set of
a particular truth assignment for a particular variable vi makes it possible to satisfy the
obligatory adjunction constraints for the nonterminal symbols representing each of the
clauses that vi satisfies in the 3SAT formula.7 Additional adjunction sites for each clause
</bodyText>
<tableCaption confidence="0.382164">
7 Obligatory adjunction constraints are standard in the definition of TAG and MCTAG (Joshi, Levy, and
Takahashi, 1975; Weir 1988). However, obligatory adjunction may be avoided in this proof by creating a
</tableCaption>
<page confidence="0.977742">
457
</page>
<note confidence="0.477081">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.992376266666667">
provide overflow space in the event that more than one variable satisfies a particular
clause. We fix the input string w to be the empty string. None of the trees of the grammar
contain any terminal symbols. However, a successful parse of the empty string can only
be achieved if all of the obligatory adjunction constraints are satisfied and this occurs
if and only if all clauses of the formula are satisfied by the truth assignment to some
variable.
We define a tree-local MCTAG G containing the following tree sets. We notate
obligatory adjunction constraints by underlining the nodes at which they apply. The
initial tree set S contains the single tree:
For every variable vi, 1 &lt; i &lt; p, tree set Ti (respectively, Fi) is used when represent-
ing an assignment of the value true (respectively, false) to vi. Ti (respectively, Fi) contains
at most five trees, one for the variable itself and one for each clause cj, 1 &lt; j &lt; n, such
that when vi is true (respectively false) cj is satisfied. More formally, tree set Ti contains
trees Vi* and Cj* if and only if vi E cj, for 1 &lt; j &lt; n. Tree set Fi contains trees Vi* and Cj*
if and only if vi E cj, for 1 &lt; j &lt; n.
Note that the diagram of the initial tree does not show the explicitly notated link
locations that we have used throughout the article. We omit the link locations to avoid
cluttering the diagram. However, because each variable occurs at most four times in the
formula, the total number of links is bounded by pn12.
From the definition of G it directly follows that ε E L(G) implies the existence of a
truth assignment that satisfies C. A satisfying truth assignment can be read directly off
of any derivation tree for w. If Ti (respectively, Fi) is a child of S in the derivation tree,
then vk is true (respectively, false). The converse can be shown by using a satisfying
truth assignment for C to construct a derivation for w E L(G).
(G, w) can be constructed in deterministic polynomial time because the number of
tree sets in the grammar is 2p + 1, the total number of trees in the grammar is bounded
by n(2p + 1), and the length of w is 0. All trees in the grammar have constant size except
for the initial tree, which has size 3n + p.
That this problem is in NP can be seen from the same reasoning as in the proof of
Theorem 2. ■
</bodyText>
<footnote confidence="0.7100675">
larger grammar in which a separate tree set is created for each combination of clauses that may be
satisfied by a given variable. Because each variable may appear in no more than four clauses, this
increases the number of tree sets in the grammar by 24. We leave the details of this alternative proof
strategy to the reader.
</footnote>
<page confidence="0.989166">
458
</page>
<note confidence="0.875525">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<sectionHeader confidence="0.776552" genericHeader="method">
4. An Alternative Definition of TL-MCTAG: Tree Vectors
</sectionHeader>
<bodyText confidence="0.999957892857143">
The proof of NP-hardness of TL-MCTAG in the bounded rank case given in Theorem 4
depends crucially on the treatment of the elementary structures of the TL-MCTAG as
unordered sets. In order to produce the satisfying partitions for the 3PAR problem, any
tree from the second tree set must be able to adjoin at any location of link 1 in the first
tree set. This is in accordance with the usual definition of multi-component TAG. An
alternative definition of multi-component TAG in which the elementary structures are
treated as vectors is suggested by the explicit use of numbered links at the available
adjunction sites. Under this definition, each location of a link is also given an index and
only the tree at that index in a given vector may adjoin at that link location. An example
contrasting the two definitions is given in Figure 6.
The dependence of our bounded-rank proof on the set definition of TL-MCTAG
does not in itself show that vector-definition TL-MCTAG is polynomial in the bounded
rank case. We show this constructively in Section 5 by presenting a parser for vector
definition TL-MCTAG for which the polynomial degree of both the length of the in-
put string and the grammar size is constant when the rank of the input grammar is
bounded.
The difference in complexity between the set and vector definitions of TL-MCTAG
makes the vector definition an appealing possibility for research using TL-MCTAG for
natural language applications. Although all uses of TL-MCTAG in the computational
linguistics literature assume the set definition of TL-MCTAG, the linguistic analyses
therein do not require the additional flexibility provided by the set definition (Kallmeyer
and Joshi 2003; Nesson and Shieber 2006, 2007; Kallmeyer and Romero 2007; Nesson
2009). This is not a coincidence. Multicomponent tree sets are generally used to model
syntactic and semantic constructs in which one tree in the set strictly dominates another
and has a different syntactic or semantic type: for instance, a quantifier and its bound
variable. The locations at which the trees in these sets adjoin are not interchangeable
both because of the dominance constraint and because of the difference in type (and,
correspondingly, root node label). As a result, these grammars may be converted to the
</bodyText>
<figureCaption confidence="0.444046">
Figure 6
</figureCaption>
<bodyText confidence="0.626129">
An example contrasting the set definition of MCTAG (shown in Figure 2) with the vector
definition.
</bodyText>
<page confidence="0.992265">
459
</page>
<figure confidence="0.818468">
Computational Linguistics Volume 36, Number 3
</figure>
<figureCaption confidence="0.999457">
Figure 7
</figureCaption>
<bodyText confidence="0.981554333333333">
The deductive rule generated for tree α using the naive TAG parsing method.
vector definition without any change in the elementary trees, the generated language, or
grammar size but with crucial gains in the worst case bounds on processing efficiency.8
</bodyText>
<sectionHeader confidence="0.986304" genericHeader="method">
5. Parsing
</sectionHeader>
<bodyText confidence="0.999218111111111">
Although no algorithms for parsing TL-MCTAG have previously been published, the
standard method for parsing LCFRS-equivalent formalisms can be applied directly to
TL-MCTAG to produce an algorithm with complexity O(|G|p|w|q) (Seki et al. 1991). We
offer a novel parser for TL-MCTAG for which q is constant. With our algorithm, for
the set definition of TL-MCTAG p depends on both the rank and fan-out of the input
grammar. For the vector definition of TL-MCTAG p depends on the rank of the input
grammar but contains no index of the fan-out.
We begin with a brief introduction to TAG parsing before discussing our novel TL-
MCTAG parsing algorithm.
</bodyText>
<subsectionHeader confidence="0.977483">
5.1 CKY-Style TAG Parsing
</subsectionHeader>
<bodyText confidence="0.993722409090909">
Following the method of Seki et al. (1991), a naive parser for TAG may be constructed
by generating a single inference rule for each tree in the grammar. For a tree containing
r links, the rule will have r antecedents with each antecedent item representing a tree
that can adjoin at one of the links. Each adjoining tree will cover a span of the input
string that can be represented by four indices, indicating the left and right edges of the
span and of the subspan that will ultimately be dominated by its foot node. Because the
location of the links within the consequent tree is known, the indices in the antecedent
items are not entirely independent. An example is given in Figure 7. Observation shows
that there will be a worst case of 2(r + 1) independent indices in a given rule. Because
each adjoining tree is independent, there may be r + 1 different trees represented in a
single rule. This results in a time complexity of O(n2(r+1)|G|r+1) where n is the length
of the input string, |G |is a representation of the grammar size, and r is the rank of the
input grammar.
8 Various sorts of multicomponent TAGs have been proposed for analysis of scrambling (Rambow 1994;
Kallmeyer 2005). Scrambling entails several different trees of the same type adjoining in different orders,
and therefore seems like a candidate for making use of the flexibility provided by the set definition.
However, in these analyses the elementary tree structures are composed of one VP-rooted auxiliary tree
and one VP-rooted initial tree. Because auxiliary trees and initial trees cannot adjoin at the same link
location for structural reasons, these analyses do not ultimately make use of the flexibility in the selection
of an adjunction site that the set definition provides. The different VP-rooted auxiliary trees which could
benefit from interchanging adjunction sites achieve this flexibility because they appear in different tree
sets, not because they are members of a single set using the set definition.
</bodyText>
<page confidence="0.993031">
460
</page>
<note confidence="0.809383">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.998107057142857">
Following Graham, Harrison, and Ruzzo (1980) in their optimization of the Earley
parser (Earley 1970), the identifiers of specific trees need not be represented in the items
of the parser. Rather the tree identifiers may be replaced by the labels of the root nodes
of those trees, effectively bundling items of trees that share a root node label and cover
the same span. This modification to the algorithm reduces the time complexity of the
parser to O(n2(r+1)|G|).
We refer to this method of reducing complexity by removing unnecessary informa-
tion about specific elementary structures from the items of the parser as the GHR opti-
mization. When applied, it reduces the time complexity in the grammar size but does
not alter the basic form of the time complexity expression. There remains a single term
consisting of the product of a polynomial in the input string length and a polynomial in
the grammar size. We will return to this observation when examining the complexity of
TL-MCTAG parsing.
Shieber, Schabes, and Pereira (1995) and Vijay-Shanker (1987) apply the Cocke-
Kasami-Younger (CKY) algorithm, first introduced for use with CFGs in Chomsky
normal form (Kasami 1965; Younger 1967), to the TAG parsing problem to generate
parsers with a time complexity of O(n6|G|2). The speed-up in the parser comes from
traversing elementary trees bottom-up, handling only one link at a time. As a result, no
inference rule needs to maintain information about more than one link at a time. If the
GHR optimization is applied, the time complexity is reduced to O(n6|G|).
In order to clarify the presentation of our TL-MCTAG parser, we briefly review the
algorithm of Shieber, Schabes, and Pereira (1995) with minor modifications, using the
deductive inference rule notation from that paper. As shown in Figure 8, items in CKY-
style TAG parsing consist of a node in an elementary tree and the indices that mark
the edges of the span dominated by that node. Nodes, notated α@a &gt; f, are specified by
three pieces of information: the identifier α of the elementary tree the node is in, the
Gorn address a of the node in that tree,9 and the link f available at that node if there
is one. When no link is present, it is indicated by an underscore, . The node notation
α@a &gt; f may be read as “node α at address a with link V.
Each item has four indices, indicating the left and right edges of the span covered by
the node as well as any gap in the node that may be the result of a foot node dominated
by the node. The indices are constrained to be non-decreasing from left to right in an
item. Nodes that do not dominate a foot node will have no gap in them, which we
indicate by the use of underscores in place of the indices for the gap. To limit the number
of inference rules needed, we define the following function i U j for combining indices:
</bodyText>
<equation confidence="0.9904402">
I i j =
j i =
i i = j
undefined otherwise
iUj=
</equation>
<bodyText confidence="0.9994366">
The Adjoin rule has two indices, p and q, that appear in the antecedent but not in
the consequent. These indices specify the gap in one antecedent item and the edges of
the span in the other antecedent item, indicating that one antecedent item will fill the
gap in the span of the other antecedent item. The Foot Axiom similarly makes use of
unbound indices p and q. In this rule the entire span of the item is the gap that must be
</bodyText>
<listItem confidence="0.818948">
9 A Gorn address uniquely identifies a node within a tree. The Gorn address of the root node is ε. The jth
child of the node with address i has address i · j.
</listItem>
<page confidence="0.996698">
461
</page>
<figure confidence="0.815812">
Computational Linguistics Volume 36, Number 3
</figure>
<figureCaption confidence="0.993104">
Figure 8
</figureCaption>
<bodyText confidence="0.994669666666667">
The CKY algorithm for binary-branching TAG.
filled when the item adjoins to another item. As noted in Shieber, Schabes, and Pereira
(1995), the parser can be made more efficient by only introducing foot items of this sort
once an appropriate tree to adjoin into has been parsed for the span from p to q.
Each item of the form (α@a &gt; f, i, , ,l) maintains the invariant that the input gram-
mar can derive a subtree rooted at α@a with no foot node that spans wi+1 ... wl. Items
of the form (α@a &gt; f, i, j, k,l) maintain the invariant that the input grammar can derive
a subtree rooted at α@a with a foot node such that the fringe of the tree is the string
wi+1 . . . wjLabel(Foot(α))wk+1 ... wl. The invariants for items of the form (α@a &gt; , i, , ,l)
and (α@a &gt; , i, j, k,l) are similar except that no adjunction operation may occur at α@a.
The side conditions Init(α) and Aux(α) hold if α is an initial tree or an auxiliary
tree, respectively. Label(α@a) specifies the label of the node in tree α at address a. Ft(α)
specifies the address of the foot node of tree α. Link(α@a) specifies the link available at
node α@a if there is one and null (represented as in the inference rules) otherwise.
Adj(α@a &gt; f, β) holds if f is a link at which tree β may adjoin into tree α at address a.
Subst(α@a &gt; f, β) holds if f is a link at which tree β may substitute into tree α at address
a. If f is null or the adjunction or substitution is prevented by other constraints such as
mismatched node labels, these conditions fail.
</bodyText>
<page confidence="0.997056">
462
</page>
<note confidence="0.934982">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<figureCaption confidence="0.986201">
Figure 9
</figureCaption>
<bodyText confidence="0.994862090909091">
The deductive rule generated for tree α using the baseline TL-MCTAG parsing method.
Consistent with the usual definition of TAG, only one link is permitted at a given
node. This effectively rules out multiple adjunction. Bounded multiple adjunction may
be permitted without affecting the complexity of the parsing algorithm by allowing a
list of links at a node. Although it first appears that the introduction of multiple links at
a single node could result in an exponential increase in the number of derivations, this
is not the case. The link diacritics themselves carry no information about the trees which
may adjoin at the associated adjunction site. Any restrictions, such as the requirement
of a matching node label, arise from the node itself. As a result, the links are fully
interchangeable and serve only as counters of the number of available adjunctions at a
node.10
</bodyText>
<subsectionHeader confidence="0.999393">
5.2 CKY-Style Tree-Local MCTAG Parsing
</subsectionHeader>
<bodyText confidence="0.9999595">
As shown in Figure 9, the naive algorithm for parsing TAG may also be applied to
TL-MCTAG. The only difference is that each link may have multiple locations within a
given tree. Let r and f represent the rank and fan-out of the input grammar, respectively.
The time complexity of the naive parser will therefore be O(n2(rf+1)|G|r+1). However,
the GHR optimization cannot straightforwardly be applied because the maintenance of
tree locality requires items to carry information about the identities of the specific trees
involved rather than just the labels of the root nodes. Theorem 5 addresses the case in
which the input string length is 0. Therefore, in this case, any factor in the complexity
including the input string length cannot contribute to the overall time complexity. By
showing that the problem is NP-complete when the input string length is 0, Theorem 5
demonstrates that there must be some exponential factor or term in the time complex-
ity expression other than the input string length factor. Due to the earlier observation
that the GHR optimization does not change the form of the time complexity expression,
Theorem 5 therefore shows that the GHR optimization cannot reduce the exponent
of the grammar size term to a constant unless P = NP. This leaves open the possibility
of the existence of an algorithm that is polynomial in the grammar size but has an addi-
tional exponential term in the time complexity expression. However, such an algorithm,
if it exists, cannot be generated by application of the GHR optimization to the baseline
parser.
We can generalize the CKY TAG parsing algorithm presented above to the TL-
MCTAG case. This is an improvement over the standard LCFRS algorithm because it
reduces the q in the |w|q factor of the complexity to a constant. The direct specification
</bodyText>
<page confidence="0.807732333333333">
10 Note, however, that the finite length of the lists of links is necessary for multiple adjunction to remain
benign.
463
</page>
<note confidence="0.489979">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.994078192307692">
of a CKY-style tree-local MCTAG parser is given in Figures 10 and 11. For a tree set or
vector α from G, we notate the trees in the set or vector using indices that are indicated
as subscripts on the tree set identifier. A tree set or vector α from G with length two will
therefore contain trees α1 and α2. Under the set definition these indices serve only as a
way of differentiating the members of the tree set. Under the vector definition, the index
must match the index of the link location where the tree will adjoin.
In order to directly parse tree-local MCTAG, items must keep track of the trees that
adjoin at each multicomponent link. We handle this by adding a link history to each
item. Under the set definition, a link history is an associative array of links notated with
indices and tree set identifiers notated with indices to identify a unique tree within the
set. Note that because under the set definition a tree may adjoin at any location of a
link, the indices of the link and tree set need not match. The axioms introduce empty
link histories, indicating that no adjunctions have yet occurred. When an adjunction
takes place, the tree identifier of the adjoining tree is associated with the link at which it
adjoins. In order for an adjunction to take place at a multicomponent link, the adjoining
tree’s tree set must be the same as that of any tree identifier already stored for that
link. This is enforced by the Valid(Λ) condition (Figure 12) defined on link histories. The
Filter(Λ, α@a &gt; f) function removes links that are completely used from the argument
link history. An empty link history indicates that tree locality has been enforced for the
subtree specified by the item; thus no additional information need be maintained or
passed on to later stages of the parse.
For the vector definition, the link histories may be simplified because each location
of a link fully specifies which tree from within a vector may adjoin there. As a result, the
link history is an associative array of links (not annotated with indices) and tree vector
identifiers. An example contrasting the link histories for the set and vector definitions
is given in Figure 13.
</bodyText>
<figureCaption confidence="0.399187">
Figure 10
</figureCaption>
<bodyText confidence="0.7363345">
Modified item form, goal, and axioms for the CKY algorithm for tree-local MCTAG. Inference
rules of the algorithm are given in Figure 11.
</bodyText>
<page confidence="0.998188">
464
</page>
<note confidence="0.797615">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<figureCaption confidence="0.931488">
Figure 11
</figureCaption>
<bodyText confidence="0.99790475">
Modified inference rules for the CKY algorithm for tree-local MCTAG. Alternative Adjoin,
Substitute, and No Adjoin rules are given for the set and vector definitions of TL-MCTAG. The
item form, goal item, and axioms are given in Figure 10.
The addition of a link history to each item increases the complexity of the algorithm.
The maximum link history length is bounded by the rank of the input grammar, r.
Under the set definition, the number of possible values for each element of a link history
is on the order of the number of tree sets in the grammar multiplied by the power
set of the fan-out: |G |· 2f . Thus, for the set definition, the complexity of the algorithm
</bodyText>
<page confidence="0.999247">
465
</page>
<figure confidence="0.843203">
Computational Linguistics Volume 36, Number 3
</figure>
<figureCaption confidence="0.920584857142857">
Figure 12
Definition of the Valid condition, which ensures that all locations of a link are used by unique
trees from the same tree set. Under the set definition there is an entry for each link location and
both the identity of the tree set and the uniqueness of the tree from that tree set must be checked.
Under the vector definition only the link name and the tree vector identifier are stored because
the link locations uniquely select trees from within tree vectors.
Figure 13
</figureCaption>
<bodyText confidence="0.933044523809524">
A sample TL-MCTAG with examples of the possible link histories under the set and vector
definitions when the parser reaches the top of the circled node. Although the tree sets are
notated in set definition, the reader may substitute angle braces to get the corresponding vector
definition items.
is O(n6|G|r+22rf ). Under the vector definition, the number of possible values for each
element of a link history is on the order of the number of tree sets in the grammar. Thus,
for the vector definition, the complexity of the algorithm is O(n6|G|r+2). Note that the
variable representing fan-out, f, is present only in the complexity of the set definition.
This demonstrates the novel result that when rank is bounded, even with unbounded
fan-out, parsing the vector definition of TL-MCTAG is polynomial.
Permitting multiple adjunction may be accomplished by a method similar to the
one described for the TAG algorithm. Rather than associating each node with at most
one link, we permit nodes to be accompanied by a set of links. In contrast to the
TAG case, here we must use a set rather than a list to allow for the expressivity that
multiple adjunction can provide. In the TAG case a list is sufficient because the links
at a node are fully interchangeable. In the TL-MCTAG case, because the links are
defined not just by the node where they appear but by the full set of nodes at which
locations of that link appear, the links at a given node are not interchangeable. It must
be possible to use them in any order.11 Because the links can be used in any order, the
11 For links that share all locations it is still possible to enforce a strict order over them without
compromising expressivity.
</bodyText>
<page confidence="0.998853">
466
</page>
<note confidence="0.770238">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.936184">
addition of multiple adjunction adds a factor of 2r to the time complexity of the parsing
algorithm.
</bodyText>
<sectionHeader confidence="0.901732" genericHeader="method">
6. Link Factorization
</sectionHeader>
<bodyText confidence="0.999982">
The parser presented in the previous section has the advantage of running in polyno-
mial time if the elementary structures of the input TL-MCTAG are defined as vectors
and if the rank of the grammar is bounded by some constant. Bounding the rank by
a constant might be too strong a limitation in natural language parsing applications,
however. Thus, in the general case the running time of our algorithm contains a factor
that is an exponential function of the rank of the input grammar. To optimize parsing
time, then, we seek a method to “factorize” the elementary trees of the grammar in
such a way that the rank is effectively reduced and the set of derived trees is preserved.
Although the precise meaning of factorization should be inferred from the subsequent
definitions, informally, by factorize we mean splitting a single elementary tree into sev-
eral smaller elementary trees without violating the locality constraints of the grammar
formalism. In this section we present a novel and efficient algorithm for factorizing a
TL-MCTAG into a strongly equivalent TL-MCTAG in which rank is minimized across
the grammar. Here, strongly equivalent means that the two grammars generate the
same set of derived trees.12
</bodyText>
<subsectionHeader confidence="0.983976">
6.1 Preliminaries
</subsectionHeader>
<bodyText confidence="0.999314375">
Let α be some elementary tree. We write |α |to denote the number of nodes of α. For a
link l, we write |l |to denote the number of nodes of l.
For an elementary tree α, we call a fragment of α a complete subtree rooted at some
node n of α, written α(n), or else a subtree rooted at n with a gap at node n&apos; in its
yield, written α(n,n&apos;). See Figure 14 for an example. We also use ϕ to denote a generic
fragment with or without a gap node in its yield.
Consider some fragment ϕ of α. Let Nα be the set of all nodes of α and let NY be the
set of nodes of ϕ with the exclusion of the gap node, in case ϕ has such a node. We say
that ϕ is an isolated fragment iff ϕ includes at least one link and no link in α impinges
both on nodes in NY and on nodes in Nα − NY. Figure 14 provides an example.
Intuitively, we can “excise” an isolated fragment from α without splitting apart
the links of α itself, and therefore preserving the tree locality. This operation may also
reduce the number of links in α, which is our main goal. The factorization algorithm we
present in Section 6.2 is based on the detection and factorization of isolated fragments.
Let n be a node from some elementary tree α. We write lnodes(n) to denote the set
of all nodes from fragment α(n) that are part of some link from α. Node n is maximal if
</bodyText>
<listItem confidence="0.999705333333333">
• lnodes(n) # 0; and
• n is either the root node of α or, for its parent node n&apos;, we have
lnodes(n&apos;) =,A lnodes(n).
</listItem>
<footnote confidence="0.7828152">
12 The trees are not actually the same because of the small, reversible transformation that we make to ensure
that the factorized trees obey the TAG constraint that auxiliary trees must have matching root and foot
node labels. This transformation adds additional nodes into the tree structure but does not change the
shape of the trees and can be reversed to produce trees that are actually the same as the derived trees of
the original grammar.
</footnote>
<page confidence="0.998134">
467
</page>
<figure confidence="0.840151">
Computational Linguistics Volume 36, Number 3
</figure>
<figureCaption confidence="0.978061875">
Figure 14
An elementary tree γ demonstrating fragments, isolation, and maximal nodes. Fragment
ϕ1 = α(n1,n2) contains all locations of links 2 and 3, because links at the root node of a
fragment are contained within that fragment. It does not contain any locations of link 4, because
links at the gap node of a fragment are not contained within that fragment. Because links 2 and
3 impinge only on nodes in ϕ1 and all other links impinge only on nodes not in ϕ1, ϕ1 is an
isolated fragment. Fragment ϕ2 = α(n4) is not an isolated fragment because it contains only one
of the link locations of 4. Note also that n4 is a maximal node but n5 is not.
</figureCaption>
<bodyText confidence="0.999982333333333">
Note that for every node n&apos; of α such that lnodes(n&apos;) =� ∅ there is always a unique
maximal node n such that lnodes(n&apos;) = lnodes(n) (see Figure 14). Thus, for the purpose
of TL-MCTAG factorization, we can consider only maximal nodes. The first criterion
in the definition of maximal node, stating that a maximal node always dominates
(possibly reflexively) some node involved in a link, will often be implicitly used in the
following.
We need to distinguish the nodes in lnodes(n) depending on their impinging links.
Assume that {l1,l2, ... , lr} is the set of all links occurring in α. For 1 ≤ j ≤ r, we write
lnodes(n,lj) to denote the set of all nodes from fragment α(n) with impinging link lj.
Thus, U 1 lnodes(n, lj) = lnodes(n). We associate with each maximal node n of α a
signature σ(n), defined as a vector of size r and taking values over the subsets of
lnodes(n). For each j, 1 ≤ j ≤ r, we define
</bodyText>
<equation confidence="0.997517">
σ(n)[j] = ⎧ lnodes(n,lj), if 0 &lt; |lnodes(n,lj) |&lt; |lj|;
⎨ ∅, if |lnodes(n,lj) |= 0 or
⎩ |lnodes(n,lj) |= |lj|.
</equation>
<bodyText confidence="0.9988073">
Observe that, in this definition, σ(n)[j] = ∅ means that none or all of the nodes of lj are
found within fragment α(n). The empty signature, written 0, is the signature with all of
its components set to ∅.
Consider maximal nodes n1 and n2 such that n1 =~ n2, σ(n1) =~ 0, and σ(n2) =~ 0.
It is not difficult to see that σ(n1) = σ(n2) always implies that one of the two nodes
dominates the other. This observation is implicitly used in several places subsequently.
When visiting nodes of α in a path from some leaf node to the root node,13 one
may encounter several maximal nodes having the same non-empty signature. In our
factorization algorithm, we need to consider pairs of such nodes that are as close as
possible. Consider two maximal nodes n1 and n2, n1 =~ n2, such that n1 dominates n2.
</bodyText>
<page confidence="0.803327">
13 We view trees as directed graphs with arcs directed from each node to its parent.
468
</page>
<note confidence="0.772928">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.975533615384615">
The ordered pair (n1,n2) is called a minimal pair if σ(n1) = σ(n2) =� 0 and, for every
maximal node n3 in the path from n2 to n1 with n3 =� n1 and n3 =� n2, we have σ(n3) =�
σ(n1). Consider now a sequence (n1, n2, ... , nq), q &gt; 2, of nodes from α. Such a sequence
is called a maximal chain if each pair (ni−1, ni) is a minimal pair, 2 &lt; i &lt; q, and all nodes
n from α with σ(n) = σ(n1) are included in the sequence itself.
Notice that two maximal nodes belonging to two different maximal chains must
have different signatures, and thus one maximal node cannot belong to more than one
maximal chain. We now prove some basic properties of the notions just introduced that
will be used later in the development of our factorization algorithm and in the proof of
some of its mathematical properties.
Lemma 1
Let α be an elementary tree and let n, n&apos; be maximal nodes, with n properly dominating
n&apos; in (ii).
</bodyText>
<equation confidence="0.703606333333333">
(i) σ(n) = 0 if and only if α(n) is an isolated fragment;
(ii) σ(n) = σ(n&apos;) if and only if α(n, n&apos;) is an isolated fragment.
Proof
</equation>
<bodyText confidence="0.915417444444444">
(i). If σ(n) = 0, then for each link l we have that either all nodes impinged on by l are
dominated (possibly reflexively) by n or none of these nodes is dominated by n. Because
n is maximal, we further conclude that at least some link l is found within α(n).
Conversely, if α(n) is an isolated fragment then all or none of the nodes impinged
on by some link l are dominated by n, and thus σ(n) = 0.
(ii). Let σ(n) = σ(n&apos;), with n properly dominating n&apos;. For each link lj, there are two
possible cases. First consider the case where σ(n)[j] = σ(n&apos;)[j] = 0. In order for this to be
true, the link must be in one of three configurations, all of which satisfy the requirement
that the locations of lj must be all inside or all outside of the fragment α(n1, n2).
</bodyText>
<listItem confidence="0.988884">
• lnodes(n, j) = 0. In this configuration no one of the nodes on which lj
impinges is dominated by n.
• |lnodes(n, j) |= |lj|. We distinguish two possible cases.
</listItem>
<equation confidence="0.906936666666667">
– lnodes(n&apos;, j) = 0. In this configuration all the nodes on which lj
impinges are within the fragment α(n1, n2).
– |lnodes(n&apos;,j) |= |lj|. In this configuration all the nodes on which lj
</equation>
<bodyText confidence="0.9737242">
impinges are “below” the fragment α(n, n&apos;).
Now consider the case where σ(n)[j] = σ(n%j] =� 0. The nodes in lnodes(n&apos;, j) are dom-
inated (possibly reflexively) by n&apos; and therefore fall “below” α(n,n&apos;). The remaining
nodes on which lj impinges cannot be dominated (possibly reflexively) by n. We thus
conclude that no nodes impinged on by lj occur within the fragment α(n, n&apos;).
Assume now that α(n, n&apos;) can be isolated. We can use exactly the same arguments
in the analysis of sets lnodes(n, j) and lnodes(n&apos;, j), and conclude that σ(n) = σ(n&apos;). ■
The next lemma will be useful later in establishing that the factorization found by
our algorithm is optimal, namely, that it achieves the smallest rank under the imposed
conditions.
</bodyText>
<page confidence="0.998835">
469
</page>
<figure confidence="0.3615945">
Computational Linguistics Volume 36, Number 3
Lemma 2
</figure>
<bodyText confidence="0.938374">
Let (n1, n2) be some minimal pair. Then
</bodyText>
<listItem confidence="0.863755333333333">
(i) for any node n3 in the path from n2 to n1, σ(n3) =� 0;
(ii) for any minimal pair (n3, n4), neither or both of n3 and n4 are found in the
path from n2 to n1.
</listItem>
<subsectionHeader confidence="0.733879">
Proof
</subsectionHeader>
<bodyText confidence="0.994011166666667">
(i). Because σ(n2) =� 0, there is some link lj for which σ(n2)[j] = lnodes(n2, j) =� 0. Be-
cause n3 dominates n2, n3 dominates the nodes in lnodes(n2, j). Therefore, the only way
σ(n3) could equal 0 is if |lnodes(n3,j) |= |lj|. But then σ(n1)[j] = 0 because n1 dominates
n3. This is a contradiction.
(ii). Assume that n4 is on the path from n2 to n1. From the definition of minimal
pair, there must exist a link lk such that σ(n4)[k] =� σ(n2)[k]. By the same reasoning
as in the proof of statement (i) for any link lj such that σ(n2)[j] =� 0, we must have
σ(n2)[j] = σ(n4)[j] = σ(n1)[j]. We thus conclude that σ(n2)[k] = 0 and σ(n4)[k] =� 0. Be-
cause σ(n4)[k] = σ(n3)[k] =� 0 and σ(n2)[k] = σ(n1)[k] = 0, node n3 must be in the path
from n2 to n1.
By a similar argument, we can argue that if n3 is on the path from n2 to n1, then
node n4 must be in that path as well. ■
</bodyText>
<subsectionHeader confidence="0.999598">
6.2 Factorization Algorithm
</subsectionHeader>
<bodyText confidence="0.999886875">
Let G be an input TL-MCTAG grammar. In this subsection we provide a method for the
construction of a TL-MCTAG that produces a grammar that generates the same derived
trees as G and that has minimal rank. We start with the discussion of some preprocessing
of the input.
We annotate each elementary tree α as follows: We compute sets lnodes(n,lj)
for all nodes n and all links lj of α. This can easily be done with a bottom up
visit of α, by observing that if an internal node n has children n1, n2, ... , nk then
lnodes(n,lj) = Uki=1 lnodes(ni,lj) U Xj, where Xj = 0 if lj does not impinge on n and Xj =
{n} if it does. Using sets lnodes(n, lj), we can then mark all nodes n in α that are maximal,
and compute the associated signatures σ(n).
We also mark all maximal chains within α. This simple procedure is reported in
Figure 15. We maintain an associative array with node signatures as entries and node
lists as values. We visit all maximal nodes of α in a top–down fashion, creating a list for
each different signature and appending to such a list all nodes having that signature.
In the following algorithm we excise isolated fragments from each elementary tree
α. We now introduce some conventions for doing this. Although it would be possible to
</bodyText>
<figureCaption confidence="0.608238">
Figure 15
</figureCaption>
<bodyText confidence="0.633546">
Construction of maximal chains in the factorization algorithm.
</bodyText>
<page confidence="0.993521">
470
</page>
<note confidence="0.843165">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.997723740740741">
excise fragments without the introduction of additional tree structure, we adopt instead
two simple tree transformations that preserve auxiliary tree root and foot label matching
and result in some simplification of the notation used by the algorithm, particularly in
case the root node of a fragment is the same as the gap node of a second fragment within
o . A schematic depiction of both transformations is given in Figure 16.
When a fragment o (n) is excised, we leave a copy of the root node n without its
impinging links that dominates a fresh node n&apos; with a fresh link indicating obligatory
substitution of the excised fragment. The excised fragment consists of o (n) including
any links impinging on n, but has a fresh root node immediately dominating n with the
same label as n&apos;. This is shown in the top row of Figure 16.
A similar transformation is used to excise a fragment o (n,n&apos;). Nodes n and n&apos; of
the original tree are not altered, and thus they retain their names. The material between
them is replaced with a single new node with a fresh nonterminal symbol and a fresh
link. This link indicates the obligatory adjunction of the excised fragment. A new root
and gap node are added to o (n, n&apos;) to form the excised fragment. This is shown in the
bottom row of Figure 16. We remark that any link impinging on the root node of the
excised fragment is by our convention included in the excised fragment, and any link
impinging on the gap node is not.
To regenerate the original tree, the excised fragment o (n, n&apos;) can be adjoined back
into the tree from which it was excised. The new nodes that have been generated in
the excision may be removed and the original root and gap nodes may be merged back
together retaining any impinging links.
We need to introduce one more convention for tree excision. Consider a maximal
chain c = (n1, n2, ... , nq) in o , q &gt; 2. In case q = 2, our algorithm processes c by excis-
ing a fragment o (n1, n2) from o , exactly as explained above. In case q &gt; 2, a special
processing is required for c. Chain c represents q − 1 minimal pairs, corresponding to
fragments o (ni_1,ni), 2 &lt; i &lt; q. We do not excise these q − 1 fragments one by one,
</bodyText>
<figureCaption confidence="0.549321">
Figure 16
</figureCaption>
<bodyText confidence="0.595386">
Diagrams of the tree transformations performed when fragments o (n) and o (n, n&apos;) are removed.
</bodyText>
<page confidence="0.993487">
471
</page>
<note confidence="0.578497">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.951842666666667">
because this would create q − 1 &gt; 1 new links within oc. We follow instead a procedure
that “binarizes” c, as explained here.
Let us recursively define an elementary tree occ as follows, for kck = q and q &gt; 3:
</bodyText>
<listItem confidence="0.955541666666667">
• In case q = 3, occ is a tree composed of two nodes besides the root and the
gap nodes, n and n&apos;, with n immediately dominating n&apos;. Node n hosts
the (obligatory) adjunction of the fragment oc(n1, n2) and node n&apos; hosts
the (obligatory) adjunction of oc(n2, n3). Both fragments are transformed
as previously discussed.
• In case q &gt; 3, occ is a tree composed of two nodes besides the root and the
gap nodes specified as above, with n&apos; hosting the (obligatory) adjunction
of the transformed fragment oc(nq_1, nq). Node n hosts the adjunction of
tree occ,, with c&apos; = (n1, ... , nq_1).
</listItem>
<bodyText confidence="0.998699444444445">
Note that each tree occ has rank two.
When processing a maximal chain c with q &gt; 2, the whole fragment oc(n1,nq) is
excised, using this convention. This results in a single fresh link added to oc. In this case
the link refers to the adjunction of a newly created elementary tree occ, defined as above.
An example of the binarization of a maximal chain with q = 4 is reported in Figure 17.
We can now discuss the factorization algorithm, reported in Figure 18. For a maxi-
mal node n in an elementary tree oc, we write links(n) to denote the number of links from
oc that are entirely contained in fragment oc(n). We process each tree set I� of the source
grammar and each elementary tree oc in I� as follows.
</bodyText>
<figureCaption confidence="0.552505">
Figure 17
</figureCaption>
<bodyText confidence="0.799364">
The binarization procedure applied to a maximal chain c = (n1, n2, n3, n4).
</bodyText>
<page confidence="0.995479">
472
</page>
<note confidence="0.949872">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<figureCaption confidence="0.938626">
Figure 18
</figureCaption>
<bodyText confidence="0.994290363636364">
The factorization algorithm for tree-local MCTAG.
In the first phase, we add to an agenda A each maximal node n different from the
root of oc such that 6(n) = 0. We associate this agenda item with the score links(n). At
the same time, each maximal chain (n1, n2, ... , nq), q &gt; 2, is added to A, with associated
score links(n1) − links(nq).
In the second phase, we process all items in A, in order of increasing score, ignoring
those items that have a score of one. If the current item is a maximal node n, we excise
the fragment oc(n) from oc, leaving in place a fresh node with a single node link denoting
obligatory substitution. If the current item is a maximal chain of the form (n1, n2), we
excise from oc the fragment oc(n1,n2), leaving in place a fresh node with a single node
link denoting obligatory adjunction of the excised fragment. Finally, if the current item
is a maximal chain c = (n1, ... , nq) with q &gt; 2, we excise from oc the whole fragment
oc(n1,nq), and we apply to the chain the binarization procedure described in this sub-
section. This results in the addition to the output grammar of fragments oc(ni_1, ni), for
2 &lt; i &lt; q, and of newly created elementary tree occ and elementary trees occ, for each
chain c&apos; that is a proper prefix of c. After the processing of all elementary trees in tree
set I� is completed, the resulting version of set I� is also added to the output grammar.
As a simple example of a run of the factorization algorithm, we discuss the process-
ing of the elementary tree oc depicted in Figure 19. Tree oc has four links, called li,
1 &lt; i &lt; 4. Link l1 impinges on nodes n11 and n12, link l2 impinges on nodes n21 and
n22. Links l3 and l4 impinge on a single node each, and the impinging nodes are called
n3 and n4, respectively. In Figure 19 we have outlined the maximal nodes n, n&apos;, and n&apos;&apos;
</bodyText>
<page confidence="0.998423">
473
</page>
<figure confidence="0.710939">
Computational Linguistics Volume 36, Number 3
</figure>
<figureCaption confidence="0.973947">
Figure 19
</figureCaption>
<bodyText confidence="0.9984185">
An example tree to be processed by the factorization algorithm.
that are relevant to this example. Node n dominates both n&apos; and n&apos;&apos; but none of n&apos; and n&apos;&apos;
dominates the other. Note that within o there must exist maximal nodes other than n, n&apos;,
and n&apos;&apos;. For instance, there must be a maximal node dominating (possibly reflexively)
node n3 but not node n4. However, this node dominates a single link, and will not be
processed by the algorithm because of the requirement at line 12 in Figure 18. We thus
ignore this and other maximal nodes in what follows.
We have
</bodyText>
<equation confidence="0.985078111111111">
lnodes(n,l1) = {n11},
lnodes(n,l2) = {n21,n22},
lnodes(n,l3) = {n3},
lnodes(n&apos;&apos;,l3) = {n3}, lnodes(n,l4) = {n4},
lnodes(n&apos;&apos;,l4) = {n4},
and
6(n&apos;) = [{n11},0,0,0],
6(n&apos;&apos;) = 0,
6(n) = 6(n&apos;).
</equation>
<bodyText confidence="0.999771090909091">
The algorithm in Figure 15 will then mark the chain (n, n&apos;). When processing the elemen-
tary tree o , the algorithm in Figure 18 will add to its agenda an item n&apos;&apos; with a score of
links(n&apos;&apos;) = 2, as well as the above chain, with a score of links(n) − links(n&apos;) = 3 − 0 = 3.
Node n&apos;&apos; is processed first, and fragment o (n&apos;&apos;) is excised from o leaving in its place
a fresh link l5. Later on, the algorithm pops the chain (n,n&apos;) from the agenda, and
fragment o (n, n&apos;) is excised from o leaving in its place a fresh link l6. The algorithm
then stops. The resulting factorization consists in fragment o (n&apos;&apos;) with links l3 and l4,
fragment o (n, n&apos;) with links l2 and l5, and what is left of the elementary tree o , with
links l1 and l6.
The discussion of the correctness of the algorithm is reported in the next section,
along with some other mathematical properties.
</bodyText>
<equation confidence="0.999866">
lnodes(n&apos;,l1) = {n11},
lnodes(n&apos;,li) = 0, 2 &lt; i &lt; 4,
lnodes(n&apos;&apos;,li) = 0, 1 &lt; i &lt; 2,
</equation>
<page confidence="0.998589">
474
</page>
<note confidence="0.89377">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<subsectionHeader confidence="0.984983">
6.3 Mathematical Properties
</subsectionHeader>
<bodyText confidence="0.97804014893617">
We discuss in this section some mathematical properties of our factorization algorithm.
Let G be the input TL-MCTAG and let G&apos; be the output of the algorithm. We start with
the issue of correctness. First, notice that our algorithm stops after a finite number of
steps, because the number of possible excisions for G is finite. Assume now that ϕ and
ϕ/ are two isolated fragments within some elementary tree α, and ϕ&apos; is itself a fragment
within ϕ. It is easy to see that excising ϕ&apos; from ϕ results in a new fragment of α that is
still an isolated fragment. Using this observation together with Lemma 1, we can then
conclude that all fragments that are excised by the algorithm are isolated fragments.
This in turn implies that each fragment excision in our algorithm preserves tree locality,
and G&apos; is still a TL-MCTAG.
Each fragment that is excised from some source tree must obligatorily be adjoined
back into that tree, at the point from which it was removed. Thus, G&apos; generates the same
derived trees as G, modulo our trivial tree transformation for the root and the gap nodes.
This proves the correctness of our factorization algorithm.
One remark is in order here. Note that we always excise fragments that have at
least two links. This can be shown inductively as follows. Consider first the smallest
fragments that are excised from some elementary tree α, that is, those fragments that
do not contain any other fragment within themselves. These fragments always have
at least two links, because of the requirement stated in line 12 in the algorithm. In the
inductive case, let ϕ be some fragment of α from which a second fragment ϕ&apos; has been
already excised in some iteration of the loop at lines from 11 to 23. Fragment ϕ&apos; is thus
replaced by some link l&apos;. Because of the definition of maximal node, ϕ must contain at
least one link l that is not contained in ϕ&apos;. In case l itself is part of some excised fragment
ϕ&amp;quot;, there will still be some other fresh link replacing ϕ&amp;quot;. We thus conclude that, when
excised, ϕ always has at least two links. Because excised fragments always have at least
two links and since we never consider elementary trees as candidate fragments (line 6),
we can conclude that our algorithm always finds a non-trivial factorization of G.
We can now turn to an analysis of the computational complexity of our algorithm.
Consider an elementary tree α of G with r links and with a maximum of f nodes per
link. In the preprocessing phase of the algorithm, the computation of sets lnodes(n,lj)
can be carried out in time O(|α |· r · f). To see this, notice that there are no more than
|α |· r such sets. Furthermore, we have |lnodes(n,lj) |&lt; f for each j, and each node in
lnodes(n, lj) is processed in constant time through the union operator, when constructing
the set lnodes(n&apos;,lj) for the parent node n&apos; of n. Clearly, O(|α |· r · f) is also a time upper
bound for the computation of quantities σ(n) and links(n) for all nodes in α, and for
extracting a list of the maximal nodes therein as well.14
In what follows, we will need to compare signatures of different nodes for equality.
Despite the fact that each signature has r elements, and each element of a signature is a
set with O(f ) elements, there are at most |α |different signatures. We can therefore use
an atomic symbol to name each signature (perfect hashing). In this way, signatures can
be compared in constant time.
The marking of all maximal chains within α, as specified by the algorithm in
Figure 15, can be implemented in time O(|α|). This is done by encoding the associative
14 We remark here that a further improvement in efficiency could be achieved by replacing the sets of nodes
in a signature with the single node that is the least common ancestor of the set of nodes. However, using
the set of nodes substantially improves the clarity of the presentation of the algorithm, so we do not
pursue this optimization here.
</bodyText>
<page confidence="0.994668">
475
</page>
<note confidence="0.562972">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.999015448979592">
array G in the algorithm through a one-dimensional array indexed by signature names.
Each element of the array points to a linked list of nodes, representing a maximal chain.
We now analyze the running time of the factorization function in Figure 18. Let us
first consider a single elementary tree α. We implement the priority queue A through
a heap data structure. The loops at lines 6 and 9 run in time O(|α |· log(|α|)): This is
the standard result for populating a heap; see for instance Cormen et al. (2001). At
each iteration of the while loop at lines 11 to 23, we extract some fragment α(n) or
α(n1, nq). The processing of each such fragment ϕ takes an amount of time O(|ϕ|),
where |ϕ |is the number of nodes of ϕ. In such an iteration, α needs to be re-edited
into a new elementary tree with the number of nodes |α |− |ϕ |+ c, where c &lt; 3 is a
constant that depends on the specific transformation in Figure 16 that was applied in
the excision of the fragment tree. Nonetheless, if a suitable representation is maintained
for α, making use of nodes and pointers, the re-editing of α can be done in constant
time. Then a single iteration of the while loop takes time O(|ϕ|), where ϕ is the excised
fragment. We can then conclude that all iterations of the while loop take an amount of
time O(|α |· log(|α|)).15
Now let αM be the elementary tree of G with the largest size, and let rG and fG be the
rank and fan-out of G, respectively. Putting everything together, the total running time
of the factorization algorithm is O(|G |· (rG · fG + log(|αM|))), where |G|, the size of the
input grammar, is defined as the sum of terms |α |for all elementary trees α of G. Because
we always have fG &lt; |αM|, this upper bound can be rewritten as O(|G |· |αM |· rG).
A special case is worth discussing here. If the maximum number of links impinging
on a node of our elementary trees is bounded by some constant, we have rG · fG =
O(|αM|). In this case, the above bound reduces to O(|G |· |αM|). The constant bound on
the number of links impinging on the nodes of a grammar holds for all of the grammars
we have studied in Section 3.
We now argue that our algorithm provides the factorization G&apos; of G with the
smallest possible rank, under the assumption that G and G&apos; are strongly equivalent,
that is, that they generate the same derived trees.
A factorization f of G is called maximal if no one of its fragments has a smaller
isolated fragment within itself. We start by observing that the factorization of G found
by our algorithm is maximal. To see this, consider the excision by our algorithm of
a maximal chain (n1, ... , nq) within an elementary tree α. This item is added to the
priority heap at line 10, with a score of links(n1) − links(nq). This score is the number of
links found in fragment α(n1,nq), with the exclusion of the links at the gap node nq.
The chain is then factorized into fragments α(ni−1, ni), for each i with 2 &lt; i &lt; q. Assume
that some fragment α(ni−1, ni) contains in turn a maximal chain (n1, ... , nq,) or else
an isolated fragment of the form α(n&apos;). In the first case we have links(n&apos;1) − links(n&apos;q,) &lt;
links(n1) − links(nq) and in the second case we have links(n&apos;) &lt; links(n1) − links(nq).
Thus the smaller chain or fragment is processed earlier than our maximal chain, and
by the time our maximal chain is processed, the smaller chain or fragment has already
been excised. A similar argument shows that the excision by our algorithm of an isolated
fragment of the form α(n) happens after the excision of any maximal chain or fragment
included within α(n) itself.
15 We mention here a second possible optimization of the algorithm. The priority queue allows us to excise
tree segments always from the input elementary tree α, making the algorithm easier to analyze.
However, as one of the reviewers has pointed out to us, we could do away with the use of the priority
queue and process fragment trees in any order. This results in running time O(|α|) for the factorization
function in Figure 18.
</bodyText>
<page confidence="0.995755">
476
</page>
<note confidence="0.829581">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<bodyText confidence="0.99986616">
We now show that the maximal factorization of G is unique. Let ϕ and ϕ&apos; be two
isolated fragments of some elementary tree α. We say that ϕ and ϕ&apos; partially overlap if
the set of nodes shared by ϕ and ϕ&apos; is not empty and is a proper subset of the nodes of
both fragments. It is not difficult to see that if ϕ and ϕ&apos; partially overlap, then at least
one among ϕ and ϕ&apos; must have the form α(n1, n2).
Without any loss of generality, we assume that the elementary trees of G are always
factorized at their maximal nodes, as discussed in Section 6.1. Let us assume that f
and f&apos; are two distinguishable maximal factorizations of G. Because no fragment of one
factorization can be a sub-fragment of some fragment of the other factorization, there
must be some fragment ϕ of f and some fragment ϕ&apos; of f&apos; such that ϕ and ϕ&apos; partially
overlap.
Assume that ϕ has the form α(n1). Then ϕ&apos; must have the form α(n2, n3), and n1
must be in the path from n3 to n2. Because ϕ&apos; is as small as possible, (n2, n3) must be a
minimal pair. We have then established a violation of Lemma 2(i). Assume now that ϕ
has the form α(n1, n2). Again, (n1, n2) must be a minimal pair. If ϕ&apos; has the form α(n3),
this argument applies again, resulting in a violation of Lemma 2(i). If ϕ&apos; has the form
α(n3,n4), then (n3, n4) must be a minimal pair. Furthermore, n1, n2, n3, and n4 must all
be on the same path within α, with n1, n2 in alternation with n3, n4. This establishes a
violation of Lemma 2(ii). The assumption that f and f&apos; partially overlap then leads to a
contradiction, and we must conclude that the maximal factorization of G is unique.
We can also use this argument against the existence of overlapping fragments to
show that any factorization f of G other than the unique maximal factorization fM must
be coarser than fM, meaning that each fragment ϕ off is also a fragment of fM, or else
ϕ can be represented as a combination of the fragments of fM (through substitution and
adjunction). This means that no factorization of G can have rank smaller than the rank
of the maximal factorization fM. We conclude that our algorithm is optimal.
This discussion on the optimality of the factorization algorithm crucially assumes
strong equivalence with the source TL-MCTAG G. Of course there might be TL-
MCTAGs that are weakly equivalent to G, that is, they generate the same language,
and have rank strictly smaller than the rank of G&apos;. However, finding such structurally
different grammars is a task that seems to require techniques quite different from the
factorization techniques we have developed in this section. Furthermore, the task might
be computationally unfeasible, considering the fact that the weak equivalence problem
for TL-MCTAG is undecidable. (Such a problem is undecidable even for CFGs.)
We remark here that if we are allowed to change G by recasting its elementary trees
in some suitable way, we might be able to further reduce the rank with respect to the
algorithm we have presented in this section. In this case the output grammar would
not preserve the derived trees, that is, we lose the strong equivalence, but still retain
the derivation trees unaltered. Although this is likely not desirable for applications
in which the input grammar consists of linguistically motivated trees, there may be
other applications for which the preservation of the internal structure of the trees is
less important than the processing efficiency that can be gained by more aggressive
factorization. Furthermore, it is well known that the desired derived tree for the source
grammar can be easily reconstructed from the derivation tree.
Consider for instance cases in which the input TL-MCTAG is not in binary form,
that is, some nodes have more than two children. Currently, the definition of fragment
does not allow splitting apart a subset of the children of a given node from the remaining
ones. However, if we allow binarization of the elementary trees of the source grammar,
then we might be able to isolate sets of links that could not be factorized in the source
grammar itself. It is not difficult to construct an elementary tree α with r links such
</bodyText>
<page confidence="0.990375">
477
</page>
<note confidence="0.559824">
Computational Linguistics Volume 36, Number 3
</note>
<bodyText confidence="0.999656190476191">
that no factorization of α is possible if we are required to preserve α’s structure, but if
we drop such a requirement then we could binarize α in such a way that a factorization
can be obtained through the application of the algorithm above, such that any tree in the
factorization has no more than two links. However, the general problem of restructuring
elementary trees in such a way that an optimal factorization is possible is not trivial and
requires further research. We leave this problem for future work.
A second case arises when multiple links impinge on the same node of an elemen-
tary tree. As presented, the factorization algorithm is designed to handle grammars in
which multiple adjunction is permitted. However, if multiple adjunction is disallowed
and the grammar contains trees in which multiple links impinge on the same node,
the use of one link at a node will disqualify any other impinging links from use. This
opens up the possibility of further reducing the rank of the grammar by producing
tree sets that do not contain any nodes on which multiple links impinge. This can
be accomplished by performing a first-pass grammar transformation in which a copy
of each elementary tree set is added to the grammar for each distinct, maximal, non-
conflicting set of links appearing in the tree set. This transformation in itself may result
in a reduction of the rank of the source grammar. The factorization algorithm can then be
applied to the new grammar. However, if the elementary trees in the source grammar
contain clusters of links that are mutually overlapping, the suggested transformation
may blow up the size of the input grammar in a way that is not bounded by any
polynomial function.
</bodyText>
<sectionHeader confidence="0.954693" genericHeader="conclusions">
7. Conclusion
</sectionHeader>
<bodyText confidence="0.999986083333333">
This paper explores the complexity of TL-MCTAG, showing that recognition is NP-
complete under a range of interesting restrictions. It then provides a parsing algorithm
that performs better than the extrapolation of the standard multiple CFG parsing
method to TL-MCTAG. As shown by our proofs, the difficulty in parsing TL-MCTAG
stems from the rank of the input grammar. We offer a novel and efficient algorithm for
minimizing the rank of the input grammar while preserving its strong generative capac-
ity. It fits into an active line of research into efficient processing of multicomponent and
synchronous formalisms that appear computationally intractable but have desirable
characteristics for meeting the expressive needs of natural language. It presents novel
complexity results and algorithms for TL-MCTAG, a widely known and used formalism
in computational linguistics that may be applied more effectively in natural-language
processing using algorithms that process it as efficiently as possible.
</bodyText>
<sectionHeader confidence="0.998404" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.8804526">
This work was supported in part by the
National Science Foundation under award
BCS-0827979. The second author has been
partially supported by MIUR under project
PRIN No. 2007TJNZRE 002.
</bodyText>
<sectionHeader confidence="0.984759" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999914523809524">
Barton, G. Edward. 1985. On the complexity
of ID/LP parsing. Computational
Linguistics, 11(4):205–218.
Chen, John and Vijay K. Shanker. 2004.
Automated extraction of TAGs from the
Penn treebank. In H. Blunt, J. Carroll, and
G. Satta, editors, New Developments in
Parsing Technology. Kluwer Academic,
Amsterdam, pages 73–89.
Cormen, Thomas H., Charles E. Leiserson,
Ronald L. Rivest, and Clifford Stein. 2001.
Introduction to Algorithms. The MIT Press,
Cambridge, MA.
Earley, J. 1970. An Efficient Context-free
Parsing Algorithm. Ph.D. thesis, University
of California, Berkeley, CA.
Garey, M. R. and D. S. Johnson. 1979.
Computers and Intractability. Freeman and
Co., New York, NY.
Gildea, Daniel, Giorgio Satta, and Hao
Zhang. 2006. Factoring synchronous
</reference>
<page confidence="0.979411">
478
</page>
<note confidence="0.673261">
Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG
</note>
<reference confidence="0.999810720338983">
grammars by sorting. In The International
Conference on Computational Linguistics/
Association for Computational Linguistics
(COLING/ACL-06) Poster Session
pages 279–286, Sydney.
Graham, S. L., M. A. Harrison, and W. L.
Ruzzo. 1980. An improved context-free
recognizer. ACM Transactions on
Programming Languages and Systems,
2:415–462.
Han, Chung-Hye. 2006. Pied-piping in
relative clauses: Syntax and compositional
semantics based on synchronous tree
adjoining grammar. In Proceedings of the 8th
International Workshop on Tree Adjoining
Grammars and Related Formalisms (TAG+ 8),
pages 41–48, Sydney.
Joshi, A. K., L. S. Levy, and M. Takahashi.
1975. Tree adjunct grammars. Journal of
Computer and System Sciences,
10(1):136–163.
Joshi, Aravind K. and Yves Schabes. 1997.
Tree-adjoining grammars. In G. Rozenberg
and A. Salomaa, editors, Handbook of
Formal Languages, volume 3. Springer,
Berlin, pages 69–124.
Kaji, Yuichi, Ryuchi Nakanishi, Hiroyuki
Seki, and Tadao Kasami.1992. The
universal recognition problems for
multiple context-free grammars and for
linear context-free rewriting systems.
IEICE Transactions on Information and
Systems, E75-D(1):78–88.
Kaji, Yuichi, Ryuchi Nakanishi, Hiroyuki
Seki, and Tadao Kasami.1994. The
computational complexity of the universal
recognition problem for parallel multiple
context-free grammars. Computational
Intelligence, 10(4):440–452.
Kallmeyer, Laura. 2005. Tree-local
multicomponent tree adjoining grammars
with shared nodes. Computational
Linguistics, 31(2):187–225.
Kallmeyer, Laura. 2009. A declarative
characterization of different types of
multicomponent tree adjoining grammars.
Research on Language and Computation,
7(1):55–99.
Kallmeyer, Laura and Aravind K. Joshi.
2003. Factoring predicate argument and
scope semantics: Underspecified
semantics with LTAG. Research on
Language and Computation, 1:3–58.
Kallmeyer, Laura and Maribel Romero.
2007. Reflexives and reciprocals in
LTAG. In Proceedings of the Seventh
International Workshop on Computational
Semantics ICWS-7, pages 271–282,
Tilburg.
Kasami, T. 1965. An efficient recognition
and syntax algorithm for context-free
languages. Technical Report
AF-CRL-65-758, Air Force Cambridge
Research Laboratory, Bedford, MA.
Nesson, Rebecca. 2009. Synchronous and
Multicomponent Tree-Adjoining Grammars:
Complexity, Algorithms and Linguistic
Applications. Ph.D. thesis, Harvard
University, Cambridge, MA.
Nesson, Rebecca, Giorgio Satta, and Stuart
Shieber. 2008. Optimal k-arization of
synchronous tree-adjoining grammar. In
the Association for Computational Linguistics
(ACL-2008), pages 604–612, Columbus, OH.
Nesson, Rebecca and Stuart M. Shieber.
2006. Simpler TAG semantics through
synchronization. In Proceedings of the
11th Conference on Formal Grammar,
pages 129–142, Malaga.
Nesson, Rebecca and Stuart M. Shieber.
2007. Extraction phenomena in
synchronous TAG syntax and semantics.
In Proceedings of Syntax and Structure in
Statistical Translation (SSST), pages 9–16,
Rochester, NY.
Rambow, Owen. 1994. Formal and
computational aspects of natural language
syntax. Ph.D. thesis, University of
Pennsylvania, Philadelphia, PA.
Satta, Giorgio and Enoch Peserico. 2005.
Some computational complexity results for
synchronous context-free grammars. In
Proceedings of Human Language Technology
Conference and Conference on Empirical
Methods in Natural Language Processing
(HLT05/EMNLP05), pages 803–810,
Vancouver.
Schabes, Yves and Richard C. Waters. 1995.
Tree insertion grammar: A cubic-time
parsable formalism that lexicalizes
context-free grammar without changing
the trees produced. Computational
Linguistics, 21(4):479–513.
Seki, H., T. Matsumura, M. Fujii, and
T. Kasami. 1991. On multiple context-free
grammars. Theoretical Computer Science,
88:191–229.
Shieber, Stuart M. and Yves Schabes. 1994.
An alternative conception of tree-adjoining
derivation. Computational Linguistics,
20(1):91–124.
Shieber, Stuart M., Yves Schabes, and
Fernando C. N. Pereira. 1995. Principles
and implementation of deductive parsing.
Journal of Logic Programming, 24(1–2):3–36.
Sippu, S. and E. Soisalon-Soininen. 1988.
Parsing Theory: Languages and Parsing.
Springer-Verlag, Berlin.
</reference>
<page confidence="0.974552">
479
</page>
<reference confidence="0.982537971428571">
Computational Linguistics Volume 36, Number 3
Søgaard, Anders, Timm Lichte, and
Wolfgang Maier. 2007. On the complexity
of linguistically motivated extensions of
tree-adjoining grammar. In Recent
Advances in Natural Language Processing
2007, Borovets.
Tovey, C. A. 1984. A simplified NP-complete
satisfiability problem. Discrete Applied
Mathematics, 8(1):85–90.
Vijay-Shanker, K. 1987. A study of
tree-adjoining grammars. Ph.D. thesis,
Department of Computer and Information
Science, University of Pennsylvania,
Philadelphia, PA.
Vijay-Shanker, K. and Aravind K. Joshi. 1985.
Some computational properties of
tree-adjoining grammars. In Proceedings of
the 23rd Annual Meeting of the Association
for Computational Linguistics, pages 82–93,
Chicago, IL.
Weir, David. 1988. Characterizing mildly
context-sensitive grammar formalisms.
Ph.D. thesis, Department of Computer and
Information Science, University of
Pennsylvania, Philadelphia, PA.
Younger, D. H. 1967. Recognition and
parsing of context-free languages in time
n3. Information and Control, 10(2):189–208.
Zhang, Hao and Daniel Gildea. 2007.
Factorization of synchronous context-free
grammars in linear time. In NAACL
Workshop on Syntax and Structure in
Statistical Translation (SSST), pages 25–32,
Rochester, NY.
</reference>
<page confidence="0.998229">
480
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.157100">
<title confidence="0.995577">Complexity, Parsing, and Factorization of Tree-Local Multi-Component</title>
<author confidence="0.750182">Tree-Adjoining Grammar</author>
<affiliation confidence="0.948771222222222">School of Engineering and Applied Sciences, Harvard University Department of Information Engineering University of Padua M. School of Engineering and Applied Sciences Harvard University</affiliation>
<abstract confidence="0.9955698125">Tree-Local Multi-Component Tree-Adjoining Grammar (TL-MCTAG) is an appealing formalism for natural language representation because it arguably allows the encapsulation of the appropriate domain of locality within its elementary structures. Its multicomponent structure allows modeling of lexical items that may ultimately have elements far apart in a sentence, such quantifiers and When used as the base formalism for a synchronous grammar, its flexibility allows it to express both the close relationships and the divergent structure necessary to capture the links between the syntax and semantics of a single language or the syntax of two different languages. Its limited expressivity provides constraints on movement and, we posit, may have generated additional popularity based on a misconception about its parsing complexity. Although TL-MCTAG was shown to be equivalent in expressivity to TAG when it was first introduced, the complexity of TL-MCTAG is still not well understood. This article offers a thorough examination of the problem of TL-MCTAG recognition, showing that even highly restricted forms of TL-MCTAG are NP-complete to recognize. However, in spite of the provable difficulty of the recognition problem, we offer several algorithms that can substantially improve processing efficiency. First, we present a parsing algorithm that improves on the baseline parsing</abstract>
<address confidence="0.712836666666667">of Engineering and Applied Sciences, Harvard University, 38 Plymouth St., Cambridge, MA 02141. E-mail: nesson@seas.harvard.edu. of Information Engineering, University of Padua, via Gradenigo 6/A, 1-35131 Padova, Italy.</address>
<email confidence="0.988575">E-mail:satta@dei.unipd.it.</email>
<affiliation confidence="0.993679">of Engineering and Applied Sciences, Harvard University, Maxwell Dworkin Laboratory,</affiliation>
<address confidence="0.995996">33 Oxford Street, Cambridge, MA 02138. E-mail: shieber@seas.harvard.edu.</address>
<note confidence="0.9384055">Submission received: 4 November 2008; revised submission received: 13 November 2009; accepted for publication: 18 March 2010. © 2010 Association for Computational Linguistics Computational Linguistics Volume 36, Number 3</note>
<abstract confidence="0.974114">method and runs in polynomial time when both the fan-out and rank of the input grammar are bounded. Second, we offer an optimal, efficient algorithm for factorizing a grammar to produce a strongly equivalent TL-MCTAG grammar with the rank of the grammar minimized.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>G Edward Barton</author>
</authors>
<title>On the complexity of ID/LP parsing.</title>
<date>1985</date>
<journal>Computational Linguistics,</journal>
<volume>11</volume>
<issue>4</issue>
<contexts>
<context position="37992" citStr="Barton (1985)" startWordPosition="6479" endWordPosition="6480">tion problem for TL-MCTAG with rank 1 and unbounded fan-out is NP-complete. Proof We provide a reduction from 3PAR.6 Let (s1,.. . , s3m, t) bean input instance of the 3PAR problem, with all of the integers si represented in unary notation. Our target grammar G is defined as follows. We use a set of nonterminal symbols {S, A}, with S being the start symbol. We take the set of terminal symbols to be {a, $}. G contains two elementary tree sets. The first set has a single elementary tree γ, corresponding to a context-free production of the form S -4 (AAA$)m−1AAA: 6 We follow the proof strategy of Barton (1985) in this proof. 456 Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG Tree -y has a unique link impinging on all of the 3m occurrences of nonterminal A. The second (multi)set of G contains elementary trees -yi , 1 &lt; i &lt; 3m. Each -yi corresponds to a context-free production of the form A -4 asi: We also construct a string w = (at$)m−1at. If there exists a partition for multiset Q = {s1, ... , s3m} satisfying the 3PAR requirement, we can directly construct a derivation for w in G, by sorting the elementary trees in the second set accordingly, and by inserting these tr</context>
</contexts>
<marker>Barton, 1985</marker>
<rawString>Barton, G. Edward. 1985. On the complexity of ID/LP parsing. Computational Linguistics, 11(4):205–218.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Chen</author>
<author>Vijay K Shanker</author>
</authors>
<title>Automated extraction of TAGs from the Penn treebank. In</title>
<date>2004</date>
<booktitle>New Developments in Parsing Technology.</booktitle>
<pages>73--89</pages>
<editor>H. Blunt, J. Carroll, and G. Satta, editors,</editor>
<publisher>Kluwer Academic,</publisher>
<location>Amsterdam,</location>
<contexts>
<context position="11029" citStr="Chen and Shanker (2004)" startWordPosition="1649" endWordPosition="1652">dness of the recognition problem for these variants and, as an indirect result, also demonstrates the NP-hardness of TLMCTAG recognition. This work differs from ours in that it does not directly show the NP-hardness of TL-MCTAG recognition and does not further locate and constrain the source of the NP-hardness of the problem to the rank of the input grammar, nor does it provide mitigation through rank reduction of the grammar or by other means. Our work on TL-MCTAG factorization is thematically though not formally related to the body of work on induction of TAGs from a treebank exemplified by Chen and Shanker (2004). The factorization performed in their work is done on the basis of syntactic constraints rather than with the goal of reducing complexity. Working from a treebank of actual natural language sentences, their work does not have the benefit of explicitly labeled adjunction sites but rather must attempt to reconstruct a derivation from complete derived trees. The factorization problem we address is more closely related to work on factorizing synchronous context-free grammars (CFGs) (Gildea, Satta, and Zhang 2006; Zhang and Gildea 2007) and on factorizing synchronous TAGs (Nesson, Satta, and Shieb</context>
</contexts>
<marker>Chen, Shanker, 2004</marker>
<rawString>Chen, John and Vijay K. Shanker. 2004. Automated extraction of TAGs from the Penn treebank. In H. Blunt, J. Carroll, and G. Satta, editors, New Developments in Parsing Technology. Kluwer Academic, Amsterdam, pages 73–89.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thomas H Cormen</author>
<author>Charles E Leiserson</author>
<author>Ronald L Rivest</author>
<author>Clifford Stein</author>
</authors>
<title>Introduction to Algorithms.</title>
<date>2001</date>
<publisher>The MIT Press,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="86200" citStr="Cormen et al. (2001)" startWordPosition="15116" endWordPosition="15119">he algorithm, so we do not pursue this optimization here. 475 Computational Linguistics Volume 36, Number 3 array G in the algorithm through a one-dimensional array indexed by signature names. Each element of the array points to a linked list of nodes, representing a maximal chain. We now analyze the running time of the factorization function in Figure 18. Let us first consider a single elementary tree α. We implement the priority queue A through a heap data structure. The loops at lines 6 and 9 run in time O(|α |· log(|α|)): This is the standard result for populating a heap; see for instance Cormen et al. (2001). At each iteration of the while loop at lines 11 to 23, we extract some fragment α(n) or α(n1, nq). The processing of each such fragment ϕ takes an amount of time O(|ϕ|), where |ϕ |is the number of nodes of ϕ. In such an iteration, α needs to be re-edited into a new elementary tree with the number of nodes |α |− |ϕ |+ c, where c &lt; 3 is a constant that depends on the specific transformation in Figure 16 that was applied in the excision of the fragment tree. Nonetheless, if a suitable representation is maintained for α, making use of nodes and pointers, the re-editing of α can be done in consta</context>
</contexts>
<marker>Cormen, Leiserson, Rivest, Stein, 2001</marker>
<rawString>Cormen, Thomas H., Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2001. Introduction to Algorithms. The MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Earley</author>
</authors>
<title>An Efficient Context-free Parsing Algorithm.</title>
<date>1970</date>
<tech>Ph.D. thesis,</tech>
<institution>University of California,</institution>
<location>Berkeley, CA.</location>
<contexts>
<context position="49305" citStr="Earley 1970" startWordPosition="8420" endWordPosition="8421">t adjoin at the same link location for structural reasons, these analyses do not ultimately make use of the flexibility in the selection of an adjunction site that the set definition provides. The different VP-rooted auxiliary trees which could benefit from interchanging adjunction sites achieve this flexibility because they appear in different tree sets, not because they are members of a single set using the set definition. 460 Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG Following Graham, Harrison, and Ruzzo (1980) in their optimization of the Earley parser (Earley 1970), the identifiers of specific trees need not be represented in the items of the parser. Rather the tree identifiers may be replaced by the labels of the root nodes of those trees, effectively bundling items of trees that share a root node label and cover the same span. This modification to the algorithm reduces the time complexity of the parser to O(n2(r+1)|G|). We refer to this method of reducing complexity by removing unnecessary information about specific elementary structures from the items of the parser as the GHR optimization. When applied, it reduces the time complexity in the grammar s</context>
</contexts>
<marker>Earley, 1970</marker>
<rawString>Earley, J. 1970. An Efficient Context-free Parsing Algorithm. Ph.D. thesis, University of California, Berkeley, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M R Garey</author>
<author>D S Johnson</author>
</authors>
<date>1979</date>
<journal>Computers</journal>
<location>New York, NY.</location>
<contexts>
<context position="37242" citStr="Garey and Johnson 1979" startWordPosition="6344" endWordPosition="6347"> Theorem 2. ■ 3.3 Universal Recognition of TL-MCTAG with Bounded Rank is NP-Complete We now show that universal recognition of TL-MCTAG is NP-complete even when the rank is bounded. We briefly recall here the definition of a decision problem called 3PAR. Let t and si &lt; t be positive integers,1 &lt; i &lt; 3m, m &gt; 1. The language 3PAR is defined as the set of all tuples (s1, ... , s3m, t), satisfying the following condition: The multiset Q = {s1, ... , s3m} can be partitioned into multisets Qi, 1 &lt; i &lt; m, such that for every 1 &lt; i &lt; m, IQiI = 3 and EscQi s = t. Language 3PAR is strongly NP-complete (Garey and Johnson 1979). This means that 3PAR is NP-complete even in case the integers si are all represented in unary notation. Theorem 4 The universal recognition problem for TL-MCTAG with rank 1 and unbounded fan-out is NP-complete. Proof We provide a reduction from 3PAR.6 Let (s1,.. . , s3m, t) bean input instance of the 3PAR problem, with all of the integers si represented in unary notation. Our target grammar G is defined as follows. We use a set of nonterminal symbols {S, A}, with S being the start symbol. We take the set of terminal symbols to be {a, $}. G contains two elementary tree sets. The first set has</context>
</contexts>
<marker>Garey, Johnson, 1979</marker>
<rawString>Garey, M. R. and D. S. Johnson. 1979. Computers and Intractability. Freeman and Co., New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Gildea</author>
<author>Giorgio Satta</author>
<author>Hao Zhang</author>
</authors>
<title>Factoring synchronous grammars by sorting.</title>
<date>2006</date>
<booktitle>In The International Conference on Computational Linguistics/ Association for Computational Linguistics (COLING/ACL-06) Poster Session</booktitle>
<pages>279--286</pages>
<location>Sydney.</location>
<marker>Gildea, Satta, Zhang, 2006</marker>
<rawString>Gildea, Daniel, Giorgio Satta, and Hao Zhang. 2006. Factoring synchronous grammars by sorting. In The International Conference on Computational Linguistics/ Association for Computational Linguistics (COLING/ACL-06) Poster Session pages 279–286, Sydney.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S L Graham</author>
<author>M A Harrison</author>
<author>W L Ruzzo</author>
</authors>
<title>An improved context-free recognizer.</title>
<date>1980</date>
<journal>ACM Transactions on Programming Languages and Systems,</journal>
<pages>2--415</pages>
<marker>Graham, Harrison, Ruzzo, 1980</marker>
<rawString>Graham, S. L., M. A. Harrison, and W. L. Ruzzo. 1980. An improved context-free recognizer. ACM Transactions on Programming Languages and Systems, 2:415–462.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chung-Hye Han</author>
</authors>
<title>Pied-piping in relative clauses: Syntax and compositional semantics based on synchronous tree adjoining grammar.</title>
<date>2006</date>
<booktitle>In Proceedings of the 8th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+ 8),</booktitle>
<pages>41--48</pages>
<location>Sydney.</location>
<contexts>
<context position="3943" citStr="Han 2006" startWordPosition="555" endWordPosition="556">mentary structures, such as the syntax and the semantics of a single word or construction or the syntax of a single word or construction and its translation into another language, with a pair of elementary trees. This flexibility permits conceptually simple, highly expressive, and tightly coupled modeling of the relationship between the syntax and semantics of a language or the syntax and semantics of two languages. As a result, it has frequently been put to use in a growing body of research into incorporating semantics into the TreeAdjoining Grammar (TAG) framework (Kallmeyer and Joshi 2003; Han 2006; Nesson and Shieber 2006, 2007). It is also under investigation as a possible base formalism for use in synchronous-grammar based machine translations systems (Nesson 2009). Similar pairing of elementary structures of the TAG formalism is too constrained to capture the inherent divergence in structure between different languages or even between the syntax and semantics of a language. Pairing of more expressive formalisms is too flexible to provide appropriate constraints and has unacceptable consequences for processing efficiency. Although TL-MCTAG was first introduced by Weir (1988) and show</context>
</contexts>
<marker>Han, 2006</marker>
<rawString>Han, Chung-Hye. 2006. Pied-piping in relative clauses: Syntax and compositional semantics based on synchronous tree adjoining grammar. In Proceedings of the 8th International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+ 8), pages 41–48, Sydney.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A K Joshi</author>
<author>L S Levy</author>
<author>M Takahashi</author>
</authors>
<title>Tree adjunct grammars.</title>
<date>1975</date>
<journal>Journal of Computer and System Sciences,</journal>
<volume>10</volume>
<issue>1</issue>
<contexts>
<context position="14565" citStr="Joshi, Levy, and Takahashi, 1975" startWordPosition="2206" endWordPosition="2210">or adjoin. In contrast to CFGs, the derivation and derived trees are distinct. We depart from the traditional definition in notation only by specifying adjunction sites explicitly with numbered links in order to simplify the presentation of the issues raised by multi-component adjunctions. Each link may be used only once in a derivation. Adjunctions may only occur at nodes marked with a link. A numbered link at a single site in a tree specifies that a single adjunction is available at that site. An obligatory adjunction constraint indicates that at least one link at a given node must be used (Joshi, Levy, and Takahashi, 1975; Vijay-Shanker and Joshi 1985). We notate obligatory adjunction constraints by underlining the label of the node to which the constraint applies. Because we use explicit links, the edges in the derivation tree are labeled with the number of the link used rather than the traditional label of the address at which the operation takes place. Multiple adjunction refers to permitting an unbounded number of adjunctions to occur at a single adjunction site (Vijay-Shanker 1987; Shieber and Schabes 1994). In the standard definition of TAG, multiple adjunction is disallowed to ensure that each derivatio</context>
<context position="40832" citStr="Joshi, Levy, and Takahashi, 1975" startWordPosition="6971" endWordPosition="6975">nstructed for each variable, one corresponding to a true assignment and one corresponding to a false assignment. The prohibition on multiple adjunction ensures that only one of these two tree sets can be used for each variable. The tree set of a particular truth assignment for a particular variable vi makes it possible to satisfy the obligatory adjunction constraints for the nonterminal symbols representing each of the clauses that vi satisfies in the 3SAT formula.7 Additional adjunction sites for each clause 7 Obligatory adjunction constraints are standard in the definition of TAG and MCTAG (Joshi, Levy, and Takahashi, 1975; Weir 1988). However, obligatory adjunction may be avoided in this proof by creating a 457 Computational Linguistics Volume 36, Number 3 provide overflow space in the event that more than one variable satisfies a particular clause. We fix the input string w to be the empty string. None of the trees of the grammar contain any terminal symbols. However, a successful parse of the empty string can only be achieved if all of the obligatory adjunction constraints are satisfied and this occurs if and only if all clauses of the formula are satisfied by the truth assignment to some variable. We define</context>
</contexts>
<marker>Joshi, Levy, Takahashi, 1975</marker>
<rawString>Joshi, A. K., L. S. Levy, and M. Takahashi. 1975. Tree adjunct grammars. Journal of Computer and System Sciences, 10(1):136–163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Yves Schabes</author>
</authors>
<title>Tree-adjoining grammars.</title>
<date>1997</date>
<booktitle>Handbook of Formal Languages,</booktitle>
<volume>3</volume>
<pages>69--124</pages>
<editor>In G. Rozenberg and A. Salomaa, editors,</editor>
<publisher>Springer,</publisher>
<location>Berlin,</location>
<contexts>
<context position="13600" citStr="Joshi and Schabes (1997)" startWordPosition="2044" endWordPosition="2047">e foot node and distinguished by the diacritic ∗, are labeled with the same nonterminal A. The adjunction operation entails splicing in an auxiliary tree in an internal node within an elementary tree also labeled with nonterminal A. Trees without a foot node, which serve as a base case for derivations and may combine with other trees by substitution, 446 Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG are called initial trees. Examples of the adjunction and substitution operations are given in Figure 1. For further background, we refer the reader to the survey by Joshi and Schabes (1997). A TAG derivation can be fully specified by a derivation tree, which records how the elementary structures are combined using the TAG operations to form the derived tree. The nodes of the derivation tree are labeled by the names of the elementary trees and the edges are labeled by the addresses at which the child trees substitute or adjoin. In contrast to CFGs, the derivation and derived trees are distinct. We depart from the traditional definition in notation only by specifying adjunction sites explicitly with numbered links in order to simplify the presentation of the issues raised by multi</context>
<context position="15925" citStr="Joshi and Schabes 1997" startWordPosition="2413" endWordPosition="2416"> numbered link, our notation implicitly disallows multiple adjunction but permits a third possibility: bounded multiple adjunction. Bounded multiple adjunction permits the formalism to obtain some of the potential linguistic advantages of allowing multiple adjunction while preventing unbounded multiple adjunction. The usual constraint of allowing only one adjunction at a given adjunction site may be enforced in our link notation by permitting only one link at a particular link site to be used. MCTAG generalizes TAG by allowing the elementary items to be sets of trees rather than single trees (Joshi and Schabes 1997). The basic operations are the same but all trees in a set must adjoin (or substitute) into another tree set in a single step in the derivation. To allow for multi-component adjunction, a numbered link may appear on two or more nodes in a tree, signifying that the adjoining trees must be members of the same tree set. Any tree in a set may adjoin at any link location if it meets other adjunction or substitution conditions such as a matching node label. Thus a single multicomponent Figure 1 An example of TAG operations substitution and adjunction used here to model natural language syntax. 447 C</context>
</contexts>
<marker>Joshi, Schabes, 1997</marker>
<rawString>Joshi, Aravind K. and Yves Schabes. 1997. Tree-adjoining grammars. In G. Rozenberg and A. Salomaa, editors, Handbook of Formal Languages, volume 3. Springer, Berlin, pages 69–124.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Yuichi Kaji</author>
<author>Ryuchi Nakanishi</author>
</authors>
<title>Hiroyuki Seki, and Tadao Kasami.1992. The universal recognition problems for multiple context-free grammars and for linear context-free rewriting systems.</title>
<journal>IEICE Transactions on Information and Systems,</journal>
<pages>75--1</pages>
<marker>Kaji, Nakanishi, </marker>
<rawString>Kaji, Yuichi, Ryuchi Nakanishi, Hiroyuki Seki, and Tadao Kasami.1992. The universal recognition problems for multiple context-free grammars and for linear context-free rewriting systems. IEICE Transactions on Information and Systems, E75-D(1):78–88.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Yuichi Kaji</author>
<author>Ryuchi Nakanishi</author>
</authors>
<title>Hiroyuki Seki, and Tadao Kasami.1994. The computational complexity of the universal recognition problem for parallel multiple context-free grammars.</title>
<journal>Computational Intelligence,</journal>
<volume>10</volume>
<issue>4</issue>
<marker>Kaji, Nakanishi, </marker>
<rawString>Kaji, Yuichi, Ryuchi Nakanishi, Hiroyuki Seki, and Tadao Kasami.1994. The computational complexity of the universal recognition problem for parallel multiple context-free grammars. Computational Intelligence, 10(4):440–452.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Kallmeyer</author>
</authors>
<title>Tree-local multicomponent tree adjoining grammars with shared nodes.</title>
<date>2005</date>
<journal>Computational Linguistics,</journal>
<volume>31</volume>
<issue>2</issue>
<contexts>
<context position="48315" citStr="Kallmeyer 2005" startWordPosition="8271" endWordPosition="8272">e is known, the indices in the antecedent items are not entirely independent. An example is given in Figure 7. Observation shows that there will be a worst case of 2(r + 1) independent indices in a given rule. Because each adjoining tree is independent, there may be r + 1 different trees represented in a single rule. This results in a time complexity of O(n2(r+1)|G|r+1) where n is the length of the input string, |G |is a representation of the grammar size, and r is the rank of the input grammar. 8 Various sorts of multicomponent TAGs have been proposed for analysis of scrambling (Rambow 1994; Kallmeyer 2005). Scrambling entails several different trees of the same type adjoining in different orders, and therefore seems like a candidate for making use of the flexibility provided by the set definition. However, in these analyses the elementary tree structures are composed of one VP-rooted auxiliary tree and one VP-rooted initial tree. Because auxiliary trees and initial trees cannot adjoin at the same link location for structural reasons, these analyses do not ultimately make use of the flexibility in the selection of an adjunction site that the set definition provides. The different VP-rooted auxil</context>
</contexts>
<marker>Kallmeyer, 2005</marker>
<rawString>Kallmeyer, Laura. 2005. Tree-local multicomponent tree adjoining grammars with shared nodes. Computational Linguistics, 31(2):187–225.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Kallmeyer</author>
</authors>
<title>A declarative characterization of different types of multicomponent tree adjoining grammars.</title>
<date>2009</date>
<journal>Research on Language and Computation,</journal>
<volume>7</volume>
<issue>1</issue>
<contexts>
<context position="8906" citStr="Kallmeyer (2009)" startWordPosition="1316" endWordPosition="1317">h constant polynomial degree in both the length of the input string and the grammar size when rank is bounded. It may not be generally desirable to impose an arbitrary rank bound on TL-MCTAGs to be used for linguistic applications. However, it is possible given a TL-MCTAG to minimize the rank of the grammar. In the penultimate section of the paper (Section 6) we offer a novel and efficient algorithm for transforming an arbitrary TL-MCTAG into a strongly equivalent TL-MCTAG where the rank is minimized. 1.2 Related Work Our work on TL-MCTAG complexity bears comparison to that of several others. Kallmeyer (2009) provides a clear and insightful breakdown of the different characteristics of MCTAG variants and the effect of these characteristics on expressivity and complexity. That work clarifies the definitions of MCTAG variants and the relationship between them rather than presenting new complexity results. However, it suggests the possibility of proving results such as ours in its assertion that, after a standard TAG parse, a check of whether particular trees belong to the same tree set cannot be performed in polynomial time. Kallmeyer also addresses the problem of parsing 445 Computational Linguisti</context>
</contexts>
<marker>Kallmeyer, 2009</marker>
<rawString>Kallmeyer, Laura. 2009. A declarative characterization of different types of multicomponent tree adjoining grammars. Research on Language and Computation, 7(1):55–99.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Kallmeyer</author>
<author>Aravind K Joshi</author>
</authors>
<title>Factoring predicate argument and scope semantics: Underspecified semantics with LTAG.</title>
<date>2003</date>
<booktitle>Research on Language and Computation,</booktitle>
<pages>1--3</pages>
<contexts>
<context position="3933" citStr="Kallmeyer and Joshi 2003" startWordPosition="551" endWordPosition="554">nt but closely related elementary structures, such as the syntax and the semantics of a single word or construction or the syntax of a single word or construction and its translation into another language, with a pair of elementary trees. This flexibility permits conceptually simple, highly expressive, and tightly coupled modeling of the relationship between the syntax and semantics of a language or the syntax and semantics of two languages. As a result, it has frequently been put to use in a growing body of research into incorporating semantics into the TreeAdjoining Grammar (TAG) framework (Kallmeyer and Joshi 2003; Han 2006; Nesson and Shieber 2006, 2007). It is also under investigation as a possible base formalism for use in synchronous-grammar based machine translations systems (Nesson 2009). Similar pairing of elementary structures of the TAG formalism is too constrained to capture the inherent divergence in structure between different languages or even between the syntax and semantics of a language. Pairing of more expressive formalisms is too flexible to provide appropriate constraints and has unacceptable consequences for processing efficiency. Although TL-MCTAG was first introduced by Weir (1988</context>
<context position="45426" citStr="Kallmeyer and Joshi 2003" startWordPosition="7782" endWordPosition="7785">er for vector definition TL-MCTAG for which the polynomial degree of both the length of the input string and the grammar size is constant when the rank of the input grammar is bounded. The difference in complexity between the set and vector definitions of TL-MCTAG makes the vector definition an appealing possibility for research using TL-MCTAG for natural language applications. Although all uses of TL-MCTAG in the computational linguistics literature assume the set definition of TL-MCTAG, the linguistic analyses therein do not require the additional flexibility provided by the set definition (Kallmeyer and Joshi 2003; Nesson and Shieber 2006, 2007; Kallmeyer and Romero 2007; Nesson 2009). This is not a coincidence. Multicomponent tree sets are generally used to model syntactic and semantic constructs in which one tree in the set strictly dominates another and has a different syntactic or semantic type: for instance, a quantifier and its bound variable. The locations at which the trees in these sets adjoin are not interchangeable both because of the dominance constraint and because of the difference in type (and, correspondingly, root node label). As a result, these grammars may be converted to the Figure </context>
</contexts>
<marker>Kallmeyer, Joshi, 2003</marker>
<rawString>Kallmeyer, Laura and Aravind K. Joshi. 2003. Factoring predicate argument and scope semantics: Underspecified semantics with LTAG. Research on Language and Computation, 1:3–58.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Kallmeyer</author>
<author>Maribel Romero</author>
</authors>
<title>Reflexives and reciprocals in LTAG.</title>
<date>2007</date>
<booktitle>In Proceedings of the Seventh International Workshop on Computational Semantics ICWS-7,</booktitle>
<pages>271--282</pages>
<location>Tilburg.</location>
<contexts>
<context position="2928" citStr="Kallmeyer and Romero 2007" startWordPosition="399" endWordPosition="402">on for Computational Linguistics Computational Linguistics Volume 36, Number 3 method and runs in polynomial time when both the fan-out and rank of the input grammar are bounded. Second, we offer an optimal, efficient algorithm for factorizing a grammar to produce a strongly equivalent TL-MCTAG grammar with the rank of the grammar minimized. 1. Introduction Tree-Local Multi-Component Tree-Adjoining Grammar (TL-MCTAG) is an appealing formalism for natural language representation because it arguably allows the encapsulation of the appropriate domain of locality within its elementary structures (Kallmeyer and Romero 2007). Its flexible multicomponent structure allows modeling of lexical items that may ultimately have elements far apart in a sentence, such as quantifiers and wh-words. Its limited expressivity provides constraints on movement and, we posit, may have generated additional popularity based on a misconception about its parsing complexity. TL-MCTAG can model highly structurally divergent but closely related elementary structures, such as the syntax and the semantics of a single word or construction or the syntax of a single word or construction and its translation into another language, with a pair o</context>
<context position="45484" citStr="Kallmeyer and Romero 2007" startWordPosition="7791" endWordPosition="7794">l degree of both the length of the input string and the grammar size is constant when the rank of the input grammar is bounded. The difference in complexity between the set and vector definitions of TL-MCTAG makes the vector definition an appealing possibility for research using TL-MCTAG for natural language applications. Although all uses of TL-MCTAG in the computational linguistics literature assume the set definition of TL-MCTAG, the linguistic analyses therein do not require the additional flexibility provided by the set definition (Kallmeyer and Joshi 2003; Nesson and Shieber 2006, 2007; Kallmeyer and Romero 2007; Nesson 2009). This is not a coincidence. Multicomponent tree sets are generally used to model syntactic and semantic constructs in which one tree in the set strictly dominates another and has a different syntactic or semantic type: for instance, a quantifier and its bound variable. The locations at which the trees in these sets adjoin are not interchangeable both because of the dominance constraint and because of the difference in type (and, correspondingly, root node label). As a result, these grammars may be converted to the Figure 6 An example contrasting the set definition of MCTAG (show</context>
</contexts>
<marker>Kallmeyer, Romero, 2007</marker>
<rawString>Kallmeyer, Laura and Maribel Romero. 2007. Reflexives and reciprocals in LTAG. In Proceedings of the Seventh International Workshop on Computational Semantics ICWS-7, pages 271–282, Tilburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Kasami</author>
</authors>
<title>An efficient recognition and syntax algorithm for context-free languages.</title>
<date>1965</date>
<tech>Technical Report AF-CRL-65-758,</tech>
<institution>Air Force Cambridge Research Laboratory,</institution>
<location>Bedford, MA.</location>
<contexts>
<context position="50378" citStr="Kasami 1965" startWordPosition="8596" endWordPosition="8597"> elementary structures from the items of the parser as the GHR optimization. When applied, it reduces the time complexity in the grammar size but does not alter the basic form of the time complexity expression. There remains a single term consisting of the product of a polynomial in the input string length and a polynomial in the grammar size. We will return to this observation when examining the complexity of TL-MCTAG parsing. Shieber, Schabes, and Pereira (1995) and Vijay-Shanker (1987) apply the CockeKasami-Younger (CKY) algorithm, first introduced for use with CFGs in Chomsky normal form (Kasami 1965; Younger 1967), to the TAG parsing problem to generate parsers with a time complexity of O(n6|G|2). The speed-up in the parser comes from traversing elementary trees bottom-up, handling only one link at a time. As a result, no inference rule needs to maintain information about more than one link at a time. If the GHR optimization is applied, the time complexity is reduced to O(n6|G|). In order to clarify the presentation of our TL-MCTAG parser, we briefly review the algorithm of Shieber, Schabes, and Pereira (1995) with minor modifications, using the deductive inference rule notation from tha</context>
</contexts>
<marker>Kasami, 1965</marker>
<rawString>Kasami, T. 1965. An efficient recognition and syntax algorithm for context-free languages. Technical Report AF-CRL-65-758, Air Force Cambridge Research Laboratory, Bedford, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca Nesson</author>
</authors>
<title>Synchronous and Multicomponent Tree-Adjoining Grammars: Complexity, Algorithms and Linguistic Applications.</title>
<date>2009</date>
<tech>Ph.D. thesis,</tech>
<institution>Harvard University,</institution>
<location>Cambridge, MA.</location>
<contexts>
<context position="4116" citStr="Nesson 2009" startWordPosition="580" endWordPosition="581"> language, with a pair of elementary trees. This flexibility permits conceptually simple, highly expressive, and tightly coupled modeling of the relationship between the syntax and semantics of a language or the syntax and semantics of two languages. As a result, it has frequently been put to use in a growing body of research into incorporating semantics into the TreeAdjoining Grammar (TAG) framework (Kallmeyer and Joshi 2003; Han 2006; Nesson and Shieber 2006, 2007). It is also under investigation as a possible base formalism for use in synchronous-grammar based machine translations systems (Nesson 2009). Similar pairing of elementary structures of the TAG formalism is too constrained to capture the inherent divergence in structure between different languages or even between the syntax and semantics of a language. Pairing of more expressive formalisms is too flexible to provide appropriate constraints and has unacceptable consequences for processing efficiency. Although TL-MCTAG was first introduced by Weir (1988) and shown at that time to be equivalent in expressivity to TAG, the complexity of TL-MCTAG is still not well understood. Perhaps because of its equivalence to TAG, questions of proc</context>
<context position="45498" citStr="Nesson 2009" startWordPosition="7795" endWordPosition="7796"> of the input string and the grammar size is constant when the rank of the input grammar is bounded. The difference in complexity between the set and vector definitions of TL-MCTAG makes the vector definition an appealing possibility for research using TL-MCTAG for natural language applications. Although all uses of TL-MCTAG in the computational linguistics literature assume the set definition of TL-MCTAG, the linguistic analyses therein do not require the additional flexibility provided by the set definition (Kallmeyer and Joshi 2003; Nesson and Shieber 2006, 2007; Kallmeyer and Romero 2007; Nesson 2009). This is not a coincidence. Multicomponent tree sets are generally used to model syntactic and semantic constructs in which one tree in the set strictly dominates another and has a different syntactic or semantic type: for instance, a quantifier and its bound variable. The locations at which the trees in these sets adjoin are not interchangeable both because of the dominance constraint and because of the difference in type (and, correspondingly, root node label). As a result, these grammars may be converted to the Figure 6 An example contrasting the set definition of MCTAG (shown in Figure 2)</context>
</contexts>
<marker>Nesson, 2009</marker>
<rawString>Nesson, Rebecca. 2009. Synchronous and Multicomponent Tree-Adjoining Grammars: Complexity, Algorithms and Linguistic Applications. Ph.D. thesis, Harvard University, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca Nesson</author>
<author>Giorgio Satta</author>
<author>Stuart Shieber</author>
</authors>
<title>Optimal k-arization of synchronous tree-adjoining grammar.</title>
<date>2008</date>
<booktitle>In the Association for Computational Linguistics (ACL-2008),</booktitle>
<pages>604--612</pages>
<location>Columbus, OH.</location>
<marker>Nesson, Satta, Shieber, 2008</marker>
<rawString>Nesson, Rebecca, Giorgio Satta, and Stuart Shieber. 2008. Optimal k-arization of synchronous tree-adjoining grammar. In the Association for Computational Linguistics (ACL-2008), pages 604–612, Columbus, OH.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca Nesson</author>
<author>Stuart M Shieber</author>
</authors>
<title>Simpler TAG semantics through synchronization.</title>
<date>2006</date>
<booktitle>In Proceedings of the 11th Conference on Formal Grammar,</booktitle>
<pages>129--142</pages>
<contexts>
<context position="3968" citStr="Nesson and Shieber 2006" startWordPosition="557" endWordPosition="560">ructures, such as the syntax and the semantics of a single word or construction or the syntax of a single word or construction and its translation into another language, with a pair of elementary trees. This flexibility permits conceptually simple, highly expressive, and tightly coupled modeling of the relationship between the syntax and semantics of a language or the syntax and semantics of two languages. As a result, it has frequently been put to use in a growing body of research into incorporating semantics into the TreeAdjoining Grammar (TAG) framework (Kallmeyer and Joshi 2003; Han 2006; Nesson and Shieber 2006, 2007). It is also under investigation as a possible base formalism for use in synchronous-grammar based machine translations systems (Nesson 2009). Similar pairing of elementary structures of the TAG formalism is too constrained to capture the inherent divergence in structure between different languages or even between the syntax and semantics of a language. Pairing of more expressive formalisms is too flexible to provide appropriate constraints and has unacceptable consequences for processing efficiency. Although TL-MCTAG was first introduced by Weir (1988) and shown at that time to be equi</context>
<context position="45451" citStr="Nesson and Shieber 2006" startWordPosition="7786" endWordPosition="7789">L-MCTAG for which the polynomial degree of both the length of the input string and the grammar size is constant when the rank of the input grammar is bounded. The difference in complexity between the set and vector definitions of TL-MCTAG makes the vector definition an appealing possibility for research using TL-MCTAG for natural language applications. Although all uses of TL-MCTAG in the computational linguistics literature assume the set definition of TL-MCTAG, the linguistic analyses therein do not require the additional flexibility provided by the set definition (Kallmeyer and Joshi 2003; Nesson and Shieber 2006, 2007; Kallmeyer and Romero 2007; Nesson 2009). This is not a coincidence. Multicomponent tree sets are generally used to model syntactic and semantic constructs in which one tree in the set strictly dominates another and has a different syntactic or semantic type: for instance, a quantifier and its bound variable. The locations at which the trees in these sets adjoin are not interchangeable both because of the dominance constraint and because of the difference in type (and, correspondingly, root node label). As a result, these grammars may be converted to the Figure 6 An example contrasting </context>
</contexts>
<marker>Nesson, Shieber, 2006</marker>
<rawString>Nesson, Rebecca and Stuart M. Shieber. 2006. Simpler TAG semantics through synchronization. In Proceedings of the 11th Conference on Formal Grammar, pages 129–142, Malaga.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca Nesson</author>
<author>Stuart M Shieber</author>
</authors>
<title>Extraction phenomena in synchronous TAG syntax and semantics.</title>
<date>2007</date>
<booktitle>In Proceedings of Syntax and Structure in Statistical Translation (SSST),</booktitle>
<pages>9--16</pages>
<location>Rochester, NY.</location>
<marker>Nesson, Shieber, 2007</marker>
<rawString>Nesson, Rebecca and Stuart M. Shieber. 2007. Extraction phenomena in synchronous TAG syntax and semantics. In Proceedings of Syntax and Structure in Statistical Translation (SSST), pages 9–16, Rochester, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
</authors>
<title>Formal and computational aspects of natural language syntax.</title>
<date>1994</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania,</institution>
<location>Philadelphia, PA.</location>
<contexts>
<context position="48298" citStr="Rambow 1994" startWordPosition="8269" endWordPosition="8270">onsequent tree is known, the indices in the antecedent items are not entirely independent. An example is given in Figure 7. Observation shows that there will be a worst case of 2(r + 1) independent indices in a given rule. Because each adjoining tree is independent, there may be r + 1 different trees represented in a single rule. This results in a time complexity of O(n2(r+1)|G|r+1) where n is the length of the input string, |G |is a representation of the grammar size, and r is the rank of the input grammar. 8 Various sorts of multicomponent TAGs have been proposed for analysis of scrambling (Rambow 1994; Kallmeyer 2005). Scrambling entails several different trees of the same type adjoining in different orders, and therefore seems like a candidate for making use of the flexibility provided by the set definition. However, in these analyses the elementary tree structures are composed of one VP-rooted auxiliary tree and one VP-rooted initial tree. Because auxiliary trees and initial trees cannot adjoin at the same link location for structural reasons, these analyses do not ultimately make use of the flexibility in the selection of an adjunction site that the set definition provides. The differen</context>
</contexts>
<marker>Rambow, 1994</marker>
<rawString>Rambow, Owen. 1994. Formal and computational aspects of natural language syntax. Ph.D. thesis, University of Pennsylvania, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Giorgio Satta</author>
<author>Enoch Peserico</author>
</authors>
<title>Some computational complexity results for synchronous context-free grammars.</title>
<date>2005</date>
<booktitle>In Proceedings of Human Language Technology Conference and Conference on Empirical Methods in Natural Language Processing (HLT05/EMNLP05),</booktitle>
<pages>803--810</pages>
<location>Vancouver.</location>
<contexts>
<context position="21759" citStr="Satta and Peserico (2005)" startWordPosition="3433" endWordPosition="3436">le and one corresponding to an assignment of false. The links in the single initial tree permit only one of these two sets to be used. The tree set for a particular truth assignment for a particular variable vi makes it possible to introduce, by means of another adjunction, terminal symbols taken from the set {1,.. . , n} that correspond to each clause in C that would be satisfied by the given assignment to vi. In this way, the string w = 1 · · · n can be generated if and only if all clauses are satisfied by the truth assignment to some variable they contain. 1 We follow the proof strategy of Satta and Peserico (2005) in this and the proof of Theorem 3. 449 Computational Linguistics Volume 36, Number 3 We define a tree-local MCTAG G containing the following tree sets. The initial tree set S contains the single tree: In this tree, the “rows” correspond to the variables and the “columns” to the clauses. Each non-terminal node within a row is labeled with the same link to ensure that a tree set representing a single variable’s effect on each clause will adjoin at each link. For every variable vi, 1 &lt; i &lt; p, tree set Ti, used when representing an assignment of the value true to vi, contains n trees, one for ea</context>
</contexts>
<marker>Satta, Peserico, 2005</marker>
<rawString>Satta, Giorgio and Enoch Peserico. 2005. Some computational complexity results for synchronous context-free grammars. In Proceedings of Human Language Technology Conference and Conference on Empirical Methods in Natural Language Processing (HLT05/EMNLP05), pages 803–810, Vancouver.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Richard C Waters</author>
</authors>
<title>Tree insertion grammar: A cubic-time parsable formalism that lexicalizes context-free grammar without changing the trees produced.</title>
<date>1995</date>
<journal>Computational Linguistics,</journal>
<volume>21</volume>
<issue>4</issue>
<contexts>
<context position="19876" citStr="Schabes and Waters 1995" startWordPosition="3089" endWordPosition="3092">ess result still holds. The rank, r, of a grammar is the maximum number of derivational children possible for any tree in the grammar, or in other words, the maximum number of links in any tree in the grammar. We show that when rank is bounded, the NP-hardness result also holds. A notable aspect of all of the proofs given here is that they do not make use of the additional expressive power provided by the adjunction operation of TAG. Put simply, the trees in the tree sets used in our constructions meet the constraints of Tree Insertion Grammar (TIG), a known context-free–equivalent formalism (Schabes and Waters 1995). As a result, we can conclude that the increase in complexity stems from the multi-component nature of the formalism rather than from the power added by an unconstrained adjunction operation. 3.1 Universal Recognition of TL-MCTAG is NP-Complete In this section we prove that universal recognition of TL-MCTAG is NP-complete when neither the rank nor the fan-out of the grammar is bounded. Recall the 3SAT decision problem, which is known to be NP-complete. Let V = {v1, ... , vp} be a set of variables and C = {c1, ... , cn} be a set of clauses. Each clause in C is a disjunction of three literals o</context>
</contexts>
<marker>Schabes, Waters, 1995</marker>
<rawString>Schabes, Yves and Richard C. Waters. 1995. Tree insertion grammar: A cubic-time parsable formalism that lexicalizes context-free grammar without changing the trees produced. Computational Linguistics, 21(4):479–513.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Seki</author>
<author>T Matsumura</author>
<author>M Fujii</author>
<author>T Kasami</author>
</authors>
<title>On multiple context-free grammars.</title>
<date>1991</date>
<journal>Theoretical Computer Science,</journal>
<pages>88--191</pages>
<contexts>
<context position="46692" citStr="Seki et al. 1991" startWordPosition="7980" endWordPosition="7983">TAG (shown in Figure 2) with the vector definition. 459 Computational Linguistics Volume 36, Number 3 Figure 7 The deductive rule generated for tree α using the naive TAG parsing method. vector definition without any change in the elementary trees, the generated language, or grammar size but with crucial gains in the worst case bounds on processing efficiency.8 5. Parsing Although no algorithms for parsing TL-MCTAG have previously been published, the standard method for parsing LCFRS-equivalent formalisms can be applied directly to TL-MCTAG to produce an algorithm with complexity O(|G|p|w|q) (Seki et al. 1991). We offer a novel parser for TL-MCTAG for which q is constant. With our algorithm, for the set definition of TL-MCTAG p depends on both the rank and fan-out of the input grammar. For the vector definition of TL-MCTAG p depends on the rank of the input grammar but contains no index of the fan-out. We begin with a brief introduction to TAG parsing before discussing our novel TLMCTAG parsing algorithm. 5.1 CKY-Style TAG Parsing Following the method of Seki et al. (1991), a naive parser for TAG may be constructed by generating a single inference rule for each tree in the grammar. For a tree conta</context>
</contexts>
<marker>Seki, Matsumura, Fujii, Kasami, 1991</marker>
<rawString>Seki, H., T. Matsumura, M. Fujii, and T. Kasami. 1991. On multiple context-free grammars. Theoretical Computer Science, 88:191–229.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
<author>Yves Schabes</author>
</authors>
<title>An alternative conception of tree-adjoining derivation.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<issue>1</issue>
<contexts>
<context position="15065" citStr="Shieber and Schabes 1994" startWordPosition="2285" endWordPosition="2288">igatory adjunction constraint indicates that at least one link at a given node must be used (Joshi, Levy, and Takahashi, 1975; Vijay-Shanker and Joshi 1985). We notate obligatory adjunction constraints by underlining the label of the node to which the constraint applies. Because we use explicit links, the edges in the derivation tree are labeled with the number of the link used rather than the traditional label of the address at which the operation takes place. Multiple adjunction refers to permitting an unbounded number of adjunctions to occur at a single adjunction site (Vijay-Shanker 1987; Shieber and Schabes 1994). In the standard definition of TAG, multiple adjunction is disallowed to ensure that each derivation tree unambiguously specifies a single derived tree (Vijay-Shanker 1987). Because each available adjunction is explicitly notated with a numbered link, our notation implicitly disallows multiple adjunction but permits a third possibility: bounded multiple adjunction. Bounded multiple adjunction permits the formalism to obtain some of the potential linguistic advantages of allowing multiple adjunction while preventing unbounded multiple adjunction. The usual constraint of allowing only one adjun</context>
</contexts>
<marker>Shieber, Schabes, 1994</marker>
<rawString>Shieber, Stuart M. and Yves Schabes. 1994. An alternative conception of tree-adjoining derivation. Computational Linguistics, 20(1):91–124.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
<author>Yves Schabes</author>
<author>Fernando C N Pereira</author>
</authors>
<title>Principles and implementation of deductive parsing.</title>
<date>1995</date>
<journal>Journal of Logic Programming,</journal>
<pages>24--1</pages>
<marker>Shieber, Schabes, Pereira, 1995</marker>
<rawString>Shieber, Stuart M., Yves Schabes, and Fernando C. N. Pereira. 1995. Principles and implementation of deductive parsing. Journal of Logic Programming, 24(1–2):3–36.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Sippu</author>
<author>E Soisalon-Soininen</author>
</authors>
<title>Parsing Theory: Languages and Parsing.</title>
<date>1988</date>
<publisher>Springer-Verlag,</publisher>
<location>Berlin.</location>
<contexts>
<context position="24511" citStr="Sippu and Soisalon-Soininen 1988" startWordPosition="3937" endWordPosition="3940">ll trees in the grammar have constant size except for the initial tree, which has size np. ■ Theorem 2 The universal recognition problem for TL-MCTAG with unbounded rank and fan-out is in NP. Proof We show that given an arbitrary TL-MCTAG grammar G and any input string w, the determination of w E L(G) can be performed in non-deterministic polynomial time. Note that the collection of elementary tree sets of G that can generate the empty string, E, can be generated in time polynomial in |G |using the standard graph reachability algorithm used for context-free grammars in time polynomial in |G |(Sippu and Soisalon-Soininen 1988). We begin by showing that given an arbitrary input string w and derivation tree D for w E L(G), there must exist a truncated derivation tree for w that has size no larger than |G |· |w|. We define a truncated derivation tree as a derivation tree in which the children of elementary tree sets in E are optionally removed. Consider D. Each node in D represents an elementary structure of G: a tuple of one or more TAG trees. We call a node n of D a non-splitting node if a single one of its children in the derivation tree, ni, generates the same lexical material from the input string as n itself.3 W</context>
</contexts>
<marker>Sippu, Soisalon-Soininen, 1988</marker>
<rawString>Sippu, S. and E. Soisalon-Soininen. 1988. Parsing Theory: Languages and Parsing. Springer-Verlag, Berlin.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anders Søgaard</author>
<author>Timm Lichte</author>
<author>Wolfgang Maier</author>
</authors>
<title>On the complexity of linguistically motivated extensions of tree-adjoining grammar.</title>
<date>2007</date>
<booktitle>In Recent Advances in Natural Language Processing</booktitle>
<location>Borovets.</location>
<marker>Søgaard, Lichte, Maier, 2007</marker>
<rawString>Søgaard, Anders, Timm Lichte, and Wolfgang Maier. 2007. On the complexity of linguistically motivated extensions of tree-adjoining grammar. In Recent Advances in Natural Language Processing 2007, Borovets.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C A Tovey</author>
</authors>
<title>A simplified NP-complete satisfiability problem.</title>
<date>1984</date>
<journal>Discrete Applied Mathematics,</journal>
<volume>8</volume>
<issue>1</issue>
<contexts>
<context position="39734" citStr="Tovey (1984)" startWordPosition="6790" endWordPosition="6791">s NP-Complete We now show the unusual complexity result that universal recognition of TL-MCTAG is NP-complete even when the input string is fixed. Although it is uncommon to require this result, we rely on it in Section 5 to demonstrate that our parser has better time complexity than the baseline parsing method for TL-MCTAG that we generalize from the standard parsing method for LCFRS-equivalent formalisms. We reduce from a variant of the 3SAT problem introduced above in which each variable occurs in at most four clauses with no repeats in a clause. This problem was shown to be NP-complete by Tovey (1984). Theorem 5 Universal recognition of TL-MCTAG is NP-complete when the input string is fixed. Proof Let (V, C) be an arbitrary instance of the 3SAT problem where each variable occurs in no more than four clauses and does not repeat within a single clause. As in the proof of Theorem 1, we use the derivations of the grammar to guess the truth assignments for V and use the tree sets to keep track of the dependencies among different clauses in C. Two tree sets are constructed for each variable, one corresponding to a true assignment and one corresponding to a false assignment. The prohibition on mu</context>
</contexts>
<marker>Tovey, 1984</marker>
<rawString>Tovey, C. A. 1984. A simplified NP-complete satisfiability problem. Discrete Applied Mathematics, 8(1):85–90.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
</authors>
<title>A study of tree-adjoining grammars.</title>
<date>1987</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania,</institution>
<location>Philadelphia, PA.</location>
<contexts>
<context position="15038" citStr="Vijay-Shanker 1987" startWordPosition="2283" endWordPosition="2284">at that site. An obligatory adjunction constraint indicates that at least one link at a given node must be used (Joshi, Levy, and Takahashi, 1975; Vijay-Shanker and Joshi 1985). We notate obligatory adjunction constraints by underlining the label of the node to which the constraint applies. Because we use explicit links, the edges in the derivation tree are labeled with the number of the link used rather than the traditional label of the address at which the operation takes place. Multiple adjunction refers to permitting an unbounded number of adjunctions to occur at a single adjunction site (Vijay-Shanker 1987; Shieber and Schabes 1994). In the standard definition of TAG, multiple adjunction is disallowed to ensure that each derivation tree unambiguously specifies a single derived tree (Vijay-Shanker 1987). Because each available adjunction is explicitly notated with a numbered link, our notation implicitly disallows multiple adjunction but permits a third possibility: bounded multiple adjunction. Bounded multiple adjunction permits the formalism to obtain some of the potential linguistic advantages of allowing multiple adjunction while preventing unbounded multiple adjunction. The usual constraint</context>
<context position="50260" citStr="Vijay-Shanker (1987)" startWordPosition="8578" endWordPosition="8579"> the parser to O(n2(r+1)|G|). We refer to this method of reducing complexity by removing unnecessary information about specific elementary structures from the items of the parser as the GHR optimization. When applied, it reduces the time complexity in the grammar size but does not alter the basic form of the time complexity expression. There remains a single term consisting of the product of a polynomial in the input string length and a polynomial in the grammar size. We will return to this observation when examining the complexity of TL-MCTAG parsing. Shieber, Schabes, and Pereira (1995) and Vijay-Shanker (1987) apply the CockeKasami-Younger (CKY) algorithm, first introduced for use with CFGs in Chomsky normal form (Kasami 1965; Younger 1967), to the TAG parsing problem to generate parsers with a time complexity of O(n6|G|2). The speed-up in the parser comes from traversing elementary trees bottom-up, handling only one link at a time. As a result, no inference rule needs to maintain information about more than one link at a time. If the GHR optimization is applied, the time complexity is reduced to O(n6|G|). In order to clarify the presentation of our TL-MCTAG parser, we briefly review the algorithm </context>
</contexts>
<marker>Vijay-Shanker, 1987</marker>
<rawString>Vijay-Shanker, K. 1987. A study of tree-adjoining grammars. Ph.D. thesis, Department of Computer and Information Science, University of Pennsylvania, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>Aravind K Joshi</author>
</authors>
<title>Some computational properties of tree-adjoining grammars.</title>
<date>1985</date>
<booktitle>In Proceedings of the 23rd Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>82--93</pages>
<location>Chicago, IL.</location>
<contexts>
<context position="14596" citStr="Vijay-Shanker and Joshi 1985" startWordPosition="2211" endWordPosition="2214">e derivation and derived trees are distinct. We depart from the traditional definition in notation only by specifying adjunction sites explicitly with numbered links in order to simplify the presentation of the issues raised by multi-component adjunctions. Each link may be used only once in a derivation. Adjunctions may only occur at nodes marked with a link. A numbered link at a single site in a tree specifies that a single adjunction is available at that site. An obligatory adjunction constraint indicates that at least one link at a given node must be used (Joshi, Levy, and Takahashi, 1975; Vijay-Shanker and Joshi 1985). We notate obligatory adjunction constraints by underlining the label of the node to which the constraint applies. Because we use explicit links, the edges in the derivation tree are labeled with the number of the link used rather than the traditional label of the address at which the operation takes place. Multiple adjunction refers to permitting an unbounded number of adjunctions to occur at a single adjunction site (Vijay-Shanker 1987; Shieber and Schabes 1994). In the standard definition of TAG, multiple adjunction is disallowed to ensure that each derivation tree unambiguously specifies </context>
</contexts>
<marker>Vijay-Shanker, Joshi, 1985</marker>
<rawString>Vijay-Shanker, K. and Aravind K. Joshi. 1985. Some computational properties of tree-adjoining grammars. In Proceedings of the 23rd Annual Meeting of the Association for Computational Linguistics, pages 82–93, Chicago, IL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Weir</author>
</authors>
<title>Characterizing mildly context-sensitive grammar formalisms.</title>
<date>1988</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania,</institution>
<location>Philadelphia, PA.</location>
<contexts>
<context position="4534" citStr="Weir (1988)" startWordPosition="640" endWordPosition="641">Joshi 2003; Han 2006; Nesson and Shieber 2006, 2007). It is also under investigation as a possible base formalism for use in synchronous-grammar based machine translations systems (Nesson 2009). Similar pairing of elementary structures of the TAG formalism is too constrained to capture the inherent divergence in structure between different languages or even between the syntax and semantics of a language. Pairing of more expressive formalisms is too flexible to provide appropriate constraints and has unacceptable consequences for processing efficiency. Although TL-MCTAG was first introduced by Weir (1988) and shown at that time to be equivalent in expressivity to TAG, the complexity of TL-MCTAG is still not well understood. Perhaps because of its equivalence to TAG, questions of processing efficiency have not been adequately addressed. This article offers a thorough examination of the problem of TL-MCTAG recognition, showing that even highly restricted forms of TL-MCTAG are NP-complete to recognize. However, in spite of the provable difficulty of the recognition problem, we offer several algorithms that can substantially improve processing efficiency. First, we present a parsing algorithm that</context>
<context position="6127" citStr="Weir (1988)" startWordPosition="890" endWordPosition="891">mmar with the rank of the grammar minimized. 1.1 Summary of Results TAG is a mildly context-sensitive grammar formalism widely used in natural language processing. Multicomponent TAG (MCTAG) refers to a group of formalisms that 444 Nesson, Satta, and Shieber Complexity, Parsing, and Factorization of TL-MCTAG generalize TAG by allowing elementary structures to be sets of TAG trees. One member of the MCTAG formalism group is Tree-Local MCTAG (TL-MCTAG), in which all trees from a single elementary tree set are constrained to adjoin or substitute into a single tree in another elementary tree set. Weir (1988) shows that this constraint is sufficient to guarantee that TL-MCTAG has weak generative capacity equivalent to the polynomially parsable TAG. Recent work on the complexity of several TAG variants has demonstrated indirectly that the universal recognition problem for TL-MCTAG is NP-hard. This result calls into question the practicality of systems that employ TL-MCTAG as the formalism for expressing a natural language grammar. In this article we present a more fine-grained analysis of the processing complexity of TL-MCTAG. We demonstrate (Section 3) that even under restricted definitions where </context>
<context position="17274" citStr="Weir 1988" startWordPosition="2648" endWordPosition="2649">ees when combined under the standard definition of multicomponent TAG. link may give rise to many distinct derived trees even when the link is always used by the same multicomponent tree set. An example is given in Figure 2. This standard definition of multicomponent adjunction we will call the set definition for contrast with a variation we introduce in Section 4. A derivation tree for a multicomponent TAG is the same as for TAG except that the nodes are labeled with the names of elementary tree sets. An MCTAG is tree-local if tree sets are required to adjoin within a single elementary tree (Weir 1988). Using the numbered link notation introduced earlier for adjunction sites, a tree-local MCTAG (TL-MCTAG) is one in which the scope of the link numbers is a single elementary tree. An example TL-MCTAG operation is given in Figure 3. In contrast, an MCTAG is set-local if the trees from a single tree set are required to adjoin within a single elementary tree set and an MCTAG is non-local if the trees from a single tree set may adjoin to trees that are not within a single tree set. In a set-local MCTAG the scope of a link is a single elementary tree set, and in a non-local MCTAG the scope of a li</context>
<context position="28005" citStr="Weir 1988" startWordPosition="4551" endWordPosition="4552"> for determining membership of w E L(G) because we know that each truncated node is a member of E. To show that TL-MCTAG membership is in NP, we construct a Turing machine that will non-deterministically guess a truncated derivation tree of size no larger than |G |· |w|. It then checks that the guessed derivation successfully derives w. Because the correctness of the derivation can be checked in linear time, this is sufficient to show that TL-MCTAG membership is in NP. ■ We know from the equivalence of LCFRS and SL-MCTAG (and the rule-to-treetuple conversion method used to prove equivalency) (Weir 1988) and the fact that LCFRS membership is PSPACE-complete that SL-MCTAG membership is also PSPACEcomplete (Kaji et al. 1992, 1994). Until the results shown in Theorems 1 and 2 it was not known whether TL-MCTAG was in NP. Although the difference in generative capacity between TL-MCTAG and SL-MCTAG is well known, this proven difference in complexity (assuming NP =� PSPACE) is novel. To understand the reason underlying the difference, we note that the bound on the length of non-splitting chains does not hold for set-local MCTAG. In set-local MCTAG a tree tuple may be non-splitting while also perform</context>
<context position="40844" citStr="Weir 1988" startWordPosition="6976" endWordPosition="6977">orresponding to a true assignment and one corresponding to a false assignment. The prohibition on multiple adjunction ensures that only one of these two tree sets can be used for each variable. The tree set of a particular truth assignment for a particular variable vi makes it possible to satisfy the obligatory adjunction constraints for the nonterminal symbols representing each of the clauses that vi satisfies in the 3SAT formula.7 Additional adjunction sites for each clause 7 Obligatory adjunction constraints are standard in the definition of TAG and MCTAG (Joshi, Levy, and Takahashi, 1975; Weir 1988). However, obligatory adjunction may be avoided in this proof by creating a 457 Computational Linguistics Volume 36, Number 3 provide overflow space in the event that more than one variable satisfies a particular clause. We fix the input string w to be the empty string. None of the trees of the grammar contain any terminal symbols. However, a successful parse of the empty string can only be achieved if all of the obligatory adjunction constraints are satisfied and this occurs if and only if all clauses of the formula are satisfied by the truth assignment to some variable. We define a tree-loca</context>
</contexts>
<marker>Weir, 1988</marker>
<rawString>Weir, David. 1988. Characterizing mildly context-sensitive grammar formalisms. Ph.D. thesis, Department of Computer and Information Science, University of Pennsylvania, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D H Younger</author>
</authors>
<title>Recognition and parsing of context-free languages in time n3.</title>
<date>1967</date>
<journal>Information and Control,</journal>
<volume>10</volume>
<issue>2</issue>
<contexts>
<context position="50393" citStr="Younger 1967" startWordPosition="8598" endWordPosition="8599">tructures from the items of the parser as the GHR optimization. When applied, it reduces the time complexity in the grammar size but does not alter the basic form of the time complexity expression. There remains a single term consisting of the product of a polynomial in the input string length and a polynomial in the grammar size. We will return to this observation when examining the complexity of TL-MCTAG parsing. Shieber, Schabes, and Pereira (1995) and Vijay-Shanker (1987) apply the CockeKasami-Younger (CKY) algorithm, first introduced for use with CFGs in Chomsky normal form (Kasami 1965; Younger 1967), to the TAG parsing problem to generate parsers with a time complexity of O(n6|G|2). The speed-up in the parser comes from traversing elementary trees bottom-up, handling only one link at a time. As a result, no inference rule needs to maintain information about more than one link at a time. If the GHR optimization is applied, the time complexity is reduced to O(n6|G|). In order to clarify the presentation of our TL-MCTAG parser, we briefly review the algorithm of Shieber, Schabes, and Pereira (1995) with minor modifications, using the deductive inference rule notation from that paper. As sho</context>
</contexts>
<marker>Younger, 1967</marker>
<rawString>Younger, D. H. 1967. Recognition and parsing of context-free languages in time n3. Information and Control, 10(2):189–208.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hao Zhang</author>
<author>Daniel Gildea</author>
</authors>
<title>Factorization of synchronous context-free grammars in linear time.</title>
<date>2007</date>
<booktitle>In NAACL Workshop on Syntax and Structure in Statistical Translation (SSST),</booktitle>
<pages>25--32</pages>
<location>Rochester, NY.</location>
<contexts>
<context position="11567" citStr="Zhang and Gildea 2007" startWordPosition="1731" endWordPosition="1734"> of work on induction of TAGs from a treebank exemplified by Chen and Shanker (2004). The factorization performed in their work is done on the basis of syntactic constraints rather than with the goal of reducing complexity. Working from a treebank of actual natural language sentences, their work does not have the benefit of explicitly labeled adjunction sites but rather must attempt to reconstruct a derivation from complete derived trees. The factorization problem we address is more closely related to work on factorizing synchronous context-free grammars (CFGs) (Gildea, Satta, and Zhang 2006; Zhang and Gildea 2007) and on factorizing synchronous TAGs (Nesson, Satta, and Shieber 2008). Synchronous grammars are a special case of multicomponent grammars, so the problems are quite similar to the TL-MCTAG factorization problem. However, synchronous grammars are fundamentally set-local rather than tree-local formalisms, which in some cases simplifies their analysis. In the case of CFGs, the problem reduces to one of identifying problematic permutations of non-terminals (Zhang and Gildea 2007) and can be done efficiently by using a sorting algorithm to binarize any non-problematic permutations until only the i</context>
</contexts>
<marker>Zhang, Gildea, 2007</marker>
<rawString>Zhang, Hao and Daniel Gildea. 2007. Factorization of synchronous context-free grammars in linear time. In NAACL Workshop on Syntax and Structure in Statistical Translation (SSST), pages 25–32, Rochester, NY.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>