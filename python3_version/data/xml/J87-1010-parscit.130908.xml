<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000328">
<author confidence="0.244129">
Book Reviews CSLI Lecture Notes: Sells and Shieber
</author>
<bodyText confidence="0.999092588235294">
Gazdar et al. 1985], and Bresnan and Kaplan&apos;s Lexical-
Functional Grammars LFG.
CSLI-4 makes a perfect couple with CSLI-3, continu-
ing to present syntactic approaches and unification-based
implementation, suitable for all the grammatical formal-
isms discussed in the books.
The landscape in the valley of syntax is governed by
GB, as the highest achievement towards universality. GB
realizes a rich set of universal principles, the grammars of
the particular languages being obtained as parametriza-
tions of a Universal Grammar. All the other syntactic
approaches (including GPSG, LFG, logic-based gram-
mars) could be labeled as stages in the evolution of
Chomsky&apos;s ideas from observational to descriptive and to
explanatory adequacy. In their trend to universality,
explicitness, and rigor, they inevitably decreased in spec-
ification of empirical detail. The linguistic pole for all the
contemporary syntactic theories or tools is the effort to
attain the lexical meaning, as a min-max (or equilibrium)
principle- minimality, coming from semantics, and maxi-
mality, coming from syntax. Another basic idea is that
clause structure is largely predictable from the semantics
of predicates: these theories agree in deriving canonical
structures from lexical semantics and it is (somehow)
surprising &amp;quot;how little needs to be stipulated beyond lexi-
cal meaning&amp;quot; (T. Wasow).
CSLI-4 reveals the strong developments in unifica-
tion-based implementations, stemming from different
research directions but converging to grammars in which
declarative and procedural interpretations can coexist.
The grammatical version of unification, viewed as a
(directed acyclic) graph-combinieg process, suggests
many other linguistically and logically relevant oper-
ations: generalization (as the dual of unification),
disjunction, negation, overwriting. Along with GPSG and
LFG, Martin Kay&apos;s Functional Unification Grammar,
logic-based grammars (Definite Clause Grammar, Extra-
position Grammar, Gapping Grammar, etc. [Dahl and
Saint-Dizier 1985]), Shieber&apos;s PATR-II grammars repre-
sent a &amp;quot;least common denominator&amp;quot; of the various unifi-
cation-based formalisms but are still powerful. Appendix
A in CSLI-4 contains the machine-interpretable form as
an instructive example, handling increasingly complex
constructs. As a corollary of all the formalisms and
implementations, even those not (strictly) based on unifi-
cation, like Wehrli (1984), is the emphasis on lexical
properties in syntax and semantics.
This pair of books represents an important and useful
effort on the part of the authors to bring these linguistic
theories and tools, as well as the implementation trends,
to the computational linguistics community
</bodyText>
<footnote confidence="0.36809">
Neculai Curteanu
&amp;quot;Al. I. Cuza&amp;quot; University
Department of Mathematics and Computer Center
6600 Iasi, Romania
</footnote>
<sectionHeader confidence="0.890067" genericHeader="references">
REFERENCES
</sectionHeader>
<bodyText confidence="0.418198888888889">
Dahl, Veronica and Saint-Dizier, Patrick, Eds. 1985 Natural Language
Understanding and Logic Programming. North-Holland, Amsterdam,
New York, Oxford.
Gazdar, Gerald; Klein, Ewan; Pullum, Geoffrey; and Sag, Ivan 1985
Generalized Phrase Structure Grammar. Harvard University Press,
Cambridge, Massachusetts.
Wehrli, Eric 1984 A Government-Binding Parser for French. Work-
ing Papers No. 48, Institut pour les Etudes Semantiques et Cogni-
tives, Universite de Geneve.
</bodyText>
<sectionHeader confidence="0.877342" genericHeader="method">
MULTILINGUAL ASPECTS OF INFORMATION TECHNOLOGY
</sectionHeader>
<bodyText confidence="0.971457059701493">
Paul A. Bennett, Rod L. Johnson, John McNaught, Jean-
ette Pugh, J.C. Sager, and Harold L. Somers
Aldershot: Gower, 1986, ix+146 pp
ISBN 0-566-03513-8; Â£17.50
This is a book for a first acquaintance with computational
linguistics. It gives an overview of some of the main fields
of interest, namely machine translation, natural language
interfaces, and the lexicon.
The book is directed towards user-oriented applica-
tions, especially systems on the market and under devel-
opment. Some basic theoretical linguistic questions
encountered in such development work are mentioned
rather than discussed, and the book does not tell its read-
ers too much about more fundamental research.
In accordance with this practical scope, the topic of
the lexicon is presented in two distinct chapters, one on
general lexicology and lexicography and the other one on
terminology and terminography, and no link is estab-
lished on a level of word linguistics.
The machine translation chapter introduces the basic
terms, for instance in the field of system design (interlin-
gual, transfer, direct; or machine-aided human vs.
human-aided machine translation). This chapter is also
the most explicit one with respect to implementation
principles. The authors mention, among others, the
advantages of modularity in structured programming.
Another type of structured modularity is undoubtedly as
important as this: the conceptual distinction between
grammar and programming, with a formalism level as the
interface. There are too many publications on the market
which do not distinguish for example syntax, parsing
formalism, and parser in a clean way. The authors of this
book seem to make distinctions of this kind, and they
also advocate a sound degree of modularity between the
various parts of grammar (syntax, semantics, ...). In an
introductory book, however, the principles of these
distinctions should, to my taste, be made explicit. There
are so many bad examples.
As a first superficial introduction to computational
linguistics the book is certainly good, but the word
&amp;quot;multilingual&amp;quot; in the title appears to be a bit misleading.
Machine translation is of course multilingual, but what
the authors report about terminography and natural
language interfaces is only in some accidental cases more
Computational Linguistics, Volume 13, Numbers 1-2, January-June 1987 71
Book Reviews Multilingual Aspects of Information Technology
than monolingual, and these cases can be seen as monol-
ingual language processing augmented with elements of
machine translation. Even the lexicography chapter is
for a good deal concerned with monolingual aspects, but
what the authors do say about multilingual lexicons is to
the point. Their argument that the meta-text of a monol-
ingual dictionary is in another language, and that thus
every explanatory dictionary is multilingual, only contrib-
utes to a confusion of ideas. The meta-text is a special
style, but this text type is of course part of the same
language.
A more regrettable shortcoming is the fact that the
book is not multilingual in scope. The authors openly
admit that they have made efforts not to refer to litera-
ture which is not in English. An introductory book
should not narrow its readers&apos; horizon in this way. There
are already too many (computational) linguists, for whom
&amp;quot;natural language&amp;quot; is a synonym for &amp;quot;English&amp;quot;. It seems
preferable to emphasize that linguistics is not only the
science of language but also of languages. Computa-
tional linguistics is developing in that direction as well.
</bodyText>
<figure confidence="0.652084111111111">
Klaus Schubert
BSO/Research
Postbus 8348
NL-3503 RH Utrecht
The Netherlands
ELECTRONIC SYNTHESIS OF SPEECH
R. Linggard
Cambridge University Press, 1985, ix+149 pp.
ISBN 0-521-24469-2; $29.95
</figure>
<bodyText confidence="0.999854770270271">
Speech synthesis has become, in the last ten years or so,
a field of substantial commercial as well as intellectual
interest. The Compleat Computational Linguist must
ultimately include speech synthesis (and recognition) in
his purview, just as theoretical linguistics must ultimately
explain the regularities in speech. The field has been
difficult to cover because important facets of it come
from such widely divergent disciplines as electrical engi-
neering and phonetics, and because there have been no
general and easy introductory text or reference books.
Electronic Synthesis of Speech goes a long way toward
easing this last difficulty.
Linggard intends this book to be &amp;quot;a comprehensive
text and reference source for scientists and technologists
working in the field&amp;quot; and also suggests that it should be
useful as a &amp;quot;textbook for courses on speech processing&amp;quot;
(p. vii). The first two chapters cover history and phonet-
ics, and the other four chapters treat mathematical and
computational aspects of synthesis.
I don&apos;t think this book would do as a sole reference or
course text book, although it would be very useful if
augmented with other sources. Because it attempts a
broad coverage of speech synthesis in a small volume, it
doesn&apos;t cover any single subject in depth. It would be
difficult to teach from this book because of its lack of
exercises and problems for the student. But overall, it&apos;s a
good book. The references are numerous and useful,
and it is especially satisfying to see synthesis set in its
historical context.
Linggard&apos;s coverage of the engineering aspects of
speech synthesis is excellent, although for a thorough
understanding you should consult the original technical
papers, which he references quite well. (A good
collection of these is in Flanagan and Rabiner (1973).)
Spot checking several of his numerous equations and
their derivations turned up no apparent errors. It is
refreshing to see the basic equations for speech
production derived from a true mechanical model rather
than from an electrical analog.
I would guess from this book that Linggard&apos;s home
discipline is engineering, because his coverage of phonet-
ics (Chapter 2), in contrast, is errorful and misleading.
Don&apos;t get your phonetics from this book; buy another, on
phonetics alone. (Ladefoged (1975) would be a good
selection, and Ruhlen (1976) has an excellent introducto-
ry chapter on phonetics.) Linggard can also be faulted
on his short discussion of the pre-historic evolution of
speech (pp. 2-3), which is speculative, superfluous, and
probably wrong.
It is often unclear if Linggard&apos;s comments on phonet-
ics are meant to apply just to English or to speech in
general. In addition, I think many of his details are
mistaken or misleading. Here is a sampler:
On page 23 is Fig. 2.4, Linggard&apos;s main presentation
of speech sounds. It is a table of IPA (International
Phonetic Association) symbols for sounds, illustrated
with example words. This table is quite misleading and
insufficient, especially for speakers of non-upper-class
British dialects. The legend to the figure reads &amp;quot;Some
suggested IPA symbols for the phonetic transcription of
English&amp;quot;; one must read the text carefully to discover
that they are really only symbols for RP (Received
Pronunciation) English, a minority upper-class British
variety of speech. He gives the word further as an exam-
ple of the sound /a/ (called &amp;quot;schwa&amp;quot;), and his symbols
for the diphthongs in peer, pair, boar, and boor use /a/
for the second part, or off-glide, of the vowel; the
student might think that /a/ sounds like r, but it doesn&apos;t.
RP has dropped some /r/s and changed others to h/.
The peculiarities of RP should have been discussed and
the table should have covered more general English.
There are also some discrepancies between vowel
symbols in his table and the table for RP presented in
Hughes and Trudgill (H&amp;T; 1979: 26):
</bodyText>
<sectionHeader confidence="0.630079" genericHeader="method">
Linggard H&amp;T
</sectionHeader>
<reference confidence="0.462448">
bat a
bet
load ay ou
</reference>
<page confidence="0.949997">
72 Computational Linguistics, Volume 13, Numbers 1-2, January-June 1987
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.002610">
<title confidence="0.4417445">Book Reviews CSLI Lecture Notes: Sells and Shieber Gazdar et al. 1985], and Bresnan and Kaplan&apos;s Lexical-</title>
<abstract confidence="0.96985888">Functional Grammars LFG. CSLI-4 makes a perfect couple with CSLI-3, continuing to present syntactic approaches and unification-based implementation, suitable for all the grammatical formalisms discussed in the books. The landscape in the valley of syntax is governed by GB, as the highest achievement towards universality. GB realizes a rich set of universal principles, the grammars of the particular languages being obtained as parametrizations of a Universal Grammar. All the other syntactic approaches (including GPSG, LFG, logic-based grammars) could be labeled as stages in the evolution of Chomsky&apos;s ideas from observational to descriptive and to explanatory adequacy. In their trend to universality, explicitness, and rigor, they inevitably decreased in specification of empirical detail. The linguistic pole for all the contemporary syntactic theories or tools is the effort to the meaning, a min-max (or equilibrium) minimality, coming from semantics, and maximality, coming from syntax. Another basic idea is that clause structure is largely predictable from the semantics of predicates: these theories agree in deriving canonical structures from lexical semantics and it is (somehow) surprising &amp;quot;how little needs to be stipulated beyond lexical meaning&amp;quot; (T. Wasow). CSLI-4 reveals the strong developments in unification-based implementations, stemming from different research directions but converging to grammars in which declarative and procedural interpretations can coexist. The grammatical version of unification, viewed as a (directed acyclic) graph-combinieg process, suggests many other linguistically and logically relevant operations: generalization (as the dual of unification), disjunction, negation, overwriting. Along with GPSG and LFG, Martin Kay&apos;s Functional Unification Grammar, logic-based grammars (Definite Clause Grammar, Extraposition Grammar, Gapping Grammar, etc. [Dahl and Saint-Dizier 1985]), Shieber&apos;s PATR-II grammars represent a &amp;quot;least common denominator&amp;quot; of the various unification-based formalisms but are still powerful. Appendix A in CSLI-4 contains the machine-interpretable form as an instructive example, handling increasingly complex constructs. As a corollary of all the formalisms and implementations, even those not (strictly) based on unification, like Wehrli (1984), is the emphasis on lexical properties in syntax and semantics. This pair of books represents an important and useful effort on the part of the authors to bring these linguistic theories and tools, as well as the implementation trends, to the computational linguistics community</abstract>
<author confidence="0.65758">Neculai Curteanu</author>
<affiliation confidence="0.922965">amp;quot;Al. I. Cuza&amp;quot; University Department of Mathematics and Computer Center</affiliation>
<address confidence="0.999884">6600 Iasi, Romania</address>
<email confidence="0.47695">REFERENCES</email>
<author confidence="0.760822">Language</author>
<affiliation confidence="0.733519">and Logic Programming. Amsterdam,</affiliation>
<address confidence="0.9454705">New York, Oxford. Gazdar, Gerald; Klein, Ewan; Pullum, Geoffrey; and Sag, Ivan 1985</address>
<affiliation confidence="0.995798">Phrase Structure Grammar. University Press,</affiliation>
<address confidence="0.99674">Cambridge, Massachusetts.</address>
<author confidence="0.526593">Work-</author>
<affiliation confidence="0.379302666666667">ing Papers No. 48, Institut pour les Etudes Semantiques et Cognitives, Universite de Geneve. MULTILINGUAL ASPECTS OF INFORMATION TECHNOLOGY</affiliation>
<author confidence="0.99207">Paul A Bennett</author>
<author confidence="0.99207">Rod L Johnson</author>
<author confidence="0.99207">John McNaught</author>
<author confidence="0.99207">Jean-</author>
<note confidence="0.6847475">ette Pugh, J.C. Sager, and Harold L. Somers Aldershot: Gower, 1986, ix+146 pp ISBN 0-566-03513-8; Â£17.50 This is a book for a first acquaintance with computational</note>
<abstract confidence="0.998772515151515">linguistics. It gives an overview of some of the main fields of interest, namely machine translation, natural language interfaces, and the lexicon. The book is directed towards user-oriented applications, especially systems on the market and under development. Some basic theoretical linguistic questions encountered in such development work are mentioned rather than discussed, and the book does not tell its readers too much about more fundamental research. In accordance with this practical scope, the topic of the lexicon is presented in two distinct chapters, one on general lexicology and lexicography and the other one on terminology and terminography, and no link is established on a level of word linguistics. The machine translation chapter introduces the basic terms, for instance in the field of system design (interlingual, transfer, direct; or machine-aided human vs. human-aided machine translation). This chapter is also the most explicit one with respect to implementation principles. The authors mention, among others, the advantages of modularity in structured programming. Another type of structured modularity is undoubtedly as important as this: the conceptual distinction between grammar and programming, with a formalism level as the interface. There are too many publications on the market which do not distinguish for example syntax, parsing formalism, and parser in a clean way. The authors of this book seem to make distinctions of this kind, and they also advocate a sound degree of modularity between the various parts of grammar (syntax, semantics, ...). In an introductory book, however, the principles of these distinctions should, to my taste, be made explicit. There are so many bad examples.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>bat a bet load ay ou</title>
<marker></marker>
<rawString>bat a bet load ay ou</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>