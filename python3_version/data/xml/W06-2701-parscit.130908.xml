<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.043877">
<title confidence="0.9983785">
Representing and Querying Multi-dimensional Markup
for Question Answering
</title>
<author confidence="0.998916">
Wouter Alink, Valentin Jijkoun, David Ahn, Maarten de Rijke
</author>
<affiliation confidence="0.998827">
ISLA, University of Amsterdam
</affiliation>
<email confidence="0.971386">
alink,jijkoun,ahn,mdr@science.uva.nl
</email>
<author confidence="0.975007">
Peter Boncz, Arjen de Vries
</author>
<affiliation confidence="0.955727">
CWI, Amsterdam, The Netherlands
</affiliation>
<email confidence="0.995099">
boncz,arjen@cwi.nl
</email>
<sectionHeader confidence="0.995609" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9999541875">
This paper describes our approach to rep-
resenting and querying multi-dimensional,
possibly overlapping text annotations, as
used in our question answering (QA) sys-
tem. We use a system extending XQuery,
the W3C-standard XML query language,
with new axes that allow one to jump eas-
ily between different annotations of the
same data. The new axes are formulated in
terms of (partial) overlap and containment.
All annotations are made using stand-off
XML in a single document, which can be
efficiently queried using the XQuery ex-
tension. The system is scalable to giga-
bytes of XML annotations. We show ex-
amples of the system in QA scenarios.
</bodyText>
<sectionHeader confidence="0.998991" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999428070175439">
Corpus-based question answering is a complex
task that draws from information retrieval, infor-
mation extraction and computational linguistics to
pinpoint information users are interested in. The
flexibility of natural language means that poten-
tial answers to questions may be phrased in differ-
ent ways—lexical and syntactic variation, ambi-
guity, polysemy, and anaphoricity all contribute to
a gap between questions and answers. Typically,
QA systems rely on a range of linguistic analyses,
provided by a variety of different tools, to bridge
this gap from questions to possible answers.
In our work, we focus on how we can integrate
the analyses provided by completely independent
linguistic processing components into a uniform
QA framework. On the one hand, we would like
to be able, as much as possible, to make use of
off-the-shelf NLP tools from various sources with-
out having to worry about whether the output of
the tools are compatible, either in a strong sense
of forming a single hierarchy or even in a weaker
sense of simply sharing common tokenization. On
the other hand, we would like to be able to issue
simple and clear queries that jointly draw upon an-
notations provided by different tools.
To this end, we store annotated data as stand-
off XML and query it using an extension of
XQuery with our new StandOff axes, inspired by
(Burkowski, 1992). Key to our approach is the use
of stand-off annotation at every stage of the anno-
tation process. The source text, or character data,
is stored in a Binary Large OBject (BLOB), and all
annotations, in a single XML document. To gen-
erate and manage the annotations we have adopted
XIRAF (Alink, 2005), a framework for integrating
annotation tools which has already been success-
fully used in digital forensic investigations.
Before performing any linguistic analysis, the
source documents, which may contain XML meta-
data, are split into a BLOB and an XML docu-
ment, and the XML document is used as the ini-
tial annotation. Various linguistic analysis tools
are run over the data, such as a named-entity tag-
ger, a temporal expression (timex) tagger, and syn-
tactic phrase structure and dependency parsers.
The XML document will grow during this analy-
sis phase as new annotations are added by the NLP
tools, while the BLOB remains intact. In the end,
the result is a fully annotated stand-off document,
and this annotated document is the basis for our
QA system, which uses XQuery extended with the
new axes to access the annotations.
The remainder of the paper is organized as fol-
lows. In Section 2 we briefly discuss related work.
Section 3 is devoted to the issue of querying multi-
dimensional markup. Then we describe how we
coordinate the process of text annotation, in Sec-
</bodyText>
<page confidence="0.997079">
3
</page>
<bodyText confidence="0.999517">
tion 4, before describing the application of our
multi-dimensional approach to linguistic annota-
tion to question answering in Section 5. We con-
clude in Section 6.
</bodyText>
<sectionHeader confidence="0.999341" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.999960553846154">
XML is a tree structured language and provides
very limited capabilities for representing several
annotations of the same data simultaneously, even
when each of the annotations is tree-like. In par-
ticular, in the case of inline markup, multiple an-
notation trees can be put together in a single XML
document only if elements from different annota-
tions do not cross each other’s boundaries.
Several proposals have tried to circumvent this
problem in various ways. Some approaches are
based on splitting overlapping elements into frag-
ments. Some use SGML with the CONCUR fea-
ture or even entirely different markup schemes
(such as LMNL, the Layered Markup and An-
notation Language (Piez, 2004), or GODDAGs,
generalized ordered-descendant directed acyclic
graphs (Sperberg-McQueen and Huitfeldt, 2000))
that allow arbitrary intersections of elements from
different hierarchies. Some approaches use empty
XML elements (milestones) to mark beginnings
and ends of problematic elements. We refer to
(DeRose, 2004) for an in-depth overview.
Although many approaches solve the problem
of representing possibly overlapping annotations,
they often do not address the issue of accessing
or querying the resulting representations. This
is a serious disadvantage, since standard query
languages, such as XPath and XQuery, and stan-
dard query evaluation engines cannot be used with
these representations directly.
The approach of (Sperberg-McQueen and Huit-
feldt, 2000) uses GODDAGs as a conceptual
model of multiple tree-like annotations of the
same data. Operationalizing this approach,
(Dekhtyar and Iacob, 2005) describes a system
that uses multiple inline XML annotations of the
same text to build a GODDAG structure, which
can be queried using EXPath, an extension of
XPath with new axis steps.
Our approach differs from that of Dekhtyar and
Iacob in several ways. First of all, we do not use
multiple separate documents; instead, all annota-
tion layers are woven into a single XML docu-
ment. Secondly, we use stand-off rather than in-
line annotation; each character in the original doc-
ument is referred to by a unique offset, which
means that specific regions in a document can be
denoted unambiguously with only a start and an
end offset. On the query side, our extended XPath
axes are similar to the axes of Dekhtyar and Iacob,
but less specific: e.g., we do not distinguish be-
tween left-overlapping and right-overlapping char-
acter regions.
In the setting of question answering there
are a few examples of querying and retrieving
semistructured data. Litowski (Litkowksi, 2003;
Litkowksi, 2004) has been advocating the use of
an XML-based infrastructure for question answer-
ing, with XPath-based querying at the back-end,
for a number of years. Ogilvie (2004) outlines the
possibility of using multi-dimensional markup for
question answering, with no system or experimen-
tal results yet. Jijkoun et al. (2005) describe initial
experiments with XQuesta, a question answering
system based on multi-dimensional markup.
</bodyText>
<sectionHeader confidence="0.841832" genericHeader="method">
3 Querying Multi-dimensional Markup
</sectionHeader>
<bodyText confidence="0.999966172413793">
Our approach to markup is based on stand-off
XML. Stand-off XML is already widely used, al-
though it is often not recognized as such. It can
be found in many present-day applications, es-
pecially where annotations of audio or video are
concerned. Furthermore, many existing multi-
dimensional-markup languages, such as LMNL,
can be translated into stand-off XML.
We split annotated data into two parts: the
BLOB (Binary Large OBject) and the XML anno-
tations that refer to specific regions of the BLOB.
A BLOB may be an arbitrary byte string (e.g., the
contents of a hard drive (Alink, 2005)), and the
annotations may refer to regions using positions
such as byte offsets, word offsets, points in time
or frame numbers (e.g., for audio or video appli-
cations). In text-based applications, such as de-
scribed in this paper, we use character offsets. The
advantage of such character-based references over
word- or token-based ones is that it allows us to
reconcile possibly different tokenizations by dif-
ferent text analysis tools (cf. Section 4).
In short, a multi-dimensional document consists
of a BLOB and a set of stand-off XML annota-
tions of the BLOB. Our approach to querying such
documents extends the common XML query lan-
guages XPath and XQuery by defining 4 new axes
that allow one to move from one XML tree to an-
other. Until recently, there have been very few
</bodyText>
<figure confidence="0.97903248">
Context
Axis
Result nodes
select-narrow
select-wide
reject-narrow
reject-wide
B C
A
A
A
A
B C E
E D
D
Table 1: Example annotations.
A
XML tree 1
B
BLOB
D
C
(text characters)
XML tree 2
E
</figure>
<figureCaption confidence="0.999981">
Figure 1: Two annotations of the same data.
</figureCaption>
<bodyText confidence="0.994854071428571">
approaches to querying stand-off documents. We
take the approach of (Alink, 2005), which allows
the user to relate different annotations using con-
tainment and overlap conditions. This is done us-
ing the new StandOff XPath axis steps that we add
to the XQuery language. This approach seems to
be quite general: in (Alink, 2005) it is shown that
many of the query scenarios given in (Iacob et al.,
2004) can be easily handled by using these Stand-
Off axis steps.
Let us explain the axis steps by means of an
example. Figure 1 shows two annotations of the
same character string (BLOB), where the first
XML annotation is
</bodyText>
<equation confidence="0.908678125">
&lt;A start=&amp;quot;10&amp;quot; end=&amp;quot;50&amp;quot;&gt;
&lt;B start=&amp;quot;30&amp;quot; end=&amp;quot;50&amp;quot;/&gt;
&lt;/A&gt;
and the second is
&lt;E start=&amp;quot;20&amp;quot; end=&amp;quot;60&amp;quot;&gt;
&lt;C start=&amp;quot;20&amp;quot; end=&amp;quot;40&amp;quot;/&gt;
&lt;D start=&amp;quot;55&amp;quot; end=&amp;quot;60&amp;quot;&gt;
&lt;/E&gt;
</equation>
<bodyText confidence="0.997533105263158">
While each annotation forms a valid XML tree and
can be queried using standard XML query lan-
guages, together they make up a more complex
structure.
StandOff axis steps, inspired by (Burkowski,
1992), allow for querying overlap and contain-
ment of regions, but otherwise behave like reg-
ular XPath steps, such as child (the step be-
tween A and B in Figure 1) or sibling (the step
between C and D). The new StandOff axes, de-
noted with select-narrow, select-wide,
reject-narrow, and reject-wide select
contained, overlapping, non-contained and non-
overlapping region elements, respectively, from
possibly distinct layers of XML annotation of the
data. Table 1 lists some examples for the annota-
tions of our example document.
In XPath, the new axis steps are used in exactly
the same way as the standard ones. For example,
</bodyText>
<equation confidence="0.774652833333333">
the XPath query:
//B/select-wide::*
returns all nodes that overlap with the span of a
B node: in our case the nodes A, B, C and E. The
query:
//*[./select-narrow::B]
</equation>
<bodyText confidence="0.999836805555556">
returns nodes that contain the span of B: in our
case, the nodes A and E.
In implementing the new steps, one of our de-
sign decisions was to put all stand-off annotations
in a single document. For this, an XML processor
is needed that is capable of handling large amounts
of XML. We have decided to use MonetDB/X-
Query, an XQuery implementation that consists of
the Pathfinder compiler, which translates XQuery
statements into a relational algebra, and the re-
lational database MonetDB (Grust, 2002; Boncz,
2002).
The implementation of the new axis steps in
MonetDB/XQuery is quite efficient. When the
XMark benchmark documents (XMark, 2006)
are represented using stand-off notation, query-
ing with the StandOff axis steps is interactive for
document size up to 1GB. Even millions of re-
gions are handled efficiently. The reason for the
speed of the StandOff axis steps is twofold. First,
they are accelerated by keeping a database in-
dex on the region attributes, which allows fast
merge-algorithms to be used in their evaluation.
Such merge-algorithms make a single linear scan
through the index to compute each StandOff
step. The second technical innovation is “loop-
lifting.” This is a general principle in MonetDB/X-
Query(Boncz et al., 2005) for the efficient execu-
tion of XPath steps that occur nested in XQuery
iterations (i.e., inside for-loops). A naive strategy
would invoke the StandOff algorithm for each it-
eration, leading to repeated (potentially many) se-
quential scans. Loop-lifted versions of the Stand-
Off algorithms, in contrast, handle all iterations to-
gether in one sequential scan, keeping the average
complexity of the StandOff steps linear.
</bodyText>
<page confidence="0.985">
5
</page>
<bodyText confidence="0.998833583333333">
The StandOff axis steps are part of release
0.10 of the open-source MonetDB/XQuery prod-
uct, which can be downloaded from http://
www.monetdb.nl/XQuery.
In addition to the StandOff axis steps, a key-
word search function has been added to the
XQuery system to allow queries asking for re-
gions containing specific words. This function
is called so-contains($node, $needle)
which will return a boolean specifying whether
$needle occurs in the given region represented
by the element $node.
</bodyText>
<sectionHeader confidence="0.983275" genericHeader="method">
4 Combining Annotations
</sectionHeader>
<bodyText confidence="0.999993732394366">
In our QA application of multi-dimensional
markup, we work with corpora of newspaper arti-
cles, each of which comes with some basic anno-
tation, such as title, body, keywords, timestamp,
topic, etc. We take this initial annotation structure
and split it into raw data, which comprises all tex-
tual content, and the XML markup. The raw data
is the BLOB, and the XML annotations are con-
verted to stand-off format. To each XML element
originally containing textual data (now stored in
the BLOB), we add a start and end attribute
denoting its position in the BLOB.
We use a separate system, XIRAF, to coordi-
nate the process of automatically annotating the
text. XIRAF (Figure 2) combines multiple text
processing tools, each having an input descriptor
and a tool-specific wrapper that converts the tool
output into stand-off XML annotation. Figure 3
shows the interaction of XIRAF with an automatic
annotation tool using a wrapper.
The input descriptor associated with a tool is
used to select regions in the data that are candi-
dates for processing by that tool. The descrip-
tor may select regions on the basis of the original
metadata or annotations added by other tools. For
example, both our sentence splitter and our tempo-
ral expression tagger use original document meta-
data to select their input: both select document
text, with //TEXT. Other tools, such as syntac-
tic parsers and named-entity taggers, require sep-
arated sentences as input and thus use the output
annotations of the sentence splitter, with the input
descriptor //sentence. In general, there may
be arbitrary dependencies between text-processing
tools, which XIRAF takes into account.
In order to add the new annotations generated
by a tool to the original document, the output of
the tool must be represented using stand-off XML
annotation of the input data. Many text process-
ing tools (e.g., parsers or part-of-speech taggers)
do not produce XML annotation per se, but their
output can be easily converted to stand-off XML
annotation. More problematically, text process-
ing tools may actually modify the input text in the
course of adding annotations, so that the offsets
referenced in the new annotations do not corre-
spond to the original BLOB. Tools make a vari-
ety of modifications to their input text: some per-
form their own tokenization (i.e., inserting whites-
paces or other word separators), silently skip parts
of the input (e.g., syntactic parsers, when the pars-
ing fails), or replace special symbols (e.g., paren-
theses with -LRB- and -RRB-). For many of the
available text processing tools, such possible mod-
ifications are not fully documented.
XIRAF, then, must map the output of a process-
ing tool back to the original BLOB before adding
the new annotations to the original document. This
re-alignment of the output of the processing tools
with the original BLOB is one of the major hur-
dles in the development of our system. We ap-
proach the problems systematically. We compare
the text data in the output of a given tool with the
data that was given to it as input and re-align in-
put and output offsets of markup elements using
an edit-distance algorithm with heuristically cho-
sen weights of character edits. After re-aligning
the output with the original BLOB and adjusting
the offsets accordingly, the actual data returned by
the tool is discarded and only the stand-off markup
is added to the existing document annotations.
</bodyText>
<sectionHeader confidence="0.913812" genericHeader="method">
5 Question Answering
</sectionHeader>
<bodyText confidence="0.999901866666667">
XQuesta, our corpus-based question-answering
system for English and Dutch, makes use of the
multi-dimensional approach to linguistic annota-
tion embodied in XIRAF. The system analyzes an
incoming question to determine the required an-
swer type and keyword queries for retrieving rel-
evant snippets from the corpus. From these snip-
pets, candidate answers are extracted, ranked, and
returned.
The system consults Dutch and English news-
paper corpora. Using XIRAF, we annotate the
corpora with named entities (including type infor-
mation), temporal expressions (normalized to ISO
values), syntactic chunks, and syntactic parses
(dependency parses for Dutch and phrase structure
</bodyText>
<page confidence="0.981899">
6
</page>
<figure confidence="0.986202">
XQuesta
XQuery System
XIRAF Feature Extraction Framework
</figure>
<figureCaption confidence="0.999965">
Figure 2: XIRAF Architecture
Figure 3: Tool Wrapping Example
</figureCaption>
<bodyText confidence="0.991635447368421">
parses for English).
XQuesta’s question analysis module maps ques-
tions to both a keyword query for retrieval of rele-
vant passages and a query for extracting candidate
answers. For example, for the question How many
seats does a Boeing 747 have?, the keyword query
is Boeing 747 seats, while the extraction query is
the pure XPath expression:
//phrase[@type=&amp;quot;NP&amp;quot;][.//WORD
[@pos=&amp;quot;CD&amp;quot;]][so-contains(.,
&amp;quot;seat&amp;quot;)]
This query can be glossed: find phrase elements
of type NP that dominate a word element tagged
as a cardinal determiner and that also contain the
string “seat”. Note that phrase and word ele-
ments are annotations generated by a single tool
(the phrase-structure parser) and thus in the same
annotation layer, which is why standard XPath can
be used to express this query.
For the question When was Kennedy assassi-
nated?, on the other hand, the extraction query is
an XPath expression that uses a StandOff axis:
//phrase[@type=&amp;quot;S&amp;quot; and headword=
&amp;quot;assassinated&amp;quot; and so-contains(.,
&amp;quot;Kennedy&amp;quot;)]/select-narrow::timex
This query can be glossed: find temporal expres-
sions whose textual extent is contained inside a
sentence (or clause) that is headed by assassi-
nated and contains the string “Kennedy”. Note
that phrase and timex elements are gener-
ated by different tools (the phrase-structure parser
and the temporal expression tagger, respectively),
and therefore belong to different annotation lay-
ers. Thus, the select-narrow:: axis step
must be used in place of the standard child::
or descendant:: steps.
As another example of the use of the Stand-
Off axes, consider the question Who killed John
</bodyText>
<page confidence="0.997704">
7
</page>
<bodyText confidence="0.976602764705882">
F. Kennedy?. Here, the keyword query is kill John
Kennedy, and the extraction query is the following
(extended) XPath expression:
//phrase[@type=&amp;quot;S&amp;quot; and headword=
&amp;quot;killed&amp;quot; and so-contains(.,
&amp;quot;Kennedy&amp;quot;)]/phrase[@type=&amp;quot;NP&amp;quot;]/
select-wide::ne[@type=&amp;quot;per&amp;quot;]
This query can be glossed: find person named-
entities whose textual extent overlaps the textual
extent of an NP phrase that is the subject of a sen-
tence phrase that is headed by killed and contains
the string “Kennedy”. Again, phrase elements
and ne elements are generated by different tools
(the phrase-structure parser and named-entity tag-
ger, respectively), and therefore belong to differ-
ent annotation layers. In this case, we further do
not want to make the unwarranted assumption that
the subject NP found by the parser properly con-
tains the named-entity found by the named-entity
tagger. Therefore, we use the select-wide::
axis to indicate that the named-entity which will
serve as our candidate answer need only overlap
with the sentential subject.
How do we map from questions to queries like
this? For now, we use hand-crafted patterns, but
we are currently working on using machine learn-
ing methods to automatically acquire question-
query mappings. For the purposes of demonstrat-
ing the utility of XIRAF to QA, however, it is im-
material how the mapping happens. What is im-
portant to note is that queries utilizing the Stand-
Off axes arise naturally in the mapping of ques-
tions to queries against corpus data that has several
layers of linguistic annotation.
</bodyText>
<sectionHeader confidence="0.999249" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999975529411765">
We have described a scalable and flexible system
for processing documents with multi-dimensional
markup. We use stand-off XML annotation to rep-
resent markup, which allows us to combine multi-
ple, possibly overlapping annotations in one XML
file. XIRAF, our framework for managing the
annotations, invokes text processing tools, each
accompanied with an input descriptor specifying
what data the tool needs as input, and a wrapper
that converts the tool’s output to stand-off XML.
To access the annotations, we use an efficient
XPath/XQuery engine extended with new Stand-
Off axes that allow references to different annota-
tion layers in one query. We have presented exam-
ples of such concurrent extended XPath queries in
the context of our corpus-based Question Answer-
ing system.
</bodyText>
<sectionHeader confidence="0.995204" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999618333333333">
This research was supported by the Nether-
lands Organization for Scientific Research (NWO)
under project numbers 017.001.190, 220-80-
001, 264-70-050, 612-13-001, 612.000.106,
612.000.207, 612.066.302, 612.069.006, 640.-
001.501, and 640.002.501.
</bodyText>
<sectionHeader confidence="0.999153" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999498820512821">
W. Alink. 2005. XIRAF – an XML information re-
trieval approach to digital forensics. Master’s thesis,
University of Twente, Enschede, The Netherlands,
October.
P.A. Boncz, T. Grust, S. Manegold, J. Rittinger, and
J. Teubner. 2005. Pathfinder: Relational XQuery
Over Multi-Gigabyte XML Inputs In Interactive
Time. In Proceedings of the 31st VLDB Conference,
Trondheim, Norway.
P.A. Boncz. 2002. Monet: A Next-Generation DBMS
Kernel For Query-Intensive Applications. Ph.d. the-
sis, Universiteit van Amsterdam, Amsterdam, The
Netherlands, May.
F.J. Burkowski. 1992. Retrieval Activities in a
Database Consisting of Heterogeneous Collections
of Structured Text. In Proceedings of the 1992 SI-
GIR Conference, pages 112–125.
A. Dekhtyar and I.E. Iacob. 2005. A framework
for management of concurrent xml markup. Data
Knowl. Eng., 52(2):185–208.
S. DeRose. 2004. Markup Overlap: A Review and a
Horse. In Extreme Markup Languages 2004.
T. Grust. 2002. Accelerating XPath Location Steps.
In Proceedings of the 21st ACM SIGMOD Interna-
tional Conference on Management of Data, pages
109–120.
I.E. Iacob, A. Dekhtyar, and W. Zhao. 2004. XPath
Extension for Querying Concurrent XML Markup.
Technical report, University of Kentucky, February.
V. Jijkoun, E. Tjong Kim Sang, D. Ahn, K. M¨uller, and
M. de Rijke. 2005. The University of Amsterdam at
QA@CLEF 2005. In Working Notes for the CLEF
2005 Workshop.
K.C. Litkowksi. 2003. Question answering using
XML-tagged documents. In Proceedings of the
Eleventh Text REtrieval Conference (TREC-11).
K.C. Litkowksi. 2004. Use of metadata for question
answering and novelty tasks. In Proceedings of the
Twelfth Text REtrieval Conference (TREC 2003).
</reference>
<page confidence="0.976251">
8
</page>
<reference confidence="0.999545384615385">
P. Ogilvie. 2004. Retrieval Using Structure for Ques-
tion Answering. In The First Twente Data Manage-
ment Workshop (TDM’04), pages 15–23.
W. Piez. 2004. Half-steps toward LMNL. In Pro-
ceedings of the fifth Conference on Extreme Markup
Languages.
C.M. Sperberg-McQueen and C. Huitfeldt. 2000.
GODDAG: A Data Structure for Overlapping Hier-
archies. In Proc. of DDEP/PODDP 2000, volume
2023 of Lecture Notes in Computer Science, pages
139–160, January.
XMark. 2006. XMark – An XML Benchmark Project.
http://monetdb.cwi.nl/xml/.
</reference>
<page confidence="0.9986775">
9
10
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.304500">
<title confidence="0.9987425">Representing and Querying Multi-dimensional for Question Answering</title>
<author confidence="0.965554">Wouter Alink</author>
<author confidence="0.965554">Valentin Jijkoun</author>
<author confidence="0.965554">David Ahn</author>
<author confidence="0.965554">Maarten de</author>
<affiliation confidence="0.986762">ISLA, University of</affiliation>
<email confidence="0.875625">alink,jijkoun,ahn,mdr@science.uva.nl</email>
<author confidence="0.56532">Peter Boncz</author>
<author confidence="0.56532">Arjen de_Vries</author>
<address confidence="0.601972">CWI, Amsterdam, The</address>
<email confidence="0.987116">boncz,arjen@cwi.nl</email>
<abstract confidence="0.99804">This paper describes our approach to representing and querying multi-dimensional, possibly overlapping text annotations, as used in our question answering (QA) system. We use a system extending XQuery, the W3C-standard XML query language, with new axes that allow one to jump easily between different annotations of the same data. The new axes are formulated in terms of (partial) overlap and containment. All annotations are made using stand-off XML in a single document, which can be efficiently queried using the XQuery extension. The system is scalable to gigabytes of XML annotations. We show examples of the system in QA scenarios.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>W Alink</author>
</authors>
<title>XIRAF – an XML information retrieval approach to digital forensics. Master’s thesis,</title>
<date>2005</date>
<institution>University of Twente,</institution>
<location>Enschede, The Netherlands,</location>
<contexts>
<context position="2600" citStr="Alink, 2005" startWordPosition="415" endWordPosition="416">mmon tokenization. On the other hand, we would like to be able to issue simple and clear queries that jointly draw upon annotations provided by different tools. To this end, we store annotated data as standoff XML and query it using an extension of XQuery with our new StandOff axes, inspired by (Burkowski, 1992). Key to our approach is the use of stand-off annotation at every stage of the annotation process. The source text, or character data, is stored in a Binary Large OBject (BLOB), and all annotations, in a single XML document. To generate and manage the annotations we have adopted XIRAF (Alink, 2005), a framework for integrating annotation tools which has already been successfully used in digital forensic investigations. Before performing any linguistic analysis, the source documents, which may contain XML metadata, are split into a BLOB and an XML document, and the XML document is used as the initial annotation. Various linguistic analysis tools are run over the data, such as a named-entity tagger, a temporal expression (timex) tagger, and syntactic phrase structure and dependency parsers. The XML document will grow during this analysis phase as new annotations are added by the NLP tools</context>
<context position="7473" citStr="Alink, 2005" startWordPosition="1191" endWordPosition="1192"> Multi-dimensional Markup Our approach to markup is based on stand-off XML. Stand-off XML is already widely used, although it is often not recognized as such. It can be found in many present-day applications, especially where annotations of audio or video are concerned. Furthermore, many existing multidimensional-markup languages, such as LMNL, can be translated into stand-off XML. We split annotated data into two parts: the BLOB (Binary Large OBject) and the XML annotations that refer to specific regions of the BLOB. A BLOB may be an arbitrary byte string (e.g., the contents of a hard drive (Alink, 2005)), and the annotations may refer to regions using positions such as byte offsets, word offsets, points in time or frame numbers (e.g., for audio or video applications). In text-based applications, such as described in this paper, we use character offsets. The advantage of such character-based references over word- or token-based ones is that it allows us to reconcile possibly different tokenizations by different text analysis tools (cf. Section 4). In short, a multi-dimensional document consists of a BLOB and a set of stand-off XML annotations of the BLOB. Our approach to querying such documen</context>
<context position="8805" citStr="Alink, 2005" startWordPosition="1423" endWordPosition="1424">ee to another. Until recently, there have been very few Context Axis Result nodes select-narrow select-wide reject-narrow reject-wide B C A A A A B C E E D D Table 1: Example annotations. A XML tree 1 B BLOB D C (text characters) XML tree 2 E Figure 1: Two annotations of the same data. approaches to querying stand-off documents. We take the approach of (Alink, 2005), which allows the user to relate different annotations using containment and overlap conditions. This is done using the new StandOff XPath axis steps that we add to the XQuery language. This approach seems to be quite general: in (Alink, 2005) it is shown that many of the query scenarios given in (Iacob et al., 2004) can be easily handled by using these StandOff axis steps. Let us explain the axis steps by means of an example. Figure 1 shows two annotations of the same character string (BLOB), where the first XML annotation is &lt;A start=&amp;quot;10&amp;quot; end=&amp;quot;50&amp;quot;&gt; &lt;B start=&amp;quot;30&amp;quot; end=&amp;quot;50&amp;quot;/&gt; &lt;/A&gt; and the second is &lt;E start=&amp;quot;20&amp;quot; end=&amp;quot;60&amp;quot;&gt; &lt;C start=&amp;quot;20&amp;quot; end=&amp;quot;40&amp;quot;/&gt; &lt;D start=&amp;quot;55&amp;quot; end=&amp;quot;60&amp;quot;&gt; &lt;/E&gt; While each annotation forms a valid XML tree and can be queried using standard XML query languages, together they make up a more complex structure. StandOff axi</context>
</contexts>
<marker>Alink, 2005</marker>
<rawString>W. Alink. 2005. XIRAF – an XML information retrieval approach to digital forensics. Master’s thesis, University of Twente, Enschede, The Netherlands, October.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P A Boncz</author>
<author>T Grust</author>
<author>S Manegold</author>
<author>J Rittinger</author>
<author>J Teubner</author>
</authors>
<title>Pathfinder: Relational XQuery Over Multi-Gigabyte XML Inputs In Interactive Time.</title>
<date>2005</date>
<booktitle>In Proceedings of the 31st VLDB Conference,</booktitle>
<location>Trondheim, Norway.</location>
<contexts>
<context position="11464" citStr="Boncz et al., 2005" startWordPosition="1862" endWordPosition="1866">ments (XMark, 2006) are represented using stand-off notation, querying with the StandOff axis steps is interactive for document size up to 1GB. Even millions of regions are handled efficiently. The reason for the speed of the StandOff axis steps is twofold. First, they are accelerated by keeping a database index on the region attributes, which allows fast merge-algorithms to be used in their evaluation. Such merge-algorithms make a single linear scan through the index to compute each StandOff step. The second technical innovation is “looplifting.” This is a general principle in MonetDB/XQuery(Boncz et al., 2005) for the efficient execution of XPath steps that occur nested in XQuery iterations (i.e., inside for-loops). A naive strategy would invoke the StandOff algorithm for each iteration, leading to repeated (potentially many) sequential scans. Loop-lifted versions of the StandOff algorithms, in contrast, handle all iterations together in one sequential scan, keeping the average complexity of the StandOff steps linear. 5 The StandOff axis steps are part of release 0.10 of the open-source MonetDB/XQuery product, which can be downloaded from http:// www.monetdb.nl/XQuery. In addition to the StandOff a</context>
</contexts>
<marker>Boncz, Grust, Manegold, Rittinger, Teubner, 2005</marker>
<rawString>P.A. Boncz, T. Grust, S. Manegold, J. Rittinger, and J. Teubner. 2005. Pathfinder: Relational XQuery Over Multi-Gigabyte XML Inputs In Interactive Time. In Proceedings of the 31st VLDB Conference, Trondheim, Norway.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P A Boncz</author>
</authors>
<title>Monet: A Next-Generation DBMS Kernel For Query-Intensive Applications.</title>
<date>2002</date>
<tech>Ph.d. thesis,</tech>
<institution>Universiteit van Amsterdam,</institution>
<location>Amsterdam, The Netherlands,</location>
<contexts>
<context position="10735" citStr="Boncz, 2002" startWordPosition="1749" endWordPosition="1750">lap with the span of a B node: in our case the nodes A, B, C and E. The query: //*[./select-narrow::B] returns nodes that contain the span of B: in our case, the nodes A and E. In implementing the new steps, one of our design decisions was to put all stand-off annotations in a single document. For this, an XML processor is needed that is capable of handling large amounts of XML. We have decided to use MonetDB/XQuery, an XQuery implementation that consists of the Pathfinder compiler, which translates XQuery statements into a relational algebra, and the relational database MonetDB (Grust, 2002; Boncz, 2002). The implementation of the new axis steps in MonetDB/XQuery is quite efficient. When the XMark benchmark documents (XMark, 2006) are represented using stand-off notation, querying with the StandOff axis steps is interactive for document size up to 1GB. Even millions of regions are handled efficiently. The reason for the speed of the StandOff axis steps is twofold. First, they are accelerated by keeping a database index on the region attributes, which allows fast merge-algorithms to be used in their evaluation. Such merge-algorithms make a single linear scan through the index to compute each S</context>
</contexts>
<marker>Boncz, 2002</marker>
<rawString>P.A. Boncz. 2002. Monet: A Next-Generation DBMS Kernel For Query-Intensive Applications. Ph.d. thesis, Universiteit van Amsterdam, Amsterdam, The Netherlands, May.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F J Burkowski</author>
</authors>
<title>Retrieval Activities in a Database Consisting of Heterogeneous Collections of Structured Text.</title>
<date>1992</date>
<booktitle>In Proceedings of the 1992 SIGIR Conference,</booktitle>
<pages>112--125</pages>
<contexts>
<context position="2301" citStr="Burkowski, 1992" startWordPosition="362" endWordPosition="363">On the one hand, we would like to be able, as much as possible, to make use of off-the-shelf NLP tools from various sources without having to worry about whether the output of the tools are compatible, either in a strong sense of forming a single hierarchy or even in a weaker sense of simply sharing common tokenization. On the other hand, we would like to be able to issue simple and clear queries that jointly draw upon annotations provided by different tools. To this end, we store annotated data as standoff XML and query it using an extension of XQuery with our new StandOff axes, inspired by (Burkowski, 1992). Key to our approach is the use of stand-off annotation at every stage of the annotation process. The source text, or character data, is stored in a Binary Large OBject (BLOB), and all annotations, in a single XML document. To generate and manage the annotations we have adopted XIRAF (Alink, 2005), a framework for integrating annotation tools which has already been successfully used in digital forensic investigations. Before performing any linguistic analysis, the source documents, which may contain XML metadata, are split into a BLOB and an XML document, and the XML document is used as the i</context>
<context position="9443" citStr="Burkowski, 1992" startWordPosition="1531" endWordPosition="1532"> of the query scenarios given in (Iacob et al., 2004) can be easily handled by using these StandOff axis steps. Let us explain the axis steps by means of an example. Figure 1 shows two annotations of the same character string (BLOB), where the first XML annotation is &lt;A start=&amp;quot;10&amp;quot; end=&amp;quot;50&amp;quot;&gt; &lt;B start=&amp;quot;30&amp;quot; end=&amp;quot;50&amp;quot;/&gt; &lt;/A&gt; and the second is &lt;E start=&amp;quot;20&amp;quot; end=&amp;quot;60&amp;quot;&gt; &lt;C start=&amp;quot;20&amp;quot; end=&amp;quot;40&amp;quot;/&gt; &lt;D start=&amp;quot;55&amp;quot; end=&amp;quot;60&amp;quot;&gt; &lt;/E&gt; While each annotation forms a valid XML tree and can be queried using standard XML query languages, together they make up a more complex structure. StandOff axis steps, inspired by (Burkowski, 1992), allow for querying overlap and containment of regions, but otherwise behave like regular XPath steps, such as child (the step between A and B in Figure 1) or sibling (the step between C and D). The new StandOff axes, denoted with select-narrow, select-wide, reject-narrow, and reject-wide select contained, overlapping, non-contained and nonoverlapping region elements, respectively, from possibly distinct layers of XML annotation of the data. Table 1 lists some examples for the annotations of our example document. In XPath, the new axis steps are used in exactly the same way as the standard on</context>
</contexts>
<marker>Burkowski, 1992</marker>
<rawString>F.J. Burkowski. 1992. Retrieval Activities in a Database Consisting of Heterogeneous Collections of Structured Text. In Proceedings of the 1992 SIGIR Conference, pages 112–125.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Dekhtyar</author>
<author>I E Iacob</author>
</authors>
<title>A framework for management of concurrent xml markup.</title>
<date>2005</date>
<journal>Data Knowl. Eng.,</journal>
<volume>52</volume>
<issue>2</issue>
<contexts>
<context position="5446" citStr="Dekhtyar and Iacob, 2005" startWordPosition="860" endWordPosition="863">ments. We refer to (DeRose, 2004) for an in-depth overview. Although many approaches solve the problem of representing possibly overlapping annotations, they often do not address the issue of accessing or querying the resulting representations. This is a serious disadvantage, since standard query languages, such as XPath and XQuery, and standard query evaluation engines cannot be used with these representations directly. The approach of (Sperberg-McQueen and Huitfeldt, 2000) uses GODDAGs as a conceptual model of multiple tree-like annotations of the same data. Operationalizing this approach, (Dekhtyar and Iacob, 2005) describes a system that uses multiple inline XML annotations of the same text to build a GODDAG structure, which can be queried using EXPath, an extension of XPath with new axis steps. Our approach differs from that of Dekhtyar and Iacob in several ways. First of all, we do not use multiple separate documents; instead, all annotation layers are woven into a single XML document. Secondly, we use stand-off rather than inline annotation; each character in the original document is referred to by a unique offset, which means that specific regions in a document can be denoted unambiguously with onl</context>
</contexts>
<marker>Dekhtyar, Iacob, 2005</marker>
<rawString>A. Dekhtyar and I.E. Iacob. 2005. A framework for management of concurrent xml markup. Data Knowl. Eng., 52(2):185–208.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S DeRose</author>
</authors>
<title>Markup Overlap: A Review and a Horse. In Extreme Markup Languages</title>
<date>2004</date>
<contexts>
<context position="4854" citStr="DeRose, 2004" startWordPosition="777" endWordPosition="778">everal proposals have tried to circumvent this problem in various ways. Some approaches are based on splitting overlapping elements into fragments. Some use SGML with the CONCUR feature or even entirely different markup schemes (such as LMNL, the Layered Markup and Annotation Language (Piez, 2004), or GODDAGs, generalized ordered-descendant directed acyclic graphs (Sperberg-McQueen and Huitfeldt, 2000)) that allow arbitrary intersections of elements from different hierarchies. Some approaches use empty XML elements (milestones) to mark beginnings and ends of problematic elements. We refer to (DeRose, 2004) for an in-depth overview. Although many approaches solve the problem of representing possibly overlapping annotations, they often do not address the issue of accessing or querying the resulting representations. This is a serious disadvantage, since standard query languages, such as XPath and XQuery, and standard query evaluation engines cannot be used with these representations directly. The approach of (Sperberg-McQueen and Huitfeldt, 2000) uses GODDAGs as a conceptual model of multiple tree-like annotations of the same data. Operationalizing this approach, (Dekhtyar and Iacob, 2005) describ</context>
</contexts>
<marker>DeRose, 2004</marker>
<rawString>S. DeRose. 2004. Markup Overlap: A Review and a Horse. In Extreme Markup Languages 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Grust</author>
</authors>
<title>Accelerating XPath Location Steps.</title>
<date>2002</date>
<booktitle>In Proceedings of the 21st ACM SIGMOD International Conference on Management of Data,</booktitle>
<pages>109--120</pages>
<contexts>
<context position="10721" citStr="Grust, 2002" startWordPosition="1747" endWordPosition="1748">des that overlap with the span of a B node: in our case the nodes A, B, C and E. The query: //*[./select-narrow::B] returns nodes that contain the span of B: in our case, the nodes A and E. In implementing the new steps, one of our design decisions was to put all stand-off annotations in a single document. For this, an XML processor is needed that is capable of handling large amounts of XML. We have decided to use MonetDB/XQuery, an XQuery implementation that consists of the Pathfinder compiler, which translates XQuery statements into a relational algebra, and the relational database MonetDB (Grust, 2002; Boncz, 2002). The implementation of the new axis steps in MonetDB/XQuery is quite efficient. When the XMark benchmark documents (XMark, 2006) are represented using stand-off notation, querying with the StandOff axis steps is interactive for document size up to 1GB. Even millions of regions are handled efficiently. The reason for the speed of the StandOff axis steps is twofold. First, they are accelerated by keeping a database index on the region attributes, which allows fast merge-algorithms to be used in their evaluation. Such merge-algorithms make a single linear scan through the index to </context>
</contexts>
<marker>Grust, 2002</marker>
<rawString>T. Grust. 2002. Accelerating XPath Location Steps. In Proceedings of the 21st ACM SIGMOD International Conference on Management of Data, pages 109–120.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I E Iacob</author>
<author>A Dekhtyar</author>
<author>W Zhao</author>
</authors>
<title>XPath Extension for Querying Concurrent XML Markup.</title>
<date>2004</date>
<tech>Technical report,</tech>
<institution>University of Kentucky,</institution>
<contexts>
<context position="8880" citStr="Iacob et al., 2004" startWordPosition="1436" endWordPosition="1439"> Result nodes select-narrow select-wide reject-narrow reject-wide B C A A A A B C E E D D Table 1: Example annotations. A XML tree 1 B BLOB D C (text characters) XML tree 2 E Figure 1: Two annotations of the same data. approaches to querying stand-off documents. We take the approach of (Alink, 2005), which allows the user to relate different annotations using containment and overlap conditions. This is done using the new StandOff XPath axis steps that we add to the XQuery language. This approach seems to be quite general: in (Alink, 2005) it is shown that many of the query scenarios given in (Iacob et al., 2004) can be easily handled by using these StandOff axis steps. Let us explain the axis steps by means of an example. Figure 1 shows two annotations of the same character string (BLOB), where the first XML annotation is &lt;A start=&amp;quot;10&amp;quot; end=&amp;quot;50&amp;quot;&gt; &lt;B start=&amp;quot;30&amp;quot; end=&amp;quot;50&amp;quot;/&gt; &lt;/A&gt; and the second is &lt;E start=&amp;quot;20&amp;quot; end=&amp;quot;60&amp;quot;&gt; &lt;C start=&amp;quot;20&amp;quot; end=&amp;quot;40&amp;quot;/&gt; &lt;D start=&amp;quot;55&amp;quot; end=&amp;quot;60&amp;quot;&gt; &lt;/E&gt; While each annotation forms a valid XML tree and can be queried using standard XML query languages, together they make up a more complex structure. StandOff axis steps, inspired by (Burkowski, 1992), allow for querying overlap and cont</context>
</contexts>
<marker>Iacob, Dekhtyar, Zhao, 2004</marker>
<rawString>I.E. Iacob, A. Dekhtyar, and W. Zhao. 2004. XPath Extension for Querying Concurrent XML Markup. Technical report, University of Kentucky, February.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Jijkoun</author>
<author>E Tjong Kim Sang</author>
<author>D Ahn</author>
<author>K M¨uller</author>
<author>M de Rijke</author>
</authors>
<date>2005</date>
<journal>The University of Amsterdam at QA@CLEF</journal>
<booktitle>In Working Notes for the CLEF 2005 Workshop.</booktitle>
<marker>Jijkoun, Sang, Ahn, M¨uller, de Rijke, 2005</marker>
<rawString>V. Jijkoun, E. Tjong Kim Sang, D. Ahn, K. M¨uller, and M. de Rijke. 2005. The University of Amsterdam at QA@CLEF 2005. In Working Notes for the CLEF 2005 Workshop.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K C Litkowksi</author>
</authors>
<title>Question answering using XML-tagged documents.</title>
<date>2003</date>
<booktitle>In Proceedings of the Eleventh Text REtrieval Conference (TREC-11).</booktitle>
<contexts>
<context position="6413" citStr="Litkowksi, 2003" startWordPosition="1025" endWordPosition="1026">n into a single XML document. Secondly, we use stand-off rather than inline annotation; each character in the original document is referred to by a unique offset, which means that specific regions in a document can be denoted unambiguously with only a start and an end offset. On the query side, our extended XPath axes are similar to the axes of Dekhtyar and Iacob, but less specific: e.g., we do not distinguish between left-overlapping and right-overlapping character regions. In the setting of question answering there are a few examples of querying and retrieving semistructured data. Litowski (Litkowksi, 2003; Litkowksi, 2004) has been advocating the use of an XML-based infrastructure for question answering, with XPath-based querying at the back-end, for a number of years. Ogilvie (2004) outlines the possibility of using multi-dimensional markup for question answering, with no system or experimental results yet. Jijkoun et al. (2005) describe initial experiments with XQuesta, a question answering system based on multi-dimensional markup. 3 Querying Multi-dimensional Markup Our approach to markup is based on stand-off XML. Stand-off XML is already widely used, although it is often not recognized as</context>
</contexts>
<marker>Litkowksi, 2003</marker>
<rawString>K.C. Litkowksi. 2003. Question answering using XML-tagged documents. In Proceedings of the Eleventh Text REtrieval Conference (TREC-11).</rawString>
</citation>
<citation valid="true">
<authors>
<author>K C Litkowksi</author>
</authors>
<title>Use of metadata for question answering and novelty tasks.</title>
<date>2004</date>
<booktitle>In Proceedings of the Twelfth Text REtrieval Conference (TREC</booktitle>
<contexts>
<context position="6431" citStr="Litkowksi, 2004" startWordPosition="1027" endWordPosition="1028">ML document. Secondly, we use stand-off rather than inline annotation; each character in the original document is referred to by a unique offset, which means that specific regions in a document can be denoted unambiguously with only a start and an end offset. On the query side, our extended XPath axes are similar to the axes of Dekhtyar and Iacob, but less specific: e.g., we do not distinguish between left-overlapping and right-overlapping character regions. In the setting of question answering there are a few examples of querying and retrieving semistructured data. Litowski (Litkowksi, 2003; Litkowksi, 2004) has been advocating the use of an XML-based infrastructure for question answering, with XPath-based querying at the back-end, for a number of years. Ogilvie (2004) outlines the possibility of using multi-dimensional markup for question answering, with no system or experimental results yet. Jijkoun et al. (2005) describe initial experiments with XQuesta, a question answering system based on multi-dimensional markup. 3 Querying Multi-dimensional Markup Our approach to markup is based on stand-off XML. Stand-off XML is already widely used, although it is often not recognized as such. It can be f</context>
</contexts>
<marker>Litkowksi, 2004</marker>
<rawString>K.C. Litkowksi. 2004. Use of metadata for question answering and novelty tasks. In Proceedings of the Twelfth Text REtrieval Conference (TREC 2003).</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Ogilvie</author>
</authors>
<title>Retrieval Using Structure for Question Answering.</title>
<date>2004</date>
<booktitle>In The First Twente Data Management Workshop (TDM’04),</booktitle>
<pages>15--23</pages>
<contexts>
<context position="6595" citStr="Ogilvie (2004)" startWordPosition="1053" endWordPosition="1054">cific regions in a document can be denoted unambiguously with only a start and an end offset. On the query side, our extended XPath axes are similar to the axes of Dekhtyar and Iacob, but less specific: e.g., we do not distinguish between left-overlapping and right-overlapping character regions. In the setting of question answering there are a few examples of querying and retrieving semistructured data. Litowski (Litkowksi, 2003; Litkowksi, 2004) has been advocating the use of an XML-based infrastructure for question answering, with XPath-based querying at the back-end, for a number of years. Ogilvie (2004) outlines the possibility of using multi-dimensional markup for question answering, with no system or experimental results yet. Jijkoun et al. (2005) describe initial experiments with XQuesta, a question answering system based on multi-dimensional markup. 3 Querying Multi-dimensional Markup Our approach to markup is based on stand-off XML. Stand-off XML is already widely used, although it is often not recognized as such. It can be found in many present-day applications, especially where annotations of audio or video are concerned. Furthermore, many existing multidimensional-markup languages, s</context>
</contexts>
<marker>Ogilvie, 2004</marker>
<rawString>P. Ogilvie. 2004. Retrieval Using Structure for Question Answering. In The First Twente Data Management Workshop (TDM’04), pages 15–23.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Piez</author>
</authors>
<title>Half-steps toward LMNL.</title>
<date>2004</date>
<booktitle>In Proceedings of the fifth Conference on Extreme Markup Languages.</booktitle>
<contexts>
<context position="4539" citStr="Piez, 2004" startWordPosition="737" endWordPosition="738">representing several annotations of the same data simultaneously, even when each of the annotations is tree-like. In particular, in the case of inline markup, multiple annotation trees can be put together in a single XML document only if elements from different annotations do not cross each other’s boundaries. Several proposals have tried to circumvent this problem in various ways. Some approaches are based on splitting overlapping elements into fragments. Some use SGML with the CONCUR feature or even entirely different markup schemes (such as LMNL, the Layered Markup and Annotation Language (Piez, 2004), or GODDAGs, generalized ordered-descendant directed acyclic graphs (Sperberg-McQueen and Huitfeldt, 2000)) that allow arbitrary intersections of elements from different hierarchies. Some approaches use empty XML elements (milestones) to mark beginnings and ends of problematic elements. We refer to (DeRose, 2004) for an in-depth overview. Although many approaches solve the problem of representing possibly overlapping annotations, they often do not address the issue of accessing or querying the resulting representations. This is a serious disadvantage, since standard query languages, such as X</context>
</contexts>
<marker>Piez, 2004</marker>
<rawString>W. Piez. 2004. Half-steps toward LMNL. In Proceedings of the fifth Conference on Extreme Markup Languages.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M Sperberg-McQueen</author>
<author>C Huitfeldt</author>
</authors>
<title>GODDAG: A Data Structure for Overlapping Hierarchies.</title>
<date>2000</date>
<booktitle>In Proc. of DDEP/PODDP</booktitle>
<volume>2023</volume>
<pages>139--160</pages>
<contexts>
<context position="4646" citStr="Sperberg-McQueen and Huitfeldt, 2000" startWordPosition="746" endWordPosition="749">of the annotations is tree-like. In particular, in the case of inline markup, multiple annotation trees can be put together in a single XML document only if elements from different annotations do not cross each other’s boundaries. Several proposals have tried to circumvent this problem in various ways. Some approaches are based on splitting overlapping elements into fragments. Some use SGML with the CONCUR feature or even entirely different markup schemes (such as LMNL, the Layered Markup and Annotation Language (Piez, 2004), or GODDAGs, generalized ordered-descendant directed acyclic graphs (Sperberg-McQueen and Huitfeldt, 2000)) that allow arbitrary intersections of elements from different hierarchies. Some approaches use empty XML elements (milestones) to mark beginnings and ends of problematic elements. We refer to (DeRose, 2004) for an in-depth overview. Although many approaches solve the problem of representing possibly overlapping annotations, they often do not address the issue of accessing or querying the resulting representations. This is a serious disadvantage, since standard query languages, such as XPath and XQuery, and standard query evaluation engines cannot be used with these representations directly. </context>
</contexts>
<marker>Sperberg-McQueen, Huitfeldt, 2000</marker>
<rawString>C.M. Sperberg-McQueen and C. Huitfeldt. 2000. GODDAG: A Data Structure for Overlapping Hierarchies. In Proc. of DDEP/PODDP 2000, volume 2023 of Lecture Notes in Computer Science, pages 139–160, January.</rawString>
</citation>
<citation valid="true">
<authors>
<author>XMark</author>
</authors>
<title>XMark – An XML Benchmark Project.</title>
<date>2006</date>
<note>http://monetdb.cwi.nl/xml/.</note>
<contexts>
<context position="10864" citStr="XMark, 2006" startWordPosition="1768" endWordPosition="1769"> the span of B: in our case, the nodes A and E. In implementing the new steps, one of our design decisions was to put all stand-off annotations in a single document. For this, an XML processor is needed that is capable of handling large amounts of XML. We have decided to use MonetDB/XQuery, an XQuery implementation that consists of the Pathfinder compiler, which translates XQuery statements into a relational algebra, and the relational database MonetDB (Grust, 2002; Boncz, 2002). The implementation of the new axis steps in MonetDB/XQuery is quite efficient. When the XMark benchmark documents (XMark, 2006) are represented using stand-off notation, querying with the StandOff axis steps is interactive for document size up to 1GB. Even millions of regions are handled efficiently. The reason for the speed of the StandOff axis steps is twofold. First, they are accelerated by keeping a database index on the region attributes, which allows fast merge-algorithms to be used in their evaluation. Such merge-algorithms make a single linear scan through the index to compute each StandOff step. The second technical innovation is “looplifting.” This is a general principle in MonetDB/XQuery(Boncz et al., 2005)</context>
</contexts>
<marker>XMark, 2006</marker>
<rawString>XMark. 2006. XMark – An XML Benchmark Project. http://monetdb.cwi.nl/xml/.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>