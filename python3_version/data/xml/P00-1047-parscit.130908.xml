<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000007">
<title confidence="0.998575">
A Polynomial-Time Fragment of Dominance Constraints
</title>
<author confidence="0.943813">
Alexander Koller Kurt Mehlhorn* Joachim Niehren
</author>
<email confidence="0.582975">
koller@coli.uni-sb.de mehlhorn@mpi-sb.mpg.de niehren@ps.uni-sb.de
</email>
<affiliation confidence="0.5251535">
University of the Saarland / *Max-Planck-Institute for Computer Science
Saarbr¨ucken, Germany
</affiliation>
<sectionHeader confidence="0.978831" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998440111111111">
Dominance constraints are logical
descriptions of trees that are widely
used in computational linguistics.
Their general satisfiability problem
is known to be NP-complete. Here
we identify the natural fragment of
normal dominance constraints and
show that its satisfiability problem
is in deterministic polynomial time.
</bodyText>
<sectionHeader confidence="0.999391" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.989886142857143">
Dominance constraints are used as partial
descriptions of trees in problems through-
out computational linguistics. They have
been applied to incremental parsing (Mar-
cus et al., 1983), grammar formalisms (Vijay-
Shanker, 1992; Rambow et al., 1995; Duchier
and Thater, 1999; Perrier, 2000), discourse
(Gardent and Webber, 1998), and scope un-
derspecification (Muskens, 1995; Egg et al.,
1998).
Logical properties of dominance constraints
have been studied e.g. in (Backofen et al.,
1995), and computational properties have
been addressed in (Rogers and Vijay-Shanker,
1994; Duchier and Gardent, 1999). Here, the
two most important operations are satisfia-
bility testing – does the constraint describe a
tree? – and enumerating solutions, i.e. the
described trees. Unfortunately, even the sat-
isfiability problem has been shown to be NP-
complete (Koller et al., 1998). This has shed
doubt on their practical usefulness.
In this paper, we define normal domi-
nance constraints, a natural fragment of dom-
inance constraints whose restrictions should
be unproblematic for many applications. We
present a graph algorithm that decides sat-
isfiability of normal dominance constraints
in polynomial time. Then we show how to
use this algorithm to enumerate solutions ef-
ficiently.
An example for an application of normal
dominance constraints is scope underspecifi-
cation: Constraints as in Fig. 1 can serve
as underspecified descriptions of the semantic
readings of sentences such as (1), considered
as the structural trees of the first-order rep-
resentations. The dotted lines signify domi-
nance relations, which require the upper node
to be an ancestor of the lower one in any tree
that fits the description.
(1) Some representative of every
department in all companies saw a
sample of each product.
The sentence has 42 readings (Hobbs and
Shieber, 1987), and it is easy to imagine
how the number of readings grows exponen-
tially (or worse) in the length of the sen-
tence. Efficient enumeration of readings from
the description is a longstanding problem in
scope underspecification. Our polynomial
algorithm solves this problem. Moreover,
the investigation of graph problems that are
closely related to normal constraints allows us
to prove that many other underspecification
formalisms – e.g. Minimal Recursion Seman-
tics (Copestake et al., 1997) and Hole Seman-
tics (Bos, 1996) – have NP-hard satisfiability
problems. Our algorithm can still be used as
a preprocessing step for these approaches; in
fact, experience shows that it seems to solve
all encodings of descriptions in Hole Seman-
tics that actually occur.
</bodyText>
<figureCaption confidence="0.981758">
Fig. 1: A dominance constraint (from scope underspecification).
</figureCaption>
<figure confidence="0.997765222222222">
∀u •
→ •
comp •
u •
∀w •
→ •
∧ •
• dept •
w •
•
see •
x • y •
∃y •
∧ •
• ∧ •
spl •
y •
•
•
in •
w • u •
of •
x • w •
∃x •
∧ •
∧ •
• repr •
x •
•
∀z •
→ •
prod •
z •
•
of •
y • z •
</figure>
<sectionHeader confidence="0.978298" genericHeader="method">
2 Dominance Constraints
</sectionHeader>
<bodyText confidence="0.985397162790698">
In this section, we define the syntax and se-
mantics of dominance constraints. The vari-
ant of dominance constraints we employ de-
scribes constructor trees – ground terms over
a signature of function symbols – rather than
feature trees.
So we assume a signa-
ture E function symbols
ranged over by f, g, ...,
each of which is equipped
with an arity ar(f) ≥
0. Constants – function
symbols of arity 0 – are ranged over by a, b.
We assume that E contains at least one con-
stant and one symbol of arity at least 2.
Finally, let Vars be an infinite set of vari-
ables ranged over by X, Y, Z. The variables
will denote nodes of a constructor tree. We
will consider constructor trees as directed la-
beled graphs; for instance, the ground term
f(g(a, a)) can be seen as the graph in Fig. 2.
We define an (unlabeled) tree to be a fi-
nite directed graph (V, E). V is a finite set of
nodes ranged over by u, v, w, and E ⊆ V × V
is a set of edges denoted by e. The indegree of
each node is at most 1; each tree has exactly
one root, i.e. a node with indegree 0. We call
the nodes with outdegree 0 the leaves of the
tree.
A (finite) constructor tree τ is a pair (T, L)
consisting of a tree T = (V, E), a node labeling
L : V → E, and an edge labeling L : E →
N, such that for each node u ∈ V and each
1 ≤ k ≤ ar(L(u)), there is exactly one edge
(u, v) ∈ E with L((u, v)) = k.1 We draw
&apos;The symbol L is overloaded to serve both as a
node and an edge labeling.
constructor trees as in Fig. 2, by annotating
nodes with their labels and ordering the edges
along their labels from left to right. If τ =
((V, E), L), we write VT = V , ET = E, LT =
L. Now we are ready to define tree structures,
the models of dominance constraints:
</bodyText>
<construct confidence="0.962888153846154">
Definition 2.1. The tree structure MT of
a constructor tree τ is a first-order structure
with domain VT which provides the dominance
relation a*T and a labeling relation for each
function symbol f ∈ E.
Let u, v, v1,... vn ∈ VT be nodes of τ. The
dominance relationship ua*Tv holds iff there
is a path from u to v in ET; the labeling rela-
tionship u:fT (v1, ... , vn) holds iff u is labeled
by the n-ary symbol f and has the children
v1, ... , vn in this order; that is, LT (u) = f,
ar(f) = n, {(u, v1), ... , (u, vn)} ⊆ ET, and
LT((u, vi)) = i for all 1 ≤ i ≤ n.
</construct>
<bodyText confidence="0.999454666666667">
A dominance constraint ϕ is a conjunction
of dominance, inequality, and labeling literals
of the following form where ar(f) = n:
</bodyText>
<equation confidence="0.845729">
ϕ ::=ϕ ∧ ϕ&apos;  |Xa*Y  |X6=Y
 |X:f(X1,...,Xn)
</equation>
<bodyText confidence="0.995067083333333">
Let Var(ϕ) be the set of
variables of ϕ. A pair of
a tree structure MT and
a variable assignment α :
Var(ϕ) → VT satisfies ϕ
iff it satisfies each literal
in the obvious way. We
say that (MT, α) is a solution of ϕ in this
case; ϕ is satisfiable if it has a solution.
We usually draw dominance constraints as
constraint graphs. For instance, the con-
straint graph for X:f(X1, X2) ∧ X1a*Y ∧
</bodyText>
<figure confidence="0.987915571428572">
f •
g •
a • a •
Fig. 2: f(g(a, a))
X f
X1 X2
Y
</figure>
<figureCaption confidence="0.964629">
Fig. 3: An unsat-
isfiable constraint
</figureCaption>
<bodyText confidence="0.99701192">
X2a*Y is shown in Fig. 3. As for trees, we
annotate node labels to nodes and order tree
edges from left to right; dominance edges are
drawn dotted. The example happens to be
unsatisfiable because trees cannot branch up-
wards.
Definition 2.2. Let co be a dominance con-
straint that does not contain two labeling con-
straints for the same variable.2 Then the con-
straint graph for co is a directed labeled graph
G(co) = (Var(co), E, L). It contains a (par-
tial) node labeling L : Var(co) --� E and an
edge labeling L : E —* N U {a*}.
The sets of edges E and labels L of
the graph G(co) are defined in dependence
of the literals in co: The labeling literal
X:f(X1, ... , Xn) belongs to co iff L(X) = f
and for each 1 &lt; i &lt; n, (X, XZ) E E and
L((X, XZ)) = i. The dominance literal Xa*Y
is in co iff (X, Y ) E E and L((X,Y )) = a*.
Note that inequalities in constraints are not
represented by the corresponding constraint
graph. We define (solid) fragments of a con-
straint graph to be maximal sets of nodes that
are connected over tree edges.
</bodyText>
<sectionHeader confidence="0.996069" genericHeader="method">
3 Normal Dominance Constraints
</sectionHeader>
<bodyText confidence="0.958361827586207">
Satisfiability of dominance constraints can be
decided easily in non-deterministic polyno-
mial time; in fact, it is NP-complete (Koller
et al., 1998).
The NP-hardness
proof relies on the
fact that solid frag-
ments can “overlap”
properly. For illustra-
tion, consider the con-
straint X:f(X1, X2) ∧
Y :f(Y1,Y2) ∧ Ya*X ∧ Xa*Y1, whose con-
straint graph is shown in Fig. 4. In a solu-
tion of this constraint, either Y or Y1 must be
mapped to the same node as X; if X = Y ,
the two fragments overlap properly. In the
applications in computational linguistics, we
typically don’t want proper overlap; X should
2Every constraint can be brought into this form by
introducing auxiliary variables and expressing X=Y
as X✁*Y ∧ Y ✁*X.
never be identified with Y , only with Y1. The
subclass of dominance constraints that ex-
cludes proper overlap (and fixes some minor
inconveniences) is the class of normal domi-
nance constraints.
Definition 3.1. A dominance constraint co
is called normal iff for all variables X, Y, Z E
Var(co),
</bodyText>
<listItem confidence="0.989295333333333">
1. X =� Y in co iff both X:f(...) and
Y :g(...) in co, where f and g may be
equal (no overlap);3
2. X only appears once as a parent and
once as a child in a labeling literal (tree-
shaped fragments);
3. if Xa*Y in co, neither X:f(...) nor
Z:f(... Y ...) are (dominances go from
holes to roots);
4. if Xa*Y in co, then there are Z, f such
that Z:f(... X ...) in co (no empty frag-
ments).
</listItem>
<bodyText confidence="0.989434045454545">
Fragments of normal constraints are tree-
shaped, so they have a unique root and leaves.
We call unlabeled leaves holes. If X is a vari-
able, we can define Rϕ(X) to be the root of
the fragment containing X. Note that by
Condition 1 of the definition, the constraint
graph specifies all the inequality literals in a
normal constraint. All constraint graphs in
the rest of the paper will represent normal
constraints.
The main result of this paper, which we
prove in Section 4, is that the restriction to
normal constraints indeed makes satisfiability
polynomial:
Theorem 3.2. Satisfiability of normal domi-
nance constraints is O((k+1)3n2 log n), where
n is the number of variables in the constraint,
and k is the maximum number of dominance
edges into the same node in the constraint
graph.
In the applications, k will be small – in
scope underspecification, for instance, it is
</bodyText>
<footnote confidence="0.97714025">
3Allowing more inequality literals does not make
satisfiability harder, but the pathological case X =� X
invalidates the simple graph-theoretical characteriza-
tions below.
</footnote>
<equation confidence="0.65807">
Y f
Y1 Y2
X
f
X1 X2
</equation>
<figureCaption confidence="0.895273">
Fig. 4: Overlap
</figureCaption>
<bodyText confidence="0.9989042">
bounded by the maximum number of argu-
ments a verb can take in the language if we
disregard VP modification. So we can say
that satisfiability of the linguistically relevant
dominance constraints is O(n2 log n).
</bodyText>
<sectionHeader confidence="0.993388" genericHeader="method">
4 A Polynomial Satisfiability Test
</sectionHeader>
<bodyText confidence="0.993203909090909">
Now we derive the satisfiability algorithm
that proves Theorem 3.2 and prove it correct.
In Section 5, we embed it into an enumera-
tion algorithm. An alternative proof of The-
orem 3.2 is by reduction to a graph problem
discussed in (Althaus et al., 2000); this more
indirect approach is sketched in Section 6.
Throughout this section and the next, we
will employ the following non-deterministic
choice rule (Distr), where X, Y are different
variables.
</bodyText>
<equation confidence="0.342106666666667">
(Distr) co n Xa*Z n Ya*Z
__+ co n Xa*R,(Y) n Ya*Z
V co n Ya*R,(X) n Xa*Z
</equation>
<bodyText confidence="0.997858727272727">
In each application, we can pick one of the
disjuncts on the right-hand side. For instance,
we get Fig. 5b by choosing the second disjunct
in a rule application to Fig. 5a.
The rule is sound if the left-hand side is nor-
mal: Xa*Z n Ya*Z entails Xa*Y V Y a*X,
which entails the right-hand side disjunction
because of conditions 1, 2, 4 of normality and
X =� Y . Furthermore, it preserves normality:
If the left-hand side is normal, so are both
possible results.
</bodyText>
<construct confidence="0.746437666666667">
Definition 4.1. A normal dominance con-
straint co is in solved form iff (Distr) is not
applicable to co and G(co) is cycle-free.
</construct>
<subsectionHeader confidence="0.8397985">
Constraints in solved form are satisfiable.
4.1 Characterizing Satisfiability
</subsectionHeader>
<bodyText confidence="0.999935666666667">
In a first step, we characterize the unsatisfia-
bility of a normal constraint by the existence
of certain cycles in the undirected version of
its graph (Proposition 4.4). Recall that a cy-
cle in a graph is simple if it does not contain
the same node twice.
</bodyText>
<construct confidence="0.98161175">
Definition 4.2. A cycle in an undirected
constraint graph is called hypernormal if it
does not contain two adjacent dominance
edges that emanate from the same node.
</construct>
<figure confidence="0.9952608">
•
g •
• Y •
a • Z b •
(a) (b)
</figure>
<figureCaption confidence="0.96713725">
Fig. 5: (a) A constraint that entails Xa*Y ,
and (b) the result of trying to arrange Y
above X. The cycle in (b) is hypernormal,
the one in (a) is not.
</figureCaption>
<bodyText confidence="0.994816">
For instance, the cycle in the left-hand
graph in Fig. 5 is not hypernormal, whereas
the cycle in the right-hand one is.
</bodyText>
<construct confidence="0.658583333333333">
Lemma 4.3. A normal dominance constraint
whose undirected graph has a simple hyper-
normal cycle is unsatisfiable.
</construct>
<bodyText confidence="0.999200192307692">
Proof. Let co be a normal dominance con-
straint whose undirected graph contains a
simple hypernormal cycle. Assume first that
it contains a simple hypernormal cycle C that
is also a cycle in the directed graph. There is
at least one leaf of a fragment on C; let Y
be such a leaf. Because co is normal, Y has
a mother X via a tree edge, and X is on C
as well. That is, X must dominate Y but is
properly dominated by Y in any solution of
co, so co is unsatisfiable.
In particular, if an undirected constraint
graph has a simple hypernormal cycle C with
only one dominance edge, C is also a directed
cycle, so the constraint is unsatisfiable. Now
we can continue inductively. Let co be a con-
straint with an undirected simple hypernor-
mal cycle C of length l, and suppose we know
that all constraints with cycles of length less
than l are unsatisfiable. If C is a directed
cycle, we are done (see above); otherwise,
the edges in C must change directions some-
where. Because co is normal, this means that
there must be a node Z that has two incoming
dominance edges (X, Z), (Y, Z) which are ad-
jacent edges in C. If X and Y are in the same
</bodyText>
<figure confidence="0.995733428571429">
f •
• X
a • Z b •
g •
• Y
f •
• X
</figure>
<bodyText confidence="0.990598722222222">
fragment, co is trivially unsatisfiable. Other-
wise, let co1 and co2 be the two constraints ob-
tained from co by one application of (Distr) to
X, Y, Z. Let C1 be the sequence of edges we
obtain from C by replacing the path from X
to Rϕ(Y ) via Z by the edge (X,Rϕ(Y )). C
is hypernormal and simple, so no two dom-
inance edges in C emanate from the same
node; hence, the new edge is the only dom-
inance edge in C1 emanating from X, and
C1 is a hypernormal cycle in the undirected
graph of co1. C1 is still simple, as we have
only removed nodes. But the length of C1
is strictly less than l, so co1 is unsatisfiable
by induction hypothesis. An analogous ar-
gument shows unsatisfiability of co2. But be-
cause (Distr) is sound, this means that co is
unsatisfiable too.
</bodyText>
<construct confidence="0.794533">
Proposition 4.4. A normal dominance con-
straint is satisfiable iff its undirected con-
straint graph has no simple hypernormal cy-
cle.
</construct>
<bodyText confidence="0.999826552631579">
Proof. The direction that a normal constraint
with a simple hypernormal cycle is unsatisfi-
able is shown in Lemma 4.3.
For the converse, we first define an ordering
co1 &lt; co2 on normal dominance constraints: it
holds if both constraints have the same vari-
ables, labeling and inequality literals, and if
the reachability relation of G(co1) is a subset
of that of G(co2). If the subset inclusion is
proper, we write co1 &lt; co2. We call a con-
straint co irredundant if there is no normal
constraint co&apos; with fewer dominance literals
but co &lt; co&apos;. If co is irredundant and G(co)
is acyclic, both results of applying (Distr) to
co are strictly greater than co.
Now let co be a constraint whose undirected
graph has no simple hypernormal cycle. We
can assume without loss of generality that
co is irredundant; otherwise we make it irre-
dundant by removing dominance edges, which
does not introduce new hypernormal cycles.
If (Distr) is not applicable to co, co is in
solved form and hence satisfiable. Otherwise,
we know that both results of applying the rule
are strictly greater than co. It can be shown
that one of the results of an application of the
distribution rule contains no simple hypernor-
mal cycle. We omit this argument for lack of
space; details can be found in the proof of
Theorem 3 in (Althaus et al., 2000). Further-
more, the maximal length of a &lt; increasing
chain of constraints is bounded by n2, where
n is the number of variables. Thus, appli-
cations of (Distr) can only be iterated a fi-
nite number of times on constraints without
simple hypernormal cycles (given redundancy
elimination), and it follows by induction that
co is satisfiable.
</bodyText>
<subsectionHeader confidence="0.880337">
4.2 Testing for Simple Hypernormal
Cycles
</subsectionHeader>
<bodyText confidence="0.96083654">
We can test an undirected constraint graph
for the presence of simple hypernormal cycles
by solving a perfect weighted matching prob-
lem on an auxiliary graph A(G(co)). Perfect
weighted matching in an undirected graph
G = (V, E) with edge weights is the prob-
lem of selecting a subset E&apos; of edges such that
each node is adjacent to exactly one edge in
E&apos;, and the sum of the weights of the edges
in E&apos; is maximal.
The auxiliary graph A(G(co)) we consider is
an undirected graph with two types of edges.
For every edge e = (v, w) E G(co) we have
two nodes ev, ew in A(G(co)). The edges are
as follows:
(Type A) For every edge e in G(co) we have
the edge {ev, ew}.
(Type B) For every node v and distinct
edges e, f which are both incident to v
in G(co), we have the edge {ev, fv} if ei-
ther v is not a leaf, or if v is a leaf and
either e or f is a tree edge.
We give type A edges weight zero and type B
edges weight one. Now it can be shown (Al-
thaus et al., 2000, Lemma 2) that A(G(co))
has a perfect matching of positive weight iff
the undirected version of G(co) contains a sim-
ple hypernormal cycle. The proof is by con-
structing positive matchings from cycles, and
vice versa.
Perfect weighted matching on a graph with
n nodes and m edges can be done in time
O(nm log n) (Galil et al., 1986). The match-
ing algorithm itself is beyond the scope of
this paper; for an implementation (in C++)
see e.g. (Mehlhorn and N¨aher, 1999). Now
let’s say that k is the maximum number of
dominance edges into the same node in G(co),
then A(G(co)) has O((k + 1)n) nodes and
O((k + 1)2n) edges. This shows:
Proposition 4.5. A constraint graph can be
tested for simple hypernormal cycles in time
O((k + 1)3n2 log n), where n is the number of
variables and k is the maximum number of
dominance edges into the same node.
This completes the proof of Theorem 3.2:
We can test satisfiability of a normal con-
straint by first constructing the auxiliary
graph and then solving its weighted match-
ing problem, in the time claimed.
</bodyText>
<subsectionHeader confidence="0.999646">
4.3 Hypernormal Constraints
</subsectionHeader>
<bodyText confidence="0.878684666666667">
It is even easier to test the satisfiability of
a hypernormal dominance constraint – a nor-
mal dominance constraint in whose constraint
graph no node has two outgoing dominance
edges. A simple corollary of Prop. 4.4 for this
special case is:
Corollary 4.6. A hypernormal constraint is
satisfiable iff its undirected constraint graph is
acyclic.
This means that satisfiability of hypernor-
mal constraints can be tested in linear time
by a simple depth-first search.
</bodyText>
<sectionHeader confidence="0.965774" genericHeader="method">
5 Enumerating Solutions
</sectionHeader>
<bodyText confidence="0.9990479">
Now we embed the satisfiability algorithms
from the previous section into an algorithm
for enumerating the irredundant solved forms
of constraints. A solved form of the normal
constraint co is a normal constraint co&apos; which
is in solved form and co &lt; co&apos;, with respect to
the &lt; order from the proof of Prop. 4.4.4
Irredundant solved forms of a constraint
are very similar to its solutions: Their con-
straint graphs are tree-shaped, but may still
</bodyText>
<footnote confidence="0.837968">
4In the literature, solved forms with respect to the
NP saturation algorithms can contain additional la-
beling literals. Our notion of an irredundant solved
form corresponds to a minimal solved form there.
</footnote>
<listItem confidence="0.973862714285714">
1. Check satisfiability of co. If it is unsatis-
fiable, terminate with failure.
2. Make co irredundant.
3. If co is in solved form, terminate with suc-
cess.
4. Otherwise, apply the distribution rule
and repeat the algorithm for both results.
</listItem>
<figureCaption confidence="0.7690065">
Fig. 6: Algorithm for enumerating all irre-
dundant solved forms of a normal constraint.
</figureCaption>
<bodyText confidence="0.941144051282051">
contain dominance edges. Every solution of
a constraint is a solution of one of its irre-
dundant solved forms. However, the number
of irredundant solved forms is always finite,
whereas the number of solutions typically is
not: X:a ∧Y :b is in solved form, but each so-
lution must contain an additional node with
arbitrary label that combines X and Y into a
tree (e.g. f(a, b), g(a, b)). That is, we can ex-
tract a solution from a solved form by “adding
material” if necessary.
The main workhorse of the enumeration al-
gorithm, shown in Fig. 6, is the distribution
rule (Distr) we have introduced in Section 4.
As we have already argued, (Distr) can be ap-
plied at most n2 times. Each end result is in
solved form and irredundant. On the other
hand, distribution is an equivalence transfor-
mation, which preserves the total set of solved
forms of the constraints after the same itera-
tion. Finally, the redundancy elimination in
Step 2 can be done in time O((k+1)n2) (Aho
et al., 1972). This proves:
Theorem 5.1. The algorithm in Fig. 6 enu-
merates exactly the irredundant solved forms
of a normal dominance constraint co in time
O((k + 1)4n4N log n), where N is the number
of irredundant solved forms, n is the number
of variables, and k is the maximum number
of dominance edges into the same node.
Of course, the number of irredundant
solved forms can still be exponential in the
size of the constraint. Note that for hypernor-
mal constraints, we can replace the quadratic
satisfiability test by the linear one, and we
can skip Step 2 of the enumeration algorithm
because hypernormal constraints are always
irredundant. This improves the runtime of
enumeration to O((k + 1)n3N).
</bodyText>
<sectionHeader confidence="0.999277" genericHeader="method">
6 Reductions
</sectionHeader>
<bodyText confidence="0.998936133333334">
Instead of proving Theorem 4.4 directly as
we have done above, we can also reduce it to
a configuration problem of dominance graphs
(Althaus et al., 2000), which provides a more
general perspective on related problems as
well. Dominance graphs are unlabeled, di-
rected graphs G = (V, E U+ D) with tree edges
E and dominance edges D. Nodes with no in-
coming tree edges are called roots, and nodes
with no outgoing ones are called leaves; dom-
inance edges only go from leaves to roots. A
configuration of G is a graph G&apos; = (V, E U+ E&apos;)
such that every edge in D is realized by a path
in G&apos;. The following results are proved in (Al-
thaus et al., 2000):
</bodyText>
<listItem confidence="0.642904">
1. Configurability of dominance graphs is in
</listItem>
<bodyText confidence="0.991324490909091">
O((k + 1)3n2 log n), where k is the max-
imum number of dominance edges into
the same node.
2. If we specify a subset V &apos; ⊆ V of closed
leaves (we call the others open) and re-
quire that only open leaves can have
outgoing edges in E&apos;, the configurability
problem becomes NP-complete. (This
is shown by encoding a strongly NP-
complete partitioning problem.)
3. If we require in addition that every open
leaf has an outgoing edge in E&apos;, the prob-
lem stays NP-complete.
Satisfiability of normal dominance constraints
can be reduced to the first problem in the
list by deleting all labels from the constraint
graph. The reduction can be shown to be
correct by encoding models as configurations
and vice versa.
On the other hand, the third problem can
be reduced to the problems of whether there
is a plugging for a description in Hole Seman-
tics (Bos, 1996), or whether a given MRS de-
scription can be resolved (Copestake et al.,
1997), or whether a given normal dominance
constraints has a constructive solution.5 This
reduction is by deleting all labels and making
leaves that had nullary labels closed. This
means that (the equivalent of) deciding satis-
fiability in these approaches is NP-hard.
The crucial difference between e.g. satisfi-
ability and constructive satisfiability of nor-
mal dominance constraints is that it is pos-
sible that a solved form has no constructive
solutions. This happens e.g. in the example
from Section 5, X:a ∧ Y :b. The constraint,
which is in solved form, is satisfiable e.g. by
the tree f(a, b); but every solution must con-
tain an additional node with a binary label,
and hence cannot be constructive.
For practical purposes, however, it can still
make sense to enumerate the irredundant
solved forms of a normal constraint even if we
are interested only in constructive solution:
It is certainly cheaper to try to find construc-
tive solutions of solved forms than of arbitrary
constraints. In fact, experience indicates that
for those constraints we really need in scope
underspecification, all solved forms do have
constructive solutions – although it is not yet
known why. This means that our enumera-
tion algorithm can in practice be used without
change to enumerate constructive solutions,
and it is straightforward to adapt it e.g. to
an enumeration algorithm for Hole Semantics.
</bodyText>
<sectionHeader confidence="0.998918" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.969376555555555">
We have investigated normal dominance con-
straints, a natural subclass of general dom-
inance constraints. We have given an
O(n2 log n) satisfiability algorithm for them
and integrated it into an algorithm that enu-
merates all irredundant solved forms in time
O(Nn4 log n), where N is the number of irre-
dundant solved forms.
5A constructive solution is one where every node
in the model is the image of a variable for which
a labeling literal is in the constraint. Informally,
this means that the solution only contains “material”
“mentioned” in the constraint.
This eliminates any doubts about the
computational practicability of dominance
constraints which were raised by the NP-
completeness result for the general language
(Koller et al., 1998) and expressed e.g. in
(Willis and Manandhar, 1999). First experi-
ments confirm the efficiency of the new algo-
rithm – it is superior to the NP algorithms
especially on larger constraints.
On the other hand, we have argued that
the problem of finding constructive solutions
even of a normal dominance constraint is NP-
complete. This result carries over to other
underspecification formalisms, such as Hole
Semantics and MRS. In practice, however, it
seems that the enumeration algorithm pre-
sented here can be adapted to those problems.
Acknowledgments. We would like to
thank Ernst Althaus, Denys Duchier, Gert
Smolka, Sven Thiel, all members of the SFB
378 project CHORUS at the University of the
Saarland, and our reviewers. This work was
supported by the DFG in the SFB 378.
</bodyText>
<sectionHeader confidence="0.999541" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999833513888889">
A. V. Aho, M. R. Garey, and J. D. Ullman. 1972.
The transitive reduction of a directed graph.
SIAM Journal of Computing, 1:131–137.
E. Althaus, D. Duchier, A. Koller, K. Mehlhorn,
J. Niehren, and S. Thiel. 2000. An ef-
ficient algorithm for the configuration
problem of dominance graphs. Submit-
ted. http://www.ps.uni-sb.de/Papers/
abstracts/dom-graph.html.
R. Backofen, J. Rogers, and K. Vijay-Shanker.
1995. A first-order axiomatization of the the-
ory of finite trees. Journal of Logic, Language,
and Information, 4:5–39.
Johan Bos. 1996. Predicate logic unplugged. In
Proceedings of the 10th Amsterdam Colloquium.
A. Copestake, D. Flickinger, and I. Sag.
1997. Minimal Recursion Semantics. An In-
troduction. Manuscript, ftp://csli-ftp.
stanford.edu/linguistics/sag/mrs.ps.gz.
Denys Duchier and Claire Gardent. 1999. A
constraint-based treatment of descriptions. In
Proceedings of IWCS-3, Tilburg.
D. Duchier and S. Thater. 1999. Parsing with
tree descriptions: a constraint-based approach.
In Proc. NLULP’99, Las Cruces, New Mexico.
M. Egg, J. Niehren, P. Ruhrberg, and F. Xu.
1998. Constraints over Lambda-Structures in
Semantic Underspecification. In Proceedings
COLING/ACL’98, Montreal.
Z. Galil, S. Micali, and H. N. Gabow. 1986. An
O(EV logV) algorithm for finding a maximal
weighted matching in general graphs. SIAM
Journal of Computing, 15:120–130.
Claire Gardent and Bonnie Webber. 1998. De-
scribing discourse semantics. In Proceedings of
the 4th TAG+ Workshop, Philadelphia.
Jerry R. Hobbs and Stuart M. Shieber. 1987.
An algorithm for generating quantifier scopings.
Computational Linguistics, 13:47–63.
A. Koller, J. Niehren, and R. Treinen. 1998. Dom-
inance constraints: Algorithms and complexity.
In Proceedings of the 3rd LACL, Grenoble. To
appear as LNCS.
M. P. Marcus, D. Hindle, and M. M. Fleck. 1983.
D-theory: Talking about talking about trees.
In Proceedings of the 21st ACL.
K. Mehlhorn and S. N¨aher. 1999. The
LEDA Platform of Combinatorial and Geomet-
ric Computing. Cambridge University Press,
Cambridge. See also http://www.mpi-sb.
mpg.de/LEDA/.
R.A. Muskens. 1995. Order-independence and
underspecification. In J. Groenendijk, editor,
Ellipsis, Underspecification, Events and More
in Dynamic Semantics. DYANA Deliverable
R.2.2.C.
Guy Perrier. 2000. From intuitionistic proof nets
to interaction grammars. In Proceedings of the
5th TAG+ Workshop, Paris.
O. Rambow, K. Vijay-Shanker, and D. Weir.
1995. D-Tree grammars. In Proceedings of the
33rd ACL, pages 151–158.
J. Rogers and K. Vijay-Shanker. 1994. Obtaining
trees from their descriptions: An application to
tree-adjoining grammars. Computational Intel-
ligence, 10:401–421.
K. Vijay-Shanker. 1992. Using descriptions of
trees in a tree adjoining grammar. Computa-
tional Linguistics, 18:481–518.
A. Willis and S. Manandhar. 1999. Two accounts
of scope availability and semantic underspecifi-
cation. In Proceedings of the 37th ACL.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.227235">
<title confidence="0.999585">A Polynomial-Time Fragment of Dominance Constraints</title>
<author confidence="0.627397">Koller Kurt Joachim Niehren kollercoli uni-sb de_mehlhornmpi-sb mpg de_niehrenps uni-sb de</author>
<affiliation confidence="0.613477">of the Saarland / for Computer Science</affiliation>
<address confidence="0.758892">Saarbr¨ucken, Germany</address>
<abstract confidence="0.9967577">Dominance constraints are logical descriptions of trees that are widely used in computational linguistics. Their general satisfiability problem is known to be NP-complete. Here we identify the natural fragment of constraints and show that its satisfiability problem is in deterministic polynomial time.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A V Aho</author>
<author>M R Garey</author>
<author>J D Ullman</author>
</authors>
<title>The transitive reduction of a directed graph.</title>
<date>1972</date>
<journal>SIAM Journal of Computing,</journal>
<pages>1--131</pages>
<contexts>
<context position="20392" citStr="Aho et al., 1972" startWordPosition="3729" endWordPosition="3732">(e.g. f(a, b), g(a, b)). That is, we can extract a solution from a solved form by “adding material” if necessary. The main workhorse of the enumeration algorithm, shown in Fig. 6, is the distribution rule (Distr) we have introduced in Section 4. As we have already argued, (Distr) can be applied at most n2 times. Each end result is in solved form and irredundant. On the other hand, distribution is an equivalence transformation, which preserves the total set of solved forms of the constraints after the same iteration. Finally, the redundancy elimination in Step 2 can be done in time O((k+1)n2) (Aho et al., 1972). This proves: Theorem 5.1. The algorithm in Fig. 6 enumerates exactly the irredundant solved forms of a normal dominance constraint co in time O((k + 1)4n4N log n), where N is the number of irredundant solved forms, n is the number of variables, and k is the maximum number of dominance edges into the same node. Of course, the number of irredundant solved forms can still be exponential in the size of the constraint. Note that for hypernormal constraints, we can replace the quadratic satisfiability test by the linear one, and we can skip Step 2 of the enumeration algorithm because hypernormal c</context>
</contexts>
<marker>Aho, Garey, Ullman, 1972</marker>
<rawString>A. V. Aho, M. R. Garey, and J. D. Ullman. 1972. The transitive reduction of a directed graph. SIAM Journal of Computing, 1:131–137.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Althaus</author>
<author>D Duchier</author>
<author>A Koller</author>
<author>K Mehlhorn</author>
<author>J Niehren</author>
<author>S Thiel</author>
</authors>
<title>An efficient algorithm for the configuration problem of dominance graphs.</title>
<date>2000</date>
<note>Submitted. http://www.ps.uni-sb.de/Papers/ abstracts/dom-graph.html.</note>
<contexts>
<context position="10403" citStr="Althaus et al., 2000" startWordPosition="1900" endWordPosition="1903">ological case X =� X invalidates the simple graph-theoretical characterizations below. Y f Y1 Y2 X f X1 X2 Fig. 4: Overlap bounded by the maximum number of arguments a verb can take in the language if we disregard VP modification. So we can say that satisfiability of the linguistically relevant dominance constraints is O(n2 log n). 4 A Polynomial Satisfiability Test Now we derive the satisfiability algorithm that proves Theorem 3.2 and prove it correct. In Section 5, we embed it into an enumeration algorithm. An alternative proof of Theorem 3.2 is by reduction to a graph problem discussed in (Althaus et al., 2000); this more indirect approach is sketched in Section 6. Throughout this section and the next, we will employ the following non-deterministic choice rule (Distr), where X, Y are different variables. (Distr) co n Xa*Z n Ya*Z __+ co n Xa*R,(Y) n Ya*Z V co n Ya*R,(X) n Xa*Z In each application, we can pick one of the disjuncts on the right-hand side. For instance, we get Fig. 5b by choosing the second disjunct in a rule application to Fig. 5a. The rule is sound if the left-hand side is normal: Xa*Z n Ya*Z entails Xa*Y V Y a*X, which entails the right-hand side disjunction because of conditions 1, </context>
<context position="15545" citStr="Althaus et al., 2000" startWordPosition="2862" endWordPosition="2865">ted graph has no simple hypernormal cycle. We can assume without loss of generality that co is irredundant; otherwise we make it irredundant by removing dominance edges, which does not introduce new hypernormal cycles. If (Distr) is not applicable to co, co is in solved form and hence satisfiable. Otherwise, we know that both results of applying the rule are strictly greater than co. It can be shown that one of the results of an application of the distribution rule contains no simple hypernormal cycle. We omit this argument for lack of space; details can be found in the proof of Theorem 3 in (Althaus et al., 2000). Furthermore, the maximal length of a &lt; increasing chain of constraints is bounded by n2, where n is the number of variables. Thus, applications of (Distr) can only be iterated a finite number of times on constraints without simple hypernormal cycles (given redundancy elimination), and it follows by induction that co is satisfiable. 4.2 Testing for Simple Hypernormal Cycles We can test an undirected constraint graph for the presence of simple hypernormal cycles by solving a perfect weighted matching problem on an auxiliary graph A(G(co)). Perfect weighted matching in an undirected graph G = (</context>
<context position="16881" citStr="Althaus et al., 2000" startWordPosition="3122" endWordPosition="3126">one edge in E&apos;, and the sum of the weights of the edges in E&apos; is maximal. The auxiliary graph A(G(co)) we consider is an undirected graph with two types of edges. For every edge e = (v, w) E G(co) we have two nodes ev, ew in A(G(co)). The edges are as follows: (Type A) For every edge e in G(co) we have the edge {ev, ew}. (Type B) For every node v and distinct edges e, f which are both incident to v in G(co), we have the edge {ev, fv} if either v is not a leaf, or if v is a leaf and either e or f is a tree edge. We give type A edges weight zero and type B edges weight one. Now it can be shown (Althaus et al., 2000, Lemma 2) that A(G(co)) has a perfect matching of positive weight iff the undirected version of G(co) contains a simple hypernormal cycle. The proof is by constructing positive matchings from cycles, and vice versa. Perfect weighted matching on a graph with n nodes and m edges can be done in time O(nm log n) (Galil et al., 1986). The matching algorithm itself is beyond the scope of this paper; for an implementation (in C++) see e.g. (Mehlhorn and N¨aher, 1999). Now let’s say that k is the maximum number of dominance edges into the same node in G(co), then A(G(co)) has O((k + 1)n) nodes and O(</context>
<context position="21253" citStr="Althaus et al., 2000" startWordPosition="3876" endWordPosition="3879">ables, and k is the maximum number of dominance edges into the same node. Of course, the number of irredundant solved forms can still be exponential in the size of the constraint. Note that for hypernormal constraints, we can replace the quadratic satisfiability test by the linear one, and we can skip Step 2 of the enumeration algorithm because hypernormal constraints are always irredundant. This improves the runtime of enumeration to O((k + 1)n3N). 6 Reductions Instead of proving Theorem 4.4 directly as we have done above, we can also reduce it to a configuration problem of dominance graphs (Althaus et al., 2000), which provides a more general perspective on related problems as well. Dominance graphs are unlabeled, directed graphs G = (V, E U+ D) with tree edges E and dominance edges D. Nodes with no incoming tree edges are called roots, and nodes with no outgoing ones are called leaves; dominance edges only go from leaves to roots. A configuration of G is a graph G&apos; = (V, E U+ E&apos;) such that every edge in D is realized by a path in G&apos;. The following results are proved in (Althaus et al., 2000): 1. Configurability of dominance graphs is in O((k + 1)3n2 log n), where k is the maximum number of dominance</context>
</contexts>
<marker>Althaus, Duchier, Koller, Mehlhorn, Niehren, Thiel, 2000</marker>
<rawString>E. Althaus, D. Duchier, A. Koller, K. Mehlhorn, J. Niehren, and S. Thiel. 2000. An efficient algorithm for the configuration problem of dominance graphs. Submitted. http://www.ps.uni-sb.de/Papers/ abstracts/dom-graph.html.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Backofen</author>
<author>J Rogers</author>
<author>K Vijay-Shanker</author>
</authors>
<title>A first-order axiomatization of the theory of finite trees.</title>
<date>1995</date>
<journal>Journal of Logic, Language, and Information,</journal>
<pages>4--5</pages>
<contexts>
<context position="1085" citStr="Backofen et al., 1995" startWordPosition="140" endWordPosition="143">atural fragment of normal dominance constraints and show that its satisfiability problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has shed doubt on their practical usefulness. In this paper, we define normal dominance constraints, a natural fragment of dominance constraints whose restrictions should be unproblematic for many applications. We pre</context>
</contexts>
<marker>Backofen, Rogers, Vijay-Shanker, 1995</marker>
<rawString>R. Backofen, J. Rogers, and K. Vijay-Shanker. 1995. A first-order axiomatization of the theory of finite trees. Journal of Logic, Language, and Information, 4:5–39.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan Bos</author>
</authors>
<title>Predicate logic unplugged.</title>
<date>1996</date>
<booktitle>In Proceedings of the 10th Amsterdam Colloquium.</booktitle>
<contexts>
<context position="2957" citStr="Bos, 1996" startWordPosition="434" endWordPosition="435">nies saw a sample of each product. The sentence has 42 readings (Hobbs and Shieber, 1987), and it is easy to imagine how the number of readings grows exponentially (or worse) in the length of the sentence. Efficient enumeration of readings from the description is a longstanding problem in scope underspecification. Our polynomial algorithm solves this problem. Moreover, the investigation of graph problems that are closely related to normal constraints allows us to prove that many other underspecification formalisms – e.g. Minimal Recursion Semantics (Copestake et al., 1997) and Hole Semantics (Bos, 1996) – have NP-hard satisfiability problems. Our algorithm can still be used as a preprocessing step for these approaches; in fact, experience shows that it seems to solve all encodings of descriptions in Hole Semantics that actually occur. Fig. 1: A dominance constraint (from scope underspecification). ∀u • → • comp • u • ∀w • → • ∧ • • dept • w • • see • x • y • ∃y • ∧ • • ∧ • spl • y • • • in • w • u • of • x • w • ∃x • ∧ • ∧ • • repr • x • • ∀z • → • prod • z • • of • y • z • 2 Dominance Constraints In this section, we define the syntax and semantics of dominance constraints. The variant of do</context>
<context position="22637" citStr="Bos, 1996" startWordPosition="4136" endWordPosition="4137">onfigurability problem becomes NP-complete. (This is shown by encoding a strongly NPcomplete partitioning problem.) 3. If we require in addition that every open leaf has an outgoing edge in E&apos;, the problem stays NP-complete. Satisfiability of normal dominance constraints can be reduced to the first problem in the list by deleting all labels from the constraint graph. The reduction can be shown to be correct by encoding models as configurations and vice versa. On the other hand, the third problem can be reduced to the problems of whether there is a plugging for a description in Hole Semantics (Bos, 1996), or whether a given MRS description can be resolved (Copestake et al., 1997), or whether a given normal dominance constraints has a constructive solution.5 This reduction is by deleting all labels and making leaves that had nullary labels closed. This means that (the equivalent of) deciding satisfiability in these approaches is NP-hard. The crucial difference between e.g. satisfiability and constructive satisfiability of normal dominance constraints is that it is possible that a solved form has no constructive solutions. This happens e.g. in the example from Section 5, X:a ∧ Y :b. The constra</context>
</contexts>
<marker>Bos, 1996</marker>
<rawString>Johan Bos. 1996. Predicate logic unplugged. In Proceedings of the 10th Amsterdam Colloquium.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Copestake</author>
<author>D Flickinger</author>
<author>I Sag</author>
</authors>
<title>Minimal Recursion Semantics. An Introduction.</title>
<date>1997</date>
<tech>Manuscript, ftp://csli-ftp. stanford.edu/linguistics/sag/mrs.ps.gz.</tech>
<contexts>
<context position="2926" citStr="Copestake et al., 1997" startWordPosition="426" endWordPosition="429">resentative of every department in all companies saw a sample of each product. The sentence has 42 readings (Hobbs and Shieber, 1987), and it is easy to imagine how the number of readings grows exponentially (or worse) in the length of the sentence. Efficient enumeration of readings from the description is a longstanding problem in scope underspecification. Our polynomial algorithm solves this problem. Moreover, the investigation of graph problems that are closely related to normal constraints allows us to prove that many other underspecification formalisms – e.g. Minimal Recursion Semantics (Copestake et al., 1997) and Hole Semantics (Bos, 1996) – have NP-hard satisfiability problems. Our algorithm can still be used as a preprocessing step for these approaches; in fact, experience shows that it seems to solve all encodings of descriptions in Hole Semantics that actually occur. Fig. 1: A dominance constraint (from scope underspecification). ∀u • → • comp • u • ∀w • → • ∧ • • dept • w • • see • x • y • ∃y • ∧ • • ∧ • spl • y • • • in • w • u • of • x • w • ∃x • ∧ • ∧ • • repr • x • • ∀z • → • prod • z • • of • y • z • 2 Dominance Constraints In this section, we define the syntax and semantics of dominance</context>
<context position="22714" citStr="Copestake et al., 1997" startWordPosition="4148" endWordPosition="4151">coding a strongly NPcomplete partitioning problem.) 3. If we require in addition that every open leaf has an outgoing edge in E&apos;, the problem stays NP-complete. Satisfiability of normal dominance constraints can be reduced to the first problem in the list by deleting all labels from the constraint graph. The reduction can be shown to be correct by encoding models as configurations and vice versa. On the other hand, the third problem can be reduced to the problems of whether there is a plugging for a description in Hole Semantics (Bos, 1996), or whether a given MRS description can be resolved (Copestake et al., 1997), or whether a given normal dominance constraints has a constructive solution.5 This reduction is by deleting all labels and making leaves that had nullary labels closed. This means that (the equivalent of) deciding satisfiability in these approaches is NP-hard. The crucial difference between e.g. satisfiability and constructive satisfiability of normal dominance constraints is that it is possible that a solved form has no constructive solutions. This happens e.g. in the example from Section 5, X:a ∧ Y :b. The constraint, which is in solved form, is satisfiable e.g. by the tree f(a, b); but ev</context>
</contexts>
<marker>Copestake, Flickinger, Sag, 1997</marker>
<rawString>A. Copestake, D. Flickinger, and I. Sag. 1997. Minimal Recursion Semantics. An Introduction. Manuscript, ftp://csli-ftp. stanford.edu/linguistics/sag/mrs.ps.gz.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Denys Duchier</author>
<author>Claire Gardent</author>
</authors>
<title>A constraint-based treatment of descriptions.</title>
<date>1999</date>
<booktitle>In Proceedings of IWCS-3,</booktitle>
<location>Tilburg.</location>
<contexts>
<context position="1198" citStr="Duchier and Gardent, 1999" startWordPosition="155" endWordPosition="158">polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has shed doubt on their practical usefulness. In this paper, we define normal dominance constraints, a natural fragment of dominance constraints whose restrictions should be unproblematic for many applications. We present a graph algorithm that decides satisfiability of normal dominance constraints in polynomial time. Then we sh</context>
</contexts>
<marker>Duchier, Gardent, 1999</marker>
<rawString>Denys Duchier and Claire Gardent. 1999. A constraint-based treatment of descriptions. In Proceedings of IWCS-3, Tilburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Duchier</author>
<author>S Thater</author>
</authors>
<title>Parsing with tree descriptions: a constraint-based approach.</title>
<date>1999</date>
<booktitle>In Proc. NLULP’99,</booktitle>
<location>Las Cruces, New Mexico.</location>
<contexts>
<context position="872" citStr="Duchier and Thater, 1999" startWordPosition="109" endWordPosition="112">en, Germany Abstract Dominance constraints are logical descriptions of trees that are widely used in computational linguistics. Their general satisfiability problem is known to be NP-complete. Here we identify the natural fragment of normal dominance constraints and show that its satisfiability problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has </context>
</contexts>
<marker>Duchier, Thater, 1999</marker>
<rawString>D. Duchier and S. Thater. 1999. Parsing with tree descriptions: a constraint-based approach. In Proc. NLULP’99, Las Cruces, New Mexico.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Egg</author>
<author>J Niehren</author>
<author>P Ruhrberg</author>
<author>F Xu</author>
</authors>
<title>Constraints over Lambda-Structures in Semantic Underspecification.</title>
<date>1998</date>
<booktitle>In Proceedings COLING/ACL’98,</booktitle>
<location>Montreal.</location>
<contexts>
<context position="990" citStr="Egg et al., 1998" startWordPosition="126" endWordPosition="129">s. Their general satisfiability problem is known to be NP-complete. Here we identify the natural fragment of normal dominance constraints and show that its satisfiability problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has shed doubt on their practical usefulness. In this paper, we define normal dominance constraints, a natural fragment of</context>
</contexts>
<marker>Egg, Niehren, Ruhrberg, Xu, 1998</marker>
<rawString>M. Egg, J. Niehren, P. Ruhrberg, and F. Xu. 1998. Constraints over Lambda-Structures in Semantic Underspecification. In Proceedings COLING/ACL’98, Montreal.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Z Galil</author>
<author>S Micali</author>
<author>H N Gabow</author>
</authors>
<title>An O(EV logV) algorithm for finding a maximal weighted matching in general graphs.</title>
<date>1986</date>
<journal>SIAM Journal of Computing,</journal>
<pages>15--120</pages>
<contexts>
<context position="17212" citStr="Galil et al., 1986" startWordPosition="3183" endWordPosition="3186">For every node v and distinct edges e, f which are both incident to v in G(co), we have the edge {ev, fv} if either v is not a leaf, or if v is a leaf and either e or f is a tree edge. We give type A edges weight zero and type B edges weight one. Now it can be shown (Althaus et al., 2000, Lemma 2) that A(G(co)) has a perfect matching of positive weight iff the undirected version of G(co) contains a simple hypernormal cycle. The proof is by constructing positive matchings from cycles, and vice versa. Perfect weighted matching on a graph with n nodes and m edges can be done in time O(nm log n) (Galil et al., 1986). The matching algorithm itself is beyond the scope of this paper; for an implementation (in C++) see e.g. (Mehlhorn and N¨aher, 1999). Now let’s say that k is the maximum number of dominance edges into the same node in G(co), then A(G(co)) has O((k + 1)n) nodes and O((k + 1)2n) edges. This shows: Proposition 4.5. A constraint graph can be tested for simple hypernormal cycles in time O((k + 1)3n2 log n), where n is the number of variables and k is the maximum number of dominance edges into the same node. This completes the proof of Theorem 3.2: We can test satisfiability of a normal constraint</context>
</contexts>
<marker>Galil, Micali, Gabow, 1986</marker>
<rawString>Z. Galil, S. Micali, and H. N. Gabow. 1986. An O(EV logV) algorithm for finding a maximal weighted matching in general graphs. SIAM Journal of Computing, 15:120–130.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Claire Gardent</author>
<author>Bonnie Webber</author>
</authors>
<title>Describing discourse semantics.</title>
<date>1998</date>
<booktitle>In Proceedings of the 4th TAG+ Workshop,</booktitle>
<location>Philadelphia.</location>
<contexts>
<context position="926" citStr="Gardent and Webber, 1998" startWordPosition="116" endWordPosition="119">l descriptions of trees that are widely used in computational linguistics. Their general satisfiability problem is known to be NP-complete. Here we identify the natural fragment of normal dominance constraints and show that its satisfiability problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has shed doubt on their practical usefulness. In this pape</context>
</contexts>
<marker>Gardent, Webber, 1998</marker>
<rawString>Claire Gardent and Bonnie Webber. 1998. Describing discourse semantics. In Proceedings of the 4th TAG+ Workshop, Philadelphia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jerry R Hobbs</author>
<author>Stuart M Shieber</author>
</authors>
<title>An algorithm for generating quantifier scopings.</title>
<date>1987</date>
<journal>Computational Linguistics,</journal>
<pages>13--47</pages>
<contexts>
<context position="2436" citStr="Hobbs and Shieber, 1987" startWordPosition="351" endWordPosition="354">this algorithm to enumerate solutions efficiently. An example for an application of normal dominance constraints is scope underspecification: Constraints as in Fig. 1 can serve as underspecified descriptions of the semantic readings of sentences such as (1), considered as the structural trees of the first-order representations. The dotted lines signify dominance relations, which require the upper node to be an ancestor of the lower one in any tree that fits the description. (1) Some representative of every department in all companies saw a sample of each product. The sentence has 42 readings (Hobbs and Shieber, 1987), and it is easy to imagine how the number of readings grows exponentially (or worse) in the length of the sentence. Efficient enumeration of readings from the description is a longstanding problem in scope underspecification. Our polynomial algorithm solves this problem. Moreover, the investigation of graph problems that are closely related to normal constraints allows us to prove that many other underspecification formalisms – e.g. Minimal Recursion Semantics (Copestake et al., 1997) and Hole Semantics (Bos, 1996) – have NP-hard satisfiability problems. Our algorithm can still be used as a p</context>
</contexts>
<marker>Hobbs, Shieber, 1987</marker>
<rawString>Jerry R. Hobbs and Stuart M. Shieber. 1987. An algorithm for generating quantifier scopings. Computational Linguistics, 13:47–63.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Koller</author>
<author>J Niehren</author>
<author>R Treinen</author>
</authors>
<title>Dominance constraints: Algorithms and complexity.</title>
<date>1998</date>
<booktitle>In Proceedings of the 3rd LACL,</booktitle>
<location>Grenoble.</location>
<note>To appear as LNCS.</note>
<contexts>
<context position="1461" citStr="Koller et al., 1998" startWordPosition="197" endWordPosition="200"> 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has shed doubt on their practical usefulness. In this paper, we define normal dominance constraints, a natural fragment of dominance constraints whose restrictions should be unproblematic for many applications. We present a graph algorithm that decides satisfiability of normal dominance constraints in polynomial time. Then we show how to use this algorithm to enumerate solutions efficiently. An example for an application of normal dominance constraints is scope underspecification: Constraints as in Fig. 1 can serve as underspecified descriptions of the semantic readings of sentences suc</context>
<context position="7579" citStr="Koller et al., 1998" startWordPosition="1396" endWordPosition="1399">n dependence of the literals in co: The labeling literal X:f(X1, ... , Xn) belongs to co iff L(X) = f and for each 1 &lt; i &lt; n, (X, XZ) E E and L((X, XZ)) = i. The dominance literal Xa*Y is in co iff (X, Y ) E E and L((X,Y )) = a*. Note that inequalities in constraints are not represented by the corresponding constraint graph. We define (solid) fragments of a constraint graph to be maximal sets of nodes that are connected over tree edges. 3 Normal Dominance Constraints Satisfiability of dominance constraints can be decided easily in non-deterministic polynomial time; in fact, it is NP-complete (Koller et al., 1998). The NP-hardness proof relies on the fact that solid fragments can “overlap” properly. For illustration, consider the constraint X:f(X1, X2) ∧ Y :f(Y1,Y2) ∧ Ya*X ∧ Xa*Y1, whose constraint graph is shown in Fig. 4. In a solution of this constraint, either Y or Y1 must be mapped to the same node as X; if X = Y , the two fragments overlap properly. In the applications in computational linguistics, we typically don’t want proper overlap; X should 2Every constraint can be brought into this form by introducing auxiliary variables and expressing X=Y as X✁*Y ∧ Y ✁*X. never be identified with Y , only</context>
<context position="24851" citStr="Koller et al., 1998" startWordPosition="4493" endWordPosition="4496">(n2 log n) satisfiability algorithm for them and integrated it into an algorithm that enumerates all irredundant solved forms in time O(Nn4 log n), where N is the number of irredundant solved forms. 5A constructive solution is one where every node in the model is the image of a variable for which a labeling literal is in the constraint. Informally, this means that the solution only contains “material” “mentioned” in the constraint. This eliminates any doubts about the computational practicability of dominance constraints which were raised by the NPcompleteness result for the general language (Koller et al., 1998) and expressed e.g. in (Willis and Manandhar, 1999). First experiments confirm the efficiency of the new algorithm – it is superior to the NP algorithms especially on larger constraints. On the other hand, we have argued that the problem of finding constructive solutions even of a normal dominance constraint is NPcomplete. This result carries over to other underspecification formalisms, such as Hole Semantics and MRS. In practice, however, it seems that the enumeration algorithm presented here can be adapted to those problems. Acknowledgments. We would like to thank Ernst Althaus, Denys Duchie</context>
</contexts>
<marker>Koller, Niehren, Treinen, 1998</marker>
<rawString>A. Koller, J. Niehren, and R. Treinen. 1998. Dominance constraints: Algorithms and complexity. In Proceedings of the 3rd LACL, Grenoble. To appear as LNCS.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M P Marcus</author>
<author>D Hindle</author>
<author>M M Fleck</author>
</authors>
<title>D-theory: Talking about talking about trees.</title>
<date>1983</date>
<booktitle>In Proceedings of the 21st ACL.</booktitle>
<contexts>
<context position="785" citStr="Marcus et al., 1983" startWordPosition="95" endWordPosition="99"> University of the Saarland / *Max-Planck-Institute for Computer Science Saarbr¨ucken, Germany Abstract Dominance constraints are logical descriptions of trees that are widely used in computational linguistics. Their general satisfiability problem is known to be NP-complete. Here we identify the natural fragment of normal dominance constraints and show that its satisfiability problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the </context>
</contexts>
<marker>Marcus, Hindle, Fleck, 1983</marker>
<rawString>M. P. Marcus, D. Hindle, and M. M. Fleck. 1983. D-theory: Talking about talking about trees. In Proceedings of the 21st ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Mehlhorn</author>
<author>S N¨aher</author>
</authors>
<date>1999</date>
<booktitle>The LEDA Platform of Combinatorial and Geometric Computing.</booktitle>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge.</location>
<note>See also http://www.mpi-sb. mpg.de/LEDA/.</note>
<marker>Mehlhorn, N¨aher, 1999</marker>
<rawString>K. Mehlhorn and S. N¨aher. 1999. The LEDA Platform of Combinatorial and Geometric Computing. Cambridge University Press, Cambridge. See also http://www.mpi-sb. mpg.de/LEDA/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R A Muskens</author>
</authors>
<title>Order-independence and underspecification.</title>
<date>1995</date>
<booktitle>Underspecification, Events and More in Dynamic Semantics. DYANA Deliverable R.2.2.C.</booktitle>
<editor>In J. Groenendijk, editor, Ellipsis,</editor>
<contexts>
<context position="971" citStr="Muskens, 1995" startWordPosition="124" endWordPosition="125">onal linguistics. Their general satisfiability problem is known to be NP-complete. Here we identify the natural fragment of normal dominance constraints and show that its satisfiability problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has shed doubt on their practical usefulness. In this paper, we define normal dominance constraints, a </context>
</contexts>
<marker>Muskens, 1995</marker>
<rawString>R.A. Muskens. 1995. Order-independence and underspecification. In J. Groenendijk, editor, Ellipsis, Underspecification, Events and More in Dynamic Semantics. DYANA Deliverable R.2.2.C.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guy Perrier</author>
</authors>
<title>From intuitionistic proof nets to interaction grammars.</title>
<date>2000</date>
<booktitle>In Proceedings of the 5th TAG+ Workshop,</booktitle>
<location>Paris.</location>
<contexts>
<context position="888" citStr="Perrier, 2000" startWordPosition="113" endWordPosition="114">ance constraints are logical descriptions of trees that are widely used in computational linguistics. Their general satisfiability problem is known to be NP-complete. Here we identify the natural fragment of normal dominance constraints and show that its satisfiability problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has shed doubt on th</context>
</contexts>
<marker>Perrier, 2000</marker>
<rawString>Guy Perrier. 2000. From intuitionistic proof nets to interaction grammars. In Proceedings of the 5th TAG+ Workshop, Paris.</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Rambow</author>
<author>K Vijay-Shanker</author>
<author>D Weir</author>
</authors>
<title>D-Tree grammars.</title>
<date>1995</date>
<booktitle>In Proceedings of the 33rd ACL,</booktitle>
<pages>151--158</pages>
<contexts>
<context position="846" citStr="Rambow et al., 1995" startWordPosition="105" endWordPosition="108">er Science Saarbr¨ucken, Germany Abstract Dominance constraints are logical descriptions of trees that are widely used in computational linguistics. Their general satisfiability problem is known to be NP-complete. Here we identify the natural fragment of normal dominance constraints and show that its satisfiability problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Kolle</context>
</contexts>
<marker>Rambow, Vijay-Shanker, Weir, 1995</marker>
<rawString>O. Rambow, K. Vijay-Shanker, and D. Weir. 1995. D-Tree grammars. In Proceedings of the 33rd ACL, pages 151–158.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Rogers</author>
<author>K Vijay-Shanker</author>
</authors>
<title>Obtaining trees from their descriptions: An application to tree-adjoining grammars.</title>
<date>1994</date>
<journal>Computational Intelligence,</journal>
<pages>10--401</pages>
<contexts>
<context position="1170" citStr="Rogers and Vijay-Shanker, 1994" startWordPosition="151" endWordPosition="154">ity problem is in deterministic polynomial time. 1 Introduction Dominance constraints are used as partial descriptions of trees in problems throughout computational linguistics. They have been applied to incremental parsing (Marcus et al., 1983), grammar formalisms (VijayShanker, 1992; Rambow et al., 1995; Duchier and Thater, 1999; Perrier, 2000), discourse (Gardent and Webber, 1998), and scope underspecification (Muskens, 1995; Egg et al., 1998). Logical properties of dominance constraints have been studied e.g. in (Backofen et al., 1995), and computational properties have been addressed in (Rogers and Vijay-Shanker, 1994; Duchier and Gardent, 1999). Here, the two most important operations are satisfiability testing – does the constraint describe a tree? – and enumerating solutions, i.e. the described trees. Unfortunately, even the satisfiability problem has been shown to be NPcomplete (Koller et al., 1998). This has shed doubt on their practical usefulness. In this paper, we define normal dominance constraints, a natural fragment of dominance constraints whose restrictions should be unproblematic for many applications. We present a graph algorithm that decides satisfiability of normal dominance constraints in</context>
</contexts>
<marker>Rogers, Vijay-Shanker, 1994</marker>
<rawString>J. Rogers and K. Vijay-Shanker. 1994. Obtaining trees from their descriptions: An application to tree-adjoining grammars. Computational Intelligence, 10:401–421.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
</authors>
<title>Using descriptions of trees in a tree adjoining grammar.</title>
<date>1992</date>
<journal>Computational Linguistics,</journal>
<pages>18--481</pages>
<marker>Vijay-Shanker, 1992</marker>
<rawString>K. Vijay-Shanker. 1992. Using descriptions of trees in a tree adjoining grammar. Computational Linguistics, 18:481–518.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Willis</author>
<author>S Manandhar</author>
</authors>
<title>Two accounts of scope availability and semantic underspecification.</title>
<date>1999</date>
<booktitle>In Proceedings of the 37th ACL.</booktitle>
<contexts>
<context position="24902" citStr="Willis and Manandhar, 1999" startWordPosition="4501" endWordPosition="4504"> and integrated it into an algorithm that enumerates all irredundant solved forms in time O(Nn4 log n), where N is the number of irredundant solved forms. 5A constructive solution is one where every node in the model is the image of a variable for which a labeling literal is in the constraint. Informally, this means that the solution only contains “material” “mentioned” in the constraint. This eliminates any doubts about the computational practicability of dominance constraints which were raised by the NPcompleteness result for the general language (Koller et al., 1998) and expressed e.g. in (Willis and Manandhar, 1999). First experiments confirm the efficiency of the new algorithm – it is superior to the NP algorithms especially on larger constraints. On the other hand, we have argued that the problem of finding constructive solutions even of a normal dominance constraint is NPcomplete. This result carries over to other underspecification formalisms, such as Hole Semantics and MRS. In practice, however, it seems that the enumeration algorithm presented here can be adapted to those problems. Acknowledgments. We would like to thank Ernst Althaus, Denys Duchier, Gert Smolka, Sven Thiel, all members of the SFB </context>
</contexts>
<marker>Willis, Manandhar, 1999</marker>
<rawString>A. Willis and S. Manandhar. 1999. Two accounts of scope availability and semantic underspecification. In Proceedings of the 37th ACL.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>