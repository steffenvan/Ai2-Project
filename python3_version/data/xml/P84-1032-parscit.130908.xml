<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000041">
<note confidence="0.494629428571428">
CONCURRENT PARSING IN PROGRAMMABLE LOGIC ARRAY (PLA-) NETS
PROBLEMS AND PROPOSALS
Helmut Schnelle
RUHR-Universitat Bochum
Sprachwissenschaftliches Institut
0-4630 Bochum 1
West-Germany
</note>
<email confidence="0.373988">
ABSTRACT
</email>
<bodyText confidence="0.945343818181818">
This contribution attempts a conceptual and
practical introduction into the principles of
wiring or constructing special machines for lan-
guage processing tasks instead of programming a
universal machine. Construction would in princi-
ple provide higher descriptive adequacy in com-
putationally based linguistics. After all, our
heads do not apply programs on stored symbol
arrays but are appropriately wired for under-
standing or producing language.
Introductory Remarks
</bodyText>
<listItem confidence="0.998413444444445">
1. For me, computational linguistics is not
primarily a technical discipline implementing
performance processes for independently defined
formal structures of linguistic competence.
Computational linguistics should be a foundatio-
nal discipline: It should be related to process-
oriented linguistics as the theory of logical
calculi is to formal linguistics (e.g. genera-
tive linguistics, Montague-grammars etc.).
2. As it stands, computational linguistics
does not yet meet the requirements for a founda-
tional discipline. Searles arguments against the
claims of artificial intelligence apply fully to
computational linguistics: Programmed solutions
of tasks may execute the task satisfactorily with-
out giving a model of its execution in the orga-
nism. Our intentional linguistic acts are caused
by and realized in complicated concurrent pro-
cesses occcurring in networks of neurons and are
experienced as spontaneous. This also applies to
special cases such as the recognition of syntac-
tic structure (parsing). These processes are not
controlled and executed by central processor
units.
3. Computational linguistics must meet the
challenge to satisfy the double criterion of des-
criptive adequacy: Adequacy in the description of
</listItem>
<bodyText confidence="0.665859333333333">
what human beings do (e.g. parsing) and adequacy
in the description of how they do it (namely by
spontaneous concurrent processes corresponding to
unconscious intuitive understanding). It must try
to meet the challenge to provide the foundations
for a descriptively and explanatorily adequate
process-oriented linguistic, even when it is clear
that the presently available conceptual means for
describing complicated concurrent processes -
mainly the elements of computer architecture -
are far less understood than programming theory
and programming technique.
</bodyText>
<listItem confidence="0.980391066666667">
4. Note: It does not stand to question that
there is any problem which, in principle, could
not be solved by programming. It is simply the
case that almost all solutions are descriptively
inadequate for representing and understanding
what goes on in human beings even where they pro-
vide an adequate representation of input - output
relations - and would thus pass Turing&apos;s test.
5. In my opinion, the main features to be rea-
lized in more adequate computational systems are
- concurrency of localized operations (in-
stead of centrally controlled sequential
processes), and
- signal processing (instead of symbol manipu-
lation).
</listItem>
<bodyText confidence="0.99384703125">
These features cannot be represented by a program
on an ordinary von Neumann machine since this
type of machine is by definition a sequential,cen-
trally controlled symbol manipulator. This does
not exclude that programs may simulate concurrent
processes. For instance, programs for testing
gate array designs are of this kind. But simu-
lating programs must clearly separate the fea-
tures they simulate from the features which are
only specific for their sequential operation.
Electronic worksheet programs (in particular
those used for planning and testing of gate arrays)
are appropriate simulators of this type since
their display on the monitor shows the network and
signal flow whereas the specifics of program exe-
cution are concealed from the user.
6. How should computational linguistics be de-
veloped to meet the challenge? I think that the
general method has already been specified by von
Neumann and Burks in their attempt to compare be-
havior and structure in computers and brains in
terms of cellular automata. They have shown in
this context that we have always two alternatives:
Solutions for tasks can be realized by programs
to be executed on an universal centrally con-
trolled (von Neumann) machine, or they can be
realized by constructing a machine. Since ordi-
nary - i.e. non-cellular-von-Neumann machines -
are sequential, realization of concurrent pro-
cesses can only be approached by constructing (or
describing the construction of such a system, e.g.
the brain).
</bodyText>
<page confidence="0.984584">
150
</page>
<bodyText confidence="0.973244428571429">
My Approach
7. In view of this, I have developed theoreti-
cal net-linguistics on the basis of neurological
insights. My primary intention was to gain in-
sights into the principles of construction and
functioning (or structure and behavior) more than
to arrive at a very detailed descriptive neuro-
logical adequacy (as e.g. in H. Gigley&apos;s ap-
proach, cp. her contribution on this conference).
8. The method which to me seemed the most
fruitful one for principled analysis is the
one applied in systematic architecture for pro-
cessor construction. In setting up idealized
architectures we should proceed in steps:
</bodyText>
<listItem confidence="0.825087195652174">
- select appropriate operational primitives,
- build basic network modules and define
their properties
- construct complex networks from modules
showing a behavior which is typical for
the field to be described.
A possible choice is the following:
- take logical operators of digital switching
networks as primitives (and show how they
are related to models of neurons),
- take AND-planes and OR-planes (the consti-
tuents of programmable array logic-PLA) to-
gether with certain simple configurations
such as shift-registers,
- show how linguistic processes (such as gene-
rators and parsers for CF grammars) could be
defined as a combination of basic modules.
9. The method is described and applied in Mead/
Conway (1980). They show how logical operators
can be realized. Their combination into a com-
binational logic module presents three types of
design problems (cp. ibid. p. 77), the first two
being simple, the third being related to our prob-
lem: &amp;quot;a complex function must be implemented for
which no direct mapping into a regular structure
is known&amp;quot; (ibid. p. 79). &amp;quot;Fortunately, there is a
way to map irregular combinational functions onto
regular structures, using the programmable logic
array (PLA) ... This technique of implementing
combinational functions has a great advantage:
functions may be significantly changed without
requiring major changes in either the design or
layout of the PLA structure. [Figure 1] illus-
trates the overall structure of a PLA. The diagram
includes the input and output registers, in order
to show how easily these are integrated into the
PLA design. The inputs stored during [clocksig-
nal] col in the input register are run vertically
through a matrix of circuit elements called the
AND plane. The AND plane generates specific logic
combinations of the inputs. The outputs of the
AND plane leave at right angles to its input and
run horizontally through another matrix called
the OR plane. The outputs of the OR plane then
run vertically and are stored in the output re-
gister during [clocksignal] &lt;p2&amp;quot; (ibid. p. 80).
</listItem>
<tableCaption confidence="0.660798">
flourÂ° 1; Overall aLructAire of the PLA
Inf. Nead/Conway, 1900, P. 814
</tableCaption>
<bodyText confidence="0.982692047619047">
&amp;quot;There is a very straightforward way to imple-
ment finite state machines in integrated systems:
we use the PLA form of combinational logic and
feedback some of the outputs to inputs ... The
circuit&apos;s structure is topologically regular, has
a reasonable topological interface as a subsystem,
and is of a shape and size which are functions of
the appropriate parameters. The function of this
circuit is determined by the &apos;programming&apos; of its
PLA logic&amp;quot; (ibid. p. 84).
10. As a first example of the application of
these methods, it has been shown in Schnelle
(forthcoming) how a complex PLA network composed
from AND-planes, OR-planes, ordinary registers,
and shift registers can be derived by a general
and formal method from any CF-grammar, such that
the network generates a sequence of control sig-
nals,triggering the production of a corresponding
terminal symbol (or of a string of terminal sym-
bols). The structure derived is a set of units,
one for each non-terminal occurring in the gram-
mar and one for each terminal symbol. Before pre-
senting the network realizing simple units of
this type, we give an informal indication of its
functioning. A unit for a nonterminal symbol oc-
curring to the left of an arrow in the CF grammar
to be realized which allows in rule alternatives
and occursat n places to the right of the rule
arrow has the form of figure 2a. A unit for a
terminal symbol - say &amp;quot;A&amp;quot; - occurring at n places
to the right of an arrow has the form of figure
2b. The &amp;quot;STORE&amp;quot; - units can be realized by OR-
planes, the &amp;quot;READ&amp;quot;-units by AND-planes. The flip-
flops (FF) are simple register units and the shift
register is a simple PLA network of well known
structure. The reader should note that the no-
tions such as &amp;quot;store&amp;quot;, &amp;quot;read&amp;quot; and &amp;quot;address&amp;quot; are
metaphorical and chosen only to indicate the func-
tioning: The boxes are not subprograms or rules
but circuits. There are neither addresses nor
acts of selection,nor storing or reading of sym-
bols.
</bodyText>
<figure confidence="0.973330909090909">
AND plane
R,â¢[ Register _s]
T 1
ON plane
Register
151
SHUT-
regihter
It
tonna
SyncIf tarn
</figure>
<figureCaption confidence="0.998138">
Figure 2a: G000ral form of a ooit realizing
a op.-terminal symbol of flee grammar
</figureCaption>
<bodyText confidence="0.990956590909091">
Flgo.re 2h, Cenerml fn., of a Â°nit realizing
n Lerminat nyMbfli el the orammar
Ithe Symtell &amp;quot;4. In this ,ASO
11. The complex networks definable by a general
method from CF-grammar specifications, as shown
in Schnelle (forthcoming) can be easily extended
into a predictive top-to-bottom, left-to-right
parser such that the prediction paths are gener-
ated in parallel by concurrent signal flows (as
will be illustrated below). At the realizations of
a terminal symbol a TEST PREDICTION &amp;quot;a&amp;quot; is in-
cluded, as indicated in figure 2b. However, a
detailed analysis of this system shows that in
more complicated cases the signal flow cannot be
properly organized by a schematic adaptation of
the system realized for production. I am there-
fore planning to investigate realizations of con-
current signal flows for bottom-up processors. At
the moment I do not yet have a general method for
specifying bottom-up processors in terms of net-
works.
12. In order to illustrate concurrent infor-
mation flow during parsing let me present two
simple examples. The first example provides de-
tails by an extremely simple wiring diagram of
figure 3, which realizes the &amp;quot;grammar&amp;quot; S AS,
S -â  AC.
Flgore 3
It illustrates the general type of wiring where
the hyphenated units must be multiplied into n
storage units, whenever there are n inputs. The
box for PRINT &amp;quot;a&amp;quot; or TEST PREDICTION &amp;quot;a&amp;quot; shows a
multiplicity of 2 storage units marked 3 and 4 for
the case of two input and output lines. For the
details of PLA construction of such networks the
reader is referred to Schnelle (forthcoming).
13. We shall now illustrate the signal flow
occurring in a PLA realization of the grammar:
S + Ac, 5 + aD, A + a, A + ab, D + bd, D d. A
grammatically perspicuous topology of the network
is shown in figure 4. The double lines are wires,
the boxes have an internal structure as explained
above. For a parse of the string abd the wiring
realizes the following concurrent signal flow on
</bodyText>
<figure confidence="0.976141033333333">
noon &amp;quot;address&apos;
of return line
TEST
Nu:nu:Tim -nâ¢
Isymhol I
+
emnhetinn
pnIAInflon
â¢ prentotion
rot In
srn.r. &apos;address.
of rolorn Ilne
1
prin., activation
STORE &apos;address.
of return line
PP
READ
lopot specifier
selecting 11010
role &apos;address.
Ii
miew
Sperif le,
STORE
output specifier
as parse
indlea-
001 dole:Wing on
inpot
</figure>
<page confidence="0.908393">
152
</page>
<bodyText confidence="0.877775928571429">
the wires corresponding to the numbers indicated
in figure 4.
Grammar: S Â» A c
S - a D
A - a
A Â» a b
D Â» b d
D d
Since the only possible generation derivable from
this parse information is Si, D1, the structure
is [a[bd]D]s whereas the informations Al and A2
remain unused, i.e. non confirmed, by the com-
plete parse.
14. We have presented only very simple illus-
trations of concurrent information flow and their
realizations in integrated circuits. Much more
research will be necessary. Our contribution
tried to illustrate (together with Schnelle forth-
coming) how current VLSI design methods - and
simulation programs used in the context of such
designs - could be applied. It is hoped that
LInit1.11
several years of experience with designs of such
-614T types may lead to fruitful foundational concepts
for process-oriented linguistics, which solves
its tasks by constructing descriptively adequate
special machines instead of programming universal
von Neumann machines.
</bodyText>
<sectionHeader confidence="0.917839" genericHeader="abstract">
References
</sectionHeader>
<reference confidence="0.993972571428571">
C. Mead, L. Conway (1980) Introduction to VLSI
Design, Reading, Mass.: Addison Wesley
H. Schnelle (forthcoming) Array logic for syn-
tactic production processors - An exercise
in structured net-linguistics -.
In: Ec. Hajicova, J. Mey (eds.),
Petr. Sgall Festschrift
</reference>
<figureCaption confidence="0.900504">
Figure 4
</figureCaption>
<table confidence="0.9395505">
(Whenever a signal reaches y we a TEST PREDICTION &amp;quot;x&amp;quot;
box via a line numbered write y(x); &amp;quot;Ai&amp;quot;
means: the i-th rule-alternative at A).
Time Active lines Parse information
1 , 2(a)
3(a), 4(a)
Read &amp;quot;a&amp;quot;
5, 6(b), 7 Al
10(c), 8(b), 14(d)
Read &amp;quot;b&amp;quot;
9, 12(d) A2
10(c)
13 D1
16 S2
</table>
<page confidence="0.843557">
3
153
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.212042">
<title confidence="0.996263">CONCURRENT PARSING IN PROGRAMMABLE LOGIC ARRAY (PLA-) NETS PROBLEMS AND PROPOSALS</title>
<author confidence="0.986937">Helmut Schnelle</author>
<affiliation confidence="0.9384425">RUHR-Universitat Bochum Sprachwissenschaftliches Institut</affiliation>
<address confidence="0.962217">0-4630 Bochum 1</address>
<author confidence="0.384562">West-Germany</author>
<abstract confidence="0.899966"></abstract>
<note confidence="0.708757">This contribution attempts a conceptual and</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>C Mead</author>
<author>L Conway</author>
</authors>
<title>Introduction to VLSI Design,</title>
<date>1980</date>
<publisher>Addison Wesley</publisher>
<location>Reading, Mass.:</location>
<marker>Mead, Conway, 1980</marker>
<rawString>C. Mead, L. Conway (1980) Introduction to VLSI Design, Reading, Mass.: Addison Wesley</rawString>
</citation>
<citation valid="false">
<authors>
<author>H Schnelle</author>
</authors>
<title>(forthcoming) Array logic for syntactic production processors - An exercise in structured net-linguistics -.</title>
<marker>Schnelle, </marker>
<rawString>H. Schnelle (forthcoming) Array logic for syntactic production processors - An exercise in structured net-linguistics -.</rawString>
</citation>
<citation valid="false">
<editor>In: Ec. Hajicova, J. Mey (eds.), Petr.</editor>
<publisher>Sgall Festschrift</publisher>
<marker></marker>
<rawString>In: Ec. Hajicova, J. Mey (eds.), Petr. Sgall Festschrift</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>