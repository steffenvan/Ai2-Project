<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.6501928">
A PREFERENCE MECHANISM
BASED ON MULTIPLE CRITERIA RESOLUTION
Yannis Dologlou
Eurotra-GR, Margari 22
11525 Athens, Greece.
</note>
<author confidence="0.625972">
Giovanni Malnati
</author>
<affiliation confidence="0.361457">
Eurotra-IT, Gruppo Dima,
</affiliation>
<address confidence="0.799054333333333">
Corso F.Turati 11/C
10128 Torino, Italy.
Patrizia Paggio
</address>
<email confidence="0.92044">
patrizia@eurotra.uucp
</email>
<affiliation confidence="0.979245">
Eurotra-DK, University of Copenhagen,
</affiliation>
<address confidence="0.773886">
Njalsgade 80
2300 Kbh S, Denmark.
</address>
<email confidence="0.405854">
ABSTRACT
</email>
<bodyText confidence="0.999773857142857">
This paper presents an experimental preference tool
designed, implemented and tested in the Eurotra
project. The mechanism is based on preference rules
which can either compare subtrees pairwise or single
out a subtree on the basis of some specified con-
straints. Scoring permits combining the effects of
various preference rules.
</bodyText>
<sectionHeader confidence="0.503956" genericHeader="method">
THE PROBLEM
</sectionHeader>
<bodyText confidence="0.992160727272727">
The aim of a translation system is to produce the
correct translation of a given text. In Eurotra, where
translation is split up into a series of mappings
among intermediate levels of representation, pro-
visional overgeneration is a necessary evil [Raw et
at. 1989]: the closer to surface structure a level of
representation is, the harder it becomes for the parser
to produce an unambiguous result. In the Eurotra
framework, the E-framework [Bech et at. 1989],
overgeneration can be partially controlled by filters
which describe parse trees that are to be discarded as
not obeying some specified constraints. Thus, filters
apply to individual objects and are meant to delete
inherently wrong representations. But there are cases
where the grammar produces multiple analyses of a
given input because the input is ambiguous with re-
spect to a given level. All of these analyses are in
some sense correct, although further processing
might discard some of them. Our aim was to design
a preference mechanism able to choose the best
among a set of acceptable candidates.
OUR VIEW OF PREFERENCE
Preference has been defined in a number of ways,
e.g. as a gradual fulfilment of semantic constraints
Wass and Wilks1983], as a lexically induced syntac-
tic bias [Ford et at. 1982], as a parsing strategy inde-
pendent of linguistic criteria [Frazier and Fodor
1978, Pereira 1985], and as a system based on
multiple judgements reflecting the complexity of psy-
chological processes [Jackendoff 1985].
Our approach, which is greatly indebted to Jacken-
doff&apos;s theory of preference rule systems, is based on
the following assumptions:
- Preference is a method which, on the basis of
some preference criteria, chooses the best one
among a set of possible interpretations
which are all correct according to the
grammar.
- Each preference criterion is expressed as a set
of statements, where a statement is either a
binary relation between competing interpreta-
tions or the description of a subtree which
satisfies some defined criteria.
- There is no unique preference criterion accor-
ding to which the best interpretation can be
chosen: preference criteria are multiple, and
possibly contradictory. A preference mecha-
nism must be able to accommodate such multi-
plicity.
- Preference criteria are heuristic principles
which may vary according to the language and
the text type: therefore, they are not hardwired
in the system.
In the previous Eurotra preference mechanism
[Petitpierre et at. 1987], preference statements
were only defined as binary relations between
subtrees. Since comparing subtrees is a rather
expensive operation from the computational point
of view, and since a number of preference cnteria
- e.g. the principle of right-low attachment -
cannot be expressed in binary terms, we have
allowed both binary and non-binary preference
rules. The application algorithm of p-rules and
the way in which various preference criteria are
combined are also new with respect to the pre-
vious system.
</bodyText>
<sectionHeader confidence="0.891668" genericHeader="method">
THE MECHANISM PROPOSED
</sectionHeader>
<bodyText confidence="0.999952125">
The mechanism proposed is an independent
module which is activated on the results output
by the parser. The module consists of preference
rules of two possible kinds, which we call binary
and unary rules.
A binary rule establishes a preference relation
between two corresponding (sub)trees (from here
on, (sub)tree will be used in the sense of a repre-
sentation of an interpretation or a part of this
representation). A unary rule picks up a (sub)tree
on the basis of its own properties, thus implicitly
establishing a preference relation between this
(sub)tree and all its competitors. Each preference
rule - be it binary or unary - is associated with a
score, which is assigned to the preferred (sub)tree
as a result of the application of the rule.
</bodyText>
<equation confidence="0.484199">
- 281 -
</equation>
<bodyText confidence="0.982560966666667">
Correspondences: The notion of correspondence
between (sub)trees is central to preference rules of
the binary type. A number of defmitions of this con-
cept can be envisaged:
i. The correspondence between two (sub)trees is
established by the user, who states that some
specified contraints hold between parts of them.
ii. A correspondence is only assumed to exist
between full parse trees, and the correspondence
between two subtrees is defined by specifying
their derivation paths from the top node.
The system produces a parse graph which will be
a synthesis of the various parse trees, where parts
common to several trees are shared; two subtrees
correspond if they share a given part.
The most challenging solution is we have not
adopted it because of computational problems con-
nected with the introduction of structure-sharing into
the E-framework. The easiest solution to implement
is (ii): this is the approach chosen in the earlier
Eurotra preference tool. The solution we have
adopted is (i), which unlike (ii) allows the user to
state constraints on subtrees, regardless of their
position in the complete parse tree. In other words,
our system allows for very local and modular state-
ments.
Preference Rules: The user expresses preference
statements through a set of binary or unary preferen-
ce rules (p-rules).
The syntax for a binary rule is
</bodyText>
<equation confidence="0.465812">
RuleName ( Score )=
LHS &gt;= RHS
</equation>
<bodyText confidence="0.974115625">
where
Annotations.
where:
- RuleName is a unique identifier used for trace
purposes;
- Score is a positive integer which indicates how
strong the relation of preference is;
- LI-IS and RHS (the left-hand side and the right-
hand side of the rule) are the descriptions of the
two (sub)trees to be compared;
- â€º.= is a reference sign that indicates which of the
two (sub)trees is to be preferred;
- Annotations is a (possibly empty) set of constraints
which must hold between the constituents of the
two (sub)trees to be compared.
The syntax for a unary rule is
</bodyText>
<subsectionHeader confidence="0.649091">
RuleName (Score )=
</subsectionHeader>
<bodyText confidence="0.994203537037037">
where
Annotations.
where:
- LHS is the description of the (sub)tree to be
singled out (which we call the left-hand side to
stress the parallelism with binary rules);
- the other parts are as defmed for binary rules.
LIIS and RHS are (sub)tree descriptions of any
depth and relevant parts of them may be labelled
with Prolog variables, called indexes. These labels
are used to express simple or complex corresponden-
ce constraints in the annotation part of the rule. A
simple constraint states for instance that two
indexed subtrees must or must not have the same
structure. Simple constraints may be combined
with the operators &apos;and&apos; and &apos;or&apos; to form complex
constraints. Scores, which have the function of
driving p-rule interaction, are positive integers.
They may be either assigned by the user or
generated automatically on statistical grounds, as
explained below. Examples of both rule types are
given in the appendix.
General Algorithm: All the parse trees have
an initial null score before preference rules are
applied. For each pair of trees, if they contain
two subtrees respectively matching the LHS and
the RHS of a binary p-rule, while the constraints
in the annotation part of the rule hold, the rule
applies. Similarly, for each parse tree, if a subtree
matching the LHS of a unary b-rule can be
extracted, and all the constraints expressed in the
rule are satisfied, the rule applies. In both cases,
as a result of p-rule application, the score of the
object that contains the preferred subtree is
incremented by the score of the rule.
When all binary rules have been tried out on
all the possible pairs of trees in all the possible
ways, and all unary rules have been fired on all
the single trees, results are collected. All parse
trees are partitioned into equivalence classes
according to their score. Note that trees to which
no preference rule has applied will belong to the
lowest-ranking class: this is motivated by the
assumption that unary rules prefer single trees
over all the other members of the set of compe-
ting trees.
After this partial order has been established, all
the trees but those belonging to the highest-
ranking class are discarded.
A possible enhancement to the expressive
power of p-rules would be the introduction of
negative scores, for cases where a p-rule
describes an acceptable but not totally correct
subtree.
</bodyText>
<sectionHeader confidence="0.826517" genericHeader="method">
AN EXAMPLE
</sectionHeader>
<bodyText confidence="0.928573555555556">
The following set of p-rules are based on some
of the criteria for the treatment of PP attachment
described in [Hirst 1987). Note that p-rule scores
have been assigned manually, due to the small
number of rules.
pmod (8) = (catx--pp, sfâ€”=mod) [P1: (cat=p),
NP1: (cat;--np))
&gt;= [cat=pp, sf=mod) [P2: (cat=p),
NP2: (cat---np))
where P1=P2, NP1=NP2.
In the rule above, 0 delimit a node in the tree,
which in the E-framework is a set of attribute
value pairs, following a given node enclose its
daughters, = means equal to and â€¢â€¢.= means
different from. The rule prefers a valency-bound
PP to a PP modifier. This is a very strong cri-
terion, which can only be overridden by semantic
principles: therefore, the rule has a high score.
</bodyText>
<equation confidence="0.78346325">
- 282 -
plow (2) = (cat=n11 [ (cat=n),
## cat=pp ,
*()
</equation>
<bodyText confidence="0.974054">
The rule gives 2 points to an attachment where a
PP is placed under an NP node. Note that *0 means
any number of (sub)trees, without any restriction,
and ## in front of a subtree means that this subtree
is weakly dominated by the top node. Assuming the
following two structures
</bodyText>
<figure confidence="0.568268111111111">
NP
NP PP
NP
1
NP
1
PP
&apos;plow&apos; will only apply once to (a), but it would fire
twice on (b), which will in the end collect the
</figure>
<figureCaption confidence="0.4578005">
highest score. The rule implements in fact the
pnnciple of right-low attachment.
</figureCaption>
<bodyText confidence="0.8068324">
pcoord (5) = (cat=?)
[Cl: ( sf=conjunct) ,
C2: (sf=conjunct)]
where width(C1) = width(C2).
The rule above assigns 5 points to a coordinated
structure where the two conjuncts have the same
number of terminals. Note that constraints are stated
between nodes of two competing (sub)trees and not,
as it was the case in &apos;pmod&apos;, between nodes
belonging to the same (sub)tree.
</bodyText>
<figure confidence="0.985913857142857">
Objl:
S
I
v subj obj/plow
diskutere np np
I I
n n subj
Kommissionen forslag np
I
P corâ€”r-TP
fra np
I
n
virksomhed
</figure>
<bodyText confidence="0.980152307692308">
To see how these p-rules work, we can apply
them to the set of objects resulting from the
analysis of the following three Danish sentences:
(1) &amp;quot;Kommissionen diskuterede et forslag fra
virlcsomhedeme om effektiv losning af
problememe&amp;quot;.
(EN: The commission discussed a proposal by
the companies for the effective solution of the
problems).
(2) &amp;quot;Virlcsomhedeme deltager i programmet
for denne periode&amp;quot;.
(EN: The companies take part in the pro-
gramme for this period).
</bodyText>
<listItem confidence="0.711618333333333">
(3) &amp;quot;Kommissionen kontrollerer finansieringen
af virksomhederne og sarnarbeidet med in-
dustrien&amp;quot;.
</listItem>
<bodyText confidence="0.996864833333333">
(EN: The commission controls the financing of
the firms and the cooperation with industry).
In all three cases the preference tool yields the
correct result. The three preferred objects are
shown below: p-rules that have applied are
indicated on the top nodes of the relevant sub-
trees.
In accordance with the Eurotra linguistic
model, object 1 and 2 below are dependency
structures with a lowered governor, where the
complements have been ordered in a canonical
way and a series of phenomena (determinateness,
verbal inflection, prepositions) have been featuri-
sed. What interests us here, however, is the way
PPs have been analysed. Thus, note that for all
the PPs in sentence (1), the system has been able
to find valency-bound syntactic functions (either
subject or prepositional object).
</bodyText>
<figure confidence="0.98922768627451">
pobj/pmod
pp
mod
ap
p caigr adj
af np effektiv
problem
om comp
losning np/plow
pobj
pp/pmod
- 283 -
Obj2:
s
I
v subj pobj
deltage np pp
I I
n
virksomhed Y
compl
np/plow
handlingsprogram
for
mod
PP
compl
cardp
card
1990
Obj3:
subj
np
Kommissionen
obj/pcoord
np
pp
pobj/pmcd
/ \
/ \
kontrollere
conjunct
np/plow
finansiering
conjunct
np/plow
pp
pobj/pmcd samarbejde
/ \
/ \
af virksomheder med industri
</figure>
<bodyText confidence="0.9968909">
Consequently, modifier interpretations have been
disprefened. In the case of sentence (2) instead, the
final PP has been analysed as a modifier, and the
correct attachment has been found by the pnnciple of
right-low attachment. Note also that, still in (2), the
verb &amp;quot;deltage&amp;quot; requires an obligatory prepositional
object, and therefore this syntactic function has not
been established by preference. Finally, in (3) the
correct attachment of the two PPs has been found
due to the combined effect of all three rules.
</bodyText>
<sectionHeader confidence="0.769116" genericHeader="method">
SCORING
</sectionHeader>
<bodyText confidence="0.9999076">
Scoring is an important novelty proposed in our
system to replace the rule ordering strategy in use in
the previous Eurotra preference tool. Whereas
arbitrary decisions were made in the earlier tool in
cases of contradictory preference criteria and
multiple matches between a rule and two (sub)trees,
scoring permits us to control the interaction of pre-
ference rules in a declarative way. However, there is
a tradeoff between the declarativeness permitted by
a scoring system and the difficulty of finding the
right scores for a p-rule set of nontrivial coverage.
In this section we show how optimum p-rule scores
can be derived automatically. Starting from a set of
p-rules and an initial set of objects ordered by the
user, the system tries to compute optimum values for
the p-rules in the set, on the assumption that they
will hold for different sets of objects.
If pi (1=1,...n) stands for the score of the i-th
p-rule, then the j-th object is assigned a score S;
given by the following expression:
</bodyText>
<listItem confidence="0.422435">
(1) Si = p1a13 + p2a24 + + pâ€žaâ€ž3 (j=1,...N)
</listItem>
<bodyText confidence="0.969053476190476">
where n is the number of existing p-rules, aii is a
constant equal to the number of times p-rule i has
applied to object j and N is the number of
existing objects. In other words, S; stands for the
final score totalled by a given object after all
possible p-rules have applied to it as many times
as possible.
To compute optimum scores, an arbitrary high
score is assigned to the best object(s) in the
initial training corpus and a much lower one to
the rest. The set of equations (1) is transformed
then into an overdetermined system of N equa-
tions with n unknowns - the p-rule scores - where
N can be greater than n. The set of equations (1)
can be further decomposed and reformulated as
follows:
Find xi (i=1,...n+1) such that,
(2) xiaij + x2a2; + ... + xaaâ€ž.; - xn.,S; = 0
By comparing the set of equations (2) against
the set (1), the following relation between the
values of xi and p-rule scores is deduced:
</bodyText>
<listItem confidence="0.962865">
(3) Pi = xi/x(a+i)
</listItem>
<bodyText confidence="0.962826272727273">
Therefore, we claim that problems (1) and (2)
are equivalent. Now, problem (2) has no exact
solution whenever N is greater than n. However,
it can be solved by converting it into a constraint
optimization problem whereby optimum scores
for p.-rules will emerge. Thus the set of equations
2) is rearranged by introducing the errors ei
-=1,...N) and by imposing that the sum of all
these errors is minimum. More precisely problem
(2) takes now the following form:
Find xi (i=1,...n+1) such that
</bodyText>
<equation confidence="0.8994296">
+ e22 + + eN2 ---&gt; minimum
- 284 -
subject to the constraints
(4) ei = ;al; + x2a2; + + -
X12 + X22 +â€”â€¢ X(n+1)2 1
</equation>
<bodyText confidence="0.999929283333333">
In the literature (cf. [Key &amp; Marple 19811 and
[Kumaresan &amp; Tufts 1982]), one of the most
efficient techniques offered to the solution of the
constraint optimization problem (4) is called Singular
Value Decomposition (SVD). SVD provides an
optimum set of ; (i=1,...n+1) which guarantees
minimum accumulated squared error. Thus the values
of the scores A (i=1,...n) are computed in a straight-
forward way from the xi (i=1,...n+1) using equation
(3).
Note that SVD is a non-linear optimization tech-
nique which provides the best set of parameters for
a given training corpus. Therefore, it is important to
apply it to a linguistically balanced corpus. More-
over, for the produced result to be reliable, the
existing number of equations N should be at least
five to ten times bigger than the existing number of
p-rules n.
Although SVD provides an optimum set of p-rule
scores, there is no guarantee that these scores are all
positive. However, since p-rules express positive
selection criteria, p-rule scores must always be
positive: the following paragraph proposes an
iterative algorithm which computes p-rule scores
guaranteeing their positiveness at the same time.
The idea is that the set of SVD parameters xi
(i=1,...n+1) and the N sets of parameters in the
training corpus are uncorrelated sets, i.e. they do not
belong to the same space section. If the SVD solu-
tion set ; (i=1,...n+1) is also included in the training
set, the new SVD solution yi (i=1,...n+1) of the
augmented training corpus will be uncorrelated to all
the sets in the corpus. Consequently, yi
will also be uncorrelated to xi (1=1,...n+1). This
means that not all the signs of yi (i=1,...n+1) will be
identical to the signs of xi (i=1,...n+1). If the y
components are all positive or all negative, the
algorithm ends successfully and positive p-rule
scores are computed via equation (3). In all other
cases, the set of yi (i=1,...n+1) is also incorporated in
the training corpus and a new SVD solution zi
(i=1,...n+1) is computed which is uncorrelated to
both xi and yi (i=1,...n+1). The algorithm continues
in a similar way by checking whether the signs of zi
(i=1,...n+1) are all the same or not: in the first case
the algorithm ends successfully; in the second case
the set of ; (i=1,...n+1) is included in the corpus and
a new SVD solution is computed.
The algorithm will eventually come up with the
desirable set of parameters when all alternatives have
been exhausted throughout the preceding iterations.
The time of convergence varies relative to the
number of parameters or, equivalently, to the number
of p-rules, as well as the size of the training corpus.
More precisely, the larger the number of p-rules, the
longer it takes for the algorithm to converge. On the
other hand, the larger the training corpus, the faster
the time of convergence. The obtained solution is
optimum given the imposed constraint that all p-rule
scores are positive.
</bodyText>
<sectionHeader confidence="0.974404" genericHeader="method">
CONCLUSION
</sectionHeader>
<bodyText confidence="0.999996918367347">
It seems to us that two basic tendencies can be
observed in the literature with respect to the
treatment of preference. On the one hand, pre-
ference is conceived of as an essentially linguistic
or psycholinguistic principle or sum of principles
(cf. the LFG approach in [Ford et al. 1982]);
although it has important consequences for the
parser, preference is not directly connected to a
specific parsing method. On the other hand,
preference has been studied in the context of
parsing: in such treatments (cf. [Pereira 19851),
preference amounts to a deterministic procedure,
which is not necessarily motivated by linguistic
evidence. In our approach preference is
established on the basis of rules defined by the
user and applied by a post-processor. We have in
fact focussed on a method to express lin-
guistically meaningful preference statements
rather than on a particular parsing strategy. We
are aware of the fact that, in a system where
parsing is seen as a constraint satisfaction
problem, preference criteria of the type we are
interested in can be treated on the same level as
other linguistic constraints and used to resolve
ambiguity at parse time (cf. [Van Henteryck
1989]). However, such an approach would have
meant too radical a change to the underlying
Eurotra formalism.
In accordance with the general practice in
Eurotra, our preference mechanism does not
plead allegiance to any specific linguistic theory.
We have, however, been influenced by a theoreti-
cal framework, namely the theory of preference
rule systems described in [Jackendoff 1985].
According to this framework, preference can only
been decided on the basis of a number of criteria,
and a preference mechanism is not based on a
dichotomy between correct and wrong results, but
on a scale of degrees of acceptability. One of our
main concerns in designing the system, in fact,
has been allowing various and even contradictory
criteria to be combined in a declarative fashion.
The use of scoring is in this sense crucial.
The system has been implemented and suc-
cessfully tested on real input which showed
overgeneration due to PP and adverbial attach-
ment, coordination, pronominal resolution and
lexical ambiguity. Some testing results are given
in the appendix.
</bodyText>
<sectionHeader confidence="0.991593" genericHeader="evaluation">
ACKNOWLEDGEMENTS
</sectionHeader>
<bodyText confidence="0.926774666666667">
This work has been carried out by a group
consisting of Paul Bennett (Eurotra-GB, Umist),
Dieter Maas (EurotraDE, Saarbruecken), Juan
Carlos Ruiz (Eurotra-ES, Barcellona) and the
authors of the present paper.
We thank Bolette Pedersen (Eurotra-DK) who
contributed to the formulation of the p-grammar
for Danish.
- 285 -
</bodyText>
<sectionHeader confidence="0.9655" genericHeader="conclusions">
APPENDIX
</sectionHeader>
<figureCaption confidence="0.67125">
Fig. 1.
</figureCaption>
<bodyText confidence="0.941253571428571">
Figure 1 shows the results obtained in a test carried
out by Eurotra-IT (Dima group). The linguistic
phenomena handled by p-rules included syntactic
completeness check, ambiguity of semantic role
assignment for arguments, ambiguity of semantic
labelling for modifiers. The experiment was
performed on a Sparkstation 1(16 MB core memory)
</bodyText>
<sectionHeader confidence="0.999502" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.910836054545455">
A.Bech, B.Maegaard &amp; A.Nygaard (1990), &amp;quot;The
EUROTRA MT Formalism&amp;quot;, forthcoming in
Machine Translation, ed. Sergei Nirenburg.
D.Fass &amp; Y.Wilks (1983), &amp;quot;Preference Semantics,
Ill-Formedness, and Metaphor&amp;quot;, in America! Journal
of Computational Linguistics, vol. 9, no.3-4, July--
bee.
M.Ford et al. (1982), &amp;quot;A Competence-Based Theory
of Syntactic Closure&amp;quot;, in J.Bresnan ed., The Mental
Representation of Grammatical Relations, The MIT
Press: Cambridge Mass.
L.Frazier &amp; J.D.Fodor (1978), &amp;quot;The Sausage
Machine: A New Two-Stage Parsing Model&amp;quot;, in
Cognition, vol.6.
Jackendoff (1985), Semantics and Cognition, Mit
Press: Cambridge, Mass.
G.Hirst (1987), Semantic Interpretation and the
Resolution of Ambiguity, Cambridge University
Press: Cambridge.
X.Huang (1988), &amp;quot;Semantic Analysis in XTRA, An
English-Chinese Machine Translation System&amp;quot;, in
Computers and Translation, vol.3, no.2.
S.M.Key &amp; S.L.Marple (1981), &amp;quot;Spectrum
Analysis - A Modern Perspective&amp;quot;, in Pro-
ceedings of the IEEE, Vol. 69.
R.Kumaresan &amp; D.Tufts (1982), &amp;quot;Singular Value
Decomposition and improved Frequency Estima-
tion Using Linear Prediction&amp;quot;, IEEE ASS,P
vol.30, no. 4.
G.Malnati &amp; P.Paggio (1990), &amp;quot;The Eurotra User
Language&amp;quot;, forthcoming in Machine Translation
and Natural Language Processing, vol.2, CEC,
Luxembourg.
P.Paggio (1988), &amp;quot;The Concept of Preference
Applied to the Automatic Analysis of PPs and
ADVPs&amp;quot;, in SAML, Copenhagen.
F.C.N.Pereira (1985), &amp;quot;A New Characterization of
Attachment Preferences&amp;quot;, in Dowty et al., Natural
Language Parsing, Cambridge University Press:
Cambridge.
D.Petitpierre et al. (1987), &amp;quot;A Model for Pre-
ference&amp;quot;, in Proceedings of the Third ACL Con-
ference, Copenhagen.
A.Raw et al. (1989), An Introduction to the
Eurotra Machine Translation System, in Working
Papers in Natural Language Processing, no. 1,
Leuven.
P.Van Henteryck (1989), Constraint Satisfaction
in Logic Programming, The MIT Press:
Cambridge Mass.
Y.Willcs &amp; A.Herscovits (1977), &amp;quot;An Intelligent
Analyser and Generator for Natural
Language&amp;quot;, in Computational and Mathematical
Linguistics, Leo S.Olschki Ed: Firenze.
- 286 -
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.220213">
<title confidence="0.9950325">A PREFERENCE MECHANISM BASED ON MULTIPLE CRITERIA RESOLUTION</title>
<author confidence="0.781406">Yannis Dologlou</author>
<address confidence="0.7813025">Eurotra-GR, Margari 22 11525 Athens, Greece.</address>
<author confidence="0.998336">Giovanni Malnati</author>
<affiliation confidence="0.986989">Eurotra-IT, Gruppo Dima,</affiliation>
<address confidence="0.9445995">Corso F.Turati 11/C 10128 Torino, Italy.</address>
<author confidence="0.977125">Patrizia Paggio</author>
<email confidence="0.862938">patrizia@eurotra.uucp</email>
<affiliation confidence="0.999846">Eurotra-DK, University of Copenhagen,</affiliation>
<address confidence="0.9823125">Njalsgade 80 2300 Kbh S, Denmark.</address>
<abstract confidence="0.997719290909091">This paper presents an experimental preference tool designed, implemented and tested in the Eurotra project. The mechanism is based on preference rules which can either compare subtrees pairwise or single out a subtree on the basis of some specified constraints. Scoring permits combining the effects of various preference rules. THE PROBLEM The aim of a translation system is to produce the correct translation of a given text. In Eurotra, where translation is split up into a series of mappings among intermediate levels of representation, provisional overgeneration is a necessary evil [Raw et at. 1989]: the closer to surface structure a level of representation is, the harder it becomes for the parser to produce an unambiguous result. In the Eurotra framework, the E-framework [Bech et at. 1989], overgeneration can be partially controlled by filters which describe parse trees that are to be discarded as not obeying some specified constraints. Thus, filters to individual objects and are meant to inherently wrong representations. But there are cases where the grammar produces multiple analyses of a given input because the input is ambiguous with respect to a given level. All of these analyses are in some sense correct, although further processing might discard some of them. Our aim was to design a preference mechanism able to choose the best among a set of acceptable candidates. OUR VIEW OF PREFERENCE Preference has been defined in a number of ways, e.g. as a gradual fulfilment of semantic constraints Wass and Wilks1983], as a lexically induced syntactic bias [Ford et at. 1982], as a parsing strategy independent of linguistic criteria [Frazier and Fodor 1978, Pereira 1985], and as a system based on multiple judgements reflecting the complexity of psychological processes [Jackendoff 1985]. Our approach, which is greatly indebted to Jackendoff&apos;s theory of preference rule systems, is based on the following assumptions: - Preference is a method which, on the basis of some preference criteria, chooses the best one a set of interpretations which are all correct according to the grammar. - Each preference criterion is expressed as a set of statements, where a statement is either a binary relation between competing interpretations or the description of a subtree which satisfies some defined criteria. - There is no unique preference criterion according to which the best interpretation can be chosen: preference criteria are multiple, and possibly contradictory. A preference mechanism must be able to accommodate such multiplicity. - Preference criteria are heuristic principles which may vary according to the language and the text type: therefore, they are not hardwired in the system. In the previous Eurotra preference mechanism [Petitpierre et at. 1987], preference statements were only defined as binary relations between subtrees. Since comparing subtrees is a rather operation from the computational of view, and since a number of preference cnteria e.g. the principle of right-low attachment cannot be expressed in binary terms, we have allowed both binary and non-binary preference rules. The application algorithm of p-rules and the way in which various preference criteria are combined are also new with respect to the previous system. THE MECHANISM PROPOSED The mechanism proposed is an independent module which is activated on the results output by the parser. The module consists of preference rules of two possible kinds, which we call binary and unary rules. A binary rule establishes a preference relation between two corresponding (sub)trees (from here on, (sub)tree will be used in the sense of a representation of an interpretation or a part of this representation). A unary rule picks up a (sub)tree on the basis of its own properties, thus implicitly establishing a preference relation between this (sub)tree and all its competitors. Each preference rule be it binary or unary is associated with a score, which is assigned to the preferred (sub)tree result of the application of the rule. - 281 - Correspondences: The notion of correspondence between (sub)trees is central to preference rules of the binary type. A number of defmitions of this concept can be envisaged: i. The correspondence between two (sub)trees is established by the user, who states that some specified contraints hold between parts of them. ii. A correspondence is only assumed to exist between full parse trees, and the correspondence between two subtrees is defined by specifying their derivation paths from the top node. The system produces a parse graph which will be a synthesis of the various parse trees, where parts common to several trees are shared; two subtrees correspond if they share a given part. The most challenging solution is we have not adopted it because of computational problems con-</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<title>The EUROTRA MT Formalism&amp;quot;, forthcoming</title>
<date>1990</date>
<booktitle>in Machine Translation, ed. Sergei Nirenburg.</booktitle>
<editor>A.Bech, B.Maegaard &amp; A.Nygaard</editor>
<marker>1990</marker>
<rawString>A.Bech, B.Maegaard &amp; A.Nygaard (1990), &amp;quot;The EUROTRA MT Formalism&amp;quot;, forthcoming in Machine Translation, ed. Sergei Nirenburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Fass</author>
<author>Y Wilks</author>
</authors>
<title>Preference Semantics, Ill-Formedness, and Metaphor&amp;quot;, in America!</title>
<date>1983</date>
<journal>Journal of Computational Linguistics,</journal>
<volume>9</volume>
<pages>3--4</pages>
<marker>Fass, Wilks, 1983</marker>
<rawString>D.Fass &amp; Y.Wilks (1983), &amp;quot;Preference Semantics, Ill-Formedness, and Metaphor&amp;quot;, in America! Journal of Computational Linguistics, vol. 9, no.3-4, July--bee.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Ford</author>
</authors>
<title>A Competence-Based Theory of Syntactic Closure&amp;quot;,</title>
<date>1982</date>
<booktitle>The Mental Representation of Grammatical Relations, The</booktitle>
<editor>in J.Bresnan ed.,</editor>
<publisher>MIT Press:</publisher>
<location>Cambridge Mass.</location>
<marker>Ford, 1982</marker>
<rawString>M.Ford et al. (1982), &amp;quot;A Competence-Based Theory of Syntactic Closure&amp;quot;, in J.Bresnan ed., The Mental Representation of Grammatical Relations, The MIT Press: Cambridge Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Frazier</author>
<author>J D Fodor</author>
</authors>
<title>The Sausage Machine: A New Two-Stage Parsing Model&amp;quot;,</title>
<date>1978</date>
<note>in Cognition, vol.6.</note>
<contexts>
<context position="2016" citStr="Frazier and Fodor 1978" startWordPosition="311" endWordPosition="314">s where the grammar produces multiple analyses of a given input because the input is ambiguous with respect to a given level. All of these analyses are in some sense correct, although further processing might discard some of them. Our aim was to design a preference mechanism able to choose the best among a set of acceptable candidates. OUR VIEW OF PREFERENCE Preference has been defined in a number of ways, e.g. as a gradual fulfilment of semantic constraints Wass and Wilks1983], as a lexically induced syntactic bias [Ford et at. 1982], as a parsing strategy independent of linguistic criteria [Frazier and Fodor 1978, Pereira 1985], and as a system based on multiple judgements reflecting the complexity of psychological processes [Jackendoff 1985]. Our approach, which is greatly indebted to Jackendoff&apos;s theory of preference rule systems, is based on the following assumptions: - Preference is a method which, on the basis of some preference criteria, chooses the best one among a set of possible interpretations which are all correct according to the grammar. - Each preference criterion is expressed as a set of statements, where a statement is either a binary relation between competing interpretations or the d</context>
</contexts>
<marker>Frazier, Fodor, 1978</marker>
<rawString>L.Frazier &amp; J.D.Fodor (1978), &amp;quot;The Sausage Machine: A New Two-Stage Parsing Model&amp;quot;, in Cognition, vol.6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jackendoff</author>
</authors>
<title>Semantics and Cognition,</title>
<date>1985</date>
<location>Mit Press: Cambridge, Mass.</location>
<contexts>
<context position="2147" citStr="Jackendoff 1985" startWordPosition="332" endWordPosition="333"> analyses are in some sense correct, although further processing might discard some of them. Our aim was to design a preference mechanism able to choose the best among a set of acceptable candidates. OUR VIEW OF PREFERENCE Preference has been defined in a number of ways, e.g. as a gradual fulfilment of semantic constraints Wass and Wilks1983], as a lexically induced syntactic bias [Ford et at. 1982], as a parsing strategy independent of linguistic criteria [Frazier and Fodor 1978, Pereira 1985], and as a system based on multiple judgements reflecting the complexity of psychological processes [Jackendoff 1985]. Our approach, which is greatly indebted to Jackendoff&apos;s theory of preference rule systems, is based on the following assumptions: - Preference is a method which, on the basis of some preference criteria, chooses the best one among a set of possible interpretations which are all correct according to the grammar. - Each preference criterion is expressed as a set of statements, where a statement is either a binary relation between competing interpretations or the description of a subtree which satisfies some defined criteria. - There is no unique preference criterion according to which the bes</context>
<context position="19867" citStr="Jackendoff 1985" startWordPosition="3312" endWordPosition="3313">ing is seen as a constraint satisfaction problem, preference criteria of the type we are interested in can be treated on the same level as other linguistic constraints and used to resolve ambiguity at parse time (cf. [Van Henteryck 1989]). However, such an approach would have meant too radical a change to the underlying Eurotra formalism. In accordance with the general practice in Eurotra, our preference mechanism does not plead allegiance to any specific linguistic theory. We have, however, been influenced by a theoretical framework, namely the theory of preference rule systems described in [Jackendoff 1985]. According to this framework, preference can only been decided on the basis of a number of criteria, and a preference mechanism is not based on a dichotomy between correct and wrong results, but on a scale of degrees of acceptability. One of our main concerns in designing the system, in fact, has been allowing various and even contradictory criteria to be combined in a declarative fashion. The use of scoring is in this sense crucial. The system has been implemented and successfully tested on real input which showed overgeneration due to PP and adverbial attachment, coordination, pronominal r</context>
</contexts>
<marker>Jackendoff, 1985</marker>
<rawString>Jackendoff (1985), Semantics and Cognition, Mit Press: Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Hirst</author>
</authors>
<title>Semantic Interpretation and the Resolution of Ambiguity,</title>
<date>1987</date>
<publisher>Cambridge University Press: Cambridge.</publisher>
<contexts>
<context position="8878" citStr="Hirst 1987" startWordPosition="1446" endWordPosition="1447">belong to the lowest-ranking class: this is motivated by the assumption that unary rules prefer single trees over all the other members of the set of competing trees. After this partial order has been established, all the trees but those belonging to the highestranking class are discarded. A possible enhancement to the expressive power of p-rules would be the introduction of negative scores, for cases where a p-rule describes an acceptable but not totally correct subtree. AN EXAMPLE The following set of p-rules are based on some of the criteria for the treatment of PP attachment described in [Hirst 1987). Note that p-rule scores have been assigned manually, due to the small number of rules. pmod (8) = (catx--pp, sfâ€”=mod) [P1: (cat=p), NP1: (cat;--np)) &gt;= [cat=pp, sf=mod) [P2: (cat=p), NP2: (cat---np)) where P1=P2, NP1=NP2. In the rule above, 0 delimit a node in the tree, which in the E-framework is a set of attribute value pairs, following a given node enclose its daughters, = means equal to and â€¢â€¢.= means different from. The rule prefers a valency-bound PP to a PP modifier. This is a very strong criterion, which can only be overridden by semantic principles: therefore, the rule has a high sc</context>
</contexts>
<marker>Hirst, 1987</marker>
<rawString>G.Hirst (1987), Semantic Interpretation and the Resolution of Ambiguity, Cambridge University Press: Cambridge.</rawString>
</citation>
<citation valid="true">
<title>Semantic Analysis in XTRA, An English-Chinese Machine Translation System&amp;quot;,</title>
<date>1988</date>
<journal>in Computers and Translation,</journal>
<volume>3</volume>
<pages>2</pages>
<marker>1988</marker>
<rawString>X.Huang (1988), &amp;quot;Semantic Analysis in XTRA, An English-Chinese Machine Translation System&amp;quot;, in Computers and Translation, vol.3, no.2.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S M Key</author>
<author>S L Marple</author>
</authors>
<title>Spectrum Analysis - A Modern Perspective&amp;quot;,</title>
<date>1981</date>
<booktitle>in Proceedings of the IEEE,</booktitle>
<volume>69</volume>
<contexts>
<context position="15411" citStr="Key &amp; Marple 1981" startWordPosition="2580" endWordPosition="2583">ms (1) and (2) are equivalent. Now, problem (2) has no exact solution whenever N is greater than n. However, it can be solved by converting it into a constraint optimization problem whereby optimum scores for p.-rules will emerge. Thus the set of equations 2) is rearranged by introducing the errors ei -=1,...N) and by imposing that the sum of all these errors is minimum. More precisely problem (2) takes now the following form: Find xi (i=1,...n+1) such that + e22 + + eN2 ---&gt; minimum - 284 - subject to the constraints (4) ei = ;al; + x2a2; + + - X12 + X22 +â€”â€¢ X(n+1)2 1 In the literature (cf. [Key &amp; Marple 19811 and [Kumaresan &amp; Tufts 1982]), one of the most efficient techniques offered to the solution of the constraint optimization problem (4) is called Singular Value Decomposition (SVD). SVD provides an optimum set of ; (i=1,...n+1) which guarantees minimum accumulated squared error. Thus the values of the scores A (i=1,...n) are computed in a straightforward way from the xi (i=1,...n+1) using equation (3). Note that SVD is a non-linear optimization technique which provides the best set of parameters for a given training corpus. Therefore, it is important to apply it to a linguistically balanced c</context>
</contexts>
<marker>Key, Marple, 1981</marker>
<rawString>S.M.Key &amp; S.L.Marple (1981), &amp;quot;Spectrum Analysis - A Modern Perspective&amp;quot;, in Proceedings of the IEEE, Vol. 69.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kumaresan</author>
<author>D Tufts</author>
</authors>
<title>Singular Value Decomposition and improved Frequency Estimation Using Linear Prediction&amp;quot;,</title>
<date>1982</date>
<journal>IEEE ASS,P</journal>
<volume>30</volume>
<contexts>
<context position="15440" citStr="Kumaresan &amp; Tufts 1982" startWordPosition="2585" endWordPosition="2588">alent. Now, problem (2) has no exact solution whenever N is greater than n. However, it can be solved by converting it into a constraint optimization problem whereby optimum scores for p.-rules will emerge. Thus the set of equations 2) is rearranged by introducing the errors ei -=1,...N) and by imposing that the sum of all these errors is minimum. More precisely problem (2) takes now the following form: Find xi (i=1,...n+1) such that + e22 + + eN2 ---&gt; minimum - 284 - subject to the constraints (4) ei = ;al; + x2a2; + + - X12 + X22 +â€”â€¢ X(n+1)2 1 In the literature (cf. [Key &amp; Marple 19811 and [Kumaresan &amp; Tufts 1982]), one of the most efficient techniques offered to the solution of the constraint optimization problem (4) is called Singular Value Decomposition (SVD). SVD provides an optimum set of ; (i=1,...n+1) which guarantees minimum accumulated squared error. Thus the values of the scores A (i=1,...n) are computed in a straightforward way from the xi (i=1,...n+1) using equation (3). Note that SVD is a non-linear optimization technique which provides the best set of parameters for a given training corpus. Therefore, it is important to apply it to a linguistically balanced corpus. Moreover, for the prod</context>
</contexts>
<marker>Kumaresan, Tufts, 1982</marker>
<rawString>R.Kumaresan &amp; D.Tufts (1982), &amp;quot;Singular Value Decomposition and improved Frequency Estimation Using Linear Prediction&amp;quot;, IEEE ASS,P vol.30, no. 4.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Malnati</author>
<author>P Paggio</author>
</authors>
<title>The Eurotra User Language&amp;quot;, forthcoming</title>
<date>1990</date>
<booktitle>in Machine Translation and Natural Language Processing, vol.2, CEC,</booktitle>
<marker>Malnati, Paggio, 1990</marker>
<rawString>G.Malnati &amp; P.Paggio (1990), &amp;quot;The Eurotra User Language&amp;quot;, forthcoming in Machine Translation and Natural Language Processing, vol.2, CEC, Luxembourg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Paggio</author>
</authors>
<title>The Concept of Preference Applied to the Automatic Analysis of PPs and ADVPs&amp;quot;, in SAML,</title>
<date>1988</date>
<location>Copenhagen.</location>
<marker>Paggio, 1988</marker>
<rawString>P.Paggio (1988), &amp;quot;The Concept of Preference Applied to the Automatic Analysis of PPs and ADVPs&amp;quot;, in SAML, Copenhagen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F C N Pereira</author>
</authors>
<title>A New Characterization of Attachment Preferences&amp;quot;, in Dowty et al., Natural Language Parsing,</title>
<date>1985</date>
<publisher>University Press: Cambridge.</publisher>
<location>Cambridge</location>
<contexts>
<context position="2030" citStr="Pereira 1985" startWordPosition="315" endWordPosition="316">uces multiple analyses of a given input because the input is ambiguous with respect to a given level. All of these analyses are in some sense correct, although further processing might discard some of them. Our aim was to design a preference mechanism able to choose the best among a set of acceptable candidates. OUR VIEW OF PREFERENCE Preference has been defined in a number of ways, e.g. as a gradual fulfilment of semantic constraints Wass and Wilks1983], as a lexically induced syntactic bias [Ford et at. 1982], as a parsing strategy independent of linguistic criteria [Frazier and Fodor 1978, Pereira 1985], and as a system based on multiple judgements reflecting the complexity of psychological processes [Jackendoff 1985]. Our approach, which is greatly indebted to Jackendoff&apos;s theory of preference rule systems, is based on the following assumptions: - Preference is a method which, on the basis of some preference criteria, chooses the best one among a set of possible interpretations which are all correct according to the grammar. - Each preference criterion is expressed as a set of statements, where a statement is either a binary relation between competing interpretations or the description of </context>
<context position="18828" citStr="Pereira 1985" startWordPosition="3148" endWordPosition="3149"> is optimum given the imposed constraint that all p-rule scores are positive. CONCLUSION It seems to us that two basic tendencies can be observed in the literature with respect to the treatment of preference. On the one hand, preference is conceived of as an essentially linguistic or psycholinguistic principle or sum of principles (cf. the LFG approach in [Ford et al. 1982]); although it has important consequences for the parser, preference is not directly connected to a specific parsing method. On the other hand, preference has been studied in the context of parsing: in such treatments (cf. [Pereira 19851), preference amounts to a deterministic procedure, which is not necessarily motivated by linguistic evidence. In our approach preference is established on the basis of rules defined by the user and applied by a post-processor. We have in fact focussed on a method to express linguistically meaningful preference statements rather than on a particular parsing strategy. We are aware of the fact that, in a system where parsing is seen as a constraint satisfaction problem, preference criteria of the type we are interested in can be treated on the same level as other linguistic constraints and used</context>
</contexts>
<marker>Pereira, 1985</marker>
<rawString>F.C.N.Pereira (1985), &amp;quot;A New Characterization of Attachment Preferences&amp;quot;, in Dowty et al., Natural Language Parsing, Cambridge University Press: Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Petitpierre</author>
</authors>
<title>A Model for Preference&amp;quot;,</title>
<date>1987</date>
<booktitle>in Proceedings of the Third ACL Conference,</booktitle>
<location>Copenhagen.</location>
<marker>Petitpierre, 1987</marker>
<rawString>D.Petitpierre et al. (1987), &amp;quot;A Model for Preference&amp;quot;, in Proceedings of the Third ACL Conference, Copenhagen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Raw</author>
</authors>
<title>An Introduction to the Eurotra Machine Translation System,</title>
<date>1989</date>
<booktitle>in Working Papers in Natural Language Processing,</booktitle>
<volume>1</volume>
<location>Leuven.</location>
<marker>Raw, 1989</marker>
<rawString>A.Raw et al. (1989), An Introduction to the Eurotra Machine Translation System, in Working Papers in Natural Language Processing, no. 1, Leuven.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Van Henteryck</author>
</authors>
<title>Constraint Satisfaction in Logic Programming,</title>
<date>1989</date>
<publisher>The MIT Press:</publisher>
<location>Cambridge Mass.</location>
<marker>Van Henteryck, 1989</marker>
<rawString>P.Van Henteryck (1989), Constraint Satisfaction in Logic Programming, The MIT Press: Cambridge Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Willcs</author>
<author>A Herscovits</author>
</authors>
<title>An Intelligent Analyser and Generator for Natural Language&amp;quot;,</title>
<date>1977</date>
<booktitle>in Computational and Mathematical Linguistics, Leo S.Olschki Ed:</booktitle>
<location>Firenze.</location>
<marker>Willcs, Herscovits, 1977</marker>
<rawString>Y.Willcs &amp; A.Herscovits (1977), &amp;quot;An Intelligent Analyser and Generator for Natural Language&amp;quot;, in Computational and Mathematical Linguistics, Leo S.Olschki Ed: Firenze.</rawString>
</citation>
<citation valid="false">
<pages>286</pages>
<marker></marker>
<rawString>- 286 -</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>