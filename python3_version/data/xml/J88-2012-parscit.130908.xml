<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000444">
<author confidence="0.235018">
Book Reviews Efficient Parsing for Natural Language
</author>
<bodyText confidence="0.999954142857143">
different from the strategy imposed by Prolog, and
partly automating the writing of rules. For example,
arguments having a regular and predictable structure
(parse tree building, logical form construction, etc.) can
be automatically included in grammar rules. Such inter-
preters are written in Prolog and they transform a
Prolog-like program into one that is directly executable.
Fundamental techniques are proposed and illustrated
for DCGs, such as automated construction of proof
trees, interpretation of filler-gap dependencies, partial
execution, and tabular parsing (i.e., chart parsing). The
book ends with annotated sample programs that inte-
grate most of the material presented in the preceding
chapters. The bibliography is relevant and comprehen-
sive, given the aims of the book.
To conclude, I feel that this book includes most of
the material one would wish to see in an introductory
book. By a small number of linguistic concepts and
constructions, the authors present the main techniques
a grammar writer can use in a large number of situa-
tions. There are, however, some points I would have
liked to see included in this book. Very few parsers
directly use the linguistic framework proposed here but
rather are inspired by GPSGs, LFGs, HPSGs, UGs,
etc. Thus it would have been of particular interest to
have guidelines on Prolog techniques useful to such
computational-linguistics frameworks. Some aspects,
like feature percolation and control in GPSGs, are
probably not trivial to deal with.
In spite of these nonessential restrictions, I feel that
this book should be read by everyone in the field having
a minimum interest in Prolog. This very convincing
book also suggests the reading of more complex publi-
cations in the field like Dahl and St.-Dizier (1985, 1988)
and JLP (1986).
</bodyText>
<sectionHeader confidence="0.994447" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.77496475">
Colmerauer, A. 1978. Metamorphosis Grammars. In Lecture Notes in
Computer Science, 63: 133-189, L. Bolc, (ed.). Springer-Verlag.
Dahl, V. and Saint-Dizier, P. (Eds.) 1985, 1988. Natural Language
Understanding and Logic Programming I and IL North-Holland.
Sterling, L. and Shapiro, E. 1986. The Art of Prolog. MIT Press,
Cambridge, MA.
JLP 1986. Special Issue of the Journal of Logic Programming on
Natural Language Understanding 3(4), December 1986.
</reference>
<footnote confidence="0.9926015">
Patrick Saint-Dizier was one of the organizers of the Work-
shop on Natural-Language Understanding and Logic Pro-
gramming, and is editor of the forthcoming proceedings, to be
published by North-Holland. In 1987, he was a visitor at
Simon Fraser University. Saint-Dizier&apos;s address is: Institut de
recherche en informatique et systemes aleatoires, Campus
Universitaire de Beaulieu, Avenue du General Leclerc,
35042—Rennes Cedex, France.
</footnote>
<sectionHeader confidence="0.871076" genericHeader="method">
EFFICIENT PARSING FOR NATURAL LANGUAGE: A
FAST ALGORITHM FOR PRACTICAL SYSTEMS
(THE KLUWER INTERNATIONAL SERIES IN
ENGINEERING AND COMPUTER SCIENCE: NATURAL-
LANGUAGE PROCESSING AND MACHINE TRANSLATION)
</sectionHeader>
<subsectionHeader confidence="0.855497">
Masaru Tomita
</subsectionHeader>
<bodyText confidence="0.528373">
(Carnegie-Mellon University, Pittsburgh, PA)
Boston, MA: Kluwer Academic Publishers, 1986, xviii
+ 201 pp.
</bodyText>
<figure confidence="0.46541025">
ISBN 0-89838-202-5, $39.95 (hb)
Reviewed by
Mirosiaw Batiko
Warsaw University
</figure>
<bodyText confidence="0.999905658536585">
This book introduces a context-free parsing algorithm
that is intended to be particularly useful in natural-
language processing. Practical applications of the algo-
rithm are discussed, including on-line parsing, inter-
active machine translation, and a technique to
disambiguate a sentence by consulting the user interac-
tively. The book opens with a diagnosis of the current
state of work on parsing context-free languages. Two
kinds of algorithms for context-free languages are avail-
able: specific algorithms for programming languages,
and general algorithms intended to handle any context-
free grammar. Neither of them, however, is suitable for
natural languages. The former are very fast but not
powerful enough to cope with some syntactic phenom-
ena of natural languages; the latter are even too power-
ful, and therefore not so efficient as they could be.
Tomita&apos;s solution to the problem is to find something in
between: an algorithm that would be nongeneral in the
class of context-free languages yet still powerful enough
to handle the great many ambiguities inherent in any
natural language.
The algorithm described can be viewed as an exten-
sion of the LR parsing algorithm, which is used for
programming languages (Aho and Ullman 1977). Like
the LR algorithm, it works strictly from left to right and
is entirely table-driven; unlike the LR algorithm, how-
ever, it is intended to parse ambiguous sentences, and
does it most efficiently, using the data structures that
have been specially designed for it. The current state of
parsing is represented in the form of a directed acyclic
graph, and no part of an input sentence is parsed more
than once in the same way. All the possible parses of an
ambiguous sentence are produced in parallel and stored
in a packed shared forest (PSF) for later computation.
While the number of parses grows exponentially, the
size of the PSF increases polynomially. The only other
algorithm that produces a polynomial-sized parse forest
without requiring a grammar to be in Chomsky Normal
Form is Earley&apos;s (1970) general algorithm intended to
handle any type of context-free grammar. Tomita
shows, however, that Earley&apos;s original algorithm has a
</bodyText>
<page confidence="0.884482">
80 Computational Linguistics, Volume 14, Number 2, June 1988
</page>
<note confidence="0.431712">
Book Reviews Briefly Noted
</note>
<bodyText confidence="0.997501454545455">
defect and may occasionally produce an inadequate
parse-forest representation.
It is claimed in the book that the algorithm described
&amp;quot;is more efficient than any existing general parsing
algorithms in terms of recognition time as far as practi-
cal natural language grammars are concerned&amp;quot; (p. 73).
The crucial point about this statement is, obviously, the
notion of &amp;quot;practical natural language grammars&amp;quot;. As
mentioned before, Tomita&apos;s algorithm is intended for a
subset of context-free grammars. In particular, it is not
able to handle cyclic grammars, e.g.:
</bodyText>
<equation confidence="0.9635925">
S—s. S
—&gt; X
</equation>
<bodyText confidence="0.9980575">
and turns out to be less efficient than Earley&apos;s algorithm
with &amp;quot;densely&amp;quot; ambiguous grammars, such as:
</bodyText>
<equation confidence="0.998166">
S —&gt; SSSS
S SSS
S —&gt; SS
S X
</equation>
<bodyText confidence="0.999705571428571">
Although it seems unlikely that any natural-language
grammar contains cyclic rules or dense ambiguities, the
limitations of Tomita&apos;s algorithm with regard to natural-
language grammars remain somewhat unclear.
The major arguments for the usefulness of the algo-
rithm are, therefore, empirical. Both Tomita&apos;s and
Earley&apos;s algorithms have been implemented and tested
against various grammars and sentences. The grammar
of English most used in the experiment has about 220
rules, and the set of test sentences is made up of both
actual and invented examples, more than 50 in number.
The results of the experiment show that Tomita&apos;s algo-
rithm is significantly faster than Earley&apos;s algorithm in
practical applications. Moreover, its parsing time and
space remain tractable when the length of an input
sentence, the number of parses, or the size of a gram-
mar increases.
The book is composed of 10 chapters and several
appendices. Chapters 1 through 6, apart from some
introductory remarks, provide an informal description
of the algorithm, illustrated with plenty of clear exam-
ples; a formal specification (which is not necessary,
however, to understand how the algorithm works); a
comparison of Tomita&apos;s algorithm with other context-
free parsing algorithms; and finally a description of the
experiment mentioned above. The appendices give,
among other things, the correctness proof of the algo-
rithm, as well as programs, grammars, and test sen-
tences used in the experiment.
Chapters 7, 8, and 9 constitute a relatively indepen-
dent part of the book. They suggest some practical
applications of Tomita&apos;s algorithm, such as left-to-right
on-line parsing, interactive sentence disambiguation by
asking the user for the preferred interpretation of the
sentence in question, and interactive machine transla-
tion of small documents, letters, etc. To a wide circle of
readers involved in computational linguistics, this part
of the book may be even more interesting than the
others. The core of the book, on the contrary, seems to
be of great importance for those who deal in practice
with natural-language parsing rather than those who
observe the advances in this field from the outside.
</bodyText>
<sectionHeader confidence="0.996082" genericHeader="method">
REFERENCES
</sectionHeader>
<reference confidence="0.933575909090909">
Aho, A.V. and Ullman, J.D. 1977. Principles of Compiler Design.
Addison-Wesley, Reading, MA.
Earley, J. 1970. An Efficient Context-free Parsing Algorithm. Com-
munications of the ACM 13(2): 94-102.
Mirostaw Batiko, who is a lecturer at the Institute of Polish
Language, Warsaw University, has MScs in both computer
science and linguistics. His recent research has concentrated
on the problems of evaluating natural-language parsers, and
on parsing Polish. Batiko&apos;s address is: Instytut Jczyka Pols-
kiego, Universytet Warszawski, Krakowski Przedmiescie 26/
28, 00-325 Warszawa, Poland.
</reference>
<sectionHeader confidence="0.828773" genericHeader="method">
BRIEFLY NOTED
</sectionHeader>
<bodyText confidence="0.998713695652174">
Editor&apos;s note: Frequently, the need has been felt for a longer
treatment of books that on the one hand do not warrant a full
review, but on the other hand merit more than a bare
appearance in the list of books received. Often, such books
are those that are important in related fields such as theoret-
ical linguistics and will be reviewed in the appropriate jour-
nals, but which may have relevance to computational linguis-
tics as well. Sometimes, it is simply the case that a mere listing
by title and author does not convey enough information to let
the reader know whether the book may be in their area of
interest. In addition, popular works or books of oblique
interest to the field may merit a brief notice.
This new section will answer this need by giving brief
notices of books. Most often, books appearing in this section
will not have a review per se; rather, just a summary of the
book will usually be given—based on that of the author or
publisher, in the case of monographs, or through the table of
contents in the case of collections. Such a treatment reflects
the book review editor&apos;s judgment that the book is worthy of
attention, but is not necessarily an endorsement of the con-
tent. Short opinions may also be given in some cases, where
the nature of the book calls for an evaluation but not a full
review.
</bodyText>
<sectionHeader confidence="0.9992" genericHeader="method">
ON THE DEFINITION OF WORD
(LINGUISTIC INQUIRY MONOGRAPH 14)
</sectionHeader>
<subsectionHeader confidence="0.702156">
Anna-Maria Di Scuillo and Edwin Williams
</subsectionHeader>
<bodyText confidence="0.571598">
(Universite du Québec a Montréal; and University of
Massachusetts, Amherst, MA)
Cambridge, MA: MIT Press, 1987, vii + 118 pp.
ISBN 0-262-04092-3, $20.00 (hb); ISBN 0-262-54047-9, $9.95
(sb)
On the Definition of Word develops a consistent and
coherent approach to central questions about morphology
and its relation to syntax. In sorting out the various senses
in which the word word is used, it asserts that three
concepts that have often been identified with each other
are in fact distinct and not coextensive: listemes (linguistic
objects permanently stored by the speaker), morphological
objects (objects whose shape can be characterized in mor-
</bodyText>
<page confidence="0.243969">
Computational Linguistics, Volume 14, Number 2, June 1988 81
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000052">
<title confidence="0.964078">Book Reviews Efficient Parsing for Natural Language</title>
<abstract confidence="0.986222424242424">different from the strategy imposed by Prolog, and partly automating the writing of rules. For example, arguments having a regular and predictable structure (parse tree building, logical form construction, etc.) can be automatically included in grammar rules. Such interpreters are written in Prolog and they transform a Prolog-like program into one that is directly executable. Fundamental techniques are proposed and illustrated for DCGs, such as automated construction of proof trees, interpretation of filler-gap dependencies, partial execution, and tabular parsing (i.e., chart parsing). The book ends with annotated sample programs that integrate most of the material presented in the preceding chapters. The bibliography is relevant and comprehensive, given the aims of the book. To conclude, I feel that this book includes most of the material one would wish to see in an introductory book. By a small number of linguistic concepts and constructions, the authors present the main techniques a grammar writer can use in a large number of situations. There are, however, some points I would have liked to see included in this book. Very few parsers directly use the linguistic framework proposed here but rather are inspired by GPSGs, LFGs, HPSGs, UGs, etc. Thus it would have been of particular interest to have guidelines on Prolog techniques useful to such computational-linguistics frameworks. Some aspects, like feature percolation and control in GPSGs, are probably not trivial to deal with. In spite of these nonessential restrictions, I feel that this book should be read by everyone in the field having a minimum interest in Prolog. This very convincing book also suggests the reading of more complex publi-</abstract>
<note confidence="0.790146933333334">cations in the field like Dahl and St.-Dizier (1985, 1988) and JLP (1986). REFERENCES A. 1978. Metamorphosis Grammars. In Notes in Science, 133-189, L. Bolc, (ed.). Springer-Verlag. V. and Saint-Dizier, P. (Eds.) 1985, 1988. Language and Logic Programming I IL North-Holland. L. and Shapiro, E. 1986. Art of Prolog. Press, Cambridge, MA. 1986. Special Issue of the of Logic Programming Natural Language Understanding 3(4), December 1986. Saint-Dizier one of the organizers of the Workshop on Natural-Language Understanding and Logic Programming, and is editor of the forthcoming proceedings, to be published by North-Holland. In 1987, he was a visitor at</note>
<author confidence="0.677399">Saint-Dizier&apos;s address is Institut de</author>
<affiliation confidence="0.668751">recherche en informatique et systemes aleatoires, Campus Universitaire de Beaulieu, Avenue du General Leclerc,</affiliation>
<address confidence="0.983825">35042—Rennes Cedex, France.</address>
<title confidence="0.9325366">FOR NATURAL LANGUAGE: FOR PRACTICAL SYSTEMS (THE KLUWER INTERNATIONAL SERIES IN ENGINEERING AND COMPUTER SCIENCE: NATURAL- LANGUAGE PROCESSING AND MACHINE TRANSLATION)</title>
<author confidence="0.939602">Masaru Tomita</author>
<note confidence="0.6962235">(Carnegie-Mellon University, Pittsburgh, PA) Boston, MA: Kluwer Academic Publishers, 1986, xviii + 201 pp. ISBN 0-89838-202-5, $39.95 (hb)</note>
<author confidence="0.95931">Mirosiaw Batiko</author>
<affiliation confidence="0.999597">Warsaw University</affiliation>
<abstract confidence="0.983595543859649">This book introduces a context-free parsing algorithm that is intended to be particularly useful in naturallanguage processing. Practical applications of the algorithm are discussed, including on-line parsing, interactive machine translation, and a technique to disambiguate a sentence by consulting the user interactively. The book opens with a diagnosis of the current state of work on parsing context-free languages. Two kinds of algorithms for context-free languages are available: specific algorithms for programming languages, and general algorithms intended to handle any contextfree grammar. Neither of them, however, is suitable for natural languages. The former are very fast but not powerful enough to cope with some syntactic phenomena of natural languages; the latter are even too powertherefore not so efficient as they could Tomita&apos;s solution to the problem is to find something in between: an algorithm that would be nongeneral in the class of context-free languages yet still powerful enough to handle the great many ambiguities inherent in any natural language. The algorithm described can be viewed as an extenof the algorithm, which is used for programming languages (Aho and Ullman 1977). Like the LR algorithm, it works strictly from left to right and is entirely table-driven; unlike the LR algorithm, however, it is intended to parse ambiguous sentences, and does it most efficiently, using the data structures that have been specially designed for it. The current state of parsing is represented in the form of a directed acyclic graph, and no part of an input sentence is parsed more than once in the same way. All the possible parses of an ambiguous sentence are produced in parallel and stored a shared forest for later computation. While the number of parses grows exponentially, the size of the PSF increases polynomially. The only other algorithm that produces a polynomial-sized parse forest without requiring a grammar to be in Chomsky Normal Form is Earley&apos;s (1970) general algorithm intended to handle any type of context-free grammar. Tomita shows, however, that Earley&apos;s original algorithm has a Linguistics, Volume 14, Number 2, June 1988 Book Reviews Briefly Noted defect and may occasionally produce an inadequate parse-forest representation. It is claimed in the book that the algorithm described &amp;quot;is more efficient than any existing general parsing algorithms in terms of recognition time as far as practical natural language grammars are concerned&amp;quot; (p. 73). The crucial point about this statement is, obviously, the notion of &amp;quot;practical natural language grammars&amp;quot;. As mentioned before, Tomita&apos;s algorithm is intended for a subset of context-free grammars. In particular, it is not able to handle cyclic grammars, e.g.: S—s. S and turns out to be less efficient than Earley&apos;s algorithm with &amp;quot;densely&amp;quot; ambiguous grammars, such as:</abstract>
<title confidence="0.924602666666667">S —&gt; SSSS S SSS S —&gt; SS</title>
<author confidence="0.526454">S X</author>
<abstract confidence="0.994622285714285">Although it seems unlikely that any natural-language grammar contains cyclic rules or dense ambiguities, the limitations of Tomita&apos;s algorithm with regard to naturallanguage grammars remain somewhat unclear. The major arguments for the usefulness of the algorithm are, therefore, empirical. Both Tomita&apos;s and Earley&apos;s algorithms have been implemented and tested against various grammars and sentences. The grammar of English most used in the experiment has about 220 rules, and the set of test sentences is made up of both actual and invented examples, more than 50 in number. The results of the experiment show that Tomita&apos;s algorithm is significantly faster than Earley&apos;s algorithm in practical applications. Moreover, its parsing time and space remain tractable when the length of an input sentence, the number of parses, or the size of a grammar increases. The book is composed of 10 chapters and several appendices. Chapters 1 through 6, apart from some introductory remarks, provide an informal description of the algorithm, illustrated with plenty of clear examples; a formal specification (which is not necessary, however, to understand how the algorithm works); a comparison of Tomita&apos;s algorithm with other contextfree parsing algorithms; and finally a description of the experiment mentioned above. The appendices give, among other things, the correctness proof of the algorithm, as well as programs, grammars, and test sentences used in the experiment. Chapters 7, 8, and 9 constitute a relatively independent part of the book. They suggest some practical applications of Tomita&apos;s algorithm, such as left-to-right on-line parsing, interactive sentence disambiguation by asking the user for the preferred interpretation of the sentence in question, and interactive machine translation of small documents, letters, etc. To a wide circle of readers involved in computational linguistics, this part of the book may be even more interesting than the others. The core of the book, on the contrary, seems to be of great importance for those who deal in practice with natural-language parsing rather than those who observe the advances in this field from the outside.</abstract>
<note confidence="0.915925333333333">REFERENCES A.V. and Ullman, J.D. 1977. of Compiler Design. Addison-Wesley, Reading, MA. J. 1970. An Efficient Context-free Parsing Algorithm. Comof the ACM 94-102. Batiko, is a lecturer at the Institute of Polish</note>
<abstract confidence="0.951403233333333">Language, Warsaw University, has MScs in both computer science and linguistics. His recent research has concentrated on the problems of evaluating natural-language parsers, and on parsing Polish. Batiko&apos;s address is: Instytut Jczyka Polskiego, Universytet Warszawski, Krakowski Przedmiescie 26/ 28, 00-325 Warszawa, Poland. BRIEFLY NOTED note: the need has been felt for a longer treatment of books that on the one hand do not warrant a full review, but on the other hand merit more than a bare appearance in the list of books received. Often, such books are those that are important in related fields such as theoretical linguistics and will be reviewed in the appropriate journals, but which may have relevance to computational linguistics as well. Sometimes, it is simply the case that a mere listing by title and author does not convey enough information to let the reader know whether the book may be in their area of interest. In addition, popular works or books of oblique interest to the field may merit a brief notice. This new section will answer this need by giving brief notices of books. Most often, books appearing in this section will not have a review per se; rather, just a summary of the book will usually be given—based on that of the author or publisher, in the case of monographs, or through the table of contents in the case of collections. Such a treatment reflects the book review editor&apos;s judgment that the book is worthy of but is not necessarily an endorsement of the content. Short opinions may also be given in some cases, where the nature of the book calls for an evaluation but not a full review.</abstract>
<title confidence="0.3461365">ON THE DEFINITION OF WORD (LINGUISTIC INQUIRY MONOGRAPH 14)</title>
<author confidence="0.983898">Scuillo Edwin Williams</author>
<affiliation confidence="0.891912">du Québec a Montréal; University of</affiliation>
<address confidence="0.910746">Massachusetts, Amherst, MA) MA: MIT Press, 1987, vii + 118</address>
<abstract confidence="0.9389084">20.00 ISBN 0-262-54047-9, (sb) the Definition of Word a and approach to central questions about and its relation to syntax. In sorting out the various senses which the word used, it asserts that three concepts that have often been identified with each other in fact distinct and not coextensive: permanently stored by the speaker), whose shape can be characterized in mor-</abstract>
<intro confidence="0.614658">Linguistics, Volume 14, Number 2, June 81</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A Colmerauer</author>
</authors>
<title>Metamorphosis Grammars.</title>
<date>1978</date>
<booktitle>In Lecture Notes in Computer Science,</booktitle>
<volume>63</volume>
<pages>133--189</pages>
<editor>L. Bolc, (ed.).</editor>
<publisher>Springer-Verlag.</publisher>
<marker>Colmerauer, 1978</marker>
<rawString>Colmerauer, A. 1978. Metamorphosis Grammars. In Lecture Notes in Computer Science, 63: 133-189, L. Bolc, (ed.). Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Dahl</author>
<author>P Saint-Dizier</author>
</authors>
<title>Natural Language Understanding and Logic Programming I and IL</title>
<date>1985</date>
<publisher>North-Holland.</publisher>
<marker>Dahl, Saint-Dizier, 1985</marker>
<rawString>Dahl, V. and Saint-Dizier, P. (Eds.) 1985, 1988. Natural Language Understanding and Logic Programming I and IL North-Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Sterling</author>
<author>E Shapiro</author>
</authors>
<title>The Art of Prolog.</title>
<date>1986</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<marker>Sterling, Shapiro, 1986</marker>
<rawString>Sterling, L. and Shapiro, E. 1986. The Art of Prolog. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>JLP</author>
</authors>
<date>1986</date>
<journal>Special Issue of the Journal of Logic Programming on Natural Language Understanding</journal>
<volume>3</volume>
<issue>4</issue>
<marker>JLP, 1986</marker>
<rawString>JLP 1986. Special Issue of the Journal of Logic Programming on Natural Language Understanding 3(4), December 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A V Aho</author>
<author>J D Ullman</author>
</authors>
<date>1977</date>
<booktitle>Principles of Compiler Design.</booktitle>
<publisher>Addison-Wesley,</publisher>
<location>Reading, MA.</location>
<marker>Aho, Ullman, 1977</marker>
<rawString>Aho, A.V. and Ullman, J.D. 1977. Principles of Compiler Design. Addison-Wesley, Reading, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Earley</author>
</authors>
<title>An Efficient Context-free Parsing Algorithm.</title>
<date>1970</date>
<journal>Communications of the ACM</journal>
<volume>13</volume>
<issue>2</issue>
<pages>94--102</pages>
<marker>Earley, 1970</marker>
<rawString>Earley, J. 1970. An Efficient Context-free Parsing Algorithm. Communications of the ACM 13(2): 94-102.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Mirostaw Batiko</author>
</authors>
<title>who is a lecturer at the Institute of Polish Language, Warsaw University, has MScs in both computer science and linguistics. His recent research has concentrated on the problems of evaluating natural-language parsers, and on parsing Polish. Batiko&apos;s address is: Instytut Jczyka Polskiego, Universytet Warszawski,</title>
<journal>Krakowski Przedmiescie</journal>
<volume>26</volume>
<pages>00--325</pages>
<location>Warszawa, Poland.</location>
<marker>Batiko, </marker>
<rawString>Mirostaw Batiko, who is a lecturer at the Institute of Polish Language, Warsaw University, has MScs in both computer science and linguistics. His recent research has concentrated on the problems of evaluating natural-language parsers, and on parsing Polish. Batiko&apos;s address is: Instytut Jczyka Polskiego, Universytet Warszawski, Krakowski Przedmiescie 26/ 28, 00-325 Warszawa, Poland.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>