<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000243">
<title confidence="0.991928">
Language-independent Compound Splitting with Morphological Operations
</title>
<author confidence="0.991007">
Klaus Macherey1 Andrew M. Dai2 David Talbot1 Ashok C. Popat1 Franz Och1
</author>
<affiliation confidence="0.95248">
1Google Inc. 2University of Edinburgh
</affiliation>
<address confidence="0.910407">
1600 Amphitheatre Pkwy. 10 Crichton Street
Mountain View, CA 94043, USA Edinburgh, UK EH8 9AB
</address>
<email confidence="0.998812">
{kmach,talbot,popat,och}@google.com a.dai@ed.ac.uk
</email>
<sectionHeader confidence="0.993884" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9999445">
Translating compounds is an important prob-
lem in machine translation. Since many com-
pounds have not been observed during train-
ing, they pose a challenge for translation sys-
tems. Previous decompounding methods have
often been restricted to a small set of lan-
guages as they cannot deal with more complex
compound forming processes. We present a
novel and unsupervised method to learn the
compound parts and morphological operations
needed to split compounds into their com-
pound parts. The method uses a bilingual
corpus to learn the morphological operations
required to split a compound into its parts.
Furthermore, monolingual corpora are used to
learn and filter the set of compound part can-
didates. We evaluate our method within a ma-
chine translation task and show significant im-
provements for various languages to show the
versatility of the approach.
</bodyText>
<sectionHeader confidence="0.998992" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9999686">
A compound is a lexeme that consists of more than
one stem. Informally, a compound is a combina-
tion of two or more words that function as a single
unit of meaning. Some compounds are written as
space-separated words, which are called open com-
pounds (e.g. hard drive), while others are written
as single words, which are called closed compounds
(e.g. wallpaper). In this paper, we shall focus only
on closed compounds because open compounds do
not require further splitting.
The objective of compound splitting is to split a
compound into its corresponding sequence of con-
stituents. If we look at how compounds are created
from lexemes in the first place, we find that for some
languages, compounds are formed by concatenating
existing words, while in other languages compound-
ing additionally involves certain morphological op-
erations. These morphological operations can be-
come very complex as we illustrate in the following
case studies.
</bodyText>
<subsectionHeader confidence="0.999239">
1.1 Case Studies
</subsectionHeader>
<bodyText confidence="0.99953675">
Below, we look at splitting compounds from 3 differ-
ent languages. The examples introduce in part the
notation used for the decision rule outlined in Sec-
tion 3.1.
</bodyText>
<subsectionHeader confidence="0.686424">
1.1.1 English Compound Splitting
</subsectionHeader>
<bodyText confidence="0.999928375">
The word flowerpot can appear as a closed or open
compound in English texts. To automatically split
the closed form we have to try out every split point
and choose the split with minimal costs according to
a cost function. Let&apos;s assume that we already know
that flowerpot must be split into two parts. Then we
have to position two split points that mark the end of
each part (one is always reserved for the last charac-
ter position). The number of split points is denoted
by K (i.e. K = 2), while the position of split points
is denoted by n1 and n2. Since flowerpot consists of
9 characters, we have 8 possibilities to position split
point n1 within the characters c1, ... , c8. The final
split point corresponds with the last character, that is,
n2 = 9. Trying out all possible single splits results
in the following candidates:
</bodyText>
<figure confidence="0.787023666666667">
flowerpot f + lowerpot
flowerpot fl + owerpot
...
flowerpot —* flower + pot
...
flowerpot —* flowerpo + t
</figure>
<page confidence="0.934889">
1395
</page>
<note confidence="0.9792145">
Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 1395–1404,
Portland, Oregon, June 19-24, 2011. c�2011 Association for Computational Linguistics
</note>
<bodyText confidence="0.99929625">
If we associate each compound part candidate with
a cost that reflects how frequent this part occurs in a
large collection of English texts, we expect that the
correct split flower + pot will have the lowest cost.
</bodyText>
<subsectionHeader confidence="0.577091">
1.1.2 German Compound Splitting
</subsectionHeader>
<bodyText confidence="0.9992846">
The previous example covered a case where the com-
pound is constructed by directly concatenating the
compound parts. While this works well for En-
glish, other languages require additional morpholog-
ical operations. To demonstrate, we look at the Ger-
man compound Verkehrszeichen (traffic sign) which
consists of the two nouns Verkehr (traffic) and Zei-
chen (sign). Let&apos;s assume that we want to split this
word into 3 parts, that is, K = 3. Then, we get the
following candidates.
</bodyText>
<figure confidence="0.997936166666667">
Verkehrszeichen → V + e + rkehrszeichen
Verkehrszeichen → V + er + kehrszeichen
...
Verkehrszeichen → Verkehr + s + zeichen
...
Verkehrszeichen → Verkehrszeich + e + n
</figure>
<bodyText confidence="0.999084454545455">
Using the same procedure as described before, we
can lookup the compound parts in a dictionary or de-
termine their frequency from large text collections.
This yields the optimal split points n1 = 7, n2 =
8, n3 = 15. The interesting part here is the addi-
tional s morpheme, which is called a linking mor-
pheme, because it combines the two compound parts
to form the compound Verkehrszeichen. If we have
a list of all possible linking morphemes, we can
hypothesize them between two ordinary compound
parts.
</bodyText>
<subsectionHeader confidence="0.954981">
1.1.3 Greek Compound Splitting
</subsectionHeader>
<bodyText confidence="0.999449411764706">
The previous example required the insertion of a
linking morpheme between two compound parts.
We shall now look at a more complicated mor-
phological operation. The Greek compound
xαpioxovio (cardboard box) consists of the two
parts xαpii (paper) and xovii (box). Here, the
problem is that the parts xαpio and xovio are not
valid words in Greek. To lookup the correct words,
we must substitute the suffix of the compound part
candidates with some other morphemes. If we allow
the compound part candidates to be transformed by
some morphological operation, we can lookup the
transformed compound parts in a dictionary or de-
termine their frequencies in some large collection of
Greek texts. Let&apos;s assume that we need only one split
point. Then this yields the following compound part
candidates:
</bodyText>
<equation confidence="0.99596">
xαpioxovio → x + αpioxovio
xαpioxovio → x + αpiixovio g2 : o / i
xαpioxovio → x + αpioxovii g2 : o / i
...
xαpioxovio → χαρτί + κουτί g1 : o / i ,
g2 : o / i
...
xαpioxovio → xαpiixovi + o g1 : o / i
xαpioxovio → xαpiixovi + i g2 : o / i
</equation>
<bodyText confidence="0.994551">
Here, gk : s/t denotes the kth compound part which
is obtained by replacing string s with string t in the
original string, resulting in the transformed part gk.
</bodyText>
<subsectionHeader confidence="0.995336">
1.2 Problems and Objectives
</subsectionHeader>
<bodyText confidence="0.999982083333333">
Our goal is to design a language-independent com-
pound splitter that is useful for machine translation.
The previous examples addressed the importance of
a cost function that favors valid compound parts ver-
sus invalid ones. In addition, the examples have
shown that, depending on the language, the morpho-
logical operations can become very complex. For
most Germanic languages like Danish, German, or
Swedish, the list of possible linking morphemes is
rather small and can be provided manually. How-
ever, in general, these lists can become very large,
and language experts who could provide such lists
might not be at our disposal. Because it seems in-
feasible to list the morphological operations explic-
itly, we want to find and extract those operations
automatically in an unsupervised way and provide
them as an additional knowledge source to the de-
compounding algorithm.
Another problem is how to evaluate the quality
of the compound splitter. One way is to compile
for every language a large collection of compounds
together with their valid splits and to measure the
proportion of correctly split compounds. Unfortu-
nately, such lists do not exist for many languages.
</bodyText>
<page confidence="0.986714">
1396
</page>
<bodyText confidence="0.999937068965517">
While the training algorithm for our compound split-
ter shall be unsupervised, the evaluation data needs
to be verified by human experts. Since we are in-
terested in improving machine translation and to cir-
cumvent the problem of explicitly annotating com-
pounds, we evaluate the compound splitter within a
machine translation task. By decompounding train-
ing and test data of a machine translation system, we
expect an increase in the number of matching phrase
table entries, resulting in better translation quality
measured in BLEU score (Papineni et al., 2002).
If BLEU score is sensitive enough to measure the
quality improvements obtained from decompound-
ing, there is no need to generate a separate gold stan-
dard for compounds.
Finally, we do not want to split non-compounds
and named entities because we expect them to be
translated non-compositionally. For example, the
German word Deutschland (Germany) could be split
into two parts Deutsch (German) + Land (coun-
try). Although this is a valid split, named entities
should be kept as single units. An example for a
non-compound is the German participle vereinbart
(agreed) which could be wrongly split into the parts
Verein (club) + Bart (beard). To avoid overly eager
splitting, we will compile a list of non-compounds in
an unsupervised way that serves as an exception list
for the compound splitter. To summarize, we aim to
solve the following problems:
</bodyText>
<listItem confidence="0.9968598">
• Define a cost function that favors valid com-
pound parts and rejects invalid ones.
• Learn morphological operations, which is im-
portant for languages that have complex com-
pound forming processes.
• Apply compound splitting to machine transla-
tion to aid in translation of compounds that have
not been seen in the bilingual training data.
• Avoid splitting non-compounds and named en-
tities as this may result in wrong translations.
</listItem>
<sectionHeader confidence="0.999283" genericHeader="introduction">
2 Related work
</sectionHeader>
<bodyText confidence="0.999803140350877">
Previous work concerning decompounding can be
divided into two categories: monolingual and bilin-
gual approaches.
Brown (2002) describes a corpus-driven approach
for splitting compounds in a German-English trans-
lation task derived from a medical domain. A large
proportion of the tokens in both texts are cognates
with a Latin or Greek etymological origin. While the
English text keeps the cognates as separate tokens,
they are combined into compounds in the German
text. To split these compounds, the author compares
both the German and the English cognates on a char-
acter level to find reasonable split points. The algo-
rithm described by the author consists of a sequence
of if-then-else conditions that are applied on the two
cognates to find the split points. Furthermore, since
the method relies on finding similar character se-
quences between both the source and the target to-
kens, the approach is restricted to cognates and can-
not be applied to split more complex compounds.
Koehn and Knight (2003) present a frequency-
based approach to compound splitting for German.
The compound parts and their frequencies are es-
timated from a monolingual corpus. As an exten-
sion to the frequency approach, the authors describe
a bilingual approach where they use a dictionary ex-
tracted from parallel data to find better split options.
The authors allow only two linking morphemes be-
tween compound parts and a few letters that can be
dropped. In contrast to our approach, those opera-
tions are not learned automatically, but must be pro-
vided explicitly.
Garera and Yarowsky (2008) propose an approach
to translate compounds without the need for bilin-
gual training texts. The compound splitting pro-
cedure mainly follows the approach from (Brown,
2002) and (Koehn and Knight, 2003), so the em-
phasis is put on finding correct translations for com-
pounds. To accomplish this, the authors use cross-
language compound evidence obtained from bilin-
gual dictionaries. In addition, the authors describe a
simple way to learn glue characters by allowing the
deletion of up to two middle and two end charac-
ters.1 More complex morphological operations are
not taken into account.
Alfonseca et al. (2008b) describe a state-of-the-
art German compound splitter that is particularly ro-
bust with respect to noise and spelling errors. The
compound splitter is trained on monolingual data.
Besides applying frequency and probability-based
methods, the authors also take the mutual informa-
tion of compound parts into account. In addition, the
1However, the glue characters found by this procedure seem
to be biased for at least German and Albanian. A very frequent
glue morpheme like -es- is not listed, while glue morphemes
like -k- and -h- rank very high, although they are invalid glue
morphemes for German. Albanian shows similar problems.
</bodyText>
<page confidence="0.96712">
1397
</page>
<bodyText confidence="0.999912307692308">
authors look for compound parts that occur in dif-
ferent anchor texts pointing to the same document.
All these signals are combined and the weights are
trained using a support vector machine classifier. Al-
fonseca et al. (2008a) apply this compound splitter
on various other Germanic languages.
Dyer (2009) applies a maximum entropy model
of compound splitting to generate segmentation lat-
tices that serve as input to a translation system.
To train the model, reference segmentations are re-
quired. Here, we produce only single best segmen-
tations, but otherwise do not rely on reference seg-
mentations.
</bodyText>
<sectionHeader confidence="0.956238" genericHeader="method">
3 Compound Splitting Algorithm
</sectionHeader>
<bodyText confidence="0.9999212">
In this section, we describe the underlying optimiza-
tion problem and the algorithm used to split a token
into its compound parts. Starting from Bayes&apos; de-
cision rule, we develop the Bellman equation and
formulate a dynamic programming-based algorithm
that takes a word as input and outputs the constituent
compound parts. We discuss the procedure used to
extract compound parts from monolingual texts and
to learn the morphological operations using bilingual
corpora.
</bodyText>
<subsectionHeader confidence="0.99875">
3.1 Decision Rule for Compound Splitting
</subsectionHeader>
<bodyText confidence="0.999941">
Given a token w = c1, ... , cN = cN1 consisting of a
sequence of N characters ci, the objective function
is to find the optimal number K� and sequence of split
points n�Kˆ0 such that the subwords are the constituents
of the token, where2 n0 := 0 and nK := N:
</bodyText>
<equation confidence="0.997929333333333">
w = cN1 → ( K, n�Kˆ0 ) =
= arg max {Pr(cN1 , K, nK0 )} (1)
K,nK0
= arg max {Pr(K) · Pr(cN1 , nK0 |K)}
K,nK0
·p(nk|nk−1, K)} (2)
</equation>
<bodyText confidence="0.8997235">
with p(n0) = p(nK|·) ≡ 1. Equation 2 requires that
token w can be fully decomposed into a sequence
</bodyText>
<footnote confidence="0.724785">
2For algorithmic reasons, we use the start position 0 to rep-
resent a fictitious start symbol before the first character of the
word.
</footnote>
<bodyText confidence="0.999368375">
of lexemes, the compound parts. Thus, determin-
ing the optimal segmentation is sufficient for finding
the constituents. While this may work for some lan-
guages, the subwords are not valid words in general
as discussed in Section 1.1.3. Therefore, we allow
the lexemes to be the result of a transformation pro-
cess, where the transformed lexemes are denoted by
gK1 . This leads to the following refined decision rule:
</bodyText>
<equation confidence="0.963089">
w = cN1 → (K, n�Kˆ0 ,g�Kˆ
1 � =
p(cnk
nk−1+1, nk−1, gk|K)
 |{z }
compound part probability
</equation>
<bodyText confidence="0.935041833333333">
· p(nk|nk−1, K)} (5)
The compound part probability is a zero-order
model. If we penalize each split with a constant split
penalty ξ, and make the probability independent of
the number of splits K, we arrive at the following
decision rule:
</bodyText>
<equation confidence="0.97860825">
w = cN1 → (K, n�Kˆ1 ,g�Kˆ
1 )
p(cnk
nk−1+1, nk−1, gk)} (6)
</equation>
<subsectionHeader confidence="0.985698">
3.2 Dynamic Programming
</subsectionHeader>
<bodyText confidence="0.964105230769231">
We use dynamic programming to find the optimal
split sequence. Each split infers certain costs that
are determined by a cost function. The total costs of
a decomposed word can be computed from the in-
dividual costs of the component parts. For the dy-
namic programming approach, we define the follow-
ing auxiliary function Q with nk = j:
p(cnκ
nκ−1+1, nκ−1,gκ)}
that is, Q(cj1) is equal to the minimal costs (maxi-
mum probability) that we assign to the prefix string
cj 1where we have used k split points at positions nk1.
This yields the following recursive equation:
</bodyText>
<equation confidence="0.9645846">
Q(cj1) = max {ξ · Q(cnk−1
1 )·
nk,gk
· p(cnk
nk−1+1,nk−1,gk)} (7)
</equation>
<table confidence="0.627633913043478">
� arg max {p(K) · K
K,nK0 ∏
k=1
= arg max { Pr(cN 1 , K, nK 0 , gK 1 �} (3)
K,nK0 ,gK 1 { Pr(K) · Pr(cN1 , nK0 , gK1 |K)} (4)
= arg max
K,nK0 ,gK 1
� arg max {p(K) · K
K,nK0 ,gK 1 ∏
k=1
·
= arg max
K,nK0 ,gK 1
K
{ξK · ∏
k=1
p(cnk Q(cj1) = max{ξk · k
nk−1+1, nk−1|K)· nk0,gk1 ∏
κ=1
1398
Algorithm 1 Compound splitting
Input: input word w = c�1
Output: compound parts
</table>
<equation confidence="0.946500764705882">
2(0) = 0
2(1) = ··· = 2(N) = oc
for i = 0,... , N — 1 do
for j = i + 1,...,N do
split-costs = 2(i) + cost(cj�+1, i, gj) +
split-penalty
if split-costs &lt; 2(j) then
2(j) = split-costs
13(j) = (i, gj)
end if
end for
end for
with backpointer
13(j) = arg max
nk,9k
· p(cnk
nk−1+1,nk−1,gk)} (8)
</equation>
<bodyText confidence="0.9971538">
Using logarithms in Equations 7 and 8, we can inter-
pret the quantities as additive costs rather than proba-
bilities. This yields Algorithm 1, which is quadratic
in the length of the input string. By enforcing that
each compound part does not exceed a predefined
constant length `, we can change the second for loop
as follows:
for j = i + 1, ... , min(i + `, N) do
With this change, Algorithm 1 becomes linear in the
length of the input word, O(|w|).
</bodyText>
<sectionHeader confidence="0.827486" genericHeader="method">
4 Cost Function and Knowledge Sources
</sectionHeader>
<bodyText confidence="0.932620714285714">
The performance of Algorithm 1 depends on
the cost function cost(·), that is, the probability
p(cnk
nk−1+1, nk−1, gk). This cost function incorpo-
rates knowledge about morpheme transformations,
morpheme positions within a compound part, and the
compound parts themselves.
</bodyText>
<subsectionHeader confidence="0.990738">
4.1 Learning Morphological Operations using
Phrase Tables
</subsectionHeader>
<bodyText confidence="0.995641375">
Let s and t be strings of the (source) language al-
phabet A. A morphological operation s/t is a pair
of strings s, t E A% where s is replaced by t. With
the usual definition of the Kleene operator *, s and
t can be empty, denoted by ε. An example for such
a pair is ε/es, which models the linking morpheme
es in the German compound Bundesagentur (federal
agency):
</bodyText>
<equation confidence="0.924748">
Bundesagentur — Bund + es + Agentur .
</equation>
<bodyText confidence="0.999844192307692">
Note that by replacing either s or t with ε, we can
model insertions or deletions of morphemes. The
explicit dependence on position nk−1 in Equation 6
allows us to determine if we are at the beginning,
in the middle, or at the end of a token. Thus, we
can distinguish between start, middle, or end mor-
phemes and hypothesize them during search.3 Al-
though not explicitly listed in Algorithm 1, we dis-
allow sequences of linking morphemes. This can
be achieved by setting the costs to infinity for those
morpheme hypotheses, which directly succeed an-
other morpheme hypothesis.
To learn the morphological operations involved
in compounding, we determine the differences be-
tween a compound and its compound parts. This can
be done by computing the Levenshtein distance be-
tween the compound and its compound parts, with
the allowable edit operations being insertion, dele-
tion, or substitution of one or more characters. If we
store the current and previous characters, edit opera-
tion and the location (prefix, infix or suffix) at each
position during calculation of the Levenshtein dis-
tance then we can obtain the morphological opera-
tions required for compounding. Applying the in-
verse operations, that is, replacing t with s yields the
operation required for decompounding.
</bodyText>
<subsectionHeader confidence="0.90918">
4.1.1 Finding Compounds and their Parts
</subsectionHeader>
<bodyText confidence="0.999977357142857">
To learn the morphological operations, we need
compounds together with their compound parts. The
basic idea of finding compound candidates and their
compound parts in a bilingual setting are related to
the ideas presented in (Garera and Yarowsky, 2008).
Here, we use phrase tables rather than dictionaries.
Although phrase tables might contain more noise, we
believe that overall phrase tables cover more phe-
nomena of translations than what can be found in dic-
tionaries. The procedure is as follows. We are given
a phrase table that provides translations for phrases
from a source language l into English and from En-
glish into l. Under the assumption that English does
not contain many closed compounds, we can search
</bodyText>
<footnote confidence="0.915020333333333">
3We jointly optimize over K and the split points nk, so we
know that cn�
n��1 is a suffix of w.
</footnote>
<equation confidence="0.9149425">
{ξ · 2(cnk−1
1 )·
</equation>
<page confidence="0.98244">
1399
</page>
<bodyText confidence="0.999908125">
the phrase table for those single-token source words
f in language l, which translate into multi-token En-
glish phrases e1, ... , en for n &gt; 1. This results
in a list of (f; e1, ... , en) pairs, which are poten-
tial compound candidates together with their English
translations. If for each pair, we take each token ei
from the English (multi-token) phrase and lookup
the corresponding translation for language l to get
gi, we should find entries that have at least some
partial match with the original source word f, if f
is a true compound. Because the translation phrase
table was generated automatically during the train-
ing of a multi-language translation system, there is
no guarantee that the original translations are cor-
rect. Thus, the bilingual extraction procedure is
subject to introduce a certain amount of noise. To
mitigate this, thresholds such as minimum edit dis-
tance between the potential compound and its parts,
minimum co-occurrence frequencies for the selected
bilingual phrase pairs and minimum source and tar-
get word lengths are used to reduce the noise at the
expense of finding fewer compounds. Those entries
that obey these constraints are output as triples of
form:
</bodyText>
<equation confidence="0.997601">
(f;e1,..., en; g1,...,gn) (9)
</equation>
<bodyText confidence="0.993746">
where
</bodyText>
<listItem confidence="0.999484">
• f is likely to be a compound,
• e1, ... , en is the English translation, and
• g1, ... , gn are the compound parts of f.
</listItem>
<bodyText confidence="0.9998457">
The following example for German illustrates the
process. Suppose that the most probable translation
for Überweisungsbetrag is transfer amount using the
phrase table. We then look up the translation back to
German for each translated token: transfer translates
to Überweisung and amount translates to Betrag. We
then calculate the distance between all permutations
of the parts and the original compound and choose
the one with the lowest distance and highest transla-
tion probability: Überweisung Betrag.
</bodyText>
<subsectionHeader confidence="0.968245">
4.2 Monolingual Extraction of Compound
Parts
</subsectionHeader>
<bodyText confidence="0.999984166666667">
The most important knowledge source required for
Algorithm 1 is a word-frequency list of compound
parts that is used to compute the split costs. The
procedure described in Section 4.1.1 is useful for
learning morphological operations, but it is not suffi-
cient to extract an exhaustive list of compound parts.
Such lists can be extracted from monolingual data for
which we use language model (LM) word frequency
lists in combination with some filter steps. The ex-
traction process is subdivided into 2 passes, one over
a high-quality news LM to extract the parts and the
other over a web LM to filter the parts.
</bodyText>
<subsectionHeader confidence="0.740277">
4.2.1 Phase 1: Bootstrapping pass
</subsectionHeader>
<bodyText confidence="0.999996153846154">
In the first pass, we generate word frequency lists de-
rived from news articles for multiple languages. The
motivation for using news articles rather than arbi-
trary web texts is that news articles are in general
less noisy and contain fewer spelling mistakes. The
language-dependent word frequency lists are filtered
according to a sequence of filter steps. These filter
steps include discarding all words that contain digits
or punctuations other than hyphen, minimum occur-
rence frequency, and a minimum length which we
set to 4. The output is a table that contains prelim-
inary compound parts together with their respective
counts for each language.
</bodyText>
<subsectionHeader confidence="0.640245">
4.2.2 Phase 2: Filtering pass
</subsectionHeader>
<bodyText confidence="0.99990825">
In the second pass, the compound part vocabulary
is further reduced and filtered. We generate a LM
vocabulary based on arbitrary web texts for each lan-
guage and build a compound splitter based on the vo-
cabulary list that was generated in phase 1. We now
try to split every word of the web LM vocabulary
based on the compound splitter model from phase
1. For the compound parts that occur in the com-
pound splitter output, we determine how often each
compound part was used and output only those com-
pound parts whose frequency exceed a predefined
threshold n.
</bodyText>
<subsectionHeader confidence="0.997474">
4.3 Example
</subsectionHeader>
<bodyText confidence="0.999476636363636">
Suppose we have the following word frequencies
output from pass 1:
floor 10k poll 4k
flow 9k pot 5k
flower 15k potter 20k
In pass 2, we observe the word flowerpot. With the
above list, the only compound parts used are flower
and pot. If we did not split any other words and
threshold at n = 1, our final list would consist of
flower and pot. This filtering pass has the advantage
of outputting only those compound part candidates
</bodyText>
<page confidence="0.973972">
1400
</page>
<bodyText confidence="0.999991769230769">
which were actually used to split words from web
texts. The thresholding also further reduces the risk
of introducing noise. Another advantage is that since
the set of parts output in the first pass may contain a
high number of compounds, the filter is able to re-
move a large number of these compounds by exam-
ining relative frequencies. In our experiments, we
have assumed that compound part frequencies are
higher than the compound frequency and so remove
words from the part list that can themselves be split
and have a relatively high frequency. Finally, after
removing the low frequency compound parts, we ob-
tain the final compound splitter vocabulary.
</bodyText>
<subsectionHeader confidence="0.999031">
4.4 Generating Exception Lists
</subsectionHeader>
<bodyText confidence="0.999991">
To avoid eager splitting of non-compounds and
named entities, we use a variant of the procedure de-
scribed in Section 4.1.1. By emitting all those source
words that translate with high probability into single-
token English words, we obtain a list of words that
should not be split.4
</bodyText>
<subsectionHeader confidence="0.979441">
4.5 Final Cost Function
</subsectionHeader>
<bodyText confidence="0.999954">
The final cost function is defined by the following
components which are combined log-linearly.
</bodyText>
<listItem confidence="0.9759784">
• The split penalty � penalizes each compound
part to avoid eager splitting.
• The cost for each compound part gk is com-
puted as − log C(gk), where C(gk) is the un-
igram count for gk obtained from the news LM
word frequency list. Since we use a zero-order
model, we can ignore the normalization and
work with unigram counts rather than unigram
probabilities.
• Because Algorithm 1 iterates over the charac-
ters of the input token w, we can infer from the
boundaries (i, j) if we are at the start, in the
middle, or at the end of the token. Applying
a morphological operation adds costs 1 to the
overall costs.
</listItem>
<bodyText confidence="0.99585125">
Although the cost function is language dependent,
we use the same split penalty weight � = 20 for all
languages except for German, where the split penalty
weight is set to 13.5.
</bodyText>
<sectionHeader confidence="0.999654" genericHeader="evaluation">
5 Results
</sectionHeader>
<bodyText confidence="0.99999176744186">
To show the language independence of the approach
within a machine translation task, we translate from
languages belonging to different language families
into English. The publicly available Europarl corpus
is not suitable for demonstrating the utility of com-
pound splitting because there are few unseen com-
pounds in the test section of the Europarl corpus.
The WMT shared translation task has a broader do-
main compared to Europarl but covers only a few
languages. Hence, we present results for German-
English using the WMT-07 data and cover other lan-
guages using non-public corpora which contain news
as well as open-domain web texts. Table 1 lists the
various corpus statistics. The source languages are
grouped according to their language family.
For learning the morphological operations, we al-
lowed the substitution of at most 2 consecutive char-
acters. Furthermore, we only allowed at most one
morphological substitution to avoid introducing too
much noise. The found morphological operations
were sorted according to their frequencies. Those
which occurred less than 100 times were discarded.
Examples of extracted morphological operations are
given in Table 2. Because the extraction procedure
described in Section 4.1 is not purely restricted to the
case of decompounding, we found that many mor-
phological operations emitted by this procedure re-
flect morphological variations that are not directly
linked to compounding, but caused by inflections.
To generate the language-dependent lists of com-
pound parts, we used language model vocabulary
lists5 generated from news texts for different lan-
guages as seeds for the first pass. These lists were
filtered by discarding all entries that either con-
tained digits, punctuations other than hyphens, or se-
quences of the same characters. In addition, the in-
frequent entries were discarded as well to further re-
duce noise. For the second pass, we used the lists
generated in the first pass together with the learned
morphological operations to construct a preliminary
compound splitter. We then generated vocabulary
lists for monolingual web texts and applied the pre-
liminary compound splitter onto this list. The used
</bodyText>
<footnote confidence="0.9934204">
4Because we will translate only into English, this is not an
issue for the introductory example flowerpot.
5The vocabulary lists also contain the word frequencies. We
use the term vocabulary list synonymously for a word frequency
list.
</footnote>
<page confidence="0.909114">
1401
</page>
<table confidence="0.999768625">
Family Src Language #Tokens Train src/trg #Tokens Dev src/trg #Tokens Tst src/trg
Germanic Danish 196M 201M 43,475 44,479 72,275 74,504
German 43M 45M 23,151 22,646 45,077 43,777
Norwegian 251M 255M 42,096 43,824 70,257 73,556
Swedish 201M 213M 42,365 44,559 70,666 74,547
Hellenic Greek 153M 148M 47,576 44,658 79,501 74,776
Uralic Estonian 199M 244M 34,987 44,658 57,916 74,765
Finnish 205M 246M 32,119 44,658 53,365 74,771
</table>
<tableCaption confidence="0.9980145">
Table 1: Corpus statistics for various language pairs. The target language is always English. The source languages are
grouped according to their language family.
</tableCaption>
<table confidence="0.99914725">
Language morpholog. operations
Danish -/ε, s/ε
German -/ε, s/ε, es/ε, n/ε, e/ε, en/ε
Norwegian -/ε, s/ε, e/ε
Swedish -/ε, s/ε
Greek ε/α, ε/ς, ε/rl, ο/ί, ο/ί, ο/ν
Estonian -/ε, e/ε, se/ε
Finnish ε/n, n/ε, ε/en
</table>
<tableCaption confidence="0.9966205">
Table 2: Examples of morphological operations that were
extracted from bilingual corpora.
</tableCaption>
<bodyText confidence="0.999979508196721">
compound parts were collected and sorted according
to their frequencies. Those which were used at least
2 times were kept in the final compound parts lists.
Table 3 reports the number of compound parts kept
after each pass. For example, the Finnish news vo-
cabulary list initially contained 1.7M entries. After
removing non-alpha and infrequent words in the first
filter step, we obtained 190K entries. Using the pre-
liminary compound splitter in the second filter step
resulted in 73K compound part entries.
The finally obtained compound splitter was in-
tegrated into the preprocessing pipeline of a state-
of-the-art statistical phrase-based machine transla-
tion system that works similar to the Moses de-
coder (Koehn et al., 2007). By applying the com-
pound splitter during both training and decoding we
ensured that source language tokens were split in
the same way. Table 4 presents results for vari-
ous language-pairs with and without decompound-
ing. Both the Germanic and the Uralic languages
show significant BLEU score improvements of 1.3
BLEU points on average. The confidence inter-
vals were computed using the bootstrap resampling
normal approximation method described in (Noreen,
1989). While the compounding process for Ger-
manic languages is rather simple and requires only a
few linking morphemes, compounds used in Uralic
languages have a richer morphology. In contrast to
the Germanic and Uralic languages, we did not ob-
serve improvements for Greek. To investigate this
lack of performance, we turned off transliteration
and kept unknown source words in their original
script. We analyzed the number of remaining source
characters in the baseline system and the system us-
ing compound splitting by counting the number of
Greek characters in the translation output. The num-
ber of remaining Greek characters in the translation
output was reduced from 6, 715 in the baseline sys-
tem to 3, 624 in the system which used decompound-
ing. In addition, a few other metrics like the number
of source words that consisted of more than 15 char-
acters decreased as well. Because we do not know
how many compounds are actually contained in the
Greek source sentences6 and because the frequency
of using compounds might vary across languages,
we cannot expect the same performance gains across
languages belonging to different language families.
An interesting observation is, however, that if one
language from a language family shows performance
gains, then there are performance gains for all the
languages in that family. We also investigated the ef-
fect of not using any morphological operations. Dis-
allowing all morphological operations accounts for
a loss of 0.1 - 0.2 BLEU points across translation
systems and increases the compound parts vocabu-
lary lists by up to 20%, which means that most of the
gains can be achieved with simple concatenation.
The exception lists were generated according to
the procedure described in Section 4.4. Since we
aimed for precision rather than recall when con-
structing these lists, we inserted only those source
</bodyText>
<footnote confidence="0.992904">
6Quite a few of the remaining Greek characters belong to
rare named entities.
</footnote>
<page confidence="0.959986">
1402
</page>
<table confidence="0.999776875">
Language initial vocab size #parts after 1st pass #parts after 2nd pass
Danish 918,708 132,247 49,592
German 7,908,927 247,606 45,059
Norwegian 1,417,129 237,099 62,107
Swedish 1,907,632 284,660 82,120
Greek 877,313 136,436 33,130
Estonian 742,185 81,132 36,629
Finnish 1,704,415 190,507 73,568
</table>
<tableCaption confidence="0.996003">
Table 3: Number of remaining compound parts for various languages after the first and second filter step.
</tableCaption>
<table confidence="0.999665">
System BLEU[%] w/o splitting BLEU[%] w splitting A CI 95%
Danish 42.55 44.39 1.84 (f 0.65)
German WMT-07 25.76 26.60 0.84 (f 0.70)
Norwegian 42.77 44.58 1.81 (f 0.64)
Swedish 36.28 38.04 1.76 (f 0.62)
Greek 31.85 31.91 0.06 (f 0.61)
Estonian 20.52 21.20 0.68 (f 0.50)
Finnish 25.24 26.64 1.40 (f 0.57)
</table>
<tableCaption confidence="0.996107">
Table 4: BLEU score results for various languages translated into English with and without compound splitting.
</tableCaption>
<table confidence="0.998383571428571">
Language Split source translation
German no Die EU ist nicht einfach ein Freundschaftsclub. The EU is not just a Freundschaftsclub.
Greek yes Die EU ist nicht einfach ein Freundschaft Club The EU is not simply a friendship club.
Finnish no Τι είναι παλμοκωδική διαμόρcpωσq; What παλμοκωδική configuration?
yes Τι είναι παλμο κωδικq διαμόρcpωσq; What is pulse code modulation?
no Lisävuodevaatteet ja pyyheliinat ovat kaapissa. Lisävuodevaatteet and towels are in the closet.
yes Lisä Vuode Vaatteet ja pyyheliinat ovat kaapissa. Extra bed linen and towels are in the closet.
</table>
<tableCaption confidence="0.999638">
Table 5: Examples of translations into English with and without compound splitting.
</tableCaption>
<bodyText confidence="0.9998575">
words whose co-occurrence count with a unigram
translation was at least 1, 000 and whose translation
probability was larger than 0.1. Furthermore, we re-
quired that at least 70% of all target phrase entries for
a given source word had to be unigrams. All decom-
pounding results reported in Table 4 were generated
using these exception lists, which prevented wrong
splits caused by otherwise overly eager splitting.
</bodyText>
<sectionHeader confidence="0.99716" genericHeader="conclusions">
6 Conclusion and Outlook
</sectionHeader>
<bodyText confidence="0.99991848">
We have presented a language-independent method
for decompounding that improves translations for
compounds that otherwise rarely occur in the bilin-
gual training data. We learned a set of morpholog-
ical operations from a translation phrase table and
determined suitable compound part candidates from
monolingual data in a two pass process. This al-
lowed us to learn morphemes and operations for lan-
guages where these lists are not available. In addi-
tion, we have used the bilingual information stored
in the phrase table to avoid splitting non-compounds
as well as frequent named entities. All knowledge
sources were combined in a cost function that was
applied in a compound splitter based on dynamic
programming. Finally, we have shown this improves
translation performance on languages from different
language families.
The weights were not optimized in a systematic
way but set manually to their respective values. In
the future, the weights of the cost function should be
learned automatically by optimizing an appropriate
error function. Instead of using gold data, the devel-
opment data for optimizing the error function could
be collected without supervision using the methods
proposed in this paper.
</bodyText>
<page confidence="0.979869">
1403
</page>
<sectionHeader confidence="0.995807" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99988225490196">
Enrique Alfonseca, Slaven Bilac, and Stefan Paries.
2008a. Decompounding query keywords from com-
pounding languages. In Proc. of the 46th Annual Meet-
ing of the Association for Computational Linguistics
(ACL): Human Language Technologies (HLT), pages
253--256, Columbus, Ohio, USA, June.
Enrique Alfonseca, Slaven Bilac, and Stefan Paries.
2008b. German decompounding in a difficult corpus.
In A. Gelbukh, editor, Lecture Notes in Computer Sci-
ence (LNCS): Proc. of the 9th Int. Conf. on Intelligent
Text Processing and Computational Linguistics (CI-
CLING), volume 4919, pages 128--139. Springer Ver-
lag, February.
Ralf D. Brown. 2002. Corpus-Driven Splitting of Com-
pound Words. In Proc. ofthe 9th Int. Conf. on Theoret-
ical and MethodologicalIssues in Machine Translation
(TMI), pages 12--21, Keihanna, Japan, March.
Chris Dyer. 2009. Using a maximum entropy model
to build segmentation lattices for mt. In Proc. of
the Human Language Technologies (HLT): The An-
nual Conf. of the North American Chapter of the Asso-
ciation for Computational Linguistics (NAACL), pages
406--414, Boulder, Colorado, June.
Nikesh Garera and David Yarowsky. 2008. Translating
Compounds by Learning Component Gloss Transla-
tion Models via Multiple Languages. In Proc. of the
3rd Internation Conference on Natural Language Pro-
cessing (IJCNLP), pages 403--410, Hyderabad, India,
January.
Philipp Koehn and Kevin Knight. 2003. Empirical
methods for compound splitting. In Proc. of the 10th
Conf. of the European Chapter of the Association for
Computational Linguistics (EACL), volume 1, pages
187--193, Budapest, Hungary, April.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran, Richard
Zens, Chris Dyer, Ondrej Bojar, Alexandra Constantin,
and Evan Herbst. 2007. Moses: Open source toolkit
for statistical machine translation. In Proc. of the 44th
Annual Meeting of the Association for Computational
Linguistics (ACL), volume 1, pages 177--180, Prague,
Czech Republic, June.
Eric W. Noreen. 1989. Computer-Intensive Methods for
Testing Hypotheses. John Wiley &amp; Sons, Canada.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a Method for Automatic
Evaluation of Machine Translation. In Proc. of the
40th Annual Meeting of the Association for Compu-
tational Linguistics (ACL), pages 311--318, Philadel-
phia, Pennsylvania, July.
</reference>
<page confidence="0.996493">
1404
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.947256">
<title confidence="0.999862">Language-independent Compound Splitting with Morphological Operations</title>
<author confidence="0.999988">Andrew M David Ashok C Franz</author>
<affiliation confidence="0.999836">Inc. of Edinburgh</affiliation>
<address confidence="0.986543">1600 Amphitheatre Pkwy. 10 Crichton Street Mountain View, CA 94043, USA Edinburgh, UK EH8 9AB</address>
<email confidence="0.985165">kmach@google.coma.dai@ed.ac.uk</email>
<email confidence="0.985165">talbot@google.coma.dai@ed.ac.uk</email>
<email confidence="0.985165">popat@google.coma.dai@ed.ac.uk</email>
<email confidence="0.985165">och@google.coma.dai@ed.ac.uk</email>
<abstract confidence="0.999200523809524">Translating compounds is an important problem in machine translation. Since many compounds have not been observed during training, they pose a challenge for translation systems. Previous decompounding methods have often been restricted to a small set of languages as they cannot deal with more complex compound forming processes. We present a novel and unsupervised method to learn the compound parts and morphological operations needed to split compounds into their compound parts. The method uses a bilingual corpus to learn the morphological operations required to split a compound into its parts. Furthermore, monolingual corpora are used to learn and filter the set of compound part candidates. We evaluate our method within a machine translation task and show significant improvements for various languages to show the versatility of the approach.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Enrique Alfonseca</author>
<author>Slaven Bilac</author>
<author>Stefan Paries</author>
</authors>
<title>Decompounding query keywords from compounding languages.</title>
<date>2008</date>
<booktitle>In Proc. of the 46th Annual Meeting of the Association for Computational Linguistics (ACL): Human Language Technologies (HLT),</booktitle>
<pages>253--256</pages>
<location>Columbus, Ohio, USA,</location>
<contexts>
<context position="11330" citStr="Alfonseca et al. (2008" startWordPosition="1871" endWordPosition="1874">Yarowsky (2008) propose an approach to translate compounds without the need for bilingual training texts. The compound splitting procedure mainly follows the approach from (Brown, 2002) and (Koehn and Knight, 2003), so the emphasis is put on finding correct translations for compounds. To accomplish this, the authors use crosslanguage compound evidence obtained from bilingual dictionaries. In addition, the authors describe a simple way to learn glue characters by allowing the deletion of up to two middle and two end characters.1 More complex morphological operations are not taken into account. Alfonseca et al. (2008b) describe a state-of-theart German compound splitter that is particularly robust with respect to noise and spelling errors. The compound splitter is trained on monolingual data. Besides applying frequency and probability-based methods, the authors also take the mutual information of compound parts into account. In addition, the 1However, the glue characters found by this procedure seem to be biased for at least German and Albanian. A very frequent glue morpheme like -es- is not listed, while glue morphemes like -k- and -h- rank very high, although they are invalid glue morphemes for German. </context>
</contexts>
<marker>Alfonseca, Bilac, Paries, 2008</marker>
<rawString>Enrique Alfonseca, Slaven Bilac, and Stefan Paries. 2008a. Decompounding query keywords from compounding languages. In Proc. of the 46th Annual Meeting of the Association for Computational Linguistics (ACL): Human Language Technologies (HLT), pages 253--256, Columbus, Ohio, USA, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Enrique Alfonseca</author>
<author>Slaven Bilac</author>
<author>Stefan Paries</author>
</authors>
<title>German decompounding in a difficult corpus.</title>
<date>2008</date>
<booktitle>Lecture Notes in Computer Science (LNCS): Proc. of the 9th Int. Conf. on Intelligent Text Processing and Computational Linguistics (CICLING),</booktitle>
<volume>4919</volume>
<pages>128--139</pages>
<editor>In A. Gelbukh, editor,</editor>
<publisher>Springer Verlag, February.</publisher>
<contexts>
<context position="11330" citStr="Alfonseca et al. (2008" startWordPosition="1871" endWordPosition="1874">Yarowsky (2008) propose an approach to translate compounds without the need for bilingual training texts. The compound splitting procedure mainly follows the approach from (Brown, 2002) and (Koehn and Knight, 2003), so the emphasis is put on finding correct translations for compounds. To accomplish this, the authors use crosslanguage compound evidence obtained from bilingual dictionaries. In addition, the authors describe a simple way to learn glue characters by allowing the deletion of up to two middle and two end characters.1 More complex morphological operations are not taken into account. Alfonseca et al. (2008b) describe a state-of-theart German compound splitter that is particularly robust with respect to noise and spelling errors. The compound splitter is trained on monolingual data. Besides applying frequency and probability-based methods, the authors also take the mutual information of compound parts into account. In addition, the 1However, the glue characters found by this procedure seem to be biased for at least German and Albanian. A very frequent glue morpheme like -es- is not listed, while glue morphemes like -k- and -h- rank very high, although they are invalid glue morphemes for German. </context>
</contexts>
<marker>Alfonseca, Bilac, Paries, 2008</marker>
<rawString>Enrique Alfonseca, Slaven Bilac, and Stefan Paries. 2008b. German decompounding in a difficult corpus. In A. Gelbukh, editor, Lecture Notes in Computer Science (LNCS): Proc. of the 9th Int. Conf. on Intelligent Text Processing and Computational Linguistics (CICLING), volume 4919, pages 128--139. Springer Verlag, February.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ralf D Brown</author>
</authors>
<title>Corpus-Driven Splitting of Compound Words.</title>
<date>2002</date>
<booktitle>In Proc. ofthe 9th Int. Conf. on Theoretical and MethodologicalIssues in Machine Translation (TMI),</booktitle>
<pages>12--21</pages>
<location>Keihanna, Japan,</location>
<contexts>
<context position="9279" citStr="Brown (2002)" startWordPosition="1537" endWordPosition="1538"> we aim to solve the following problems: • Define a cost function that favors valid compound parts and rejects invalid ones. • Learn morphological operations, which is important for languages that have complex compound forming processes. • Apply compound splitting to machine translation to aid in translation of compounds that have not been seen in the bilingual training data. • Avoid splitting non-compounds and named entities as this may result in wrong translations. 2 Related work Previous work concerning decompounding can be divided into two categories: monolingual and bilingual approaches. Brown (2002) describes a corpus-driven approach for splitting compounds in a German-English translation task derived from a medical domain. A large proportion of the tokens in both texts are cognates with a Latin or Greek etymological origin. While the English text keeps the cognates as separate tokens, they are combined into compounds in the German text. To split these compounds, the author compares both the German and the English cognates on a character level to find reasonable split points. The algorithm described by the author consists of a sequence of if-then-else conditions that are applied on the t</context>
<context position="10893" citStr="Brown, 2002" startWordPosition="1801" endWordPosition="1802">from a monolingual corpus. As an extension to the frequency approach, the authors describe a bilingual approach where they use a dictionary extracted from parallel data to find better split options. The authors allow only two linking morphemes between compound parts and a few letters that can be dropped. In contrast to our approach, those operations are not learned automatically, but must be provided explicitly. Garera and Yarowsky (2008) propose an approach to translate compounds without the need for bilingual training texts. The compound splitting procedure mainly follows the approach from (Brown, 2002) and (Koehn and Knight, 2003), so the emphasis is put on finding correct translations for compounds. To accomplish this, the authors use crosslanguage compound evidence obtained from bilingual dictionaries. In addition, the authors describe a simple way to learn glue characters by allowing the deletion of up to two middle and two end characters.1 More complex morphological operations are not taken into account. Alfonseca et al. (2008b) describe a state-of-theart German compound splitter that is particularly robust with respect to noise and spelling errors. The compound splitter is trained on m</context>
</contexts>
<marker>Brown, 2002</marker>
<rawString>Ralf D. Brown. 2002. Corpus-Driven Splitting of Compound Words. In Proc. ofthe 9th Int. Conf. on Theoretical and MethodologicalIssues in Machine Translation (TMI), pages 12--21, Keihanna, Japan, March.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chris Dyer</author>
</authors>
<title>Using a maximum entropy model to build segmentation lattices for mt.</title>
<date>2009</date>
<booktitle>In Proc. of the Human Language Technologies (HLT): The Annual Conf. of the North American Chapter of the Association for Computational Linguistics (NAACL),</booktitle>
<pages>406--414</pages>
<location>Boulder, Colorado,</location>
<contexts>
<context position="12272" citStr="Dyer (2009)" startWordPosition="2022" endWordPosition="2023"> 1However, the glue characters found by this procedure seem to be biased for at least German and Albanian. A very frequent glue morpheme like -es- is not listed, while glue morphemes like -k- and -h- rank very high, although they are invalid glue morphemes for German. Albanian shows similar problems. 1397 authors look for compound parts that occur in different anchor texts pointing to the same document. All these signals are combined and the weights are trained using a support vector machine classifier. Alfonseca et al. (2008a) apply this compound splitter on various other Germanic languages. Dyer (2009) applies a maximum entropy model of compound splitting to generate segmentation lattices that serve as input to a translation system. To train the model, reference segmentations are required. Here, we produce only single best segmentations, but otherwise do not rely on reference segmentations. 3 Compound Splitting Algorithm In this section, we describe the underlying optimization problem and the algorithm used to split a token into its compound parts. Starting from Bayes&apos; decision rule, we develop the Bellman equation and formulate a dynamic programming-based algorithm that takes a word as inp</context>
</contexts>
<marker>Dyer, 2009</marker>
<rawString>Chris Dyer. 2009. Using a maximum entropy model to build segmentation lattices for mt. In Proc. of the Human Language Technologies (HLT): The Annual Conf. of the North American Chapter of the Association for Computational Linguistics (NAACL), pages 406--414, Boulder, Colorado, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nikesh Garera</author>
<author>David Yarowsky</author>
</authors>
<title>Translating Compounds by Learning Component Gloss Translation Models via Multiple Languages.</title>
<date>2008</date>
<booktitle>In Proc. of the 3rd Internation Conference on Natural Language Processing (IJCNLP),</booktitle>
<pages>403--410</pages>
<location>Hyderabad, India,</location>
<contexts>
<context position="10723" citStr="Garera and Yarowsky (2008)" startWordPosition="1773" endWordPosition="1776">ied to split more complex compounds. Koehn and Knight (2003) present a frequencybased approach to compound splitting for German. The compound parts and their frequencies are estimated from a monolingual corpus. As an extension to the frequency approach, the authors describe a bilingual approach where they use a dictionary extracted from parallel data to find better split options. The authors allow only two linking morphemes between compound parts and a few letters that can be dropped. In contrast to our approach, those operations are not learned automatically, but must be provided explicitly. Garera and Yarowsky (2008) propose an approach to translate compounds without the need for bilingual training texts. The compound splitting procedure mainly follows the approach from (Brown, 2002) and (Koehn and Knight, 2003), so the emphasis is put on finding correct translations for compounds. To accomplish this, the authors use crosslanguage compound evidence obtained from bilingual dictionaries. In addition, the authors describe a simple way to learn glue characters by allowing the deletion of up to two middle and two end characters.1 More complex morphological operations are not taken into account. Alfonseca et al</context>
<context position="18614" citStr="Garera and Yarowsky, 2008" startWordPosition="3157" endWordPosition="3160">nt and previous characters, edit operation and the location (prefix, infix or suffix) at each position during calculation of the Levenshtein distance then we can obtain the morphological operations required for compounding. Applying the inverse operations, that is, replacing t with s yields the operation required for decompounding. 4.1.1 Finding Compounds and their Parts To learn the morphological operations, we need compounds together with their compound parts. The basic idea of finding compound candidates and their compound parts in a bilingual setting are related to the ideas presented in (Garera and Yarowsky, 2008). Here, we use phrase tables rather than dictionaries. Although phrase tables might contain more noise, we believe that overall phrase tables cover more phenomena of translations than what can be found in dictionaries. The procedure is as follows. We are given a phrase table that provides translations for phrases from a source language l into English and from English into l. Under the assumption that English does not contain many closed compounds, we can search 3We jointly optimize over K and the split points nk, so we know that cn� n��1 is a suffix of w. {ξ · 2(cnk−1 1 )· 1399 the phrase tabl</context>
</contexts>
<marker>Garera, Yarowsky, 2008</marker>
<rawString>Nikesh Garera and David Yarowsky. 2008. Translating Compounds by Learning Component Gloss Translation Models via Multiple Languages. In Proc. of the 3rd Internation Conference on Natural Language Processing (IJCNLP), pages 403--410, Hyderabad, India, January.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philipp Koehn</author>
<author>Kevin Knight</author>
</authors>
<title>Empirical methods for compound splitting.</title>
<date>2003</date>
<booktitle>In Proc. of the 10th Conf. of the European Chapter of the Association for Computational Linguistics (EACL),</booktitle>
<volume>1</volume>
<pages>187--193</pages>
<location>Budapest, Hungary,</location>
<contexts>
<context position="10157" citStr="Koehn and Knight (2003)" startWordPosition="1680" endWordPosition="1683">eeps the cognates as separate tokens, they are combined into compounds in the German text. To split these compounds, the author compares both the German and the English cognates on a character level to find reasonable split points. The algorithm described by the author consists of a sequence of if-then-else conditions that are applied on the two cognates to find the split points. Furthermore, since the method relies on finding similar character sequences between both the source and the target tokens, the approach is restricted to cognates and cannot be applied to split more complex compounds. Koehn and Knight (2003) present a frequencybased approach to compound splitting for German. The compound parts and their frequencies are estimated from a monolingual corpus. As an extension to the frequency approach, the authors describe a bilingual approach where they use a dictionary extracted from parallel data to find better split options. The authors allow only two linking morphemes between compound parts and a few letters that can be dropped. In contrast to our approach, those operations are not learned automatically, but must be provided explicitly. Garera and Yarowsky (2008) propose an approach to translate </context>
</contexts>
<marker>Koehn, Knight, 2003</marker>
<rawString>Philipp Koehn and Kevin Knight. 2003. Empirical methods for compound splitting. In Proc. of the 10th Conf. of the European Chapter of the Association for Computational Linguistics (EACL), volume 1, pages 187--193, Budapest, Hungary, April.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Philipp Koehn</author>
<author>Hieu Hoang</author>
<author>Alexandra Birch</author>
<author>Chris Callison-Burch</author>
<author>Marcello Federico</author>
<author>Nicola Bertoldi</author>
<author>Brooke Cowan</author>
<author>Wade Shen</author>
<author>Christine Moran</author>
<author>Richard Zens</author>
<author>Chris Dyer</author>
<author>Ondrej Bojar</author>
<author>Alexandra Constantin</author>
<author>Evan Herbst</author>
</authors>
<title>Moses: Open source toolkit for statistical machine translation.</title>
<date>2007</date>
<booktitle>In Proc. of the 44th Annual Meeting of the Association for Computational Linguistics (ACL),</booktitle>
<volume>1</volume>
<pages>177--180</pages>
<location>Prague, Czech Republic,</location>
<contexts>
<context position="29334" citStr="Koehn et al., 2007" startWordPosition="4931" endWordPosition="4934">imes were kept in the final compound parts lists. Table 3 reports the number of compound parts kept after each pass. For example, the Finnish news vocabulary list initially contained 1.7M entries. After removing non-alpha and infrequent words in the first filter step, we obtained 190K entries. Using the preliminary compound splitter in the second filter step resulted in 73K compound part entries. The finally obtained compound splitter was integrated into the preprocessing pipeline of a stateof-the-art statistical phrase-based machine translation system that works similar to the Moses decoder (Koehn et al., 2007). By applying the compound splitter during both training and decoding we ensured that source language tokens were split in the same way. Table 4 presents results for various language-pairs with and without decompounding. Both the Germanic and the Uralic languages show significant BLEU score improvements of 1.3 BLEU points on average. The confidence intervals were computed using the bootstrap resampling normal approximation method described in (Noreen, 1989). While the compounding process for Germanic languages is rather simple and requires only a few linking morphemes, compounds used in Uralic</context>
</contexts>
<marker>Koehn, Hoang, Birch, Callison-Burch, Federico, Bertoldi, Cowan, Shen, Moran, Zens, Dyer, Bojar, Constantin, Herbst, 2007</marker>
<rawString>Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris Callison-Burch, Marcello Federico, Nicola Bertoldi, Brooke Cowan, Wade Shen, Christine Moran, Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra Constantin, and Evan Herbst. 2007. Moses: Open source toolkit for statistical machine translation. In Proc. of the 44th Annual Meeting of the Association for Computational Linguistics (ACL), volume 1, pages 177--180, Prague, Czech Republic, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eric W Noreen</author>
</authors>
<title>Computer-Intensive Methods for Testing Hypotheses.</title>
<date>1989</date>
<publisher>John Wiley &amp; Sons, Canada.</publisher>
<contexts>
<context position="29795" citStr="Noreen, 1989" startWordPosition="5004" endWordPosition="5005">rocessing pipeline of a stateof-the-art statistical phrase-based machine translation system that works similar to the Moses decoder (Koehn et al., 2007). By applying the compound splitter during both training and decoding we ensured that source language tokens were split in the same way. Table 4 presents results for various language-pairs with and without decompounding. Both the Germanic and the Uralic languages show significant BLEU score improvements of 1.3 BLEU points on average. The confidence intervals were computed using the bootstrap resampling normal approximation method described in (Noreen, 1989). While the compounding process for Germanic languages is rather simple and requires only a few linking morphemes, compounds used in Uralic languages have a richer morphology. In contrast to the Germanic and Uralic languages, we did not observe improvements for Greek. To investigate this lack of performance, we turned off transliteration and kept unknown source words in their original script. We analyzed the number of remaining source characters in the baseline system and the system using compound splitting by counting the number of Greek characters in the translation output. The number of rem</context>
</contexts>
<marker>Noreen, 1989</marker>
<rawString>Eric W. Noreen. 1989. Computer-Intensive Methods for Testing Hypotheses. John Wiley &amp; Sons, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kishore Papineni</author>
<author>Salim Roukos</author>
<author>Todd Ward</author>
<author>WeiJing Zhu</author>
</authors>
<title>Bleu: a Method for Automatic Evaluation of Machine Translation.</title>
<date>2002</date>
<booktitle>In Proc. of the 40th Annual Meeting of the Association for Computational Linguistics (ACL),</booktitle>
<pages>311--318</pages>
<location>Philadelphia, Pennsylvania,</location>
<contexts>
<context position="7857" citStr="Papineni et al., 2002" startWordPosition="1305" endWordPosition="1308">Unfortunately, such lists do not exist for many languages. 1396 While the training algorithm for our compound splitter shall be unsupervised, the evaluation data needs to be verified by human experts. Since we are interested in improving machine translation and to circumvent the problem of explicitly annotating compounds, we evaluate the compound splitter within a machine translation task. By decompounding training and test data of a machine translation system, we expect an increase in the number of matching phrase table entries, resulting in better translation quality measured in BLEU score (Papineni et al., 2002). If BLEU score is sensitive enough to measure the quality improvements obtained from decompounding, there is no need to generate a separate gold standard for compounds. Finally, we do not want to split non-compounds and named entities because we expect them to be translated non-compositionally. For example, the German word Deutschland (Germany) could be split into two parts Deutsch (German) + Land (country). Although this is a valid split, named entities should be kept as single units. An example for a non-compound is the German participle vereinbart (agreed) which could be wrongly split into</context>
</contexts>
<marker>Papineni, Roukos, Ward, Zhu, 2002</marker>
<rawString>Kishore Papineni, Salim Roukos, Todd Ward, and WeiJing Zhu. 2002. Bleu: a Method for Automatic Evaluation of Machine Translation. In Proc. of the 40th Annual Meeting of the Association for Computational Linguistics (ACL), pages 311--318, Philadelphia, Pennsylvania, July.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>