<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.011925">
<title confidence="0.989656">
Combining Constituent Parsers
</title>
<author confidence="0.997581">
Victoria Fossum
</author>
<affiliation confidence="0.997998">
Dept. of Computer Science
University of Michigan
</affiliation>
<address confidence="0.984124">
Ann Arbor, MI 48104
</address>
<email confidence="0.999396">
vfossum@umich.edu
</email>
<author confidence="0.998003">
Kevin Knight
</author>
<affiliation confidence="0.9972555">
Information Sciences Institute
University of Southern California
</affiliation>
<address confidence="0.490953">
Marina del Rey, CA 90292
</address>
<email confidence="0.998944">
knight@isi.edu
</email>
<sectionHeader confidence="0.995472" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.994660578947368">
Combining the 1-best output of multiple
parsers via parse selection or parse hybridiza-
tion improves f-score over the best indi-
vidual parser (Henderson and Brill, 1999;
Sagae and Lavie, 2006). We propose three
ways to improve upon existing methods for
parser combination. First, we propose a
method of parse hybridization that recom-
bines context-free productions instead of con-
stituents, thereby preserving the structure of
the output of the individual parsers to a greater
extent. Second, we propose an efficient linear-
time algorithm for computing expected f-score
using Minimum Bayes Risk parse selection.
Third, we extend these parser combination
methods from multiple 1-best outputs to mul-
tiple n-best outputs. We present results on
WSJ section 23 and also on the English side
of a Chinese-English parallel corpus.
</bodyText>
<sectionHeader confidence="0.999125" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9997745">
Parse quality impacts the quality of downstream ap-
plications such as syntax-based machine translation
(Quirk and Corston-Oliver, 2006). Combining the
output of multiple parsers can boost the accuracy
of such applications. Parses can be combined in
two ways: parse selection (selecting the best parse
from the output of the individual parsers) or parse
hybridization (constructing the best parse by recom-
bining sub-sentential components from the output of
the individual parsers).
</bodyText>
<sectionHeader confidence="0.836905" genericHeader="related work">
1.1 Related Work
</sectionHeader>
<bodyText confidence="0.9997635">
(Henderson and Brill, 1999) perform parse selec-
tion by maximizing the expected precision of the
selected parse with respect to the set of parses be-
ing combined. (Henderson and Brill, 1999) and
(Sagae and Lavie, 2006) propose methods for parse
hybridization by recombining constituents.
</bodyText>
<subsectionHeader confidence="0.892191">
1.2 Our Work
</subsectionHeader>
<bodyText confidence="0.99995547826087">
In this work, we propose three ways to improve upon
existing methods for parser combination.
First, while constituent recombination (Hender-
son and Brill, 1999; Sagae and Lavie, 2006) gives a
significant improvement in f-score, it tends to flatten
the structure of the individual parses. To illustrate,
Figures 1 and 2 contrast the output of the Charniak
parser with the output of constituent recombination
on a sentence from WSJ section 24. We recombine
context-free productions instead of constituents, pro-
ducing trees containing only context-free produc-
tions that have been seen in the individual parsers’
output (Figure 3).
Second, the parse selection method of (Hender-
son and Brill, 1999) selects the parse with maxi-
mum expected precision; here, we present an effi-
cient, linear-time algorithm for selecting the parse
with maximum expected f-score within the Mini-
mum Bayes Risk (MBR) framework.
Third, we extend these parser combination meth-
ods from 1-best outputs to n-best outputs. We
present results on WSJ section 23 and also on the
English side of a Chinese-English parallel corpus.
</bodyText>
<page confidence="0.982634">
253
</page>
<note confidence="0.495069333333333">
Proceedings of NAACL HLT 2009: Short Papers, pages 253–256,
Boulder, Colorado, June 2009. c�2009 Association for Computational Linguistics
SBAR
</note>
<figureCaption confidence="0.997915">
Figure 2: Output of Constituent Recombination
</figureCaption>
<sectionHeader confidence="0.936439" genericHeader="method">
2 Parse Selection
</sectionHeader>
<bodyText confidence="0.9995518">
In the MBR framework, although the true reference
parse is unknown, we assume that the individual
parsers’ output forms a reasonable distribution over
possible reference parses. We compute the expected
f-score of each parse tree pi using this distribution:
</bodyText>
<equation confidence="0.75777">
expected f(pi) = � f(pi, pj) · pr(pj)
pj
</equation>
<bodyText confidence="0.999765933333333">
where f(pi, pj) is the f-score of parse pi with
respect to parse pj and pr(pj) is the prior prob-
ability of parse pj. We estimate pr(pj) as fol-
lows: pr(pj) = pr(parserk) · pr(pj|parserk),
where parserk is the parser generating pj. We
set pr(parserk) according to the proportion of sen-
tences in the development set for which the 1-best
output of parserk achieves the highest f-score of
any individual parser, breaking ties randomly.
When n = 1, pr(pj|parserk) = 1 for all pj;
when n &gt; 1 we must estimate pr(pj|parserk), the
distribution over parses in the n-best list output by
any given parser. We estimate this distribution us-
ing the model score, or log probability, given by
parserk to each entry pj in its n-best list:
</bodyText>
<equation confidence="0.868940666666667">
eα∗scorej,k
pr(pj|parserk) = n j′=1 eα∗scorej′,k
SBAR
</equation>
<figureCaption confidence="0.9656745">
Figure 3: Output of Context-Free Production Recombi-
nation
</figureCaption>
<table confidence="0.998761083333333">
Parser wsj ce
dev test dev test
Berkeley 88.6 89.3 82.9 83.5
(Petrov and Klein, 2007)
Bikel–Collins Model 2 87.0 88.2 81.2 80.6
(Bikel, 2002)
Charniak 90.6 91.4 84.7 84.1
(Charniak and Johnson, 2005)
Soricut–Collins Model 2 87.3 88.4 82.3 82.1
(Soricut, 2004)
Stanford 85.4 86.4 81.3 80.1
(Klein and Manning, 2003)
</table>
<tableCaption confidence="0.999853">
Table 1: F-Scores of 1-best Output of Individual Parsers
</tableCaption>
<bodyText confidence="0.999983473684211">
We tune α on a development set to maximize f-
score,1 and select the parse pi with highest expected
f-score.
Computing exact expected f-score requires
O(m2) operations per sentence, where m is the
number of parses being combined. We can compute
an approximate expected f-score in O(m) time. To
do so, we compute expected precision for all parses
in O(m) time by associating with each unique
constituent ci a list of parses in which it occurs,
plus the total probability qi of those parses. For
each parse p associated with ci, we increment the
expected precision of that parse by qi/size(p). This
computation yields the same result as the O(m2)
algorithm. We carry out a similar operation for
expected recall. We then compute the harmonic
mean of expected precision and expected recall,
which closely approximates the true expected
f-score.
</bodyText>
<footnote confidence="0.9251808">
1A low value of α creates a uniform distribution, while a
high value concentrates probability mass on the 1-best entry in
the n-best list. In practice, tuning α produces a higher f-score
than setting α to the value that exactly reproduces the individual
parser’s probability distribution.
</footnote>
<figure confidence="0.998492476190476">
IN
FRAG
although
RB
ADJP
not
RB
RB
PP
as
sharply
IN
NP
NP
as
VP
the
gain
reported
NNP
Friday
the
gain
reported
NNP
Friday
IN
RB
RB
RB
IN
NP
VP
although
not
as
sharply
as
DT
NN
VBN
NP
</figure>
<figureCaption confidence="0.994795">
Figure 1: Output of Charniak Parser
</figureCaption>
<figure confidence="0.999285">
SBAR
VBN
NN
DT
NP
sharply
the
gain
although
ADVP
VP
IN
S
RB
RB
ADVP
NP
IN
NNP
reported
ADVP
PP
VBN
NP
RB
DT
as
as
not
Friday
NN
</figure>
<page confidence="0.995237">
254
</page>
<table confidence="0.999185222222222">
Parse Selection: Minimum Bayes Risk
System wsj-dev wsj-test ce-dev ce-test
P R F P R F P R F P R F
best individual 91.3 89.9 90.6 91.8 91.0 91.4 86.1 83.4 84.7 85.6 82.6 84.1
parser
n=1 91.7 90.5 91.1 92.5 91.8 92.0 87.1 84.6 85.8 86.7 83.7 85.2
n=10 92.1 90.8 91.5 92.4 91.7 92.0 87.9 85.3 86.6 87.7 84.4 86.0
n=25 92.1 90.9 91.5 92.4 91.7 92.0 88.0 85.4 86.7 87.4 84.2 85.7
n=50 92.1 91.0 91.5 92.4 91.7 92.1 88.0 85.3 86.6 87.6 84.3 85.9
</table>
<tableCaption confidence="0.998857">
Table 2: Precision, Recall, and F-score Results from Parse Selection
</tableCaption>
<sectionHeader confidence="0.964449" genericHeader="method">
3 Constituent Recombination
</sectionHeader>
<bodyText confidence="0.99937324">
(Henderson and Brill, 1999) convert each parse into
constituents with syntactic labels and spans, and
weight each constituent by summing pr(parserk)
over all parsers k in whose output the constituent
appears. They include all constituents with weight
above a threshold t = m+1
2 , where m is the number
of input parses, in the combined parse.
(Sagae and Lavie, 2006) extend this method by
tuning t on a development set to maximize f-
score.2 They populate a chart with constituents
whose weight meets the threshold, and use a CKY-
style parsing algorithm to find the heaviest tree,
where the weight of a tree is the sum of its con-
stituents’ weights. Parsing is not constrained by a
grammar; any context-free production is permitted.
Thus, the combined parses may contain context-free
productions not seen in the individual parsers’ out-
puts. While this failure to preserve the structure of
individual parses does not affect f-score, it may hin-
der downstream applications.
To extend this method from 1-best to n-best
lists, we weight each constituent by summing
pr(parserk)·pr(pj|parserk) overall parses pj gen-
erated by parserk in which the constituent appears.
</bodyText>
<sectionHeader confidence="0.974201" genericHeader="method">
4 Context-Free Production Recombination
</sectionHeader>
<bodyText confidence="0.999546428571429">
To ensure that all context-free productions in the
combined parses have been seen in the individual
parsers’ outputs, we recombine context-free produc-
tions rather than constituents. We convert each parse
into context-free productions, labelling each con-
stituent in the production with its span and syntac-
tic category and weighting each production by sum-
</bodyText>
<footnote confidence="0.9444365">
2A high threshold results in high precision, while a low
threshold results in high recall.
</footnote>
<bodyText confidence="0.993626777777778">
ming pr(parserk) · pr(pj|parserk) over all parses
pj generated by parserk in which the production ap-
pears. We re-parse the sentence with these produc-
tions, returning the heaviest tree (where the weight
of a tree is the sum of its context-free productions’
weights). We optimize f-score by varying the trade-
off between precision and recall using a derivation
length penalty, which we tune on a development
set.3
</bodyText>
<sectionHeader confidence="0.99849" genericHeader="evaluation">
5 Experiments
</sectionHeader>
<bodyText confidence="0.999934454545455">
Table 1 illustrates the 5 parsers used in our combi-
nation experiments and the f-scores of their 1-best
output on our data sets. We use the n-best output
of the Berkeley, Charniak, and Soricut parsers, and
the 1-best output of the Bikel and Stanford parsers.
All parsers were trained on the standard WSJ train-
ing sections. We use two corpora: the WSJ (sec-
tions 24 and 23 are the development and test sets, re-
spectively) and English text from the LDC2007T02
Chinese-English parallel corpus (the development
and test sets contain 400 sentences each).
</bodyText>
<sectionHeader confidence="0.99763" genericHeader="discussions">
6 Discussion &amp; Conclusion
</sectionHeader>
<bodyText confidence="0.999534777777778">
Results are shown in Tables 2, 3, and 4. On both
test sets, constituent recombination achieves the best
f-score (1.0 points on WSJ test and 2.3 points on
Chinese-English test), followed by context-free pro-
duction combination, then parse selection, though
the differences in f-score among the combination
methods are not statistically significant. Increasing
the n-best list size from 1 to 10 improves parse se-
lection and context-free production recombination,
</bodyText>
<footnote confidence="0.84524">
3By subtracting higher(lower) values of this length penalty
from the weight of each production, we can encourage the com-
bination method to favor trees with shorter(longer) derivations
and therefore higher precision(recall) at the constituent level.
</footnote>
<page confidence="0.988028">
255
</page>
<table confidence="0.999962333333333">
Parse Hybridization: Constituent Recombination
System wsj-dev wsj-test ce-dev ce-test
P R F P R F P R F P R F
best individual 91.3 89.9 90.6 91.8 91.0 91.4 86.1 83.4 84.7 85.6 82.6 84.1
parser
n=1 92.5 90.3 91.4 93.0 91.6 92.3 89.2 84.6 86.8 89.1 83.6 86.2
n=10 92.6 90.5 91.5 93.1 91.7 92.4 89.9 84.4 87.1 89.9 83.2 86.4
n=25 92.6 90.5 91.5 93.2 91.7 92.4 89.9 84.4 87.0 89.7 83.4 86.4
n=50 92.6 90.5 91.5 93.1 91.7 92.4 89.9 84.4 87.1 89.7 83.2 86.3
</table>
<tableCaption confidence="0.994831">
Table 3: Precision, Recall, and F-score Results from Constituent Recombination
</tableCaption>
<table confidence="0.999971888888889">
Parse Hybridization: Context-Free Production Recombination
System wsj-dev wsj-test ce-dev ce-test
P R F P R F P R F P R F
best individual 91.3 89.9 90.6 91.8 91.0 91.4 86.1 83.4 84.7 85.6 82.6 84.1
parser
n=1 91.7 91.0 91.4 92.1 91.9 92.0 86.9 85.4 86.2 86.2 84.3 85.2
n=10 92.1 90.9 91.5 92.5 91.8 92.2 87.8 85.1 86.4 86.2 84.3 86.1
n=25 92.2 91.0 91.6 92.5 91.8 92.2 87.8 85.1 86.4 87.6 84.6 86.1
n=50 92.1 90.8 91.4 92.4 91.7 92.1 87.6 84.9 86.2 87.7 84.6 86.1
</table>
<tableCaption confidence="0.999846">
Table 4: Precision, Recall, and F-score Results from Context-Free Production Recombination
</tableCaption>
<bodyText confidence="0.998691142857143">
though further increasing n does not, in general,
help.4 Chinese-English test set f-score gets a bigger
boost from combination than WSJ test set f-score,
perhaps because the best individual parser’s baseline
f-score is lower on the out-of-domain data.
We have presented an algorithm for parse hy-
bridization by recombining context-free produc-
tions. While constituent recombination results in
the highest f-score of the methods explored, context-
free production recombination produces trees which
better preserve the syntactic structure of the indi-
vidual parses. We have also presented an efficient
linear-time algorithm for selecting the parse with
maximum expected f-score.
</bodyText>
<sectionHeader confidence="0.99836" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.840388571428571">
We thank Steven Abney, John Henderson, and
Kenji Sagae for helpful discussions. This research
was supported by DARPA (contract HR0011-06-C-
0022) and by NSF ITR (grant IIS-0428020).
4These diminishing gains in f-score as n increases reflect
the diminishing gains in f-score of the oracle parse produced by
each individual parser as n increases.
</bodyText>
<sectionHeader confidence="0.997501" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.997696346153846">
Daniel M. Bikel. 2004. Design of a Multi-lingual,
Parallel-processing Statistical Parsing Engine. In Pro-
ceedings of HLT.
Eugene Charniak and Mark Johnson. 2005. Coarse-to-
fine n-best parsing and MaxEnt discriminative rerank-
ing. In Proceedings of ACL.
Michael Collins and Terry Koo. 2005. Discriminative
Reranking for Natural Language Parsing. Computa-
tional Linguistics, 31(1):25-70.
John C. Henderson and Eric Brill. 2000. Exploiting Di-
versity in Natural Language Processing: Combining
Parsers. In Proceedings of EMNLP.
Dan Klein and Christopher D. Manning. 2003. Accurate
Unlexicalized Parsing. In Proceedings of ACL.
Slav Petrov and Dan Klein. 2007. Improved Inference
for Unlexicalized Parsing. In Proceedings of HLT-
NAACL.
Chris Quirk and Simon Corston-Oliver. 2006. The Im-
pact ofParse Quality on Syntactically-Informed Statis-
tical Machine Translation. In Proceedings of EMNLP.
Kenji Sagae and Alon Lavie. 2006. Parser Combination
by Reparsing. In Proceedings of HLT-NAACL.
Radu Soricut. 2004. A Reimplementation of Collins’
Parsing Models. Technical report, Information Sci-
ences Institute, Department of Computer Science, Uni-
versity of Southern California.
</reference>
<page confidence="0.998477">
256
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.416442">
<title confidence="0.999505">Combining Constituent Parsers</title>
<author confidence="0.962125">Victoria</author>
<affiliation confidence="0.9990885">Dept. of Computer University of</affiliation>
<address confidence="0.66993">Ann Arbor, MI</address>
<email confidence="0.997323">vfossum@umich.edu</email>
<author confidence="0.953433">Kevin</author>
<affiliation confidence="0.9995815">Information Sciences University of Southern</affiliation>
<author confidence="0.687948">Marina del Rey</author>
<author confidence="0.687948">CA</author>
<email confidence="0.999246">knight@isi.edu</email>
<abstract confidence="0.999372">the output of multiple parsers via parse selection or parse hybridization improves f-score over the best individual parser (Henderson and Brill, 1999; Sagae and Lavie, 2006). We propose three ways to improve upon existing methods for parser combination. First, we propose a method of parse hybridization that recomproductions of conthereby preserving the structure of the output of the individual parsers to a greater extent. Second, we propose an efficient lineartime algorithm for computing expected f-score using Minimum Bayes Risk parse selection. Third, we extend these parser combination from multiple outputs to muloutputs. We present results on WSJ section 23 and also on the English side of a Chinese-English parallel corpus.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Daniel M Bikel</author>
</authors>
<title>Design of a Multi-lingual, Parallel-processing Statistical Parsing Engine.</title>
<date>2004</date>
<booktitle>In Proceedings of HLT.</booktitle>
<marker>Bikel, 2004</marker>
<rawString>Daniel M. Bikel. 2004. Design of a Multi-lingual, Parallel-processing Statistical Parsing Engine. In Proceedings of HLT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eugene Charniak</author>
<author>Mark Johnson</author>
</authors>
<title>Coarse-tofine n-best parsing and MaxEnt discriminative reranking.</title>
<date>2005</date>
<booktitle>In Proceedings of ACL.</booktitle>
<contexts>
<context position="4522" citStr="Charniak and Johnson, 2005" startWordPosition="702" endWordPosition="705">, breaking ties randomly. When n = 1, pr(pj|parserk) = 1 for all pj; when n &gt; 1 we must estimate pr(pj|parserk), the distribution over parses in the n-best list output by any given parser. We estimate this distribution using the model score, or log probability, given by parserk to each entry pj in its n-best list: eα∗scorej,k pr(pj|parserk) = n j′=1 eα∗scorej′,k SBAR Figure 3: Output of Context-Free Production Recombination Parser wsj ce dev test dev test Berkeley 88.6 89.3 82.9 83.5 (Petrov and Klein, 2007) Bikel–Collins Model 2 87.0 88.2 81.2 80.6 (Bikel, 2002) Charniak 90.6 91.4 84.7 84.1 (Charniak and Johnson, 2005) Soricut–Collins Model 2 87.3 88.4 82.3 82.1 (Soricut, 2004) Stanford 85.4 86.4 81.3 80.1 (Klein and Manning, 2003) Table 1: F-Scores of 1-best Output of Individual Parsers We tune α on a development set to maximize fscore,1 and select the parse pi with highest expected f-score. Computing exact expected f-score requires O(m2) operations per sentence, where m is the number of parses being combined. We can compute an approximate expected f-score in O(m) time. To do so, we compute expected precision for all parses in O(m) time by associating with each unique constituent ci a list of parses in whi</context>
</contexts>
<marker>Charniak, Johnson, 2005</marker>
<rawString>Eugene Charniak and Mark Johnson. 2005. Coarse-tofine n-best parsing and MaxEnt discriminative reranking. In Proceedings of ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
<author>Terry Koo</author>
</authors>
<title>Discriminative Reranking for Natural Language Parsing.</title>
<date>2005</date>
<journal>Computational Linguistics,</journal>
<pages>31--1</pages>
<marker>Collins, Koo, 2005</marker>
<rawString>Michael Collins and Terry Koo. 2005. Discriminative Reranking for Natural Language Parsing. Computational Linguistics, 31(1):25-70.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John C Henderson</author>
<author>Eric Brill</author>
</authors>
<title>Exploiting Diversity in Natural Language Processing: Combining Parsers.</title>
<date>2000</date>
<booktitle>In Proceedings of EMNLP.</booktitle>
<marker>Henderson, Brill, 2000</marker>
<rawString>John C. Henderson and Eric Brill. 2000. Exploiting Diversity in Natural Language Processing: Combining Parsers. In Proceedings of EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Klein</author>
<author>Christopher D Manning</author>
</authors>
<title>Accurate Unlexicalized Parsing.</title>
<date>2003</date>
<booktitle>In Proceedings of ACL.</booktitle>
<contexts>
<context position="4637" citStr="Klein and Manning, 2003" startWordPosition="720" endWordPosition="723">istribution over parses in the n-best list output by any given parser. We estimate this distribution using the model score, or log probability, given by parserk to each entry pj in its n-best list: eα∗scorej,k pr(pj|parserk) = n j′=1 eα∗scorej′,k SBAR Figure 3: Output of Context-Free Production Recombination Parser wsj ce dev test dev test Berkeley 88.6 89.3 82.9 83.5 (Petrov and Klein, 2007) Bikel–Collins Model 2 87.0 88.2 81.2 80.6 (Bikel, 2002) Charniak 90.6 91.4 84.7 84.1 (Charniak and Johnson, 2005) Soricut–Collins Model 2 87.3 88.4 82.3 82.1 (Soricut, 2004) Stanford 85.4 86.4 81.3 80.1 (Klein and Manning, 2003) Table 1: F-Scores of 1-best Output of Individual Parsers We tune α on a development set to maximize fscore,1 and select the parse pi with highest expected f-score. Computing exact expected f-score requires O(m2) operations per sentence, where m is the number of parses being combined. We can compute an approximate expected f-score in O(m) time. To do so, we compute expected precision for all parses in O(m) time by associating with each unique constituent ci a list of parses in which it occurs, plus the total probability qi of those parses. For each parse p associated with ci, we increment the </context>
</contexts>
<marker>Klein, Manning, 2003</marker>
<rawString>Dan Klein and Christopher D. Manning. 2003. Accurate Unlexicalized Parsing. In Proceedings of ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Slav Petrov</author>
<author>Dan Klein</author>
</authors>
<title>Improved Inference for Unlexicalized Parsing.</title>
<date>2007</date>
<booktitle>In Proceedings of HLTNAACL.</booktitle>
<contexts>
<context position="4408" citStr="Petrov and Klein, 2007" startWordPosition="684" endWordPosition="687">e development set for which the 1-best output of parserk achieves the highest f-score of any individual parser, breaking ties randomly. When n = 1, pr(pj|parserk) = 1 for all pj; when n &gt; 1 we must estimate pr(pj|parserk), the distribution over parses in the n-best list output by any given parser. We estimate this distribution using the model score, or log probability, given by parserk to each entry pj in its n-best list: eα∗scorej,k pr(pj|parserk) = n j′=1 eα∗scorej′,k SBAR Figure 3: Output of Context-Free Production Recombination Parser wsj ce dev test dev test Berkeley 88.6 89.3 82.9 83.5 (Petrov and Klein, 2007) Bikel–Collins Model 2 87.0 88.2 81.2 80.6 (Bikel, 2002) Charniak 90.6 91.4 84.7 84.1 (Charniak and Johnson, 2005) Soricut–Collins Model 2 87.3 88.4 82.3 82.1 (Soricut, 2004) Stanford 85.4 86.4 81.3 80.1 (Klein and Manning, 2003) Table 1: F-Scores of 1-best Output of Individual Parsers We tune α on a development set to maximize fscore,1 and select the parse pi with highest expected f-score. Computing exact expected f-score requires O(m2) operations per sentence, where m is the number of parses being combined. We can compute an approximate expected f-score in O(m) time. To do so, we compute exp</context>
</contexts>
<marker>Petrov, Klein, 2007</marker>
<rawString>Slav Petrov and Dan Klein. 2007. Improved Inference for Unlexicalized Parsing. In Proceedings of HLTNAACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chris Quirk</author>
<author>Simon Corston-Oliver</author>
</authors>
<title>The Impact ofParse Quality on Syntactically-Informed Statistical Machine Translation.</title>
<date>2006</date>
<booktitle>In Proceedings of EMNLP.</booktitle>
<contexts>
<context position="1227" citStr="Quirk and Corston-Oliver, 2006" startWordPosition="175" endWordPosition="178"> context-free productions instead of constituents, thereby preserving the structure of the output of the individual parsers to a greater extent. Second, we propose an efficient lineartime algorithm for computing expected f-score using Minimum Bayes Risk parse selection. Third, we extend these parser combination methods from multiple 1-best outputs to multiple n-best outputs. We present results on WSJ section 23 and also on the English side of a Chinese-English parallel corpus. 1 Introduction Parse quality impacts the quality of downstream applications such as syntax-based machine translation (Quirk and Corston-Oliver, 2006). Combining the output of multiple parsers can boost the accuracy of such applications. Parses can be combined in two ways: parse selection (selecting the best parse from the output of the individual parsers) or parse hybridization (constructing the best parse by recombining sub-sentential components from the output of the individual parsers). 1.1 Related Work (Henderson and Brill, 1999) perform parse selection by maximizing the expected precision of the selected parse with respect to the set of parses being combined. (Henderson and Brill, 1999) and (Sagae and Lavie, 2006) propose methods for </context>
</contexts>
<marker>Quirk, Corston-Oliver, 2006</marker>
<rawString>Chris Quirk and Simon Corston-Oliver. 2006. The Impact ofParse Quality on Syntactically-Informed Statistical Machine Translation. In Proceedings of EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenji Sagae</author>
<author>Alon Lavie</author>
</authors>
<title>Parser Combination by Reparsing.</title>
<date>2006</date>
<booktitle>In Proceedings of HLT-NAACL.</booktitle>
<contexts>
<context position="1806" citStr="Sagae and Lavie, 2006" startWordPosition="266" endWordPosition="269">ranslation (Quirk and Corston-Oliver, 2006). Combining the output of multiple parsers can boost the accuracy of such applications. Parses can be combined in two ways: parse selection (selecting the best parse from the output of the individual parsers) or parse hybridization (constructing the best parse by recombining sub-sentential components from the output of the individual parsers). 1.1 Related Work (Henderson and Brill, 1999) perform parse selection by maximizing the expected precision of the selected parse with respect to the set of parses being combined. (Henderson and Brill, 1999) and (Sagae and Lavie, 2006) propose methods for parse hybridization by recombining constituents. 1.2 Our Work In this work, we propose three ways to improve upon existing methods for parser combination. First, while constituent recombination (Henderson and Brill, 1999; Sagae and Lavie, 2006) gives a significant improvement in f-score, it tends to flatten the structure of the individual parses. To illustrate, Figures 1 and 2 contrast the output of the Charniak parser with the output of constituent recombination on a sentence from WSJ section 24. We recombine context-free productions instead of constituents, producing tre</context>
<context position="7078" citStr="Sagae and Lavie, 2006" startWordPosition="1157" endWordPosition="1160">7.9 85.3 86.6 87.7 84.4 86.0 n=25 92.1 90.9 91.5 92.4 91.7 92.0 88.0 85.4 86.7 87.4 84.2 85.7 n=50 92.1 91.0 91.5 92.4 91.7 92.1 88.0 85.3 86.6 87.6 84.3 85.9 Table 2: Precision, Recall, and F-score Results from Parse Selection 3 Constituent Recombination (Henderson and Brill, 1999) convert each parse into constituents with syntactic labels and spans, and weight each constituent by summing pr(parserk) over all parsers k in whose output the constituent appears. They include all constituents with weight above a threshold t = m+1 2 , where m is the number of input parses, in the combined parse. (Sagae and Lavie, 2006) extend this method by tuning t on a development set to maximize fscore.2 They populate a chart with constituents whose weight meets the threshold, and use a CKYstyle parsing algorithm to find the heaviest tree, where the weight of a tree is the sum of its constituents’ weights. Parsing is not constrained by a grammar; any context-free production is permitted. Thus, the combined parses may contain context-free productions not seen in the individual parsers’ outputs. While this failure to preserve the structure of individual parses does not affect f-score, it may hinder downstream applications.</context>
</contexts>
<marker>Sagae, Lavie, 2006</marker>
<rawString>Kenji Sagae and Alon Lavie. 2006. Parser Combination by Reparsing. In Proceedings of HLT-NAACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Radu Soricut</author>
</authors>
<title>A Reimplementation of Collins’ Parsing Models.</title>
<date>2004</date>
<tech>Technical report,</tech>
<institution>Information Sciences Institute, Department of Computer Science, University of Southern California.</institution>
<contexts>
<context position="4582" citStr="Soricut, 2004" startWordPosition="713" endWordPosition="714"> n &gt; 1 we must estimate pr(pj|parserk), the distribution over parses in the n-best list output by any given parser. We estimate this distribution using the model score, or log probability, given by parserk to each entry pj in its n-best list: eα∗scorej,k pr(pj|parserk) = n j′=1 eα∗scorej′,k SBAR Figure 3: Output of Context-Free Production Recombination Parser wsj ce dev test dev test Berkeley 88.6 89.3 82.9 83.5 (Petrov and Klein, 2007) Bikel–Collins Model 2 87.0 88.2 81.2 80.6 (Bikel, 2002) Charniak 90.6 91.4 84.7 84.1 (Charniak and Johnson, 2005) Soricut–Collins Model 2 87.3 88.4 82.3 82.1 (Soricut, 2004) Stanford 85.4 86.4 81.3 80.1 (Klein and Manning, 2003) Table 1: F-Scores of 1-best Output of Individual Parsers We tune α on a development set to maximize fscore,1 and select the parse pi with highest expected f-score. Computing exact expected f-score requires O(m2) operations per sentence, where m is the number of parses being combined. We can compute an approximate expected f-score in O(m) time. To do so, we compute expected precision for all parses in O(m) time by associating with each unique constituent ci a list of parses in which it occurs, plus the total probability qi of those parses.</context>
</contexts>
<marker>Soricut, 2004</marker>
<rawString>Radu Soricut. 2004. A Reimplementation of Collins’ Parsing Models. Technical report, Information Sciences Institute, Department of Computer Science, University of Southern California.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>