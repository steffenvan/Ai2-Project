<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000015">
<title confidence="0.944673">
Generating Referring Expressions with Reference Domain Theory
</title>
<author confidence="0.722872">
Alexandre Denis
</author>
<note confidence="0.5670025">
TALARIS team / UMR 7503 LORIA/INRIA
Lorraine. Campus scientifique, BP 239
</note>
<address confidence="0.71724">
F-54506 Vandoeuvre-l`es-Nancy cedex
</address>
<email confidence="0.995724">
alexandre.denis@loria.fr
</email>
<sectionHeader confidence="0.983047" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999373444444445">
In this paper we present a reference gen-
eration model based on Reference Domain
Theory which gives a dynamic account of
reference. This reference model assumes
that each referring act both relies and up-
dates the reference context. We present a
formal definition of a reference domain, a
generation algorithm and its instantiation
in the GIVE challenge.
</bodyText>
<sectionHeader confidence="0.99549" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999937769230769">
Reference is a process in which participants interpret
and produce their referring expressions according to
the previous context. But as Stalnaker puts it: the
discourse context “is both the object on which speech
acts act and the source of the information relative to
which speech acts are interpreted” (Stalnaker, 1998).
To put it briefly, referring acts not only rely on the
context to produce a reference but also modify it.
This aspect is not taken into account in the classi-
cal generation algorithm by (Dale and Reiter, 1995).
Each referent is generated by discriminating it inside
a context. However, the construction and update of
this context is not adressed.
Further literature on reference generation partially
gives an account for the dynamic nature of the re-
ferring process. For example in (Krahmer and The-
une, 2002), each referring act increases the salience
of the referent such that further references can be
made according to a smaller context, namely the set
of objects whose salience is greater than the referent’s
salience. Reference Domain Theory (RDT) (Reboul,
1998; Salmon-Alt and Romary, 2001) goes a step fur-
ther by assuming that referring acts make salient the
context sets themselves. This theory addresses the
construction and update of the context sets, called
in this theory reference domains. The goal of a re-
ferring act is then to discriminate a referent inside
a reference domain but also a reference domain in
a set of reference domains that we call here referen-
tial space. Moreover each referring act presupposes
a given state of the referential space, and the ex-
plicit representation of these presuppositions as con-
straints on the suitable domain for interpretation or
generation allows the implementation of a reversible
reference module. We will focus here on generation.
Details about the interpretation side of RDT can be
found in (Salmon-Alt and Romary, 2001; Denis et
al., 2006).
However most of the previous work on RDT
does not address computational details. Although
(Salmon-Alt and Romary, 2000) provides a genera-
tion algorithm, the formal definition of a reference
domain and the explicit representation of the con-
straints are not provided. In this paper we show how
RDT can be used to generate referring expressions.
The context of our work is the GIVE challenge (By-
ron et al., 2007; Byron et al., 2009). This challenge
aims to evaluate instruction generation systems in a
situated setting. The goal is to provide instructions
to a player in a 3D maze in order to guide him to find
a hidden trophy. We are here interested with the re-
ferring aspect involved in GIVE: the player has to
push buttons to open doors or disable alarms, thus
the system has to generate referring expressions to
these buttons.
We first present in section 2 some definitions, then
in section 3 we detail a generic generation algorithm.
Section 4 shows a use case of RDT in the context of
the GIVE challenge and provides a detailed exam-
ple of the reference process. The presented model is
generic, but all the examples given throughout the
paper refer to the GIVE setting. Eventually, in sec-
tion 6 we conclude the paper by demonstrating the
success of RDT in an evaluation based on the GIVE
setting.
</bodyText>
<sectionHeader confidence="0.989338" genericHeader="introduction">
2 Definitions
</sectionHeader>
<bodyText confidence="0.99997104">
The referring process is a discrimination process
whose goal is to discriminate one or more individ-
uals in a context set. The discrimination can make
use of different sources of information. It can be a
semantic discrimination, for instance by uttering se-
mantic properties possessed by the referent to rule
out distractors, e.g. “the blue button”. It can be
a discrimination of the focus, that is to make use of
the current center of attention, e.g. “this button”
or “the other button”. The discrimination can also
rely on the previous referring acts, for instance when
uttering “Push a blue button. Yes this one”, where
”this one” would be unambiguously uttered in a con-
text of a red and a blue button thanks to the mention
of “a blue button”. A reference model has to take
into account these different ways to discriminate.
On the other hand, a reference model has also to
consider how objects are grouped together to form
the context sets. They can be constructed thanks to
similarity or proximity of objects (Thorisson, 1994),
by the gestures that are made (Landragin, 2006) or
by the discourse itself (Denis et al., 2006). We will
be limited to the dimension of semantic similarity in
this paper.
RDT claims that the context sets (reference do-
mains or RD) are structures that both gather indi-
viduals and discriminate them. A reference domain
is basically a set of objects that share some seman-
tic description N. A partition that discriminates the
elements is also attached to the domain. The parti-
tion is based on a differentiation criterion such that
two elements being discriminated with this criterion
are put in two different equivalency classes. For in-
stance, in a domain of two buttons, one blue and
one red, the two individuals share the same type and
are differentiated with the color. While each one is
“a button”, they can unambiguously be referred to
with “the blue button” and ”the red button” (or even
shorter ”blue”, ”red”).
Different elements of a domain may be more or less
focused/salient depending on the visual scene, or on
the previous discriminations. We are assuming that
the focus is defined as the most salient parts of the
partition of a domain and can thus be represented as
a subset of the partition. This is a binary state, that
is, a part is focused or not. While it removes the
possibility to have different degrees of focus inside a
domain, it would help modeling a preference to focus
similar objects together. We did not explore though
the empirical relevance of this hypothesis.
We assume that each domain could be said more
or less salient in a set of reference domains, called
a referential space or RS. The referential space is a
storage for the domains that have been created so
far. We consider here it is unique and shared. In the
GIVE setting, the RS is actually not shared because
the player does not know the maze a priori while the
system knows it completely. But we assume that the
RS is limited to the current room where the player is
standing. Each time the player enters a new room,
the RS is refreshed and a new one is built. We then
suppose that the player is able to access the objects
by walking around, and hence that the RS is shared,
removing problems related to asymmetry.
The referential space provides a traversal order for
the reference domains it contains. The most salient
RD are tested first. While it would be interesting
to model visual salience in the GIVE setting (Lan-
dragin, 2006), we are limited to equate salience and
recency. Thus, each domain will be associated to a
number indicating how recently it has been selected.
The way the salience or the whole RS is affected by
the discrimination process is described in section 3.2.
We now provide a formal definition of a reference do-
main and a referential space building algorithm.
</bodyText>
<subsectionHeader confidence="0.988667">
2.1 Reference domains
</subsectionHeader>
<bodyText confidence="0.9999955">
We assume that (E, V ) is an environment composed
of E, the universe of all objects and V , the set
of ground predicates that hold in the environment.
Props is a set of unary predicates names such as blue,
red, left, or right. Types is a set of types of unary
predicates such as color, or position. We distinguish
two disjoint subsets of Types, Typespers the persis-
tent types, that are all the properties that describe
permanently the objects, and Typestrans the tran-
sient types, that are all the properties that change
across time. val is the function val : Types → 2Props
which maps a type on the predicates names, e.g.
</bodyText>
<equation confidence="0.79834175">
val(color) = {blue, red, green, yellow}
A reference domain D is a tuple
//
(GD, SD, σD, lc, P, F))
</equation>
<bodyText confidence="0.637406">
where:
</bodyText>
<listItem confidence="0.86388675">
• GD C_ E is the set of objects of the domain,
called the ground of the domain.
• SD C_ Props is the semantic description of the
domain, such that dp E SD, dx E GD, p(x) E V ,
that is, SD is a description satisfied for all the
elements of the ground.
• σD E N is the salience of the domain
And (c, P, F) is a partition structure where:
• c ∈ Types is a differentiation criterion
• P is the partition generated by c, that is, if we
define the equivalence relation
Rc(x, y) ≡ ∀p ∈ val(c), p(x) ∈ V ⇔ p(y) ∈ V
then P = GD/Rc, i.e. P is the quotient set of
GD by Rc.
• F ⊆ P is the focus of P.
For instance, a domain composed of two buttons,
b1 a blue button and b2 a red button, with a salience
equal to 3, where b1 and b2 are differentiated using
the color, and where b1 is in focus, would be noted
as:
</listItem>
<equation confidence="0.9948965">
D =({b1, b2}, {button}, 3,
(color, {{b1}, {b2}}, {{b1}}))
</equation>
<subsectionHeader confidence="0.991925">
2.2 Referential space
</subsectionHeader>
<bodyText confidence="0.9999749375">
The referential space RS is the set of existing do-
mains. In the GIVE context, we assumed that it is
both shared and refreshed each time the player enters
a room. The initial construction of the RS consists
in grouping all the objects of the room that are sim-
ilar inside new reference domains. The RS can be
viewed as a tree-like structure whose nodes are RD.
The root node is a RD whose ground is all objects of
the room. For a node domain D, and for each part
of its partition which is not a singleton, there exists
a child domain which discriminates the elements of
the part. In other words, if a domain does not dis-
criminate some individuals of its ground there exists
another domain which does. Formally, the RS has to
respect the following proposition where PD denotes
the partition of D.
</bodyText>
<equation confidence="0.9931515">
∀D ∈ RS, ∀P ∈ PD,
|P |&gt; 1 ⇒ ∃D&apos; ∈ RS; GD, = P ∧ |PD, |&gt; 1
</equation>
<bodyText confidence="0.996938909090909">
In order to make sure that all the individuals could
be discriminated, and thus focused, we introduce the
default partition structure of a set X, which is a par-
tition structure where the criterion is the identifier
of objects and that contains then only singletons, we
note def(X) the default partition of a set X, that is
def(X) = (id, X/Rid, ∅).
To build initially the RS, the grouping algorithm
(figure 1) is the following: it takes a list of types T
(T0 means the head, and T1..n the tail) which corre-
sponds to different properties to group the objects.
We are here only using the permanent properties of
objects, that is in GIVE their type and their color,
ordered arbitrarly. It takes also an input domain
which has a default partition. It then tries to parti-
tion the ground of this domain with the first prop-
erty. If this property does not partition the ground,
the next property is tested. If this property parti-
tions the ground, a new domain is created for each
non-singleton part of the partition, and the algo-
rithm tries to partition it with the next property,
so on recursively. We note sh(X, c) the set of prop-
erties of the type c that are shared by all elements of
X: sh(X, c) = {p|p ∈ val(c), ∀x ∈ X; p(x) ∈ V }.
This partitioning algorithm is slightly different
from the partitioning algorithm called IApart found
in (Gatt and van Deemter, 2007). First, it only par-
titions a set of objects using one unique property,
whereas in IApart the same set of objects can be
partitioned several times. And second, while IApart
“destroys” the ground that is partitioned, our par-
titioning algorithm maintains both the ground and
the partition attached to the domain.
</bodyText>
<listItem confidence="0.994636071428571">
1: RS ← RS ∪ {D}
2: if T =6 ∅ then
3: P ← GD/RTo
4: if |P |= 1 then
5: SD ← SD ∪ sh(GD, T0)
6: createPartitions(D, T1..n, RS)
7: else
8: set (T0, P, ∅) as D’s partition structure
9: for all X ∈ P such that |X |&gt; 1 do
10: D&apos; ← hX, SD ∪ sh(X, T0), σD, def(X)i
11: createPartitions(D&apos;, T1..n, RS)
12: end for
13: end if
14: end if
</listItem>
<figureCaption confidence="0.992747">
Figure 1: createPartitions(D, T, RS)
</figureCaption>
<sectionHeader confidence="0.994298" genericHeader="method">
3 Referring
</sectionHeader>
<bodyText confidence="0.998426863636364">
In this section we detail the generation algorithm
in RDT. It implements a dynamic view of referring
whereby each referring act updates the current ref-
erential space. This incremental update of the refer-
ential space proceeds in three steps. First, a domain
containing the referent is found. Then this domain
is used to match a so called underspecified domain
(Salmon-Alt and Romary, 2001). Third, the input
RS is restructured relative to the selected reference
domain.
The approach enables the implementation of a
type B reversible reference module (Klarner, 2005),
that is a module in which both directions share the
Expression U(N, t) matches D iff ∃(c, P, F) E D;
this one F = {{t}} ∧ msd(D)
this N F = {{t}} ∧ t E N2
the N t E N2 ∧ {t} E P ∧ VX EP, X =�{t}⇒X∩N2 =0
the other one F =� 0 ∧ P \ F = {{t}} ∧ msd(D)
the other N F =� 0 ∧ P \ F = {{t}} ∧ GD C N2
another one F =� 0 ∧ {t} E P \ F ∧ msd(D)
another N F =� 0 ∧ {t} E P \ F ∧ GD C N2
a N t E N2 ∧ t E GD
</bodyText>
<tableCaption confidence="0.880872">
Table 1: Underspecified domains for each type of
referring expression
</tableCaption>
<bodyText confidence="0.999935545454545">
same resources, namely a set of underspecified do-
mains. In interpretation, the goal is to check for
each existing domain if it matches the underspeci-
fied domain obtained from the referring expression.
In generation, the idea is the opposite, that is, to
check from an existing domain and a referent, which
underspecified domain matches them.
We first introduce the different types of underspec-
ified domains. We then present the overall referring
algorithm and the process steering the continuous
update of the referential space.
</bodyText>
<subsectionHeader confidence="0.998006">
3.1 Underspecified domains
</subsectionHeader>
<bodyText confidence="0.996660046875">
An underspecified domain (UD) represents a par-
tially specified reference domain corresponding to the
constraints carried by a referring act. We will say
that an underspecified domain matches a reference
domain if all the constraints of the UD are satis-
fied for the reference domain. There may be con-
straints on the ground of the domain, its salience
or the existence of a particular partition structure.
Table 1 summarizes most of the types of under-
specified domains described in (Salmon-Alt and Ro-
mary, 2000; Salmon-Alt and Romary, 2001). Each
underspecified domain is noted U(N, t), where t is
the intended referent and N ⊆ Props is a seman-
tic description. We will note Nz the set of ob-
jects that have the semantic description N that is
Nz = {x|x E E, dp E N, p(x) E V }. We assume
there is for each description N a given wording, and
we will write for instance “the N” to denote a defi-
nite RE where N has to be replaced by the wording
of N. The notation msd(D) stands for most salient
description, that is, there is no more salient domain
than D with a different description. This is equiva-
lent to W E RS; σDI ≥ σD n SDI =� SD.
The indefinite “a N” can always be generated but
may be ambiguous. The only constraint placed on a
domain by the corresponding UD is that it contains
an element of type N. For example, the domain D1 =
({b1, b2, b3}, {button}, 0, (color, {{b1, b2}, {b3}}, ∅))
does not differentiate b1 from b2, the only way we
could access to b1 would be by uttering “a blue
button”.
The definite expression “the N” requires that the
target forms a semantically disjoint part in the ref-
erence domain partition. For example, in the above
domain D1, “the red button” can be used to refer to
b3.
Like the definite and indefinite, the demonstrative
“this N” requires that the referent is of type N (be-
longs to N-T), but also requires the existence of a fo-
cused partition containing exactly the referent. For
example, if a domain of blue buttons contains a par-
tition structure such that P = {{b1}, {b2}}, it is pos-
sible to refer to b1 given that F = {{b1}} by uttering
“this blue button”, but it would not be the case if
F = {{b1},{b2}}.
Alternative phrases such as “another/the other N”
both require that there is already something in focus
which is not the referent. Definite alternative phrases
require that the unfocused part of the partition con-
tains exactly the target referent while indefinites only
require that the unfocused part contains the referent.
For example, if there is a domain of three blue but-
tons b1, b2, b3 with a partition structure such that
F = {{b2}}, it is possible to use the indefinite “an-
other blue button” to refer to b1 while it would not be
possible to use the definite “the other blue button”.
One-anaphora of the form “this/another/the other
one” can be generated only if the description of the
domain in which the referent has to be discriminated
is already salient, in other words that msd(D) is true.
For example, if the most salient domain in RS is a
domain of blue buttons, it would not be possible to
utter “this one” to refer to a red button inside a less
salient domain.
</bodyText>
<subsectionHeader confidence="0.998265">
3.2 Generation algorithm
</subsectionHeader>
<bodyText confidence="0.999766734693878">
The referring algorithm (figure 2) proceeds in three
steps as follows.
The first step (line 1–2) determines in which refer-
ence domain, referring will be processed and thereby,
which description will be used for instantiating the
underspecified domains. The selected RD is the most
salient RD with the smallest ground containing the
target referent. If there are several such RD, an
arbitrary one is picked. If the selected domain is
D = (GD, SD, σD, (c, P, F)), then the description S
used to instantiate the underspecified domain is the
conjunction of the properties in the description SD
with the value of the differentiation criterion used
to create the partition namely, properties of val(c)
true of the referent (line 2). If the criterion is the
identifier, it is ignored in S. For instance, if there is
a domain of buttons with a partition on color, the
description might be {button, blue}.
In the second step, the algorithm iterates through
the underspecified domains instantiated with S and
selects the first that matches. The order in which
underspecified domains are tested is particularly im-
portant. We use (Gundel et al., 1993) Givenness hi-
erarchy and ordered the UDs based on the cognitive
status of the corresponding referent. We extended
the hierarchy to include alternative NPs: “this one”
&gt; “this N” &gt; “the N” &gt; “the other one” &gt; “the
other N” &gt; “another one” &gt; “another N” &gt; “a N”.
In the third step, the referential space is restruc-
tured by either creating a new domain or increasing
the salience of an existing domain (Figure 3). The
goal of this restructuring step is to be able to re-
strict the further focus to a smaller domain. For
instance, when dealing with red buttons we want
to avoid focusing the blue buttons. The function
first gathers all objects of D that have the persis-
tent part of description S (Gp and Sp), and if there
is already a domain composed by these objects, its
salience is increased such that it is the most salient
(line 4). If there is no such domain, a new most
salient domain is created with these objects and a
default partition. Transient properties are not taken
into account to regroup the objects because it would
restrict too much further focus. For instance, limit-
ing the restructuring to persistent properties avoids
sequences like “Push the button on the right. Yeah
this one”.
For example in a domain D containing a button
b1 and a chair c1,
</bodyText>
<equation confidence="0.9888845">
D =({bl, cl}, 0, 0,
(objType, {{bl}, {cl}}, 0))
</equation>
<bodyText confidence="0.999896666666667">
a reference to b1 could lead to the generation of
the expression “the button”, the restructuring makes
sure to create a new domain whose ground is only
{b1}. Therefore, we avoid producing unecessary ref-
erence to the chair such as “Not this chair! Look for
the button” (see section 4).
</bodyText>
<subsectionHeader confidence="0.99973">
3.3 Dealing with plurals
</subsectionHeader>
<bodyText confidence="0.999925222222222">
The plurals treatment is quite similar to the singu-
lar cases, but we need to do two modifications to
be able to generate plurals. The first modification
is about the underspecified domains. Whereas we
had individuals, here we want to generate an RE to
a set of targets T = {t1..tn}. The UDs can eas-
ily be modified by just replacing every occurrence
of {t} by T (and t ∈ Nx by T ⊆ Nx). With this
modification, we can only generate plurals for sets of
</bodyText>
<listItem confidence="0.992513888888889">
1: D ← most salient/specific domain containing t
2: S ← SD ∪ {p|p ∈ val(c), p(t) ∈ V }
3: for all U(S, t) sorted by Givenness do
4: if U(S, t) matches D then
5: restructure(D, S, RS)
6: return U(S, t)
7: end if
8: end for
9: return failure
</listItem>
<figureCaption confidence="0.705599">
Figure 2: generate(t, RS)
</figureCaption>
<listItem confidence="0.97502975">
1: Sp ← {p|p ∈ S, val−1(p) ∈ TypespeTs}
2: Gp ← {x|x ∈ GD, ∀p ∈ Sp, p(x) ∈ V }
3: if ∃D&apos; ∈ RS; GD1 = Gp then
4: σDI ← max,(RS) + 1
5: else
6: D&apos; ← hGp, Sp, max,(RS) + 1, def(Gp)i
7: RS ← RS ∪ {D&apos;}
8: end if
</listItem>
<figureCaption confidence="0.996814">
Figure 3: restructure(D, S, RS)
</figureCaption>
<bodyText confidence="0.9932929375">
objects that are parts of an existing partition. Imag-
ine we have GD = {b1, b2, b3, b4}, and a partition
P = {{b1, b2}, {b3, b4}} then it is not possible to refer
to {b2, b3} using a demonstrative because they can-
not be focused together. It may be possible to adapt
the UD to consider U F instead of F, that is for in-
stance instead of F = {T} we would require that
UF = T. But this possibility and its side-effects
have not been yet explored.
The second modification is related to the gener-
ation algorithm and the description used to build
the underspecified domains. Instead of retrieving the
properties of the differentiation criterion for a single
target we need to make sure that the properties are
true for all the targets, that is (line 2), we need to
have S ← SD ∪ {p|p ∈ val(c),∀t ∈ T,p(t) ∈ V }.
</bodyText>
<sectionHeader confidence="0.573019" genericHeader="method">
4 Generation in the GIVE challenge
</sectionHeader>
<bodyText confidence="0.9995825">
We present here how the generation module has been
instantiated in the second edition of the GIVE chal-
lenge (Byron et al., 2007).
First, each time the player enters a new room,
the partition algorithm is called on an initial domain
DT = hGT, ∅, 0, def(GT)i, with GT ⊆ E the set of all
objects in the room, and the list of GIVE persistent
types, that is objType, the type of objects, and color.
We then use the above referring algorithm in two
ways. First, it is used to produce a first mention us-
ing only persistent properties and without updating
the focus. Second, it is used to produce a series of
additional subsequent mentions whose function is to
guide the player search. In this second step, tran-
sient spatial properties are used and the visual focus
is continuously updated.
</bodyText>
<subsectionHeader confidence="0.968032">
4.1 First mention
</subsectionHeader>
<bodyText confidence="0.999991555555556">
The referring algorithm just described (cf. Figure 2)
takes as input the current referential space RS, gen-
erates a referring expression for the target referent
t and outputs a push instruction of the form “Push
”+v(generate(t, RS)) where v is the verbalization
function. Note that the referential space may con-
tain domains with focused partitions coming from
previous references to other objects, and therefore is
not limited to producing definite or indefinite NPs.
</bodyText>
<subsectionHeader confidence="0.976981">
4.2 Subsequent mentions
</subsectionHeader>
<bodyText confidence="0.99998759375">
All the subsequent mentions assume that the first
mention has been performed but has not succeeded
yet in identifying the referent. They are all based on
focus and potentially on transient properties. The
focus is defined as the set of visible objects. The al-
gorithm (figure 4) first updates the focus of the parti-
tion of the most salient/specific domain D containing
the target t. Then the rest of the algorithm gener-
ates different instructions depending on whether the
target is or is not focused.
The lines 7–8 refine the focus using relative spa-
tial properties of objects in their domain. It first
computes these new properties hpos and vpos for all
objects in U F, and adds them in V . The refinement
is made by calling the partition function (algorithm
1) on a new domain DF = (GF, SD, QD+1, def(GF)),
using [hpos,vpos]. The salience of DF is just higher
than the salience of D such that DF is preferred
over D when generating. This refinement allows
producing expressions like “the blue button on the
right”. Because these properties are transient, they
are erased from V after the generation and all the
domains and partitions that may have been created
using them including DF are also erased.
Other lines produce expressions if the referent is
not in focus. If there is nothing in focus, it produces
“Look for X” where X is an RE for the referent. If
there is something in focus which is not the referent,
it first produces “Not X” where X is an RE designat-
ing what is in focus, then “Look for X” where X is an
RE for the referent. Note that this is the only place
where plurals can be generated (see section 3.3).
</bodyText>
<sectionHeader confidence="0.935313" genericHeader="method">
5 Detailed example
</sectionHeader>
<bodyText confidence="0.998851">
We present here a detailed example of the behavior
of the reference module in the GIVE setting (Table
2). We assume that the player U enters a room with
</bodyText>
<listItem confidence="0.913590388888889">
1: D - most salient/specific domain containing t
2: F - focus of the visible objects in D
3: GF - MJF
4: if t E GF then
5: if JGFJ &gt; 1 then
6: computePositions(GF)
7: DF - (GF, SD, QD + 1, def(GF))
8: createPartitions(DF, [hpos,vpos], RS)
9: end if
10: return ’Yeah!’+v(generate(t, RS))+’!’
11: else
12: if JGFJ = 0 then
13: return ’Look for ’+v(generate(t, RS))
14: else
15: return ’Not ’+v(generate(GF, RS))+’!
Look for ’+v(generate(t, RS))+’!’
16: end if
17: end if
</listItem>
<figureCaption confidence="0.977271">
Figure 4: Algorithm to instruct the search for a ref-
erent
</figureCaption>
<bodyText confidence="0.981384">
state of U utterance of S
Push a blue button (b1)
Not this one! Look for the other one!
Yeah! The blue button on the right!
Yeah! This one!
Push the red button (b3)
Yeah! This one!
Push the other blue button (b2)
</bodyText>
<tableCaption confidence="0.795111">
Table 2: Utterances produced by the system S
</tableCaption>
<bodyText confidence="0.9650225">
three buttons, two blue buttons, b1 and b2 and a red
button b3.
</bodyText>
<subsectionHeader confidence="0.996757">
5.1 Initializing the referential space
</subsectionHeader>
<bodyText confidence="0.9548255">
As soon as the player enters the room, the partition
algorithm is called on the initial domain:
</bodyText>
<equation confidence="0.996545166666666">
D0 = (G,., 0, 0, def(G,.))
with GT = {b1, b2, b3}. The result is the RS:
D0 =({b1, b2, b3}, {button}, 0,
(color, {{b1, b2}, {b3}}, 0))
D1 =({b1, b2}, {button, blue}, 0,
(id, {{b1}, {b2}}, 0))
</equation>
<bodyText confidence="0.9988915">
We will note the RS by grouping the domains that
have the same salience and indicating the salience
of a set of domains in subscript. That is, after the
construction, the RS is: {{D0,D1}0}.
</bodyText>
<equation confidence="0.832802666666667">
see(b2)
see(b1,b2)
see(b1)
push(b1)
see(b3)
push(b3)
</equation>
<subsectionHeader confidence="0.982904">
5.2 “Push a blue button”
</subsectionHeader>
<bodyText confidence="0.999961882352941">
The system is first required to refer to b1. As all the
domains all are equally salient, the algorithm tries to
pick the most specific domain containing b1, and it
finds D1. The description used to refer to b1 is the
description of the domain SD, = {button, blue} and
the value for the criterion which is the identifier and
is then ignored. Inside D1 it then tries to refer to
b1 by iterating through the underspecified domains
to find the first one that matches D1. Because there
is no focus at this moment, the first found UD that
matches is “a N”. It then performs restructuration
of the RS, by trying to build a new subdomain of
D1. However, because there are only blue buttons
in D1, no subdomain is created and the salience of
D1 is increased. Eventually, the expression is verbal-
ized and “Push a blue button” is uttered. After this
reference, the RS is then {{D1}1, {D0}0}.
</bodyText>
<subsectionHeader confidence="0.984544">
5.3 “Not this one! Look for the other one!”
</subsectionHeader>
<bodyText confidence="0.9264885">
Before the subsequent mentions to b1 are made, the
focus of the most salient/specific domain containing
b1 is updated. We assume first that only b2 is visible,
thus D1 becomes:
</bodyText>
<equation confidence="0.9499935">
D1 =({b1, b2}, {button, blue}, 1,
(id, {{b1}, {b2}}, {{b2}}))
</equation>
<bodyText confidence="0.999932642857143">
According to the algorithm in figure 4, a reference
to b2 has to be made first “Not b2!”. Underspeci-
fied domains are iterated and the first that matches
is “this one” considering that {blue, button} is the
most salient description and b2 is in focus. No sub-
domain is created when restructuring the RS, only
the salience of D1 is increased. The uttered expres-
sion is then “Not this one!”. As for the reference
to b1, the reference is still made in D1 and the first
UD that matches is “the other one”. No restructur-
ing apart from increasing salience is performed and
the returned expression is eventually “Look for the
other one!”. So, after referring to b2 and b1, the RS
is {{D1}3, {D0}0}.
</bodyText>
<subsectionHeader confidence="0.989784">
5.4 “The blue button on the right”
</subsectionHeader>
<bodyText confidence="0.99996325">
We enjoined the player to turn around to search for
b1. We assume here that he did so and now can see
both b1 and b2. Before any reference can take place,
the focus of D1 is updated:
</bodyText>
<equation confidence="0.783306">
D1 =({b1, b2}, {button, blue}, 3,
(id, {{b1}, {b2}}, {{b1}, {b2}}))
</equation>
<bodyText confidence="0.9999849">
However, the focus can no more discriminate both
buttons, and a refinement with the position has to be
performed according to the algorithm 4. We assume
that b1 is on the right while b2 is on the left. Positions
are computed and new ground predicates are added
to V : {right(b1), left(b2)}. A new domain D2 with a
ground equal to the focus of D1, that is {b1, b2}, is
built and used as input for the partition algorithm.
It is partitioned along the horizontal position (hpos),
and then added to the RS, that is:
</bodyText>
<equation confidence="0.989521">
D2 =({b1, b2}, {button, blue}, 4,
(hpos, {{b1}, {b2}}, 0))
</equation>
<bodyText confidence="0.9999689">
Before the reference to b1, the RS is then
{{D2}4, {D1}3, {D0}0}. A new reference to b1 is
then made, but as D2 is more salient than D1 it
is preferred for the reference. The first UD that
matches is the definite “the N” built with the de-
scription {button, blue, right}, and “the blue button
on the right” is uttered. However, because D2 was
built with transient properties, it is erased from the
RS and is recreated before each reference unless the
player changes its visual focus.
</bodyText>
<subsectionHeader confidence="0.903851">
5.5 “Yeah! This one!”
</subsectionHeader>
<bodyText confidence="0.999972">
Now we assume that the player turned around again
and only sees now b1. The most salient/specific do-
main containing b1 is D1 and its focus is updated:
</bodyText>
<equation confidence="0.647572">
D1 =({b1, b2}, {button, blue}, 3,
(id, {{b1}, {b2}}, {{b1}}))
</equation>
<bodyText confidence="0.9999365">
The first matching UD is the demonstrative one-
anaphora “this one”, no restructuring takes place ex-
cept the increased salience of D1 and “Yeah! This
one!” is produced. The RS is thus {{D1}4, {D0}0}.
</bodyText>
<subsectionHeader confidence="0.979317">
5.6 “Push the red button”
</subsectionHeader>
<bodyText confidence="0.99999325">
We assume that given all these referring expressions,
the player is at last able to push b1. A new reference
has to be made, this time to b3, the red button. The
most salient/specific domain containing b3 is actually
D0. In D0, the first matching underspecified domain
is the definite “the N”. The restructuring leads this
time to create a new most salient domain D3 com-
posed only of b3 (because it is the only red button):
</bodyText>
<equation confidence="0.4847555">
D3 =({b3}, {button, red}, 5,
(id, {{b3}}, 0)
</equation>
<bodyText confidence="0.999582333333333">
The further reference to objects will thus avoid re-
ferring to something else than red buttons (see sec-
tion 3.2). The RS is then {{D3}5, {D1}4, {D0}0}.
</bodyText>
<subsectionHeader confidence="0.413719">
5.7 “Yeah! This one!”
</subsectionHeader>
<bodyText confidence="0.9920845">
Provided that D3 is now the most salient/specific
container of b3, b3 can be focalized in the default
partition of D3, resulting in:
results of RDT can be explained by the lower cog-
nitive load resulting from the use of demonstrative
NPs and one-anaphoras.
</bodyText>
<note confidence="0.745079">
7 Other works and extensions
</note>
<equation confidence="0.515044666666667">
D3 =({b3}, {fb
futton, fried}, 5,
(id, {{b3}}, {{b3}}))
</equation>
<bodyText confidence="0.99961425">
The first matching UD is then “this one”, the re-
structuring just increases the salience of D3 and the
system utters eventually “Yeah! This one!”. The
RS is then {{D3}s, {D1}4, {D0}0}. Note that, even
if the player would turn around and see b1 or b2 in
the same time than b3, D3 being the current most
salient/specific domain, b1 or b2 would not be fo-
cused.
</bodyText>
<subsectionHeader confidence="0.941031">
5.8 “Push the other blue button”
</subsectionHeader>
<bodyText confidence="0.999952928571429">
We now have to refer to the last button b2. The
most salient/specific domain containing b2 is D1,
however D1 contains already a focus to b1. Thus,
the first matching UD is “the other N”. Note that
we only considered visual focus, therefore the alter-
native anaphora “the other” does not refer to b2 be-
cause we already mentioned b1 but only because it
is the last object the player saw in D1. By chance,
in the GIVE setting, the visual focus corresponds
to the linguistic focus and thus uttering “Push the
other blue button” sounds natural. It would be more
complex to handle a setting with both the linguistic
and the visual focus, but we think that the RDT is
well-equipped to resolve this issue.
</bodyText>
<sectionHeader confidence="0.998991" genericHeader="evaluation">
6 Evaluation
</sectionHeader>
<bodyText confidence="0.999979487804878">
We evaluated the RDT generation model by compar-
ing its performances with another system also com-
peting in the GIVE challenge but based on a clas-
sical approach on (Dale and Haddock, 1991) that is
restricted to generating definite and indefinite NPs.
We designed a special evaluation world to test several
reference cases, and for both approaches, we mea-
sured the average time from the moment of uttering
a first mention designating a button to the moment
of completion, that is when the button is success-
fully pushed. We also measured the average number
of instructions that were provided in the meantime.
The evaluation has been conducted with 30 subjects
resulting in 20 valid games. The results show that
the RDT performs better than the classical strategy,
both for the average completion time (8.8 seconds
versus 12.5 seconds) and for the number of instruc-
tions (6.4 versus 9.3). We conjecture that the good
While some RE generation models focus on the side
of generating the description itself (Dale and Re-
iter, 1995; Krahmer et al., 2003), we tried to focus
more on the side of generating the determiner. While
works such as (Poesio et al., 1999) also generates the
determiner, they rely on statistical learning of this
determiner. On the contrary we did so by represent-
ing logically the constraints carried by a referring ex-
pressions on the context of its interpretation. How-
ever, the presented model has several limits. First,
as (Landragin and Romary, 2003) describe, there is
no one-to-one relation between the referring expres-
sions and the referring modes. In order to tackle this
problem we can associate a set of UD to a referring
expression. We only need then to add an additional
loop on the different UDs for a given type of referring
expression. The second extension is the possibility
to have several partitions. It is also possible to it-
erate over the set of partitions of a domain, but we
then need to consider the salience of each partition.
In addition, the restructuring has to be amended to
increase the salience of the partition in which a gen-
eration is made.
</bodyText>
<sectionHeader confidence="0.998463" genericHeader="conclusions">
8 Conclusions
</sectionHeader>
<bodyText confidence="0.999832260869565">
We presented a reference generation algorithm based
on Reference Domain Theory. The main improve-
ment of this algorithm over existing approaches is
the construction and update of a set of local con-
texts called a referential space. Each local context
(reference domain) can be used as a context for re-
ferring. The dynamic aspect of the reference process
consists both in the continuous update of the ref-
erence domains and in the update of the referential
space. Thus, the presented algorithm can generate a
variety of referring expressions ranging from definite,
indefinite to demonstrative, alternative phrases, one-
anaphora and plurals. The instantiation in the GIVE
challenge was a baptism for the generation algorithm
and the GIVE setting offered us a good opportunity
to test the serial nature of the reference process. It
enabled us to evaluate the RDT approach and proved
that it is successful.
We would like to thank Luciana Benotti, Claire
Gardent, and the people participating to the GIVE
challenge at the LORIA for their help during the
model development. We also would like to thank the
anonymous reviewers for their precious insights.
</bodyText>
<sectionHeader confidence="0.992288" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999783337209302">
Donna K. Byron, Alexander Koller, Jon Oberlander,
Laura Stoia, and Kristina Striegnitz. 2007. Gener-
ating instructions in virtual environments (GIVE):
A challenge and an evaluation testbed for NLG.
In Proceedings of the Workshop on Shared Tasks
and Comparative Evaluation in Natural Language
Generation, Washington, DC.
Donna Byron, Alexander Koller, Kristina Striegnitz,
Justine Cassell, Robert Dale, Johanna Moore, and
Jon Oberlander. 2009. Report on the First NLG
Challenge on Generating Instructions in Virtual
Environments (GIVE). In Proceedings of the 12th
European Workshop on Natural Language Gen-
eration (ENLG 2009), pages 165–173, Athens,
Greece, March. Association for Computational
Linguistics.
Robert Dale and Nicholas J. Haddock. 1991. Gener-
ating referring expressions involving relations. In
Proceedings of the 5th Conference of the European
Chapter of the ACL, EACL-91.
Robert Dale and Ehud Reiter. 1995. Computational
interpretations of the gricean maxims in the gen-
eration of referring expressions. Cognitive Science,
19(2):233–263.
Alexandre Denis, Guillaume Pitel, and Matthieu
Quignard. 2006. Resolution of Referents Group-
ings in Practical Dialogues. In Proceedings of the
7th SIGDial Workshop on Discourse and Dialogue
- SIGdial’06, Sydney Australia.
Albert Gatt and Kees van Deemter. 2007. Incre-
mental generation of plural descriptions: Similar-
ity and partitioning. In Proceedings of the Confer-
ence on Empirical Methods in Natural Language
Processing, EMNLP-07.
Jeanette K. Gundel, Nancy Hedberg, and Ron
Zacharski. 1993. Cognitive status and the form
of referring expressions in discourse. Language,
69(2):274–307.
Martin Klarner. 2005. Reversibility and re-usability
of resources in NLG and natural language dia-
log systems. In Proceedings of the 10th Euro-
pean Workshop on Natural Language Generation
(ENLG-05), Aberdeen, Scotland.
Emiel Krahmer and Marit Theune. 2002. Effi-
cient context-sensitive generation of referring ex-
pressions. In K. van Deemter and R. Kibble, edi-
tors, Information sharing: Givenness and newness
in language processing, pages 223–264. CSLI Pub-
lications, Stanford.
Emiel Krahmer, Sebastiaan van Erk, and Andr Ver-
leg. 2003. Graph-based generation of referring
expressions. Computational Linguistics, 23:53–72.
Fr´ed´eric Landragin and Laurent Romary. 2003. Re-
ferring to Objects Through Sub-Contexts in Multi-
modal Human-Computer Interaction. In Proceed-
ings of the Seventh Workshop on the Semantics
and Pragmatics of Dialogue (DiaBruck’03), pages
67–74. Saarland University.
Fr´ed´eric Landragin. 2006. Visual perception, lan-
guage and gesture: A model for their understand-
ing in multimodal dialogue systems. Signal Pro-
cessing, 86(12):3578–3595.
Massimo Poesio, Renate Henschel, Janet Hitzeman,
and Rodger Kibble. 1999. Statistical NP genera-
tion: A first report. In Proceedings of the ESSLLI
Workshop on NP Generation, Utrecht.
Anne Reboul. 1998. A relevance theoretic approach
to reference. In Acts of the Relevance Theory
Workshop, University of Luton, England.
Susanne Salmon-Alt and Laurent Romary. 2000.
Generating referring expressions in multimodal
contexts. In Workshop on Coherence in Generated
Multimedia - INLG 2000, Mitzpe Ramon, Israel.
Susanne Salmon-Alt and Laurent Romary. 2001.
Reference resolution within the framework of cog-
nitive grammar. In Proceeding of the International
Colloquium on Cognitive Science, San Sebastian,
Spain.
Robert Stalnaker. 1998. On the representation of
context. Journal of Logic, Language and Informa-
tion, 7(1):3–19.
Kristinn R. Thorisson. 1994. Simulated perceptual
grouping: An application to human-computer in-
teraction. In Proceedings of the Sixteenth Annual
Conference of the Cognitive Science Society, At-
lanta, Georgia.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.206235">
<title confidence="0.999462">Generating Referring Expressions with Reference Domain Theory</title>
<author confidence="0.911514">Alexandre</author>
<address confidence="0.4331635">TALARIS team / UMR 7503 Lorraine. Campus scientifique, BP</address>
<email confidence="0.940954">alexandre.denis@loria.fr</email>
<abstract confidence="0.9962217">In this paper we present a reference generation model based on Reference Domain Theory which gives a dynamic account of reference. This reference model assumes that each referring act both relies and updates the reference context. We present a formal definition of a reference domain, a generation algorithm and its instantiation in the GIVE challenge.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Donna K Byron</author>
<author>Alexander Koller</author>
<author>Jon Oberlander</author>
<author>Laura Stoia</author>
<author>Kristina Striegnitz</author>
</authors>
<title>Generating instructions in virtual environments (GIVE): A challenge and an evaluation testbed for NLG.</title>
<date>2007</date>
<booktitle>In Proceedings of the Workshop on Shared Tasks and Comparative Evaluation in Natural Language Generation,</booktitle>
<location>Washington, DC.</location>
<contexts>
<context position="2920" citStr="Byron et al., 2007" startWordPosition="459" endWordPosition="463">ion allows the implementation of a reversible reference module. We will focus here on generation. Details about the interpretation side of RDT can be found in (Salmon-Alt and Romary, 2001; Denis et al., 2006). However most of the previous work on RDT does not address computational details. Although (Salmon-Alt and Romary, 2000) provides a generation algorithm, the formal definition of a reference domain and the explicit representation of the constraints are not provided. In this paper we show how RDT can be used to generate referring expressions. The context of our work is the GIVE challenge (Byron et al., 2007; Byron et al., 2009). This challenge aims to evaluate instruction generation systems in a situated setting. The goal is to provide instructions to a player in a 3D maze in order to guide him to find a hidden trophy. We are here interested with the referring aspect involved in GIVE: the player has to push buttons to open doors or disable alarms, thus the system has to generate referring expressions to these buttons. We first present in section 2 some definitions, then in section 3 we detail a generic generation algorithm. Section 4 shows a use case of RDT in the context of the GIVE challenge a</context>
<context position="21581" citStr="Byron et al., 2007" startWordPosition="3911" endWordPosition="3914">ld require that UF = T. But this possibility and its side-effects have not been yet explored. The second modification is related to the generation algorithm and the description used to build the underspecified domains. Instead of retrieving the properties of the differentiation criterion for a single target we need to make sure that the properties are true for all the targets, that is (line 2), we need to have S ← SD ∪ {p|p ∈ val(c),∀t ∈ T,p(t) ∈ V }. 4 Generation in the GIVE challenge We present here how the generation module has been instantiated in the second edition of the GIVE challenge (Byron et al., 2007). First, each time the player enters a new room, the partition algorithm is called on an initial domain DT = hGT, ∅, 0, def(GT)i, with GT ⊆ E the set of all objects in the room, and the list of GIVE persistent types, that is objType, the type of objects, and color. We then use the above referring algorithm in two ways. First, it is used to produce a first mention using only persistent properties and without updating the focus. Second, it is used to produce a series of additional subsequent mentions whose function is to guide the player search. In this second step, transient spatial properties </context>
</contexts>
<marker>Byron, Koller, Oberlander, Stoia, Striegnitz, 2007</marker>
<rawString>Donna K. Byron, Alexander Koller, Jon Oberlander, Laura Stoia, and Kristina Striegnitz. 2007. Generating instructions in virtual environments (GIVE): A challenge and an evaluation testbed for NLG. In Proceedings of the Workshop on Shared Tasks and Comparative Evaluation in Natural Language Generation, Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Donna Byron</author>
<author>Alexander Koller</author>
<author>Kristina Striegnitz</author>
<author>Justine Cassell</author>
<author>Robert Dale</author>
<author>Johanna Moore</author>
<author>Jon Oberlander</author>
</authors>
<title>Report on the First NLG Challenge on Generating Instructions in Virtual Environments (GIVE).</title>
<date>2009</date>
<booktitle>In Proceedings of the 12th European Workshop on Natural Language Generation (ENLG</booktitle>
<pages>165--173</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Athens, Greece,</location>
<contexts>
<context position="2941" citStr="Byron et al., 2009" startWordPosition="464" endWordPosition="467">mentation of a reversible reference module. We will focus here on generation. Details about the interpretation side of RDT can be found in (Salmon-Alt and Romary, 2001; Denis et al., 2006). However most of the previous work on RDT does not address computational details. Although (Salmon-Alt and Romary, 2000) provides a generation algorithm, the formal definition of a reference domain and the explicit representation of the constraints are not provided. In this paper we show how RDT can be used to generate referring expressions. The context of our work is the GIVE challenge (Byron et al., 2007; Byron et al., 2009). This challenge aims to evaluate instruction generation systems in a situated setting. The goal is to provide instructions to a player in a 3D maze in order to guide him to find a hidden trophy. We are here interested with the referring aspect involved in GIVE: the player has to push buttons to open doors or disable alarms, thus the system has to generate referring expressions to these buttons. We first present in section 2 some definitions, then in section 3 we detail a generic generation algorithm. Section 4 shows a use case of RDT in the context of the GIVE challenge and provides a detaile</context>
</contexts>
<marker>Byron, Koller, Striegnitz, Cassell, Dale, Moore, Oberlander, 2009</marker>
<rawString>Donna Byron, Alexander Koller, Kristina Striegnitz, Justine Cassell, Robert Dale, Johanna Moore, and Jon Oberlander. 2009. Report on the First NLG Challenge on Generating Instructions in Virtual Environments (GIVE). In Proceedings of the 12th European Workshop on Natural Language Generation (ENLG 2009), pages 165–173, Athens, Greece, March. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Dale</author>
<author>Nicholas J Haddock</author>
</authors>
<title>Generating referring expressions involving relations.</title>
<date>1991</date>
<booktitle>In Proceedings of the 5th Conference of the European Chapter of the ACL, EACL-91.</booktitle>
<contexts>
<context position="31908" citStr="Dale and Haddock, 1991" startWordPosition="5773" endWordPosition="5776">er” does not refer to b2 because we already mentioned b1 but only because it is the last object the player saw in D1. By chance, in the GIVE setting, the visual focus corresponds to the linguistic focus and thus uttering “Push the other blue button” sounds natural. It would be more complex to handle a setting with both the linguistic and the visual focus, but we think that the RDT is well-equipped to resolve this issue. 6 Evaluation We evaluated the RDT generation model by comparing its performances with another system also competing in the GIVE challenge but based on a classical approach on (Dale and Haddock, 1991) that is restricted to generating definite and indefinite NPs. We designed a special evaluation world to test several reference cases, and for both approaches, we measured the average time from the moment of uttering a first mention designating a button to the moment of completion, that is when the button is successfully pushed. We also measured the average number of instructions that were provided in the meantime. The evaluation has been conducted with 30 subjects resulting in 20 valid games. The results show that the RDT performs better than the classical strategy, both for the average compl</context>
</contexts>
<marker>Dale, Haddock, 1991</marker>
<rawString>Robert Dale and Nicholas J. Haddock. 1991. Generating referring expressions involving relations. In Proceedings of the 5th Conference of the European Chapter of the ACL, EACL-91.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Dale</author>
<author>Ehud Reiter</author>
</authors>
<title>Computational interpretations of the gricean maxims in the generation of referring expressions.</title>
<date>1995</date>
<journal>Cognitive Science,</journal>
<volume>19</volume>
<issue>2</issue>
<contexts>
<context position="1121" citStr="Dale and Reiter, 1995" startWordPosition="168" endWordPosition="171">domain, a generation algorithm and its instantiation in the GIVE challenge. 1 Introduction Reference is a process in which participants interpret and produce their referring expressions according to the previous context. But as Stalnaker puts it: the discourse context “is both the object on which speech acts act and the source of the information relative to which speech acts are interpreted” (Stalnaker, 1998). To put it briefly, referring acts not only rely on the context to produce a reference but also modify it. This aspect is not taken into account in the classical generation algorithm by (Dale and Reiter, 1995). Each referent is generated by discriminating it inside a context. However, the construction and update of this context is not adressed. Further literature on reference generation partially gives an account for the dynamic nature of the referring process. For example in (Krahmer and Theune, 2002), each referring act increases the salience of the referent such that further references can be made according to a smaller context, namely the set of objects whose salience is greater than the referent’s salience. Reference Domain Theory (RDT) (Reboul, 1998; Salmon-Alt and Romary, 2001) goes a step f</context>
<context position="32743" citStr="Dale and Reiter, 1995" startWordPosition="5911" endWordPosition="5915">ng a first mention designating a button to the moment of completion, that is when the button is successfully pushed. We also measured the average number of instructions that were provided in the meantime. The evaluation has been conducted with 30 subjects resulting in 20 valid games. The results show that the RDT performs better than the classical strategy, both for the average completion time (8.8 seconds versus 12.5 seconds) and for the number of instructions (6.4 versus 9.3). We conjecture that the good While some RE generation models focus on the side of generating the description itself (Dale and Reiter, 1995; Krahmer et al., 2003), we tried to focus more on the side of generating the determiner. While works such as (Poesio et al., 1999) also generates the determiner, they rely on statistical learning of this determiner. On the contrary we did so by representing logically the constraints carried by a referring expressions on the context of its interpretation. However, the presented model has several limits. First, as (Landragin and Romary, 2003) describe, there is no one-to-one relation between the referring expressions and the referring modes. In order to tackle this problem we can associate a se</context>
</contexts>
<marker>Dale, Reiter, 1995</marker>
<rawString>Robert Dale and Ehud Reiter. 1995. Computational interpretations of the gricean maxims in the generation of referring expressions. Cognitive Science, 19(2):233–263.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alexandre Denis</author>
<author>Guillaume Pitel</author>
<author>Matthieu Quignard</author>
</authors>
<title>Resolution of Referents Groupings in Practical Dialogues.</title>
<date>2006</date>
<booktitle>In Proceedings of the 7th SIGDial Workshop on Discourse and Dialogue - SIGdial’06,</booktitle>
<location>Sydney</location>
<contexts>
<context position="2510" citStr="Denis et al., 2006" startWordPosition="391" endWordPosition="394">ory reference domains. The goal of a referring act is then to discriminate a referent inside a reference domain but also a reference domain in a set of reference domains that we call here referential space. Moreover each referring act presupposes a given state of the referential space, and the explicit representation of these presuppositions as constraints on the suitable domain for interpretation or generation allows the implementation of a reversible reference module. We will focus here on generation. Details about the interpretation side of RDT can be found in (Salmon-Alt and Romary, 2001; Denis et al., 2006). However most of the previous work on RDT does not address computational details. Although (Salmon-Alt and Romary, 2000) provides a generation algorithm, the formal definition of a reference domain and the explicit representation of the constraints are not provided. In this paper we show how RDT can be used to generate referring expressions. The context of our work is the GIVE challenge (Byron et al., 2007; Byron et al., 2009). This challenge aims to evaluate instruction generation systems in a situated setting. The goal is to provide instructions to a player in a 3D maze in order to guide hi</context>
<context position="4951" citStr="Denis et al., 2006" startWordPosition="813" endWordPosition="816">an also rely on the previous referring acts, for instance when uttering “Push a blue button. Yes this one”, where ”this one” would be unambiguously uttered in a context of a red and a blue button thanks to the mention of “a blue button”. A reference model has to take into account these different ways to discriminate. On the other hand, a reference model has also to consider how objects are grouped together to form the context sets. They can be constructed thanks to similarity or proximity of objects (Thorisson, 1994), by the gestures that are made (Landragin, 2006) or by the discourse itself (Denis et al., 2006). We will be limited to the dimension of semantic similarity in this paper. RDT claims that the context sets (reference domains or RD) are structures that both gather individuals and discriminate them. A reference domain is basically a set of objects that share some semantic description N. A partition that discriminates the elements is also attached to the domain. The partition is based on a differentiation criterion such that two elements being discriminated with this criterion are put in two different equivalency classes. For instance, in a domain of two buttons, one blue and one red, the tw</context>
</contexts>
<marker>Denis, Pitel, Quignard, 2006</marker>
<rawString>Alexandre Denis, Guillaume Pitel, and Matthieu Quignard. 2006. Resolution of Referents Groupings in Practical Dialogues. In Proceedings of the 7th SIGDial Workshop on Discourse and Dialogue - SIGdial’06, Sydney Australia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Albert Gatt</author>
<author>Kees van Deemter</author>
</authors>
<title>Incremental generation of plural descriptions: Similarity and partitioning.</title>
<date>2007</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing, EMNLP-07.</booktitle>
<marker>Gatt, van Deemter, 2007</marker>
<rawString>Albert Gatt and Kees van Deemter. 2007. Incremental generation of plural descriptions: Similarity and partitioning. In Proceedings of the Conference on Empirical Methods in Natural Language Processing, EMNLP-07.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeanette K Gundel</author>
<author>Nancy Hedberg</author>
<author>Ron Zacharski</author>
</authors>
<title>Cognitive status and the form of referring expressions in discourse.</title>
<date>1993</date>
<journal>Language,</journal>
<volume>69</volume>
<issue>2</issue>
<contexts>
<context position="18038" citStr="Gundel et al., 1993" startWordPosition="3230" endWordPosition="3233">fied domain is the conjunction of the properties in the description SD with the value of the differentiation criterion used to create the partition namely, properties of val(c) true of the referent (line 2). If the criterion is the identifier, it is ignored in S. For instance, if there is a domain of buttons with a partition on color, the description might be {button, blue}. In the second step, the algorithm iterates through the underspecified domains instantiated with S and selects the first that matches. The order in which underspecified domains are tested is particularly important. We use (Gundel et al., 1993) Givenness hierarchy and ordered the UDs based on the cognitive status of the corresponding referent. We extended the hierarchy to include alternative NPs: “this one” &gt; “this N” &gt; “the N” &gt; “the other one” &gt; “the other N” &gt; “another one” &gt; “another N” &gt; “a N”. In the third step, the referential space is restructured by either creating a new domain or increasing the salience of an existing domain (Figure 3). The goal of this restructuring step is to be able to restrict the further focus to a smaller domain. For instance, when dealing with red buttons we want to avoid focusing the blue buttons. </context>
</contexts>
<marker>Gundel, Hedberg, Zacharski, 1993</marker>
<rawString>Jeanette K. Gundel, Nancy Hedberg, and Ron Zacharski. 1993. Cognitive status and the form of referring expressions in discourse. Language, 69(2):274–307.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Klarner</author>
</authors>
<title>Reversibility and re-usability of resources in NLG and natural language dialog systems.</title>
<date>2005</date>
<booktitle>In Proceedings of the 10th European Workshop on Natural Language Generation (ENLG-05),</booktitle>
<location>Aberdeen, Scotland.</location>
<contexts>
<context position="12726" citStr="Klarner, 2005" startWordPosition="2252" endWordPosition="2253"> Figure 1: createPartitions(D, T, RS) 3 Referring In this section we detail the generation algorithm in RDT. It implements a dynamic view of referring whereby each referring act updates the current referential space. This incremental update of the referential space proceeds in three steps. First, a domain containing the referent is found. Then this domain is used to match a so called underspecified domain (Salmon-Alt and Romary, 2001). Third, the input RS is restructured relative to the selected reference domain. The approach enables the implementation of a type B reversible reference module (Klarner, 2005), that is a module in which both directions share the Expression U(N, t) matches D iff ∃(c, P, F) E D; this one F = {{t}} ∧ msd(D) this N F = {{t}} ∧ t E N2 the N t E N2 ∧ {t} E P ∧ VX EP, X =�{t}⇒X∩N2 =0 the other one F =� 0 ∧ P \ F = {{t}} ∧ msd(D) the other N F =� 0 ∧ P \ F = {{t}} ∧ GD C N2 another one F =� 0 ∧ {t} E P \ F ∧ msd(D) another N F =� 0 ∧ {t} E P \ F ∧ GD C N2 a N t E N2 ∧ t E GD Table 1: Underspecified domains for each type of referring expression same resources, namely a set of underspecified domains. In interpretation, the goal is to check for each existing domain if it matc</context>
</contexts>
<marker>Klarner, 2005</marker>
<rawString>Martin Klarner. 2005. Reversibility and re-usability of resources in NLG and natural language dialog systems. In Proceedings of the 10th European Workshop on Natural Language Generation (ENLG-05), Aberdeen, Scotland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emiel Krahmer</author>
<author>Marit Theune</author>
</authors>
<title>Efficient context-sensitive generation of referring expressions.</title>
<date>2002</date>
<booktitle>Information sharing: Givenness and newness in language processing,</booktitle>
<pages>223--264</pages>
<editor>In K. van Deemter and R. Kibble, editors,</editor>
<publisher>CSLI Publications, Stanford.</publisher>
<contexts>
<context position="1419" citStr="Krahmer and Theune, 2002" startWordPosition="214" endWordPosition="218">ch speech acts act and the source of the information relative to which speech acts are interpreted” (Stalnaker, 1998). To put it briefly, referring acts not only rely on the context to produce a reference but also modify it. This aspect is not taken into account in the classical generation algorithm by (Dale and Reiter, 1995). Each referent is generated by discriminating it inside a context. However, the construction and update of this context is not adressed. Further literature on reference generation partially gives an account for the dynamic nature of the referring process. For example in (Krahmer and Theune, 2002), each referring act increases the salience of the referent such that further references can be made according to a smaller context, namely the set of objects whose salience is greater than the referent’s salience. Reference Domain Theory (RDT) (Reboul, 1998; Salmon-Alt and Romary, 2001) goes a step further by assuming that referring acts make salient the context sets themselves. This theory addresses the construction and update of the context sets, called in this theory reference domains. The goal of a referring act is then to discriminate a referent inside a reference domain but also a refer</context>
</contexts>
<marker>Krahmer, Theune, 2002</marker>
<rawString>Emiel Krahmer and Marit Theune. 2002. Efficient context-sensitive generation of referring expressions. In K. van Deemter and R. Kibble, editors, Information sharing: Givenness and newness in language processing, pages 223–264. CSLI Publications, Stanford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emiel Krahmer</author>
<author>Sebastiaan van Erk</author>
<author>Andr Verleg</author>
</authors>
<title>Graph-based generation of referring expressions.</title>
<date>2003</date>
<journal>Computational Linguistics,</journal>
<pages>23--53</pages>
<marker>Krahmer, van Erk, Verleg, 2003</marker>
<rawString>Emiel Krahmer, Sebastiaan van Erk, and Andr Verleg. 2003. Graph-based generation of referring expressions. Computational Linguistics, 23:53–72.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fr´ed´eric Landragin</author>
<author>Laurent Romary</author>
</authors>
<title>Referring to Objects Through Sub-Contexts in Multimodal Human-Computer Interaction.</title>
<date>2003</date>
<booktitle>In Proceedings of the Seventh Workshop on the Semantics and Pragmatics of Dialogue (DiaBruck’03),</booktitle>
<pages>67--74</pages>
<institution>Saarland University.</institution>
<contexts>
<context position="33188" citStr="Landragin and Romary, 2003" startWordPosition="5986" endWordPosition="5989">the number of instructions (6.4 versus 9.3). We conjecture that the good While some RE generation models focus on the side of generating the description itself (Dale and Reiter, 1995; Krahmer et al., 2003), we tried to focus more on the side of generating the determiner. While works such as (Poesio et al., 1999) also generates the determiner, they rely on statistical learning of this determiner. On the contrary we did so by representing logically the constraints carried by a referring expressions on the context of its interpretation. However, the presented model has several limits. First, as (Landragin and Romary, 2003) describe, there is no one-to-one relation between the referring expressions and the referring modes. In order to tackle this problem we can associate a set of UD to a referring expression. We only need then to add an additional loop on the different UDs for a given type of referring expression. The second extension is the possibility to have several partitions. It is also possible to iterate over the set of partitions of a domain, but we then need to consider the salience of each partition. In addition, the restructuring has to be amended to increase the salience of the partition in which a g</context>
</contexts>
<marker>Landragin, Romary, 2003</marker>
<rawString>Fr´ed´eric Landragin and Laurent Romary. 2003. Referring to Objects Through Sub-Contexts in Multimodal Human-Computer Interaction. In Proceedings of the Seventh Workshop on the Semantics and Pragmatics of Dialogue (DiaBruck’03), pages 67–74. Saarland University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fr´ed´eric Landragin</author>
</authors>
<title>Visual perception, language and gesture: A model for their understanding in multimodal dialogue systems.</title>
<date>2006</date>
<journal>Signal Processing,</journal>
<volume>86</volume>
<issue>12</issue>
<contexts>
<context position="4903" citStr="Landragin, 2006" startWordPosition="806" endWordPosition="807">” or “the other button”. The discrimination can also rely on the previous referring acts, for instance when uttering “Push a blue button. Yes this one”, where ”this one” would be unambiguously uttered in a context of a red and a blue button thanks to the mention of “a blue button”. A reference model has to take into account these different ways to discriminate. On the other hand, a reference model has also to consider how objects are grouped together to form the context sets. They can be constructed thanks to similarity or proximity of objects (Thorisson, 1994), by the gestures that are made (Landragin, 2006) or by the discourse itself (Denis et al., 2006). We will be limited to the dimension of semantic similarity in this paper. RDT claims that the context sets (reference domains or RD) are structures that both gather individuals and discriminate them. A reference domain is basically a set of objects that share some semantic description N. A partition that discriminates the elements is also attached to the domain. The partition is based on a differentiation criterion such that two elements being discriminated with this criterion are put in two different equivalency classes. For instance, in a dom</context>
<context position="7277" citStr="Landragin, 2006" startWordPosition="1224" endWordPosition="1226">er does not know the maze a priori while the system knows it completely. But we assume that the RS is limited to the current room where the player is standing. Each time the player enters a new room, the RS is refreshed and a new one is built. We then suppose that the player is able to access the objects by walking around, and hence that the RS is shared, removing problems related to asymmetry. The referential space provides a traversal order for the reference domains it contains. The most salient RD are tested first. While it would be interesting to model visual salience in the GIVE setting (Landragin, 2006), we are limited to equate salience and recency. Thus, each domain will be associated to a number indicating how recently it has been selected. The way the salience or the whole RS is affected by the discrimination process is described in section 3.2. We now provide a formal definition of a reference domain and a referential space building algorithm. 2.1 Reference domains We assume that (E, V ) is an environment composed of E, the universe of all objects and V , the set of ground predicates that hold in the environment. Props is a set of unary predicates names such as blue, red, left, or right</context>
</contexts>
<marker>Landragin, 2006</marker>
<rawString>Fr´ed´eric Landragin. 2006. Visual perception, language and gesture: A model for their understanding in multimodal dialogue systems. Signal Processing, 86(12):3578–3595.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Massimo Poesio</author>
<author>Renate Henschel</author>
<author>Janet Hitzeman</author>
<author>Rodger Kibble</author>
</authors>
<title>Statistical NP generation: A first report.</title>
<date>1999</date>
<booktitle>In Proceedings of the ESSLLI Workshop on NP Generation,</booktitle>
<location>Utrecht.</location>
<contexts>
<context position="32874" citStr="Poesio et al., 1999" startWordPosition="5936" endWordPosition="5939">d the average number of instructions that were provided in the meantime. The evaluation has been conducted with 30 subjects resulting in 20 valid games. The results show that the RDT performs better than the classical strategy, both for the average completion time (8.8 seconds versus 12.5 seconds) and for the number of instructions (6.4 versus 9.3). We conjecture that the good While some RE generation models focus on the side of generating the description itself (Dale and Reiter, 1995; Krahmer et al., 2003), we tried to focus more on the side of generating the determiner. While works such as (Poesio et al., 1999) also generates the determiner, they rely on statistical learning of this determiner. On the contrary we did so by representing logically the constraints carried by a referring expressions on the context of its interpretation. However, the presented model has several limits. First, as (Landragin and Romary, 2003) describe, there is no one-to-one relation between the referring expressions and the referring modes. In order to tackle this problem we can associate a set of UD to a referring expression. We only need then to add an additional loop on the different UDs for a given type of referring e</context>
</contexts>
<marker>Poesio, Henschel, Hitzeman, Kibble, 1999</marker>
<rawString>Massimo Poesio, Renate Henschel, Janet Hitzeman, and Rodger Kibble. 1999. Statistical NP generation: A first report. In Proceedings of the ESSLLI Workshop on NP Generation, Utrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anne Reboul</author>
</authors>
<title>A relevance theoretic approach to reference.</title>
<date>1998</date>
<booktitle>In Acts of the Relevance Theory Workshop,</booktitle>
<location>University of Luton, England.</location>
<contexts>
<context position="1677" citStr="Reboul, 1998" startWordPosition="257" endWordPosition="258">lassical generation algorithm by (Dale and Reiter, 1995). Each referent is generated by discriminating it inside a context. However, the construction and update of this context is not adressed. Further literature on reference generation partially gives an account for the dynamic nature of the referring process. For example in (Krahmer and Theune, 2002), each referring act increases the salience of the referent such that further references can be made according to a smaller context, namely the set of objects whose salience is greater than the referent’s salience. Reference Domain Theory (RDT) (Reboul, 1998; Salmon-Alt and Romary, 2001) goes a step further by assuming that referring acts make salient the context sets themselves. This theory addresses the construction and update of the context sets, called in this theory reference domains. The goal of a referring act is then to discriminate a referent inside a reference domain but also a reference domain in a set of reference domains that we call here referential space. Moreover each referring act presupposes a given state of the referential space, and the explicit representation of these presuppositions as constraints on the suitable domain for </context>
</contexts>
<marker>Reboul, 1998</marker>
<rawString>Anne Reboul. 1998. A relevance theoretic approach to reference. In Acts of the Relevance Theory Workshop, University of Luton, England.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Susanne Salmon-Alt</author>
<author>Laurent Romary</author>
</authors>
<title>Generating referring expressions in multimodal contexts.</title>
<date>2000</date>
<booktitle>In Workshop on Coherence in Generated Multimedia - INLG</booktitle>
<location>Mitzpe Ramon,</location>
<contexts>
<context position="2631" citStr="Salmon-Alt and Romary, 2000" startWordPosition="409" endWordPosition="412">but also a reference domain in a set of reference domains that we call here referential space. Moreover each referring act presupposes a given state of the referential space, and the explicit representation of these presuppositions as constraints on the suitable domain for interpretation or generation allows the implementation of a reversible reference module. We will focus here on generation. Details about the interpretation side of RDT can be found in (Salmon-Alt and Romary, 2001; Denis et al., 2006). However most of the previous work on RDT does not address computational details. Although (Salmon-Alt and Romary, 2000) provides a generation algorithm, the formal definition of a reference domain and the explicit representation of the constraints are not provided. In this paper we show how RDT can be used to generate referring expressions. The context of our work is the GIVE challenge (Byron et al., 2007; Byron et al., 2009). This challenge aims to evaluate instruction generation systems in a situated setting. The goal is to provide instructions to a player in a 3D maze in order to guide him to find a hidden trophy. We are here interested with the referring aspect involved in GIVE: the player has to push butt</context>
<context position="14259" citStr="Salmon-Alt and Romary, 2000" startWordPosition="2548" endWordPosition="2552">eferring algorithm and the process steering the continuous update of the referential space. 3.1 Underspecified domains An underspecified domain (UD) represents a partially specified reference domain corresponding to the constraints carried by a referring act. We will say that an underspecified domain matches a reference domain if all the constraints of the UD are satisfied for the reference domain. There may be constraints on the ground of the domain, its salience or the existence of a particular partition structure. Table 1 summarizes most of the types of underspecified domains described in (Salmon-Alt and Romary, 2000; Salmon-Alt and Romary, 2001). Each underspecified domain is noted U(N, t), where t is the intended referent and N ⊆ Props is a semantic description. We will note Nz the set of objects that have the semantic description N that is Nz = {x|x E E, dp E N, p(x) E V }. We assume there is for each description N a given wording, and we will write for instance “the N” to denote a definite RE where N has to be replaced by the wording of N. The notation msd(D) stands for most salient description, that is, there is no more salient domain than D with a different description. This is equivalent to W E RS;</context>
</contexts>
<marker>Salmon-Alt, Romary, 2000</marker>
<rawString>Susanne Salmon-Alt and Laurent Romary. 2000. Generating referring expressions in multimodal contexts. In Workshop on Coherence in Generated Multimedia - INLG 2000, Mitzpe Ramon, Israel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Susanne Salmon-Alt</author>
<author>Laurent Romary</author>
</authors>
<title>Reference resolution within the framework of cognitive grammar.</title>
<date>2001</date>
<booktitle>In Proceeding of the International Colloquium on Cognitive Science,</booktitle>
<location>San Sebastian,</location>
<contexts>
<context position="1707" citStr="Salmon-Alt and Romary, 2001" startWordPosition="259" endWordPosition="262">ation algorithm by (Dale and Reiter, 1995). Each referent is generated by discriminating it inside a context. However, the construction and update of this context is not adressed. Further literature on reference generation partially gives an account for the dynamic nature of the referring process. For example in (Krahmer and Theune, 2002), each referring act increases the salience of the referent such that further references can be made according to a smaller context, namely the set of objects whose salience is greater than the referent’s salience. Reference Domain Theory (RDT) (Reboul, 1998; Salmon-Alt and Romary, 2001) goes a step further by assuming that referring acts make salient the context sets themselves. This theory addresses the construction and update of the context sets, called in this theory reference domains. The goal of a referring act is then to discriminate a referent inside a reference domain but also a reference domain in a set of reference domains that we call here referential space. Moreover each referring act presupposes a given state of the referential space, and the explicit representation of these presuppositions as constraints on the suitable domain for interpretation or generation a</context>
<context position="12550" citStr="Salmon-Alt and Romary, 2001" startWordPosition="2224" endWordPosition="2227">set (T0, P, ∅) as D’s partition structure 9: for all X ∈ P such that |X |&gt; 1 do 10: D&apos; ← hX, SD ∪ sh(X, T0), σD, def(X)i 11: createPartitions(D&apos;, T1..n, RS) 12: end for 13: end if 14: end if Figure 1: createPartitions(D, T, RS) 3 Referring In this section we detail the generation algorithm in RDT. It implements a dynamic view of referring whereby each referring act updates the current referential space. This incremental update of the referential space proceeds in three steps. First, a domain containing the referent is found. Then this domain is used to match a so called underspecified domain (Salmon-Alt and Romary, 2001). Third, the input RS is restructured relative to the selected reference domain. The approach enables the implementation of a type B reversible reference module (Klarner, 2005), that is a module in which both directions share the Expression U(N, t) matches D iff ∃(c, P, F) E D; this one F = {{t}} ∧ msd(D) this N F = {{t}} ∧ t E N2 the N t E N2 ∧ {t} E P ∧ VX EP, X =�{t}⇒X∩N2 =0 the other one F =� 0 ∧ P \ F = {{t}} ∧ msd(D) the other N F =� 0 ∧ P \ F = {{t}} ∧ GD C N2 another one F =� 0 ∧ {t} E P \ F ∧ msd(D) another N F =� 0 ∧ {t} E P \ F ∧ GD C N2 a N t E N2 ∧ t E GD Table 1: Underspecified d</context>
<context position="14289" citStr="Salmon-Alt and Romary, 2001" startWordPosition="2553" endWordPosition="2556">ocess steering the continuous update of the referential space. 3.1 Underspecified domains An underspecified domain (UD) represents a partially specified reference domain corresponding to the constraints carried by a referring act. We will say that an underspecified domain matches a reference domain if all the constraints of the UD are satisfied for the reference domain. There may be constraints on the ground of the domain, its salience or the existence of a particular partition structure. Table 1 summarizes most of the types of underspecified domains described in (Salmon-Alt and Romary, 2000; Salmon-Alt and Romary, 2001). Each underspecified domain is noted U(N, t), where t is the intended referent and N ⊆ Props is a semantic description. We will note Nz the set of objects that have the semantic description N that is Nz = {x|x E E, dp E N, p(x) E V }. We assume there is for each description N a given wording, and we will write for instance “the N” to denote a definite RE where N has to be replaced by the wording of N. The notation msd(D) stands for most salient description, that is, there is no more salient domain than D with a different description. This is equivalent to W E RS; σDI ≥ σD n SDI =� SD. The ind</context>
</contexts>
<marker>Salmon-Alt, Romary, 2001</marker>
<rawString>Susanne Salmon-Alt and Laurent Romary. 2001. Reference resolution within the framework of cognitive grammar. In Proceeding of the International Colloquium on Cognitive Science, San Sebastian, Spain.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Stalnaker</author>
</authors>
<title>On the representation of context.</title>
<date>1998</date>
<journal>Journal of Logic, Language and Information,</journal>
<volume>7</volume>
<issue>1</issue>
<contexts>
<context position="911" citStr="Stalnaker, 1998" startWordPosition="132" endWordPosition="133">Domain Theory which gives a dynamic account of reference. This reference model assumes that each referring act both relies and updates the reference context. We present a formal definition of a reference domain, a generation algorithm and its instantiation in the GIVE challenge. 1 Introduction Reference is a process in which participants interpret and produce their referring expressions according to the previous context. But as Stalnaker puts it: the discourse context “is both the object on which speech acts act and the source of the information relative to which speech acts are interpreted” (Stalnaker, 1998). To put it briefly, referring acts not only rely on the context to produce a reference but also modify it. This aspect is not taken into account in the classical generation algorithm by (Dale and Reiter, 1995). Each referent is generated by discriminating it inside a context. However, the construction and update of this context is not adressed. Further literature on reference generation partially gives an account for the dynamic nature of the referring process. For example in (Krahmer and Theune, 2002), each referring act increases the salience of the referent such that further references can</context>
</contexts>
<marker>Stalnaker, 1998</marker>
<rawString>Robert Stalnaker. 1998. On the representation of context. Journal of Logic, Language and Information, 7(1):3–19.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kristinn R Thorisson</author>
</authors>
<title>Simulated perceptual grouping: An application to human-computer interaction.</title>
<date>1994</date>
<booktitle>In Proceedings of the Sixteenth Annual Conference of the Cognitive Science Society,</booktitle>
<location>Atlanta,</location>
<contexts>
<context position="4854" citStr="Thorisson, 1994" startWordPosition="798" endWordPosition="799">he current center of attention, e.g. “this button” or “the other button”. The discrimination can also rely on the previous referring acts, for instance when uttering “Push a blue button. Yes this one”, where ”this one” would be unambiguously uttered in a context of a red and a blue button thanks to the mention of “a blue button”. A reference model has to take into account these different ways to discriminate. On the other hand, a reference model has also to consider how objects are grouped together to form the context sets. They can be constructed thanks to similarity or proximity of objects (Thorisson, 1994), by the gestures that are made (Landragin, 2006) or by the discourse itself (Denis et al., 2006). We will be limited to the dimension of semantic similarity in this paper. RDT claims that the context sets (reference domains or RD) are structures that both gather individuals and discriminate them. A reference domain is basically a set of objects that share some semantic description N. A partition that discriminates the elements is also attached to the domain. The partition is based on a differentiation criterion such that two elements being discriminated with this criterion are put in two diff</context>
</contexts>
<marker>Thorisson, 1994</marker>
<rawString>Kristinn R. Thorisson. 1994. Simulated perceptual grouping: An application to human-computer interaction. In Proceedings of the Sixteenth Annual Conference of the Cognitive Science Society, Atlanta, Georgia.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>