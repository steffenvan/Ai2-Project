<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000005">
<sectionHeader confidence="0.5454735" genericHeader="abstract">
AN INDEXING TECHNIQUE FOR IMPLEMENTING
COMMAND RELATIONS
</sectionHeader>
<author confidence="0.926882">
Longin Latecki
</author>
<affiliation confidence="0.999222">
University of Hamburg
Department of Computer Science
</affiliation>
<address confidence="0.617255">
Bodenstedtstr. 16, 2000 Hamburg 50
Germany
TOPIC AREA: SYNTAX, SEMANTICS
</address>
<sectionHeader confidence="0.8928" genericHeader="keywords">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.997851545454545">
Command relations are important tools
in linguistics, especially in anaphora
theory. In this paper I present an indexing
technique which allows us to implement a
simple and efficient check for most cases
of command relations which have been
presented in linguistic literature. I also
show a wide perspective of applications
for the indexing technique in the imple-
mentation of other linguistic phenomena
in syntax as well as in semantics.
</bodyText>
<sectionHeader confidence="0.999192" genericHeader="introduction">
0. INTRODUCTION
</sectionHeader>
<bodyText confidence="0.999450592592593">
Barker and Pullum (1990) have given a general
definition of command relations. Their definition
covers most cases of command relations that have
been presented in linguistic literature. I will present
here an indexing technique for syntax trees which
allows us to implement a check for all command
relations which fulfill the definition from
Barker/Pullum (1990). The indexing technique can
be implemented in a simple and efficient way
without any special requierments for the formalism
used. Hence, the indexing technique has a wide
spectrum of applications for testing command
relations in syntactic analysis. Futhermore, this
method can also be used for command tests in
semantics, i.e. to test for any two semantic
representations whether the corresponding nodes of
the syntax tree are in a command relation. The
usefulness and necessity of a command test in
semantics have been demonstrated in Latecki/Pinkal
(1990).
The general idea of the indexing technique is the
following: while a syntax tree is being built, special
indices are assigned to the nodes of this tree.
Afterwards we can check whether a command
relation between two nodes of this tree holds by
merely examining simple set-theoretical relations of
corresponding index sets.
</bodyText>
<sectionHeader confidence="0.999864" genericHeader="method">
1. A GENERAL DEFINITION FOR
COMMAND RELATIONS
</sectionHeader>
<bodyText confidence="0.998978666666667">
The general command definition from
Barker/Pullum (1990) can be informally stated in the
following way:
</bodyText>
<subsectionHeader confidence="0.685587">
1.1 DEFINITION (all). a P-commands p iff
</subsectionHeader>
<bodyText confidence="0.9931615">
every node with a property P that properly
dominates a also dominates [3.
In this chapter I will show that this definition is
equivalent to the following definition (minimum).
</bodyText>
<subsectionHeader confidence="0.724125">
1.2 DEFINITION (minimum). a P-c om-
</subsectionHeader>
<bodyText confidence="0.9999094">
mands [3 iff the first node with a property P that
properly dominates a also dominates p.
In this definition the rust node that dominates a
means the node most immediately dominating a, as
it is usually used in linguistics. Below I will specify
both of these definitions formally.
The main difference between these two definitions
is that in the first we must check every node with a
property P that properly dominates a, while in the
second it is enough to check only one node, just the
first node with the property P that properly
diominates a.
It can be easily seen that the command tests based
on definition 1.2 are an important improvement in
efficiency for computational applications.
</bodyText>
<page confidence="0.879254">
-51 -
</page>
<bodyText confidence="0.99720675">
Both versions (all) and (minimum) are used as
command definitions in linguistic literature, so their
equivalence also has linguistic consequences. For
example, definition 1.3 of MAX-command from
Barker/Pullum (1990) (which I formulate following
Sells&apos; definition of c-command, Sells (1987)) is
equivalent to Definition 1.4, which has been
proposed in Aoun/Sportich (1982).
</bodyText>
<listItem confidence="0.8138465">
1.3 DEFINITION. a MAX-commands 13 if
every maximal projection properly dominating a
dominates 13.
1.4 DEFINITION. a MAX-commands p iff
the first maximal projection properly dominating a
dominates p.
</listItem>
<bodyText confidence="0.969865611111111">
These definitions are special cases of definitions
1.1 and 1.2 for the property of being a set of
maximal projections.
Before I formulate the general command definition
in a formal way, I will now quote some other
definitions from Barker/Pullum (1990).
1.5 DEFINITION. A relation R on a set N is
reflexive iff aRa for all a in N; irreflexive iff
aRa; symmetric iff aRb implies bRa;
asymmetric iff aRb implies --IbRa;
antisymmetric iff aRb and bRa implies a=b;
transitive iff aRb and bRc implies aRc.
A relation R on a set N is called a linear order if
it is reflexive, antisymmetric, transitive and has the
following property (comparability): for every a
and b in N, either aRb or bRa.
The following definition of a tree stems from
Wall (1972).
</bodyText>
<sectionHeader confidence="0.4411665" genericHeader="method">
1.6 DEFINITION. A tree is a 5-tuple
T=&lt;N,L,P,&lt;P,LABEL&gt;, where
</sectionHeader>
<bodyText confidence="0.9810615">
N is a finite nonempty set, the nodes of T,
L is a finite set, the labels of T,
is a reflexive, antisymmetric relation on N. the
dominance relation of T,
&lt;P is an in&apos; eflexive, asymmetric, transitive relation
on N, the precedence relation of T, and
LABEL is a total function from N into L, the
labeling function of T, such that for all a, b, c and d
from N and some unique r in N (the root node of
T), the following hold:
</bodyText>
<listItem confidence="0.9759008">
(i) The Single Root Condition: r?.Da
(ii) The Exclusivity Condition:
(Db v b?Pa)&lt;-÷—,(a&lt;Pb v b&lt;Pa)
(iii) The Nontangling Condition:
(a&lt;Pb A aPc A b&gt;r)(1)--&gt;C&lt;Pd
</listItem>
<bodyText confidence="0.859272333333333">
I will also use &gt;I) the proper dominance relation,
which will be just like but with all pairs of the
form &lt;a,a&gt; removed.
</bodyText>
<subsectionHeader confidence="0.533543">
1.7 DEFINITION. If aM 3 we say that a is
</subsectionHeader>
<bodyText confidence="0.943059941176471">
the mother of (3 , or a immediately
dominates 13, where aMf3 iff
a&gt;D13 A --ax [a&gt;Dx&gt;].
1.8 DEFINITION. A property P on a set of
nodes N is a subset of N. If a node a satisfies P, I
will write ae P or P(a).
1.9 DEFINITION. The set of upper bounds
for a with respect to a property P, written UB(a,P),
is given by
UB(a,P). (Pe N:13&gt;Da A P(13)).
Thus 13 is an upper bound for a if and only if
it properly dominates a and satisfies P.
1.10 DEFINITION. Let X be any nonempty
subset of a set of nodes N of a tree T. We will call
an element a the smallest element of X and denote
it as minX if aE X and for every node x xe X
x?_Da. If X is an empty set, then minX = the root
node of T.
A set X is said to be well-ordered by if the
relation .?..r) is a linear order on X and every
nonempty subset of X has a smallest element. For
example, the set Z of integers with the usual
ordering relation is well-ordered.
Now I can formally specify the meaning of the
expression &amp;quot;the first node with a property P that
properly dominates a&amp;quot; from the definition 1.2; it
denotes the smallest element of the set UB(a,P),
minUB(a,F). First I will show that this element
always exists.
.In set theory, it is a well-known fact that in any
tree, a set of nodes that dominate a given node is
well-ordered in the dominance relation (see
Kuratowski/Mostowski (1976), for example). To be
precise, for a given node a of a tree T, the set
UB(a)=(xE T: x&gt;Da) is well-ordered. Hence, the set
UB(a,P)=UB(a) r.) P has a smallest element, which
we denote minUB(a,P).
At this point we are ready to formally state
command definitions 1.1 and 1.2.
1.11 DEFINITION (all). a P-commands
iff Vx (xe UB(a,P) xg)13).
1.12 DEFINITION (minimum). a F-com-
mands iff minUB(a,P)P13.
- 52 -
We say that P generates the P-command relation.
For example, we obtain the MAX-command
relation (1.3) as a special case of Definition 1.11 if
we take the set (aEN: LABEL(a)E MAX) as a
property P. where MAX is any set of maximal
projections.
Definition 1.11 is the general command definition
from Barker/Pullum (1990).
1.13 THEOREM. Definitions 1.11 (all) and
1,12 (minimum) are equivalent.
Proof. If a pair &lt;a,I3&gt; fulfills the definition (all),
then it also fulfills the definition (minimum),
because minUB(a,P)E UB(cc,P) if UB(a,P) 0. If
UB(a,P) = 0, then minUB(a,P) = the root node of
T, so condition minUB(a,P)P13 is also fulfilled.
Conversely, let a pair &lt;a43&gt; fulfill the definition
(min). This means that minUB(a,P)P13.
We must show that Vx (XE UB(a,P) xPf3). If
LIB(a,P) is the empty set, then the claim is trivially
fulfilled. If UB(a,P) is not empty, then let x be any
element from UB(a,P). Then xPminUB(a,P).
Since &amp;quot;P&amp;quot; is a linear relation on UB(a,P), it is
transitive. Hence, ii13 m inUB (a ,P) and
rninUB(a,P)A3 implies x.?..13(3.
</bodyText>
<sectionHeader confidence="0.996855" genericHeader="method">
2. AN INDEXING TECHNIQUE
</sectionHeader>
<bodyText confidence="0.99944655">
I will now present an indexing mechanism which
allows us to check any command relation in the
sense of Definition 1.11 in a simple and
straightforward way.
Let P be any property of nodes of a given syntax
wee. The idea is the following: while the syntax tree
is being built, there are special indices assigned to
every node of this tree.
Generally, every node inherits indices from its
mother.
Specifically, if P(a) holds for a node a, then a
unique new index is put into the index set of a and
the new index set of a obtained in this way will be
inherited futher. This process is formally described
in the following definition of functions indp and fp.
Letting T be any syntax tree, we define functions
indp and fp from all nodes of T into finite subsets
of N (the positive integers), whereby we can take
finite subsets of any index set as a image of indp
and fp.
</bodyText>
<listItem confidence="0.621885285714286">
2.1 DEFINITION. Let P be any property. The
function indp: N --&gt; F (N)= (a c N: a is a
finite subset of N) is defined recursively as follows:
10 indp(root(T))= (1), where root(T) denotes the
root node.
20 If a immediately dominates /3, then
indp(13) = indp(a) u
</listItem>
<bodyText confidence="0.991591">
where fp is a function fp: N ---&gt; F (N) which
fulfills the following conditions:
11 If ae P, then fp(a) = 0.
21 If a€ P, then fp(a) = ), for some unique
index TEN (&apos;re ffp(Y): YEN and &apos;Ma)).
The procedural aspect of this definition can be
described as follows. First, the function fp assigns a
set with a unique index to every node from P, and
the empty set to every node which does not belong
to P,
Then, for every node, the set it has been assigned
by the function fp is added to the indices it inherits
from its mother. The result is the value of the
function indp.
Based on this description, it is easy to note the
following facts.
</bodyText>
<subsectionHeader confidence="0.925689">
2.2 FACT.
</subsectionHeader>
<bodyText confidence="0.874856236842105">
If 013, then indp(y) ç indp(13) - fp().
2.3 FACT.
If ye P, then 7&gt;_DJ3 iff fp(y) ç indp(f3).
Now I present the main theorem of this paper
which gives a basis for efficient and simple
implementations of P-command relations. Due to
this theorem, we can check whether any P-command
relation holds between two nodes by merely
examining the subset relationship of corresponding
index sets.
2.4 THEOREM. Node a P-commands node
iff indp(a) - fp(a) c indp(0).
The proof, which makes use of equivalence
Theorem 1.13, will be given at the end of this
chapter.
To illustrate the P-command check based on the
theorem above, I give an example for a MAX-
command relation (1.3) which we obtain from
general command definition 1.11 if we take the set
(aEN: LABEL(a)E MAX) as a property P. where
MAX = (NP, VP, AP, PP, S-bar) is a set of
maximal projections (Sells 1987).
Let us consider the syntax analysis for sentence
(2.5). In tree (2.6), the upper set of indices at every
node corresponds to the value of the function fp for
- 53 -
this node and the lower set of indices corresponds to
the value of the function indp for this node.
(2.5) A friend of his saw every man with a
telescope.
telescope&amp;quot;, by verifying that indp(&amp;quot;saw&amp;quot;)-fp(&amp;quot;saw&amp;quot;).
(1,5) c (1,5,7 )=indp(&amp;quot;with a telescope&amp;quot;),
or that &amp;quot;every man&amp;quot; does not MAX-command &amp;quot;his&amp;quot;,
by verifying that
indp(&amp;quot;every man&amp;quot;)-fp(&amp;quot;every man&amp;quot;)= (1,5) is not a
subset of indp(&amp;quot;his&amp;quot;)= (1,2,3,4).
We can see, for example, that the vet&apos;) &amp;quot;saw&amp;quot; MAX-
commands the prepositional phrase &amp;quot;with a
</bodyText>
<figure confidence="0.99289584">
(2.6)
(2) {5}
NP (1,2) VP (1,5)
0
N-bar (1,2)
0
N(1,2)
friend
0 (4)
P(123) N1111,2,3,4)
1
of his
0
V-bar (1.5)
0 (6)
V-bar
(1 3) NP(1,5,6)
0 every man
saw
0 0
Det (1,2) N-bar (1,2)
A
{7}
PP (1,5,7)
with a telescope
</figure>
<bodyText confidence="0.993092111111111">
To do P-command tests in semantics, we merely
need to extend functions fp and indp to semantic
representations of every node. We can do this in the
following way:
If a&apos; is a semantic representation of a node a, then
fp(a&apos;) = fp(a) and indp(a) = indp(a).
Now we can check, for two given semantic
representations a&apos;, f3&apos;, whether a P-command
relation holds between the two corresponding nodes
a, 13, by examining the condition from Theorem 2.4
for a&apos;, 13% indp(a) - fp(a&apos;) indp((3). (For more
details see Latecki/Pinkal (1990).)
An important advantage of the indexing technique
is that its applicability for checking command
relations in semantics does not depend on an
ispomorphism between syntactic and semantic
structure, since the necessary syntactic information
is encoded in indices. Therefore, this information can
be moved to any required position in the semantic
structure together with the representation of a given
node.
Definition 1.11 does not cover all cases of
command relations which have been presented in
linguistic literature, but there are only a few
exceptions. One is the relation that is called c-
command in Reinhart (1976; 1981, p.612; 1983,
p.23):
</bodyText>
<subsectionHeader confidence="0.522114">
2.7 DEFINITION. Node a c(onsitituent)-
</subsectionHeader>
<bodyText confidence="0.999826888888889">
commands node 13 iff the branching node xi most
immediately dominating a either dominates f3 or is
immediately dominated by a node x2 which
dominates 13, and x2 is of the same category type as
xi. A node y is a branching node if there exists
two different nodes x,y such that &apos;yMx A yMy.
As T. Reinhart wrote, the intention of this
definition is to capture c-command relations in cases
S-bar over S or VP over VP. Hence, we can say (for
</bodyText>
<equation confidence="0.91312925">
- 54 -
our purposes) that x2 is of the same category type as
xi if LABEL(x2) = S-bar, LABEL(x1) = S or
LABEL(x2) = LABEL(xi) = VP.
</equation>
<bodyText confidence="0.995998">
This c-command definition allows the minimal
upper bound to be replaced by another node, one
node closer to the root, so this relation cannot be
generated by any property, since this property must
then depend on the node a. However, the condition
of Definition 2.7 can be generated by a relation. In
order to use a given relation R as generator, it is
enough to replace the set of upper bounds UB(a,P)
by the set UB(a,R)= (PE N: f3&gt;Dot A aR(3)), in
general command definition 1.11. For detailed
disscusion see Barker/Pullum (1990).
With an example of Reinharts c-commando
relation, I want to show that it is also possible
to treat relational command definitions
with the indexing technique. Here I do not
want to consider the treatment of the relational
command definition with the indexing technique in
the general case, because it would lead to a formal
mathematical discussion without linguistic
connections.
To specify a test for Reinharts c-command, we
need merely to modify part 20 of the definition of
the function indp in 2.1. The definition of the
function fp together with the basis test condition
given in Theorem 2.4 will be left unchanged. As a
property P we take the set of branching nodes.
New part 20 of Definition 2.1 will be formulated
in the following way:
20&apos; If a immediately dominates 13 and f3 is of the
same category as a, then indp(13) = indp(a).
If a immediately dominates f3 and f3 is not of the
same category as a then indp(f3) = indp(a) u fp().
The idea of this modification is that if a node 13 is
of the same category as a node a, then i3 only
inherits the indices from a. So, in this case, the
new index from the set fp() does not influence the
value of the function indp on 13. I illustrate the
indexing check for c-command definition 2.7 with
the syntax analysis for the following example
sentense from Reinhart (1983).
(2.8) Lola found the book in the library.
In tree (2.9), the upper set of indices at every node
corresponds to the value of the function fp at this
node and the lower set of indices corresponds to the
value of the function indp at this node.
We can see, for example, that the subject of S,
&amp;quot;Lola&amp;quot;, c-commands the COMP in S-bar, by
verifying that indp(&amp;quot;Lola&amp;quot;)-fp(&amp;quot;Lola&amp;quot;).(1) c (1).
indp(COMP),
or that the object, &amp;quot;the book&amp;quot;, c-commands the NP
in PP, &amp;quot;the library&amp;quot;, by verifying that
indp(&amp;quot;the book&amp;quot;)-fp(&amp;quot;the book&amp;quot;)= ( 1,4) c (1,4,7,8)=
indp(&amp;quot;the library&amp;quot;).
</bodyText>
<figure confidence="0.942142333333333">
5
(2.9)
a-bar
0 mo (6) 0 ,,,j0(8)
v(1,4) &amp;quot;` (1,4,6) P(1,4,7) &apos;&amp;quot; (1,4,7,8)
I I I I
found the book in the library
0
COMP ( 1)
(3/
NP ,3)
Lola
(7)
PP 1,4,7)
- 55 -
</figure>
<bodyText confidence="0.961117944444444">
To conclude this chapter I give the proof of Theorem
2.4.
Proof of Theorem 2.4.
&amp;quot; &amp;quot; Let a P-command 13 . If we denote
y=minUB(a,P) and indp(y)=E, then
indp(a) =E u fp(a), because fp(x)=0, for every
node x between a and y.
Due to Definition 1.12 (minimum), the node y also
dominates 13, hence E c indp(13). So, we have the
inclusion indp(a)-fp(a) ç indp(13).
&amp;quot;&amp;quot; Now let indp(a)-fp(a) ç indp(13), for any two
nodes a, 13 of some tree T, and let y be any node
from P that dominates a. indp(y) ç indp(a)-fp(a),
since y dominates a (2.2).
From the transitivity of the inclusion relation,
indp(y) ç indp(13). This implies that fp(y)
indp(0). Due to Fact 2.3, the needed relation y21313
holds, so a P-commands fi
</bodyText>
<sectionHeader confidence="0.999515" genericHeader="conclusions">
3. CONCLUSIONS
</sectionHeader>
<bodyText confidence="0.999879952380953">
I have presented an indexing technique which
allows us to test all command relations that fulfill
the definition of Barker and Pullum (1990). On an
example of Reinharts c-command relation, I have
also shown that it is possible to treat relational
commands with this technique.
The indexing technique can be simply and
efficiently implemented without any special
requierments for the formalism used. Based on it,
Millies (1990) has implemented tests for MAX-
command, subjacency and government in a
principle-based parser for GB (Chomsky 1981, 1982
and 1986).
It is also possible to use similar indexing
processes to treat other linguistic phenomena in
syntax as well as in semantics. Hence, the indexing
technique has a wide spectruth of applications. For
example, Latecki and PinkAl (1990) present an
indexing mechanism which allows us to achieve the
effects of &amp;quot;Nested Cooper Storage&amp;quot; (Keller 1988 and
Cooper 1983).
</bodyText>
<sectionHeader confidence="0.999826" genericHeader="acknowledgments">
ACKNOWLEDGMENTS
</sectionHeader>
<bodyText confidence="0.9993645">
I would like to thank my advisor Manfred Pinkal
for valuable discussions and suggestions.
I also want to thank Geoff Simmons for
correcting my English.
</bodyText>
<sectionHeader confidence="0.999427" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.991630688888889">
Aoun, J. / Sportiche, D. (1982): On the Formal
Theory of Government. Linguistic Review 2,
211-236.
Barker, Ch. / Pullum G. K. (1990): A Theory of
Command Relations. Linguistics and
Philosophy 13: 1-34.
Chomsky, N. (1981): Lectures on Government and
Binding. Dordrecht: Foris.
Chomsky, N. (1982): Some Concepts and
Consequences of the Theory of Government and
Binding. MIT Press.
Chomsky, N. (1986): Barriers. Linguistic Inquiry
Monigraphs 13, MIT Press: Cambrdge.
Cooper, R. (1983): Quantification and Semantic
Theory. D. Reidel, Dordrecht.
Keller, W. R. (1988): Nested Cooper Storage: The
Proper Treatment of Quantification in Ordinary
Noun Phrases. In U. Reyle and C. Rohrer
(eds.), Natural Language Parsing and Linguistic
Theories, 432-447, D. Reidel, Dordrecht.
Kuratowski, K. / Mostowski, A. (1976): Set
Theory. PWN: Warsaw-Amsterdam.
Latecki, L. / Pinkal, M. (1990): Syntactic and
Semantic Conditions for Quantifier Scope. To
appear in: Proceedings of the Workshop on
&amp;quot;Processing of Plurals and Quantifiers&amp;quot; at
GWAI-90, September 1990.
Millies, S. (1990): Ein modularer Ansatz filr
prinzipienbasiertes Parsing. LILOG-Report
139, IBM: Stuttgart, Germany.
Sells, P. (1987): Lectures on Contemporary
Semantic Theories. CSLI Lecture Notes.
Reinhart, T. (1976): The Syntactic Domain of
Anaphora. Doctoral dissertation, MIT,
Cambridge, Massachusetts.
Reinhart, T. (1981): Definite NP Anaphora and C-
Commands Domains. Linguistic Inquiry 12,
605-635.
Reinhart, T. (1983): Anaphora and Semantic
Interpretation, University of Chicago Press,
Chicago, Illinois.
Wall, R. (1972): Introduction to Mathematical
. Linguistics. Prentice Hall: Engelewood Cliffs,
New Jersey.
- 56 -
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.832643">
<title confidence="0.9966755">AN INDEXING TECHNIQUE FOR IMPLEMENTING COMMAND RELATIONS</title>
<author confidence="0.998051">Longin Latecki</author>
<affiliation confidence="0.9997485">University of Hamburg Department of Computer Science</affiliation>
<address confidence="0.9814025">Bodenstedtstr. 16, 2000 Hamburg 50 Germany</address>
<email confidence="0.872001">TOPICAREA:SYNTAX,SEMANTICS</email>
<abstract confidence="0.999478083333333">Command relations are important tools in linguistics, especially in anaphora theory. In this paper I present an indexing technique which allows us to implement a simple and efficient check for most cases of command relations which have been presented in linguistic literature. I also show a wide perspective of applications for the indexing technique in the implementation of other linguistic phenomena in syntax as well as in semantics.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Sportiche Aoun</author>
<author>D</author>
</authors>
<title>On the Formal Theory of Government.</title>
<date>1982</date>
<journal>Linguistic Review</journal>
<volume>2</volume>
<pages>211--236</pages>
<marker>Aoun, D, 1982</marker>
<rawString>Aoun, J. / Sportiche, D. (1982): On the Formal Theory of Government. Linguistic Review 2, 211-236.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G K Pullum</author>
</authors>
<title>A Theory of Command Relations.</title>
<date>1990</date>
<journal>Linguistics and Philosophy</journal>
<volume>13</volume>
<pages>1--34</pages>
<contexts>
<context position="685" citStr="Pullum (1990)" startWordPosition="100" endWordPosition="101">University of Hamburg Department of Computer Science Bodenstedtstr. 16, 2000 Hamburg 50 Germany TOPIC AREA: SYNTAX, SEMANTICS ABSTRACT Command relations are important tools in linguistics, especially in anaphora theory. In this paper I present an indexing technique which allows us to implement a simple and efficient check for most cases of command relations which have been presented in linguistic literature. I also show a wide perspective of applications for the indexing technique in the implementation of other linguistic phenomena in syntax as well as in semantics. 0. INTRODUCTION Barker and Pullum (1990) have given a general definition of command relations. Their definition covers most cases of command relations that have been presented in linguistic literature. I will present here an indexing technique for syntax trees which allows us to implement a check for all command relations which fulfill the definition from Barker/Pullum (1990). The indexing technique can be implemented in a simple and efficient way without any special requierments for the formalism used. Hence, the indexing technique has a wide spectrum of applications for testing command relations in syntactic analysis. Futhermore, </context>
<context position="2008" citStr="Pullum (1990)" startWordPosition="303" endWordPosition="304"> whether the corresponding nodes of the syntax tree are in a command relation. The usefulness and necessity of a command test in semantics have been demonstrated in Latecki/Pinkal (1990). The general idea of the indexing technique is the following: while a syntax tree is being built, special indices are assigned to the nodes of this tree. Afterwards we can check whether a command relation between two nodes of this tree holds by merely examining simple set-theoretical relations of corresponding index sets. 1. A GENERAL DEFINITION FOR COMMAND RELATIONS The general command definition from Barker/Pullum (1990) can be informally stated in the following way: 1.1 DEFINITION (all). a P-commands p iff every node with a property P that properly dominates a also dominates [3. In this chapter I will show that this definition is equivalent to the following definition (minimum). 1.2 DEFINITION (minimum). a P-c ommands [3 iff the first node with a property P that properly dominates a also dominates p. In this definition the rust node that dominates a means the node most immediately dominating a, as it is usually used in linguistics. Below I will specify both of these definitions formally. The main difference </context>
<context position="3827" citStr="Pullum (1990)" startWordPosition="596" endWordPosition="597">1990) (which I formulate following Sells&apos; definition of c-command, Sells (1987)) is equivalent to Definition 1.4, which has been proposed in Aoun/Sportich (1982). 1.3 DEFINITION. a MAX-commands 13 if every maximal projection properly dominating a dominates 13. 1.4 DEFINITION. a MAX-commands p iff the first maximal projection properly dominating a dominates p. These definitions are special cases of definitions 1.1 and 1.2 for the property of being a set of maximal projections. Before I formulate the general command definition in a formal way, I will now quote some other definitions from Barker/Pullum (1990). 1.5 DEFINITION. A relation R on a set N is reflexive iff aRa for all a in N; irreflexive iff aRa; symmetric iff aRb implies bRa; asymmetric iff aRb implies --IbRa; antisymmetric iff aRb and bRa implies a=b; transitive iff aRb and bRc implies aRc. A relation R on a set N is called a linear order if it is reflexive, antisymmetric, transitive and has the following property (comparability): for every a and b in N, either aRb or bRa. The following definition of a tree stems from Wall (1972). 1.6 DEFINITION. A tree is a 5-tuple T=&lt;N,L,P,&lt;P,LABEL&gt;, where N is a finite nonempty set, the nodes of T, </context>
<context position="7179" citStr="Pullum (1990)" startWordPosition="1227" endWordPosition="1228">d. Hence, the set UB(a,P)=UB(a) r.) P has a smallest element, which we denote minUB(a,P). At this point we are ready to formally state command definitions 1.1 and 1.2. 1.11 DEFINITION (all). a P-commands iff Vx (xe UB(a,P) xg)13). 1.12 DEFINITION (minimum). a F-commands iff minUB(a,P)P13. - 52 - We say that P generates the P-command relation. For example, we obtain the MAX-command relation (1.3) as a special case of Definition 1.11 if we take the set (aEN: LABEL(a)E MAX) as a property P. where MAX is any set of maximal projections. Definition 1.11 is the general command definition from Barker/Pullum (1990). 1.13 THEOREM. Definitions 1.11 (all) and 1,12 (minimum) are equivalent. Proof. If a pair &lt;a,I3&gt; fulfills the definition (all), then it also fulfills the definition (minimum), because minUB(a,P)E UB(cc,P) if UB(a,P) 0. If UB(a,P) = 0, then minUB(a,P) = the root node of T, so condition minUB(a,P)P13 is also fulfilled. Conversely, let a pair &lt;a43&gt; fulfill the definition (min). This means that minUB(a,P)P13. We must show that Vx (XE UB(a,P) xPf3). If LIB(a,P) is the empty set, then the claim is trivially fulfilled. If UB(a,P) is not empty, then let x be any element from UB(a,P). Then xPminUB(a,P</context>
<context position="13735" citStr="Pullum (1990)" startWordPosition="2394" endWordPosition="2395">gory type as xi if LABEL(x2) = S-bar, LABEL(x1) = S or LABEL(x2) = LABEL(xi) = VP. This c-command definition allows the minimal upper bound to be replaced by another node, one node closer to the root, so this relation cannot be generated by any property, since this property must then depend on the node a. However, the condition of Definition 2.7 can be generated by a relation. In order to use a given relation R as generator, it is enough to replace the set of upper bounds UB(a,P) by the set UB(a,R)= (PE N: f3&gt;Dot A aR(3)), in general command definition 1.11. For detailed disscusion see Barker/Pullum (1990). With an example of Reinharts c-commando relation, I want to show that it is also possible to treat relational command definitions with the indexing technique. Here I do not want to consider the treatment of the relational command definition with the indexing technique in the general case, because it would lead to a formal mathematical discussion without linguistic connections. To specify a test for Reinharts c-command, we need merely to modify part 20 of the definition of the function indp in 2.1. The definition of the function fp together with the basis test condition given in Theorem 2.4 w</context>
<context position="16638" citStr="Pullum (1990)" startWordPosition="2918" endWordPosition="2919">nimum), the node y also dominates 13, hence E c indp(13). So, we have the inclusion indp(a)-fp(a) ç indp(13). &amp;quot;&amp;quot; Now let indp(a)-fp(a) ç indp(13), for any two nodes a, 13 of some tree T, and let y be any node from P that dominates a. indp(y) ç indp(a)-fp(a), since y dominates a (2.2). From the transitivity of the inclusion relation, indp(y) ç indp(13). This implies that fp(y) indp(0). Due to Fact 2.3, the needed relation y21313 holds, so a P-commands fi 3. CONCLUSIONS I have presented an indexing technique which allows us to test all command relations that fulfill the definition of Barker and Pullum (1990). On an example of Reinharts c-command relation, I have also shown that it is possible to treat relational commands with this technique. The indexing technique can be simply and efficiently implemented without any special requierments for the formalism used. Based on it, Millies (1990) has implemented tests for MAXcommand, subjacency and government in a principle-based parser for GB (Chomsky 1981, 1982 and 1986). It is also possible to use similar indexing processes to treat other linguistic phenomena in syntax as well as in semantics. Hence, the indexing technique has a wide spectruth of appl</context>
</contexts>
<marker>Pullum, 1990</marker>
<rawString>Barker, Ch. / Pullum G. K. (1990): A Theory of Command Relations. Linguistics and Philosophy 13: 1-34.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Chomsky</author>
</authors>
<date>1981</date>
<booktitle>Lectures on Government and Binding.</booktitle>
<location>Dordrecht: Foris.</location>
<marker>Chomsky, 1981</marker>
<rawString>Chomsky, N. (1981): Lectures on Government and Binding. Dordrecht: Foris.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Chomsky</author>
</authors>
<title>Some Concepts and Consequences of the Theory of Government and Binding.</title>
<date>1982</date>
<publisher>MIT Press.</publisher>
<marker>Chomsky, 1982</marker>
<rawString>Chomsky, N. (1982): Some Concepts and Consequences of the Theory of Government and Binding. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Chomsky</author>
</authors>
<title>Barriers. Linguistic Inquiry Monigraphs 13,</title>
<date>1986</date>
<publisher>MIT Press: Cambrdge.</publisher>
<marker>Chomsky, 1986</marker>
<rawString>Chomsky, N. (1986): Barriers. Linguistic Inquiry Monigraphs 13, MIT Press: Cambrdge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Cooper</author>
</authors>
<title>Quantification and Semantic Theory.</title>
<date>1983</date>
<location>D. Reidel, Dordrecht.</location>
<marker>Cooper, 1983</marker>
<rawString>Cooper, R. (1983): Quantification and Semantic Theory. D. Reidel, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W R Keller</author>
</authors>
<title>Nested Cooper Storage: The Proper Treatment of Quantification in Ordinary Noun Phrases.</title>
<date>1988</date>
<booktitle>Natural Language Parsing and Linguistic Theories,</booktitle>
<editor>In U. Reyle and C. Rohrer (eds.),</editor>
<location>Dordrecht.</location>
<marker>Keller, 1988</marker>
<rawString>Keller, W. R. (1988): Nested Cooper Storage: The Proper Treatment of Quantification in Ordinary Noun Phrases. In U. Reyle and C. Rohrer (eds.), Natural Language Parsing and Linguistic Theories, 432-447, D. Reidel, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Mostowski Kuratowski</author>
<author>A</author>
</authors>
<title>Set Theory.</title>
<date>1976</date>
<publisher>PWN: Warsaw-Amsterdam.</publisher>
<marker>Kuratowski, A, 1976</marker>
<rawString>Kuratowski, K. / Mostowski, A. (1976): Set Theory. PWN: Warsaw-Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Pinkal Latecki</author>
<author>M</author>
</authors>
<title>Syntactic and Semantic Conditions for Quantifier Scope. To appear in:</title>
<date>1990</date>
<booktitle>Proceedings of the Workshop on &amp;quot;Processing of Plurals and Quantifiers&amp;quot; at GWAI-90,</booktitle>
<marker>Latecki, M, 1990</marker>
<rawString>Latecki, L. / Pinkal, M. (1990): Syntactic and Semantic Conditions for Quantifier Scope. To appear in: Proceedings of the Workshop on &amp;quot;Processing of Plurals and Quantifiers&amp;quot; at GWAI-90, September 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Millies</author>
</authors>
<title>Ein modularer Ansatz filr prinzipienbasiertes Parsing. LILOG-Report 139, IBM:</title>
<date>1990</date>
<location>Stuttgart, Germany.</location>
<contexts>
<context position="16924" citStr="Millies (1990)" startWordPosition="2962" endWordPosition="2963"> From the transitivity of the inclusion relation, indp(y) ç indp(13). This implies that fp(y) indp(0). Due to Fact 2.3, the needed relation y21313 holds, so a P-commands fi 3. CONCLUSIONS I have presented an indexing technique which allows us to test all command relations that fulfill the definition of Barker and Pullum (1990). On an example of Reinharts c-command relation, I have also shown that it is possible to treat relational commands with this technique. The indexing technique can be simply and efficiently implemented without any special requierments for the formalism used. Based on it, Millies (1990) has implemented tests for MAXcommand, subjacency and government in a principle-based parser for GB (Chomsky 1981, 1982 and 1986). It is also possible to use similar indexing processes to treat other linguistic phenomena in syntax as well as in semantics. Hence, the indexing technique has a wide spectruth of applications. For example, Latecki and PinkAl (1990) present an indexing mechanism which allows us to achieve the effects of &amp;quot;Nested Cooper Storage&amp;quot; (Keller 1988 and Cooper 1983). ACKNOWLEDGMENTS I would like to thank my advisor Manfred Pinkal for valuable discussions and suggestions. I al</context>
</contexts>
<marker>Millies, 1990</marker>
<rawString>Millies, S. (1990): Ein modularer Ansatz filr prinzipienbasiertes Parsing. LILOG-Report 139, IBM: Stuttgart, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Sells</author>
</authors>
<title>Lectures on Contemporary Semantic Theories. CSLI Lecture Notes.</title>
<date>1987</date>
<contexts>
<context position="3293" citStr="Sells (1987)" startWordPosition="514" endWordPosition="515">de with a property P that properly dominates a, while in the second it is enough to check only one node, just the first node with the property P that properly diominates a. It can be easily seen that the command tests based on definition 1.2 are an important improvement in efficiency for computational applications. -51 - Both versions (all) and (minimum) are used as command definitions in linguistic literature, so their equivalence also has linguistic consequences. For example, definition 1.3 of MAX-command from Barker/Pullum (1990) (which I formulate following Sells&apos; definition of c-command, Sells (1987)) is equivalent to Definition 1.4, which has been proposed in Aoun/Sportich (1982). 1.3 DEFINITION. a MAX-commands 13 if every maximal projection properly dominating a dominates 13. 1.4 DEFINITION. a MAX-commands p iff the first maximal projection properly dominating a dominates p. These definitions are special cases of definitions 1.1 and 1.2 for the property of being a set of maximal projections. Before I formulate the general command definition in a formal way, I will now quote some other definitions from Barker/Pullum (1990). 1.5 DEFINITION. A relation R on a set N is reflexive iff aRa for</context>
<context position="10555" citStr="Sells 1987" startWordPosition="1840" endWordPosition="1841">m, we can check whether any P-command relation holds between two nodes by merely examining the subset relationship of corresponding index sets. 2.4 THEOREM. Node a P-commands node iff indp(a) - fp(a) c indp(0). The proof, which makes use of equivalence Theorem 1.13, will be given at the end of this chapter. To illustrate the P-command check based on the theorem above, I give an example for a MAXcommand relation (1.3) which we obtain from general command definition 1.11 if we take the set (aEN: LABEL(a)E MAX) as a property P. where MAX = (NP, VP, AP, PP, S-bar) is a set of maximal projections (Sells 1987). Let us consider the syntax analysis for sentence (2.5). In tree (2.6), the upper set of indices at every node corresponds to the value of the function fp for - 53 - this node and the lower set of indices corresponds to the value of the function indp for this node. (2.5) A friend of his saw every man with a telescope. telescope&amp;quot;, by verifying that indp(&amp;quot;saw&amp;quot;)-fp(&amp;quot;saw&amp;quot;). (1,5) c (1,5,7 )=indp(&amp;quot;with a telescope&amp;quot;), or that &amp;quot;every man&amp;quot; does not MAX-command &amp;quot;his&amp;quot;, by verifying that indp(&amp;quot;every man&amp;quot;)-fp(&amp;quot;every man&amp;quot;)= (1,5) is not a subset of indp(&amp;quot;his&amp;quot;)= (1,2,3,4). We can see, for example, that the</context>
</contexts>
<marker>Sells, 1987</marker>
<rawString>Sells, P. (1987): Lectures on Contemporary Semantic Theories. CSLI Lecture Notes.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Reinhart</author>
</authors>
<title>The Syntactic Domain of Anaphora. Doctoral dissertation, MIT,</title>
<date>1976</date>
<location>Cambridge, Massachusetts.</location>
<contexts>
<context position="12570" citStr="Reinhart (1976" startWordPosition="2182" endWordPosition="2183">n important advantage of the indexing technique is that its applicability for checking command relations in semantics does not depend on an ispomorphism between syntactic and semantic structure, since the necessary syntactic information is encoded in indices. Therefore, this information can be moved to any required position in the semantic structure together with the representation of a given node. Definition 1.11 does not cover all cases of command relations which have been presented in linguistic literature, but there are only a few exceptions. One is the relation that is called ccommand in Reinhart (1976; 1981, p.612; 1983, p.23): 2.7 DEFINITION. Node a c(onsitituent)- commands node 13 iff the branching node xi most immediately dominating a either dominates f3 or is immediately dominated by a node x2 which dominates 13, and x2 is of the same category type as xi. A node y is a branching node if there exists two different nodes x,y such that &apos;yMx A yMy. As T. Reinhart wrote, the intention of this definition is to capture c-command relations in cases S-bar over S or VP over VP. Hence, we can say (for - 54 - our purposes) that x2 is of the same category type as xi if LABEL(x2) = S-bar, LABEL(x1) </context>
</contexts>
<marker>Reinhart, 1976</marker>
<rawString>Reinhart, T. (1976): The Syntactic Domain of Anaphora. Doctoral dissertation, MIT, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Reinhart</author>
</authors>
<title>Definite NP Anaphora and CCommands Domains.</title>
<date>1981</date>
<journal>Linguistic Inquiry</journal>
<volume>12</volume>
<pages>605--635</pages>
<marker>Reinhart, 1981</marker>
<rawString>Reinhart, T. (1981): Definite NP Anaphora and CCommands Domains. Linguistic Inquiry 12, 605-635.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Reinhart</author>
</authors>
<title>Anaphora and Semantic Interpretation,</title>
<date>1983</date>
<publisher>University of Chicago Press,</publisher>
<location>Chicago, Illinois.</location>
<contexts>
<context position="15057" citStr="Reinhart (1983)" startWordPosition="2631" endWordPosition="2632">ll be formulated in the following way: 20&apos; If a immediately dominates 13 and f3 is of the same category as a, then indp(13) = indp(a). If a immediately dominates f3 and f3 is not of the same category as a then indp(f3) = indp(a) u fp(). The idea of this modification is that if a node 13 is of the same category as a node a, then i3 only inherits the indices from a. So, in this case, the new index from the set fp() does not influence the value of the function indp on 13. I illustrate the indexing check for c-command definition 2.7 with the syntax analysis for the following example sentense from Reinhart (1983). (2.8) Lola found the book in the library. In tree (2.9), the upper set of indices at every node corresponds to the value of the function fp at this node and the lower set of indices corresponds to the value of the function indp at this node. We can see, for example, that the subject of S, &amp;quot;Lola&amp;quot;, c-commands the COMP in S-bar, by verifying that indp(&amp;quot;Lola&amp;quot;)-fp(&amp;quot;Lola&amp;quot;).(1) c (1). indp(COMP), or that the object, &amp;quot;the book&amp;quot;, c-commands the NP in PP, &amp;quot;the library&amp;quot;, by verifying that indp(&amp;quot;the book&amp;quot;)-fp(&amp;quot;the book&amp;quot;)= ( 1,4) c (1,4,7,8)= indp(&amp;quot;the library&amp;quot;). 5 (2.9) a-bar 0 mo (6) 0 ,,,j0(8) v(1,4) </context>
</contexts>
<marker>Reinhart, 1983</marker>
<rawString>Reinhart, T. (1983): Anaphora and Semantic Interpretation, University of Chicago Press, Chicago, Illinois.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Wall</author>
</authors>
<title>Introduction to Mathematical . Linguistics. Prentice Hall: Engelewood Cliffs,</title>
<date>1972</date>
<location>New Jersey.</location>
<contexts>
<context position="4319" citStr="Wall (1972)" startWordPosition="686" endWordPosition="687">ulate the general command definition in a formal way, I will now quote some other definitions from Barker/Pullum (1990). 1.5 DEFINITION. A relation R on a set N is reflexive iff aRa for all a in N; irreflexive iff aRa; symmetric iff aRb implies bRa; asymmetric iff aRb implies --IbRa; antisymmetric iff aRb and bRa implies a=b; transitive iff aRb and bRc implies aRc. A relation R on a set N is called a linear order if it is reflexive, antisymmetric, transitive and has the following property (comparability): for every a and b in N, either aRb or bRa. The following definition of a tree stems from Wall (1972). 1.6 DEFINITION. A tree is a 5-tuple T=&lt;N,L,P,&lt;P,LABEL&gt;, where N is a finite nonempty set, the nodes of T, L is a finite set, the labels of T, is a reflexive, antisymmetric relation on N. the dominance relation of T, &lt;P is an in&apos; eflexive, asymmetric, transitive relation on N, the precedence relation of T, and LABEL is a total function from N into L, the labeling function of T, such that for all a, b, c and d from N and some unique r in N (the root node of T), the following hold: (i) The Single Root Condition: r?.Da (ii) The Exclusivity Condition: (Db v b?Pa)&lt;-÷—,(a&lt;Pb v b&lt;Pa) (iii) The Nonta</context>
</contexts>
<marker>Wall, 1972</marker>
<rawString>Wall, R. (1972): Introduction to Mathematical . Linguistics. Prentice Hall: Engelewood Cliffs, New Jersey.</rawString>
</citation>
<citation valid="false">
<pages>56</pages>
<marker></marker>
<rawString>- 56 -</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>