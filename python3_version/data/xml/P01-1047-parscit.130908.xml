<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000003">
<title confidence="0.9933105">
Extending Lambek grammars:
a logical account of minimalist grammars
</title>
<author confidence="0.577972">
Christian Retor´e
</author>
<affiliation confidence="0.250827">
IRIN, Universit´e de Nantes
</affiliation>
<address confidence="0.5764895">
2, rue de la Houssini`ere BP 92208
44322 Nantes cedex 03, France
</address>
<email confidence="0.812979">
retore@irisa.fr
</email>
<author confidence="0.588918">
Alain Lecomte
</author>
<affiliation confidence="0.454028">
CLIPS-IMAG
</affiliation>
<address confidence="0.48343625">
Universit´e Pierre Mend`es-France,
BSHM - 1251 Avenue Centrale,
Domaine Universitaire de St Martin d’H`eres
BP 47 - 38040 GRENOBLE cedex 9, France
</address>
<email confidence="0.53631">
Alain.Lecomte@upmf-grenoble.fr
</email>
<sectionHeader confidence="0.981996" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999976357142857">
We provide a logical definition of Min-
imalist grammars, that are Stabler’s
formalization of Chomsky’s minimal-
ist program. Our logical definition
leads to a neat relation to catego-
rial grammar, (yielding a treatment
of Montague semantics), a parsing-as-
deduction in a resource sensitive logic,
and a learning algorithm from struc-
tured data (based on a typing-algorithm
and type-unification). Here we empha-
size the connection to Montague se-
mantics which can be viewed as a for-
mal computation of the logical form.
</bodyText>
<sectionHeader confidence="0.98792" genericHeader="keywords">
1 Presentation
</sectionHeader>
<bodyText confidence="0.99952331147541">
The connection between categorial grammars (es-
pecially in their logical setting) and minimalist
grammars, which has already been observed and
discussed (Retor´e and Stabler, 1999), deserve a
further study: although they both are lexicalized,
and resource consumption (or feature checking)
is their common base, they differ in various re-
spects. On the one hand, traditional categorial
grammar has no move operation, and usually have
a poor generative capacity unless the good prop-
erties of a logical system are damaged, and on
the other hand minimalist grammars even though
they were provided with a precise formal defini-
tion (Stabler, 1997), still lack some computational
properties that are crucial both from a theoreti-
cal and a practical viewpoint. Regarding appli-
cations, one needs parsing, generation or learning
algorithms, and, considering more conceptual as-
pects, such algorithms are needed too to validate
or invalidate linguistic claims regarding economy
or efficiency. Our claim is that a logical treat-
ment of these grammars leads to a simpler de-
scription and well defined computational proper-
ties. Of course among these aspects the relation
to semantics or logical form is quite important;
it is claimed to be a central notion in minimal-
ism, but logical forms are rather obscure, and no
computational process from syntax to semantics
is suggested. Our logical presentation of mini-
malist grammar is a first step in this direction:
to provide a description of minimalist grammar
in a logical setting immediately set up the com-
putational framework regarding parsing, genera-
tion and even learning, but also yields some good
hints on the computational connection with logi-
cal forms.
The logical system we use, a slight extension
of (de Groote, 1996), is quite similar to the fa-
mous Lambek calculus (Lambek, 1958), which is
known to be a neat logical system. This logic has
recently shown to have good logical properties
like the subformula property which are relevant
both to linguistics and computing theory (e.g. for
modeling concurrent processes). The logic under
consideration is a super-imposition of the Lam-
bek calculus (a non commutative logic) and of
intuitionistic multiplicative logic (also known as
Lambek calculus with permutation). The context,
that is the set of current hypotheses, are endowed
with an order, and this order is crucial for obtain-
ing the expected order on pronounced and inter-
preted features but it can also be relaxed when
necessary: that is when its effects have already
been recorded (in the labels) and the correspond-
ing hypotheses can therefore be discharged.
Having this logical description of syntactic
analyses allows to reduce parsing (and produc-
tion) to deduction, and to extract logical forms
from the proof; we thus obtain a close connection
between syntax and semantics as the one between
Lambek-style analyses and Montague semantics.
</bodyText>
<sectionHeader confidence="0.5631" genericHeader="introduction">
2 The grammatical architecture
</sectionHeader>
<bodyText confidence="0.999648956521739">
The general picture of these logical grammars
is as follows. A lexicon maps words (or, more
generally, items) onto a logical formula, called
the (syntactic) type of the word. Types are de-
fined from syntactic of formal features (which
are propositional variables from the logical view-
point):
The connectives in the logic for constructing
formulae are the Lambek implications (or slashes)
together with the commutative product of lin-
ear logic . 1
Once an array of items has been selected, a sen-
tence (or any phrase) is a deduction of IP (or of the
phrasal category) under the assumptions provided
by the syntactic types of the involved items. This
first step works exactly as Lambek grammars, ex-
cept that the logic and the formulae are richer.
Now, in order to compute word order, we pro-
ceed by labeling each formula in the proof. These
labels, that are called phonological and seman-
tic features in the transformational tradition, are
computed from the proofs and consist of two parts
that can be superimposed: a phonological label,
</bodyText>
<footnote confidence="0.869533">
denoted by , and a semantic label2 de-
noted by — the super-imposition of both
1The logical system also contains a commutative impli-
cation, , and a non commutative product but they do not
appear in the lexicon, and because of the subformula prop-
erty, they are not needed for the proofs we use.
2We prefer semantic label to logical form not to confuse
logical forms with the logical formulae present at each node
of the proof.
</footnote>
<bodyText confidence="0.9955485625">
label being denoted by . The reason for hav-
ing such a double labeling, is that, as usual in
minimalism, semantic and phonological features
can move separately. It should be observed that
the labels are not some extraneous information;
indeed the whole information is encoded in the
proof, and the labeling is just a way to extract the
phonological form and the logical form from the
proof.
We rather use chains or copy theory than move-
ments and traces: once a label or one aspect (se-
mantic or phonological) has been met it should be
ignored when it is met again. For instance a label
corresponds to a se-
mantic label and to the
phonological form .
</bodyText>
<sectionHeader confidence="0.8183265" genericHeader="method">
3 Logico-grammatical rules for merge
and phrasal movement
</sectionHeader>
<bodyText confidence="0.994497873015873">
Because of the sub-formula property we need
not present all the rules of the system, but only
the ones that can be used according to the types
that appear in the lexicon. Further more, up to
now there is no need to use introduction rules
(called hypothetical reasoning in the Lambek cal-
culus): so our system looks more like Com-
binatory Categorial Grammars or classical AB-
grammars. Nevertheless some hypotheses can be
cancelled during the derivation by the product-
elimination rule. This is essential since this rule
is the one representing chains or movements.
We also have to specify how the labels are car-
ried out by the rules. At this point some non
logical properties can be taken into account, for
instance the strength of the features, if we wish
to take them into account. They are denoted by
lower-case variables. The rules of this system in
a Natural Deduction format are:
categorial features (categories) involved in
merge: BASE
functional features involved in move:
FUN
This later rule encodes movement and deserves
special attention. The label means
the substitution of to the unordered set ,
that is the simultaneous substitution of for both
and , no matter the order between and
is. Here some non logical but linguistically mo-
tivated distinction can be made. For instance ac-
cording to the strength of a feature (e.g. weak
case versus strong case ), it is possible to de-
cide that only the semantic part that is is sub-
stituted with .
In the figure 1, the reader is provided with an
example of a lexicon and of a derivation. The re-
sulting label is phonologi-
cal form is while the resulting
logical form is .
Notice that language variation from SVO to
SOV does not change the analysis. To ob-
tain the SOV word order, one should sim-
ply use (strong case feature) instead of
(weak case feature) in the lexicon, and use the
same analysis. The resulting label would be
which yields the phonolog-
ical from and the logical form
remains the same .
Observe that although entropy which sup-
presses some order has been used, the labels con-
sist in ordered sequences of phonological and log-
ical forms. It is so because when using [/ E] and
[ E], we necessarily order the labels, and this or-
der is then recorded inside the label and is never
suppressed, even when using the entropy rule: at
this moment, it is only the order on hypotheses
which is relaxed.
In order to represent the minimalist grammars
of (Stabler, 1997), the above subsystem of par-
tially commutative intuitionistic linear logic (de
Groote, 1996) is enough and the types appearing
in the lexicon also are a strict subset of all possi-
ble types:
</bodyText>
<construct confidence="0.553558444444444">
Definition 1 -proofs contain only three kinds
of steps:
Definition 2 A lexical entry consists in an axiom
where is a type:
where:
m and n can be any number greater than or
equal to 0,
F , ..., F are attractors,
G , ..., G are features,
</construct>
<bodyText confidence="0.99667525">
A is the resulting category type
Derivations in this system can be seen as T-
markers in the Chomskyan sense. [/E] and [ E]
steps are merge steps. [ E] gives a co-indexation
of two nodes that we can see as a move step. For
instance in a tree presentation of natural deduc-
tion, we shall only keep the coindexation (corre-
sponding to the cancellation of and : this is
harmless since the conclusion is not modified, and
makes our natural deduction T-markers).
Such lexical entries, when processed with
-rules encompass Stabler minimalist gram-
mars; this system nevertheless overgenerates, be-
cause some minimalist principles are not yet sat-
isfied: they correspond to constraints on deriva-
tions.
</bodyText>
<subsectionHeader confidence="0.998897">
3.1 Conditions on derivations
</subsectionHeader>
<bodyText confidence="0.970823571428571">
The restriction which is still lacking concerns the
way the proofs are built. Observe that this is an
algorithmic advantage, since it reduces the search
space.
The simplest of these restriction is the follow-
ing: the attractor F in the label L of the target
locates the closest F’ in its domain. This simply
corresponds to the following restriction.
Definition 3 (Shortest Move) : A -proof is
said to respect the shortest move condition if it is
such that:
the same formula never occurs twice as a hy-
pothesis of any sequent
every active hypothesis during the proofpro-
cess is discharged as soon as possible
The consequences of this definition are the fol-
lowing:
implication steps (elimination rules for /and
✢ )
tensor steps (elimination rule for )
entropy steps (entropy rule)
</bodyText>
<figureCaption confidence="0.950581">
Figure 1: reads a book
</figureCaption>
<bodyText confidence="0.985085">
2. if there is a sequent ... ... C
if there is a type such that
is a (proper or logical) axiom,
then a hypothesis must be intro-
duced, rather than any constant , in
order to discharge
We may see an application of this condition in the
fact that sentences like:
In order to handle head-movement, we shall
also use the product but between functor types.
As a first example, let us take the very sim-
ple example of: peter loves mary. Starting from
the following lexicon in figure 3 we can build
the tree given in the same figure; it represents a
natural deduction in our system, hence a syntac-
tic analysis. The resulting phonological form is
while the resulting log-
ical form is — the possi-
bility to obtain SOV word order with a instead
of a also applies here.
</bodyText>
<figure confidence="0.978637285714286">
1. ... ... ... C is forbidden
*Who do you know [who e
likes e ]
*Who do you know [who e
likes e ]
4 The interface between syntax and
semantics
</figure>
<bodyText confidence="0.986351636363636">
are ruled out. Let us look at the beginning of their
derivation (in a tree-like presentation of natural
deduction proofs): at the stage where we stop the
deduction on figure 2, we cannot introduce a new
hypothesis because there is already an
active one ( ), the only possible continuation is
to discharge and altogether by means of a
”constant”, like , so that, in contrast:
You know [who Mary likes
e ]
is correct.
</bodyText>
<subsectionHeader confidence="0.995975">
3.2 Extension to head-movement
</subsectionHeader>
<bodyText confidence="0.999166227272727">
We have seen above that we are able to account
for SVO and SOV orders quite easily. Neverthe-
less we could not handle this way VSO language.
Indeed this order requires head-movement.
In categorial grammar (Moortgat, 1996), the pro-
duction of logical forms is essentially based
on the association of pairs
with lambda terms representing the logical form
of the items, and on the application of the
Curry-Howard homomorphism: each ( or ) -
elimination rule translates into application and
each introduction step into abstraction. Compo-
sitionality assumes that each step in a derivation
is associated with a semantical operation.
In generative grammar (Chomsky, 1995), the
production of logical forms is in last part of the
derivation, performed after the so-called Spell Out
point, and consists in movements of the semanti-
cal features only. Once this is done, two forms
can be extracted from the result of the derivation:
a phonological form and a logical one.
These two approaches are therefore very differ-
</bodyText>
<figureCaption confidence="0.9990075">
Figure 2: Complex NP constraint
Figure 3: Peter loves Mary
</figureCaption>
<figure confidence="0.455717">
(to love) mary
peter
loves
(mary)
</figure>
<bodyText confidence="0.999853875">
ent, but we can try to make them closer by replac-
ing semantic features by lambda-terms and using
some canonical transformations on the derivation
trees.
Instead of converting directly the derivation
tree obtained by composition of types, something
which is not possible in our translation of mini-
malist grammars, we extract a logical tree from
the previous, and use the operations of Curry-
Howard on this extracted tree. Actually, this ex-
tracted tree is also a deduction tree: it represents
the proof we could obtain in the semantic compo-
nent, by combining the semantic types associated
with the syntactic ones (by a homomorphism
to specify). Such a proof is in fact a proof in im-
plicational intuitionistic linear logic.
</bodyText>
<subsectionHeader confidence="0.992794">
4.1 Logical form for example 3
</subsectionHeader>
<bodyText confidence="0.982465066666667">
Coindexed nodes refer to ancient hypotheses
which have been discharged simultaneously, thus
resulting in phonological features and semantical
ones at their right place3.
By extracting the subtree the leaves of which are
full of semantic content, we obtain a structure that
can be easily seen as a composition:
(peter)((mary)(to love))
If we replace these ”semantic features” by -
terms, we have:
This shows that necessarily raised constituants in
the structure are not only ”syntactically” raised
but also ”semantically” lifted, in the sense that
is the high order representation of
the individual peter4.
</bodyText>
<subsectionHeader confidence="0.998953">
4.2 Subject raising
</subsectionHeader>
<bodyText confidence="0.998955333333333">
Let us look at now the example: mary seems to
work From the lexicon in figure 4 we obtain the
deduction tree given in the same figure.
</bodyText>
<footnote confidence="0.902578375">
3For the time being, we make abstraction of the repre-
sentation of time, mode, aspect... that would be supported
by the inflection category.
4It is important to notice that if we consider
a typed lambda term, we must only assume it is of some
type freely raised from , something we can represent by
, where X is a type-variable, here X =
because has type
</footnote>
<bodyText confidence="0.9993706">
This time, it is not so easy to obtain the logical
representation:
The best way to handle this situation consists in
assuming that:
the verbal infinitive head (here to work) ap-
plies to a variable which occupies the -
position,
the semantics of the main verb (here to
seem) applies to the result, in order to obtain
,
the variable is abstracted in order
to obtain just be-
fore the semantic content of the specifier
(here the nominative position, occupied by
) applies.
This shows that the semantic tree we want to
extract from the derivation tree in types logic is
not simply the subtree the leaves of which are se-
mantically full. We need in fact some transforma-
tion which is simply the stretching of some nodes.
These stretchings correspond to -introduction
steps in a Natural deduction tree. They are al-
lowed each time a variable has been used before,
which is not yet discharged and they necessarily
occur just before a semantically full content of a
specifier node (that means in fact a node labelled
by a functional feature) applies.
Actually, if we say that the tree so obtained repre-
sents a deduction in a natural deduction format,
we have to specify which formulae it uses and
what is the conclusion formula. We must there-
fore define a homomorphism between syntactic
and semantic types.
Let be this homomorphism.
We shall assume:
</bodyText>
<footnote confidence="0.997422">
5X is a variable of type. This may appear as non-
determinism but the instantiation of X is always unique.
Moreover, when is of type , it is in fact en-
dowed with the identity function, something which happens
everytime is linked by a chain to a higher node.
</footnote>
<equation confidence="0.825525333333333">
( )=t, ( ) t, , ( )=e,
= = H H
,
</equation>
<page confidence="0.6940545">
5
H
</page>
<figureCaption confidence="0.982454">
Figure 4: Mary seems to work
</figureCaption>
<figure confidence="0.983567">
mary
seems
(to seem)
to work
to work(x)
x
</figure>
<bodyText confidence="0.997207166666667">
With this homomorphism of labels, the transfor-
mation of trees consisting in stretching ”interme-
diary projection nodes” and erasing leaves with-
out semantic content, we obtain from the deriva-
tion tree of the second example, the following ”se-
mantic” tree:
</bodyText>
<equation confidence="0.493226">
seem(to work(mary))
t
</equation>
<bodyText confidence="0.9993698">
where coindexed nodes are linked by the dis-
charging relation.
Let us notice that the characteristic weak or strong
of the features may often be encoded in the lexi-
cal entries. For instance, Head-movement from V
to z is expressed by the fact that tensed verbs are
such that:
the full phonology is associated with the in-
flection component,
the empty phonology and the semantics are
associated with the second one,
the empty semantics occupies the first one6
Unfortunately, such rigid assignment does not
always work. For instance, for phrasal movement
(say of a to a ) that depends of course on the
particular -node in the tree (for instance the sit-
uation is not necessary the same for nominative
and for accusative case). In such cases, we may
assume that multisets are associated with lexical
entries instead of vectors.
</bodyText>
<subsectionHeader confidence="0.980694">
4.3 Reflexives
</subsectionHeader>
<bodyText confidence="0.999929">
Let us try now to enrich this lexicon by consid-
ering other phenomena, like reflexive pronouns.
The assignment for himself is given in fig-
ure 5 — where the semantical type of himself
is assumed to be
. We obtain for paul shaves himself
as the syntactical tree something similar to the
tree obtained for our first little example (peter
loves mary), and the semantic tree is given in
figure 5.
</bodyText>
<sectionHeader confidence="0.973126" genericHeader="method">
5 Remarks on parsing and learning
</sectionHeader>
<bodyText confidence="0.99292525">
In our setting, parsing is reduced to proof search,
it is even optimized proof-search: indeed the re-
bas long we don’t take a semantical representation of
tense and aspect in consideration.
</bodyText>
<figureCaption confidence="0.77864">
Figure 5: Computing a semantic recipe: shave himself
</figureCaption>
<figure confidence="0.545848666666667">
shave(paul,paul)
shave(z,z)
z
</figure>
<bodyText confidence="0.999819466666667">
striction on types, and on the structure of proof
imposed by the shortest move principle and the
absence of introduction rules considerably reduce
the search space, and yields a polynomial algo-
rithm. Nevertheless this is so when traces are
known: otherwise one has to explore the possible
places of theses traces.
Here we did focus on the interface with se-
mantics. Another excellent property of categorial
grammars is that they allow — especially when
there are no introduction rules — for learning al-
gorithms, which are quite efficient when applied
to structured data. This kind of algorithm applies
here as well when the input of the algorithm are
derivations.
</bodyText>
<sectionHeader confidence="0.999681" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999802">
In this paper, we have tried to bridge a gap be-
tween minimalist program and the logical view
of categorial grammar. We thus obtained a de-
scription of minimalist grammars which is quite
formal and allows for a better interface with se-
mantics, and some usual algorithms for parsing
and learning.
</bodyText>
<sectionHeader confidence="0.999253" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999919">
Noam Chomsky. 1995. The minimalist program. MIT
Press, Cambridge, MA.
Philippe de Groote. 1996. Partially commutative lin-
ear logic. In M. Abrusci and C. Casadio, editors,
Third Roma Workshop: Proofs and Linguistics Cat-
egories, pages 199–208. Bologna:CLUEB.
Joachim Lambek. 1958. The mathematics of sen-
tence structure. American mathematical monthly,
65:154–169.
Michael Moortgat. 1996. Categorial type logic. In
J. van Benthem and A. ter Meulen, editors, Hand-
book of Logic and Language, chapter 2, pages 93–
177. North-Holland Elsevier, Amsterdam.
Christian Retor´e and Edward Stabler. 1999. Re-
source logics and minimalist grammars: intro-
duction to the ESSLLI workshop. To ap-
pear in Language and Computation RR-3780
http://www.inria.fr/RRRT/publications-eng.html.
Edward Stabler. 1997. Derivational minimalism. In
Christian Retor´e, editor, LACL‘96, volume 1328 of
LNCS/LNAI, pages 68–95. Springer-Verlag.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.095980">
<title confidence="0.999112">Extending Lambek grammars: a logical account of minimalist grammars</title>
<author confidence="0.999925">Christian Retor´e</author>
<affiliation confidence="0.999328">IRIN, Universit´e de Nantes</affiliation>
<address confidence="0.9993585">2, rue de la Houssini`ere BP 92208 44322 Nantes cedex 03, France</address>
<email confidence="0.99646">retore@irisa.fr</email>
<author confidence="0.998428">Alain Lecomte</author>
<affiliation confidence="0.936461">CLIPS-IMAG</affiliation>
<note confidence="0.5200254">Universit´e Pierre Mend`es-France, BSHM - 1251 Avenue Centrale, Domaine Universitaire de St Martin d’H`eres BP 47 - 38040 GRENOBLE cedex 9, France Alain.Lecomte@upmf-grenoble.fr</note>
<abstract confidence="0.997050863636363">We provide a logical definition of Minimalist grammars, that are Stabler’s formalization of Chomsky’s minimalist program. Our logical definition leads to a neat relation to categorial grammar, (yielding a treatment of Montague semantics), a parsing-asdeduction in a resource sensitive logic, and a learning algorithm from structured data (based on a typing-algorithm and type-unification). Here we emphasize the connection to Montague semantics which can be viewed as a formal computation of the logical form. 1 Presentation The connection between categorial grammars (especially in their logical setting) and minimalist grammars, which has already been observed and discussed (Retor´e and Stabler, 1999), deserve a further study: although they both are lexicalized, and resource consumption (or feature checking) is their common base, they differ in various respects. On the one hand, traditional categorial has no and usually have a poor generative capacity unless the good properties of a logical system are damaged, and on the other hand minimalist grammars even though they were provided with a precise formal definition (Stabler, 1997), still lack some computational properties that are crucial both from a theoretical and a practical viewpoint. Regarding applications, one needs parsing, generation or learning algorithms, and, considering more conceptual aspects, such algorithms are needed too to validate or invalidate linguistic claims regarding economy or efficiency. Our claim is that a logical treatment of these grammars leads to a simpler description and well defined computational properties. Of course among these aspects the relation to semantics or logical form is quite important; it is claimed to be a central notion in minimalism, but logical forms are rather obscure, and no computational process from syntax to semantics is suggested. Our logical presentation of minimalist grammar is a first step in this direction: to provide a description of minimalist grammar in a logical setting immediately set up the computational framework regarding parsing, generation and even learning, but also yields some good hints on the computational connection with logical forms. The logical system we use, a slight extension of (de Groote, 1996), is quite similar to the famous Lambek calculus (Lambek, 1958), which is known to be a neat logical system. This logic has recently shown to have good logical properties like the subformula property which are relevant both to linguistics and computing theory (e.g. for modeling concurrent processes). The logic under consideration is a super-imposition of the Lambek calculus (a non commutative logic) and of intuitionistic multiplicative logic (also known as Lambek calculus with permutation). The context, that is the set of current hypotheses, are endowed with an order, and this order is crucial for obtaining the expected order on pronounced and interpreted features but it can also be relaxed when necessary: that is when its effects have already been recorded (in the labels) and the corresponding hypotheses can therefore be discharged. Having this logical description of syntactic analyses allows to reduce parsing (and production) to deduction, and to extract logical forms from the proof; we thus obtain a close connection between syntax and semantics as the one between Lambek-style analyses and Montague semantics. 2 The grammatical architecture The general picture of these logical grammars is as follows. A lexicon maps words (or, more generally, items) onto a logical formula, called the (syntactic) type of the word. Types are defined from syntactic of formal features (which are propositional variables from the logical viewpoint): The connectives in the logic for constructing formulae are the Lambek implications (or slashes) together with the commutative product of linlogic . Once an array of items has been selected, a sentence (or any phrase) is a deduction of IP (or of the phrasal category) under the assumptions provided by the syntactic types of the involved items. This first step works exactly as Lambek grammars, except that the logic and the formulae are richer. Now, in order to compute word order, we proceed by labeling each formula in the proof. These labels, that are called phonological and semantic features in the transformational tradition, are computed from the proofs and consist of two parts that can be superimposed: a phonological label, by , and a semantic denoted by — the super-imposition of both logical system also contains a commutative implication, , and a non commutative product but they do not appear in the lexicon, and because of the subformula property, they are not needed for the proofs we use. prefer label form to confuse forms the logical formulae present at each node of the proof. being denoted by . The reason for having such a double labeling, is that, as usual in minimalism, semantic and phonological features can move separately. It should be observed that the labels are not some extraneous information; indeed the whole information is encoded in the proof, and the labeling is just a way to extract the phonological form and the logical form from the proof. We rather use chains or copy theory than movements and traces: once a label or one aspect (semantic or phonological) has been met it should be ignored when it is met again. For instance a label to a semantic label and to the phonological form . 3 Logico-grammatical rules for merge and phrasal movement Because of the sub-formula property we need not present all the rules of the system, but only the ones that can be used according to the types that appear in the lexicon. Further more, up to</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Noam Chomsky</author>
</authors>
<title>The minimalist program.</title>
<date>1995</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="12368" citStr="Chomsky, 1995" startWordPosition="2096" endWordPosition="2097">or SVO and SOV orders quite easily. Nevertheless we could not handle this way VSO language. Indeed this order requires head-movement. In categorial grammar (Moortgat, 1996), the production of logical forms is essentially based on the association of pairs with lambda terms representing the logical form of the items, and on the application of the Curry-Howard homomorphism: each ( or ) - elimination rule translates into application and each introduction step into abstraction. Compositionality assumes that each step in a derivation is associated with a semantical operation. In generative grammar (Chomsky, 1995), the production of logical forms is in last part of the derivation, performed after the so-called Spell Out point, and consists in movements of the semantical features only. Once this is done, two forms can be extracted from the result of the derivation: a phonological form and a logical one. These two approaches are therefore very differFigure 2: Complex NP constraint Figure 3: Peter loves Mary (to love) mary peter loves (mary) ent, but we can try to make them closer by replacing semantic features by lambda-terms and using some canonical transformations on the derivation trees. Instead of co</context>
</contexts>
<marker>Chomsky, 1995</marker>
<rawString>Noam Chomsky. 1995. The minimalist program. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philippe de Groote</author>
</authors>
<title>Partially commutative linear logic.</title>
<date>1996</date>
<booktitle>Third Roma Workshop: Proofs and Linguistics Categories,</booktitle>
<pages>199--208</pages>
<editor>In M. Abrusci and C. Casadio, editors,</editor>
<publisher>Bologna:CLUEB.</publisher>
<marker>de Groote, 1996</marker>
<rawString>Philippe de Groote. 1996. Partially commutative linear logic. In M. Abrusci and C. Casadio, editors, Third Roma Workshop: Proofs and Linguistics Categories, pages 199–208. Bologna:CLUEB.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joachim Lambek</author>
</authors>
<title>The mathematics of sentence structure.</title>
<date>1958</date>
<booktitle>American mathematical monthly,</booktitle>
<pages>65--154</pages>
<contexts>
<context position="2750" citStr="Lambek, 1958" startWordPosition="424" endWordPosition="425">s claimed to be a central notion in minimalism, but logical forms are rather obscure, and no computational process from syntax to semantics is suggested. Our logical presentation of minimalist grammar is a first step in this direction: to provide a description of minimalist grammar in a logical setting immediately set up the computational framework regarding parsing, generation and even learning, but also yields some good hints on the computational connection with logical forms. The logical system we use, a slight extension of (de Groote, 1996), is quite similar to the famous Lambek calculus (Lambek, 1958), which is known to be a neat logical system. This logic has recently shown to have good logical properties like the subformula property which are relevant both to linguistics and computing theory (e.g. for modeling concurrent processes). The logic under consideration is a super-imposition of the Lambek calculus (a non commutative logic) and of intuitionistic multiplicative logic (also known as Lambek calculus with permutation). The context, that is the set of current hypotheses, are endowed with an order, and this order is crucial for obtaining the expected order on pronounced and interpreted</context>
</contexts>
<marker>Lambek, 1958</marker>
<rawString>Joachim Lambek. 1958. The mathematics of sentence structure. American mathematical monthly, 65:154–169.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Moortgat</author>
</authors>
<title>Categorial type logic.</title>
<date>1996</date>
<booktitle>Handbook of Logic and Language, chapter 2,</booktitle>
<pages>93--177</pages>
<editor>In J. van Benthem and A. ter Meulen, editors,</editor>
<publisher>North-Holland Elsevier,</publisher>
<location>Amsterdam.</location>
<contexts>
<context position="11926" citStr="Moortgat, 1996" startWordPosition="2028" endWordPosition="2029"> derivation (in a tree-like presentation of natural deduction proofs): at the stage where we stop the deduction on figure 2, we cannot introduce a new hypothesis because there is already an active one ( ), the only possible continuation is to discharge and altogether by means of a ”constant”, like , so that, in contrast: You know [who Mary likes e ] is correct. 3.2 Extension to head-movement We have seen above that we are able to account for SVO and SOV orders quite easily. Nevertheless we could not handle this way VSO language. Indeed this order requires head-movement. In categorial grammar (Moortgat, 1996), the production of logical forms is essentially based on the association of pairs with lambda terms representing the logical form of the items, and on the application of the Curry-Howard homomorphism: each ( or ) - elimination rule translates into application and each introduction step into abstraction. Compositionality assumes that each step in a derivation is associated with a semantical operation. In generative grammar (Chomsky, 1995), the production of logical forms is in last part of the derivation, performed after the so-called Spell Out point, and consists in movements of the semantica</context>
</contexts>
<marker>Moortgat, 1996</marker>
<rawString>Michael Moortgat. 1996. Categorial type logic. In J. van Benthem and A. ter Meulen, editors, Handbook of Logic and Language, chapter 2, pages 93– 177. North-Holland Elsevier, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian Retor´e</author>
<author>Edward Stabler</author>
</authors>
<title>Resource logics and minimalist grammars: introduction to the ESSLLI workshop.</title>
<date>1999</date>
<note>To appear in Language and Computation RR-3780 http://www.inria.fr/RRRT/publications-eng.html.</note>
<marker>Retor´e, Stabler, 1999</marker>
<rawString>Christian Retor´e and Edward Stabler. 1999. Resource logics and minimalist grammars: introduction to the ESSLLI workshop. To appear in Language and Computation RR-3780 http://www.inria.fr/RRRT/publications-eng.html.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Edward Stabler</author>
</authors>
<title>Derivational minimalism.</title>
<date>1997</date>
<booktitle>of LNCS/LNAI,</booktitle>
<volume>96</volume>
<pages>68--95</pages>
<editor>In Christian Retor´e, editor,</editor>
<publisher>Springer-Verlag.</publisher>
<contexts>
<context position="1572" citStr="Stabler, 1997" startWordPosition="235" endWordPosition="236">egorial grammars (especially in their logical setting) and minimalist grammars, which has already been observed and discussed (Retor´e and Stabler, 1999), deserve a further study: although they both are lexicalized, and resource consumption (or feature checking) is their common base, they differ in various respects. On the one hand, traditional categorial grammar has no move operation, and usually have a poor generative capacity unless the good properties of a logical system are damaged, and on the other hand minimalist grammars even though they were provided with a precise formal definition (Stabler, 1997), still lack some computational properties that are crucial both from a theoretical and a practical viewpoint. Regarding applications, one needs parsing, generation or learning algorithms, and, considering more conceptual aspects, such algorithms are needed too to validate or invalidate linguistic claims regarding economy or efficiency. Our claim is that a logical treatment of these grammars leads to a simpler description and well defined computational properties. Of course among these aspects the relation to semantics or logical form is quite important; it is claimed to be a central notion in</context>
<context position="8419" citStr="Stabler, 1997" startWordPosition="1400" endWordPosition="1401"> in the lexicon, and use the same analysis. The resulting label would be which yields the phonological from and the logical form remains the same . Observe that although entropy which suppresses some order has been used, the labels consist in ordered sequences of phonological and logical forms. It is so because when using [/ E] and [ E], we necessarily order the labels, and this order is then recorded inside the label and is never suppressed, even when using the entropy rule: at this moment, it is only the order on hypotheses which is relaxed. In order to represent the minimalist grammars of (Stabler, 1997), the above subsystem of partially commutative intuitionistic linear logic (de Groote, 1996) is enough and the types appearing in the lexicon also are a strict subset of all possible types: Definition 1 -proofs contain only three kinds of steps: Definition 2 A lexical entry consists in an axiom where is a type: where: m and n can be any number greater than or equal to 0, F , ..., F are attractors, G , ..., G are features, A is the resulting category type Derivations in this system can be seen as Tmarkers in the Chomskyan sense. [/E] and [ E] steps are merge steps. [ E] gives a co-indexation of</context>
</contexts>
<marker>Stabler, 1997</marker>
<rawString>Edward Stabler. 1997. Derivational minimalism. In Christian Retor´e, editor, LACL‘96, volume 1328 of LNCS/LNAI, pages 68–95. Springer-Verlag.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>