<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.024229">
<title confidence="0.996312">
Multi-Level Annotation in MMAX
</title>
<author confidence="0.987395">
Christoph M¨uller and Michael Strube
</author>
<affiliation confidence="0.970819">
European Media Laboratory GmbH
</affiliation>
<address confidence="0.867163">
Villa Bosch
Schloß-Wolfsbrunnenweg 33
69118 Heidelberg, Germany
</address>
<email confidence="0.995353">
Christoph.Mueller, Michael.Strube @eml.villa-bosch.de
</email>
<sectionHeader confidence="0.995582" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999726375">
We present a light-weight tool for the an-
notation of linguistic data on multiple lev-
els. It is based on the simplification of an-
notations to sets of markables having at-
tributes and standing in certain relations
to each other. We describe the main fea-
tures of the tool, emphasizing its simplic-
ity, customizability and versatility.
</bodyText>
<sectionHeader confidence="0.998994" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998839714285715">
In recent years, the development and use of anno-
tation tools has been a recurrent topic in corpus-
based computational linguistics. Currently, special-
ized tools for the annotation of a wide range of phe-
nomena on different levels of linguistic description
are available. In the more recent of these tools,
principles of design and implementation are real-
ized which over the years have emerged as quasi-
standards:
XML as data storage format,
file-level separation of base data (i.e. the data
to be annotated) from the annotation, use of
stand-off annotation (Ide and Priest-Dorman,
1996),
implementation in Java for the sake of platform
independence.
Most of the available tools handle well the phenom-
ena on the linguistic level they are intended for, be
it coreference, dialogue acts, or discourse structure,
to name just a few. The annotations they yield do
exist independently of each other and cannot easily
be combined or applied to the same language data.
This, however, would be highly desirable because it
would allow for simultaneous browsing and anno-
tating on several linguistic levels. In addition, anno-
tation tasks could be distributed to several research
groups with different expertise, with one group spe-
cializing in e.g. dialogue act tagging, another in
coreference annotation, and so on. After completion
of the individual annotation tasks, the annotations
could be combined into one multi-level annotation
that a single group could not have produced.
The MMAX1 tool presented in this paper is in-
tended as a light-weight and highly customizable
implementation of multi-level annotation of (poten-
tially multi-modal) corpora. It is based on the as-
sumption that any annotation can be simplified to
sets of so-called markables carrying attributes and
standing in certain relations to each other. Conse-
quently, all a tool has to supply is efficient low-level
support for the creation and maintenance of mark-
ables on different levels.
The remainder of this paper is structured as fol-
lows: In Section 2 we describe in more detail the
basic concepts underlying our approach. Section 3
describes how annotation (or coding) schemes can
be defined by the user and how they are enforced
by the tool during the annotation process. Section
4 deals with how our approach extends naturally to
cover multiple linguistic levels simultaneously. Sec-
tion 5 gives a detailed description of both the tool
&apos;MultiModal Annotation in XML. The current release ver-
sion of the tool can be downloaded at http://www.eml.org/nlp.
itself and its Discourse API which offers high-level
Java access to annotated corpora in MMAX format.
In Section 6 we briefly discuss some related work.
</bodyText>
<sectionHeader confidence="0.991476" genericHeader="introduction">
2 Concepts
</sectionHeader>
<bodyText confidence="0.999983710526316">
Linguistic annotation is the process and result of
(manually) adding new information to existing lan-
guage data. This existing data can consist of writ-
ten texts (e.g. a newspaper corpus), but also of spo-
ken language (which may even be multi-modal, i.e.
contain e.g. pointing gestures). Before it can be
annotated, this data must be converted into some
machine-readable format. In addition, some rudi-
mentary structure has to be imposed on it. What is
important for both of these preprocessing steps is
that they should not alter the original data in any
way. In particular, they should not introduce ar-
bitrary decisions or implicit assumptions. Instead,
a format should be created that is as simple and
theory-neutral as possible. In our approach, written
text is simply modelled as a sequence of sentence
elements, each of which spans a number of word
elements. For spoken language (or dialogues), se-
quences of turn elements are used, each of which
spans sequences of word elements2. Since the tok-
enization into words and the segmentation into sen-
tences or turns can be performed on a mere formal
(i.e. surface-based) level, we believe these elements
to be sufficiently objective to serve as the structure
for what we call annotation base data. This is in
contrast to e.g. utterance segmentation, which has
been shown to require a considerable amount of in-
terpretation from human subjects. Therefore, we do
not support utterance elements on the level of the
annotation base data, but regard utterance segmen-
tation as one possible level of annotation.
As for the XML implementation of the annotation
base data, we simply model sentence and turn ele-
ments as XML elements with the respective name
and with two obligatory attributes: The ID attribute
assigns a unique label to each element, and the span
attribute contains a (condensed) list of IDs of those
base data elements that the sentence or turn contains.
</bodyText>
<footnote confidence="0.77951975">
&lt;sentence id=&amp;quot;sentence1&amp;quot;
span_=&amp;quot;word 1..word 8&amp;quot;/&gt;
2For multi-modal dialogue, turns can contain gesture ele-
ments in addition to word elements.
</footnote>
<bodyText confidence="0.99018">
The turn element may have an additional
speaker and number attribute.
</bodyText>
<equation confidence="0.9234995">
&lt;turn id=&amp;quot;turn_1&amp;quot; span=&amp;quot;word_1..word_7&amp;quot;
speaker=&amp;quot;A&amp;quot; number=&amp;quot;1&amp;quot;/&gt;
</equation>
<bodyText confidence="0.999888777777778">
Each word element in the base data is modelled as
a word XML element with an ID attribute as the
only obligatory one. The word itself is represented
as a text child of the word element. If the orig-
inal language data was spoken language, this is the
transcription of the originally spoken word. In this
case, the word element may also have an ad-
ditional starttime and endtime attribute relating the
word to a time line.
</bodyText>
<equation confidence="0.9851735">
&lt;word id=&amp;quot;word_1&amp;quot; starttime=&amp;quot;0.000&amp;quot;
endtime=&amp;quot;0.7567&amp;quot;&gt;
This
&lt;/word&gt;
</equation>
<bodyText confidence="0.998731833333333">
All elements comprising a MMAX document are
stored in a sentences or turns file and a words file
(and an additional gestures file for multimodal dia-
logue). These files define the annotation base data
and are not supposed to be modifiable through the
annotation tool.
</bodyText>
<subsectionHeader confidence="0.967997">
2.1 Markables
</subsectionHeader>
<bodyText confidence="0.999862869565217">
Markables are the sole carriers of annotation infor-
mation. The concept of markable is defined in for-
mal terms only, i.e. without any implicit semantics.
A markable is simply an abstract entity which ag-
gregates an arbitrary set of elements from the base
data. It does so by means of a list of IDs of word
elements (and/or gesture elements), which are inter-
preted as pointers to the respective elements. Obvi-
ously, the question which sequences of elements are
to be represented as markables depends on the lin-
guistic level or phenomenon one is interested in: In
the case of coreference annotation, markables would
identify referring expressions in the base data, be-
cause it is on this level that information has to be
added. If the task is dialogue act tagging, markables
would be used to represent utterances.
Markables are modelled as markable XML
elements which are similar to sentence and
turn elements in that they consist (in their most
basic form) mainly of an ID and a span attribute.
The latter attribute, however, can be more complex
since it can reference discontinuous (or fragmented)
sequences of base data elements.
</bodyText>
<equation confidence="0.969835">
&lt;markable id=&amp;quot;markable_1&amp;quot;
span=&amp;quot;word_1..word_5,word_7&amp;quot; ... /&gt;
</equation>
<bodyText confidence="0.999941285714286">
The placeholder dots in the example above are to in-
dicate that a markable can indeed have many more
attributes. These are described in sections 2.2 and
2.3. Markables pertaining to the same linguistic
level are stored together in a markables XML file.
In its header, this file contains a reference to an an-
notation scheme XML file (cf. Section 3).
</bodyText>
<subsectionHeader confidence="0.997235">
2.2 Attributes
</subsectionHeader>
<bodyText confidence="0.999992818181818">
In order to really add information to the base data,
it is not sufficient for a markable to identify the set
of elements it aggregates. It also has to associate
some attributes with them. In our approach, mark-
ables can have arbitrarily many attributes in the form
of name-value pairs. At this time, two types of at-
tributes are supported: Nominal attributes can take
one of a closed set of values, freetext attributes can
take any string (or numerical) value. The attribute
names, types and possible values to be defined de-
pend on the nature of the markables for which they
are intended: In dialogue act tagging, markables
represent utterances, thus a nominal attribute dia-
logue act with possible values like initiation, re-
sponse, and preparation etc. would be relevant.
On the XML level, attributes are expressed in the
standard name=&amp;quot;value&amp;quot; format on markable ele-
ments in the markables file. Note, however, that both
the type of the attributes and their possible values
(for nominal attributes) cannot be determined from
the markables file alone, but only with reference to
the annotation scheme (cf. Section 3) linked to it.
</bodyText>
<subsectionHeader confidence="0.99288">
2.3 Relations
</subsectionHeader>
<bodyText confidence="0.999965723404255">
While markables and their attributes are sufficient
to add information to independent sequences of
base data elements, they cannot relate these to
each other for the expression of structural infor-
mation. Therefore, our approach is complemented
by a means to express relations between mark-
ables. Currently, attributes of type member-relation
and pointer-relation are supported. Attributes of
type member-relation express undirected relations
between arbitrary many markables. This relation
can be interpreted as set-membership, i.e. mark-
ables having the same value in an attribute of type
member-relation constitute an unordered set. At-
tributes of type pointer-relation, on the other hand,
express directed relations between single source
markables and arbitrarily many target markables. As
the name suggests, this relation can be interpreted
as the source markable pointing to its target mark-
able(s). It is important to note that member-relation
and pointer-relation are not attributes themselves.
Rather, they are types of attributes (like nominal and
freetext) which can be realized by attributes of arbi-
trary names. That means that for one markable, sev-
eral different attributes of type member- and pointer-
relation can be defined within the same annota-
tion scheme. The attribute type simply defines how
these attributes are interpreted. Like the concept
of markable itself, relations are also defined only
formally, i.e. without any semantic interpretation.
Like markables, relations can be associated with any
kind of semantic interpretation, depending on the
annotation task at hand: For coreference annota-
tion, it would be natural to use a member-relation
attribute coref class to model classes of coreferring
expressions. In addition, a (binary) pointer-relation
attribute antecedent could be employed to anno-
tate the direct antecedent of a coreferring expres-
sion. As another example, if the task is annotating
the predicate-argument structure of verbs, (binary)
pointer-relation attributes like subject, direct object
and indirect object could be used to link a verb to its
arguments.
On the XML level, relations are expressed like
normal attributes, with the only difference that their
values are (lists of) markable element IDs (pointer-
relation) or strings of the form set x (member-
relation).
</bodyText>
<construct confidence="0.74755675">
&lt;markable id=&amp;quot;markable_2&amp;quot;
span=&amp;quot;word_14..16&amp;quot;
corefclass=&amp;quot;set 4&amp;quot;
antece_dent=&amp;quot;markable 1&amp;quot; ... /&gt;
</construct>
<sectionHeader confidence="0.96256" genericHeader="method">
3 Annotation Schemes
</sectionHeader>
<bodyText confidence="0.999981415384616">
Even on the same linguistic level, not every at-
tribute or relation is applicable all the time or to
every kind of markable. In coreference annotation,
e.g., a markable that has been explicitly annotated
as discourse-initial should not be allowed to have
an antecedent attribute. Along the same lines, in
predicate-argument structure annotation, a so-called
weather-verb like ”rain” should not be allowed to
have a pointer to its subject. Restricting the avail-
ability of attributes to only those that make sense in
a particular situation is an important means to ensure
annotation quality and consistency.
Dependencies of this kind can best be captured
by formulating constraints on which attributes can
occur together or which are mutually exclusive. In
our approach, constraints of various types can be
modelled in the annotation scheme. Generally, an-
notation (or coding) schemes are of central im-
portance to any annotation task. They describe
which phenomena are to be annotated using which
set of attributes. Within the MMAX tool, annota-
tion scheme development has been of special im-
portance, because the expressiveness and the de-
gree of customizability of the annotation scheme
strongly determine how versatile and generally ap-
plicable the tool is. The mechanism for defin-
ing and handling annotation schemes described in
what follows has been developed in collaboration
with the Brazilian-French project COMMOn-REFs
(Unisinos, S˜ao Lepoldo-RS, Brazil; LORIA/INRIA,
Nancy, France) (Salmon-Alt and Vieira, 2002).
An annotation scheme defines all attributes (nom-
inal, freetext, member-relation and pointer-relation)
valid for a linguistic level. It specifies possible val-
ues for nominal attributes, and it identifies default
attribute values. Attributes can be either branch-
ing or non-branching: If an attribute is branching,
its current value influences which other attributes
are available. In a branching nominal attribute, at
least one of the possible values is associated with
a reference to one or more following attributes. In
a branching freetext, member-relation or pointer-
relation attribute, on the other hand, at most two
references to following attributes are possible, de-
pending on whether the attribute does or does not
have a value. Consider the following example (see
Figure 1 for an illustration): In recent work dealing
with pronoun resolution in spoken dialogue (Strube
and M¨uller, 2003), different types of expressions
(noun phrases, verb phrases, whole utterances and
disfluencies) had to be annotated. They were distin-
guished by setting for each expression the appropri-
ate value in a nominal attribute called Expressions-
Type. Since noun phrases have different attributes
than e.g. verb phrases, the attribute ExpressionsType
was a branching one because each of its possible val-
ues referenced a partially3 different set of following
attributes: For noun phrases, the whole range of lin-
guistic features like case, grammatical role, seman-
tic role, etc. is relevant, while e.g. verb phrases and
utterances (for our purposes) needed only be distin-
guished according to their type (attributes VP Type
resp. Utt. Type). For unclassified expressions (none)
and disfluencies, on the other hand, no further at-
tributes were defined at all.
</bodyText>
<subsectionHeader confidence="0.535549">
Sem. Role
</subsectionHeader>
<figureCaption confidence="0.999476">
Figure 1: Annotation Scheme Diagram (Fragment)
</figureCaption>
<bodyText confidence="0.999534058823529">
Attributes that are referenced by branching at-
tributes (e.g. Member, Pointer, Case, VP Type) are
dependent in that they are only valid and accessible
if the corresponding value is selected on the branch-
ing attribute (i.e. ExpressionsType). Thus, the avail-
ability of attributes can effectively be constrained.
Since an attribute that is dependent on some other at-
tribute can itself be branching, arbitrarily many lev-
els of dependency are possible.
An annotation scheme of the above form can also
be described as an annotation tree, where each node
in the tree consists of a number of non-branching
and (optionally) one branching attribute. If a node
does have a branching attribute, the dependent at-
tributes it references can be seen as child nodes. If
a node does not have a branching attribute, it corre-
sponds to a leaf in the annotation tree.
</bodyText>
<footnote confidence="0.978033">
3The Member and Pointer attribute applies to noun phrases,
verb phrases and utterances.
</footnote>
<figure confidence="0.9977988">
Gram. Role
none
Member
Pointer
Case
np
Comment
Exp. Type
VP Type
Member
Pointer Pointer
vp utt
Utt. Type
Member
disfluency
</figure>
<sectionHeader confidence="0.777268" genericHeader="method">
4 Levels
</sectionHeader>
<bodyText confidence="0.99351952">
In Section 2, the linguistic levels of coreference, di-
alogue acts and predicate-argument structure were
used for illustrative purposes. It was demonstrated
how these different linguistic phenomena can be rep-
resented by means of a few simple concepts. The
following section deals with how the same concepts
lend themselves to the simultaneous representation
of multiple levels of linguistic description.
Among others, the following levels of linguistic
description could be envisaged:
morpho-syntax,
syntax,
valency/predicate-argument structure,
coreference,
dialogue acts,
prosody/intonation,
. . .
Relating e.g. the utterance level to the coreference
level could be done, for instance, in order to find out
whether utterance boundaries in spoken dialogues
can be used to narrow down the search space for an-
tecedents of discourse-deictic anaphors. Along sim-
ilar lines, the prosody or intonation level could pro-
vide relevant information as well.
Though it would be tempting to merge markable
files from different levels, this would have some se-
rious disadvantages. First of all, subsequent modifi-
cation or removal of a level would be cumbersome.
Moreover, alternative versions of the same level (e.g.
utterance segmentations performed by different an-
notators) cannot easily be compared without having
to duplicate the other levels. For these reasons, our
approach favours the separation of the different de-
scription levels to different markables files.
Since markables (as we define them) are not di-
rectly embedded into the base data, but reference
base data elements by means of their span attribute,
the simultaneous application of several description
levels is straightforward: Given some annotation
base data set, sets of markables pertaining to dif-
ferent description levels can simply be applied to it,
i.e. be allowed to access the base data elements they
reference, thus adding level by level of annotation.
Since markables on different levels are related only
indirectly by virtue of shared base data elements, is-
sues like overlap or discontinuous elements do not
arise. This is made possible through what can be
seen as a rigorous implementation of the principle of
stand-off annotation (Ide and Priest-Dorman, 1996;
Thompson and McKelvie, 1997).
</bodyText>
<sectionHeader confidence="0.999835" genericHeader="method">
5 MMAX
</sectionHeader>
<subsectionHeader confidence="0.995783">
5.1 The Annotation Tool
</subsectionHeader>
<bodyText confidence="0.999807121212121">
The MMAX annotation tool is written in Java. XML
and XSL functionality is supplied by the Apache4
Xerces and Xalan engines. The Java executable of
the tool itself is very small (ca. 300 kb). Installing
the tool (under Windows or Linux) is done by simply
extracting a directory structure to the local hard disk;
no further installation is required. Figure 2 shows a
typical annotation situation with the most important
GUI elements being visible, i.e. (clockwise, begin-
ning in the upper left corner): the main annotation
window, the SearchWindow, and the AttributeWin-
dow. In the SearchWindow, a query for 3rd per-
son neuter personal and possessive pronouns with
oblique case is specified. Attributes can be queried
by either selecting the desired value from a list, or by
specifying a regular expression. The AttributeWin-
dow shows the annotation scheme described in Fig-
ure 1.
Up to now, MMAX has been used for the creation
of several annotated corpora, e.g. uni-modal text-
only corpora (Salmon-Alt and Vieira, 2002; M¨uller
et al., 2002; Strube and M¨uller, 2003) and multi-
modal human-machine corpora (M¨uller and Strube,
2001; Rapp and Strube, 2002).
In order to minimize the tool’s system require-
ments and maximize its performance, we deliber-
ately chose to use a text-only display (as opposed to
an HTML display). This imposes a couple of restric-
tions with respect to user interaction. We distinguish
between the display of content-bearing vs. merely
layout information:
Content-bearing information is conveyed by
markables and their properties. Within MMAX, it
</bodyText>
<footnote confidence="0.985524">
4http://www.apache.org
</footnote>
<figureCaption confidence="0.99952">
Figure 2: MMAX Screenshot
</figureCaption>
<bodyText confidence="0.999858224719102">
is visualized by means of text foreground and back-
ground colours and graphical arrows (for relations
between markables). User actions like selecting,
adding or deleting a markable, adding a relation be-
tween two markables, or modifying a markable’s at-
tributes change the content-bearing information and
thus require frequent display updates. The MMAX
display offers hard-coded (and highly optimized)
methods for manipulating text colour and for draw-
ing lines between markables. Thus we achieve very
good performance (i.e. low response time) for these
by far most frequent types of user interactions.
Layout information, on the other hand, contains
formal properties of the display only. It includes
mainly line breaks and indentations, but also font
style properties like bold, italic, and underlined.
Within MMAX, the XSL style sheet supplied in
the .MMAX project file is responsible for rendering
the display layout. By modifying this style sheet,
the user can customize the display, e.g. by insert-
ing pseudo-HTML tags like bold ... /bold
or italic ... /italic . During a MMAX
session, changes to the layout can only be made
by explicitly reinvoking the style sheet processor,
which, depending on the data and style sheet com-
plexity, can take several seconds. In contrast to
content-bearing information, however, layout infor-
mation is not expected to require frequent updates.
Utterance segmentation is one example of how the
display layout might change as a result of markables
being added to the annotation, i.e. if the user wishes
to have line breaks inserted directly after markables
respresenting utterances. This, however, can be per-
formed reasonably well if the user does not rebuild
the display after each single markable creation, but
only after each, say, five or ten.
A MMAX session is started by opening a
.MMAX project file. This file contains references
to all files comprising a MMAX document:
one sentences or turns XML file,
a words XML file (and/or a gestures file),
a list of markables XML files,
an XSL style sheet file for rendering the layout
of the MMAX display,
an XML file specifying colour attributes for
rendering the appearance of markables depend-
ing on their content.
When a .MMAX project file is opened, the tool
first builds an XML DOM tree representation of the
information supplied in the base data files. For the
whole session, this tree serves as the read-only ’scaf-
fold’ to which annotations (given in the form of one
or more markables files) are applied. Then, depend-
ing on which annotation levels the user chose to
view, information about markables from these lev-
els is added to the DOM tree as well. The DOM tree
is then submitted to the XSL style sheet for transfor-
mation into a single string, which is then converted
in a Java object of type StyledDocument. In the last
step, markables in the StyledDocument are coloured
according to their initial attributes, and the Styled-
Document is finally presented to the user by assign-
ing it to the MMAX display.
Users can explicitly activate markables on differ-
ent annotation levels. Only if a level is active, mark-
ables on this level are displayed and can be accessed
or modified. Users can select an active markable by
left-clicking it. If the click is ambiguous, a popup
menu is displayed containing all active markables in
the clicked position. In this menu, markables are
tagged with their respective level, so that users can
easily select markables from a particular level (with-
out having to temporarily deactivate all other levels).
Once a markable is selected, its attributes are
displayed in a separate AttributeWindow. In addi-
tion, if it has a non-empty value for some member-
relation or pointer-relation attribute, those are visu-
alized by means of arrows drawn on the MMAX dis-
play. The AttributeWindow has access to the anno-
tation scheme defined for the markable it currently
displays. This enables the AttributeWindow to per-
form a consistency check on each markable by try-
ing to ’reproduce’ the annotation process that lead to
this markable having this set of attributes.5 It does
so by traversing the annotation tree, beginning at the
root, and recursively trying to match the attributes
of the markable to the attributes defined at the cur-
rent annotation tree node. If an attribute could be
matched, it is consumed, and the AttributeWindow
</bodyText>
<footnote confidence="0.8873185">
5Thanks to Caroline Varaschin Gasperin (Unisinos, S˜ao
Lepoldo-RS, Brazil) for providing some initial ideas on this.
</footnote>
<bodyText confidence="0.991506909090909">
is changed so that dependent attributes are accessi-
ble. If the matching process terminates before all
attributes have been consumed, an annotation error
or inconsistency has been detected. The same is true
if an undefined attribute value is found on the mark-
able. In both cases, a warning message is displayed
to the user. Within MMAX, the AttributeWindow is
the central location where the annotation scheme is
enforced. Figure 3 gives an idea of the internal rela-
tions between different MMAX components. Bold
boxes represent GUI elements.
</bodyText>
<figureCaption confidence="0.998897">
Figure 3: MMAX Components
</figureCaption>
<bodyText confidence="0.999974297297297">
Creating a new markable works straightforwardly
by selecting a sequence of text on the display and
right-clicking it. If only one annotation level is ac-
tive, a pop-up menu with only one option, i.e. creat-
ing a markable on this level, will apear. Otherwise,
the menu will contain options for creating a mark-
able on any one currently active level.
When a newly created markable is selected, it
does not have any attributes except for those de-
fined on the root node of the annotation tree. The
AttributeWindow utilizes the order of the annotation
tree nodes to guide the user through the annotation
process, allowing only those attributes to be dis-
played that are valid in the current annotation situa-
tion. As an additional help, each attribute and each
value in the annotation scheme can have a textual de-
scription associated with it. During annotation, this
description will be displayed to the user when they
move the mouse over the corresponding item in the
AttributeWindow.
Creation and deletion of relations between mark-
ables is performed in two steps: First, the source
markable is selected as described above. Then
the target markable is selected by right-clicking it.
Then, another pop-up menu appears, the options
of which depend on which relations have been de-
fined for the source and target markable: If one or
more member-relation attributes are defined for both
markables, the user will have the option of adding
the target markable to the set of the source mark-
able (if it is already a member of one). If one or
more pointer-relation attributes are defined for the
source markable, the user will also have the option
of pointing to the target markable. Deleting relations
between markables works analogously. After each
modification, the display is refreshed in order to re-
flect changes to the selected markable’s attributes.
</bodyText>
<subsectionHeader confidence="0.998572">
5.2 The Discourse API
</subsectionHeader>
<bodyText confidence="0.997918666666667">
The MMAX Discourse API6 is intended as a plat-
form for the exploitation and reuse of annotated doc-
uments in MMAX format. It maps the elements of
the base data and the markables to Java classes and
defines a set of basic operations to be performed
on them. The entire document is wrapped in a
Java Discourse object which serves as the single
entry point. The Discourse object itself is created
from the .MMAX project file by a DiscourseLoader
class which parses the XML files and resolves ref-
erences between elements. The result is a tree-like
structure which can be navigated by accessing ele-
ments on a particular level and retrieving their child
elements, which are Java objects themselves and
can thus be used as entry points to their child el-
ements as well. Consider the following example:
getSentenceCount(), when called on the Discourse
object, returns the number of sentences in the cur-
rent document. This number can be used to iter-
ate over all those elements by means of the getSen-
tence(position) method, which returns the sentence
at position as a Java Sentence object. Calling get-
WordCount() on this object returns the number of
word elements the current sentence contains. get-
Word(position) returns the word at position as a Java
Word object. These objects contain, among other
things, a getMarkables() method which returns a list
TThis section is based on (M¨uller and Strube, 2002) where
an earlier version of the MMAX Discourse API is described in
more detail.
</bodyText>
<figure confidence="0.99440025">
specifies
1
1
displays
1
displays
1
1
n
1
1
complies with
1
1
1
contains
finds
n
1
n
displays
Attribute Window
Search Window
1
specifies 1
Markable
1
has
n
Valid A−V pairs
n
Annotation Scheme
Level
n
Document
1
MMAX tool
1
defines
sets properties for
contains
n 1
Valid path through
annotation tree
</figure>
<bodyText confidence="0.999422375">
of all markables (as Java Markable objects) a word
is part of. Alternatively, getMarkables(level) returns
only those markables on a particular level. On the
level of Markable objects, the API contains a set
of basic methods for e.g. retrieving attribute val-
ues. It also supports procedures like determining the
formal relation between markables (identity, embed-
ding, overlap, and the like).
</bodyText>
<sectionHeader confidence="0.999973" genericHeader="method">
6 Related Work
</sectionHeader>
<bodyText confidence="0.99986825">
The work described in this paper is relevant for two
distinct yet related topics: Representation models
for linguistic data and development of annotation
tools proper.
</bodyText>
<subsectionHeader confidence="0.984403">
6.1 Linguistic Representation Models
</subsectionHeader>
<bodyText confidence="0.99999352">
The Annotation Graph model (Bird and Liberman,
2001) is a current representation model for linguis-
tic data. Within this model, annotations are repre-
sented as labelled arcs connecting nodes on a com-
mon timeline. Each arc is associated with a particu-
lar type (like a phone, word, dialogue act, etc.), and
a set of attribute-value pairs. While they are sim-
ilar to MMAX markables in this respect, Annota-
tion Graphs are much more powerful since they can
model any phenomenon which can be mapped to se-
quentially aligned elements with a temporal exten-
sion. On the other hand, the dependence on time-
aligned data might make it more difficult to model
corpora without time stamps, like e.g. written text
corpora. In principle, however, our approach and
the Annotation Graph model serve rather different
purposes: the former has been primarily designed
as the internal representation format for the MMAX
tool, and turned out to be useful as an independent
representation model as well, while the ambition of
the latter has been to create a general purpose model
for the unification of diverse annotation system for-
mats. Due to their similarity, however, both models
are compatible with each other, and conversion from
one into the other should be possible.
</bodyText>
<subsectionHeader confidence="0.99756">
6.2 Annotation Tools
</subsectionHeader>
<bodyText confidence="0.999993972222222">
The NITE7 (Bernsen et al., 2002) initiative is a
project in which a workbench for multi-level, cross-
level and cross-modality annotation of language data
is developed. It is comparable to our tool only in
that it explicitly addresses the simultaneous annota-
tion on different levels. It is, however, much more
ambitious than MMAX, both with respect to its in-
tended scope of functionality and the features it of-
fers for display customization. For instance, NITE
offers plug-ins for speech signal visualization and
even video annotation (Soria et al., 2002): The lat-
ter allows the user/annotator to insert information di-
rectly into the video data. In contrast to that, MMAX
only supports read-only access for playback of au-
dio (and possibly video) files associated with indi-
vidual sentences or turns in the base data. NITE is
even more advanced with respect to the display ca-
pabilities. Users have at their disposal not only plain
text elements, but more powerful devices like tables,
list, buttons and the like, which can be used to create
highly functional displays by means of XSL style
sheets. The downside, however, appears to be that
even minor changes to the elements displayed make
it necessary to reinvoke the style sheet processor,
which may become time-critical for long or more
complex documents. The NITE workbench, which
still appears to be in a demo or prototype stage, is
implemented in C++ and runs only on the Windows
platform. This decision might be motivated by per-
formance requirements resulting from the features
mentioned above.
Apart from NITE, a number of smaller and more
specialized tools for the annotation of individual lin-
guistic phenomena exist, many of which are publicly
available. The Linguistic Annotation website8 con-
tains pointers to a large number of those.
</bodyText>
<sectionHeader confidence="0.999514" genericHeader="conclusions">
7 Conclusions
</sectionHeader>
<bodyText confidence="0.999983272727273">
This paper presented the MMAX annotation tool
which is based on the following major considera-
tions. On the theoretical side, there is the simplifica-
tion of annotations to a set of simple concepts based
on the notion of markable. Markables are versatile
in the sense that almost any kind of annotation can
be expressed through them. In addition, arbitrarily
many markables can refer to the same sequence of
data without interfering with each other, even if they
are overlapping or discontinuous. This makes it pos-
sible to use them for annotation of various levels of
</bodyText>
<footnote confidence="0.76072">
7http://nite.nis.sdu.dk 8http://www.ldc.upenn.edu/annotation
</footnote>
<bodyText confidence="0.999895173913043">
linguistic description simultaneously. Another theo-
retical issue in the design of MMAX is its ability to
express and enforce highly customizable annotation
schemes. On the practical side, a main design fea-
ture is the deliberate restriction of the display capa-
bilities. This, taken together with the rather simple
markable concept, made it possible to implement a
display which is quickly updatable and thus easily
and conveniently usable, even if more than one an-
notation level (i.e. markables file) is displayed at the
same time. The tool is implemented in Java, which
has the additional advantage of being platform in-
dependent and easily extensible. We believe that all
this taken together outweighs the disadvantages of a
slightly ’impoverished’ display.
Acknowledgements. The work presented here has
been partially funded by the German Ministry of
Research and Technology as part of the EMBASST
project (01 IL 904 D/2) and by the Klaus Tschira
Foundation. We would like to thank the researchers
from the COMMOn-REFs project, in particular Car-
oline Varaschin Gasperin, for their useful criticism
and ideas on improving MMAX.
</bodyText>
<sectionHeader confidence="0.999239" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999647160714286">
Niels Ole Bernsen, Laila Dybkjaer, and Mykola Kolod-
nytsky. 2002. THE NITE WORKBENCH – A tool
for the annotation of natural interactivity and multi-
modal data. In Proceedings of the 3rd International
Conference on Language Resources and Evaluation,
Las Palmas, Canary Islands, Spain, 29-31 May, 2002,
pages 43–49.
Stephen Bird and Mark Liberman. 2001. A formal
framework for linguistic annotation. Speech Commu-
nication, 33(1):23–60.
Nancy Ide and Greg Priest-Dorman. 1996. The corpus
encoding standard. http://www.cs.vassar.edu/CES.
Christoph M¨uller and Michael Strube. 2001. MMAX:
A tool for the annotation of multi-modal corpora. In
Proceedings of 2nd IJCAI Workshop on Knowledge
and Reasoning in Practical Dialogue Systems, Seattle,
Wash., 5 August 2001, pages 45–50.
Christoph M¨uller and Michael Strube. 2002. An API
for discourse-level access to XML-encoded corpora.
In Proceedings of the 3rd International Conference on
Language Resources and Evaluation, Las Palmas, Ca-
nary Islands, Spain, 29-31 May, 2002, pages 26–30.
Christoph M¨uller, Stefan Rapp, and Michael Strube.
2002. Applying Co-Training to reference resolution.
In Proceedings of the 40th Annual Meeting of the As-
sociation for Computational Linguistics, Philadelphia,
Penn., 7–12 July 2002, pages 352–359.
Stefan Rapp and Michael Strube. 2002. An iterative data
collection approach for multimodal dialogue systems.
In Proceedings of the 3rd International Conference on
Language Resources and Evaluation, Las Palmas, Ca-
nary Islands, Spain, 29-31 May, 2002, pages 661–665.
Susanne Salmon-Alt and Renata Vieira. 2002. Nomi-
nal expressions in multilingual corpora: Definites and
demonstratives. In Proceedings of the 3rd Interna-
tional Conference on Language Resources and Evalu-
ation, Las Palmas, Canary Islands, Spain, 29-31 May,
2002, pages 1627–1634.
Claudia Soria, Niels Ole Bernsen, Niels Cad´ee, Jean Car-
letta, Laila Dybkjaer, Stefan Evert, Ulrich Heid, Amy
Isard, Mykola Kolodnytsky, Christoph Lauer, Wolf-
gang Lezius, Lucas P.J.J. Noldus, Vito Pirrelli, Norbert
Reithinger, and Andreas V¨ogele. 2002. Advanced
tools for the study of natural interactivity. In Pro-
ceedings of the 3rd International Conference on Lan-
guage Resources and Evaluation, Las Palmas, Canary
Islands, Spain, 29-31 May, 2002, pages 357–363.
Michael Strube and Christoph M¨uller. 2003. A machine
learning approach to pronoun resolution in spoken di-
alogue. In Proceedings of the 41st Annual Meeting
of the Association for Computational Linguistics, Sap-
poro, Japan, 7–12 July 2003. To appear.
Henry S. Thompson and David McKelvie. 1997. Hy-
perlink semantics for standoff markup of read-only
documents. In Proceedings of SGML Europe ’97,
Barcelona, Spain, May 1997.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.149679">
<title confidence="0.999548">Multi-Level Annotation in MMAX</title>
<author confidence="0.532233">M¨uller</author>
<affiliation confidence="0.792747666666667">European Media Laboratory Villa Schloß-Wolfsbrunnenweg</affiliation>
<address confidence="0.999605">69118 Heidelberg, Germany</address>
<email confidence="0.596373">Christoph.Mueller,Michael.Strube@eml.villa-bosch.de</email>
<abstract confidence="0.987048777777778">We present a light-weight tool for the annotation of linguistic data on multiple levels. It is based on the simplification of anto sets of atstanding in certain to each other. We describe the main features of the tool, emphasizing its simplicity, customizability and versatility.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Niels Ole Bernsen</author>
<author>Laila Dybkjaer</author>
<author>Mykola Kolodnytsky</author>
</authors>
<title>THE NITE WORKBENCH – A tool for the annotation of natural interactivity and multimodal data.</title>
<date>2002</date>
<booktitle>In Proceedings of the 3rd International Conference on Language Resources and Evaluation,</booktitle>
<pages>43--49</pages>
<location>Las Palmas, Canary Islands,</location>
<contexts>
<context position="30142" citStr="Bernsen et al., 2002" startWordPosition="4818" endWordPosition="4821">g. written text corpora. In principle, however, our approach and the Annotation Graph model serve rather different purposes: the former has been primarily designed as the internal representation format for the MMAX tool, and turned out to be useful as an independent representation model as well, while the ambition of the latter has been to create a general purpose model for the unification of diverse annotation system formats. Due to their similarity, however, both models are compatible with each other, and conversion from one into the other should be possible. 6.2 Annotation Tools The NITE7 (Bernsen et al., 2002) initiative is a project in which a workbench for multi-level, crosslevel and cross-modality annotation of language data is developed. It is comparable to our tool only in that it explicitly addresses the simultaneous annotation on different levels. It is, however, much more ambitious than MMAX, both with respect to its intended scope of functionality and the features it offers for display customization. For instance, NITE offers plug-ins for speech signal visualization and even video annotation (Soria et al., 2002): The latter allows the user/annotator to insert information directly into the </context>
</contexts>
<marker>Bernsen, Dybkjaer, Kolodnytsky, 2002</marker>
<rawString>Niels Ole Bernsen, Laila Dybkjaer, and Mykola Kolodnytsky. 2002. THE NITE WORKBENCH – A tool for the annotation of natural interactivity and multimodal data. In Proceedings of the 3rd International Conference on Language Resources and Evaluation, Las Palmas, Canary Islands, Spain, 29-31 May, 2002, pages 43–49.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephen Bird</author>
<author>Mark Liberman</author>
</authors>
<title>A formal framework for linguistic annotation.</title>
<date>2001</date>
<journal>Speech Communication,</journal>
<volume>33</volume>
<issue>1</issue>
<contexts>
<context position="28895" citStr="Bird and Liberman, 2001" startWordPosition="4610" endWordPosition="4613">cts) a word is part of. Alternatively, getMarkables(level) returns only those markables on a particular level. On the level of Markable objects, the API contains a set of basic methods for e.g. retrieving attribute values. It also supports procedures like determining the formal relation between markables (identity, embedding, overlap, and the like). 6 Related Work The work described in this paper is relevant for two distinct yet related topics: Representation models for linguistic data and development of annotation tools proper. 6.1 Linguistic Representation Models The Annotation Graph model (Bird and Liberman, 2001) is a current representation model for linguistic data. Within this model, annotations are represented as labelled arcs connecting nodes on a common timeline. Each arc is associated with a particular type (like a phone, word, dialogue act, etc.), and a set of attribute-value pairs. While they are similar to MMAX markables in this respect, Annotation Graphs are much more powerful since they can model any phenomenon which can be mapped to sequentially aligned elements with a temporal extension. On the other hand, the dependence on timealigned data might make it more difficult to model corpora wi</context>
</contexts>
<marker>Bird, Liberman, 2001</marker>
<rawString>Stephen Bird and Mark Liberman. 2001. A formal framework for linguistic annotation. Speech Communication, 33(1):23–60.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nancy Ide</author>
<author>Greg Priest-Dorman</author>
</authors>
<title>The corpus encoding standard.</title>
<date>1996</date>
<note>http://www.cs.vassar.edu/CES.</note>
<contexts>
<context position="1153" citStr="Ide and Priest-Dorman, 1996" startWordPosition="172" endWordPosition="175">stomizability and versatility. 1 Introduction In recent years, the development and use of annotation tools has been a recurrent topic in corpusbased computational linguistics. Currently, specialized tools for the annotation of a wide range of phenomena on different levels of linguistic description are available. In the more recent of these tools, principles of design and implementation are realized which over the years have emerged as quasistandards: XML as data storage format, file-level separation of base data (i.e. the data to be annotated) from the annotation, use of stand-off annotation (Ide and Priest-Dorman, 1996), implementation in Java for the sake of platform independence. Most of the available tools handle well the phenomena on the linguistic level they are intended for, be it coreference, dialogue acts, or discourse structure, to name just a few. The annotations they yield do exist independently of each other and cannot easily be combined or applied to the same language data. This, however, would be highly desirable because it would allow for simultaneous browsing and annotating on several linguistic levels. In addition, annotation tasks could be distributed to several research groups with differe</context>
<context position="17908" citStr="Ide and Priest-Dorman, 1996" startWordPosition="2807" endWordPosition="2810">ute, the simultaneous application of several description levels is straightforward: Given some annotation base data set, sets of markables pertaining to different description levels can simply be applied to it, i.e. be allowed to access the base data elements they reference, thus adding level by level of annotation. Since markables on different levels are related only indirectly by virtue of shared base data elements, issues like overlap or discontinuous elements do not arise. This is made possible through what can be seen as a rigorous implementation of the principle of stand-off annotation (Ide and Priest-Dorman, 1996; Thompson and McKelvie, 1997). 5 MMAX 5.1 The Annotation Tool The MMAX annotation tool is written in Java. XML and XSL functionality is supplied by the Apache4 Xerces and Xalan engines. The Java executable of the tool itself is very small (ca. 300 kb). Installing the tool (under Windows or Linux) is done by simply extracting a directory structure to the local hard disk; no further installation is required. Figure 2 shows a typical annotation situation with the most important GUI elements being visible, i.e. (clockwise, beginning in the upper left corner): the main annotation window, the Searc</context>
</contexts>
<marker>Ide, Priest-Dorman, 1996</marker>
<rawString>Nancy Ide and Greg Priest-Dorman. 1996. The corpus encoding standard. http://www.cs.vassar.edu/CES.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christoph M¨uller</author>
<author>Michael Strube</author>
</authors>
<title>MMAX: A tool for the annotation of multi-modal corpora.</title>
<date>2001</date>
<booktitle>In Proceedings of 2nd IJCAI Workshop on Knowledge and Reasoning in Practical Dialogue Systems,</booktitle>
<pages>45--50</pages>
<location>Seattle, Wash., 5</location>
<marker>M¨uller, Strube, 2001</marker>
<rawString>Christoph M¨uller and Michael Strube. 2001. MMAX: A tool for the annotation of multi-modal corpora. In Proceedings of 2nd IJCAI Workshop on Knowledge and Reasoning in Practical Dialogue Systems, Seattle, Wash., 5 August 2001, pages 45–50.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christoph M¨uller</author>
<author>Michael Strube</author>
</authors>
<title>An API for discourse-level access to XML-encoded corpora.</title>
<date>2002</date>
<booktitle>In Proceedings of the 3rd International Conference on Language Resources and Evaluation, Las Palmas, Canary Islands,</booktitle>
<pages>26--30</pages>
<marker>M¨uller, Strube, 2002</marker>
<rawString>Christoph M¨uller and Michael Strube. 2002. An API for discourse-level access to XML-encoded corpora. In Proceedings of the 3rd International Conference on Language Resources and Evaluation, Las Palmas, Canary Islands, Spain, 29-31 May, 2002, pages 26–30.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christoph M¨uller</author>
<author>Stefan Rapp</author>
<author>Michael Strube</author>
</authors>
<title>Applying Co-Training to reference resolution.</title>
<date>2002</date>
<booktitle>In Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>352--359</pages>
<location>Philadelphia, Penn., 7–12</location>
<marker>M¨uller, Rapp, Strube, 2002</marker>
<rawString>Christoph M¨uller, Stefan Rapp, and Michael Strube. 2002. Applying Co-Training to reference resolution. In Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics, Philadelphia, Penn., 7–12 July 2002, pages 352–359.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan Rapp</author>
<author>Michael Strube</author>
</authors>
<title>An iterative data collection approach for multimodal dialogue systems.</title>
<date>2002</date>
<booktitle>In Proceedings of the 3rd International Conference on Language Resources and Evaluation, Las Palmas, Canary Islands,</booktitle>
<pages>661--665</pages>
<contexts>
<context position="19118" citStr="Rapp and Strube, 2002" startWordPosition="3004" endWordPosition="3007">w, the SearchWindow, and the AttributeWindow. In the SearchWindow, a query for 3rd person neuter personal and possessive pronouns with oblique case is specified. Attributes can be queried by either selecting the desired value from a list, or by specifying a regular expression. The AttributeWindow shows the annotation scheme described in Figure 1. Up to now, MMAX has been used for the creation of several annotated corpora, e.g. uni-modal textonly corpora (Salmon-Alt and Vieira, 2002; M¨uller et al., 2002; Strube and M¨uller, 2003) and multimodal human-machine corpora (M¨uller and Strube, 2001; Rapp and Strube, 2002). In order to minimize the tool’s system requirements and maximize its performance, we deliberately chose to use a text-only display (as opposed to an HTML display). This imposes a couple of restrictions with respect to user interaction. We distinguish between the display of content-bearing vs. merely layout information: Content-bearing information is conveyed by markables and their properties. Within MMAX, it 4http://www.apache.org Figure 2: MMAX Screenshot is visualized by means of text foreground and background colours and graphical arrows (for relations between markables). User actions lik</context>
</contexts>
<marker>Rapp, Strube, 2002</marker>
<rawString>Stefan Rapp and Michael Strube. 2002. An iterative data collection approach for multimodal dialogue systems. In Proceedings of the 3rd International Conference on Language Resources and Evaluation, Las Palmas, Canary Islands, Spain, 29-31 May, 2002, pages 661–665.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Susanne Salmon-Alt</author>
<author>Renata Vieira</author>
</authors>
<title>Nominal expressions in multilingual corpora: Definites and demonstratives.</title>
<date>2002</date>
<booktitle>In Proceedings of the 3rd International Conference on Language Resources and Evaluation, Las Palmas, Canary Islands,</booktitle>
<pages>1627--1634</pages>
<contexts>
<context position="12824" citStr="Salmon-Alt and Vieira, 2002" startWordPosition="2020" endWordPosition="2023">of central importance to any annotation task. They describe which phenomena are to be annotated using which set of attributes. Within the MMAX tool, annotation scheme development has been of special importance, because the expressiveness and the degree of customizability of the annotation scheme strongly determine how versatile and generally applicable the tool is. The mechanism for defining and handling annotation schemes described in what follows has been developed in collaboration with the Brazilian-French project COMMOn-REFs (Unisinos, S˜ao Lepoldo-RS, Brazil; LORIA/INRIA, Nancy, France) (Salmon-Alt and Vieira, 2002). An annotation scheme defines all attributes (nominal, freetext, member-relation and pointer-relation) valid for a linguistic level. It specifies possible values for nominal attributes, and it identifies default attribute values. Attributes can be either branching or non-branching: If an attribute is branching, its current value influences which other attributes are available. In a branching nominal attribute, at least one of the possible values is associated with a reference to one or more following attributes. In a branching freetext, member-relation or pointerrelation attribute, on the oth</context>
<context position="18982" citStr="Salmon-Alt and Vieira, 2002" startWordPosition="2983" endWordPosition="2986">situation with the most important GUI elements being visible, i.e. (clockwise, beginning in the upper left corner): the main annotation window, the SearchWindow, and the AttributeWindow. In the SearchWindow, a query for 3rd person neuter personal and possessive pronouns with oblique case is specified. Attributes can be queried by either selecting the desired value from a list, or by specifying a regular expression. The AttributeWindow shows the annotation scheme described in Figure 1. Up to now, MMAX has been used for the creation of several annotated corpora, e.g. uni-modal textonly corpora (Salmon-Alt and Vieira, 2002; M¨uller et al., 2002; Strube and M¨uller, 2003) and multimodal human-machine corpora (M¨uller and Strube, 2001; Rapp and Strube, 2002). In order to minimize the tool’s system requirements and maximize its performance, we deliberately chose to use a text-only display (as opposed to an HTML display). This imposes a couple of restrictions with respect to user interaction. We distinguish between the display of content-bearing vs. merely layout information: Content-bearing information is conveyed by markables and their properties. Within MMAX, it 4http://www.apache.org Figure 2: MMAX Screenshot i</context>
</contexts>
<marker>Salmon-Alt, Vieira, 2002</marker>
<rawString>Susanne Salmon-Alt and Renata Vieira. 2002. Nominal expressions in multilingual corpora: Definites and demonstratives. In Proceedings of the 3rd International Conference on Language Resources and Evaluation, Las Palmas, Canary Islands, Spain, 29-31 May, 2002, pages 1627–1634.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Claudia Soria</author>
<author>Niels Ole Bernsen</author>
<author>Niels Cad´ee</author>
<author>Jean Carletta</author>
<author>Laila Dybkjaer</author>
<author>Stefan Evert</author>
<author>Ulrich Heid</author>
<author>Amy Isard</author>
<author>Mykola Kolodnytsky</author>
<author>Christoph Lauer</author>
<author>Wolfgang Lezius</author>
<author>Lucas P J J Noldus</author>
<author>Vito Pirrelli</author>
<author>Norbert Reithinger</author>
<author>Andreas V¨ogele</author>
</authors>
<title>Advanced tools for the study of natural interactivity.</title>
<date>2002</date>
<booktitle>In Proceedings of the 3rd International Conference on Language Resources and Evaluation,</booktitle>
<pages>357--363</pages>
<location>Las Palmas, Canary Islands,</location>
<marker>Soria, Bernsen, Cad´ee, Carletta, Dybkjaer, Evert, Heid, Isard, Kolodnytsky, Lauer, Lezius, Noldus, Pirrelli, Reithinger, V¨ogele, 2002</marker>
<rawString>Claudia Soria, Niels Ole Bernsen, Niels Cad´ee, Jean Carletta, Laila Dybkjaer, Stefan Evert, Ulrich Heid, Amy Isard, Mykola Kolodnytsky, Christoph Lauer, Wolfgang Lezius, Lucas P.J.J. Noldus, Vito Pirrelli, Norbert Reithinger, and Andreas V¨ogele. 2002. Advanced tools for the study of natural interactivity. In Proceedings of the 3rd International Conference on Language Resources and Evaluation, Las Palmas, Canary Islands, Spain, 29-31 May, 2002, pages 357–363.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Strube</author>
<author>Christoph M¨uller</author>
</authors>
<title>A machine learning approach to pronoun resolution in spoken dialogue.</title>
<date>2003</date>
<booktitle>In Proceedings of the 41st Annual Meeting of the Association for Computational Linguistics,</booktitle>
<location>Sapporo,</location>
<note>To appear.</note>
<marker>Strube, M¨uller, 2003</marker>
<rawString>Michael Strube and Christoph M¨uller. 2003. A machine learning approach to pronoun resolution in spoken dialogue. In Proceedings of the 41st Annual Meeting of the Association for Computational Linguistics, Sapporo, Japan, 7–12 July 2003. To appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Henry S Thompson</author>
<author>David McKelvie</author>
</authors>
<title>Hyperlink semantics for standoff markup of read-only documents.</title>
<date>1997</date>
<booktitle>In Proceedings of SGML Europe ’97,</booktitle>
<location>Barcelona, Spain,</location>
<contexts>
<context position="17938" citStr="Thompson and McKelvie, 1997" startWordPosition="2811" endWordPosition="2814">tion of several description levels is straightforward: Given some annotation base data set, sets of markables pertaining to different description levels can simply be applied to it, i.e. be allowed to access the base data elements they reference, thus adding level by level of annotation. Since markables on different levels are related only indirectly by virtue of shared base data elements, issues like overlap or discontinuous elements do not arise. This is made possible through what can be seen as a rigorous implementation of the principle of stand-off annotation (Ide and Priest-Dorman, 1996; Thompson and McKelvie, 1997). 5 MMAX 5.1 The Annotation Tool The MMAX annotation tool is written in Java. XML and XSL functionality is supplied by the Apache4 Xerces and Xalan engines. The Java executable of the tool itself is very small (ca. 300 kb). Installing the tool (under Windows or Linux) is done by simply extracting a directory structure to the local hard disk; no further installation is required. Figure 2 shows a typical annotation situation with the most important GUI elements being visible, i.e. (clockwise, beginning in the upper left corner): the main annotation window, the SearchWindow, and the AttributeWind</context>
</contexts>
<marker>Thompson, McKelvie, 1997</marker>
<rawString>Henry S. Thompson and David McKelvie. 1997. Hyperlink semantics for standoff markup of read-only documents. In Proceedings of SGML Europe ’97, Barcelona, Spain, May 1997.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>