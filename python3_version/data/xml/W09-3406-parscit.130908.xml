<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000034">
<title confidence="0.973551">
Assas-Band, an Affix-Exception-List Based Urdu Stemmer
</title>
<author confidence="0.956618">
Qurat-ul-Ain Akram
</author>
<affiliation confidence="0.645959333333333">
Center for Research in Urdu
Language Processing
NUCES, Pakistan
</affiliation>
<email confidence="0.947269">
ainie.akram@nu.edu.pk
</email>
<author confidence="0.831829">
Asma Naseer
</author>
<affiliation confidence="0.573110666666667">
Center for Research in Urdu
Language Processing
NUCES, Pakistan
</affiliation>
<email confidence="0.928976">
asma.naseer@nu.edu.pk
</email>
<author confidence="0.877449">
Sarmad Hussain
</author>
<affiliation confidence="0.588673">
Center for Research in Urdu
Language Processing
NUCES, Pakistan
</affiliation>
<email confidence="0.914246">
sarmad.hussain@nu.edu.pk
</email>
<sectionHeader confidence="0.990467" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.996178">
Both Inflectional and derivational morphology lead
to multiple surface forms of a word. Stemming
reduces these forms back to its stem or root, and is
a very useful tool for many applications. There has
not been any work reported on Urdu stemming.
The current work develops an Urdu stemmer or
Assas-Band and improves the performance using
more precise affix based exception lists, instead of
the conventional lexical lookup employed for
developing stemmers in other languages. Testing
shows an accuracy of 91.2%. Further
enhancements are also suggested.
</bodyText>
<sectionHeader confidence="0.997768" genericHeader="keywords">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999925514285714">
A stemmer extracts stem from various forms of
words, for example words actor, acted, and acting all
will reduce to stem act. Stemmers are very useful for
a variety of applications which need to acquire root
form instead of inflected or derived forms of words.
This is especially true for Information Retrieval tasks,
which search for the base forms, instead of inflected
forms. The need of stemmers becomes even more
pronounced for languages which are morphologically
rich, and have a variety of inflected and derived
forms.
Urdu is spoken by more than a 100 million people
(accessed from http://www.ethnologue.com/show_
language.asp ?code =urd). It is the national language
of Pakistan and a state language of India. It is an
Indo-Aryan language, and is morphologically rich.
Currently there is no stemmer for Urdu, however
recent work has shown that it may have much utility
for a variety of applications, much wider than some
other languages. Due to the morphological richness
of Urdu, its application to information retrieval tasks
is quite apparent. However, there are also a few other
areas of application, including automatic
diacritization for text to speech systems, chunking,
word sense disambiguation and statistical machine
translation. In most of these cases, stemming
addresses the sparseness of data caused by multiple
surface forms which are caused mostly by inflections,
though also applicable to some derivations.
Due to urgent need for some applications, an Urdu
stemmer called Assas-Band1, has been developed.
The current work explains the details of Assas-Band
and its enhancements using exceptions lists instead of
lexical lookup methods, to improve its accuracy.
Finally results are reported and discussed.
</bodyText>
<sectionHeader confidence="0.982323" genericHeader="introduction">
2. Literature Review
</sectionHeader>
<bodyText confidence="0.999976294117647">
Urdu is rich in both inflectional and derivational
morphology. Urdu verbs inflect to show agreement
for number, gender, respect and case. In addition to
these factors, verbs in Urdu also have different
inflections for infinitive, past, non-past, habitual and
imperative forms. All these forms (twenty in total)
for a regular verb are duplicated for transitive and
causative (di-transitive) forms, thus giving a total of
more than sixty inflected variations. Urdu nouns also
show agreement for number, gender and case. In
addition, they show diminutive and vocative
affixation. Moreover, the nouns show derivational
changes into adjectives and nouns. Adjectives show
similar agreement changes for number, gender and
case. A comprehensive computational analysis of
Urdu morphology is given by Hussain (2004).
Stemmers may be developed by using either rule-
based or statistical approaches. Rule-based stemmers
require prior morphological knowledge of the
language, while statistical stemmers use corpus to
calculate the occurrences of stems and affixes. Both
rule-based and statistical stemmers have been
developed for a variety of languages.
A rule-based stemmer is developed for English by
Krovetz (1993) using machine-readable dictionaries.
Along with a dictionary, rules for inflectional and
derivational morphology are defined. Due to high
dependency on dictionary the systems lacks
consistency (Croft and Xu 1995). In Porter Stemmer
(Porter 1980) the algorithm enforces some
terminating conditions of a stem. Until any of the
conditions is achieved, it keeps on removing endings
of the word iteratively. Thabet has proposed a
stemmer that performs stemming of classical Arabic
</bodyText>
<footnote confidence="0.994398">
1 In Urdu Assas means stem and Assas-Band means
stemmer
</footnote>
<page confidence="0.966008">
40
</page>
<note confidence="0.728295">
Proceedings of the 7th Workshop on Asian Language Resources, ACL-IJCNLP 2009, pages 40–47,
Suntec, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.999767615384615">
in Quran (Thabet 2004) using stop-word list. The
main algorithm for prefix stemming creates lists of
words from each surah. If words in the list do not
exist in stop-word list then prefixes are removed. The
accuracy of this algorithm is 99.6% for prefix
stemming and 97% for postfix stemming. An
interesting stemming approach is proposed by Paik
and Parui (2008), which presents a general analysis of
Indian languages. With respect to the occurrences of
consonants and vowels, characters are divided into
three categories. Different equivalence classes are
made of all the words in the lexicon using the match
of prefix of an already defined length. This technique
is used for Bengali2, Hindi and Marathi languages. A
rule-based stemming algorithm is proposed for
Persian language by Sharifloo and Shamsfard (2008),
which uses bottom up approach for stemming. The
algorithm identifies substring (core) of words which
are derived from some stem and then reassembles
these cores with the help of some rules. Morpheme
clusters are used in rule matching procedure. An anti-
rule procedure is also employed to enhance the
accuracy. The algorithm gives 90.1 % accuracy.
Besides rule-based stemmers there are a number of
statistical stemmers for different languages. Croft and
Xu provide two methods for stemming i.e. Corpus-
Specific Stemming and Query-Specific Stemming
(Croft and Xu 1995). Corpus-Specific Stemming
gathers unique words from the corpus, makes
equivalence classes, and after some statistical
calculations and reclassification makes a dictionary.
Query-Based Stemming utilizes dictionary that is
created by Corpus-Based Stemming. Thus the usual
process of stemming is replaced with dictionary
lookup. Kumar and Siddiqui (2008) propose an
algorithm for Hindi stemmer which calculates n-
grams of the word of length l. These n-grams are
treated as postfixes. The algorithm calculates
probabilities of stem and postfix. The combination of
stem and postfix with highest probability is selected.
The algorithm achieves 89.9% accuracy. Santosh
et.al. (2007) presents three statistical techniques for
stemming Telugu language. In the first technique the
word is divided into prefix and postfix. Then scores
are calculated on the basis of frequency of prefix,
length of prefix, frequency of postfix, and length of
postfix. The accuracy of this approach is 70.8%. The
second technique is based on n-grams. Words are
clustered using n-grams. Within the cluster a smallest
word is declared as the stem of the word. The
algorithm gives 65.4% accuracy. In the third
approach a successive verity is calculated for each
</bodyText>
<footnote confidence="0.387718">
2 Also see Islam et al. (2007) for Bengali stemming
</footnote>
<bodyText confidence="0.999544043478261">
word’s prefix. This approach increases accuracy to
74.5%.
Looking at various techniques, they can generally
be divided into rule based or statistical methods. Rule
based methods may require cyclical application of
rules. Stem and/or affix look-ups are needed for the
rules and may be enhanced by maintaining a lexicon.
Statistical stemmers are dependent on corpus size,
and their performance is influenced by morphological
features of a language. Morphologically richer
languages require deeper linguistic analysis for better
stemming. Three different statistical approaches for
stemming Telugu (Kumar and Murthy 2007) words
reveal very low accuracy as the language is rich in
morphology. On the other hand rule-based techniques
when applied to morphologically rich languages
reveal accuracy up to 99.6% (Thabet 2004). Like
other South Asian languages, Urdu is also
morphologically rich. Therefore, the current work
uses a rule based approach with a variation from
lexical look-up, to develop a stemmer for Urdu. The
next sections discuss the details of development and
testing results of this stemmer.
</bodyText>
<sectionHeader confidence="0.913218" genericHeader="method">
3. Corpus Collection
</sectionHeader>
<bodyText confidence="0.9999085">
An important phase of developing Assas-Band is
corpus collection. For this four different lexica and
corpora3: C1 (Sajjad 2007), C24, C3 (Online Urdu
Dictionary, available at www.crulp.org/oud) and C4
(Ijaz and Hussain 2007) are used for analysis and
testing. Furthermore, prefix and postfix lists5 are also
used during the analysis. The summary of each of the
resources is given in table 1.
</bodyText>
<tableCaption confidence="0.995122">
Table 1: Corpora Words Statistics
</tableCaption>
<table confidence="0.997243333333333">
Corpus Total No. of Unique
Words Words
C1 63,298 10,604
C2 96,890 7,506
C3 149,486 149,477
C4 19,296,846 50,000
</table>
<sectionHeader confidence="0.989959" genericHeader="method">
4. Methodology
</sectionHeader>
<bodyText confidence="0.999575166666667">
The proposed technique uses some conventions
for the Urdu stemmer Assas-Band. The stem returned
by this system is the meaningful root e.g. the stem of
U �SiI larkiyan (girls) is 4�I larki (girl) and not the
,.SSI larak (boy/girl-hood; not a surface from). It also
maintains distinction between the masculine and
</bodyText>
<footnote confidence="0.986287">
3 Available from CRULP (www.crulp.org)
4 Unpublished, internally developed by CRULP
5 Internally developed at CRULP
</footnote>
<page confidence="0.999221">
41
</page>
<bodyText confidence="0.960322307692308">
feminine forms of the stem. Assas-Band gives the
stem ŷN larka (boy) for word ںLN larkon (boys) and
stem t5N larki (girl) for ںYLN larkiyan (girls). The
reason for maintaining the gender difference is its
usability for other tasks in Urdu, e.g. machine
translation, automatic diacritization etc. The word
can easily be converted to underlying stem (e.g. کN
larak (boy/girl-hood)), if needed.
Assas-Band is trained to work with Urdu words,
though it can also process foreign words, e.g.
Persian, Arabic and English words, to a limited
extent. Proper nouns are considered stems, though
only those are handled which appear in the corpora.
</bodyText>
<figureCaption confidence="0.993294">
Figure 1: Flow Chart for the Stemming Process
</figureCaption>
<bodyText confidence="0.999619">
An Urdu word is composed of a sequence of
prefixes, stem and postfixes. A word can be divided
into (Prefix)-Stem-(Postfix). Assas-Band extracts
Stem from the given word, and then converts it to
surface form, as per requirement. The algorithm of
the system is as follows. First the prefix (if it exists)
is removed from the word. This returns the Stem-
(Postfix) sequence. Then postfix (if it exists) is
removed and Stem is extracted. The post-processing
step (if required) is performed at the end to generate
the surface form.
However, while applying affix rules for any
word, the algorithm checks for exceptional cases and
applies the affix stripping rules only if the exceptional
cases are not found. This is different from other
methods which first strip and then repair.
The algorithm for Assas-Band is given in Figure
1 and explained in more detail below.
Prefix Extraction: To remove the prefix from
the word, first it is checked whether the input word
exists in the Prefix-Global-Exceptional-List (PrGEL).
If it exists in PrGEL, then it means that the word has
an initial string of letters which matches a prefix but
is part of the stem and thus should not be stripped. If
the word does not exist in PrGEL, then prefix rules
list is looked up. If an applicable prefix is found,
starting from longest matching prefix to shorter
prefix, appropriate rule is applied to separate prefix
from stem-postfix. Both parts of the word are retained
for further processing and output.
Postfix Extraction: This process separates the
postfix from word and performs the post-processing
step, if required, for generating the surface form.
First the remaining Stem-(Postfix) is looked up in
a general Postfix-Global-Exceptional-List (PoGEL).
If the word exists in the list, then it is marked as the
stem. If the word does not exist in this list, it indicates
that a possible postfix is attached. Postfix matching is
then performed. The candidate postfix rules are
sorted in descending order according to the postfix
length. In addition, a Postfix-Rule-Exception-List
(PoREL) is also maintained for each postfix. The
first applicable postfix from the list is taken and it is
checked if the word to be stemmed exists in PoREL.
If the word does not exist in PoREL, then the current
postfix rule is applied and the Stem and Postfix are
extracted. If the word exists in the PoREL then the
current postfix rule is not applied and the next postfix
rule is considered. This process is repeated for all
candidate postfix rules, until a rule is applied or the
list is exhausted. In both cases the resultant word is
marked as Stem.
A complete list of prefixes and postfixes are
derived by analyzing various lexica and corpora (and
using grammar books). In addition, complete rule
exception list for each postfix (PoREL), complete
general exception list for prefixes PrGEL and general
exception list for postfixes PoGEL are developed
using C1, C2, C3 and C4. PrGEL and PoGEL are
also later extended to include all stems generated
through this system.
After applying prefix and postfix rules, post
processing is performed to create the surface form of
the stem. The stem is looked up in the Add-Character-
Lists (ACL). There are only five lists, maintained for
each of the following letter(s): = ،ی ،ہ ،ت ،ا (yay-hay,
choti-yah, gol-hay, tay, alif), because only these can
be possibly added. If the stem is listed, the
corresponding letter(s) are appended at the end to
</bodyText>
<page confidence="0.995795">
42
</page>
<bodyText confidence="0.999859428571429">
generate the surface form, else the stem is considered
the surface form.
Though the algorithm is straight forward, to the
lists have been developed manually after repeated
analysis, which has been a very difficult task, as
explained in next section. Some sample words in
these lists are given in the Appendices A and B.
</bodyText>
<sectionHeader confidence="0.935258" genericHeader="method">
5. Analysis Phase
</sectionHeader>
<bodyText confidence="0.999863428571429">
The analysis has been divided into two phases. First
phase involved the extraction of prefixes and
postfixes. The second phase dealt with the
development of Prefix and Postfix Global Exceptional
Lists (PrGEL, PoGEL), Postfix Rule Exceptional
Lists (PoREL) and Add Character Lists (ACL).
These are discussed here.
</bodyText>
<subsectionHeader confidence="0.993578">
5.1. Extraction of Affixes
</subsectionHeader>
<bodyText confidence="0.990745866666667">
C1 and C2 are used for the extraction of affixes.
These corpora are POS tagged. The analysis is
performed on 11,000 high frequency words. The
details of these corpora are given in Table 1. By
looking at each word, prefixes and postfixes are
extracted. Words may only have a prefix e.g. ترD6
bud-surat (ugly), only a postfix, e.g. تار`8 tasawr-
aat (imaginations), or both prefix and postfix, e.g.
t5Aا6 bud-ikhlaq-i (bad manners). After analysis, 40
prefixes and 300 postfixes are extracted. This list is
merged with an earlier list of available postfixes and
prefixes6. A total of 174 prefixes and 712 postfixes
are identified. They are listed in Appendix C. In this
phase, the post-processing rules are also extracted
separately.
</bodyText>
<subsectionHeader confidence="0.99319">
5.2. Extraction of Exception and Word Lists
</subsectionHeader>
<bodyText confidence="0.956709">
The following lists are used to improve the
accuracy of Assas-Band.
</bodyText>
<listItem confidence="0.960047">
1. Prefix and Postfix Global Exceptional Lists
(PrGEL, PoGEL)
2. Postfix Rule Exceptional List (PoREL) for each
postfix
3. Add Character List (ACL) for each letter/sequence
The second phase of analysis is performed to
generate these lists. This analysis is based on C3.
</listItem>
<bodyText confidence="0.91706">
Development of PrGEL: The PrGEL contains
all those words from which a prefix cannot be
extracted. The list contains words with first few
letters which match a prefix but do not contain this
prefix, e.g. 5;6 bandh-ay (tied). This word exists in
PrGEL to ensure that the prefix 6 ba (with) is not
</bodyText>
<sectionHeader confidence="0.405433" genericHeader="method">
6 Internally developed at CRULP
</sectionHeader>
<bodyText confidence="0.99649393877551">
removed to give invalid stem 5; ndhay. This single
list is maintained globally for all prefixes.
Development of PoGEL: There are also many
words which do not contain any postfix but their final
few letters may match with one. If they are not
identified and prevented from postfix removal
process, they may result in erroneous invalid stems.
For example, tŲ8ý hathi (elephant) may be truncated
to 8ýhath (hand), which is incorrect removal of the
postfix ی (letter choti-yay). All such words are kept in
the PoGEL, and considered as a stem. This single list
is maintained globally for all the postfixes.
Rule Exceptional Lists: Candidate postfixes are
applied in descending order of length. For example,
for the word ںYT^6 bastiyan (towns), the following
postfixes can be applied: ںYƉ tiyan, ں= yan, ںا aan
and ں noon-gunna.
First, if the maximal length postfix matches, it is
stripped. However, there are cases, when there is a
match, but the current postfix should not be detached
(a shorter postfix needs to be detached). In this case a
postfix specific list is needed to list the exceptions to
ensure preventing misapplication of the longer
postfix. For this situation PoREL is maintained for
each postfix separately. So for ںYT^6 bastiyan
(towns), first the maximum length postfix ںYƉ tiyan is
matched. However, this creates the stem y6 bas (bus)
which is incorrect. Thus, ںYT^6 bastiyan (towns) is
stored in the PrREL of ںYƉ tiyan. Due to this, this
postfix is not extracted and the next longest postfix
rule is applied. Even in this case nonsense stem p^6
bast is generated. Thus, ںYT^6 bastiyan (towns) is
also stored in the PrREL of postfix ں= yan. Next the
postfix ںا an is applied. This yields t5^6 basti (town),
which is correct. This checking and PrREL
development process is manually repeated for all the
words in the corpus.
Add Character Lists: During second phase the
ACLs (already developed in the first phase) are
updated against each of the five possible letter
sequences, i.e. = 4ہ 4ی 4 ت 4ا, to generate correct surface
forms. For example, when postfix t5 gi is removed
from t5;ز zindagi (life), it creates the stem ;ز zind,
which is not a surface form. The letter ہ hay has to be
appended at the end to produce the correct surface
form ہ;ز zinda (alive). So ;ز zind is stored in the
ACL of letter ہ. In the same way the lists are
developed and maintained for the five letters
separately. After applying a particular postfix rule on
</bodyText>
<page confidence="0.999511">
43
</page>
<bodyText confidence="0.997996428571429">
the word, the result is checked in each ACL. If the
string is found in any of the lists then respective
character is attached at the end.
Instead of manually doing all the work, the process is
automated using an online Urdu dictionary (OUD)
(available at www.crulp.org/oud) using the following
algorithm.
</bodyText>
<listItem confidence="0.9031322">
1. Take a word from corpus.
2. Generate all applicable rules.
3. Sort all rules in descending order according to the
maximum length of each.
4. Extract upper- most rule from the rules list.
5. Apply extracted rule on the word. Check
remaining word’s existence in the dictionary.
a. If remaining word exists in the dictionary, store
that original word in the respective rule’s Stem
List and stop the loop.
b. Otherwise store original word in the Rule
Exceptional List of the respective rule and go to
Step 4 for the next rule.
6. Repeat steps 4 and 5 until
a. Stop condition (5a) occurs, or
b. All the generated rules have been traversed.
7. If termination of the loop is due to step 6b, then
the word is stored in the Global Exceptional List
which is universal for all the rules.
8. Repeat step 1-7 for all the words in the corpus.
</listItem>
<bodyText confidence="0.999905">
The above algorithm is first run for prefixes. Once a
complete manual check is performed on the results,
the same algorithm is applied for the postfixes.
</bodyText>
<sectionHeader confidence="0.99151" genericHeader="method">
6. Manual Corrections
</sectionHeader>
<bodyText confidence="0.999612321428571">
Manual inspection is needed to fix the errors
generated by the automated system. The stem list is
manually scanned to identify real-word errors, i.e. the
stemming is incorrect but results in a valid word. For
example when یر ri postfix is applied to the word
یL9 tokri (basket), the word ک9 tok (stop) is
obtained which exists in the dictionary but is incorrect
stemming. The inspection is also needed to ensure
that the distinction between the masculine and
feminine forms of a word is maintained. As discussed
the gender distinction is kept to ensure better use in
other applications.
Postfix Rule Exceptional List is scanned
manually to check for any missing entries (in case the
lexicon contains incomplete information about a
word) or spurious entries (in case a word is not in the
lexicon). Similarly, the process is also useful in
identifying additional missing prefixes and postfixes.
For example, the word ںؤ^;آ aansuon (tears) is
found in the Exceptional List during manual analysis,
because the postfix ںؤ on was not initially identified.
Thus, the algorithm applied the postfix ں n, leaving
the incorrect stem ؤ^;آ aansuo. This was
(obviously) not found in OUD dictionary, so it was
placed in PoGEL. By manually scanning each of the
words in this list, new postfix was found, which
created the correct stem ^;آ aansu (tear). ACL is
also updated by this manual analysis.
</bodyText>
<sectionHeader confidence="0.659156" genericHeader="method">
7. Testing
</sectionHeader>
<bodyText confidence="0.99053875">
The test results are given in this section.
Testing Phase 1: The corpora C1 and C2 are used
which have combined 11,339 unique words. The
following table summarizes the testing results.
</bodyText>
<tableCaption confidence="0.967064">
Table 2: Initial Testing Results
</tableCaption>
<table confidence="0.998647777777778">
Testing Results Values
Total Number of tested words 11339
Accurately Stemmed 7241
Incorrect Stemming 4098
Accuracy Rate 64%
Inaccurate Add Character 278
Inaccurate Prefix Stripping 754
Inaccurate Postfix Stripping 1006
Errors due to Foreign Words 2107
Number of Times Prefix Rules Applied 1656
Correct 942
Incorrect 714
Number of Times Postfix Rules Applied 5990
Correct 4984
Incorrect 1006
Number of Times Character Added 819
Correct 541
Incorrect 278
</table>
<bodyText confidence="0.995351428571429">
The accuracy of 64% is achieved. Some of the
stems created are not in the lists and are erroneous.
They are created by invalid prefix/postfix removal.
Analysis showed that some prefixes and postfixes
contributed to this error rate because they were
derived from foreign words transliterated in Urdu. For
example ز z postfix is correctly applied to the English
</bodyText>
<page confidence="0.998043">
44
</page>
<bodyText confidence="0.998675">
word L.Ij ladiez (ladies) yielding the stem L.I�� ladie
(lady). But this ; z postfix rule when applied to Urdu
words increases the error rate. Similarly Arabic prefix
لا al (the), which applies to Arabic words correctly
e.g. ()1)71 al-Quran (the Quran), wrongly applies to
Urdu words.
Another reason for error in stemming is
ineffective post-processing due to insufficient words
in the lists. There are also some other sources of
errors which are not directly associated with
stemming but are common for Urdu corpora. Errors
are caused by spelling errors, including space
character related errors (Naseem and Hussain 2007).
There are also encoding normalization issues, which
need to be corrected before string matching. This is
caused by the variation in keyboards.
Testing Phase II: On the basis of previous result
analysis, prefix and postfix rules which are applicable
to only foreign words are removed from the rule lists.
Such rules create errors in Urdu word stemming,
while trying to cater non-essential task of stemming
transliterated foreign words. The foreign words found
in C1 and C2 are stored in global lists i.e. PrGEL and
PoGEL to ensure that they are not processed.
</bodyText>
<tableCaption confidence="0.8652405">
Table 3: Test Results after Removing Foreign
Prefixes and Postfixes Rules
</tableCaption>
<table confidence="0.9987959">
Testing Results Values
Total Number of tested words 10418
Accurately Stemmed 9476
Incorrect Stemming 942
Accuracy Rate 90.96%
Inaccurate Add Character 35
Inaccurate Prefix Stripping 473
Inaccurate Postfix Stripping 469
Errors due to Foreign Words 0
Number of Times Prefix Rules 660
Applied
Correct 187
Incorrect 473
Number of Times Postfix Rules 3445
Applied
Correct 2976
Incorrect 469
Number of Times Character Added 626
Correct 591
Incorrect 35
</table>
<bodyText confidence="0.999807869565217">
As errors from C1 and C2 have been manually
fixed, testing is again performed by using 10,418 high
frequency Urdu words from C4 (Ijaz and Hussain
2007). The summary of testing results is in Table 3.
Table 3 shows that removing foreign language
affixes improves the results significantly. The prefix
error rate is higher than the postfix error rate. In
addition, the ACL has to be more comprehensive.
There are also some errors because some words
require both prefix and postfix to be extracted, but
during stemming, if the prefix is wrongly applied and
a faulty stem is generated, then the postfix is also
incorrectly applied.
Testing Phase III: After analyzing test results of
the second phase, amendments are made in the
algorithm. Following post-processing, the stem
generated is verified in PoGEL. If it does not exist, it
is assumed that wrong rule is applied and thus it is
skipped and the next rule is applied. This is repeated
until the resulting stem is found in PoGEL. By
implementing this methodology, the accuracy is
enhanced from 90.96% to 91.18% for C4 corpus
based word list as shown in Table 4.
</bodyText>
<tableCaption confidence="0.997134">
Table 4: Test Results after Enhancing Algorithm
</tableCaption>
<table confidence="0.997968777777778">
Testing Results Values
Total Number of tested words 10418
Accurately Stemmed 9499
Incorrect Stemming 919
Accuracy Rate 91.18%
Inaccurate Add Character 35
Inaccurate Prefix Stripping 473
Inaccurate Postfix Stripping 446
Errors due to Foreign Words 0
Number of Times Prefix Rules Applied 660
Correct 187
Incorrect 473
Number of Times Postfix Rules Applied 3445
Correct 2999
Incorrect 446
Number of Times Character Added 626
Correct 591
Incorrect 35
</table>
<bodyText confidence="0.990808">
The methodology does not affect prefix removal and
the process of adding characters. The improvement
made by this methodology is only in the accuracy of
</bodyText>
<page confidence="0.997622">
45
</page>
<bodyText confidence="0.9987125">
postfixes because this modification is only performed
on the second phase i.e. extraction of postfixes.
</bodyText>
<sectionHeader confidence="0.801413" genericHeader="method">
8. Conclusion
</sectionHeader>
<bodyText confidence="0.999843533333333">
The current paper presents work performed to
develop an Urdu stemmer. It first removes the prefix,
then the postfix and then adds letter(s) to generate the
surface form of the stem. In the first two steps it uses
exception lists if a prefix and/or postfix can be
applied. A successful lookup bypasses the stripping
process. This is different from lexical or stem look
up in other work which triggers the stripping process.
The current stemming accuracy can be further
improved by making the lists more comprehensive.
ACL should also be maintained against each postfix
for more accuracy. The developed system is
currently being used for various other applications for
Urdu language processing, including automatic
diacritization.
</bodyText>
<sectionHeader confidence="0.99696" genericHeader="method">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.983424">
The work has been partially supported by PAN
Localization Project grant by International
Development Research Center (IDRC) of Canada.
</bodyText>
<sectionHeader confidence="0.998041" genericHeader="method">
References
</sectionHeader>
<reference confidence="0.999749608695652">
Croft, W. B. and Xu, J. 1995. Corpus-Specific Stemming
using Word Form Co-occurrences. In Fourth Annual
Symposium on Document Analysis and Information
Retrieval.
Krovetz, R. 1993. View Morphology as an Inference
Process. In the Proceedings of 5th International
Conference on Research and Development in
Information Retrieval.
Porter, M. 1980. An Algorithm for Suffix Stripping.
Program, 14(3): 130-137.
Thabet, N. 2004. Stemming the Qur’an. In the Proceedings
of the Workshop on Computational Approaches to
Arabic Script-based Languages.
Hussain, Sara. 2004. Finite-State Morphological Analyzer
for Urdu. Unpublished MS thesis, Center for Research
in Urdu Language Processing, National University of
Computer and Emerging Sciences, Pakistan.
Sajjad, H. 2007. Statistical Part-of-Speech for Urdu.
Unpublished MS Thesis, Center for Research in Urdu
Language Processing, National University of Computer
and Emerging Sciences, Pakistan.
Ijaz, M and Hussain, S. 2007. Corpus Based Urdu Lexicon
Development. In the Proceedings of Conference on
Language Technology (CLT07), Pakistan.
Naseem, T., Hussain, S. 2007. Spelling Error Trends in
Urdu. In the Proceedings of Conference on Language
Technology (CLT07), Pakistan.
Kumar, M. S. and Murthy, K. N. 2007. Corpus Based
Statistical Approach for Stemming Telugu. Creation of
Lexical Resources for Indian Language Computing and
Processing (LRIL), C-DAC, Mumbai, India.
Paik, J. H. and Parui, S. K. 2008. A Simple Stemmer for
Inflectional Languages. Forum for Information Retrieval
Evaluation,
Islam, M. Z., Uddin, M. N. and Khan, M. 2007. A Light
Weight Stemmer for Bengali and Its Use in Spelling
Checker. In the Proceedings of 1st Intl. Conf. on Digital
Comm. and Computer, Amman, Jordan.
Sharifloo, A. A. and Shamsfard, M. 2008. A Bottom up
Approach to Persian Stemming. In the Proceedings of
the Third International Joint Conference on Natural
Language Processing. Hyderabad, India.
Kumar, A. and Siddiqui, T. 2008. An Unsupervised Hindi
Stemmer with Heuristics Improvements. In Proceedings
of the Second Workshop on Analytics for Noisy
Unstructured Text Data.
</reference>
<page confidence="0.99983">
46
</page>
<sectionHeader confidence="0.969103" genericHeader="method">
Appendix A
</sectionHeader>
<table confidence="0.8903209375">
A.1 Postfix Rule Exceptional List Samples
Postfix Some Exceptional Words
ت6 تRYL8
5ا 5kj8 , 5Cور ,5 اM, 5اBB
5 5m8,5 ا8,5YOC,5اA,5ż l O,5Ɓ K,5ż = آ
Yý Yý اB,Y ý Ŷا?,YýWƈ&gt;,Yý اL,YýŸ;,Yý اJ ا
A.2 Postfix Global Exception List Samples
Y_6 یوYƈ wj^O رl_O یو ار
نhB ;&lt;J ب&gt; sPذ نِا =ا
TB ار RYB h;? یو@ بTJآ
A.3 Prefix Global Exception List Samples
=Ɔ= 5N Ɔ; ںYƏ; tŮWlO
ں^h = t 5SC; 5WO
5رmh;
pYƌ^h= YƏƆ; ب= ; t5WO
t 5اkP t5Ɔ; راد ; اiWO
</table>
<sectionHeader confidence="0.969484" genericHeader="method">
Appendix B
</sectionHeader>
<subsectionHeader confidence="0.802754">
Add Character List Samples
</subsectionHeader>
<equation confidence="0.988615363636364">
ا Add ت Add
lTƌا = ا + Tƌا تدYK = ت + دYK
ا=ا = ا + = ا pCŷ = ت+شŷ
^=ا = ا+ y= ا p^ُB = ت + yُB
TL = ا + pL = ت +
ت ّC ّC
ی Add ہ Add
t58 =ی + ق8 ہدOزآ = ہ + دOزآ
h=Oا = ہ+ =Oا
ہد TJ ا = ہ + دTJا
ہدOزآ = ہ+ دOزآ
</equation>
<sectionHeader confidence="0.996287" genericHeader="method">
Appendix C
</sectionHeader>
<subsectionHeader confidence="0.915858">
C.1 List of Sample Prefixes
</subsectionHeader>
<table confidence="0.9911420625">
yO n@D 8 د6 O
6 رJ Cا I ;
ySC نا ز; jŶ 7
y7 وڈB WƉ C 5ا6
ہر7 ل6 s6 Yƌیز6
دوز RK ۓا6 D ر;ا
t5 ا9 6ور d6O ;
ک7
N F نآ 6 ادا
t5آ
مارآ دA 7 مد yh=ا
قJO sO YI 6ا 5ور
sPآ z8آ 8 ما ںاM
6ز t5F6 5 یڈ لد
C.2 List of Sample Postfixes
ںYiWýآ ں;ا t5 Ŷ زر&lt;او t5 ا یزB
Yi; یWý pBد =و t5ارآ t5 k;
ں=رو7 ں =رو7 5را = tŮ;ر tţf;
ں=راد6 ںYiYƊ 5ا &lt;او t 5وJ یYi;ا
ںار ں=زا; 5; YJاM t5اB t5;
ں=زB ں ؤ اYƏ 5 ز t5 ادM t5و
ںYƍارآ ں=YA ے زB t5Bر t5m8
ںWhC ںاو 5 ز5آ ی رو7 t5د
ںYB6 YXýŶ 5ا JاM یYOآ t57
ں==ر ں=زا; 5او Oزا t5 ا t5YƇ
ں=M ں YƌYƇ 5 زو;ا t5Y_; ی راد6
ںWL ںYƌ_J 5A =ر t5 TB t5 ا
ں=زرو ںوزو;ا 5Ɓ زOآ یرازآ یرA
ںؤاB ں=6 ےL ^YL یدM t5Ÿ;
ں=رŷ ں^=; œƁ زا; t5و یر?
ںYƌاA ںYƍM ےو زار یWƇ t5WB
ںYƌار ںYCا8 5ا زاد7 t5= Jآ t5_J
</table>
<page confidence="0.996578">
47
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.037516">
<title confidence="0.961607">Affix-Exception-List Based Urdu Stemmer</title>
<author confidence="0.447445">Qurat-ul-Ain</author>
<affiliation confidence="0.804607">Center for Research in Language NUCES,</affiliation>
<email confidence="0.812941">ainie.akram@nu.edu.pk</email>
<author confidence="0.735819">Asma</author>
<affiliation confidence="0.866125">Center for Research in Language NUCES,</affiliation>
<email confidence="0.895567">asma.naseer@nu.edu.pk</email>
<author confidence="0.414412">Sarmad</author>
<affiliation confidence="0.822814333333333">Center for Research in Language NUCES,</affiliation>
<email confidence="0.972596">sarmad.hussain@nu.edu.pk</email>
<abstract confidence="0.991412769230769">Both Inflectional and derivational morphology lead to multiple surface forms of a word. Stemming reduces these forms back to its stem or root, and is a very useful tool for many applications. There has not been any work reported on Urdu stemming. The current work develops an Urdu stemmer or improves the performance using more precise affix based exception lists, instead of the conventional lexical lookup employed for developing stemmers in other languages. Testing shows an accuracy of 91.2%. enhancements are also suggested.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>W B Croft</author>
<author>J Xu</author>
</authors>
<title>Corpus-Specific Stemming using Word Form Co-occurrences.</title>
<date>1995</date>
<booktitle>In Fourth Annual Symposium on Document Analysis and Information Retrieval.</booktitle>
<contexts>
<context position="4106" citStr="Croft and Xu 1995" startWordPosition="602" endWordPosition="605">n (2004). Stemmers may be developed by using either rulebased or statistical approaches. Rule-based stemmers require prior morphological knowledge of the language, while statistical stemmers use corpus to calculate the occurrences of stems and affixes. Both rule-based and statistical stemmers have been developed for a variety of languages. A rule-based stemmer is developed for English by Krovetz (1993) using machine-readable dictionaries. Along with a dictionary, rules for inflectional and derivational morphology are defined. Due to high dependency on dictionary the systems lacks consistency (Croft and Xu 1995). In Porter Stemmer (Porter 1980) the algorithm enforces some terminating conditions of a stem. Until any of the conditions is achieved, it keeps on removing endings of the word iteratively. Thabet has proposed a stemmer that performs stemming of classical Arabic 1 In Urdu Assas means stem and Assas-Band means stemmer 40 Proceedings of the 7th Workshop on Asian Language Resources, ACL-IJCNLP 2009, pages 40–47, Suntec, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP in Quran (Thabet 2004) using stop-word list. The main algorithm for prefix stemming creates lists of words from each surah. If wo</context>
<context position="5957" citStr="Croft and Xu 1995" startWordPosition="894" endWordPosition="897">r Persian language by Sharifloo and Shamsfard (2008), which uses bottom up approach for stemming. The algorithm identifies substring (core) of words which are derived from some stem and then reassembles these cores with the help of some rules. Morpheme clusters are used in rule matching procedure. An antirule procedure is also employed to enhance the accuracy. The algorithm gives 90.1 % accuracy. Besides rule-based stemmers there are a number of statistical stemmers for different languages. Croft and Xu provide two methods for stemming i.e. CorpusSpecific Stemming and Query-Specific Stemming (Croft and Xu 1995). Corpus-Specific Stemming gathers unique words from the corpus, makes equivalence classes, and after some statistical calculations and reclassification makes a dictionary. Query-Based Stemming utilizes dictionary that is created by Corpus-Based Stemming. Thus the usual process of stemming is replaced with dictionary lookup. Kumar and Siddiqui (2008) propose an algorithm for Hindi stemmer which calculates ngrams of the word of length l. These n-grams are treated as postfixes. The algorithm calculates probabilities of stem and postfix. The combination of stem and postfix with highest probabilit</context>
</contexts>
<marker>Croft, Xu, 1995</marker>
<rawString>Croft, W. B. and Xu, J. 1995. Corpus-Specific Stemming using Word Form Co-occurrences. In Fourth Annual Symposium on Document Analysis and Information Retrieval.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Krovetz</author>
</authors>
<title>View Morphology as an Inference Process.</title>
<date>1993</date>
<booktitle>In the Proceedings of 5th International Conference on Research and Development in Information Retrieval.</booktitle>
<contexts>
<context position="3893" citStr="Krovetz (1993)" startWordPosition="575" endWordPosition="576">he nouns show derivational changes into adjectives and nouns. Adjectives show similar agreement changes for number, gender and case. A comprehensive computational analysis of Urdu morphology is given by Hussain (2004). Stemmers may be developed by using either rulebased or statistical approaches. Rule-based stemmers require prior morphological knowledge of the language, while statistical stemmers use corpus to calculate the occurrences of stems and affixes. Both rule-based and statistical stemmers have been developed for a variety of languages. A rule-based stemmer is developed for English by Krovetz (1993) using machine-readable dictionaries. Along with a dictionary, rules for inflectional and derivational morphology are defined. Due to high dependency on dictionary the systems lacks consistency (Croft and Xu 1995). In Porter Stemmer (Porter 1980) the algorithm enforces some terminating conditions of a stem. Until any of the conditions is achieved, it keeps on removing endings of the word iteratively. Thabet has proposed a stemmer that performs stemming of classical Arabic 1 In Urdu Assas means stem and Assas-Band means stemmer 40 Proceedings of the 7th Workshop on Asian Language Resources, ACL</context>
</contexts>
<marker>Krovetz, 1993</marker>
<rawString>Krovetz, R. 1993. View Morphology as an Inference Process. In the Proceedings of 5th International Conference on Research and Development in Information Retrieval.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Porter</author>
</authors>
<title>An Algorithm for Suffix Stripping.</title>
<date>1980</date>
<journal>Program,</journal>
<volume>14</volume>
<issue>3</issue>
<pages>130--137</pages>
<contexts>
<context position="4139" citStr="Porter 1980" startWordPosition="609" endWordPosition="610">using either rulebased or statistical approaches. Rule-based stemmers require prior morphological knowledge of the language, while statistical stemmers use corpus to calculate the occurrences of stems and affixes. Both rule-based and statistical stemmers have been developed for a variety of languages. A rule-based stemmer is developed for English by Krovetz (1993) using machine-readable dictionaries. Along with a dictionary, rules for inflectional and derivational morphology are defined. Due to high dependency on dictionary the systems lacks consistency (Croft and Xu 1995). In Porter Stemmer (Porter 1980) the algorithm enforces some terminating conditions of a stem. Until any of the conditions is achieved, it keeps on removing endings of the word iteratively. Thabet has proposed a stemmer that performs stemming of classical Arabic 1 In Urdu Assas means stem and Assas-Band means stemmer 40 Proceedings of the 7th Workshop on Asian Language Resources, ACL-IJCNLP 2009, pages 40–47, Suntec, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP in Quran (Thabet 2004) using stop-word list. The main algorithm for prefix stemming creates lists of words from each surah. If words in the list do not exist in s</context>
</contexts>
<marker>Porter, 1980</marker>
<rawString>Porter, M. 1980. An Algorithm for Suffix Stripping. Program, 14(3): 130-137.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Thabet</author>
</authors>
<title>Stemming the Qur’an.</title>
<date>2004</date>
<booktitle>In the Proceedings of the Workshop on Computational Approaches to Arabic Script-based Languages.</booktitle>
<contexts>
<context position="4599" citStr="Thabet 2004" startWordPosition="682" endWordPosition="683">vational morphology are defined. Due to high dependency on dictionary the systems lacks consistency (Croft and Xu 1995). In Porter Stemmer (Porter 1980) the algorithm enforces some terminating conditions of a stem. Until any of the conditions is achieved, it keeps on removing endings of the word iteratively. Thabet has proposed a stemmer that performs stemming of classical Arabic 1 In Urdu Assas means stem and Assas-Band means stemmer 40 Proceedings of the 7th Workshop on Asian Language Resources, ACL-IJCNLP 2009, pages 40–47, Suntec, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP in Quran (Thabet 2004) using stop-word list. The main algorithm for prefix stemming creates lists of words from each surah. If words in the list do not exist in stop-word list then prefixes are removed. The accuracy of this algorithm is 99.6% for prefix stemming and 97% for postfix stemming. An interesting stemming approach is proposed by Paik and Parui (2008), which presents a general analysis of Indian languages. With respect to the occurrences of consonants and vowels, characters are divided into three categories. Different equivalence classes are made of all the words in the lexicon using the match of prefix of</context>
<context position="8055" citStr="Thabet 2004" startWordPosition="1210" endWordPosition="1211">ation of rules. Stem and/or affix look-ups are needed for the rules and may be enhanced by maintaining a lexicon. Statistical stemmers are dependent on corpus size, and their performance is influenced by morphological features of a language. Morphologically richer languages require deeper linguistic analysis for better stemming. Three different statistical approaches for stemming Telugu (Kumar and Murthy 2007) words reveal very low accuracy as the language is rich in morphology. On the other hand rule-based techniques when applied to morphologically rich languages reveal accuracy up to 99.6% (Thabet 2004). Like other South Asian languages, Urdu is also morphologically rich. Therefore, the current work uses a rule based approach with a variation from lexical look-up, to develop a stemmer for Urdu. The next sections discuss the details of development and testing results of this stemmer. 3. Corpus Collection An important phase of developing Assas-Band is corpus collection. For this four different lexica and corpora3: C1 (Sajjad 2007), C24, C3 (Online Urdu Dictionary, available at www.crulp.org/oud) and C4 (Ijaz and Hussain 2007) are used for analysis and testing. Furthermore, prefix and postfix l</context>
</contexts>
<marker>Thabet, 2004</marker>
<rawString>Thabet, N. 2004. Stemming the Qur’an. In the Proceedings of the Workshop on Computational Approaches to Arabic Script-based Languages.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sara Hussain</author>
</authors>
<title>Finite-State Morphological Analyzer for Urdu. Unpublished MS thesis,</title>
<date>2004</date>
<institution>Center for Research in Urdu Language Processing, National University of Computer and Emerging Sciences, Pakistan.</institution>
<contexts>
<context position="3496" citStr="Hussain (2004)" startWordPosition="518" endWordPosition="519"> different inflections for infinitive, past, non-past, habitual and imperative forms. All these forms (twenty in total) for a regular verb are duplicated for transitive and causative (di-transitive) forms, thus giving a total of more than sixty inflected variations. Urdu nouns also show agreement for number, gender and case. In addition, they show diminutive and vocative affixation. Moreover, the nouns show derivational changes into adjectives and nouns. Adjectives show similar agreement changes for number, gender and case. A comprehensive computational analysis of Urdu morphology is given by Hussain (2004). Stemmers may be developed by using either rulebased or statistical approaches. Rule-based stemmers require prior morphological knowledge of the language, while statistical stemmers use corpus to calculate the occurrences of stems and affixes. Both rule-based and statistical stemmers have been developed for a variety of languages. A rule-based stemmer is developed for English by Krovetz (1993) using machine-readable dictionaries. Along with a dictionary, rules for inflectional and derivational morphology are defined. Due to high dependency on dictionary the systems lacks consistency (Croft an</context>
</contexts>
<marker>Hussain, 2004</marker>
<rawString>Hussain, Sara. 2004. Finite-State Morphological Analyzer for Urdu. Unpublished MS thesis, Center for Research in Urdu Language Processing, National University of Computer and Emerging Sciences, Pakistan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Sajjad</author>
</authors>
<title>Statistical Part-of-Speech for Urdu. Unpublished MS Thesis,</title>
<date>2007</date>
<institution>Center for Research in Urdu Language Processing, National University of Computer and Emerging Sciences, Pakistan.</institution>
<contexts>
<context position="8489" citStr="Sajjad 2007" startWordPosition="1277" endWordPosition="1278">w accuracy as the language is rich in morphology. On the other hand rule-based techniques when applied to morphologically rich languages reveal accuracy up to 99.6% (Thabet 2004). Like other South Asian languages, Urdu is also morphologically rich. Therefore, the current work uses a rule based approach with a variation from lexical look-up, to develop a stemmer for Urdu. The next sections discuss the details of development and testing results of this stemmer. 3. Corpus Collection An important phase of developing Assas-Band is corpus collection. For this four different lexica and corpora3: C1 (Sajjad 2007), C24, C3 (Online Urdu Dictionary, available at www.crulp.org/oud) and C4 (Ijaz and Hussain 2007) are used for analysis and testing. Furthermore, prefix and postfix lists5 are also used during the analysis. The summary of each of the resources is given in table 1. Table 1: Corpora Words Statistics Corpus Total No. of Unique Words Words C1 63,298 10,604 C2 96,890 7,506 C3 149,486 149,477 C4 19,296,846 50,000 4. Methodology The proposed technique uses some conventions for the Urdu stemmer Assas-Band. The stem returned by this system is the meaningful root e.g. the stem of U �SiI larkiyan (girls)</context>
</contexts>
<marker>Sajjad, 2007</marker>
<rawString>Sajjad, H. 2007. Statistical Part-of-Speech for Urdu. Unpublished MS Thesis, Center for Research in Urdu Language Processing, National University of Computer and Emerging Sciences, Pakistan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Ijaz</author>
<author>S Hussain</author>
</authors>
<title>Corpus Based Urdu Lexicon Development.</title>
<date>2007</date>
<booktitle>In the Proceedings of Conference on Language Technology (CLT07),</booktitle>
<contexts>
<context position="8586" citStr="Ijaz and Hussain 2007" startWordPosition="1289" endWordPosition="1292">es when applied to morphologically rich languages reveal accuracy up to 99.6% (Thabet 2004). Like other South Asian languages, Urdu is also morphologically rich. Therefore, the current work uses a rule based approach with a variation from lexical look-up, to develop a stemmer for Urdu. The next sections discuss the details of development and testing results of this stemmer. 3. Corpus Collection An important phase of developing Assas-Band is corpus collection. For this four different lexica and corpora3: C1 (Sajjad 2007), C24, C3 (Online Urdu Dictionary, available at www.crulp.org/oud) and C4 (Ijaz and Hussain 2007) are used for analysis and testing. Furthermore, prefix and postfix lists5 are also used during the analysis. The summary of each of the resources is given in table 1. Table 1: Corpora Words Statistics Corpus Total No. of Unique Words Words C1 63,298 10,604 C2 96,890 7,506 C3 149,486 149,477 C4 19,296,846 50,000 4. Methodology The proposed technique uses some conventions for the Urdu stemmer Assas-Band. The stem returned by this system is the meaningful root e.g. the stem of U �SiI larkiyan (girls) is 4�I larki (girl) and not the ,.SSI larak (boy/girl-hood; not a surface from). It also maintai</context>
<context position="23684" citStr="Ijaz and Hussain 2007" startWordPosition="3793" endWordPosition="3796">xes and Postfixes Rules Testing Results Values Total Number of tested words 10418 Accurately Stemmed 9476 Incorrect Stemming 942 Accuracy Rate 90.96% Inaccurate Add Character 35 Inaccurate Prefix Stripping 473 Inaccurate Postfix Stripping 469 Errors due to Foreign Words 0 Number of Times Prefix Rules 660 Applied Correct 187 Incorrect 473 Number of Times Postfix Rules 3445 Applied Correct 2976 Incorrect 469 Number of Times Character Added 626 Correct 591 Incorrect 35 As errors from C1 and C2 have been manually fixed, testing is again performed by using 10,418 high frequency Urdu words from C4 (Ijaz and Hussain 2007). The summary of testing results is in Table 3. Table 3 shows that removing foreign language affixes improves the results significantly. The prefix error rate is higher than the postfix error rate. In addition, the ACL has to be more comprehensive. There are also some errors because some words require both prefix and postfix to be extracted, but during stemming, if the prefix is wrongly applied and a faulty stem is generated, then the postfix is also incorrectly applied. Testing Phase III: After analyzing test results of the second phase, amendments are made in the algorithm. Following post-pr</context>
</contexts>
<marker>Ijaz, Hussain, 2007</marker>
<rawString>Ijaz, M and Hussain, S. 2007. Corpus Based Urdu Lexicon Development. In the Proceedings of Conference on Language Technology (CLT07), Pakistan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Naseem</author>
<author>S Hussain</author>
</authors>
<title>Spelling Error Trends in Urdu.</title>
<date>2007</date>
<booktitle>In the Proceedings of Conference on Language Technology (CLT07),</booktitle>
<contexts>
<context position="22451" citStr="Naseem and Hussain 2007" startWordPosition="3595" endWordPosition="3598">4 word L.Ij ladiez (ladies) yielding the stem L.I�� ladie (lady). But this ; z postfix rule when applied to Urdu words increases the error rate. Similarly Arabic prefix لا al (the), which applies to Arabic words correctly e.g. ()1)71 al-Quran (the Quran), wrongly applies to Urdu words. Another reason for error in stemming is ineffective post-processing due to insufficient words in the lists. There are also some other sources of errors which are not directly associated with stemming but are common for Urdu corpora. Errors are caused by spelling errors, including space character related errors (Naseem and Hussain 2007). There are also encoding normalization issues, which need to be corrected before string matching. This is caused by the variation in keyboards. Testing Phase II: On the basis of previous result analysis, prefix and postfix rules which are applicable to only foreign words are removed from the rule lists. Such rules create errors in Urdu word stemming, while trying to cater non-essential task of stemming transliterated foreign words. The foreign words found in C1 and C2 are stored in global lists i.e. PrGEL and PoGEL to ensure that they are not processed. Table 3: Test Results after Removing Fo</context>
</contexts>
<marker>Naseem, Hussain, 2007</marker>
<rawString>Naseem, T., Hussain, S. 2007. Spelling Error Trends in Urdu. In the Proceedings of Conference on Language Technology (CLT07), Pakistan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M S Kumar</author>
<author>K N Murthy</author>
</authors>
<title>Corpus Based Statistical Approach for Stemming Telugu. Creation of Lexical Resources for Indian Language Computing and Processing (LRIL), C-DAC,</title>
<date>2007</date>
<location>Mumbai, India.</location>
<contexts>
<context position="7856" citStr="Kumar and Murthy 2007" startWordPosition="1177" endWordPosition="1180">ing word’s prefix. This approach increases accuracy to 74.5%. Looking at various techniques, they can generally be divided into rule based or statistical methods. Rule based methods may require cyclical application of rules. Stem and/or affix look-ups are needed for the rules and may be enhanced by maintaining a lexicon. Statistical stemmers are dependent on corpus size, and their performance is influenced by morphological features of a language. Morphologically richer languages require deeper linguistic analysis for better stemming. Three different statistical approaches for stemming Telugu (Kumar and Murthy 2007) words reveal very low accuracy as the language is rich in morphology. On the other hand rule-based techniques when applied to morphologically rich languages reveal accuracy up to 99.6% (Thabet 2004). Like other South Asian languages, Urdu is also morphologically rich. Therefore, the current work uses a rule based approach with a variation from lexical look-up, to develop a stemmer for Urdu. The next sections discuss the details of development and testing results of this stemmer. 3. Corpus Collection An important phase of developing Assas-Band is corpus collection. For this four different lexi</context>
</contexts>
<marker>Kumar, Murthy, 2007</marker>
<rawString>Kumar, M. S. and Murthy, K. N. 2007. Corpus Based Statistical Approach for Stemming Telugu. Creation of Lexical Resources for Indian Language Computing and Processing (LRIL), C-DAC, Mumbai, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J H Paik</author>
<author>S K Parui</author>
</authors>
<title>A Simple Stemmer for Inflectional Languages. Forum for Information Retrieval Evaluation,</title>
<date>2008</date>
<contexts>
<context position="4939" citStr="Paik and Parui (2008)" startWordPosition="737" endWordPosition="740"> stemmer that performs stemming of classical Arabic 1 In Urdu Assas means stem and Assas-Band means stemmer 40 Proceedings of the 7th Workshop on Asian Language Resources, ACL-IJCNLP 2009, pages 40–47, Suntec, Singapore, 6-7 August 2009. c�2009 ACL and AFNLP in Quran (Thabet 2004) using stop-word list. The main algorithm for prefix stemming creates lists of words from each surah. If words in the list do not exist in stop-word list then prefixes are removed. The accuracy of this algorithm is 99.6% for prefix stemming and 97% for postfix stemming. An interesting stemming approach is proposed by Paik and Parui (2008), which presents a general analysis of Indian languages. With respect to the occurrences of consonants and vowels, characters are divided into three categories. Different equivalence classes are made of all the words in the lexicon using the match of prefix of an already defined length. This technique is used for Bengali2, Hindi and Marathi languages. A rule-based stemming algorithm is proposed for Persian language by Sharifloo and Shamsfard (2008), which uses bottom up approach for stemming. The algorithm identifies substring (core) of words which are derived from some stem and then reassembl</context>
</contexts>
<marker>Paik, Parui, 2008</marker>
<rawString>Paik, J. H. and Parui, S. K. 2008. A Simple Stemmer for Inflectional Languages. Forum for Information Retrieval Evaluation,</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Z Islam</author>
<author>M N Uddin</author>
<author>M Khan</author>
</authors>
<title>A Light Weight Stemmer for Bengali and Its Use in Spelling Checker.</title>
<date>2007</date>
<booktitle>In the Proceedings of 1st Intl. Conf. on Digital Comm. and Computer, Amman,</booktitle>
<contexts>
<context position="7216" citStr="Islam et al. (2007)" startWordPosition="1086" endWordPosition="1089">.9% accuracy. Santosh et.al. (2007) presents three statistical techniques for stemming Telugu language. In the first technique the word is divided into prefix and postfix. Then scores are calculated on the basis of frequency of prefix, length of prefix, frequency of postfix, and length of postfix. The accuracy of this approach is 70.8%. The second technique is based on n-grams. Words are clustered using n-grams. Within the cluster a smallest word is declared as the stem of the word. The algorithm gives 65.4% accuracy. In the third approach a successive verity is calculated for each 2 Also see Islam et al. (2007) for Bengali stemming word’s prefix. This approach increases accuracy to 74.5%. Looking at various techniques, they can generally be divided into rule based or statistical methods. Rule based methods may require cyclical application of rules. Stem and/or affix look-ups are needed for the rules and may be enhanced by maintaining a lexicon. Statistical stemmers are dependent on corpus size, and their performance is influenced by morphological features of a language. Morphologically richer languages require deeper linguistic analysis for better stemming. Three different statistical approaches for</context>
</contexts>
<marker>Islam, Uddin, Khan, 2007</marker>
<rawString>Islam, M. Z., Uddin, M. N. and Khan, M. 2007. A Light Weight Stemmer for Bengali and Its Use in Spelling Checker. In the Proceedings of 1st Intl. Conf. on Digital Comm. and Computer, Amman, Jordan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A A Sharifloo</author>
<author>M Shamsfard</author>
</authors>
<title>A Bottom up Approach to Persian Stemming.</title>
<date>2008</date>
<booktitle>In the Proceedings of the Third International Joint Conference on Natural Language Processing.</booktitle>
<location>Hyderabad, India.</location>
<contexts>
<context position="5391" citStr="Sharifloo and Shamsfard (2008)" startWordPosition="806" endWordPosition="809">fixes are removed. The accuracy of this algorithm is 99.6% for prefix stemming and 97% for postfix stemming. An interesting stemming approach is proposed by Paik and Parui (2008), which presents a general analysis of Indian languages. With respect to the occurrences of consonants and vowels, characters are divided into three categories. Different equivalence classes are made of all the words in the lexicon using the match of prefix of an already defined length. This technique is used for Bengali2, Hindi and Marathi languages. A rule-based stemming algorithm is proposed for Persian language by Sharifloo and Shamsfard (2008), which uses bottom up approach for stemming. The algorithm identifies substring (core) of words which are derived from some stem and then reassembles these cores with the help of some rules. Morpheme clusters are used in rule matching procedure. An antirule procedure is also employed to enhance the accuracy. The algorithm gives 90.1 % accuracy. Besides rule-based stemmers there are a number of statistical stemmers for different languages. Croft and Xu provide two methods for stemming i.e. CorpusSpecific Stemming and Query-Specific Stemming (Croft and Xu 1995). Corpus-Specific Stemming gathers</context>
</contexts>
<marker>Sharifloo, Shamsfard, 2008</marker>
<rawString>Sharifloo, A. A. and Shamsfard, M. 2008. A Bottom up Approach to Persian Stemming. In the Proceedings of the Third International Joint Conference on Natural Language Processing. Hyderabad, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Kumar</author>
<author>T Siddiqui</author>
</authors>
<title>An Unsupervised Hindi Stemmer with Heuristics Improvements.</title>
<date>2008</date>
<booktitle>In Proceedings of the Second Workshop on Analytics for Noisy Unstructured Text Data.</booktitle>
<contexts>
<context position="6309" citStr="Kumar and Siddiqui (2008)" startWordPosition="940" endWordPosition="943">nce the accuracy. The algorithm gives 90.1 % accuracy. Besides rule-based stemmers there are a number of statistical stemmers for different languages. Croft and Xu provide two methods for stemming i.e. CorpusSpecific Stemming and Query-Specific Stemming (Croft and Xu 1995). Corpus-Specific Stemming gathers unique words from the corpus, makes equivalence classes, and after some statistical calculations and reclassification makes a dictionary. Query-Based Stemming utilizes dictionary that is created by Corpus-Based Stemming. Thus the usual process of stemming is replaced with dictionary lookup. Kumar and Siddiqui (2008) propose an algorithm for Hindi stemmer which calculates ngrams of the word of length l. These n-grams are treated as postfixes. The algorithm calculates probabilities of stem and postfix. The combination of stem and postfix with highest probability is selected. The algorithm achieves 89.9% accuracy. Santosh et.al. (2007) presents three statistical techniques for stemming Telugu language. In the first technique the word is divided into prefix and postfix. Then scores are calculated on the basis of frequency of prefix, length of prefix, frequency of postfix, and length of postfix. The accuracy </context>
</contexts>
<marker>Kumar, Siddiqui, 2008</marker>
<rawString>Kumar, A. and Siddiqui, T. 2008. An Unsupervised Hindi Stemmer with Heuristics Improvements. In Proceedings of the Second Workshop on Analytics for Noisy Unstructured Text Data.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>