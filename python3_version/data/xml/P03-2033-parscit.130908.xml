<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000031">
<title confidence="0.999228">
A Debug Tool for Practical Grammar Development
</title>
<author confidence="0.994969">
Akane Yakushiji† Yuka Tateisi†$ Yusuke Miyao† Naoki Yoshinaga† Jun’ichi Tsujii†$
</author>
<affiliation confidence="0.999315">
†Department of Computer Science, University of Tokyo
</affiliation>
<address confidence="0.802654">
Hongo 7-3-1, Bunkyo-ku, Tokyo 113-0033 JAPAN
$CREST, JST (Japan Science and Technology Corporation)
Honcho 4-1-8, Kawaguchi-shi, Saitama 332-0012 JAPAN
</address>
<email confidence="0.999158">
{akane,yucca,yusuke,yoshinag,tsujii}@is.s.u-tokyo.ac.jp
</email>
<sectionHeader confidence="0.995641" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999970642857143">
We have developed willex, a tool that
helps grammar developers to work effi-
ciently by using annotated corpora and
recording parsing errors. Willex has two
major new functions. First, it decreases
ambiguity of the parsing results by com-
paring them to an annotated corpus and
removing wrong partial results both au-
tomatically and manually. Second, willex
accumulates parsing errors as data for the
developers to clarify the defects of the
grammar statistically. We applied willex
to a large-scale HPSG-style grammar as
an example.
</bodyText>
<sectionHeader confidence="0.999133" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.993634830508475">
There is an increasing need for syntactical parsers
for practical usages, such as information extrac-
tion. For example, Yakushiji et al. (2001) extracted
argument structures from biomedical papers using
a parser based on XHPSG (Tateisi et al., 1998),
which is a large-scale HPSG. Although large-scale
and general-purpose grammars have been devel-
oped, they have a problem of limited coverage.
The limits are derived from deficiencies of gram-
mars themselves. For example, XHPSG cannot treat
coordinations of verbs (ex. `Molybdate slowed but
did not prevent the conversion.”) nor reduced rel-
atives (ex. `Rb mutants derived from patients with
retinoblastoma.”). Finding these grammar defects
and modifying them require tremendous human ef-
fort.
Hence, we have developed willex that helps to im-
prove the general-purpose grammars. Willex has two
major functions. First, it reduces a human workload
to improve the general-purpose grammar through
using language intuition encoded in syntactically
tagged corpora in XML format. Second, it records
data of grammar defects to allow developers to have
a whole picture of parsing errors found in the target
corpora to save debugging time and effort by priori-
tizing them.
2 What Is the Ideal Grammar Debugging?
There are already other grammar developing tools,
such as a grammar writer of XTAG (Paroubek et al.,
1992), ALEP (Schmidt et al., 1996), ConTroll (G¨otz
and Meurers, 1997), a tool by Nara Institute of Sci-
ence and Technology (Miyata et al., 1999), and [incr
tsdbo)] (Oepen et al., 2002). But these tools have
following problems; they largely depend on human
debuggers’ language intuition, they do not help users
to handle large amount of parsing results effectively,
and they let human debuggers correct the bugs one
after another manually and locally.
To cope with these shortcomings, willex proposes
an alternative method for more efficient debugging
process.
The workflow of the conventional grammar devel-
oping tools and willex are different in the following
ways. With the conventional tools, human debug-
gers must check each sentence to find out grammar
defects and modify them one by one. On the other
hand, with willex human debuggers check sentences
that are tagged with syntactical structure, one by
one, find grammar defects, and record them, while
willex collects the whole grammar defect records.
Then human debuggers modify the found grammar
defects. This process allows human debuggers to
make priority over defects that appear more fre-
quently in the corpora, or defects that are more crit-
ical for purposes of syntactical parsing. Indeed, it
is possible for human debuggers using the conven-
tional tools to collect and modify the defects but
willex saves the trouble of human debuggers to col-
lect defects to modify them more efficiently.
</bodyText>
<sectionHeader confidence="0.861586" genericHeader="method">
3 Functions of willex
</sectionHeader>
<bodyText confidence="0.999983">
To create the new debugging tool, we have extended
will (Imai et al., 1998). Will is a browser of parsing
results of grammars based on feature structures. Will
and willex are implemented in JAVA.
</bodyText>
<subsectionHeader confidence="0.999116">
3.1 Using XML Tagged Corpora
</subsectionHeader>
<bodyText confidence="0.999912888888889">
Willex uses sentence boundaries, word chunking,
and POSs/labels encoded in XML tagged corpora.
First, with the information of sentence boundaries
and word chunking, ambiguity of sentences is re-
duced, and ambiguity at parsing phase is also re-
duced. A parser connected to willex is assumed to
produce only results consistent with the information.
An example is shown in Figure 1 (&lt;su&gt; is a senten-
tial tag and &lt;np&gt; is a tag for noun phrases).
</bodyText>
<figure confidence="0.96423375">
&lt;su&gt; I saw &lt;np&gt; a girl with a telescope &lt;/np&gt;&lt;/su&gt;
I saw a girl with a telescope
X
I saw a girl with a telescope
</figure>
<figureCaption confidence="0.984603">
Figure 1: An example of parsing results along with
word chunking
</figureCaption>
<bodyText confidence="0.99978775">
Next, willex compares POSs/labels encoded in
XML tags and parsing results, and deletes improper
parsing trees. Therefore, it reduces numbers of par-
tial parsing trees, which appear in the way of parsing
and should be checked by human debuggers. In ad-
dition, human debuggers can delete partial parsing
trees manually later. Figure 2 shows a concrete ex-
ample. (NP and S are labels for noun and sentential
</bodyText>
<figure confidence="0.432871">
phrases respectively.)
POS/label from Tagged Corpus
</figure>
<figureCaption confidence="0.9780915">
Figure 2: An example of deletion by using
POSs/labels
</figureCaption>
<subsectionHeader confidence="0.999513">
3.2 Output of Grammar Defects
</subsectionHeader>
<bodyText confidence="0.997958826086956">
Willex has a function to output information of gram-
mar defects into a file in order to collect the de-
fects data and treat them statistically. In addition,
we can save a log of debugging experiences which
show what grammar defects are found.
An example of an output file is shown in Table
1. It includes sentence numbers, word ranges in
which parsing failed, and comments input by a hu-
man debugger. For example, the first row of the ta-
ble means that the sentence #0 has coordinations of
verb phrases at position #3–#12, which cannot be
parsed. “OK” in the second row means the sen-
tence is parsed correctly (i.e., no grammar defects
are found in the sentence). The third row means that
the word #4 of the sentence #2 has no proper lexical
entry.
The word ranges are specified by human debug-
gers using a GUI, which shows parsing results in
CKY tables and parse trees. The comments are input
by human debuggers in a natural language or chosen
from the list of previous comments. A postprocess-
ing module of willex sorts the error data by the com-
ments to help statistical analysis.
</bodyText>
<tableCaption confidence="0.999667">
Table 1: An example of file output
</tableCaption>
<table confidence="0.797730571428571">
Sentence # Word # comment
0 3–12 V-V coordination
1 – OK
2 4 no lexical entry
O
&lt;NP&gt; A cat &lt;/NP&gt; knows everything
POSs/labels from Partial Results
</table>
<figure confidence="0.8975846">
D N N V
A cat
NP S
O x
A cat
</figure>
<sectionHeader confidence="0.938674" genericHeader="evaluation">
4 Experiments and Discussion
</sectionHeader>
<bodyText confidence="0.984387428571428">
We have applied willex to rental-XTAG, an HPSG-
style grammar converted from the XTAG English
grammar (The XTAG Research Group, 2001) by a
grammar conversion (Yoshinaga and Miyao, 2001).1
The corpus used is MEDLINE abstracts with tags
based on a slightly modified version of GDA-
DTD2 (Hasida, 2003). The corpus is “partially
parsed”; the attachments of prepositional phrases are
annotated manually.
The tags do not always specify the correct struc-
tures based on rental-XTAG (i.e., the grammar as-
sumed by tags is different from rental-XTAG), so we
prepared a POS/label conversion table. We can use
tagged corpora based on various grammars different
la lus
from the grammar that the parser is assuming by us-
ing POS/label conversion tables.
We investigated 208 sentences (average 24.2
words) from 26 abstracts. 73 sentences were parsed
successfully and got correct results. Thus the cover-
age was 35.1%.
</bodyText>
<subsectionHeader confidence="0.993259">
4.1 Qualitative Evaluation
</subsectionHeader>
<bodyText confidence="0.999848533333333">
Willex received three major positive feedbacks from
a user; first, the function of restricting partial results
was helpful, as it allows human debuggers to check
fewer results, second, the function to delete incorrect
partial results manually was useful, because there
are some cases that tags do not specify POSs/labels,
and third, human debuggers could use the record-
ing function to make notes to analyze them carefully
later.
However, willex also received some negative eval-
uations; the process of locating the cause of pars-
ing failure in a sentence was found to be a bit trou-
blesome. Also, willex loses its accuracy if the hu-
man debuggers themselves have trouble understand-
ing the correct syntactical structure of a sentence.3
</bodyText>
<footnote confidence="0.567043454545455">
1Since XTAG and rental-XTAG generate equivalent parse
results for the same input, debugging rental-XTAG means de-
bugging XTAG itself.
2GDA has no tags which specify prepositional phrases, so
we add &lt;prep&gt; and &lt;prepp&gt;.
3Thus, we divided the process of identifying grammar de-
fects to two steps. First, a non-expert roughly classifies pars-
ing errors and records temporary memorandums. Then, the
non-expert shows typical examples of sentences in each class
to experts and identifies grammar defects based on experts’ in-
ference. Here, we can make use of the recording function of
</footnote>
<bodyText confidence="0.999927666666667">
We found from these evaluations that the func-
tions of willex can be used effectively, though more
automation is needed.
</bodyText>
<subsectionHeader confidence="0.915167">
4.2 Quantitative Evaluation
</subsectionHeader>
<figureCaption confidence="0.724725333333333">
Figure 3 shows the decrease in partial parsing trees
caused by using the tagged corpus. (Data of 10 sen-
tences among the 208 sentences are shown.) The
graph shows that human workload was reduced by
using the tagged corpus.
Figure 3: Examples of numbers of partial results
</figureCaption>
<subsectionHeader confidence="0.960958">
4.3 Defects of rental-XTAG
</subsectionHeader>
<tableCaption confidence="0.753901">
Table 2 shows the defects of rental-XTAG which are
found by using willex.
Table 2: The defects of rental-XTAG
</tableCaption>
<table confidence="0.892425727272727">
the defects of rental-XTAG #
no lexical entry 62
cannot handle reduced relative 35
cannot handle V-V coordination 22
Adjective does not post-modify NP 9
cannot parse “, but not” 4
cannot handle objective to-infinitive 3
“, which ...” does not post-modify NP 3
cannot handle reduced as-relative clause 2
cannot parse “greater than”(“&gt;”) 2
misc. 17
</table>
<bodyText confidence="0.6459485">
From this table, it is inferred that (1) lack of lexi-
cal entries, (2) inability to parse reduced relative and
</bodyText>
<figure confidence="0.749575833333333">
willex.
35000
30000
25000
20000
15000
10000
5000
0
10 15 20 25 30 35 40
length of a sentence (number of words)
without any info.
with chunk info.
with chunk and POS/label info.
(3) inability to parse coordinations of verbs are seri-
ous problems of rental-XTAG.
4.4 Conflicts Between the Modified GDA and
rental-XTAG
</figure>
<tableCaption confidence="0.5930778">
Conflicts between rental-XTAG and the grammar on
which the modified GDA based cause parsing fail-
ures. Statistics of the conflicts is shown in Table 3.
Table 3: Conflicts between the modified GDA and
rental-XTAG
</tableCaption>
<table confidence="0.728384166666667">
modified GDA rental-XTAG #
adjectival phrase verbal phrase 36
bracketing except “,” 10
bracketing of “,” 8
treatment of omitted words 2
misc. 5
</table>
<bodyText confidence="0.999682428571429">
These conflicts cannot be resolved by a simple
POS/label conversion table. One resolution is insert-
ing a preprocess module that deletes and moves tags
which cause conflicts.
We do not consider these conflicts as grammar de-
fects but the difference of grammars to be absorbed
in the conversion phase.
</bodyText>
<sectionHeader confidence="0.990525" genericHeader="conclusions">
5 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.999979368421053">
We developed a debug tool, willex, which uses XML
tagged corpora and outputs information of grammar
defects. By using tagged corpora, willex succeeded
to reduce human workload. And by recording gram-
mar defects, it provides debugging environment with
a bigger perspective. But there remains a prob-
lem that a simple POS/label conversion table is not
enough to resolve conflicts of a debugged grammar
and a grammar assumed by tags. The tool should
support to handle the complicated conflicts.
In the future, we will try to modify willex to infer
causes of parsing errors (semi-)automatically. It is
difficult to find a point of parsing failure automati-
cally, because subsentences that have no correspon-
dent partial results are not always the failed point.
Hence, we will expand willex to find the longest
subsentences that are parsed successfully. Words,
POS/labels and features of the subsentences can be
clues to infer the causes of parsing errors.
</bodyText>
<sectionHeader confidence="0.952567" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9855043125">
Thilo G¨otz and Walt Detmar Meurers. 1997. The Con-
Troll system as large grammar development platform.
In Proc. of Workshop on Computational Environments
for Grammar Development and Linguistic Engineer-
ing, pages 38–45.
Koiti Hasida. 2003. Global docu-
ment annotation (GDA). available in
http://www.i-content.org/GDA/.
Hisao Imai, Yusuke Miyao, and Jun’ichi Tsujii. 1998.
GUI for an HPSG parser. In Information Processing
Society of Japan SIG Notes NL-127, pages 173–178,
September. In Japanese.
Takashi Miyata, Kazuma Takaoka, and Yuji Mat-
sumoto. 1999. Implementation of GUI debugger for
unification-based grammar. In Information Process-
ing Society of Japan SIG Notes NL-129, pages 87–94,
January. In Japanese.
Stephan Oepen, Emily M. Bender, Uli Callmeier, Dan
Flickinger, and Melanie Siegel. 2002. Parallel dis-
tributed grammar engineering for practical applica-
tions. In Proc. of the Workshop on Grammar Engi-
neering and Evaluation, pages 15–21.
Patrick Paroubek, Yves Schabes, and Aravind K. Joshi.
1992. XTAG – a graphical workbench for developing
Tree-Adjoining grammars. In Proc. of the 3rd Confer-
ence on Applied Natural Language Processing, pages
216–223.
Paul Schmidt, Axel Theofilidis, Sibylle Rieder, and
Thierry Declerck. 1996. Lean formalisms, linguis-
tic theory, and applications. Grammar development in
ALEP. In Proc. of COLING ’96, volume 1, pages
286–291.
Yuka Tateisi, Kentaro Torisawa, Yusuke Miyao, and
Jun’ichi Tsujii. 1998. Translating the XTAG english
grammar to HPSG. In Proc. of TAG+4 workshop,
pages 172–175.
The XTAG Research Group. 2001. A Lex-
icalized Tree Adjoining Grammar for English.
Technical Report IRCS Research Report 01-03,
IRCS, University of Pennsylvania. available in
http://www.cis.upenn.edu/˜xtag/.
Akane Yakushiji, Yuka Tateisi, Yusuke Miyao, and
Jun’ichi Tsujii. 2001. Event extraction from biomedi-
cal papers using a full parser. In Pacific Symposium on
Biocomputing 2001, pages 408–419, January.
Naoki Yoshinaga and Yusuke Miyao. 2001. Grammar
conversion from LTAG to HPSG. In Proc. of the sixth
ESSLLI Student Session, pages 309–324.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.402776">
<title confidence="0.932615">A Debug Tool for Practical Grammar Development</title>
<affiliation confidence="0.565116">of Computer Science, University of Tokyo</affiliation>
<address confidence="0.542424">Hongo 7-3-1, Bunkyo-ku, Tokyo 113-0033 JAPAN</address>
<affiliation confidence="0.979391">JST (Japan Science and Technology Corporation)</affiliation>
<address confidence="0.923788">Honcho 4-1-8, Kawaguchi-shi, Saitama 332-0012 JAPAN</address>
<abstract confidence="0.999709533333333">have developed a tool that helps grammar developers to work efficiently by using annotated corpora and parsing errors. two major new functions. First, it decreases ambiguity of the parsing results by comparing them to an annotated corpus and removing wrong partial results both auand manually. Second, accumulates parsing errors as data for the developers to clarify the defects of the statistically. We applied to a large-scale HPSG-style grammar as an example.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Thilo G¨otz</author>
<author>Walt Detmar Meurers</author>
</authors>
<title>The ConTroll system as large grammar development platform.</title>
<date>1997</date>
<booktitle>In Proc. of Workshop on Computational Environments for Grammar Development and Linguistic Engineering,</booktitle>
<pages>38--45</pages>
<marker>G¨otz, Meurers, 1997</marker>
<rawString>Thilo G¨otz and Walt Detmar Meurers. 1997. The ConTroll system as large grammar development platform. In Proc. of Workshop on Computational Environments for Grammar Development and Linguistic Engineering, pages 38–45.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Koiti Hasida</author>
</authors>
<title>Global document annotation (GDA).</title>
<date>2003</date>
<note>available in http://www.i-content.org/GDA/.</note>
<contexts>
<context position="6750" citStr="Hasida, 2003" startWordPosition="1103" endWordPosition="1104"> of willex sorts the error data by the comments to help statistical analysis. Table 1: An example of file output Sentence # Word # comment 0 3–12 V-V coordination 1 – OK 2 4 no lexical entry O &lt;NP&gt; A cat &lt;/NP&gt; knows everything POSs/labels from Partial Results D N N V A cat NP S O x A cat 4 Experiments and Discussion We have applied willex to rental-XTAG, an HPSGstyle grammar converted from the XTAG English grammar (The XTAG Research Group, 2001) by a grammar conversion (Yoshinaga and Miyao, 2001).1 The corpus used is MEDLINE abstracts with tags based on a slightly modified version of GDADTD2 (Hasida, 2003). The corpus is “partially parsed”; the attachments of prepositional phrases are annotated manually. The tags do not always specify the correct structures based on rental-XTAG (i.e., the grammar assumed by tags is different from rental-XTAG), so we prepared a POS/label conversion table. We can use tagged corpora based on various grammars different la lus from the grammar that the parser is assuming by using POS/label conversion tables. We investigated 208 sentences (average 24.2 words) from 26 abstracts. 73 sentences were parsed successfully and got correct results. Thus the coverage was 35.1%</context>
</contexts>
<marker>Hasida, 2003</marker>
<rawString>Koiti Hasida. 2003. Global document annotation (GDA). available in http://www.i-content.org/GDA/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hisao Imai</author>
<author>Yusuke Miyao</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>GUI for an HPSG parser.</title>
<date>1998</date>
<booktitle>In Information Processing Society of Japan SIG Notes NL-127,</booktitle>
<pages>173--178</pages>
<note>In Japanese.</note>
<contexts>
<context position="3833" citStr="Imai et al., 1998" startWordPosition="585" endWordPosition="588">ects, and record them, while willex collects the whole grammar defect records. Then human debuggers modify the found grammar defects. This process allows human debuggers to make priority over defects that appear more frequently in the corpora, or defects that are more critical for purposes of syntactical parsing. Indeed, it is possible for human debuggers using the conventional tools to collect and modify the defects but willex saves the trouble of human debuggers to collect defects to modify them more efficiently. 3 Functions of willex To create the new debugging tool, we have extended will (Imai et al., 1998). Will is a browser of parsing results of grammars based on feature structures. Will and willex are implemented in JAVA. 3.1 Using XML Tagged Corpora Willex uses sentence boundaries, word chunking, and POSs/labels encoded in XML tagged corpora. First, with the information of sentence boundaries and word chunking, ambiguity of sentences is reduced, and ambiguity at parsing phase is also reduced. A parser connected to willex is assumed to produce only results consistent with the information. An example is shown in Figure 1 (&lt;su&gt; is a sentential tag and &lt;np&gt; is a tag for noun phrases). &lt;su&gt; I saw</context>
</contexts>
<marker>Imai, Miyao, Tsujii, 1998</marker>
<rawString>Hisao Imai, Yusuke Miyao, and Jun’ichi Tsujii. 1998. GUI for an HPSG parser. In Information Processing Society of Japan SIG Notes NL-127, pages 173–178, September. In Japanese.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Takashi Miyata</author>
<author>Kazuma Takaoka</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Implementation of GUI debugger for unification-based grammar.</title>
<date>1999</date>
<booktitle>In Information Processing Society of Japan SIG Notes NL-129,</booktitle>
<pages>87--94</pages>
<note>In Japanese.</note>
<contexts>
<context position="2432" citStr="Miyata et al., 1999" startWordPosition="359" endWordPosition="362">es a human workload to improve the general-purpose grammar through using language intuition encoded in syntactically tagged corpora in XML format. Second, it records data of grammar defects to allow developers to have a whole picture of parsing errors found in the target corpora to save debugging time and effort by prioritizing them. 2 What Is the Ideal Grammar Debugging? There are already other grammar developing tools, such as a grammar writer of XTAG (Paroubek et al., 1992), ALEP (Schmidt et al., 1996), ConTroll (G¨otz and Meurers, 1997), a tool by Nara Institute of Science and Technology (Miyata et al., 1999), and [incr tsdbo)] (Oepen et al., 2002). But these tools have following problems; they largely depend on human debuggers’ language intuition, they do not help users to handle large amount of parsing results effectively, and they let human debuggers correct the bugs one after another manually and locally. To cope with these shortcomings, willex proposes an alternative method for more efficient debugging process. The workflow of the conventional grammar developing tools and willex are different in the following ways. With the conventional tools, human debuggers must check each sentence to find </context>
</contexts>
<marker>Miyata, Takaoka, Matsumoto, 1999</marker>
<rawString>Takashi Miyata, Kazuma Takaoka, and Yuji Matsumoto. 1999. Implementation of GUI debugger for unification-based grammar. In Information Processing Society of Japan SIG Notes NL-129, pages 87–94, January. In Japanese.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephan Oepen</author>
<author>Emily M Bender</author>
<author>Uli Callmeier</author>
<author>Dan Flickinger</author>
<author>Melanie Siegel</author>
</authors>
<title>Parallel distributed grammar engineering for practical applications.</title>
<date>2002</date>
<booktitle>In Proc. of the Workshop on Grammar Engineering and Evaluation,</booktitle>
<pages>15--21</pages>
<contexts>
<context position="2472" citStr="Oepen et al., 2002" startWordPosition="366" endWordPosition="369">l-purpose grammar through using language intuition encoded in syntactically tagged corpora in XML format. Second, it records data of grammar defects to allow developers to have a whole picture of parsing errors found in the target corpora to save debugging time and effort by prioritizing them. 2 What Is the Ideal Grammar Debugging? There are already other grammar developing tools, such as a grammar writer of XTAG (Paroubek et al., 1992), ALEP (Schmidt et al., 1996), ConTroll (G¨otz and Meurers, 1997), a tool by Nara Institute of Science and Technology (Miyata et al., 1999), and [incr tsdbo)] (Oepen et al., 2002). But these tools have following problems; they largely depend on human debuggers’ language intuition, they do not help users to handle large amount of parsing results effectively, and they let human debuggers correct the bugs one after another manually and locally. To cope with these shortcomings, willex proposes an alternative method for more efficient debugging process. The workflow of the conventional grammar developing tools and willex are different in the following ways. With the conventional tools, human debuggers must check each sentence to find out grammar defects and modify them one </context>
</contexts>
<marker>Oepen, Bender, Callmeier, Flickinger, Siegel, 2002</marker>
<rawString>Stephan Oepen, Emily M. Bender, Uli Callmeier, Dan Flickinger, and Melanie Siegel. 2002. Parallel distributed grammar engineering for practical applications. In Proc. of the Workshop on Grammar Engineering and Evaluation, pages 15–21.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Patrick Paroubek</author>
<author>Yves Schabes</author>
<author>Aravind K Joshi</author>
</authors>
<title>XTAG – a graphical workbench for developing Tree-Adjoining grammars.</title>
<date>1992</date>
<booktitle>In Proc. of the 3rd Conference on Applied Natural Language Processing,</booktitle>
<pages>216--223</pages>
<contexts>
<context position="2293" citStr="Paroubek et al., 1992" startWordPosition="335" endWordPosition="338">n effort. Hence, we have developed willex that helps to improve the general-purpose grammars. Willex has two major functions. First, it reduces a human workload to improve the general-purpose grammar through using language intuition encoded in syntactically tagged corpora in XML format. Second, it records data of grammar defects to allow developers to have a whole picture of parsing errors found in the target corpora to save debugging time and effort by prioritizing them. 2 What Is the Ideal Grammar Debugging? There are already other grammar developing tools, such as a grammar writer of XTAG (Paroubek et al., 1992), ALEP (Schmidt et al., 1996), ConTroll (G¨otz and Meurers, 1997), a tool by Nara Institute of Science and Technology (Miyata et al., 1999), and [incr tsdbo)] (Oepen et al., 2002). But these tools have following problems; they largely depend on human debuggers’ language intuition, they do not help users to handle large amount of parsing results effectively, and they let human debuggers correct the bugs one after another manually and locally. To cope with these shortcomings, willex proposes an alternative method for more efficient debugging process. The workflow of the conventional grammar deve</context>
</contexts>
<marker>Paroubek, Schabes, Joshi, 1992</marker>
<rawString>Patrick Paroubek, Yves Schabes, and Aravind K. Joshi. 1992. XTAG – a graphical workbench for developing Tree-Adjoining grammars. In Proc. of the 3rd Conference on Applied Natural Language Processing, pages 216–223.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paul Schmidt</author>
<author>Axel Theofilidis</author>
<author>Sibylle Rieder</author>
<author>Thierry Declerck</author>
</authors>
<title>Lean formalisms, linguistic theory, and applications. Grammar development in ALEP.</title>
<date>1996</date>
<booktitle>In Proc. of COLING ’96,</booktitle>
<volume>1</volume>
<pages>286--291</pages>
<contexts>
<context position="2322" citStr="Schmidt et al., 1996" startWordPosition="340" endWordPosition="343">oped willex that helps to improve the general-purpose grammars. Willex has two major functions. First, it reduces a human workload to improve the general-purpose grammar through using language intuition encoded in syntactically tagged corpora in XML format. Second, it records data of grammar defects to allow developers to have a whole picture of parsing errors found in the target corpora to save debugging time and effort by prioritizing them. 2 What Is the Ideal Grammar Debugging? There are already other grammar developing tools, such as a grammar writer of XTAG (Paroubek et al., 1992), ALEP (Schmidt et al., 1996), ConTroll (G¨otz and Meurers, 1997), a tool by Nara Institute of Science and Technology (Miyata et al., 1999), and [incr tsdbo)] (Oepen et al., 2002). But these tools have following problems; they largely depend on human debuggers’ language intuition, they do not help users to handle large amount of parsing results effectively, and they let human debuggers correct the bugs one after another manually and locally. To cope with these shortcomings, willex proposes an alternative method for more efficient debugging process. The workflow of the conventional grammar developing tools and willex are d</context>
</contexts>
<marker>Schmidt, Theofilidis, Rieder, Declerck, 1996</marker>
<rawString>Paul Schmidt, Axel Theofilidis, Sibylle Rieder, and Thierry Declerck. 1996. Lean formalisms, linguistic theory, and applications. Grammar development in ALEP. In Proc. of COLING ’96, volume 1, pages 286–291.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yuka Tateisi</author>
<author>Kentaro Torisawa</author>
<author>Yusuke Miyao</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Translating the XTAG english grammar to HPSG.</title>
<date>1998</date>
<booktitle>In Proc. of TAG+4 workshop,</booktitle>
<pages>172--175</pages>
<contexts>
<context position="1190" citStr="Tateisi et al., 1998" startWordPosition="164" endWordPosition="167">ons. First, it decreases ambiguity of the parsing results by comparing them to an annotated corpus and removing wrong partial results both automatically and manually. Second, willex accumulates parsing errors as data for the developers to clarify the defects of the grammar statistically. We applied willex to a large-scale HPSG-style grammar as an example. 1 Introduction There is an increasing need for syntactical parsers for practical usages, such as information extraction. For example, Yakushiji et al. (2001) extracted argument structures from biomedical papers using a parser based on XHPSG (Tateisi et al., 1998), which is a large-scale HPSG. Although large-scale and general-purpose grammars have been developed, they have a problem of limited coverage. The limits are derived from deficiencies of grammars themselves. For example, XHPSG cannot treat coordinations of verbs (ex. `Molybdate slowed but did not prevent the conversion.”) nor reduced relatives (ex. `Rb mutants derived from patients with retinoblastoma.”). Finding these grammar defects and modifying them require tremendous human effort. Hence, we have developed willex that helps to improve the general-purpose grammars. Willex has two major func</context>
</contexts>
<marker>Tateisi, Torisawa, Miyao, Tsujii, 1998</marker>
<rawString>Yuka Tateisi, Kentaro Torisawa, Yusuke Miyao, and Jun’ichi Tsujii. 1998. Translating the XTAG english grammar to HPSG. In Proc. of TAG+4 workshop, pages 172–175.</rawString>
</citation>
<citation valid="true">
<authors>
<author>The XTAG Research Group</author>
</authors>
<title>A Lexicalized Tree Adjoining Grammar for English.</title>
<date>2001</date>
<tech>Technical Report IRCS Research Report 01-03,</tech>
<contexts>
<context position="6586" citStr="Group, 2001" startWordPosition="1076" endWordPosition="1077">n CKY tables and parse trees. The comments are input by human debuggers in a natural language or chosen from the list of previous comments. A postprocessing module of willex sorts the error data by the comments to help statistical analysis. Table 1: An example of file output Sentence # Word # comment 0 3–12 V-V coordination 1 – OK 2 4 no lexical entry O &lt;NP&gt; A cat &lt;/NP&gt; knows everything POSs/labels from Partial Results D N N V A cat NP S O x A cat 4 Experiments and Discussion We have applied willex to rental-XTAG, an HPSGstyle grammar converted from the XTAG English grammar (The XTAG Research Group, 2001) by a grammar conversion (Yoshinaga and Miyao, 2001).1 The corpus used is MEDLINE abstracts with tags based on a slightly modified version of GDADTD2 (Hasida, 2003). The corpus is “partially parsed”; the attachments of prepositional phrases are annotated manually. The tags do not always specify the correct structures based on rental-XTAG (i.e., the grammar assumed by tags is different from rental-XTAG), so we prepared a POS/label conversion table. We can use tagged corpora based on various grammars different la lus from the grammar that the parser is assuming by using POS/label conversion tabl</context>
</contexts>
<marker>Group, 2001</marker>
<rawString>The XTAG Research Group. 2001. A Lexicalized Tree Adjoining Grammar for English. Technical Report IRCS Research Report 01-03,</rawString>
</citation>
<citation valid="false">
<institution>IRCS, University of Pennsylvania.</institution>
<note>available in http://www.cis.upenn.edu/˜xtag/.</note>
<marker></marker>
<rawString>IRCS, University of Pennsylvania. available in http://www.cis.upenn.edu/˜xtag/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Akane Yakushiji</author>
<author>Yuka Tateisi</author>
<author>Yusuke Miyao</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Event extraction from biomedical papers using a full parser. In Pacific Symposium on Biocomputing</title>
<date>2001</date>
<pages>408--419</pages>
<contexts>
<context position="1084" citStr="Yakushiji et al. (2001)" startWordPosition="148" endWordPosition="151">to work efficiently by using annotated corpora and recording parsing errors. Willex has two major new functions. First, it decreases ambiguity of the parsing results by comparing them to an annotated corpus and removing wrong partial results both automatically and manually. Second, willex accumulates parsing errors as data for the developers to clarify the defects of the grammar statistically. We applied willex to a large-scale HPSG-style grammar as an example. 1 Introduction There is an increasing need for syntactical parsers for practical usages, such as information extraction. For example, Yakushiji et al. (2001) extracted argument structures from biomedical papers using a parser based on XHPSG (Tateisi et al., 1998), which is a large-scale HPSG. Although large-scale and general-purpose grammars have been developed, they have a problem of limited coverage. The limits are derived from deficiencies of grammars themselves. For example, XHPSG cannot treat coordinations of verbs (ex. `Molybdate slowed but did not prevent the conversion.”) nor reduced relatives (ex. `Rb mutants derived from patients with retinoblastoma.”). Finding these grammar defects and modifying them require tremendous human effort. Hen</context>
</contexts>
<marker>Yakushiji, Tateisi, Miyao, Tsujii, 2001</marker>
<rawString>Akane Yakushiji, Yuka Tateisi, Yusuke Miyao, and Jun’ichi Tsujii. 2001. Event extraction from biomedical papers using a full parser. In Pacific Symposium on Biocomputing 2001, pages 408–419, January.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Naoki Yoshinaga</author>
<author>Yusuke Miyao</author>
</authors>
<title>Grammar conversion from LTAG to HPSG.</title>
<date>2001</date>
<booktitle>In Proc. of the sixth ESSLLI Student Session,</booktitle>
<pages>309--324</pages>
<contexts>
<context position="6638" citStr="Yoshinaga and Miyao, 2001" startWordPosition="1082" endWordPosition="1085">ents are input by human debuggers in a natural language or chosen from the list of previous comments. A postprocessing module of willex sorts the error data by the comments to help statistical analysis. Table 1: An example of file output Sentence # Word # comment 0 3–12 V-V coordination 1 – OK 2 4 no lexical entry O &lt;NP&gt; A cat &lt;/NP&gt; knows everything POSs/labels from Partial Results D N N V A cat NP S O x A cat 4 Experiments and Discussion We have applied willex to rental-XTAG, an HPSGstyle grammar converted from the XTAG English grammar (The XTAG Research Group, 2001) by a grammar conversion (Yoshinaga and Miyao, 2001).1 The corpus used is MEDLINE abstracts with tags based on a slightly modified version of GDADTD2 (Hasida, 2003). The corpus is “partially parsed”; the attachments of prepositional phrases are annotated manually. The tags do not always specify the correct structures based on rental-XTAG (i.e., the grammar assumed by tags is different from rental-XTAG), so we prepared a POS/label conversion table. We can use tagged corpora based on various grammars different la lus from the grammar that the parser is assuming by using POS/label conversion tables. We investigated 208 sentences (average 24.2 word</context>
</contexts>
<marker>Yoshinaga, Miyao, 2001</marker>
<rawString>Naoki Yoshinaga and Yusuke Miyao. 2001. Grammar conversion from LTAG to HPSG. In Proc. of the sixth ESSLLI Student Session, pages 309–324.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>