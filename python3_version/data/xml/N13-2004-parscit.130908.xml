<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.002050">
<title confidence="0.99939">
A Rule-based Approach for Karmina Generation
</title>
<author confidence="0.971969">
Franky
</author>
<affiliation confidence="0.965951">
Shanghai Jiao Tong University
800 Dongchuan Rd., Shanghai, 200240, China
Charles University in Prague, Faculty of Mathematics and Physics
</affiliation>
<address confidence="0.833919">
Malostranské náměstí 25, Prague 1, 11800, Czech Republic
</address>
<email confidence="0.994268">
franky.id@gmail.com
</email>
<sectionHeader confidence="0.995552" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999811695652174">
We present our work in generating Karmina,
an old Malay poetic form for Indonesian lan-
guage. Karmina is a poem with two lines that
consists of a hook (sampiran) on the first line
and a message on the second line. One of the
unique aspects of Karmina is in the absence of
discourse relation between its hook and mes-
sage. We approached the problem by generat-
ing the hooks and the messages in separate
processes using predefined schemas and a
manually built knowledge base. The Karminas
were produced by randomly pairing the mes-
sages with the hooks, subject to the con-
straints imposed on the rhymes and on the
structure similarity. Syllabifications were per-
formed on the cue words of the hooks and
messages to ensure the generated pairs have
matching rhymes. We were able to generate a
number of positive examples while still leav-
ing room for improvement, particularly in the
generation of the messages, which currently
are still limited, and in filtering the negative
results.
</bodyText>
<sectionHeader confidence="0.999334" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.96417275">
Computational creativity is an interesting area of
research, since it deals with how a machine can
actually produce something new and creative. Cre-
ative, in the sense that it is something that usually
comes from human’s imagination, which is quite
abstract, and unexpected from a machine. In this
work, we investigated the matter of creativity in
language. In particular, we focused our work in the
generation of Karmina, an old Malay poetic form
for Indonesian language.
Karmina is a poem that consists of two lines
with around 8-12 syllables on each line. The first
line is called the hook, which acts as the opening
line of the poem. The second line is called the
message, which contains the meaning of the poem.
The language used in Karmina is usually less for-
mal, i.e. closer to conversational language. Karmi-
na resembles Pantun, a more well-known form of
Malay poetic form, but is different from Pantun in
the number of lines it has. It can probably be com-
pared to a couplet in English, in terms of the num-
ber of lines and rhymes it must follows. Due to its
short presentation, Karmina is also called a quick
Pantun.
One of the unique aspects of Karmina is in its
hook and message relationship. The hook on the
first line has no discourse relation with the mes-
sage on the second line. Take as an example Kar-
mina presented below in Indonesian:
Gendang gendut tali kecapi
Kenyang perut senanglah hati
(Fat drum string of lute
Full stomach makes a happy heart)
and also our attempt to make one in English:
Soft meatball is easy to chew
Love them all but trust a few
The hook in Karmina acts as the entrance of the
poem and is used to engage interest or curiosity of
the audience. It usually talks about something
common in daily life, some unusual or less mean-
</bodyText>
<page confidence="0.989338">
24
</page>
<note confidence="0.908743">
Proceedings of the NAACL HLT 2013 Student Research Workshop, pages 24–31,
Atlanta, Georgia, 13 June 2013. c�2013 Association for Computational Linguistics
</note>
<bodyText confidence="0.999891894736842">
ingful information, or obvious facts, e.g. Buah pi-
sang warnanya kuning (Banana is yellow).
The message of Karmina contains the real
meaning that wants to be delivered by the author. It
might contain ideas, jokes, mockeries, or even ad-
vices. The sentence used in the message does not
need to be formal. It creates its poetic form by
omitting some function words, changing the word
order, or by using the base form of the word in-
stead of using a morphologically derived one.
The rhyme scheme in Karmina is formally
deemed to be a-a. But we found that most of the
Karminas have the rhyme schemes of (a b)-(a b),
with (a b) in the same line, as shown in the exam-
ples above. The position of the rhyme a in an (a b)
line is usually located in the middle of the sentence
and is determined by how to read the Karmina so
that the rhymes on both lines match to each other.
We chose to work with Karmina due to its sim-
ple and short presentation. It will be both challeng-
ing and interesting to answer the question of
whether we can computationally generate a simple
and short poem that contains a single idea (mean-
ing), while at the same time maintain its poetic
characteristics. From a cultural point of view, we
considered this as one of the ways to conserve this
poem, as well as to introduce it to others.
We centered our work in generating Karmina
with rhyme schemes of (a b)-(a b). We considered
Karmina in this form to be more poetic and have
more interesting structure. We present our work by
first mentioning some related works in the area of
poetry generation in Section 2. In Section 3, we
describe our approach for syllabification, hook and
message generation, and the construction of the
final Karmina. We present the results of our exper-
iments in Section 4. The discussions of findings,
issues, and future works are presented in Section 5.
</bodyText>
<sectionHeader confidence="0.999147" genericHeader="introduction">
2 Related Works
</sectionHeader>
<bodyText confidence="0.99995978">
Some recent works in poetry generation are in the
area of English Haiku generation. In Netzer et al.
(2009), the authors use word association infor-
mation to enrich user supplied seed words with
their associated words. Candidate lines are pro-
duced from pre-extracted lines that match the seed
words and their associated words, as well as the
chosen syntactic patterns. The poems are generated
by random line matching processes and by filtering
the generated Haikus based on some constraints
and internal associativity scores. The work by
Wong and Chun (2008) uses a different approach.
They represent the extracted line as a vector of
words. The Haikus are produced by generating
sentence pairs based on the selected seed words.
They are then ranked based on the similarity scores
of their lines.
Other previous work in a more general area of
poetry is by Manurung et al. (2000). In this work,
they proposed a stochastic hill climbing search
model that iteratively produces set of candidate
solutions and evaluates them based on some de-
fined phonetic, linguistic, and semantic measures.
Gervas (2001) and Díaz-agudo et al. (2002) focus
their works in the area of Spanish poetry genera-
tion. They use prose description and rough specifi-
cation from user as their input. The appropriate
strophic forms are selected based on this input. The
process continues using a case based reasoning
approach to produce the final poem.
We consider our work to have different focus
and pose different challenges. The first thing is that
the meaning of a Karmina can be understood di-
rectly. This property might be different from other
type of poetry which requires deeper interpretation.
Hence, the problem usually lies in generating a
poem with a deep embedded meaning. The second
one is related to the property of the hook that
should contain less important information (ignora-
ble) compared to the message. We believe that we
could fulfill these two requirements by defining
proper schemas and constraints, and by controlling
the words used. The last thing to consider is about
the absence of discourse relation between the hook
and the message. Our current approach to the prob-
lem is by generating the hooks and the messages
separately using different knowledge base and dif-
ferent constraints. By this treatment, we expect the
generated hooks and messages to be independent
of each other.
</bodyText>
<sectionHeader confidence="0.994722" genericHeader="method">
3 Our Current Approach
</sectionHeader>
<bodyText confidence="0.999249625">
In his thesis, Manurung (2003) defines three prop-
erties that a poem should fulfill: meaningfulness,
grammaticality, and poeticness. We think that the-
se three are inherent properties of Karmina and
unquestionably should be fulfilled by the generated
poem. Meaningfulness is handled by putting con-
straints on the proposed schemas which restrict the
words used in the poem. It is also supported by
</bodyText>
<page confidence="0.996476">
25
</page>
<bodyText confidence="0.999962846153846">
ensuring the grammaticality of the poem, which is
handled by positioning the words inside the sche-
ma properly. In terms of poeticness, we consider
that Karmina obtains its poeticness through its
rhyme structure, limitation on the number of words
or syllables, and the forms of the words used.
Hence, poeticness is handled by considering these
three aspects in the generation of the poem.
We will start this section with the description of
the schemas used in generating the hooks and the
messages. We will then continue with the explana-
tion of the syllabification algorithm and the gen-
eration of the Karmina.
</bodyText>
<subsectionHeader confidence="0.998855">
3.1 Generating the Hook
</subsectionHeader>
<bodyText confidence="0.999952918918919">
The hook of Karmina can be recognized from its
characteristic of somehow sounds like an ‘unim-
portant’ utterance, e.g. kelapa diparut enak
rasanya (grated coconut tastes good) or ikan lele
beli di pasar (catfish bought from the market). In
our first attempt, we took text segments from the
collections of news, blogs, and reviews websites.
The segments were produced by splitting the sen-
tences using punctuations, such as comma, period,
question mark, single and double quotes, and ex-
clamation mark. We were hoping to find segments
that could be used as hooks. But, we found that this
kind of utterance is quite rare.
We looked deeper into some of the examples of
Karmina and found something interesting. The ma-
jority of the hooks that we met have some similar
syntactic and semantic patterns. We analyzed the
examples and came out with a set of schemas to
generate the hooks. One property of Karmina that
we think makes the generation of the hook possible
is that a sentence in Karmina usually consists of
only 4-5 words. We defined around 19 schemas for
the hook. Some of them differ only in their word
order, e.g. a sentence with a word order of X Y Z
and a sentence with a word order of X Z Y, where
X, Y, Z can be noun, verb, adjective, etc. These
schemas are not exhaustive. They cover some of
the hooks that we found on our small examples.
Other forms of hooks may also present.
The knowledge base was built manually by find-
ing all suitable nouns, verbs, and other necessary
information. We did some categorization on them,
e.g. as fish, flower, tree, location, and specified
their relations as required in the schemas. We de-
scribe in this section the first three schemas that we
defined. We use “,” (comma) to denote a conjunc-
tion and “;” (semicolon) to denote a disjunction.
</bodyText>
<equation confidence="0.7987698">
Schema 1
Dahulu X sekarang Y
Constraints
Noun(X), Noun(Y), ChangeTo(X,Y),
Length(X,1), Length (Y,1)
</equation>
<bodyText confidence="0.9997158">
In Schema 1, the generated hook will have a
meaning of before (dahulu) and after/now
(sekarang). In this case, X and Y are usually re-
placed by nouns that have this kind of relationship.
The replacement using other word classes is also
possible. We restricted X and Y to noun since it is
the most common class we saw on the examples.
In order to check for this relationship, we defined a
predicate ChangeTo that check for two things
from the knowledge base:
</bodyText>
<listItem confidence="0.946354">
• Whether X can be made from Y and vice versa,
e.g. knife is made from iron.
• Whether X is better than Y and vice versa, e.g.
gold is better than silver.
</listItem>
<bodyText confidence="0.987791142857143">
Predicate Length checks for how many words the
noun X and Y has, which we limit to 1, to maintain
the poeticness of the generated hook. In our current
work, we used the number of words instead of syl-
lables to simplify the word selection process, with
the assumption that the number of syllables inside
a word is around two to four syllables.
</bodyText>
<equation confidence="0.963344166666667">
Schema 2
Sudah X Y pula
Constraints
Noun(X), Noun(Y), SameType(X,Y),
Length(X,1), Length(Y,1), (Tree(X);
Flower(X); Food(X))
</equation>
<bodyText confidence="0.999886222222222">
Schema 2 was made from one of the examples
that we found. The X and Y come from the same
category, i.e. both are the name of fish, bird, vege-
table, island, tree, etc. The meaning of the generat-
ed hook will be that Y is redundant because X is
already present. We restricted X and Y to be in the
same category to give an emphasis on this redun-
dancy. We used tree, flower, and food for the cate-
gories. This was based on our experiments that
</bodyText>
<page confidence="0.979939">
26
</page>
<bodyText confidence="0.8849105">
using other categories resulted in a sentence with
odd meaning.
</bodyText>
<equation confidence="0.812016">
Schema 3
X Propnya Y
Constraints
Noun(X), Adjective(Y), Has(X, Prop,
Y) Length(X,2), Length(Y,1)
</equation>
<bodyText confidence="0.99907275">
In Schema 3, the generated hook simply means
X with a property Prop that has the value of Y.
For example, X can be a banana (buah pisang) with
a property of color (warna) and property’s value of
yellow (kuning). Hence, the generated hook will be
Buah pisang warnanya kuning (Banana has a yel-
low color). We found that this kind of hook is quite
often used.
</bodyText>
<subsectionHeader confidence="0.998254">
3.2 Generating the Message
</subsectionHeader>
<bodyText confidence="0.999961540540541">
The message of Karmina is more free in its mean-
ing and structure. Creating all possible schemas is
not a feasible option. However, we managed to
find messages that follow certain schemas. They
have the same structures with the Schema 1 and
Schema 2. Hence, in this work, the message was
generated by using these two schemas only. These
two schemas bind the hook and the message to
have the same structure, i.e. both have the struc-
tures of Dahulu X sekarang Y or Sudah X Y pula.
They differ in the types and constraints of the X
and Y used. We experimented using a list of posi-
tive and negative sentiment words to replace X and
Y.
For Schema 1, X and Y were replaced by words
that have different sentiment (positive-negative or
negative-positive). These two words are antonym
to each other. The generated message will have a
meaning of a change from a positive (good) to
negative (bad) condition, or vice versa, e.g. Dahulu
kaya sekarang miskin (was rich but now poor).
In Schema 2, X and Y were replaced by words
that have the same sentiment. We expected the re-
sulting sentences to contain the repetition of two
good or two bad expressions and hence, intensify-
ing the positive or negative condition. For exam-
ple, Sudah busuk bau pula (rotten and stink).
To our knowledge, there are no subjectivity lex-
icons for Indonesian. Hence, we produced the list
by translating English subjectivity lexicon (Hu and
Liu, 2004), which originally has 2006 positive
words and 4783 negative words, using Google
Translate. The translation results were then filtered
manually to remove untranslated words, bad trans-
lations, and words that do not contain positive or
negative sentiment. The final lexicon contains 740
positive words and 1500 negative words.
</bodyText>
<subsectionHeader confidence="0.995905">
3.3 Syllabification
</subsectionHeader>
<bodyText confidence="0.9997330625">
The syllabification is used in searching for the
hooks that rhyme with the messages. We used a set
of rules to cut syllables out of the word iteratively.
The syllabification starts from the front and by
looking into the pattern of the first 3-6 letters of the
word. We defined rules for the possible patterns
that determine how many letters from the front that
will be taken as a syllable. The syllable is cut out
from the word and the iteration continues with the
truncated word. The iteration stops when only two
or less letters are left. The patterns are the combi-
nations of vowel-consonant patterns and alphabet
letters. The vowel-consonant pattern is simply a
sequence of v (vowel) and c (consonant) marker.
There are only five vowels in Indonesian
(a,i,u,e,o).
</bodyText>
<table confidence="0.702133666666667">
kecapi (cvcvcv) (take first 2)
capi (cvcv) (take first 2)
pi (cv) (take all)
</table>
<figureCaption confidence="0.999346">
Figure 1. Syllabification of kecapi to (ke, ca, pi)
</figureCaption>
<bodyText confidence="0.999981666666667">
The example in Figure 1 shows the word kecapi
matches the cvcv pattern, and the rule specifies to
take the first two letters from the front (ke) as a
syllable. The truncated word capi also falls into the
same rule. In the last step, only two letters are left
and we took them all as a syllable.
</bodyText>
<subsectionHeader confidence="0.881515">
3.4 Rhymes
</subsectionHeader>
<bodyText confidence="0.999945727272727">
In our work, we used two types of rhymes, perfect
and imperfect (half). In Indonesian, the pronuncia-
tion of a word can be determined from its syllables
and hence, we can check whether two words
rhyme with each other by matching their last sylla-
bles. For perfect rhyme, we considered two words
as having perfect rhyme if they have the same last
syllables. For imperfect rhyme, we divided the
case into two. If the last letter of the last syllable is
a vowel, we took this vowel to be compared. If the
last letter is a consonant, we searched for the first
</bodyText>
<page confidence="0.995479">
27
</page>
<bodyText confidence="0.9999675">
vowel from the last after the consonant and took
the vowel together with the following consonants
to be compared. For diphthong (ai, au, oi), we took
both of the vowels to be compared.
</bodyText>
<subsectionHeader confidence="0.991998">
3.5 Constructing the Karmina
</subsectionHeader>
<bodyText confidence="0.999987533333333">
The Karmina was produced by first generating a
list of hooks and a list of messages. The generation
processes were done separately for the hook and
the message. We selected one of the messages and
we tried to find a proper hook for the message
from the list of hooks.
Syllabifications were performed on the cue
words of the selected message and on the cue
words of the hooks in the list. Cue words of hook
or message are the middle word and the last word
of the sentence. Given the schema, we can usually
determine the second word as the middle word.
We produced a list of possible hooks for the se-
lected message by selecting hooks that rhyme with
the message, producing (a b)-(a b) rhyme scheme.
It was done by comparing the last syllables of the
cue words of the message and the hooks. We dif-
ferentiated the hooks which have perfect rhymes
with the message and the hooks which have imper-
fect rhymes. We gave higher priority to the hooks
that rhyme perfectly with the message. If no such
hooks exist, we took the hook from the later.
Message generated using Schema 1 or Schema
2 could only take the hook that has the same struc-
ture. Hence, in this work, the generated Karmina
could only have the structure of Schema 1 or
Schema 2 on both of its lines.
The final Karmina was produced by pairing the
selected message with one of the possible hooks
which was selected randomly from the list.
</bodyText>
<sectionHeader confidence="0.999738" genericHeader="method">
4 Experiments
</sectionHeader>
<bodyText confidence="0.98307872">
We implemented our work for syllabification and
Karmina construction in Perl, and generation of the
hooks and the messages in Prolog. We evaluated
the syllabification on a small list of 258 unique
words taken from two news articles. We found that
16 words were incorrectly syllabified. The main
causes are due to incomplete rules, foreign words
or abbreviations, and ambiguous words. Examples
of ambiguous words are beribu that can be read as
ber-ibu or be-ribu, and words that contain diph-
thong-like string such as baikan and bagaikan. In
the first word, the ai is not a diphthong. Both cases
might require context disambiguation and lemma-
tization which are not covered in the current rule-
based syllabification.
For Karmina evaluation, first we generated lists
of all possible hooks and messages from Schema
1 and Schema 2. Next, we generated all possible
Karminas from these lists. However, we found that
all generated Karminas were in the form of Sche-
ma 2. We failed to generate Karmina for Schema
1 since there were no hooks and messages that
rhyme with each other due to small number of
hooks and messages that we have for Schema 1.
Table 1 shows the evaluation results.
</bodyText>
<tableCaption confidence="0.998801">
Table 1. Karmina Evaluation
</tableCaption>
<table confidence="0.970699333333333">
Hook Message Total
Proper Proper 10
Proper Not Proper 30
Not Proper Proper 1
Not Proper Not Proper 59
100
</table>
<bodyText confidence="0.949297941176471">
The evaluation was performed on 100 randomly
selected Karminas. The proper and improper anno-
tations were done through discussions by two na-
tive speakers. We managed to get 10 Karminas
with acceptable hooks and messages. We found
that the improper hook was mainly caused by the
use of uncommon names e.g. holdi, hamboi. The
other cause was that X and Y in Schema 2 may
sometimes not be able to be placed side by side,
e.g. Sudah tomat srikaya pula (tomato and sugar-
apple). Although both of the objects are fruits, the
more common perception of tomato is as vegeta-
bles and hence, the sentence sounds strange.
a) Sudah leci menteng pula (lychees and menteng)
Sudah ahli tampan pula (skilled and handsome)
b) Sudah kiwi ceri pula (cherry and kiwi)
Sudah ahli kejujuran pula (skilled and honesty)
</bodyText>
<figureCaption confidence="0.996156">
Figure 2. (a) Positive example (b) Negative example
</figureCaption>
<bodyText confidence="0.9996645">
For the message, the main cause was as shown
in Figure 2 (b). The sentence sounds unusual be-
cause it combines adjective skilled with noun hon-
esty. This happened because of the incomplete
constraints on the schema, i.e. no restriction in the
part of speech of X and Y. Other reason was be-
cause of words that do not fit to be put together,
e.g. Sudah agung bagus pula (majestic and smart).
</bodyText>
<page confidence="0.998352">
28
</page>
<sectionHeader confidence="0.982269" genericHeader="method">
5 Discussion and Future Works
</sectionHeader>
<bodyText confidence="0.986454189873418">
In this section, we discuss several findings and is-
sues that we found, and our future plans for the
work.
Incomplete Constraints. The constraints in the
schema are the most crucial parts of the generation
process. The grammaticality, meaning, and poet-
icness of the generated sentence depend on the
constraints used. Hence, some of the problems as
the one shown in Figure 2 were caused by incom-
plete specification of the constraints.
Manual Intervention. The main issue in utiliz-
ing knowledge base and schemas is in the amount
of manual work that needs to be performed in cre-
ating them. One of the problems is in the infor-
mation collection, such as collecting property of
nouns (e.g. skin as property of a fish and the skin
of a fish is slippery), antonyms, and what kind of
verb that can match certain noun (e.g. coconut can
be grated). Currently, the information was built
manually and hence slowly.
One of the options to automate the knowledge
creation such as ‘what object has what kind of
property with what value’ is by first generating all
possible combinations of nouns and properties, and
finding a way to validate this knowledge efficient-
ly. Data that contains this information might be
needed for validation. Another option might be to
query a search engine. Using collocation infor-
mation in the results, we may somehow validate
the knowledge. However, the policy of automated
query of current search engine might be a hurdle.
The other issue is if we want to automate the
creation of the schema. Using extracted sentences
and part of speech information may be useful. But
this approach might not be enough, since we also
need to capture the dependency between items.
Without deeper constraints, the extracted schema
will be just a shallow representation.
Filtering the Knowledge. We found that having
too much knowledge about certain things can actu-
ally result in a less or non-poetic sentence, e.g. a
hook kod pasifik kulitnya licin (pacific cod has
slippery skin). Grammatically and semantically,
there is nothing wrong with the sentence. The
problem lies in the use of kod pasifik (pacific cod)
that is rarely mentioned in a normal daily life.
Since the hook is usually about something com-
mon to the majority of the audience, using a rare
term like this might cause it to lose its poeticness.
Corpus Based Approach for Message Gener-
ation. We are considering the corpus-based ap-
proach that utilizes the segments extracted from
the corpus for message generation. Contrary to the
hook, we found that the use of segments for the
message is more promising. We experimented with
blog corpus, since we considered it as the most
proper corpus, because of its informal and conver-
sational style language. We picked segments that
have length (number of words) greater than two,
and for poeticness reason, do not start with certain
function words. The chosen segments were further
processed by normalizing slang words, e.g. gw to
saya. Further removal of unpoetic function words
(yang, adalah, untuk) was performed. The final
segments that have length more than three were
stored. The Karmina generation was performed
using the same procedure. We determined the mid-
dle word of the message by taking the word where
the fourth syllable is located. Figure 3 shows the
positive examples that we were able to generate.
One important aspect that we still need to consider
is about the characteristics of the segments that can
be considered as good messages.
Ikan cakalang di danau emas (tuna in lake emas)
Selamat ulang tahun ya mas (happy birthday)
Sungai bengkulu sungai bilah (bengkulu and bilah river)
Aku malu kepada allah (i am ashamed of god)
Figure 3. Positive examples of Karmina using corpus
based approach for message part
</bodyText>
<sectionHeader confidence="0.999555" genericHeader="method">
6 Conclusions
</sectionHeader>
<bodyText confidence="0.999974">
We described our work in Karmina generation that
utilized a rule-based approach in generating the
hooks and the messages. We considered the notion
of grammaticality, meaningfulness, and poeticness
by defining proper schemas and constraints. We
also discussed some of the problems and future
improvements in section 5. We concluded that the
rule-based approach is able to produce some posi-
tive examples. Some limitations still exist, espe-
cially in the message generation, and a lot of
improvements are still needed to produce more of
proper Karmina. We are considering the corpus-
based approach in our future work for the message
generation and a more automated approach in
knowledge collection.
</bodyText>
<page confidence="0.998201">
29
</page>
<sectionHeader confidence="0.990322" genericHeader="method">
References
</sectionHeader>
<reference confidence="0.995891702702703">
B. Díaz-agudo , P. Gervás, and P.A. González-calero.
2002. Poetry Generation in COLIBRI. Advances in
Case-Based Reasoning (2002): 157-159.
H.M. Manurung, G. Ritchie, and H. Thompson. 2000.
Towards a computational model of poetry genera-
tion.In Proc. of the AISB’00.
H.M. Manurung. 2003. An evolutionary algorithm ap-
proach to poetry generation. Ph.D. thesis, University
of Edinburgh.
J. M. Toivanen, H.Toivonen, A.Valitutti, and O. Gross
2012. Corpus-based generation of content and form in
poetry. In International Conference on Computational
Creativity, Dublin, Ireland (pp. 175-179).
M. Hu and B. Liu. 2004. Mining and Summarizing Cus-
tomer Reviews. In Proceedings of the ACM SIGKDD
International Conference on Knowledge Discovery
and Data Mining (KDD-2004).
M. Tsan Wong and A. Hon Wai Chun. 2008. Automatic
Haiku generation using VSM. In Proc. of
ACACOS’08, April.
N. Tosa, H. Obara, and M. Minoh. 2008. Hitch haiku:
An interactive supporting system for composing haiku
poem. In Proc. of the 7th International Conference on
Entertainment Computing.
P. Gervas. 2001. An expert system for the composition
of formal Spanish poetry. Journal of Knowledge-
Based Systems, 14.
P. Gervas. 2002. Exploring quantitative evaluations of
the creativity of automatic poets. In Proc. of the 2nd
Workshop on Creative Systems, Approaches to Crea-
tivity in Artificial Intelligence and Cognitive Science,
the 15th European Conf. on Artificial Intelligence
(ECAI 2002).
Y. Netzer, D.Gabay, Y.Goldberg, and M.Elhadad. 2009.
Gaiku: generating Haiku with word associations
norms. In Proceedings of the Workshop on Computa-
tional Approaches to Linguistic Creativity.
</reference>
<sectionHeader confidence="0.847692" genericHeader="method">
Appendix A. Schemas for Hook Generation
</sectionHeader>
<bodyText confidence="0.99857625">
The rest of the schemas used for generating the
hooks are provided below as references. Some ad-
ditional relations that might need to be explained
are:
</bodyText>
<listItem confidence="0.936583555555556">
• Location(X): X is a location, e.g. name of a
mountain, name of a river, etc.
• LocationType(X): location type of X, e.g. X is
a river, a mountain, or other abstract types
such as on the top of an object (on a table), in-
side an object, etc.
• Has(X,Y,A,B): Y is performed on X, resulting
in X with property A and property value of B,
e.g. Has(fish, fried, taste, good).
</listItem>
<bodyText confidence="0.8849438">
We use Prolog notations such as “,” (comma) to
denote a conjunction, “;” (semicolon) to denote a
disjunction, and “_” (underscore) to denote any
matching term.
Schema 4
</bodyText>
<reference confidence="0.990796125">
Sudah ke X ke Y pula
Constraints
Location(X), Location(Y), Location-
Type(X)==LocationType(Y),
Length(X,1), Length (Y,1)
Schema 5
X Y Propnya
Constraints
Noun(X), Adjective(Y), Has(X,Prop,Y)
Length(X,2), Length(Y,1)
Schema 6
X diZ Y Propnya
Constraints
Noun(X), Verb(Z), Adjective(Y),
Has(X,Z,Prop,Y)
Schema 7
X diZ Propnya Y
Constraints
Noun(X), Verb(Z), Adjective(Y),
Has(X,Z,Prop,Y)
Schema 8
X Z di Y
Constraints
Noun(X), Verb(Z), Location(Y),
not(Location(X)), Has(X,Z,_,_),
Length(X,1)
Schema 9
X di Y
Constraints
Noun(X), Location(Y),
not(Location(X)), Length(X,2),
Length(Y,2)
</reference>
<page confidence="0.976053">
30
</page>
<reference confidence="0.993272759259259">
Schema 10
X Y
Constraints
Noun(X), Noun(Y), SameType(X,Y),
Length(X,2), Length(Y,2)
Schema 11
X X Y Y
Constraints
Noun(X), Noun(Y), SameType(X,Y),
Length(X,1), Length(Y,1)
Schema 12
X Y Y
Constraints
Noun(X), Noun(Y), SameType(X,Y),
Length(X,2), Length(Y,1)
Schema 13
X X Y
Constraints
Noun(X), Noun(Y), SameType(X,Y),
Length(X,1), Length(Y,2)
Schema 14
X Y A A
Constraints
Noun(X), Adjective(Y), Noun(A),
Has(X,_,Y), SameType(X,A),
Length(X,1), Length(A,1)
Schema 15
X Y A B
Constraints
Noun(X), Adjective(Y), Noun(A), Ad-
jective(B), Has(X,_,Y), Has(A,_,B),
Length(X,1), Length(A,1)
Schema 16
X Y A
Constraints
Noun(X), Adjective(Y), Noun(A),
Has(X,_,Y), SameType(X,A),
Length(X,1), Length(A,2)
Schema 17
X A B
Constraints
Noun(X), Noun(A), Adjective(B),
Has(A,_,B), SameType(X,A),
Length(X,2), Length(A,1)
Schema 18
X Z Y Propnya
Constraints
Noun(X), Verb(Z), Adjective(Y),
Has(X,Z,Prop,Y)
Schema 19
X Z Propnya Y
Constraints
Noun(X), Verb(Z), Adjective(Y),
Has(X,Z,Prop,Y)
</reference>
<page confidence="0.999909">
31
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.695570">
<title confidence="0.999887">A Rule-based Approach for Karmina Generation</title>
<author confidence="0.979669">Franky</author>
<affiliation confidence="0.973266">Shanghai Jiao Tong University</affiliation>
<address confidence="0.999073">800 Dongchuan Rd., Shanghai, 200240, China</address>
<affiliation confidence="0.948445">Charles University in Prague, Faculty of Mathematics and</affiliation>
<address confidence="0.761354">Malostranské náměstí 25, Prague 1, 11800, Czech Republic</address>
<email confidence="0.999844">franky.id@gmail.com</email>
<abstract confidence="0.998753666666667">We present our work in generating Karmina, an old Malay poetic form for Indonesian language. Karmina is a poem with two lines that of a hook on the first line and a message on the second line. One of the unique aspects of Karmina is in the absence of discourse relation between its hook and message. We approached the problem by generating the hooks and the messages in separate processes using predefined schemas and a manually built knowledge base. The Karminas were produced by randomly pairing the messages with the hooks, subject to the constraints imposed on the rhymes and on the structure similarity. Syllabifications were performed on the cue words of the hooks and messages to ensure the generated pairs have matching rhymes. We were able to generate a number of positive examples while still leaving room for improvement, particularly in the generation of the messages, which currently are still limited, and in filtering the negative results.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>P Gervás</author>
<author>P A González-calero</author>
</authors>
<date>2002</date>
<booktitle>Poetry Generation in COLIBRI. Advances in Case-Based Reasoning</booktitle>
<pages>157--159</pages>
<marker>Gervás, González-calero, 2002</marker>
<rawString>B. Díaz-agudo , P. Gervás, and P.A. González-calero. 2002. Poetry Generation in COLIBRI. Advances in Case-Based Reasoning (2002): 157-159.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H M Manurung</author>
<author>G Ritchie</author>
<author>H Thompson</author>
</authors>
<title>Towards a computational model of poetry generation.In</title>
<date>2000</date>
<booktitle>Proc. of the AISB’00.</booktitle>
<contexts>
<context position="5922" citStr="Manurung et al. (2000)" startWordPosition="1023" endWordPosition="1026">-extracted lines that match the seed words and their associated words, as well as the chosen syntactic patterns. The poems are generated by random line matching processes and by filtering the generated Haikus based on some constraints and internal associativity scores. The work by Wong and Chun (2008) uses a different approach. They represent the extracted line as a vector of words. The Haikus are produced by generating sentence pairs based on the selected seed words. They are then ranked based on the similarity scores of their lines. Other previous work in a more general area of poetry is by Manurung et al. (2000). In this work, they proposed a stochastic hill climbing search model that iteratively produces set of candidate solutions and evaluates them based on some defined phonetic, linguistic, and semantic measures. Gervas (2001) and Díaz-agudo et al. (2002) focus their works in the area of Spanish poetry generation. They use prose description and rough specification from user as their input. The appropriate strophic forms are selected based on this input. The process continues using a case based reasoning approach to produce the final poem. We consider our work to have different focus and pose diffe</context>
</contexts>
<marker>Manurung, Ritchie, Thompson, 2000</marker>
<rawString>H.M. Manurung, G. Ritchie, and H. Thompson. 2000. Towards a computational model of poetry generation.In Proc. of the AISB’00.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H M Manurung</author>
</authors>
<title>An evolutionary algorithm approach to poetry generation.</title>
<date>2003</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Edinburgh.</institution>
<contexts>
<context position="7470" citStr="Manurung (2003)" startWordPosition="1277" endWordPosition="1278">should contain less important information (ignorable) compared to the message. We believe that we could fulfill these two requirements by defining proper schemas and constraints, and by controlling the words used. The last thing to consider is about the absence of discourse relation between the hook and the message. Our current approach to the problem is by generating the hooks and the messages separately using different knowledge base and different constraints. By this treatment, we expect the generated hooks and messages to be independent of each other. 3 Our Current Approach In his thesis, Manurung (2003) defines three properties that a poem should fulfill: meaningfulness, grammaticality, and poeticness. We think that these three are inherent properties of Karmina and unquestionably should be fulfilled by the generated poem. Meaningfulness is handled by putting constraints on the proposed schemas which restrict the words used in the poem. It is also supported by 25 ensuring the grammaticality of the poem, which is handled by positioning the words inside the schema properly. In terms of poeticness, we consider that Karmina obtains its poeticness through its rhyme structure, limitation on the nu</context>
</contexts>
<marker>Manurung, 2003</marker>
<rawString>H.M. Manurung. 2003. An evolutionary algorithm approach to poetry generation. Ph.D. thesis, University of Edinburgh.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J M Toivanen</author>
<author>A Valitutti H Toivonen</author>
<author>O Gross</author>
</authors>
<title>Corpus-based generation of content and form in poetry.</title>
<date>2012</date>
<booktitle>In International Conference on Computational Creativity,</booktitle>
<pages>175--179</pages>
<location>Dublin,</location>
<marker>Toivanen, Toivonen, Gross, 2012</marker>
<rawString>J. M. Toivanen, H.Toivonen, A.Valitutti, and O. Gross 2012. Corpus-based generation of content and form in poetry. In International Conference on Computational Creativity, Dublin, Ireland (pp. 175-179).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Hu</author>
<author>B Liu</author>
</authors>
<title>Mining and Summarizing Customer Reviews.</title>
<date>2004</date>
<booktitle>In Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD-2004).</booktitle>
<contexts>
<context position="13831" citStr="Hu and Liu, 2004" startWordPosition="2394" endWordPosition="2397">nerated message will have a meaning of a change from a positive (good) to negative (bad) condition, or vice versa, e.g. Dahulu kaya sekarang miskin (was rich but now poor). In Schema 2, X and Y were replaced by words that have the same sentiment. We expected the resulting sentences to contain the repetition of two good or two bad expressions and hence, intensifying the positive or negative condition. For example, Sudah busuk bau pula (rotten and stink). To our knowledge, there are no subjectivity lexicons for Indonesian. Hence, we produced the list by translating English subjectivity lexicon (Hu and Liu, 2004), which originally has 2006 positive words and 4783 negative words, using Google Translate. The translation results were then filtered manually to remove untranslated words, bad translations, and words that do not contain positive or negative sentiment. The final lexicon contains 740 positive words and 1500 negative words. 3.3 Syllabification The syllabification is used in searching for the hooks that rhyme with the messages. We used a set of rules to cut syllables out of the word iteratively. The syllabification starts from the front and by looking into the pattern of the first 3-6 letters of</context>
</contexts>
<marker>Hu, Liu, 2004</marker>
<rawString>M. Hu and B. Liu. 2004. Mining and Summarizing Customer Reviews. In Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD-2004).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Tsan Wong</author>
<author>A Hon Wai Chun</author>
</authors>
<title>Automatic Haiku generation using VSM.</title>
<date>2008</date>
<booktitle>In Proc. of ACACOS’08,</booktitle>
<contexts>
<context position="5602" citStr="Wong and Chun (2008)" startWordPosition="967" endWordPosition="970">, and future works are presented in Section 5. 2 Related Works Some recent works in poetry generation are in the area of English Haiku generation. In Netzer et al. (2009), the authors use word association information to enrich user supplied seed words with their associated words. Candidate lines are produced from pre-extracted lines that match the seed words and their associated words, as well as the chosen syntactic patterns. The poems are generated by random line matching processes and by filtering the generated Haikus based on some constraints and internal associativity scores. The work by Wong and Chun (2008) uses a different approach. They represent the extracted line as a vector of words. The Haikus are produced by generating sentence pairs based on the selected seed words. They are then ranked based on the similarity scores of their lines. Other previous work in a more general area of poetry is by Manurung et al. (2000). In this work, they proposed a stochastic hill climbing search model that iteratively produces set of candidate solutions and evaluates them based on some defined phonetic, linguistic, and semantic measures. Gervas (2001) and Díaz-agudo et al. (2002) focus their works in the are</context>
</contexts>
<marker>Wong, Chun, 2008</marker>
<rawString>M. Tsan Wong and A. Hon Wai Chun. 2008. Automatic Haiku generation using VSM. In Proc. of ACACOS’08, April.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Tosa</author>
<author>H Obara</author>
<author>M Minoh</author>
</authors>
<title>Hitch haiku: An interactive supporting system for composing haiku poem.</title>
<date>2008</date>
<booktitle>In Proc. of the 7th International Conference on Entertainment Computing.</booktitle>
<marker>Tosa, Obara, Minoh, 2008</marker>
<rawString>N. Tosa, H. Obara, and M. Minoh. 2008. Hitch haiku: An interactive supporting system for composing haiku poem. In Proc. of the 7th International Conference on Entertainment Computing.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Gervas</author>
</authors>
<title>An expert system for the composition of formal Spanish poetry.</title>
<date>2001</date>
<journal>Journal of KnowledgeBased Systems,</journal>
<volume>14</volume>
<contexts>
<context position="6144" citStr="Gervas (2001)" startWordPosition="1058" endWordPosition="1059">nts and internal associativity scores. The work by Wong and Chun (2008) uses a different approach. They represent the extracted line as a vector of words. The Haikus are produced by generating sentence pairs based on the selected seed words. They are then ranked based on the similarity scores of their lines. Other previous work in a more general area of poetry is by Manurung et al. (2000). In this work, they proposed a stochastic hill climbing search model that iteratively produces set of candidate solutions and evaluates them based on some defined phonetic, linguistic, and semantic measures. Gervas (2001) and Díaz-agudo et al. (2002) focus their works in the area of Spanish poetry generation. They use prose description and rough specification from user as their input. The appropriate strophic forms are selected based on this input. The process continues using a case based reasoning approach to produce the final poem. We consider our work to have different focus and pose different challenges. The first thing is that the meaning of a Karmina can be understood directly. This property might be different from other type of poetry which requires deeper interpretation. Hence, the problem usually lies</context>
</contexts>
<marker>Gervas, 2001</marker>
<rawString>P. Gervas. 2001. An expert system for the composition of formal Spanish poetry. Journal of KnowledgeBased Systems, 14.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Gervas</author>
</authors>
<title>Exploring quantitative evaluations of the creativity of automatic poets.</title>
<date>2002</date>
<booktitle>In Proc. of the 2nd Workshop on Creative Systems, Approaches to Creativity in Artificial Intelligence and Cognitive Science, the 15th European Conf. on Artificial Intelligence (ECAI</booktitle>
<marker>Gervas, 2002</marker>
<rawString>P. Gervas. 2002. Exploring quantitative evaluations of the creativity of automatic poets. In Proc. of the 2nd Workshop on Creative Systems, Approaches to Creativity in Artificial Intelligence and Cognitive Science, the 15th European Conf. on Artificial Intelligence (ECAI 2002).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Netzer</author>
<author>Y Goldberg D Gabay</author>
<author>M Elhadad</author>
</authors>
<title>Gaiku: generating Haiku with word associations norms.</title>
<date>2009</date>
<booktitle>In Proceedings of the Workshop on Computational Approaches to Linguistic Creativity.</booktitle>
<contexts>
<context position="5152" citStr="Netzer et al. (2009)" startWordPosition="896" endWordPosition="899"> rhyme schemes of (a b)-(a b). We considered Karmina in this form to be more poetic and have more interesting structure. We present our work by first mentioning some related works in the area of poetry generation in Section 2. In Section 3, we describe our approach for syllabification, hook and message generation, and the construction of the final Karmina. We present the results of our experiments in Section 4. The discussions of findings, issues, and future works are presented in Section 5. 2 Related Works Some recent works in poetry generation are in the area of English Haiku generation. In Netzer et al. (2009), the authors use word association information to enrich user supplied seed words with their associated words. Candidate lines are produced from pre-extracted lines that match the seed words and their associated words, as well as the chosen syntactic patterns. The poems are generated by random line matching processes and by filtering the generated Haikus based on some constraints and internal associativity scores. The work by Wong and Chun (2008) uses a different approach. They represent the extracted line as a vector of words. The Haikus are produced by generating sentence pairs based on the </context>
</contexts>
<marker>Netzer, Gabay, Elhadad, 2009</marker>
<rawString>Y. Netzer, D.Gabay, Y.Goldberg, and M.Elhadad. 2009. Gaiku: generating Haiku with word associations norms. In Proceedings of the Workshop on Computational Approaches to Linguistic Creativity.</rawString>
</citation>
<citation valid="false">
<note>Sudah ke X ke Y pula Constraints</note>
<marker></marker>
<rawString>Sudah ke X ke Y pula Constraints</rawString>
</citation>
<citation valid="true">
<authors>
<author>Location Location</author>
</authors>
<date></date>
<location>LocationType(X)==LocationType(Y), Length(X,1), Length</location>
<marker>Location, </marker>
<rawString>Location(X), Location(Y), LocationType(X)==LocationType(Y), Length(X,1), Length (Y,1)</rawString>
</citation>
<citation valid="false">
<booktitle>Schema 5 X Y Propnya Constraints</booktitle>
<marker></marker>
<rawString>Schema 5 X Y Propnya Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Adjective Noun</author>
</authors>
<location>Has(X,Prop,Y) Length(X,2), Length(Y,1)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Adjective(Y), Has(X,Prop,Y) Length(X,2), Length(Y,1)</rawString>
</citation>
<citation valid="false">
<journal>Schema 6 X diZ Y Propnya Constraints</journal>
<marker></marker>
<rawString>Schema 6 X diZ Y Propnya Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Verb Noun</author>
</authors>
<location>Adjective(Y), Has(X,Z,Prop,Y)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Verb(Z), Adjective(Y), Has(X,Z,Prop,Y)</rawString>
</citation>
<citation valid="false">
<journal>Schema 7 X diZ Propnya Y Constraints</journal>
<marker></marker>
<rawString>Schema 7 X diZ Propnya Y Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Verb Noun</author>
</authors>
<location>Adjective(Y), Has(X,Z,Prop,Y)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Verb(Z), Adjective(Y), Has(X,Z,Prop,Y)</rawString>
</citation>
<citation valid="false">
<journal>Schema 8 X Z di Y Constraints</journal>
<marker></marker>
<rawString>Schema 8 X Z di Y Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Verb Noun</author>
</authors>
<location>Location(Y), not(Location(X)), Has(X,Z,_,_), Length(X,1)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Verb(Z), Location(Y), not(Location(X)), Has(X,Z,_,_), Length(X,1)</rawString>
</citation>
<citation valid="false">
<journal>Schema 9 X di Y Constraints</journal>
<marker></marker>
<rawString>Schema 9 X di Y Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Location Noun</author>
</authors>
<location>not(Location(X)), Length(X,2), Length(Y,2)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Location(Y), not(Location(X)), Length(X,2), Length(Y,2)</rawString>
</citation>
<citation valid="false">
<journal>Schema 10 X Y Constraints Noun(X),</journal>
<location>Noun(Y), SameType(X,Y), Length(X,2), Length(Y,2)</location>
<marker></marker>
<rawString>Schema 10 X Y Constraints Noun(X), Noun(Y), SameType(X,Y), Length(X,2), Length(Y,2)</rawString>
</citation>
<citation valid="false">
<journal>Schema 11 X X Y Y Constraints</journal>
<marker></marker>
<rawString>Schema 11 X X Y Y Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Noun Noun</author>
</authors>
<location>SameType(X,Y), Length(X,1), Length(Y,1)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Noun(Y), SameType(X,Y), Length(X,1), Length(Y,1)</rawString>
</citation>
<citation valid="false">
<journal>Schema 12 X Y Y Constraints Noun(X),</journal>
<location>Noun(Y), SameType(X,Y), Length(X,2), Length(Y,1)</location>
<marker></marker>
<rawString>Schema 12 X Y Y Constraints Noun(X), Noun(Y), SameType(X,Y), Length(X,2), Length(Y,1)</rawString>
</citation>
<citation valid="false">
<journal>Schema 13 X X Y Constraints Noun(X),</journal>
<location>Noun(Y), SameType(X,Y), Length(X,1), Length(Y,2)</location>
<marker></marker>
<rawString>Schema 13 X X Y Constraints Noun(X), Noun(Y), SameType(X,Y), Length(X,1), Length(Y,2)</rawString>
</citation>
<citation valid="false">
<journal>Schema 14 X Y A A Constraints</journal>
<marker></marker>
<rawString>Schema 14 X Y A A Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Adjective Noun</author>
</authors>
<location>Noun(A), Has(X,_,Y), SameType(X,A), Length(X,1), Length(A,1)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Adjective(Y), Noun(A), Has(X,_,Y), SameType(X,A), Length(X,1), Length(A,1)</rawString>
</citation>
<citation valid="false">
<journal>Schema 15 X Y A B Constraints</journal>
<marker></marker>
<rawString>Schema 15 X Y A B Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Adjective Noun</author>
</authors>
<location>Noun(A), Adjective(B), Has(X,_,Y), Has(A,_,B), Length(X,1), Length(A,1)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Adjective(Y), Noun(A), Adjective(B), Has(X,_,Y), Has(A,_,B), Length(X,1), Length(A,1)</rawString>
</citation>
<citation valid="false">
<journal>Schema 16 X Y A Constraints</journal>
<marker></marker>
<rawString>Schema 16 X Y A Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Adjective Noun</author>
</authors>
<location>Noun(A), Has(X,_,Y), SameType(X,A), Length(X,1), Length(A,2)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Adjective(Y), Noun(A), Has(X,_,Y), SameType(X,A), Length(X,1), Length(A,2)</rawString>
</citation>
<citation valid="false">
<journal>Schema 17 X A B Constraints</journal>
<marker></marker>
<rawString>Schema 17 X A B Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Noun</author>
</authors>
<location>Noun(A), Adjective(B), Has(A,_,B), SameType(X,A), Length(X,2), Length(A,1)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Noun(A), Adjective(B), Has(A,_,B), SameType(X,A), Length(X,2), Length(A,1)</rawString>
</citation>
<citation valid="false">
<journal>Schema 18 X Z Y Propnya Constraints</journal>
<marker></marker>
<rawString>Schema 18 X Z Y Propnya Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Verb Noun</author>
</authors>
<location>Adjective(Y), Has(X,Z,Prop,Y)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Verb(Z), Adjective(Y), Has(X,Z,Prop,Y)</rawString>
</citation>
<citation valid="false">
<journal>Schema 19 X Z Propnya Y Constraints</journal>
<marker></marker>
<rawString>Schema 19 X Z Propnya Y Constraints</rawString>
</citation>
<citation valid="false">
<authors>
<author>Verb Noun</author>
</authors>
<location>Adjective(Y), Has(X,Z,Prop,Y)</location>
<marker>Noun, </marker>
<rawString>Noun(X), Verb(Z), Adjective(Y), Has(X,Z,Prop,Y)</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>