<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000041">
<title confidence="0.998633">
A Syntax-based Statistical Translation Model
</title>
<author confidence="0.990388">
Kenji Yamada and Kevin Knight
</author>
<affiliation confidence="0.906367">
Information Sciences Institute
University of Southern California
4676 Admiralty Way, Suite 1001
</affiliation>
<address confidence="0.611672">
Marina del Rey, CA 90292
</address>
<email confidence="0.999075">
kyamada,knight@isi.edu
</email>
<sectionHeader confidence="0.993905" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999677083333333">
We present a syntax-based statistical
translation model. Our model trans-
forms a source-language parse tree
into a target-language string by apply-
ing stochastic operations at each node.
These operations capture linguistic dif-
ferences such as word order and case
marking. Model parameters are esti-
mated in polynomial time using an EM
algorithm. The model produces word
alignments that are better than those
produced by IBM Model 5.
</bodyText>
<sectionHeader confidence="0.998989" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999865316666667">
A statistical translation model (TM) is a mathe-
matical model in which the process of human-
language translation is statistically modeled.
Model parameters are automatically estimated us-
ing a corpus of translation pairs. TMs have been
used for statistical machine translation (Berger et
al., 1996), word alignment of a translation cor-
pus (Melamed, 2000), multilingual document re-
trieval (Franz et al., 1999), automatic dictionary
construction (Resnik and Melamed, 1997), and
data preparation for word sense disambiguation
programs (Brown et al., 1991). Developing a bet-
ter TM is a fundamental issue for those applica-
tions.
Researchers at IBM first described such a sta-
tistical TM in (Brown et al., 1988). Their mod-
els are based on a string-to-string noisy channel
model. The channel converts a sequence of words
in one language (such as English) into another
(such as French). The channel operations are
movements, duplications, and translations, ap-
plied to each word independently. The movement
is conditioned only on word classes and positions
in the string, and the duplication and translation
are conditioned only on the word identity. Math-
ematical details are fully described in (Brown et
al., 1993).
One criticism of the IBM-style TM is that it
does not model structural or syntactic aspects of
the language. The TM was only demonstrated for
a structurally similar language pair (English and
French). It has been suspected that a language
pair with very different word order such as En-
glish and Japanese would not be modeled well by
these TMs.
To incorporate structural aspects of the lan-
guage, our channel model accepts a parse tree as
an input, i.e., the input sentence is preprocessed
by a syntactic parser. The channel performs oper-
ations on each node of the parse tree. The oper-
ations are reordering child nodes, inserting extra
words at each node, and translating leaf words.
Figure 1 shows the overview of the operations of
our model. Note that the output of our model is a
string, not a parse tree. Therefore, parsing is only
needed on the channel input side.
The reorder operation is intended to model
translation between languages with different word
orders, such as SVO-languages (English or Chi-
nese) and SOV-languages (Japanese or Turkish).
The word-insertion operation is intended to cap-
ture linguistic differences in specifying syntactic
cases. E.g., English and French use structural po-
sition to specify case, while Japanese and Korean
use case-marker particles.
Wang (1998) enhanced the IBM models by in-
troducing phrases, and Och et al. (1999) used
templates to capture phrasal sequences in a sen-
tence. Both also tried to incorporate structural as-
pects of the language, however, neither handles
</bodyText>
<figure confidence="0.999502586206896">
1. Channel Input
2. Reordered
VB
PRP VB1 VB2
VB TO
TO NN
VB
NN TO
PRP
TO
VB2
VB
VB1
VB
PRP
TO VB
VB2
VB1
NN TO
NN TO
4. Translated
VB
kare ha ongaku wo kiku no ga daisuki desu
5. Channel Output
PRP
VB2
VB1
TO VB
3. Inserted
</figure>
<figureCaption confidence="0.99999">
Figure 1: Channel Operations: Reorder, Insert, and Translate
</figureCaption>
<bodyText confidence="0.99760105">
nested structures.
Wu (1997) and Alshawi et al. (2000) showed
statistical models based on syntactic structure.
The way we handle syntactic parse trees is in-
spired by their work, although their approach
is not to model the translation process, but to
formalize a model that generates two languages
at the same time. Our channel operations are
also similar to the mechanism in Twisted Pair
Grammar (Jones and Havrilla, 1998) used in their
knowledge-based system.
Following (Brown et al., 1993) and the other
literature in TM, this paper only focuses the de-
tails of TM. Applications of our TM, such as ma-
chine translation or dictionary construction, will
be described in a separate paper. Section 2 de-
scribes our model in detail. Section 3 shows ex-
perimental results. We conclude with Section 4,
followed by an Appendix describing the training
algorithm in more detail.
</bodyText>
<sectionHeader confidence="0.997076" genericHeader="method">
2 The Model
</sectionHeader>
<subsectionHeader confidence="0.996106">
2.1 An Example
</subsectionHeader>
<bodyText confidence="0.9966876">
We first introduce our translation model with an
example. Section 2.2 will describe the model
more formally. We assume that an English parse
tree is fed into a noisy channel and that it is trans-
lated to a Japanese sentence.1
</bodyText>
<footnote confidence="0.9486795">
1The parse tree is flattened to work well with the model.
See Section 3.1 for details.
</footnote>
<figureCaption confidence="0.862382">
Figure 1 shows how the channel works. First,
child nodes on each internal node are stochas-
tically reordered. A node with children has
possible reorderings. The probability of tak-
ing a specific reordering is given by the model’s
r-table. Sample model parameters are shown in
Table 1. We assume that only the sequence of
child node labels influences the reordering. In
Figure 1, the top VB node has a child sequence
</figureCaption>
<bodyText confidence="0.961779318181818">
PRP-VB1-VB2. The probability of reordering it
into PRP-VB2-VB1 is 0.723 (the second row in
the r-table in Table 1). We also reorder VB-TO
into TO-VB, and TO-NN into NN-TO, so there-
fore the probability of the second tree in Figure 1
is
Next, an extra word is stochastically inserted
at each node. A word can be inserted either to
the left of the node, to the right of the node, or
nowhere. Brown et al. (1993) assumes that there
is an invisible NULL word in the input sentence
and it generates output words that are distributed
into random positions. Here, we instead decide
the position on the basis of the nodes of the in-
put parse tree. The insertion probability is deter-
mined by the n-table. For simplicity, we split the
n-table into two: a table for insert positions and
a table for words to be inserted (Table 1). The
node’s label and its parent’s label are used to in-
dex the table for insert positions. For example,
the PRP node in Figure 1 has parent VB, thus
.
</bodyText>
<tableCaption confidence="0.872806">
Table 1: Model Parameter Tables
</tableCaption>
<bodyText confidence="0.95366758974359">
n−table
t−table
r−table
parent=VBnode=PRP is the conditioning in-
dex. Using this label pair captures, for example,
the regularity of inserting case-marker particles.
When we decide which word to insert, no condi-
tioning variable is used. That is, a function word
like ga is just as likely to be inserted in one place
as any other. In Figure 1, we inserted four words
(ha, no, ga and desu) to create the third tree. The
top VB node, two TO nodes, and the NN node
inserted nothing. Therefore, the probability of
obtaining the third tree given the second tree is
3.498e-9.
Finally, we apply the translate operation to
each leaf. We assume that this operation is depen-
dent only on the word itself and that no context
is consulted.2 The model’s t-table specifies the
probability for all cases. Suppose we obtained the
translations shown in the fourth tree of Figure 1.
The probability of the translate operation here is
.
The total probability of the reorder, insert and
translate operations in this example is
3.498e-9 1.828e-11. Note that there
2When a TM is used in machine translation, the TM’s
role is to provide a list of possible translations, and a lan-
guage model addresses the context. See (Berger et al., 1996).
are many other combinations of such operations
that yield the same Japanese sentence. Therefore,
the probability of the Japanese sentence given the
English parse tree is the sum of all these probabil-
ities.
We actually obtained the probability tables (Ta-
ble 1) from a corpus of about two thousand pairs
of English parse trees and Japanese sentences,
completely automatically. Section 2.3 and Ap-
pendix 4 describe the training algorithm.
</bodyText>
<subsectionHeader confidence="0.992535">
2.2 Formal Description
</subsectionHeader>
<bodyText confidence="0.996008866666667">
This section formally describes our translation
model. To make this paper comparable to (Brown
et al., 1993), we use English-French notation in
this section. We assume that an English parse
tree is transformed into a French sentence.
Let the English parse tree consist of nodes
, and let the output French sentence
consist of French words .
Three random variables, ,, and are chan-
nel operations applied to each node. Insertion
is an operation that inserts a French word just be-
fore or after the node. The insertion can be none,
left, or right. Also it decides what French word
to insert. Reorder is an operation that changes
the order of the children of the node. If a node
has three children, e.g., there are ways
to reorder them. This operation applies only to
non-terminal nodes in the tree. Translation is
an operation that translates a terminal English leaf
word into a French word. This operation applies
only to terminal nodes. Note that an English word
can be translated into a French NULL word.
The notation stands for a set
of values of . is a
set of values of random variables associated with
. And is the set of all ran-
dom variables associated with a parse tree
.
The probability of getting a French sentence
given an English parse tree is
</bodyText>
<equation confidence="0.907003666666667">
P
Str
P
</equation>
<bodyText confidence="0.997579444444444">
where Str is the sequence of leaf words
of a tree transformed by from .
The probability of having a particular set of
values of random variables in a parse tree is
This is an exact equation. Then, we assume that
a transform operation is independent from other
transform operations, and the random variables of
each node are determined only by the node itself.
So, we obtain
</bodyText>
<equation confidence="0.913639">
P P
P
The random variables are as-
</equation>
<bodyText confidence="0.911193666666667">
sumed to be independent of each other. We also
assume that they are dependent on particular fea-
tures of the node. Then,
of children was used for . The last line in the
above formula introduces a change in notation,
meaning that those probabilities are the model pa-
rameters ,, and , where ,,
and are the possible values for , , and ,
respectively.
In summary, the probability of getting a French
sentence given an English parse tree is
P
Str
where and
, P
and P , decide the behavior of the translation
model, and these are the probabilities we want to
estimate from a training corpus.
</bodyText>
<subsectionHeader confidence="0.987414">
2.3 Automatic Parameter Estimation
</subsectionHeader>
<bodyText confidence="0.999956705882353">
To estimate the model parameters, we use the EM
algorithm (Dempster et al., 1977). The algorithm
iteratively updates the model parameters to max-
imize the likelihood of the training corpus. First,
the model parameters are initialized. We used a
uniform distribution, but it can be a distribution
taken from other models. For each iteration, the
number of events are counted and weighted by the
probabilities of the events. The probabilities of
events are calculated from the current model pa-
rameters. The model parameters are re-estimated
based on the counts, and used for the next itera-
tion. In our case, an event is a pair of a value of a
random variable (such as,, or) and a feature
value (such as , , or ). A separate counter is
used for each event. Therefore, we need the same
number of counters,
</bodyText>
<equation confidence="0.592131">
P
.
</equation>
<bodyText confidence="0.9524751">
The model parameters ,, and
, that is, the probabilities P
,
as the number of entries in the probability tables,
, , and .
The training procedure is the following:
where ,, and are the relevant features to
, , and , respectively. For example, we saw
that the parent node label and the node label were
used for , and the syntactic category sequence
</bodyText>
<listItem confidence="0.635221">
2. Reset all counters: , , and .
3. For each pair in the training corpus,
</listItem>
<bodyText confidence="0.759161">
For all, such that Str ,
Let cnt = P P
Str
</bodyText>
<equation confidence="0.495768571428571">
P P
P
P P
P P P
P P P
Str
,
</equation>
<listItem confidence="0.37376925">
, and
1. Initialize all probability tables: , , and
.
5. Repeat steps 2-4 for several iterations.
</listItem>
<bodyText confidence="0.958273769230769">
A straightforward implementation that tries all
possible combinations of parameters , is
very expensive, since there are possi-
ble combinations, where and are the num-
ber of possible values for and, respectively (
is uniquely decided when and are given for a
particular ). Appendix describes an efficient
implementation that estimates the probability in
polynomial time.3 With this efficient implemen-
tation, it took about 50 minutes per iteration on
our corpus (about two thousand pairs of English
parse trees and Japanese sentences. See the next
section).
</bodyText>
<sectionHeader confidence="0.99892" genericHeader="method">
3 Experiment
</sectionHeader>
<bodyText confidence="0.9998448">
To experiment, we trained our model on a small
English-Japanese corpus. To evaluate perfor-
mance, we examined alignments produced by the
learned model. For comparison, we also trained
IBM Model 5 on the same corpus.
</bodyText>
<subsectionHeader confidence="0.996297">
3.1 Training
</subsectionHeader>
<bodyText confidence="0.998381651162791">
We extracted 2121 translation sentence pairs from
a Japanese-English dictionary. These sentences
were mostly short ones. The average sentence
length was 6.9 for English and 9.7 for Japanese.
However, many rare words were used, which
made the task difficult. The vocabulary size was
3463 tokens for English, and 3983 tokens for
Japanese, with 2029 tokens for English and 2507
tokens for Japanese occurring only once in the
corpus.
Brill’s part-of-speech (POS) tagger (Brill,
1995) and Collins’ parser (Collins, 1999) were
used to obtain parse trees for the English side of
the corpus. The output of Collins’ parser was
3Note that the algorithm performs full EM counting,
whereas the IBM models only permit counting over a sub-
set of possible alignments.
modified in the following way. First, to reduce
the number of parameters in the model, each node
was re-labelled with the POS of the node’s head
word, and some POS labels were collapsed. For
example, labels for different verb endings (such
as VBD for -ed and VBG for -ing) were changed
to the same label VB. There were then 30 differ-
ent node labels, and 474 unique child label se-
quences.
Second, a subtree was flattened if the node’s
head-word was the same as the parent’s head-
word. For example, (NN1 (VB NN2)) was flat-
tened to (NN1 VB NN2) if the VB was a head
word for both NN1 and NN2. This flattening was
motivated by various word orders in different lan-
guages. An English SVO structure is translated
into SOV in Japanese, or into VSO in Arabic.
These differences are easily modeled by the flat-
tened subtree (NN1 VB NN2), rather than (NN1
(VB NN2)).
We ran 20 iterations of the EM algorithm as
described in Section 2.2. IBM Model 5 was se-
quentially bootstrapped with Model 1, an HMM
Model, and Model 3 (Och and Ney, 2000). Each
preceding model and the final Model 5 were
trained with five iterations (total 20 iterations).
</bodyText>
<subsectionHeader confidence="0.997634">
3.2 Evaluation
</subsectionHeader>
<bodyText confidence="0.995772857142857">
The training procedure resulted in the tables of es-
timated model parameters. Table 1 in Section 2.1
shows part of those parameters obtained by the
training above.
To evaluate performance, we let the models
generate the most probable alignment of the train-
ing corpus (called the Viterbi alignment). The
alignment shows how the learned model induces
the internal structure of the training data.
Figure 2 shows alignments produced by our
model and IBM Model 5. Darker lines indicates
that the particular alignment link was judged cor-
rect by humans. Three humans were asked to rate
each alignment as okay (1.0 point), not sure (0.5
point), or wrong (0 point). The darkness of the
lines in the figure reflects the human score. We
obtained the average score of the first 50 sentence
pairs in the corpus. We also counted the number
of perfectly aligned sentence pairs in the 50 pairs.
Perfect means that all alignments in a sentence
pair were judged okay by all the human judges.
4. For each ,
For ,
+= cnt
+= cnt
+= cnt
, and ,
he adores listening to music
he adores listening to music
he has unusual ability in english
hypocrisy is abhorrent to them
he has unusual ability in english
he was ablaze with anger
hypocrisy is abhorrent to them
he was ablaze with anger
</bodyText>
<figureCaption confidence="0.9860525">
Figure 2: Viterbi Alignments: our model (left) and IBM Model 5 (right). Darker lines are judged more
correct by humans.
</figureCaption>
<table confidence="0.856259833333333">
P
The result was the following;
Alignment Perfect
ave. score sents
Our Model 0.582 10
IBM Model 5 0.431 0
</table>
<bodyText confidence="0.999945368421053">
Our model got a better result compared to IBM
Model 5. Note that there were no perfect align-
ments from the IBM Model. Errors by the IBM
Model were spread out over the whole set, while
our errors were localized to some sentences. We
expect that our model will therefore be easier to
improve. Also, localized errors are good if the
TM is used for corpus preparation or filtering.
We also measured training perplexity of the
models. The perplexity of our model was 15.79,
and that of IBM Model 5 was 9.84. For reference,
the perplexity after 5 iterations of Model 1 was
24.01. Perplexity values roughly indicate the pre-
dictive power of the model. Generally, lower per-
plexity means a better model, but it might cause
over-fitting to a training data. Since the IBM
Model usually requires millions of training sen-
tences, the lower perplexity value for the IBM
Model is likely due to over-fitting.
</bodyText>
<sectionHeader confidence="0.997369" genericHeader="method">
4 Conclusion
</sectionHeader>
<bodyText confidence="0.999970222222222">
We have presented a syntax-based translation
model that statistically models the translation pro-
cess from an English parse tree into a foreign-
language sentence. The model can make use of
syntactic information and performs better for lan-
guage pairs with different word orders and case
marking schema. We conducted a small-scale ex-
periment to compare the performance with IBM
Model 5, and got better alignment results.
</bodyText>
<sectionHeader confidence="0.75163" genericHeader="method">
Appendix: An Efficient EM algorithm
</sectionHeader>
<bodyText confidence="0.988370472222222">
This appendix describes an efficient implemen-
tation of the EM algorithm for our translation
model. This implementation uses a graph struc-
ture for a pair . A graph node is either a
major-node or a subnode. A major-node shows a
pairing of a subtree of and a substring of. A
subnode shows a selection of a value for
the subtree-substring pair (Figure 3).
Let be a substring of
from the word with length. Note this notation
is different from (Brown et al., 1993). A subtree
is a subtree of below the node. We assume
that a subtree is .
A major-node is a pair of a subtree
and a substring. The root of the graph is
, where is the length of. Each major-
node connects to several-subnodes
.
A-subnode connects to a final-
node with weight P if is a terminal node
,
showing which value of is selected. The
arc between and has weight
in . If is a non-terminal node, a-subnode
connects to several -subnodes ,
showing a selection of a value. The weight of
the arc is P .
A-subnode is then connected to -subnodes
. The partition variable, , shows
a particular way of partitioning.
A -subnode is then connected
to major-nodes which correspond to the children
ofand the substring of , decided by .
A major-node can be connected from different -
subnodes. The arc weights between-subnodes
and major-nodes are always 1.0.
</bodyText>
<figureCaption confidence="0.8610955">
Figure 3: Graph structure for efficient EM train-
ing.
</figureCaption>
<bodyText confidence="0.9973654">
. A trace starting from
the graph root, selecting one of the arcs from
major-nodes,-subnodes, and-subnodes, and
all the arcs from -subnodes, corresponds to a
particular, and the product of the weight on the
trace corresponds to P . Note that a trace
forms a tree, making branches at the -subnodes.
We define an alpha probability and a beta prob-
ability for each major-node, in analogy with the
measures used in the inside-outside algorithm
for probabilistic context free grammars (Baker,
1979).
The alpha probability (outside probability) is a
path probability from the graph root to the node
and the side branches of the node. The beta proba-
bility (inside probability) is a path probability be-
low the node.
Figure 4 shows formulae for alpha-
beta probabilities. From these definitions,
.
The counts ,, and for each
pair are also in the figure. Those formulae
replace the step 3 (in Section 2.3) for each training
pair, and these counts are used in the step 4.
The graph structure is generated by expanding
the root node . The beta probability for
each node is first calculated bottom-up, then the
alpha probability for each node is calculated top-
down. Once the alpha and beta probabilities for
each node are obtained, the counts are calculated
as above and used for updating the parameters.
The complexity of this training algorithm is
. The cube comes from the number
of parse tree nodes ( ) and the number of possible
French substrings ( ).
</bodyText>
<sectionHeader confidence="0.99893" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9983815">
This work was supported by DARPA-ITO grant
N66001-00-1-9814.
</bodyText>
<sectionHeader confidence="0.998971" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996669230769231">
H. Alshawi, S. Bangalore, and S. Douglas. 2000.
Learning dependency translation models as collec-
tions of finite state head transducers. Computa-
tional Linguistics, 26(1).
J. Baker. 1979. Trainable grammars for speech recog-
nition. In Speech Communication Papers for the
97th Meeting of the Acoustical Sciety ofAmerica.
A. Berger, P. Brown, S. Della Pietra, V. Della Pietra,
J. Gillett, J. Lafferty, R. Mercer, H. Printz, and
L. Ures. 1996. Language Translation Apparatus
and Method Using Context-Based Translation Mod-
els. U.S. Patent 5,510,981.
E. Brill. 1995. Transformation-based error-driven
learning and natural language processing: A case
study in part of specch tagging. Computational Lin-
guistics, 21(4).
P. Brown, J. Cocke, S. Della Pietra, F. Jelinek, R. Mer-
cer, and P. Roossin. 1988. A statistical approach to
language translation. In COLING-88.
P. Brown, J. Cocke, S. Della Pietra, F. Jelinek, R. Mer-
cer, and P. Roossin. 1991. Word-sense disambigua-
tion using statistical methods. In ACL-91.
P. Brown, S. Della Pietra, V. Della Pietra, and R. Mer-
cer. 1993. The mathematics of statistical machine
translation: Parameter estimation. Computational
Linguistics, 19(2).
</reference>
<figure confidence="0.998384461538461">
P
(v|c)
P
(P|c)
v
P
rz
This graph structure makes it easy
to obtain P for a particular and
P
Str
P
Str
</figure>
<figureCaption confidence="0.998398">
Figure 4: Formulae for alpha-beta probabilities, and the count derivation
</figureCaption>
<reference confidence="0.999852620689655">
M. Collins. 1999. Head-Driven Statistical Models for
Natural Language Parsing. Ph.D. thesis, Univer-
sity of Pennsylvania.
A. Dempster, N. Laird, and D. Rubin. 1977. Max-
imum likelihood from incomplete data via the em
algorithm. Royal Statistical Society Series B, 39.
M. Franz, J. McCarley, and R. Ward. 1999. Ad hoc,
cross-language and spoken document information
retrieval at IBM. In TREC-8.
D. Jones and R. Havrilla. 1998. Twisted pair gram-
mar: Support for rapid development of machine
translation for low density languages. In AMTA98.
I. Melamed. 2000. Models of translational equiv-
alence among words. Computational Linguistics,
26(2).
F. Och and H. Ney. 2000. Improved statistical align-
ment models. In ACL-2000.
F. Och, C. Tillmann, and H. Ney. 1999. Improved
alignment models for statistical machine transla-
tion. In EMNLP-99.
P. Resnik and I. Melamed. 1997. Semi-automatic ac-
quisition of domain-specific translation lexicons. In
ANLP-97.
Y. Wang. 1998. Grammar Inference and Statistical
Machine Translation. Ph.D. thesis, Carnegie Mel-
lon University.
D. Wu. 1997. Stochastic inversion transduction
grammars and bilingual parsing of parallel corpora.
Computational Linguistics, 23(3).
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.554209">
<title confidence="0.999353">A Syntax-based Statistical Translation Model</title>
<author confidence="0.999219">Yamada Knight</author>
<affiliation confidence="0.9986795">Information Sciences Institute University of Southern California</affiliation>
<address confidence="0.997738">4676 Admiralty Way, Suite 1001 Marina del Rey, CA 90292</address>
<email confidence="0.999404">kyamada,knight@isi.edu</email>
<abstract confidence="0.999280833333333">We present a syntax-based statistical translation model. Our model transforms a source-language parse tree into a target-language string by applying stochastic operations at each node. These operations capture linguistic differences such as word order and case marking. Model parameters are estimated in polynomial time using an EM algorithm. The model produces word alignments that are better than those</abstract>
<note confidence="0.567296">produced by IBM Model 5.</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>H Alshawi</author>
<author>S Bangalore</author>
<author>S Douglas</author>
</authors>
<title>Learning dependency translation models as collections of finite state head transducers.</title>
<date>2000</date>
<journal>Computational Linguistics,</journal>
<volume>26</volume>
<issue>1</issue>
<contexts>
<context position="3727" citStr="Alshawi et al. (2000)" startWordPosition="601" endWordPosition="604">e Japanese and Korean use case-marker particles. Wang (1998) enhanced the IBM models by introducing phrases, and Och et al. (1999) used templates to capture phrasal sequences in a sentence. Both also tried to incorporate structural aspects of the language, however, neither handles 1. Channel Input 2. Reordered VB PRP VB1 VB2 VB TO TO NN VB NN TO PRP TO VB2 VB VB1 VB PRP TO VB VB2 VB1 NN TO NN TO 4. Translated VB kare ha ongaku wo kiku no ga daisuki desu 5. Channel Output PRP VB2 VB1 TO VB 3. Inserted Figure 1: Channel Operations: Reorder, Insert, and Translate nested structures. Wu (1997) and Alshawi et al. (2000) showed statistical models based on syntactic structure. The way we handle syntactic parse trees is inspired by their work, although their approach is not to model the translation process, but to formalize a model that generates two languages at the same time. Our channel operations are also similar to the mechanism in Twisted Pair Grammar (Jones and Havrilla, 1998) used in their knowledge-based system. Following (Brown et al., 1993) and the other literature in TM, this paper only focuses the details of TM. Applications of our TM, such as machine translation or dictionary construction, will be</context>
</contexts>
<marker>Alshawi, Bangalore, Douglas, 2000</marker>
<rawString>H. Alshawi, S. Bangalore, and S. Douglas. 2000. Learning dependency translation models as collections of finite state head transducers. Computational Linguistics, 26(1).</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Baker</author>
</authors>
<title>Trainable grammars for speech recognition.</title>
<date>1979</date>
<booktitle>In Speech Communication Papers for the 97th Meeting of the Acoustical Sciety ofAmerica.</booktitle>
<contexts>
<context position="19029" citStr="Baker, 1979" startWordPosition="3289" endWordPosition="3290">. The arc weights between-subnodes and major-nodes are always 1.0. Figure 3: Graph structure for efficient EM training. . A trace starting from the graph root, selecting one of the arcs from major-nodes,-subnodes, and-subnodes, and all the arcs from -subnodes, corresponds to a particular, and the product of the weight on the trace corresponds to P . Note that a trace forms a tree, making branches at the -subnodes. We define an alpha probability and a beta probability for each major-node, in analogy with the measures used in the inside-outside algorithm for probabilistic context free grammars (Baker, 1979). The alpha probability (outside probability) is a path probability from the graph root to the node and the side branches of the node. The beta probability (inside probability) is a path probability below the node. Figure 4 shows formulae for alphabeta probabilities. From these definitions, . The counts ,, and for each pair are also in the figure. Those formulae replace the step 3 (in Section 2.3) for each training pair, and these counts are used in the step 4. The graph structure is generated by expanding the root node . The beta probability for each node is first calculated bottom-up, then t</context>
</contexts>
<marker>Baker, 1979</marker>
<rawString>J. Baker. 1979. Trainable grammars for speech recognition. In Speech Communication Papers for the 97th Meeting of the Acoustical Sciety ofAmerica.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Berger</author>
<author>P Brown</author>
<author>S Della Pietra</author>
<author>V Della Pietra</author>
<author>J Gillett</author>
<author>J Lafferty</author>
<author>R Mercer</author>
<author>H Printz</author>
<author>L Ures</author>
</authors>
<title>Language Translation Apparatus and Method Using Context-Based Translation Models.</title>
<date>1996</date>
<tech>U.S. Patent 5,510,981.</tech>
<contexts>
<context position="968" citStr="Berger et al., 1996" startWordPosition="139" endWordPosition="142">-language string by applying stochastic operations at each node. These operations capture linguistic differences such as word order and case marking. Model parameters are estimated in polynomial time using an EM algorithm. The model produces word alignments that are better than those produced by IBM Model 5. 1 Introduction A statistical translation model (TM) is a mathematical model in which the process of humanlanguage translation is statistically modeled. Model parameters are automatically estimated using a corpus of translation pairs. TMs have been used for statistical machine translation (Berger et al., 1996), word alignment of a translation corpus (Melamed, 2000), multilingual document retrieval (Franz et al., 1999), automatic dictionary construction (Resnik and Melamed, 1997), and data preparation for word sense disambiguation programs (Brown et al., 1991). Developing a better TM is a fundamental issue for those applications. Researchers at IBM first described such a statistical TM in (Brown et al., 1988). Their models are based on a string-to-string noisy channel model. The channel converts a sequence of words in one language (such as English) into another (such as French). The channel operatio</context>
<context position="7506" citStr="Berger et al., 1996" startWordPosition="1261" endWordPosition="1264">nslate operation to each leaf. We assume that this operation is dependent only on the word itself and that no context is consulted.2 The model’s t-table specifies the probability for all cases. Suppose we obtained the translations shown in the fourth tree of Figure 1. The probability of the translate operation here is . The total probability of the reorder, insert and translate operations in this example is 3.498e-9 1.828e-11. Note that there 2When a TM is used in machine translation, the TM’s role is to provide a list of possible translations, and a language model addresses the context. See (Berger et al., 1996). are many other combinations of such operations that yield the same Japanese sentence. Therefore, the probability of the Japanese sentence given the English parse tree is the sum of all these probabilities. We actually obtained the probability tables (Table 1) from a corpus of about two thousand pairs of English parse trees and Japanese sentences, completely automatically. Section 2.3 and Appendix 4 describe the training algorithm. 2.2 Formal Description This section formally describes our translation model. To make this paper comparable to (Brown et al., 1993), we use English-French notation</context>
</contexts>
<marker>Berger, Brown, Pietra, Pietra, Gillett, Lafferty, Mercer, Printz, Ures, 1996</marker>
<rawString>A. Berger, P. Brown, S. Della Pietra, V. Della Pietra, J. Gillett, J. Lafferty, R. Mercer, H. Printz, and L. Ures. 1996. Language Translation Apparatus and Method Using Context-Based Translation Models. U.S. Patent 5,510,981.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Brill</author>
</authors>
<title>Transformation-based error-driven learning and natural language processing: A case study in part of specch tagging.</title>
<date>1995</date>
<journal>Computational Linguistics,</journal>
<volume>21</volume>
<issue>4</issue>
<contexts>
<context position="12924" citStr="Brill, 1995" startWordPosition="2215" endWordPosition="2216">, we examined alignments produced by the learned model. For comparison, we also trained IBM Model 5 on the same corpus. 3.1 Training We extracted 2121 translation sentence pairs from a Japanese-English dictionary. These sentences were mostly short ones. The average sentence length was 6.9 for English and 9.7 for Japanese. However, many rare words were used, which made the task difficult. The vocabulary size was 3463 tokens for English, and 3983 tokens for Japanese, with 2029 tokens for English and 2507 tokens for Japanese occurring only once in the corpus. Brill’s part-of-speech (POS) tagger (Brill, 1995) and Collins’ parser (Collins, 1999) were used to obtain parse trees for the English side of the corpus. The output of Collins’ parser was 3Note that the algorithm performs full EM counting, whereas the IBM models only permit counting over a subset of possible alignments. modified in the following way. First, to reduce the number of parameters in the model, each node was re-labelled with the POS of the node’s head word, and some POS labels were collapsed. For example, labels for different verb endings (such as VBD for -ed and VBG for -ing) were changed to the same label VB. There were then 30 </context>
</contexts>
<marker>Brill, 1995</marker>
<rawString>E. Brill. 1995. Transformation-based error-driven learning and natural language processing: A case study in part of specch tagging. Computational Linguistics, 21(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Brown</author>
<author>J Cocke</author>
<author>S Della Pietra</author>
<author>F Jelinek</author>
<author>R Mercer</author>
<author>P Roossin</author>
</authors>
<title>A statistical approach to language translation.</title>
<date>1988</date>
<booktitle>In COLING-88.</booktitle>
<contexts>
<context position="1374" citStr="Brown et al., 1988" startWordPosition="203" endWordPosition="206">of humanlanguage translation is statistically modeled. Model parameters are automatically estimated using a corpus of translation pairs. TMs have been used for statistical machine translation (Berger et al., 1996), word alignment of a translation corpus (Melamed, 2000), multilingual document retrieval (Franz et al., 1999), automatic dictionary construction (Resnik and Melamed, 1997), and data preparation for word sense disambiguation programs (Brown et al., 1991). Developing a better TM is a fundamental issue for those applications. Researchers at IBM first described such a statistical TM in (Brown et al., 1988). Their models are based on a string-to-string noisy channel model. The channel converts a sequence of words in one language (such as English) into another (such as French). The channel operations are movements, duplications, and translations, applied to each word independently. The movement is conditioned only on word classes and positions in the string, and the duplication and translation are conditioned only on the word identity. Mathematical details are fully described in (Brown et al., 1993). One criticism of the IBM-style TM is that it does not model structural or syntactic aspects of th</context>
</contexts>
<marker>Brown, Cocke, Pietra, Jelinek, Mercer, Roossin, 1988</marker>
<rawString>P. Brown, J. Cocke, S. Della Pietra, F. Jelinek, R. Mercer, and P. Roossin. 1988. A statistical approach to language translation. In COLING-88.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Brown</author>
<author>J Cocke</author>
<author>S Della Pietra</author>
<author>F Jelinek</author>
<author>R Mercer</author>
<author>P Roossin</author>
</authors>
<title>Word-sense disambiguation using statistical methods.</title>
<date>1991</date>
<booktitle>In ACL-91.</booktitle>
<contexts>
<context position="1222" citStr="Brown et al., 1991" startWordPosition="175" endWordPosition="178">ts that are better than those produced by IBM Model 5. 1 Introduction A statistical translation model (TM) is a mathematical model in which the process of humanlanguage translation is statistically modeled. Model parameters are automatically estimated using a corpus of translation pairs. TMs have been used for statistical machine translation (Berger et al., 1996), word alignment of a translation corpus (Melamed, 2000), multilingual document retrieval (Franz et al., 1999), automatic dictionary construction (Resnik and Melamed, 1997), and data preparation for word sense disambiguation programs (Brown et al., 1991). Developing a better TM is a fundamental issue for those applications. Researchers at IBM first described such a statistical TM in (Brown et al., 1988). Their models are based on a string-to-string noisy channel model. The channel converts a sequence of words in one language (such as English) into another (such as French). The channel operations are movements, duplications, and translations, applied to each word independently. The movement is conditioned only on word classes and positions in the string, and the duplication and translation are conditioned only on the word identity. Mathematica</context>
</contexts>
<marker>Brown, Cocke, Pietra, Jelinek, Mercer, Roossin, 1991</marker>
<rawString>P. Brown, J. Cocke, S. Della Pietra, F. Jelinek, R. Mercer, and P. Roossin. 1991. Word-sense disambiguation using statistical methods. In ACL-91.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Brown</author>
<author>S Della Pietra</author>
<author>V Della Pietra</author>
<author>R Mercer</author>
</authors>
<title>The mathematics of statistical machine translation: Parameter estimation.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<volume>19</volume>
<issue>2</issue>
<contexts>
<context position="1875" citStr="Brown et al., 1993" startWordPosition="282" endWordPosition="285">amental issue for those applications. Researchers at IBM first described such a statistical TM in (Brown et al., 1988). Their models are based on a string-to-string noisy channel model. The channel converts a sequence of words in one language (such as English) into another (such as French). The channel operations are movements, duplications, and translations, applied to each word independently. The movement is conditioned only on word classes and positions in the string, and the duplication and translation are conditioned only on the word identity. Mathematical details are fully described in (Brown et al., 1993). One criticism of the IBM-style TM is that it does not model structural or syntactic aspects of the language. The TM was only demonstrated for a structurally similar language pair (English and French). It has been suspected that a language pair with very different word order such as English and Japanese would not be modeled well by these TMs. To incorporate structural aspects of the language, our channel model accepts a parse tree as an input, i.e., the input sentence is preprocessed by a syntactic parser. The channel performs operations on each node of the parse tree. The operations are reor</context>
<context position="4164" citStr="Brown et al., 1993" startWordPosition="671" endWordPosition="674">no ga daisuki desu 5. Channel Output PRP VB2 VB1 TO VB 3. Inserted Figure 1: Channel Operations: Reorder, Insert, and Translate nested structures. Wu (1997) and Alshawi et al. (2000) showed statistical models based on syntactic structure. The way we handle syntactic parse trees is inspired by their work, although their approach is not to model the translation process, but to formalize a model that generates two languages at the same time. Our channel operations are also similar to the mechanism in Twisted Pair Grammar (Jones and Havrilla, 1998) used in their knowledge-based system. Following (Brown et al., 1993) and the other literature in TM, this paper only focuses the details of TM. Applications of our TM, such as machine translation or dictionary construction, will be described in a separate paper. Section 2 describes our model in detail. Section 3 shows experimental results. We conclude with Section 4, followed by an Appendix describing the training algorithm in more detail. 2 The Model 2.1 An Example We first introduce our translation model with an example. Section 2.2 will describe the model more formally. We assume that an English parse tree is fed into a noisy channel and that it is translat</context>
<context position="5701" citStr="Brown et al. (1993)" startWordPosition="944" endWordPosition="947"> is given by the model’s r-table. Sample model parameters are shown in Table 1. We assume that only the sequence of child node labels influences the reordering. In Figure 1, the top VB node has a child sequence PRP-VB1-VB2. The probability of reordering it into PRP-VB2-VB1 is 0.723 (the second row in the r-table in Table 1). We also reorder VB-TO into TO-VB, and TO-NN into NN-TO, so therefore the probability of the second tree in Figure 1 is Next, an extra word is stochastically inserted at each node. A word can be inserted either to the left of the node, to the right of the node, or nowhere. Brown et al. (1993) assumes that there is an invisible NULL word in the input sentence and it generates output words that are distributed into random positions. Here, we instead decide the position on the basis of the nodes of the input parse tree. The insertion probability is determined by the n-table. For simplicity, we split the n-table into two: a table for insert positions and a table for words to be inserted (Table 1). The node’s label and its parent’s label are used to index the table for insert positions. For example, the PRP node in Figure 1 has parent VB, thus . Table 1: Model Parameter Tables n−table </context>
<context position="8074" citStr="Brown et al., 1993" startWordPosition="1350" endWordPosition="1353">el addresses the context. See (Berger et al., 1996). are many other combinations of such operations that yield the same Japanese sentence. Therefore, the probability of the Japanese sentence given the English parse tree is the sum of all these probabilities. We actually obtained the probability tables (Table 1) from a corpus of about two thousand pairs of English parse trees and Japanese sentences, completely automatically. Section 2.3 and Appendix 4 describe the training algorithm. 2.2 Formal Description This section formally describes our translation model. To make this paper comparable to (Brown et al., 1993), we use English-French notation in this section. We assume that an English parse tree is transformed into a French sentence. Let the English parse tree consist of nodes , and let the output French sentence consist of French words . Three random variables, ,, and are channel operations applied to each node. Insertion is an operation that inserts a French word just before or after the node. The insertion can be none, left, or right. Also it decides what French word to insert. Reorder is an operation that changes the order of the children of the node. If a node has three children, e.g., there ar</context>
<context position="17640" citStr="Brown et al., 1993" startWordPosition="3042" endWordPosition="3045">schema. We conducted a small-scale experiment to compare the performance with IBM Model 5, and got better alignment results. Appendix: An Efficient EM algorithm This appendix describes an efficient implementation of the EM algorithm for our translation model. This implementation uses a graph structure for a pair . A graph node is either a major-node or a subnode. A major-node shows a pairing of a subtree of and a substring of. A subnode shows a selection of a value for the subtree-substring pair (Figure 3). Let be a substring of from the word with length. Note this notation is different from (Brown et al., 1993). A subtree is a subtree of below the node. We assume that a subtree is . A major-node is a pair of a subtree and a substring. The root of the graph is , where is the length of. Each majornode connects to several-subnodes . A-subnode connects to a finalnode with weight P if is a terminal node , showing which value of is selected. The arc between and has weight in . If is a non-terminal node, a-subnode connects to several -subnodes , showing a selection of a value. The weight of the arc is P . A-subnode is then connected to -subnodes . The partition variable, , shows a particular way of partiti</context>
</contexts>
<marker>Brown, Pietra, Pietra, Mercer, 1993</marker>
<rawString>P. Brown, S. Della Pietra, V. Della Pietra, and R. Mercer. 1993. The mathematics of statistical machine translation: Parameter estimation. Computational Linguistics, 19(2).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Collins</author>
</authors>
<title>Head-Driven Statistical Models for Natural Language Parsing.</title>
<date>1999</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="12960" citStr="Collins, 1999" startWordPosition="2220" endWordPosition="2221">by the learned model. For comparison, we also trained IBM Model 5 on the same corpus. 3.1 Training We extracted 2121 translation sentence pairs from a Japanese-English dictionary. These sentences were mostly short ones. The average sentence length was 6.9 for English and 9.7 for Japanese. However, many rare words were used, which made the task difficult. The vocabulary size was 3463 tokens for English, and 3983 tokens for Japanese, with 2029 tokens for English and 2507 tokens for Japanese occurring only once in the corpus. Brill’s part-of-speech (POS) tagger (Brill, 1995) and Collins’ parser (Collins, 1999) were used to obtain parse trees for the English side of the corpus. The output of Collins’ parser was 3Note that the algorithm performs full EM counting, whereas the IBM models only permit counting over a subset of possible alignments. modified in the following way. First, to reduce the number of parameters in the model, each node was re-labelled with the POS of the node’s head word, and some POS labels were collapsed. For example, labels for different verb endings (such as VBD for -ed and VBG for -ing) were changed to the same label VB. There were then 30 different node labels, and 474 uniqu</context>
</contexts>
<marker>Collins, 1999</marker>
<rawString>M. Collins. 1999. Head-Driven Statistical Models for Natural Language Parsing. Ph.D. thesis, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Dempster</author>
<author>N Laird</author>
<author>D Rubin</author>
</authors>
<title>Maximum likelihood from incomplete data via the em algorithm.</title>
<date>1977</date>
<journal>Royal Statistical Society Series B,</journal>
<volume>39</volume>
<contexts>
<context position="10334" citStr="Dempster et al., 1977" startWordPosition="1761" endWordPosition="1764">n particular features of the node. Then, of children was used for . The last line in the above formula introduces a change in notation, meaning that those probabilities are the model parameters ,, and , where ,, and are the possible values for , , and , respectively. In summary, the probability of getting a French sentence given an English parse tree is P Str where and , P and P , decide the behavior of the translation model, and these are the probabilities we want to estimate from a training corpus. 2.3 Automatic Parameter Estimation To estimate the model parameters, we use the EM algorithm (Dempster et al., 1977). The algorithm iteratively updates the model parameters to maximize the likelihood of the training corpus. First, the model parameters are initialized. We used a uniform distribution, but it can be a distribution taken from other models. For each iteration, the number of events are counted and weighted by the probabilities of the events. The probabilities of events are calculated from the current model parameters. The model parameters are re-estimated based on the counts, and used for the next iteration. In our case, an event is a pair of a value of a random variable (such as,, or) and a feat</context>
</contexts>
<marker>Dempster, Laird, Rubin, 1977</marker>
<rawString>A. Dempster, N. Laird, and D. Rubin. 1977. Maximum likelihood from incomplete data via the em algorithm. Royal Statistical Society Series B, 39.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Franz</author>
<author>J McCarley</author>
<author>R Ward</author>
</authors>
<title>Ad hoc, cross-language and spoken document information retrieval at IBM.</title>
<date>1999</date>
<booktitle>In TREC-8.</booktitle>
<contexts>
<context position="1078" citStr="Franz et al., 1999" startWordPosition="156" endWordPosition="159">s such as word order and case marking. Model parameters are estimated in polynomial time using an EM algorithm. The model produces word alignments that are better than those produced by IBM Model 5. 1 Introduction A statistical translation model (TM) is a mathematical model in which the process of humanlanguage translation is statistically modeled. Model parameters are automatically estimated using a corpus of translation pairs. TMs have been used for statistical machine translation (Berger et al., 1996), word alignment of a translation corpus (Melamed, 2000), multilingual document retrieval (Franz et al., 1999), automatic dictionary construction (Resnik and Melamed, 1997), and data preparation for word sense disambiguation programs (Brown et al., 1991). Developing a better TM is a fundamental issue for those applications. Researchers at IBM first described such a statistical TM in (Brown et al., 1988). Their models are based on a string-to-string noisy channel model. The channel converts a sequence of words in one language (such as English) into another (such as French). The channel operations are movements, duplications, and translations, applied to each word independently. The movement is conditio</context>
</contexts>
<marker>Franz, McCarley, Ward, 1999</marker>
<rawString>M. Franz, J. McCarley, and R. Ward. 1999. Ad hoc, cross-language and spoken document information retrieval at IBM. In TREC-8.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Jones</author>
<author>R Havrilla</author>
</authors>
<title>Twisted pair grammar: Support for rapid development of machine translation for low density languages.</title>
<date>1998</date>
<booktitle>In AMTA98.</booktitle>
<contexts>
<context position="4095" citStr="Jones and Havrilla, 1998" startWordPosition="661" endWordPosition="664">1 VB PRP TO VB VB2 VB1 NN TO NN TO 4. Translated VB kare ha ongaku wo kiku no ga daisuki desu 5. Channel Output PRP VB2 VB1 TO VB 3. Inserted Figure 1: Channel Operations: Reorder, Insert, and Translate nested structures. Wu (1997) and Alshawi et al. (2000) showed statistical models based on syntactic structure. The way we handle syntactic parse trees is inspired by their work, although their approach is not to model the translation process, but to formalize a model that generates two languages at the same time. Our channel operations are also similar to the mechanism in Twisted Pair Grammar (Jones and Havrilla, 1998) used in their knowledge-based system. Following (Brown et al., 1993) and the other literature in TM, this paper only focuses the details of TM. Applications of our TM, such as machine translation or dictionary construction, will be described in a separate paper. Section 2 describes our model in detail. Section 3 shows experimental results. We conclude with Section 4, followed by an Appendix describing the training algorithm in more detail. 2 The Model 2.1 An Example We first introduce our translation model with an example. Section 2.2 will describe the model more formally. We assume that an E</context>
</contexts>
<marker>Jones, Havrilla, 1998</marker>
<rawString>D. Jones and R. Havrilla. 1998. Twisted pair grammar: Support for rapid development of machine translation for low density languages. In AMTA98.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Melamed</author>
</authors>
<title>Models of translational equivalence among words.</title>
<date>2000</date>
<journal>Computational Linguistics,</journal>
<volume>26</volume>
<issue>2</issue>
<contexts>
<context position="1024" citStr="Melamed, 2000" startWordPosition="150" endWordPosition="151">e. These operations capture linguistic differences such as word order and case marking. Model parameters are estimated in polynomial time using an EM algorithm. The model produces word alignments that are better than those produced by IBM Model 5. 1 Introduction A statistical translation model (TM) is a mathematical model in which the process of humanlanguage translation is statistically modeled. Model parameters are automatically estimated using a corpus of translation pairs. TMs have been used for statistical machine translation (Berger et al., 1996), word alignment of a translation corpus (Melamed, 2000), multilingual document retrieval (Franz et al., 1999), automatic dictionary construction (Resnik and Melamed, 1997), and data preparation for word sense disambiguation programs (Brown et al., 1991). Developing a better TM is a fundamental issue for those applications. Researchers at IBM first described such a statistical TM in (Brown et al., 1988). Their models are based on a string-to-string noisy channel model. The channel converts a sequence of words in one language (such as English) into another (such as French). The channel operations are movements, duplications, and translations, applie</context>
</contexts>
<marker>Melamed, 2000</marker>
<rawString>I. Melamed. 2000. Models of translational equivalence among words. Computational Linguistics, 26(2).</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Och</author>
<author>H Ney</author>
</authors>
<title>Improved statistical alignment models.</title>
<date>2000</date>
<booktitle>In ACL-2000.</booktitle>
<contexts>
<context position="14222" citStr="Och and Ney, 2000" startWordPosition="2449" endWordPosition="2452">as flattened if the node’s head-word was the same as the parent’s headword. For example, (NN1 (VB NN2)) was flattened to (NN1 VB NN2) if the VB was a head word for both NN1 and NN2. This flattening was motivated by various word orders in different languages. An English SVO structure is translated into SOV in Japanese, or into VSO in Arabic. These differences are easily modeled by the flattened subtree (NN1 VB NN2), rather than (NN1 (VB NN2)). We ran 20 iterations of the EM algorithm as described in Section 2.2. IBM Model 5 was sequentially bootstrapped with Model 1, an HMM Model, and Model 3 (Och and Ney, 2000). Each preceding model and the final Model 5 were trained with five iterations (total 20 iterations). 3.2 Evaluation The training procedure resulted in the tables of estimated model parameters. Table 1 in Section 2.1 shows part of those parameters obtained by the training above. To evaluate performance, we let the models generate the most probable alignment of the training corpus (called the Viterbi alignment). The alignment shows how the learned model induces the internal structure of the training data. Figure 2 shows alignments produced by our model and IBM Model 5. Darker lines indicates th</context>
</contexts>
<marker>Och, Ney, 2000</marker>
<rawString>F. Och and H. Ney. 2000. Improved statistical alignment models. In ACL-2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Och</author>
<author>C Tillmann</author>
<author>H Ney</author>
</authors>
<title>Improved alignment models for statistical machine translation.</title>
<date>1999</date>
<booktitle>In EMNLP-99.</booktitle>
<contexts>
<context position="3236" citStr="Och et al. (1999)" startWordPosition="507" endWordPosition="510">Note that the output of our model is a string, not a parse tree. Therefore, parsing is only needed on the channel input side. The reorder operation is intended to model translation between languages with different word orders, such as SVO-languages (English or Chinese) and SOV-languages (Japanese or Turkish). The word-insertion operation is intended to capture linguistic differences in specifying syntactic cases. E.g., English and French use structural position to specify case, while Japanese and Korean use case-marker particles. Wang (1998) enhanced the IBM models by introducing phrases, and Och et al. (1999) used templates to capture phrasal sequences in a sentence. Both also tried to incorporate structural aspects of the language, however, neither handles 1. Channel Input 2. Reordered VB PRP VB1 VB2 VB TO TO NN VB NN TO PRP TO VB2 VB VB1 VB PRP TO VB VB2 VB1 NN TO NN TO 4. Translated VB kare ha ongaku wo kiku no ga daisuki desu 5. Channel Output PRP VB2 VB1 TO VB 3. Inserted Figure 1: Channel Operations: Reorder, Insert, and Translate nested structures. Wu (1997) and Alshawi et al. (2000) showed statistical models based on syntactic structure. The way we handle syntactic parse trees is inspired </context>
</contexts>
<marker>Och, Tillmann, Ney, 1999</marker>
<rawString>F. Och, C. Tillmann, and H. Ney. 1999. Improved alignment models for statistical machine translation. In EMNLP-99.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Resnik</author>
<author>I Melamed</author>
</authors>
<title>Semi-automatic acquisition of domain-specific translation lexicons.</title>
<date>1997</date>
<booktitle>In ANLP-97.</booktitle>
<contexts>
<context position="1140" citStr="Resnik and Melamed, 1997" startWordPosition="163" endWordPosition="166">are estimated in polynomial time using an EM algorithm. The model produces word alignments that are better than those produced by IBM Model 5. 1 Introduction A statistical translation model (TM) is a mathematical model in which the process of humanlanguage translation is statistically modeled. Model parameters are automatically estimated using a corpus of translation pairs. TMs have been used for statistical machine translation (Berger et al., 1996), word alignment of a translation corpus (Melamed, 2000), multilingual document retrieval (Franz et al., 1999), automatic dictionary construction (Resnik and Melamed, 1997), and data preparation for word sense disambiguation programs (Brown et al., 1991). Developing a better TM is a fundamental issue for those applications. Researchers at IBM first described such a statistical TM in (Brown et al., 1988). Their models are based on a string-to-string noisy channel model. The channel converts a sequence of words in one language (such as English) into another (such as French). The channel operations are movements, duplications, and translations, applied to each word independently. The movement is conditioned only on word classes and positions in the string, and the </context>
</contexts>
<marker>Resnik, Melamed, 1997</marker>
<rawString>P. Resnik and I. Melamed. 1997. Semi-automatic acquisition of domain-specific translation lexicons. In ANLP-97.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Wang</author>
</authors>
<title>Grammar Inference and Statistical Machine Translation.</title>
<date>1998</date>
<tech>Ph.D. thesis,</tech>
<institution>Carnegie Mellon University.</institution>
<contexts>
<context position="3166" citStr="Wang (1998)" startWordPosition="496" endWordPosition="497">ds. Figure 1 shows the overview of the operations of our model. Note that the output of our model is a string, not a parse tree. Therefore, parsing is only needed on the channel input side. The reorder operation is intended to model translation between languages with different word orders, such as SVO-languages (English or Chinese) and SOV-languages (Japanese or Turkish). The word-insertion operation is intended to capture linguistic differences in specifying syntactic cases. E.g., English and French use structural position to specify case, while Japanese and Korean use case-marker particles. Wang (1998) enhanced the IBM models by introducing phrases, and Och et al. (1999) used templates to capture phrasal sequences in a sentence. Both also tried to incorporate structural aspects of the language, however, neither handles 1. Channel Input 2. Reordered VB PRP VB1 VB2 VB TO TO NN VB NN TO PRP TO VB2 VB VB1 VB PRP TO VB VB2 VB1 NN TO NN TO 4. Translated VB kare ha ongaku wo kiku no ga daisuki desu 5. Channel Output PRP VB2 VB1 TO VB 3. Inserted Figure 1: Channel Operations: Reorder, Insert, and Translate nested structures. Wu (1997) and Alshawi et al. (2000) showed statistical models based on syn</context>
</contexts>
<marker>Wang, 1998</marker>
<rawString>Y. Wang. 1998. Grammar Inference and Statistical Machine Translation. Ph.D. thesis, Carnegie Mellon University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Wu</author>
</authors>
<title>Stochastic inversion transduction grammars and bilingual parsing of parallel corpora.</title>
<date>1997</date>
<journal>Computational Linguistics,</journal>
<volume>23</volume>
<issue>3</issue>
<contexts>
<context position="3701" citStr="Wu (1997)" startWordPosition="598" endWordPosition="599">ify case, while Japanese and Korean use case-marker particles. Wang (1998) enhanced the IBM models by introducing phrases, and Och et al. (1999) used templates to capture phrasal sequences in a sentence. Both also tried to incorporate structural aspects of the language, however, neither handles 1. Channel Input 2. Reordered VB PRP VB1 VB2 VB TO TO NN VB NN TO PRP TO VB2 VB VB1 VB PRP TO VB VB2 VB1 NN TO NN TO 4. Translated VB kare ha ongaku wo kiku no ga daisuki desu 5. Channel Output PRP VB2 VB1 TO VB 3. Inserted Figure 1: Channel Operations: Reorder, Insert, and Translate nested structures. Wu (1997) and Alshawi et al. (2000) showed statistical models based on syntactic structure. The way we handle syntactic parse trees is inspired by their work, although their approach is not to model the translation process, but to formalize a model that generates two languages at the same time. Our channel operations are also similar to the mechanism in Twisted Pair Grammar (Jones and Havrilla, 1998) used in their knowledge-based system. Following (Brown et al., 1993) and the other literature in TM, this paper only focuses the details of TM. Applications of our TM, such as machine translation or dictio</context>
</contexts>
<marker>Wu, 1997</marker>
<rawString>D. Wu. 1997. Stochastic inversion transduction grammars and bilingual parsing of parallel corpora. Computational Linguistics, 23(3).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>