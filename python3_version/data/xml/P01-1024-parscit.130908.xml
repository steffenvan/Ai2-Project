<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000002">
<title confidence="0.9987905">
Topological Dependency Trees:
A Constraint-Based Account of Linear Precedence
</title>
<author confidence="0.655102">
Denys Duchier
</author>
<affiliation confidence="0.617769">
Programming Systems Lab
Universit¨at des Saarlandes, Geb. 45
</affiliation>
<address confidence="0.941324">
Postfach 15 11 50
66041 Saarbr¨ucken, Germany
</address>
<email confidence="0.99723">
duchier@ps.uni-sb.de
</email>
<author confidence="0.971304">
Ralph Debusmann
</author>
<affiliation confidence="0.8523145">
Computational Linguistics
Universit¨at des Saarlandes, Geb. 17
</affiliation>
<address confidence="0.9703635">
Postfach 15 11 50
66041 Saarbr¨ucken, Germany
</address>
<email confidence="0.998661">
rade@coli.uni-sb.de
</email>
<sectionHeader confidence="0.99388" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999918">
We describe a new framework for de-
pendency grammar, with a modular de-
composition of immediate dependency
and linear precedence. Our approach
distinguishes two orthogonal yet mutu-
ally constraining structures: a syntactic
dependency tree and a topological de-
pendency tree. The syntax tree is non-
projective and even non-ordered, while
the topological tree is projective and
partially ordered.
</bodyText>
<sectionHeader confidence="0.998991" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999846361111111">
Linear precedence in so-called free word order
languages remains challenging for modern gram-
mar formalisms. To address this issue, we pro-
pose a new framework for dependency gram-
mar which supports the modular decomposition
of immediate dependency and linear precedence.
Duchier (1999) formulated a constraint-based ax-
iomatization of dependency parsing which char-
acterized well-formed syntax trees but ignored is-
sues of word order. In this article, we develop a
complementary approach dedicated to the treat-
ment of linear precedence.
Our framework distinguishes two orthogonal,
yet mutually constraining structures: a syntactic
dependency tree (ID tree) and a topological de-
pendency tree (LP tree). While edges of the ID
tree are labeled by syntactic roles, those of the
LP tree are labeled by topological fields (Bech,
1955). The shape of the LP tree is a flattening of
the ID tree’s obtained by allowing nodes to ‘climb
up’ to land in an appropriate field at a host node
where that field is available. Our theory of ID/LP
trees is formulated in terms of (a) lexicalized con-
straints and (b) principles governing e.g. climbing
conditions.
In Section 2 we discuss the difficulties pre-
sented by discontinuous constructions in free
word order languages, and briefly touch on the
limitations of Reape’s (1994) popular theory of
‘word order domains’. In Section 3 we introduce
the concept of topological dependency tree. In
Section 4 we outline the formal framework for
our theory of ID/LP trees. Finally, in Section 5
we illustrate our approach with an account of the
word-order phenomena in the verbal complex of
German verb final sentences.
</bodyText>
<sectionHeader confidence="0.99646" genericHeader="method">
2 Discontinuous Constructions
</sectionHeader>
<bodyText confidence="0.999931">
In free word order languages, discontinuous con-
structions occur frequently. German, for example,
is subject to scrambling and partial extraposition.
In typical phrase structure based analyses, such
phenomena lead to e.g. discontinuous VPs:
</bodyText>
<equation confidence="0.952286">
(1) (dass)
(that)
</equation>
<bodyText confidence="0.9684594">
whose natural syntax tree exhibits crossing edges:
Since this is classically disallowed, discontinu-
ous constituents must often be handled indirectly
through grammar extensions such as traces.
Reape (1994) proposed the theory of word or-
der domains which became quite popular in the
HPSG community and inspired others such as
M¨uller (1999) and Kathol (2000). Reape distin-
guished two orthogonal tree structures: (a) the un-
ordered syntax tree, (b) the totally ordered tree of
</bodyText>
<figure confidence="0.991049">
V
NP
S
NP V
VP
DET N
(dass) einen Mann Maria zu lieben versucht
einen Mann Maria zu lieben versucht
a manacc Marianom to love tries
</figure>
<bodyText confidence="0.989211166666667">
word order domains. The latter is obtained from
the syntax tree by flattening using the operation
of domain union to produce arbitrary interleav-
ings. The boolean feature [uf] of each node con-
trols whether it must be flattened out or not. In-
finitives in canonical position are assigned [u+]:
Thus, the above licenses the following tree of
word order domains:
Extraposed infinitives are assigned [u−]:
As a consequence, Reape’s theory correctly pre-
dicts scrambling (2,3) and full extraposition (4),
but cannot handle the partial extraposition in (5):
</bodyText>
<listItem confidence="0.99968925">
(2) (dass) Maria einen Mann zu lieben versucht
(3) (dass) einen Mann Maria zu lieben versucht
(4) (dass) Maria versucht, einen Mann zu lieben
(5) (dass) Maria einen Mann versucht, zu lieben
</listItem>
<sectionHeader confidence="0.973066" genericHeader="method">
3 Topological Dependency Trees
</sectionHeader>
<bodyText confidence="0.999816724137931">
Our approach is based on dependency grammar.
We also propose to distinguish two structures: (a)
a tree of syntactic dependencies, (b) a tree of topo-
logical dependencies. The syntax tree (ID tree) is
unordered and non-projective (i.e. it admits cross-
ing edges). For display purposes, we pick an ar-
bitrary linear arrangement:
The topological tree (LP tree) is partially ordered
and projective:
Its edge labels are called (external) fields and are
totally ordered: df � mf � vc. This induces a
linear precedence among the daughters of a node
in the LP tree. This precedence is partial because
daughters with the same label may be freely per-
muted.
In order to obtain a linearization of a LP tree,
it is also necessary to position each node with
respect to its daughters. For this reason, each
node is also assigned an internal field (d, n, or v)
shown above on the vertical pseudo-edges. The
set of internal and external fields is totally or-
dered: d � df � n � mf � vc � v
Like Reape, our LP tree is a flattened version of
the ID tree (Reape, 1994; Uszkoreit, 1987), but
the flattening doesn’t happen by ‘unioning up’;
rather, we allow each individual daughter to climb
up to find an appropriate landing place. This idea
is reminiscent of GB, but, as we shall see, pro-
ceeds rather differently.
</bodyText>
<sectionHeader confidence="0.999399" genericHeader="method">
4 Formal Framework
</sectionHeader>
<bodyText confidence="0.997534125">
The framework underlying both ID and LP trees
is the configuration of labeled trees under valency
(and other) constraints. Consider a finite set L
of edge labels, a finite set V of nodes, and E C_
V x V x L a finite set of directed labeled edges,
such that (V, E) forms a tree. We write w−−-+� w&apos;
for an edge labeled ` from w to w&apos;. We define the
`-daughters `(w) of w E V as follows:
</bodyText>
<figure confidence="0.961146508474576">
S
VP[u+]
NP[u−]
(dass)
Maria
DET
einen
N
Mann
zu lieben
versucht
V
V
NP
V
NP
NP
S
(dass)
DET
einen
N
Mann
Maria
zu lieben
V
versucht
V
VP[u−]
S
V
NP
(dass)
Maria
versucht
DET
einen
N
Mann
zu lieben
NP
(dass) Maria einen Mann zu lieben versucht
(dass) Maria einen Mann zu lieben versucht
n
d
n v
v
`(w) = {w&apos; E V  |w−−-+� w&apos; E E}
We write � ��
L for the set of valency specifications
defined by the following abstract syntax:
(? ::= (?  |(??  |(?∗ ((? ∈ L)
A valency is a subset of L. The tree (V, E) satis-
fies the valency assignment valency : V → 21c if
for all w ∈ V and all E ∈ L:
E ∈ valency(w) ⇒ |f(w) |= 1
E? ∈ valency(w) ⇒ |f(w) |≤ 1
E∗ ∈ valency(w) ⇒ |f(w) |≥ 0
otherwise ⇒ |f(w) |= 0
</figure>
<subsectionHeader confidence="0.895612">
4.1 ID Trees
</subsectionHeader>
<bodyText confidence="0.976424416666667">
An ID tree (V, EID, lex, cat, valencyID) consists
of a tree (V, EID) with EID ⊆ V × V × R, where
the set R of edge labels (Figure 1) represents syn-
tactic roles such as subject or vinf (bare infinitive
argument). lex : V → Lexicon assigns a lexi-
cal entry to each node. An illustrative Lexicon is
displayed in Figure 1 where the 2 features cats
and valencyID of concern to ID trees are grouped
under table heading “Syntax”. Finally, cat and
�
valencyID assign a category and an R valency to
each node w ∈ V and must satisfy:
</bodyText>
<equation confidence="0.9981605">
cat(w) ∈ lex(w).cats
valencyID(w) = lex(w).valencyID
</equation>
<bodyText confidence="0.998710666666667">
(V, EID) must satisfy the valencyID assignment as
described earlier. For example the lexical entry
for versucht specifies (Figure 1):
</bodyText>
<equation confidence="0.985901">
valencyID(versucht) = {subject,zuvinf}
</equation>
<bodyText confidence="0.993866333333333">
Furthermore, (V, EID) must also satisfy the
edge constraints stipulated by the grammar
(see Figure 1). For example, for an edge
w−−−−→det w&apos; to be licensed, w&apos; must be assigned
category det and both w and w&apos; must be assigned
the same agreement.1
</bodyText>
<subsectionHeader confidence="0.981502">
4.2 LP Trees
</subsectionHeader>
<bodyText confidence="0.992403923076923">
An LP tree (V, ELP, lex, valencyLP, fieldext, fieldint)
consists of a tree (V, ELP) with ELP ⊆
V × V × Fext, where the set Fext of edge
labels represents topological fields (Bech, 1955):
df the determiner field, mf the ‘Mittelfeld’, vc
&apos;Issues of agreement will not be further considered in this
paper.
the verbal complement field, xf the extraposition
field. Features of lexical entries relevant to LP
trees are grouped under table heading &amp;quot;_Topology”
in Figure 1. valencyLP assigns a Fext valency
to each node and is subject to the lexicalized
constraint:
</bodyText>
<equation confidence="0.97082">
valencyLP(w) = lex(w).valencyLP
</equation>
<bodyText confidence="0.994843333333333">
(V, ELP) must satisfy the valencyLP assignment
as described earlier. For example, the lexical en-
try for zu lieben2 specifies:
</bodyText>
<equation confidence="0.994406">
valencyLP(zulieben2) = {mf∗,xf?}
</equation>
<bodyText confidence="0.99081805">
which permits 0 or more mf edges and at most
one xf edge; we say that it offers fields mf and xf.
Unlike the ID tree, the LP tree must be projective.
The grammar stipulates a total order on Fext,
thus inducing a partial linear precedence on each
node’s daughters. This order is partial because
all daughters in the same field may be freely per-
muted: our account of scrambling rests on free
permutations within the mf field. In order to ob-
tain a linearization of the LP tree, it is necessary
to specify the position of a node with respect to its
daughters. For this reason each node is assigned
an internal field in Fint. The set Fext ∪ Fint is to-
tally ordered:
d ≺ df ≺ n ≺ mf ≺ vc ≺ v ≺ xf
In what (external) field a node may land and
what internal field it may be assigned is deter-
mined by assignments fieldext : V → Fext and
fieldint : V → Fint which are subject to the lexi-
calized constraints:
</bodyText>
<equation confidence="0.9607205">
fieldext(w) ∈ lex(w).fieldext
fieldint(w) ∈ lex(w).fieldint
</equation>
<bodyText confidence="0.979064">
For example, zu lieben1 may only land in field vc
(canonical position), and zu lieben2 only in xf (ex-
traposed position). The LP tree must satisfy:
</bodyText>
<equation confidence="0.741647">
w−−→� w&apos; ∈ ELP ⇒ E = fieldext(w&apos;)
</equation>
<bodyText confidence="0.998334833333333">
Thus, whether an edge w−−→� w&apos; is licensed de-
pends both on valencyLP(w) and on fieldext(w&apos;).
In other words: w must offer field E and w&apos; must
accept it.
For an edge w−−→� w&apos; in the ID tree, we say that
w is the head of w&apos;. For a similar edge in the LP
</bodyText>
<equation confidence="0.984328941176471">
Grammar Symbols
C = {det, n, vfin, vinf, vpast, zuvinf} (Categories)
R = {det, subject, object, vinf, vpast, zuvinf} (Syntactic Roles)
Fext = {df, mf, vc, xf} (External Topological Fields)
Fint = {d, n, v} (Internal Topological Fields)
d ≺ df ≺ n ≺ mf ≺ vc ≺ v ≺ xf (Topological Ordering)
Edge Constraints
wzzzzzzzz→det w&apos; cat(w&apos;) = det ∧ agr(w) = agr(w&apos;)
wzzzzwzzzzzzzz→
subject w&apos; cat(w&apos;) = n ∧ agr(w) = agr(w&apos;) E NOM
zzzz→
object w&apos; cat(w&apos;) = n ∧ agr(w&apos;) E ACC
wzzzzzzzz→vinf w&apos; cat(w&apos;) = vinf
wzzzzwzz−zzzzz→
vpast w&apos; cat(w&apos;) = vpast
zzzz→
zuvinf w&apos; cat(w&apos;) = zuvinf
</equation>
<table confidence="0.9977661875">
Lexicon
Word Syntax Topology
cats valencyID fieldint fieldext valencyLP
einen {det} {} {d} {df} {}
Mann {n} {det} {n} {mf} {df?}
Maria {n} {} {n} {mf} {}
lieben {vinf} {object?} {v} {vc} {}
geliebt {vpast} {object?} {v} {vc} {}
k¨onnen1 {vinf} {vinf} {v} {vc} {vc?}
k¨onnen2 {vinf, vpast} {vinf} {v} {xf} {mf*, vc?, xf?}
wird {vfin} {subject, vinf} {v} {vc} {mf*, vc?, xf?}
haben {vinf} {vpast} {v} {xf} {mf*, vc?, xf?}
hat {vinf} {subject, vpast} {v} {vc} {mf*, vc?, xf?}
zu lieben1 {zuvinf} {object?} {v} {vc} {}
zu lieben2 {zuvinf} {object?} {v} {xf} {mf*, xf?}
versucht {vfin} {subject, zuvinf} {v} {vc} {mf*, vc?, xf?}
</table>
<figureCaption confidence="0.997739">
Figure 1: Grammar Fragment
</figureCaption>
<bodyText confidence="0.945599230769231">
tree, we say that w is the host of w&apos; or that w&apos;
lands on w. The shape of the LP tree is a flat-
tened version of the ID tree which is obtained by
allowing nodes to climb up subject to the follow-
ing principles:
Principle 1 a node must land on a transitive
head2
Principle 2 it may not climb through a barrier
We will not elaborate the notion of barrier which
is beyond the scope of this article, but, for exam-
ple, a noun will prevent a determiner from climb-
ing through it, and finite verbs are typically gen-
eral barriers.
</bodyText>
<footnote confidence="0.9252">
2This is Brocker’s terminology and means a node in the
transitive closure of the head relation.
</footnote>
<bodyText confidence="0.921701666666667">
Principle 3 a node must land on, or climb higher
than, its head
Subject to these principles, a node w&apos; may climb
up to any host w which offers a field licensed by
fieldext(w&apos;).
Definition. An ID/LP analysis is a tuple (V,
EID, ELP, lex, cat, valencyID, valencyLP, fieldext,
fieldint) such that (V, EID, lex, cat, valencyID) is
an ID tree and (V, ELP, lex, valencyLP, fieldext,
fieldint) is an LP tree and all principles are sat-
isfied.
Our approach has points of similarity with
(Br¨oker, 1999) but eschews modal logic in fa-
vor of a simpler and arguably more perspicuous
constraint-based formulation. It is also related
</bodyText>
<figure confidence="0.9872429">
einen
a
lieben
love
wird
will
Mann
manacc
Maria
Marianom
</figure>
<bodyText confidence="0.9884965">
to the lifting rules of (Kahane et al., 1998), but
where they choose to stipulate rules that license
liftings, we opt instead for placing constraints on
otherwise unrestricted climbing.
</bodyText>
<sectionHeader confidence="0.507025" genericHeader="method">
5 German Verbal Phenomena
</sectionHeader>
<bodyText confidence="0.993395714285714">
We now illustrate our theory by applying it to the
treatment of word order phenomena in the verbal
complex of German verb final sentences. We as-
sume the grammar and lexicon shown in Figure 1.
These are intended purely for didactic purposes
and we extend for them no claim of linguistic ad-
equacy.
</bodyText>
<figure confidence="0.7525609375">
5.1 VP Eztraposition
Control verbs like versuchen or versprechen al-
low their zu-infinitival complement to be option-
ally extraposed. This phenomenon is also known
as optional coherence.
(6) (dass) Maria einen Mann zu lieben versucht
(7) (dass) Maria versucht, einen Mann zu lieben
Both examples share the following ID tree:
(dass) Maria einen Mann zu lieben versucht
Optional extraposition is handled by having two
lexical entries for zu lieben. One requires it to
land in canonical position:
fieldext(zu lieben1) _ {vc}
the other requires it to be extraposed:
fieldext(zu lieben2) _ {xf}
In the canonical case, zu lieben1 does not offer
field mf and einen Mann must climb to the finite
verb:
(dass) Maria einen Mann zu lieben versucht
n
d
n v
v
In the extraposed case, zu lieben2 itself offers
field mf:
(dass) Maria versucht einen Mann zu lieben
n
v
d
n
v
5.2 Partial VP Eztraposition
</figure>
<figureCaption confidence="0.278659">
In example (8), the zu-infinitive zu lieben is extra-
posed to the right of its governing verb versucht,
but its nominal complement einen Mann remains
in the Mittelfeld:
</figureCaption>
<figure confidence="0.779703947368421">
(8) (dass) Maria einen Mann versucht, zu lieben
In our account, Mann is restricted to land in an mf
field which both extraposed zu lieben2 and finite
verb versucht offer. In example (8) the nominal
complement simply climbed up to the finite verb:
(dass) Maria einen Mann versucht zu lieben
n
d
n
v
v
5.3 Obligatory Head-final Placement
Verb clusters are typically head-final in German:
non-finite verbs precede their verbal heads.
(9) (dass)
(that)
(10)*(dass) Maria einen Mann wird lieben
The ID tree for (9) is:
(dass) Maria einen Mann lieben wird
</figure>
<bodyText confidence="0.850119">
The lexical entry for the bare infinitive lieben re-
quires it to land in a vc field:
</bodyText>
<equation confidence="0.837115">
fieldext(lieben) _ {vc}
</equation>
<bodyText confidence="0.99968725">
therefore only the following LP tree is licensed:3
where mf ≺ vc ≺ v, and subject and ob-
ject, both in field mf, remain mutually unordered.
Thus we correctly license (9) and reject (10).
</bodyText>
<subsectionHeader confidence="0.995902">
5.4 Optional Auxiliary Flip
</subsectionHeader>
<bodyText confidence="0.9954002">
In an auxiliary flip construction (Hinrichs and
Nakazawa, 1994), the verbal complement of an
auxiliary verb, such as haben or werden, follows
rather than precedes its head. Only a certain class
of bare infinitive verbs can land in extraposed po-
sition. As we illustrated above, main verbs do
not belong to this class; however, modals such as
k¨onnen do, and may land in either canonical (11)
or in extraposed (12) position. This behavior is
called ‘optional auxiliary flip’.
</bodyText>
<listItem confidence="0.917735">
(11) (dass)
(that)
(that) Maria will be able to love a man
(12) (dass) Maria einen Mann wird lieben k¨onnen
Both examples share the following ID tree:
</listItem>
<bodyText confidence="0.893545">
Our grammar fragment describes optional auxil-
iary flip constructions in two steps:
</bodyText>
<listItem confidence="0.99718275">
• wird offers both vc and xf fields:
valencyID(wird) = {mf∗, vc?, xf?}
• k¨onnen has two lexical entries, one canonical
and one extraposed:
</listItem>
<equation confidence="0.9384625">
fieldext(k¨onnen1) = {vc}
fieldext(k¨onnen2) = {xf}
</equation>
<footnote confidence="0.900859">
3It is important to notice that there is no spurious ambi-
guity concerning the topological placement of Mann: lieben
in canonical position does not offer field mf; therefore Mann
must climb to the finite verb.
</footnote>
<bodyText confidence="0.9898378">
Thus we correctly account for examples (11) and
(12) with the following LP trees:
The astute reader will have noticed that other LP
trees are licensed for the earlier ID tree: they are
considered in the section below.
</bodyText>
<subsectionHeader confidence="0.981784">
5.5 V-Projection Raising
</subsectionHeader>
<bodyText confidence="0.999968">
This phenomenon related to auxiliary flip de-
scribes the case where non-verbal material is in-
terspersed in the verb cluster:
</bodyText>
<listItem confidence="0.999612666666667">
(13) (dass) Maria wird einen Mann lieben k¨onnen
(14)*(dass) Maria lieben einen Mann k¨onnen wird
(15)*(dass) Maria lieben k¨onnen einen Mann wird
</listItem>
<bodyText confidence="0.9999564">
The ID tree remains as before. The NP einen
Mann must land in a mf field. lieben is in canon-
ical position and thus does not offer mf, but
both extraposed k¨onnen2 and finite verb wird do.
Whereas in (12), the NP climbed up to wird, in
</bodyText>
<listItem confidence="0.920625833333333">
(13) it climbs only up to k¨onnen.
(14) is ruled out because k¨onnen must be in the
vc of wird, therefore lieben must be in the vc
of k¨onnen, and einen Mann must be in the mf of
wird. Therefore, einen Mann must precede both
lieben and k¨onnen. Similarly for (15).
</listItem>
<figure confidence="0.991096607142857">
(dass) Maria einen Mann lieben wird
n
d
n v
v
(dass) Maria einen Mann wird lieben k¨onnen
(dass) Maria einen Mann lieben k¨onnen wird
(dass) Maria einen Mann wird lieben k¨onnen
n
n
d
d
n
n
v
v
v
v
v
v
(dass) Maria wird einen Mann lieben k¨onnen
n
v
d
n v
v
Maria einen Mann lieben k¨onnen wird
Maria a man love can will
</figure>
<subsectionHeader confidence="0.92384">
5.6 Intermediate Placement
</subsectionHeader>
<bodyText confidence="0.9991642">
The Zwischenstellung construction describes
cases where the auxiliary has been flipped but its
verbal argument remains in the Mittelfeld. These
are the remaining linearizations predicted by our
theory for the running example started above:
</bodyText>
<listItem confidence="0.9823875">
(16) (dass) Maria einen Mann lieben wird k¨onnen
(17) (dass) einen Mann Maria lieben wird k¨onnen
</listItem>
<bodyText confidence="0.99432">
where lieben has climbed up to the finite verb.
</bodyText>
<subsectionHeader confidence="0.891167">
5.7 Obligatory Auxiliary Flip
</subsectionHeader>
<bodyText confidence="0.999775833333333">
Substitute infinitives (Ersatzinfinitiv) are further
examples of extraposed verbal forms. A sub-
stitute infinitive exhibits bare infinitival inflec-
tion, yet acts as a complement of the perfectizer
haben, which syntactically requires a past partici-
ple. Only modals, AcI-verbs such as sehen and
lassen, and the verb helfen can appear in substi-
tute infinitival inflection.
A substitute infinitive cannot land in canonical
position; it must be extraposed: an auxiliary flip
involving a substitute infinitive is called an ‘oblig-
atory auxiliary flip’.
</bodyText>
<listItem confidence="0.995027">
(18) (dass)
(that)
(that) Maria was able to love a man
(19) (dass) Maria hat einen Mann lieben k¨onnen
(20)*(dass) Maria einen Mann lieben k¨onnen hat
</listItem>
<bodyText confidence="0.986276333333333">
These examples share the ID tree:
hat subcategorizes for a verb in past participle in-
flection because:
</bodyText>
<equation confidence="0.855866">
valencyID(hat) = {subject,vpast}
</equation>
<bodyText confidence="0.94917075">
and the edge constraint for w−−−−−→vpast w&apos; requires:
cat(w&apos;) = vpast
This is satisfied by k¨onnen2 which insists on being
extraposed, thus ruling (20) out:
</bodyText>
<equation confidence="0.926095">
fieldext(k¨onnen2) = {xf}
Example (18) has LP tree:
</equation>
<bodyText confidence="0.999344">
In (18) einen Mann climbs up to hat, while in (19)
it only climbs up to k¨onnen.
</bodyText>
<subsectionHeader confidence="0.957743">
5.8 Double Auxiliary Flip
</subsectionHeader>
<bodyText confidence="0.9991866">
Double auxiliary flip constructions occur when
an auxiliary is an argument of another auxiliary.
Each extraposed verb form offers both vc and mf:
thus there are more opportunities for verbal and
nominal arguments to climb to.
</bodyText>
<figure confidence="0.983856205128205">
(21) (dass) Maria wird haben einen Mann lieben
k¨onnen
(that) Maria will have been able to love a man
(22) (dass) Maria einen Mann wird haben lieben
k¨onnen
(23) (dass) Maria wird einen Mann lieben haben
k¨onnen
(24) (dass) Maria einen Mann wird lieben haben
k¨onnen
(25) (dass) Maria einen Mann lieben wird haben
k¨onnen
These examples have ID tree:
and (22) obtains LP tree:
(dass) Maria einen Mann hat lieben k¨onnen
(dass) Maria einen Mann hat lieben k¨onnen
n
d
n
v
v
v
Maria einen Mann wird haben lieben k¨onnen
Maria einen Mann wird haben lieben k¨onnen
n
d
n
v
v
v
v
Maria einen Mann hat lieben k¨onnen
Maria a man has love can
5.9 Obligatory Coherence
Certain verbs like scheint require their argument
to appear in canonical (or coherent) position.
(26) (dass)
(that)
(that) Maria seems to love a man
(27)*(dass) Maria einen Mann scheint, zu lieben
</figure>
<bodyText confidence="0.998998">
Obligatory coherence may be enforced with the
following constraint principle: if w is an obliga-
tory coherence verb and w&apos; is its verbal argument,
then w&apos; must land in w’s vc field. Like barri-
ers, the expression of this principle in our gram-
matical formalism falls outside the scope of the
present article and remains the subject of active
research.4
</bodyText>
<sectionHeader confidence="0.999849" genericHeader="conclusions">
6 Conclusions
</sectionHeader>
<bodyText confidence="0.999874475">
In this article, we described a treatment of lin-
ear precedence that extends the constraint-based
framework for dependency grammar proposed by
Duchier (1999). We distinguished two orthogo-
nal, yet mutually constraining tree structures: un-
ordered, non-projective ID trees which capture
purely syntactic dependencies, and ordered, pro-
jective LP trees which capture topological depen-
dencies. Our theory is formulated in terms of (a)
lexicalized constraints and (b) principles which
govern ‘climbing’ conditions.
We illustrated this theory with an application to
the treatment of word order phenomena in the ver-
bal complex of German verb final sentences, and
demonstrated that these traditionally challenging
phenomena emerge naturally from our simple and
elegant account.
Although we provided here an account spe-
cific to German, our framework intentionally per-
mits the definition of arbitrary language-specific
topologies. Whether this proves linguistically ad-
equate in practice needs to be substantiated in fu-
ture research.
Characteristic of our approach is that the for-
mal presentation defines valid analyses as the so-
lutions of a constraint satisfaction problem which
is amenable to efficient processing through con-
straint propagation. A prototype was imple-
mented in Mozart/Oz and supports a parsing
Owe also thank an anonymous reviewer for pointing out
that our grammar fragment does not permit intraposition
mode as well as a mode generating all licensed
linearizations for a given input. It was used to
prepare all examples in this article.
While the preliminary results presented here
are encouraging and demonstrate the potential of
our approach to linear precedence, much work re-
mains to be done to extend its coverage and to
arrive at a cohesive and comprehensive grammar
formalism.
</bodyText>
<sectionHeader confidence="0.999183" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.972740594594595">
Gunnar Bech. 1955. Studien ¨uber das deutsche Ver-
bum infinitum. 2nd unrevised edition published
1983 by Max Niemeyer Verlag, T¨ubingen (Linguis-
tische Arbeiten 139).
Norbert Br¨oker. 1999. Eine Dependenzgrammatik
zur Kopplung heterogener Wissensquellen. Lin-
guistische Arbeiten 405. Max Niemeyer Verlag,
T¨ubingen/FRG.
Denys Duchier. 1999. Axiomatizing dependency
parsing using set constraints. In Sixth Meeting on
the Mathematics ofLanguage, Orlando/FL, July.
Erhard Hinrichs and Tsuneko Nakazawa. 1994. Lin-
earizing AUXs in German verbal complexes. In
Nerbonne et al. (Nerbonne et al., 1994), pages 11–
37.
Sylvain Kahane, Alexis Nasr, and Owen Rambow.
1998. Pseudo-projectivity: a polynomially parsable
non-projective dependency grammar. In Proc.
ACL/COLING’98, pages 646–52, Montr´eal.
Andreas Kathol. 2000. Linear Syntax. Oxford Uni-
versity Press.
Igor Mel´cuk. 1988. Dependency Syntax: Theory and
Practice. The SUNY Press, Albany, N.Y.
Stefan M¨uller. 1999. Deutsche Syntax deklara-
tiv. Head-Driven Phrase Structure Grammar f¨ur
das Deutsche. Linguistische Arbeiten 394. Max
Niemeyer Verlag, T¨ubingen/FRG.
John Nerbonne, Klaus Netter, and Carl Pollard, edi-
tors. 1994. German in Head-Driven Phrase Struc-
ture Grammar. CSLI, Stanford/CA.
Mike Reape. 1994. Domain union and word order
variation in German. In Nerbonne et al. (Nerbonne
et al., 1994), pages 151–197.
Hans Uszkoreit. 1987. Word Order and Constituent
Structure in German. CSLI, Stanford/CA.
Maria einen Mann zu lieben scheint
Maria a man to love seems
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.206444">
<title confidence="0.9986935">Topological Dependency Trees: A Constraint-Based Account of Linear Precedence</title>
<author confidence="0.994636">Denys Duchier</author>
<affiliation confidence="0.887187">Programming Systems Lab Universit¨at des Saarlandes, Geb. 45</affiliation>
<address confidence="0.9076155">Postfach 15 11 50 66041 Saarbr¨ucken, Germany</address>
<email confidence="0.998824">duchier@ps.uni-sb.de</email>
<author confidence="0.998444">Ralph Debusmann</author>
<affiliation confidence="0.777556">Computational Linguistics Universit¨at des Saarlandes, Geb. 17</affiliation>
<address confidence="0.83011">Postfach 15 11 50 66041 Saarbr¨ucken, Germany</address>
<email confidence="0.999385">rade@coli.uni-sb.de</email>
<abstract confidence="0.97094275">We describe a new framework for dependency grammar, with a modular decomposition of immediate dependency and linear precedence. Our approach distinguishes two orthogonal yet mutuconstraining structures: a tree a de- The syntax tree is nonprojective and even non-ordered, while the topological tree is projective and partially ordered.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Gunnar Bech</author>
</authors>
<title>Studien ¨uber das deutsche Verbum infinitum. 2nd unrevised edition published</title>
<date>1955</date>
<journal>by Max Niemeyer Verlag, T¨ubingen (Linguistische Arbeiten</journal>
<volume>139</volume>
<contexts>
<context position="1602" citStr="Bech, 1955" startWordPosition="228" endWordPosition="229">mposition of immediate dependency and linear precedence. Duchier (1999) formulated a constraint-based axiomatization of dependency parsing which characterized well-formed syntax trees but ignored issues of word order. In this article, we develop a complementary approach dedicated to the treatment of linear precedence. Our framework distinguishes two orthogonal, yet mutually constraining structures: a syntactic dependency tree (ID tree) and a topological dependency tree (LP tree). While edges of the ID tree are labeled by syntactic roles, those of the LP tree are labeled by topological fields (Bech, 1955). The shape of the LP tree is a flattening of the ID tree’s obtained by allowing nodes to ‘climb up’ to land in an appropriate field at a host node where that field is available. Our theory of ID/LP trees is formulated in terms of (a) lexicalized constraints and (b) principles governing e.g. climbing conditions. In Section 2 we discuss the difficulties presented by discontinuous constructions in free word order languages, and briefly touch on the limitations of Reape’s (1994) popular theory of ‘word order domains’. In Section 3 we introduce the concept of topological dependency tree. In Sectio</context>
<context position="7668" citStr="Bech, 1955" startWordPosition="1309" endWordPosition="1310">D) must satisfy the valencyID assignment as described earlier. For example the lexical entry for versucht specifies (Figure 1): valencyID(versucht) = {subject,zuvinf} Furthermore, (V, EID) must also satisfy the edge constraints stipulated by the grammar (see Figure 1). For example, for an edge w−−−−→det w&apos; to be licensed, w&apos; must be assigned category det and both w and w&apos; must be assigned the same agreement.1 4.2 LP Trees An LP tree (V, ELP, lex, valencyLP, fieldext, fieldint) consists of a tree (V, ELP) with ELP ⊆ V × V × Fext, where the set Fext of edge labels represents topological fields (Bech, 1955): df the determiner field, mf the ‘Mittelfeld’, vc &apos;Issues of agreement will not be further considered in this paper. the verbal complement field, xf the extraposition field. Features of lexical entries relevant to LP trees are grouped under table heading &amp;quot;_Topology” in Figure 1. valencyLP assigns a Fext valency to each node and is subject to the lexicalized constraint: valencyLP(w) = lex(w).valencyLP (V, ELP) must satisfy the valencyLP assignment as described earlier. For example, the lexical entry for zu lieben2 specifies: valencyLP(zulieben2) = {mf∗,xf?} which permits 0 or more mf edges and</context>
</contexts>
<marker>Bech, 1955</marker>
<rawString>Gunnar Bech. 1955. Studien ¨uber das deutsche Verbum infinitum. 2nd unrevised edition published 1983 by Max Niemeyer Verlag, T¨ubingen (Linguistische Arbeiten 139).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Norbert Br¨oker</author>
</authors>
<title>Eine Dependenzgrammatik zur Kopplung heterogener Wissensquellen. Linguistische Arbeiten 405.</title>
<date>1999</date>
<publisher>Max Niemeyer Verlag, T¨ubingen/FRG.</publisher>
<marker>Br¨oker, 1999</marker>
<rawString>Norbert Br¨oker. 1999. Eine Dependenzgrammatik zur Kopplung heterogener Wissensquellen. Linguistische Arbeiten 405. Max Niemeyer Verlag, T¨ubingen/FRG.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Denys Duchier</author>
</authors>
<title>Axiomatizing dependency parsing using set constraints.</title>
<date>1999</date>
<booktitle>In Sixth Meeting on the Mathematics ofLanguage, Orlando/FL,</booktitle>
<contexts>
<context position="1062" citStr="Duchier (1999)" startWordPosition="145" endWordPosition="146">sition of immediate dependency and linear precedence. Our approach distinguishes two orthogonal yet mutually constraining structures: a syntactic dependency tree and a topological dependency tree. The syntax tree is nonprojective and even non-ordered, while the topological tree is projective and partially ordered. 1 Introduction Linear precedence in so-called free word order languages remains challenging for modern grammar formalisms. To address this issue, we propose a new framework for dependency grammar which supports the modular decomposition of immediate dependency and linear precedence. Duchier (1999) formulated a constraint-based axiomatization of dependency parsing which characterized well-formed syntax trees but ignored issues of word order. In this article, we develop a complementary approach dedicated to the treatment of linear precedence. Our framework distinguishes two orthogonal, yet mutually constraining structures: a syntactic dependency tree (ID tree) and a topological dependency tree (LP tree). While edges of the ID tree are labeled by syntactic roles, those of the LP tree are labeled by topological fields (Bech, 1955). The shape of the LP tree is a flattening of the ID tree’s </context>
<context position="20210" citStr="Duchier (1999)" startWordPosition="3480" endWordPosition="3481">dass) (that) (that) Maria seems to love a man (27)*(dass) Maria einen Mann scheint, zu lieben Obligatory coherence may be enforced with the following constraint principle: if w is an obligatory coherence verb and w&apos; is its verbal argument, then w&apos; must land in w’s vc field. Like barriers, the expression of this principle in our grammatical formalism falls outside the scope of the present article and remains the subject of active research.4 6 Conclusions In this article, we described a treatment of linear precedence that extends the constraint-based framework for dependency grammar proposed by Duchier (1999). We distinguished two orthogonal, yet mutually constraining tree structures: unordered, non-projective ID trees which capture purely syntactic dependencies, and ordered, projective LP trees which capture topological dependencies. Our theory is formulated in terms of (a) lexicalized constraints and (b) principles which govern ‘climbing’ conditions. We illustrated this theory with an application to the treatment of word order phenomena in the verbal complex of German verb final sentences, and demonstrated that these traditionally challenging phenomena emerge naturally from our simple and elegan</context>
</contexts>
<marker>Duchier, 1999</marker>
<rawString>Denys Duchier. 1999. Axiomatizing dependency parsing using set constraints. In Sixth Meeting on the Mathematics ofLanguage, Orlando/FL, July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Erhard Hinrichs</author>
<author>Tsuneko Nakazawa</author>
</authors>
<title>Linearizing AUXs in German verbal complexes.</title>
<date>1994</date>
<journal>In Nerbonne</journal>
<pages>11--37</pages>
<contexts>
<context position="14634" citStr="Hinrichs and Nakazawa, 1994" startWordPosition="2536" endWordPosition="2539">igatory Head-final Placement Verb clusters are typically head-final in German: non-finite verbs precede their verbal heads. (9) (dass) (that) (10)*(dass) Maria einen Mann wird lieben The ID tree for (9) is: (dass) Maria einen Mann lieben wird The lexical entry for the bare infinitive lieben requires it to land in a vc field: fieldext(lieben) _ {vc} therefore only the following LP tree is licensed:3 where mf ≺ vc ≺ v, and subject and object, both in field mf, remain mutually unordered. Thus we correctly license (9) and reject (10). 5.4 Optional Auxiliary Flip In an auxiliary flip construction (Hinrichs and Nakazawa, 1994), the verbal complement of an auxiliary verb, such as haben or werden, follows rather than precedes its head. Only a certain class of bare infinitive verbs can land in extraposed position. As we illustrated above, main verbs do not belong to this class; however, modals such as k¨onnen do, and may land in either canonical (11) or in extraposed (12) position. This behavior is called ‘optional auxiliary flip’. (11) (dass) (that) (that) Maria will be able to love a man (12) (dass) Maria einen Mann wird lieben k¨onnen Both examples share the following ID tree: Our grammar fragment describes optiona</context>
</contexts>
<marker>Hinrichs, Nakazawa, 1994</marker>
<rawString>Erhard Hinrichs and Tsuneko Nakazawa. 1994. Linearizing AUXs in German verbal complexes. In Nerbonne et al. (Nerbonne et al., 1994), pages 11– 37.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sylvain Kahane</author>
<author>Alexis Nasr</author>
<author>Owen Rambow</author>
</authors>
<title>Pseudo-projectivity: a polynomially parsable non-projective dependency grammar.</title>
<date>1998</date>
<booktitle>In Proc. ACL/COLING’98,</booktitle>
<pages>646--52</pages>
<location>Montr´eal.</location>
<contexts>
<context position="12182" citStr="Kahane et al., 1998" startWordPosition="2121" endWordPosition="2124">&apos; may climb up to any host w which offers a field licensed by fieldext(w&apos;). Definition. An ID/LP analysis is a tuple (V, EID, ELP, lex, cat, valencyID, valencyLP, fieldext, fieldint) such that (V, EID, lex, cat, valencyID) is an ID tree and (V, ELP, lex, valencyLP, fieldext, fieldint) is an LP tree and all principles are satisfied. Our approach has points of similarity with (Br¨oker, 1999) but eschews modal logic in favor of a simpler and arguably more perspicuous constraint-based formulation. It is also related einen a lieben love wird will Mann manacc Maria Marianom to the lifting rules of (Kahane et al., 1998), but where they choose to stipulate rules that license liftings, we opt instead for placing constraints on otherwise unrestricted climbing. 5 German Verbal Phenomena We now illustrate our theory by applying it to the treatment of word order phenomena in the verbal complex of German verb final sentences. We assume the grammar and lexicon shown in Figure 1. These are intended purely for didactic purposes and we extend for them no claim of linguistic adequacy. 5.1 VP Eztraposition Control verbs like versuchen or versprechen allow their zu-infinitival complement to be optionally extraposed. This </context>
</contexts>
<marker>Kahane, Nasr, Rambow, 1998</marker>
<rawString>Sylvain Kahane, Alexis Nasr, and Owen Rambow. 1998. Pseudo-projectivity: a polynomially parsable non-projective dependency grammar. In Proc. ACL/COLING’98, pages 646–52, Montr´eal.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andreas Kathol</author>
</authors>
<title>Linear Syntax.</title>
<date>2000</date>
<publisher>Oxford University Press.</publisher>
<contexts>
<context position="3060" citStr="Kathol (2000)" startWordPosition="458" endWordPosition="459">n free word order languages, discontinuous constructions occur frequently. German, for example, is subject to scrambling and partial extraposition. In typical phrase structure based analyses, such phenomena lead to e.g. discontinuous VPs: (1) (dass) (that) whose natural syntax tree exhibits crossing edges: Since this is classically disallowed, discontinuous constituents must often be handled indirectly through grammar extensions such as traces. Reape (1994) proposed the theory of word order domains which became quite popular in the HPSG community and inspired others such as M¨uller (1999) and Kathol (2000). Reape distinguished two orthogonal tree structures: (a) the unordered syntax tree, (b) the totally ordered tree of V NP S NP V VP DET N (dass) einen Mann Maria zu lieben versucht einen Mann Maria zu lieben versucht a manacc Marianom to love tries word order domains. The latter is obtained from the syntax tree by flattening using the operation of domain union to produce arbitrary interleavings. The boolean feature [uf] of each node controls whether it must be flattened out or not. Infinitives in canonical position are assigned [u+]: Thus, the above licenses the following tree of word order do</context>
</contexts>
<marker>Kathol, 2000</marker>
<rawString>Andreas Kathol. 2000. Linear Syntax. Oxford University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Igor Mel´cuk</author>
</authors>
<title>Dependency Syntax: Theory and Practice.</title>
<date>1988</date>
<publisher>The SUNY Press,</publisher>
<location>Albany, N.Y.</location>
<marker>Mel´cuk, 1988</marker>
<rawString>Igor Mel´cuk. 1988. Dependency Syntax: Theory and Practice. The SUNY Press, Albany, N.Y.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan M¨uller</author>
</authors>
<title>Deutsche Syntax deklarativ. Head-Driven Phrase Structure Grammar f¨ur das Deutsche. Linguistische Arbeiten 394.</title>
<date>1999</date>
<publisher>Max Niemeyer Verlag, T¨ubingen/FRG.</publisher>
<marker>M¨uller, 1999</marker>
<rawString>Stefan M¨uller. 1999. Deutsche Syntax deklarativ. Head-Driven Phrase Structure Grammar f¨ur das Deutsche. Linguistische Arbeiten 394. Max Niemeyer Verlag, T¨ubingen/FRG.</rawString>
</citation>
<citation valid="true">
<date>1994</date>
<booktitle>German in Head-Driven Phrase Structure Grammar. CSLI, Stanford/CA.</booktitle>
<editor>John Nerbonne, Klaus Netter, and Carl Pollard, editors.</editor>
<contexts>
<context position="2082" citStr="(1994)" startWordPosition="311" endWordPosition="311">While edges of the ID tree are labeled by syntactic roles, those of the LP tree are labeled by topological fields (Bech, 1955). The shape of the LP tree is a flattening of the ID tree’s obtained by allowing nodes to ‘climb up’ to land in an appropriate field at a host node where that field is available. Our theory of ID/LP trees is formulated in terms of (a) lexicalized constraints and (b) principles governing e.g. climbing conditions. In Section 2 we discuss the difficulties presented by discontinuous constructions in free word order languages, and briefly touch on the limitations of Reape’s (1994) popular theory of ‘word order domains’. In Section 3 we introduce the concept of topological dependency tree. In Section 4 we outline the formal framework for our theory of ID/LP trees. Finally, in Section 5 we illustrate our approach with an account of the word-order phenomena in the verbal complex of German verb final sentences. 2 Discontinuous Constructions In free word order languages, discontinuous constructions occur frequently. German, for example, is subject to scrambling and partial extraposition. In typical phrase structure based analyses, such phenomena lead to e.g. discontinuous V</context>
</contexts>
<marker>1994</marker>
<rawString>John Nerbonne, Klaus Netter, and Carl Pollard, editors. 1994. German in Head-Driven Phrase Structure Grammar. CSLI, Stanford/CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mike Reape</author>
</authors>
<title>Domain union and word order variation in German.</title>
<date>1994</date>
<journal>In Nerbonne</journal>
<pages>151--197</pages>
<contexts>
<context position="2908" citStr="Reape (1994)" startWordPosition="432" endWordPosition="433">lustrate our approach with an account of the word-order phenomena in the verbal complex of German verb final sentences. 2 Discontinuous Constructions In free word order languages, discontinuous constructions occur frequently. German, for example, is subject to scrambling and partial extraposition. In typical phrase structure based analyses, such phenomena lead to e.g. discontinuous VPs: (1) (dass) (that) whose natural syntax tree exhibits crossing edges: Since this is classically disallowed, discontinuous constituents must often be handled indirectly through grammar extensions such as traces. Reape (1994) proposed the theory of word order domains which became quite popular in the HPSG community and inspired others such as M¨uller (1999) and Kathol (2000). Reape distinguished two orthogonal tree structures: (a) the unordered syntax tree, (b) the totally ordered tree of V NP S NP V VP DET N (dass) einen Mann Maria zu lieben versucht einen Mann Maria zu lieben versucht a manacc Marianom to love tries word order domains. The latter is obtained from the syntax tree by flattening using the operation of domain union to produce arbitrary interleavings. The boolean feature [uf] of each node controls wh</context>
<context position="5122" citStr="Reape, 1994" startWordPosition="816" endWordPosition="817">elds and are totally ordered: df � mf � vc. This induces a linear precedence among the daughters of a node in the LP tree. This precedence is partial because daughters with the same label may be freely permuted. In order to obtain a linearization of a LP tree, it is also necessary to position each node with respect to its daughters. For this reason, each node is also assigned an internal field (d, n, or v) shown above on the vertical pseudo-edges. The set of internal and external fields is totally ordered: d � df � n � mf � vc � v Like Reape, our LP tree is a flattened version of the ID tree (Reape, 1994; Uszkoreit, 1987), but the flattening doesn’t happen by ‘unioning up’; rather, we allow each individual daughter to climb up to find an appropriate landing place. This idea is reminiscent of GB, but, as we shall see, proceeds rather differently. 4 Formal Framework The framework underlying both ID and LP trees is the configuration of labeled trees under valency (and other) constraints. Consider a finite set L of edge labels, a finite set V of nodes, and E C_ V x V x L a finite set of directed labeled edges, such that (V, E) forms a tree. We write w−−-+� w&apos; for an edge labeled ` from w to w&apos;. W</context>
</contexts>
<marker>Reape, 1994</marker>
<rawString>Mike Reape. 1994. Domain union and word order variation in German. In Nerbonne et al. (Nerbonne et al., 1994), pages 151–197.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hans Uszkoreit</author>
</authors>
<date>1987</date>
<booktitle>Word Order and Constituent Structure in German. CSLI, Stanford/CA. Maria Maria einen a</booktitle>
<contexts>
<context position="5140" citStr="Uszkoreit, 1987" startWordPosition="818" endWordPosition="819">totally ordered: df � mf � vc. This induces a linear precedence among the daughters of a node in the LP tree. This precedence is partial because daughters with the same label may be freely permuted. In order to obtain a linearization of a LP tree, it is also necessary to position each node with respect to its daughters. For this reason, each node is also assigned an internal field (d, n, or v) shown above on the vertical pseudo-edges. The set of internal and external fields is totally ordered: d � df � n � mf � vc � v Like Reape, our LP tree is a flattened version of the ID tree (Reape, 1994; Uszkoreit, 1987), but the flattening doesn’t happen by ‘unioning up’; rather, we allow each individual daughter to climb up to find an appropriate landing place. This idea is reminiscent of GB, but, as we shall see, proceeds rather differently. 4 Formal Framework The framework underlying both ID and LP trees is the configuration of labeled trees under valency (and other) constraints. Consider a finite set L of edge labels, a finite set V of nodes, and E C_ V x V x L a finite set of directed labeled edges, such that (V, E) forms a tree. We write w−−-+� w&apos; for an edge labeled ` from w to w&apos;. We define the `-dau</context>
</contexts>
<marker>Uszkoreit, 1987</marker>
<rawString>Hans Uszkoreit. 1987. Word Order and Constituent Structure in German. CSLI, Stanford/CA. Maria Maria einen a</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>