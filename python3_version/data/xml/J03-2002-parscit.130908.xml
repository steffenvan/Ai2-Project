<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.999039333333333">
Implementing the Binding and
Accommodation Theory for Anaphora
Resolution and Presupposition Projection
</title>
<author confidence="0.999389">
Johan Bos∗
</author>
<affiliation confidence="0.99529">
University of Edinburgh
</affiliation>
<bodyText confidence="0.958623">
Computational aspects of Van der Sandt’s binding and accommodation theory (BAT) for presup-
position projection and anaphora resolution are presented and discussed in this article. BAT is
reformulated to meet requirements for computational implementation, which include operations
on discourse representation structures (renaming and merging), the representation ofpresupposi-
tions (allowingfor selective binding and determiningfree and bound variables), and a formulation
of the acceptability constraints imposed by BAT. An efficient presupposition resolution algorithm
is presented, and several further improvements such as preferences for binding and accommoda-
tion are discussed and integrated in this algorithm. Finally, innovative use offirst-order theorem
provers to carry out consistency checking of discourse representations is investigated.
</bodyText>
<sectionHeader confidence="0.997031" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999975521739131">
The last decade has seen an increase of formal interest in combining what were
previously thought as of being two distinct phenomena: anaphora and presupposi-
tion. In particular what I will refer to as binding and accommodation theory (BAT)
(Van der Sandt and Geurts 1991; Van der Sandt 1992; Geurts 1999), in which presup-
positional expressions are essentially analyzed as rich anaphora, played an important
role here. Not only does this theory help us gain new insights into the nature of pre-
suppositions, it also accounts for an impressive range of problems related to linguistic
behavior of presuppositions.
In this paper I will put BAT in a computational perspective. The time is ripe to
enter into this endeavor for two major reasons. First, because BAT is stipulated in
the now well established and extensively formulated discourse representation theory
(DRT) (Kamp and Reyle 1993), we have at our disposal a formalism covering a wide
range of linguistic phenomena, including anaphora, plurals, tense, aspect, and scope
ambiguities. Second, recent results in automated deduction, especially the performance
of first-order theorem provers, open the doors for implementing a genuine inference
component within a wider context of discourse processing (Blackburn et al. 2001).
This is important, because in BAT, reasoning is required for correctly dealing with
presuppositional phenomena.
I start by giving an overview of linguistic aspects of the problems introduced
by presuppositional expressions, summarize DRT, and show how BAT accounts for
presuppositional expressions (Section 2). I then explain what constitutes a proper rep-
resentation for presuppositions, give examples of lexical entries for presupposition
triggers within a compositional framework, and introduce formal tools required for
</bodyText>
<note confidence="0.66980325">
∗ Division of Informatics, 2 Buccleuch Place, Edinburgh EH8 9LW, Scotland UK. E-mail:
jbos@cogsci.ed.ac.uk.
© 2003 Association for Computational Linguistics
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.999397833333333">
resolving presuppositions (Section 3). After presenting this formal machinery, I present
an efficient version of the presupposition resolution algorithm in Section 4 and im-
plement the various acceptability constraints imposed by BAT. Finally, in Section 5,
I discuss implementational issues and report on the performance of the algorithm
against a corpus of route instructions, and I investigate the use of general-purpose
first-order theorem provers to carry out inference tasks imposed by BAT.
</bodyText>
<sectionHeader confidence="0.994615" genericHeader="keywords">
2. Preliminaries
</sectionHeader>
<bodyText confidence="0.999764833333333">
To make this article self-contained, I will start by outlining the nature of presuppo-
sitions and what kind of problems they impose that need to be solved by any natu-
ral language understanding component performing discourse processing. Then I will
present BAT and show how it accounts for these problems. Because BAT is presented
as an extension of DRT, part of this section will be devoted to summarizing the main
features of DRT.
</bodyText>
<subsectionHeader confidence="0.893747">
2.1 Introducing Presuppositions
</subsectionHeader>
<bodyText confidence="0.9973835">
Presuppositions are those pieces of information that are taken for granted in a con-
versation or discourse. For instance, to make sense of (1),
</bodyText>
<listItem confidence="0.987242">
(1) Vincent and Jules managed to clean the car.
</listItem>
<bodyText confidence="0.959526636363637">
we assume the existence of a car, two persons (named Jules and Vincent), and that the
two persons found the car difficult to clean. These implications deviate from ordinary
entailments. Note that example (1) entails that the car is clean, whereas example (2),
(2) If Vincent and Jules managed to clean the car, Jimmie would feel more
comfortable.
does not, although example (2) includes some of the implications of example (1),
namely, the existence of the two persons (Jules and Vincent) and the car, and that
the two persons had difficulties in cleaning the car. The propositions that are still
implied, even after embedding in the conditional, are called presuppositions. This is
the crucial property of presuppositions: They are the result of implications that “sur-
vive” under negation and modal operators, in the antecedent of conditionals, and in
questions (Van der Sandt 1992).
In English, most presuppositions in discourse are lexically driven. This means
that there are certain lexical items that give rise to presuppositions, whereas others
do not. In example (2), for instance, it is the definite article the that introduces the
presupposition that there is a car and the implicative verb to manage that introduces
the presupposition that Jules and Vincent had a hard time cleaning the car. Such
expressions are called presupposition triggers, and in the examples that follow, I will
underline ones relevant to each example.
Presuppositions are an important linguistic device in conversation, because when
conveyed in utterances, they put constraints on the discourse context. An appropriate
context for example (1) is, for instance, example (3):
</bodyText>
<listItem confidence="0.9263555">
(3) Jules and Vincent were driving in a car on their way to Jimmie. Due to
an accident, it was completely covered with blood, and they had to clean
it in short time before Bonnie (Jimmie’s girlfriend) would find out.
Finally, Vincent and Jules managed to clean the car.
</listItem>
<page confidence="0.993618">
180
</page>
<note confidence="0.670726">
Bos Implementing Binding and Accommodation Theory
</note>
<bodyText confidence="0.999887785714286">
Whereas the discourse in example (1), in isolation, presupposes the existence of a car,
a context as set up in example (3) does not, for the trivial reason that there is a car
introduced in the context itself. So (linguistic) contexts may contain information that
“cancels” the presuppositions of a new contribution to the discourse or conversation.
Therefore, terminological use in the literature on presupposition includes part-time or
elementary presuppositions, to signify that presuppositions, once introduced by the
trigger sentence, may be canceled by a context.
In contrast, consider the discourse in example (4), which is perceived as slightly
odd. This perception of oddness is caused by the incompatibility between the context
as set up by the first two sentences (namely, that there is a clean car) and the presuppo-
sition introduced by the third sentence (that Jules and Vincent had difficulties cleaning
the car). The concept of incompatibility, or better, inconsistency, plays a central role
in BAT, the theory of presuppositions in which I will base the resolution algorithm
presented in this article.
</bodyText>
<listItem confidence="0.992169">
(4) Jules and Vincent were looking after a car. The car was not dirty at all.
But Vincent and Jules managed to clean the car.
</listItem>
<subsectionHeader confidence="0.996736">
2.2 The Binding Problem, the Projection Problem, and Accommodation
</subsectionHeader>
<bodyText confidence="0.9995706">
By and large, there are three important themes related to presupposition: the binding
problem, the projection problem, and accommodation. Almost all of the theoretical
literature on presuppositions deals with these issues, and any computational account of
presupposition has to say something about them. Let’s first turn to the presupposition
binding problem. An example like (5),
</bodyText>
<listItem confidence="0.821624">
(5) A boxer nearly escaped from his apartment.
</listItem>
<bodyText confidence="0.999442714285714">
will clarify what comprises the binding problem. The trigger his induces the presuppo-
sition that a male individual has an apartment. However, it does not presuppose that
just any male person has an apartment, nor that some boxer or other creature owns
an apartment. It is the boxer who escaped who has an apartment. That is, the existen-
tially quantified noun phrase a boxer ties together two types of information: ordinary
asserted information (namely, that a boxer nearly escaped from an apartment) and pre-
suppositional information (the apartment mentioned in the assertion belongs to the
boxer mentioned in the assertion). As assertions and presuppositions obey different
laws, it is no trivial matter to tie them together, and many accounts of presupposition
have been shipwrecked on this rock (Van der Sandt 1992, pages 337–340).
The presupposition projection problem manifests itself in complex sentences.
Presupposition triggers occurring in complex sentences, such as conditionals or dis-
junctive sentences, sometimes are projected onto the context, but sometimes disappear.
For instance, example (6)
</bodyText>
<listItem confidence="0.79556575">
(6) If Mia dates Vincent, then her husband is out of town.
is a sentence presupposing that Mia has a husband. But the similarly constructed
sentence in example (7) does not carry this presupposition:
(7) If Mia is married, then her husband is out of town.
</listItem>
<page confidence="0.995606">
181
</page>
<note confidence="0.879424">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.999783545454546">
This sentence does not presuppose that Mia has a husband. It is the bringing about of
Mia’s marital status in the antecedent of the conditional that neutralizes the presuppo-
sition of Mia’s being married. Hence, in complex sentences there is no systematic way
for dealing with presupposition triggers, as sometimes subparts of complex sentences
carry presuppositions that are canceled in the main sentence.
Finally, let us consider presuppositional accommodation, as characterised by Kart-
tunen (1974) and later formalized by Lewis (1979). I believe that accommodation plays
a role in two related but different linguistic situations. The first of these is one in which
presuppositions assert new information to the common ground without violating dis-
course coherency. The second situation is one best described as a hearer’s discourse
“repair strategy.” Examples (8) and (9) illustrate the first type:
</bodyText>
<listItem confidence="0.992347666666667">
(8) Vincent informed his boss.
(9) Butch didn’t realize there was a difference between a tummy and a
potbelly.
</listItem>
<bodyText confidence="0.999061111111111">
The presuppositions conveyed by these utterances are that Vincent has a boss and
that there is a difference between a tummy and a potbelly. Hearers have no problems
accommodating these presuppositions into the common ground, even in cases in which
the context includes no previous mention of them. Only if the discourse built up so far
is incompatible with Vincent’s having a boss (maybe he is a freelancer), then a hearer
would probably refuse to accept example (8). But with the absence of information
as to whether Vincent has a boss, the hearer adjusts his or her presuppositions to
make sense of the new utterance or sentence. This is referred to as presuppositional
accommodation.
Thus, presuppositions are, under certain circumstances, able to present new infor-
mation to the discourse. However, the level of acceptance of accommodation differs
considerably from context to context and according to the type of trigger used (Beaver
2002) and also depends on whether the hearer has access to context or not. Presup-
positions triggered by genitive constructions (as in example (8)) and factives (as in
example (9)) are known to accommodate easily. Most other presupposition triggers do
not allow accommodation, because doing so would lead to incoherent discourse. Con-
sider the following dialogue between Butch and his girlfriend after Butch has fought
a match:
</bodyText>
<listItem confidence="0.9970375">
(10) Fabian: What about the man you fought?
Butch: Floyd retired too.
</listItem>
<bodyText confidence="0.997437272727273">
Butch’s utterance in this dialogue presupposes that someone distinct from Floyd re-
tired, a presupposition that is trivially true, as many people have retired already. But
spoken without the knowledge that Butch ended his career, example (10) is odd, and
a hearer will most likely start a clarification dialogue in such cases. However, exam-
ple (10) is completely acceptable when one knows that Butch decided to retire after
his fight with Floyd.
Nevertheless, although hearing example (10) in an ongoing dialogue without any
mention of Butch’s planning to retire will certainly raise some eyebrows, somebody
who just joins an ongoing conversation and hears it will probably accommodate the
associating presupposition, expecting that one of the topics addressed in this conver-
sation was the retirement of somebody different from Floyd. This is when the other
</bodyText>
<page confidence="0.988256">
182
</page>
<note confidence="0.672006">
Bos Implementing Binding and Accommodation Theory
</note>
<bodyText confidence="0.999558333333333">
role of presuppositional accommodation comes into play, constituting a situation in
which hearers don’t have access to the context and use accommodation as a repair
strategy.
</bodyText>
<subsectionHeader confidence="0.981999">
2.3 Discourse Representation Theory
</subsectionHeader>
<bodyText confidence="0.998434290322581">
Presupposition is a genuine discourse phenomenon. It should not come as a surprise
that an adequate semantic theory for presuppositions would benefit from a formulation
in a dynamic theory of meaning. Indeed, BAT is set in DRT (Kamp 1981; Kamp and
Reyle 1993; Van Eijck and Kamp 1997), and because it heavily depends on it, I will
briefly summarize the most prominent features of DRT here.
DRT is one of several formal semantic frameworks designed to deal with the
problems related to discourse anaphora, but it is certainly unrivaled with respect to
its impressive coverage of linguistic phenomena. Alternative formalisms for discourse
semantics are file change semantics (Heim 1982) and dynamic predicate logic (Groe-
nendijk and Stokhof 1991). The latter uses the syntax of ordinary first-order predicate
logic, but with a different “context change potential” semantics, allowing existential
quantifiers to bind variables outside their syntactic scope.
The linguistic phenomena that led to the development of dynamic theories such
as DRT were mainly centered on the problems introduced by anaphora and indefi-
nite noun phrases. Because anaphora are able to operate on an intersentential level,
the traditional method of assigning closed formulas to sentences caused problems for
discourse processing, and one had to resort to a number of ad hoc techniques for con-
structing the first-order formulas for natural language discourses. An appropriate first-
order logic formula for the sentence Awomansnorts would be E1x(WOMAN(x)∧SNORT(x)),
but if one continues the discourse with She collapses, there is a need to alter the for-
mula into something of the form: E1x(WOMAN(x) ∧ SNORT(x) ∧ COLLAPSE(x)). In other
words, one has to extend the scope of the existential quantifier introduced in the
translation of the first sentence to cover elements introduced in the second sentence.
The so-called donkey sentences of Geach (donkeys and farmers were the main char-
acters in the example sentences of Geach, which led to increased study of indefinite
noun phrases and pronouns within formal semantics) caused similar composition-
ality problems. Although indefinite noun phrases normally invoke existential quan-
tification, a proper first-order translation of Every woman that gets a foot massage en-
joys it would result in a formula in which the variable introduced by the pronoun
it is bound by the universal quantifier stemming from a foot massage, as shown by
example (11):
</bodyText>
<equation confidence="0.825275">
(11) dxdy(WOMAN(x) ∧ FOOT-MASSAGE(y) ∧ GET(x,y) → ENJOY(x,y))
</equation>
<bodyText confidence="0.999658454545455">
DRT deals with these problems by introducing an intermediate level of semantic
representation: discourse representation structures (DRSs). DRSs are pairwise struc-
tures consisting of a set of discourse referents, which stand for the entities that are
introduced in the discourse, and a set of conditions, which describe the properties
of these entities. Discourse referents function like quantifiers, in that they are able to
bind variables appearing in DRS-conditions. However, the quantificational force of dis-
course referents depends on their structural embedding. DRSs are recursive structures,
and DRSs embedded in the antecedent of an implicational condition give universal
quantification to their discourse referents, whereas all other contexts assign existen-
tial quantification (the translation from DRSs to formulas of first-order logic given in
Section 3 illustrates this nicely).
</bodyText>
<page confidence="0.99679">
183
</page>
<note confidence="0.437238">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.999261">
Traditionally, a DRS is presented as a boxlike structure, with discourse referents
in the top part and conditions in the lower part of the box. The DRS for the example
given earlier is shown in example (12).
</bodyText>
<listItem confidence="0.736077">
(12) A woman snorts. She collapses.
</listItem>
<equation confidence="0.998726">
x y
WOMAN(x)
SNORT(x)
y=x
COLLAPSE(y)
</equation>
<bodyText confidence="0.999226733333333">
Here x and y are discourse referents for a woman and she, respectively. The anaphoric
link between she and a woman is established by the condition y = x, and illustrates
the role of discourse referents: They introduce discourse entities to which pronouns
potentially can refer. In other words, discourse referents are candidate antecedents for
future anaphoric reference.
The key idea underlying DRT is that discourse referents appearing in embedded
DRSs are not available as antecedents for pronouns. The internal structure of DRSs
plays a central role in determining the possibility of anaphoric links between pro-
nouns and their potential antecedents. Indefinite noun phrases always introduce their
discourse referents locally1 and hence are not accessible from outside a negation or
implication. This is shown in the following examples, in which pronouns marked
with an asterisk have no proper anaphoric antecedent (narrow-scope interpretation
of the indefinite noun phrases is assumed in the examples, because in certain cir-
cumstances a wide-scope interpretation of indefinite noun phrases allows anaphoric
links):
</bodyText>
<listItem confidence="0.547927">
(13) Butch has a valuable watch. He keeps it in his apartment.
</listItem>
<bodyText confidence="0.993602181818182">
Butch has no valuable watch. He keeps it* in his apartment.
If Butch has a valuable watch, he will take care of it. He keeps it* in his
apartment.
Mia ordered a five dollar shake. Vincent tasted it.
Mia didn’t order a five dollar shake. Vincent tasted it*.
In the utterances of example (13), the discourse referents for a valuable watch and a
five dollar shake are introduced in subordinated DRSs, excluding anaphoric links to
pronouns in subsequent sentences. The DRS in example (14) shows how DRT deals
with these observations: Because the discourse referent y introduced for a five dollar
shake is part of an embedded DRS (introduced by negation), it is not accessible for u,
the referent introduced for the pronoun it:
</bodyText>
<footnote confidence="0.665609">
1 I am disregarding wide-scope or specific readings here.
</footnote>
<page confidence="0.996404">
184
</page>
<subsectionHeader confidence="0.796734">
Bos Implementing Binding and Accommodation Theory
</subsectionHeader>
<bodyText confidence="0.8155995">
(14) Mia didn’t order a five dollar shake. Vincent tasted it*.
xzu
In other words, negation blocks anaphoric links. Similar anaphoric behavior is shown
by disjunctive clauses (Kamp and Reyle 1993, page 185) and implicational sentences.
The latter introduce DRS-conditions of the form B ⇒ B&apos;, where discourse referents
declared in B are accessible from B&apos;. Example (15) illustrates this:
</bodyText>
<listItem confidence="0.9149075">
(15) If Butch has a valuable watch, he will take care of it. He keeps it* in his
apartment.
</listItem>
<equation confidence="0.274186">
xuv
</equation>
<bodyText confidence="0.999934916666667">
The accessibility relation in DRT governs possible links between anaphoric expres-
sions and their potential antecedents. It is defined on the structure of DRSs, which is
normally stated in terms of subordination, a transitive relation. A DRS B subordinates
a DRS B&apos; if B&apos; appears as a condition of B as argument of a negation, disjunction, or
antecedent of a conditional, or if they form a DRS-condition of the form B ⇒ B&apos;. I
will merely make use of the term accessibility path, a list of DRSs, ordered by DRS
subordination, to express accessible discourse referents for anaphoric expressions.
Finally, let us consider proper names. Proper names, once introduced in discourse,
always seem available for future anaphoric reference, and so do first- and second-
person pronouns. Therefore, in DRT, their discourse referents are introduced at the
global level of DRS, even in cases in which they are realized as part of a subordinated
context, as for the proper name Butch in Example (15).
</bodyText>
<subsectionHeader confidence="0.999607">
2.4 Binding and Accommodation Theory
</subsectionHeader>
<bodyText confidence="0.9995935">
In BAT, presuppositions obey similar principles as anaphora do: Presuppositions are
resolved to an antecedent, and moreover, resolution of presuppositions is constrained
by discourse structure in the same way DRT defines accessibility of antecedents for
ordinary pronouns. According to Van der Sandt, the main difference between presup-
</bodyText>
<equation confidence="0.999194842105263">
MIA(x)
y
¬ FIVE-DOLLAR-SHAKE(y)
ORDER(x, y)
VINCENT(z)
TASTE(z, u)
u=??
BUTCH(x)
y
VALUABLE-WATCH(y)
HAVE(x, y)
u v
⇒ WILL-TAKE-CARE-OF(u, v)
u = x
v = y
APARTMENT(z)
KEEP-IN-HIS-APARTMENT(u, v)
u = x
v =??
</equation>
<page confidence="0.991638">
185
</page>
<note confidence="0.434843">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.99100505882353">
positions and pronouns is that the former have descriptive content, which the latter
lack.
To integrate presuppositions into the representation of discourse, Van der Sandt
introduces sentence-DRSs, DRSs that are defined as a triple of a set of discourse ref-
erents, a set of conditions, and a (possibly empty) set of DRSs (Van der Sandt 1992,
page 354). This set is referred to as the A-structure, the set of anaphoric DRSs. This def-
inition is recursive, so it allows embedded anaphoric structures inside other anaphoric
structures. Sentence-DRSs are preliminary representations, and no model-theoretic in-
terpretation is defined for these structures. A completely resolved sentence-DRS (hence
all of its A-structures are empty) is identical to an ordinary DRS, and is called a proper
DRS.
Throughout this section and the next one, I will depict sentence-DRSs as boxes
divided into three parts, with the discourse referents at the top, the conditions at
the bottom left, and the A-structure at the bottom right. Given this definition and
notation of sentence-DRSs, let us consider some examples of presupposition triggers
and explain BAT. For instance, Butch’s utterance in example (10) will be associated
with the following DRS:
</bodyText>
<listItem confidence="0.753628">
(16) Floyd retired too.
</listItem>
<equation confidence="0.826067">
x
FLOYD(x)
RETIRE(x)
y
RETIRE(y)
¬ x=y
</equation>
<bodyText confidence="0.999657888888889">
This sentence-DRS (let us call it B) contains a presuppositional expression, namely, the
one triggered by the particle too. Given a context associated with another DRS C, B is
resolved by merging C with B (merging here meaning taking the unions of the sets of
discourse referents, conditions, and A-structures), followed by resolving all members
of the A-structure to accessible discourse referents. The resolution process, as Van der
Sandt (1992) formulates it in his article, is here only informally described, by means
of giving an example. Assume that in the previous context DRS C just describes that
Butch retired; then merging C with B yields a DRS in which the sets of discourse
referents, conditions, and A-structures from both DRSs are unified:
</bodyText>
<listItem confidence="0.565749">
(17) Butch retired. Floyd retired too.
</listItem>
<figure confidence="0.880154625">
u x
BUTCH(u)
RETIRE(u)
FLOYD(x)
RETIRE(x)
y
RETIRE(y)
¬ x=y
</figure>
<bodyText confidence="0.9195845">
In principle, sentence-DRSs can have any number of anaphoric entities in their
A-structures. In our example, the A-structure consists of one DRS. Now, resolving
</bodyText>
<page confidence="0.996345">
186
</page>
<subsectionHeader confidence="0.718231">
Bos Implementing Binding and Accommodation Theory
</subsectionHeader>
<bodyText confidence="0.999955">
elements of the A-structure is subject to either binding or accommodation. Let us
first look at binding. Members of the A-structure can be bound by an accessible an-
tecedent. Note that elements of the A-structure are resolved only if their A-structures
are empty. Nested anaphoric structures are thus resolved by resolving the most deeply
nested anaphoric DRS first. Binding proceeds by identifying the discourse referents
with established referents and transferring their associating conditions to the binding
site (Van der Sandt 1992, page 357).
Now let us consider accommodation. This option resolves a member of the A-
structure by creating an antecedent and becomes available if no suitable antecedent
for an anaphoric expression can be found. Accommodation is accomplished by trans-
ferring the anaphoric referent, including its conditions, to the accommodation site
(which, as with binding, must be an accessible DRS).
Going back to our example, we resolve the anaphoric DRS by appealing to the
binding option. The anaphoric discourse referent x is identified by the accessible dis-
course referent y, and all the conditions belonging to y are transferred to the binding
site. This gives us the following DRS:
</bodyText>
<figure confidence="0.550672125">
uxy
BUTCH(u)
RETIRE(u)
FLOYD(x)
RETIRE(y)
u=y
RETIRE(x)
¬ x=y
</figure>
<bodyText confidence="0.999895391304348">
This DRS contains an empty A-structure and hence is a proper DRS. Note that ac-
commodation would yield a similar DRS, with the only difference being the lack of
the equality condition. Further, according to BAT, accommodation can be applied to
any level of discourse, and to indicate these possibilities for accommodation at vari-
ous levels, the concepts of global, intermediate, and local accommodation are used,
corresponding to the various landing sites for a presupposition. Hence, in more com-
plicated examples, binding and accommodation give rise to several possibilities, and
Van der Sandt’s algorithm will yield a large number of potential solutions. These so-
lutions are filtered by a number of constraints, some of which I will introduce below,
when I discuss how BAT deals with the binding problem and presupposition projec-
tion. These acceptability constraints will be discussed and implemented in detail in
Section 4.3.
BAT tackles the projection problem by imposing several constraints with respect
to consistency and informativeness. The local versions of these constraints impose
the requirement that sub-DRSs (DRSs that are embedded in conditions of DRSs) be
informative and consistent with respect to the information that subordinates them.
These acceptability constraints can be viewed as the pragmatic component of BAT,
because there is a clear correspondence to the Gricean conversational maxims (“do not
say what you believe to be false,” “do not say things that are irrelevant,” and so on). As
an illustration of local informativeness, consider example (19). Global accommodation
of her husband is impossible here, because the sentence does not presuppose that Mia
is married. BAT predicts this, because example (19) violates local informativeness: The
antecedent DRS of the conditional does not contain new information with respect to
</bodyText>
<figure confidence="0.922255545454545">
(18)
187
Computational Linguistics Volume 29, Number 2
the global DRS (using background knowledge that women who have husbands are
married).
(19) If Mia is married then her husband is out of town. (global accommodation)
x y
⇒ HUSBAND(y)
MIA(x)
OF(y,x)
MARRIED(x) OUT-OF-TOWN(y)
</figure>
<bodyText confidence="0.99789975">
Whereas the acceptability constraints rule out example (19) as a possible inter-
pretation, there are other possible interpretations because of the availability of other
accommodation sites for Mia’s husband. One of these possibilities, intermediate ac-
commodation, is shown in example (20) (a third possibility, not shown here, is local
accommodation, in which the consequence of the implicational condition is the land-
ing site for the presupposition). Intermediate accommodation does not violate local
informativeness here: All the sub-DRSs are informative with respect to their global
context.
</bodyText>
<listItem confidence="0.914479">
(20) If Mia is married then her husband is out of town. (intermediate
accommodation)
</listItem>
<bodyText confidence="0.989866454545455">
x
⇒ MIA(x)
y
HUSBAND(y)
OF(y,x)
MARRIED(x)
OUT-OF-TOWN(y)
BAT masters the binding problem by combining presupposition and assertion
into one semantic representation that allows shared use of discourse referents. This
is shown by the DRS for example (21) (in which his has already been resolved to the
boxer, and his apartment is still subject to resolution):
</bodyText>
<figure confidence="0.294074333333333">
(21) A boxer escaped from his apartment.
x
BOXER(x) y
NEARLY-ESCAPE-FROM(x,y)
APARTMENT(y)
OF(y,x)
</figure>
<bodyText confidence="0.9996686">
The shared representation solves the binding problem, but as a direct consequence,
accommodation might result in ill-formed DRSs. To overcome this, there is a further
acceptability constraint on resolution, known as the free variable trap, which imposes
the requirement that DRSs resulting from the resolution algorithm not contain free
variables. This prevents global accommodation of his apartment in example (22).
</bodyText>
<page confidence="0.96724">
188
</page>
<figure confidence="0.725962571428571">
Bos Implementing Binding and Accommodation Theory
(22) Every boxer escaped from his apartment.
y
x
BOXER(x) ⇒
ESCAPE-FROM(x,y) APARTMENT(y)
OF(y,x)
</figure>
<bodyText confidence="0.997602916666667">
To sum up, BAT gives us three important insights with respect to resolving pre-
suppositions. First of all, the resolution algorithm used in BAT is nondeterministic,
so several ways of interpreting presuppositions are possible. In most cases, there is
a clear preference for certain of these interpretations, but in others, presuppositions
present genuine ambiguities. Second, presuppositional binding involves compatibility
with, rather than entailment of, its antecedent. This “matching” feature enables pre-
suppositions to add information to the discourse, even if they are bound to an an-
tecedent rather than accommodated. Finally, by treating presupposition on a par with
anaphora, BAT kills two birds with one stone. The resolution algorithm will cover
both anaphora and presuppositions, and additional resources for resolution (such as
mechanisms for preference ranking) will help in dealing with both anaphora and
presupposition.
</bodyText>
<subsectionHeader confidence="0.610777">
3. Representing Discourse and Presuppositions
</subsectionHeader>
<bodyText confidence="0.999977285714286">
This section is concerned with proper representations for discourse and presupposi-
tion, with the interpretation of discourse (aiming to being able to perform inferences),
and further provides tools necessary for discourse processing and presupposition res-
olution. I will start with some formalities and define the syntax of standard DRSs and
the syntax of α-DRSs (DRSs that contain unresolved presuppositions). I will argue that
the representation for sentence-DRSs, as originally introduced for presuppositions in
BAT, is insufficient for several interpretation tasks and introduce a new format.
</bodyText>
<subsectionHeader confidence="0.999731">
3.1 Representing and Interpreting Discourse
</subsectionHeader>
<bodyText confidence="0.99997">
DRSs capture the semantic content of a discourse. They form the medium for discourse
understanding, because they come with a model-theoretical interpretation. The inter-
pretation given here is one via a translation to first-order logic. This is advantageous
from a practical and computational perspective, because one can use automated the-
orem provers for first-order logic to implement some of the acceptability constraints
imposed by BAT or indeed carry out other kinds of inferences not related to anaphora
resolution and presupposition accommodation.
The syntax of DRSs and DRS-conditions is defined by simultaneuous recursion,
with respect to a set of first-order variables and a vocabulary describing the predicate
symbols and their respective arities.
</bodyText>
<subsectionHeader confidence="0.628385">
Definition
</subsectionHeader>
<bodyText confidence="0.99787">
The syntax of DRSs and DRS-conditions is defined according to the following seven
clauses:
</bodyText>
<listItem confidence="0.775175">
1. If {x1 ... x„} is a finite set of variables, and {y1 ... ym} is a finite set of
</listItem>
<bodyText confidence="0.9099455">
DRS-conditions, then the ordered pair ({x1 ... x„}, {y1 ...ym}) is a basic
DRS.
</bodyText>
<page confidence="0.993137">
189
</page>
<bodyText confidence="0.152862">
Computational Linguistics Volume 29, Number 2
</bodyText>
<listItem confidence="0.998207714285714">
2. If R is a relation symbol for an n-place predicate and x1 ... xn are
variables, then R(x1, ... , xn) is a basic DRS-condition.
3. If x1 and x2 are variables, then x1 = x2 is a basic DRS-condition.
4. Every basic DRS-condition is a DRS-condition.
5. If B is a DRS, then ¬B, ❑B, and OB are DRS-conditions.
6. If B1 and B2 are DRSs, then B1 ∨ B2, and B1 ⇒ B2 are DRS-conditions.
7. If x is a variable and B is a DRS, then x : B is a DRS-condition.
</listItem>
<bodyText confidence="0.9998104">
Given a DRS B = (D, C), D is called the domain of B, members of C are the
conditions of B, and members of D are called B’s discourse referents. Clause 1 of
the definition defines DRSs in the standard way. The basic conditions (clauses 2–3)
are defined just as in standard DRT. Clause 5 introduces negation and the modal
operators, and clause 6 disjunction and implication. Clause 7 is nonstandard; it in-
troduces a modal operator that explicitly associates variables ranging over possi-
ble worlds with DRSs. It is therefore related to constructs used in hybrid logics
(Blackburn 2000). We will use it in our fragment of English to represent sentential
complements.
DRSs are interpreted in an indirect manner, with the help of a translation function
that maps DRSs to first-order formulas (under the same vocabulary of predicate sym-
bols and with respect to the same set of variables). This translation is implemented
as the function (.,.) fo, from first-order variables (ranging over possible worlds) and
DRSs to ordinary first-order formula syntax. The complete translation is shown in the
following definition.
</bodyText>
<subsectionHeader confidence="0.622662">
Definition
</subsectionHeader>
<bodyText confidence="0.687717258064516">
The translation (.,.)fo from DRSs to first-order logic is defined according to the follow-
ing nine clauses:
190 (w, x1 ... xn ) fo def =∃x1 ··· ∃xn((w,γ1)fo ∧ ··· ∧ (w,γm)fo)
(w, de
(w, =f R(w,x1,...,xn)
(w, =f x1 = x2
(w, = (w, B1) fo ∨ (w, B2) fo
(w, ⇒ B)fo def = ∀x1 ··· ∀xn(((w,γ1)fo ∧ ··· ∧ (w,γm)fo) → (w,B)fo)
(w,v ∧ (v,B)fo)
→ (v,B)fo)
∧ (v,B)fo)
de
def = ¬(w,B)fo
γ1 ... γm
(w,R(x1,
(w,¬B)fo
...,xn))
x1 = x2) fo
B1 ∨ B2)fo def
x1 ... xn
γ1 ... γm
OB) fo def = ∃v(R(w,v)
❑B)fo def = ∀v(R(w,v)
: B) fo def = (R(w,v)
Bos Implementing Binding and Accommodation Theory
This translation from DRSs to first-order logic is based on the one given in Kamp
and Reyle (1993) extended with Moore’s proposal for modal operators (Moore 1980).
It behaves linearly on the size of the input, so the computational overhead is kept
low. I will use it to implement the acceptability constraints imposed by BAT on pre-
supposition resolution that require inference, to wit, the check for consistency and
informativeness.
</bodyText>
<subsectionHeader confidence="0.999855">
3.2 Representing Presuppositions
</subsectionHeader>
<bodyText confidence="0.999899">
What is a proper representation for elementary presuppositions? There seems to be
common agreement, in most of the accounts in presupposition theory, that presuppo-
sitions represent expressions of propositional type. Hence, to use a DRS to represent
a single presupposition seems a natural choice.
But there are further issues that play a role in deciding a suitable representation
for presuppositions. Two operations on DRSs used in BAT are merge reduction and
presuppositional binding,2 and both require a precise definition of free and bound vari-
ables. However, sentence-DRSs allow “ambiguous” bindings. Consider, for instance,
the DRS in example (23) (again I will underline the relevant presupposition triggers
in the following examples):
</bodyText>
<listItem confidence="0.84378">
(23) A man smiles. The woman smokes.
</listItem>
<equation confidence="0.523815">
x
MAN(x)
SMILE(x)
SMOKE(x)
x
WOMAN(x)
</equation>
<bodyText confidence="0.999956181818182">
This sentence-DRS contains an A-structure with a single DRS. It is unclear whether the
occurrence of variable x in the condition SMOKE(x) is bound by the discourse referent
x in the outermost DRS or by the discourse referent declared in the DRS within the
A-structure. Following the definition of sentence-DRSs, the discourse referent x in the
A-structure does not in fact bind the occurrences of x in the main DRS. Furthermore,
given the fact that A-structures can host more than one DRS, situations with ambiguous
bindings might appear easily.
These unintuitive and ambiguous bindings are unpleasant and force one to recon-
sider representing unresolved anaphoric expressions in DRT. The representation that I
prefer uses a new operator, α, combining two DRSs to form a new DRS. This disallows
ambiguous bindings while keeping the same expressive power:
</bodyText>
<listItem confidence="0.9236">
(24) A man smiles. The woman smokes.
</listItem>
<bodyText confidence="0.7164975">
x x
WOMAN(x)
( MAN(x) ;( α SMOKE(x) ))
SMILE(x)
2 I am considering presuppositional binding in which, after identifying the antecedent discourse referent,
all bound occurrences of the anaphoric discourse referents are replaced by the variable name of the
antecedent referent. This operation is preferred to adding an equality condition between the antecedent
and anaphoric referent to the DRS, for two reasons: It decreases the search space for finding
antecedents during subsequent instances of presupposition resolution, and it makes the inference
problems derived from these DRSs less difficult.
</bodyText>
<page confidence="0.98267">
191
</page>
<note confidence="0.417764">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.924218555555556">
I believe that the representation in example (24) is more intuitive as well, because it is
presupposition that comes first in an utterance. The α operator reflects this, because its
left argument is the presuppositional part, and its right argument the assertive part.
Like A-structures, the α operator allows recursion and therefore nested presupposi-
tions.
I would like to address another representational issue here. In Van der Sandt’s
(1992) original formulation of BAT, all discourse referents appearing in the domain
of a DRS in the A-structure are anaphoric. This leads to unexpected behavior, as
exemplified by the sentence-DRSs for the two sentences in example (25):
</bodyText>
<figure confidence="0.468781666666667">
(25) The boy with a gun fires.
FIRE(x) x y
BOY(x)
WITH(x,y)
GUN(y)
The boy with the gun fires.
FIRE(x) x
BOY(x) y
WITH(x,y) GUN(y)
</figure>
<bodyText confidence="0.999846166666667">
The sentences in (25) contain noun phrases with restricted relative clauses. In the first
example the relative clause contains an indefinite noun phrase a gun, whereas in the
almost identical second example, it contains a definite (hence presuppositional) noun
phrase. These two sentence-DRSs do not, however, reflect the difference in meaning
of the utterances they represent. The indefinite noun phrase a gun gets an anaphoric
interpretation, because it is part of the A-structure. The anaphoric potential of the two
utterances, according to the sentence-DRSs for the two utterances in example (25),
is almost identical, the only difference being that the DRS for the second utterance
allows binding or accommodation on two different levels (instead of one level) of
discourse structure. Summing up, A-structures do not allow for selective binding,
with the unwanted side effect that indefinite noun phrases are turned into definite
ones.
To allow for selective binding, I introduce the notion of principal anaphoric
referent. The operator α is indexed with the principal anaphoric referent to indi-
cate which discourse referent of a presuppositional DRS is anaphoric. In fact, I as-
sume that each presupposition trigger has a unique principal anaphoric referent.3
Now let us consider the DRSs for the same utterances in (25) in the new
formats:
</bodyText>
<footnote confidence="0.99305">
3 Although this seems a small and innocent adjustment to the representation of elementary
presuppositions, it has great impact on our understanding what characterizes presuppositions. Under
this view, presuppositions are not merely DRSs, but they are DRSs plus an additional pointer, in the
form of a distinguished discourse referent, to a context.
</footnote>
<page confidence="0.98483">
192
</page>
<figure confidence="0.803383647058823">
Bos Implementing Binding and Accommodation Theory
(26) The boy with a gun fires. The boy with the gun fires.
x y
BOY(x)
(
GUN(y)
WITH(x,y)
FIRE(x)
αx
y
GUN(y) αy
x
BOY(x) )αx
WITH (x,y)
FIRE(x)
) ((
)
</figure>
<bodyText confidence="0.999630333333333">
Although the entire DRS of the left-hand side of the α-operator is said to be pre-
suppositional, resolution will affect only the principal discourse referent. For The boy
with a gun, this is x, and only x is identified with an antecedent discourse referent;
y, introduced for the indefinite noun phrase a gun, is not treated as anaphoric. This
is in contrast to the DRS for The boy with the gun, which contains nested α-DRSs. In
short, α allows selective binding, whereas Van der Sandt’s A-structures are based on
unselective binding.
I will refer to this new format for DRSs, encoding unresolved anaphoric DRSs,
as α-DRSs. Like sentence-DRSs, α-DRSs are intermediate representations and have
no interpretation. The best way to view them is as underspecified representations
encoding the ambiguities of anaphoric expressions in a compact manner. The syntax
of α-DRSs is defined as follows:
</bodyText>
<sectionHeader confidence="0.5332" genericHeader="introduction">
Definition
</sectionHeader>
<bodyText confidence="0.989025">
The syntax of α-DRSs is defined on the basis of the following four clauses:
</bodyText>
<listItem confidence="0.963723857142857">
1. If {x1 ... xn} is a finite ordered set of variables and {-y1 ... -ym} is a finite
ordered set of α-DRS-conditions, then the ordered pair
({x1 ... xn}, {-y1 ... -ym}) is a basic α-DRS.
2. Every basic α-DRS is an α-DRS.
3. If B1 and B2 are α-DRSs, then so is (B1;B2).
4. If B1 and B2 are α-DRSs, and x is a discourse referent declared in the
domain of B1, then (B1 αx B2) is an α-DRS.
</listItem>
<bodyText confidence="0.999537428571428">
Note that in clause 1 of the definition, ordered sets are used rather then plain sets
for discourse referents and DRS-conditions; this will make definition of the resolution
algorithm easier. DRS merging (clause 4) is used in many alternative formulations of
DRT (Muskens 1996; Van Eijck and Kamp 1997; Kuschert 1999). The merge employed
here, “;”, is adopted from Muskens and behaves semantically the same as dynamic
conjunction in dynamic predicate logic (Groenendijk and Stokhof 1991).
The syntax of α-DRS-conditions is defined as follows:
</bodyText>
<sectionHeader confidence="0.607973" genericHeader="method">
Definition
</sectionHeader>
<bodyText confidence="0.994096">
The syntax of α-DRS-conditions is defined according to the following four clauses:
</bodyText>
<listItem confidence="0.9993505">
1. Every basic DRS-condition is an α-DRS-condition.
2. If B is an α-DRS, then ¬B, ✷B, and ✸B are α-DRS-conditions.
3. If B1 and B2 are α-DRSs, then B1 V B2 and B1 ⇒ B2 are α-DRS-conditions.
4. If x is a variable and B is an α-DRS, then x : B is an α-DRS-condition.
</listItem>
<page confidence="0.994513">
193
</page>
<note confidence="0.632117">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.999624083333333">
So the syntax for α-DRSs subsumes the syntax of DRSs. I will refer to α-DRSs that
contain no DRSs of the form (B αi B&apos;) as presupposition-free. All other α-DRSs are
referred to as presupposition-containing. (The same terminology will be used for α-
DRS-conditions.) It is easy to show that presupposition-free α-DRSs are proper DRSs.
In Table 1, I give several examples of lexical entries of presupposition triggers,
assuming a compositional semantics in the Montagovian tradition based on Muskens’s
(1996) compositional DRT (Muskens, 1996). The syntactic categories used in the table
are N (noun), DET (determiner), NP (noun phrase), ADJ (adjective), and V (verb).
Further, p and q are used to denote variables ranging over properties, and s to denote
variables ranging over propositions. The table lists various kinds of presupposition
triggers, including the definite determiner, a proper name (Mia), a factive verb (to
realize), a sortally restricted predicate (bachelor), and the iterative adjective other.
</bodyText>
<subsectionHeader confidence="0.999038">
3.3 Operations on Discourse Representations
</subsectionHeader>
<bodyText confidence="0.9999477">
In this section I will formulate two operations on discourse representations required
for presupposition resolution: renaming and merging. Furthermore, I will introduce
the concepts of free and bound variables in discourse representations, because we need
to implement the free-variable constraint. This will also give us a better understanding
of the problems that arise in renaming and merging.
A free variable in this context is an occurrence of a variable in a DRS that is
not declared as a discourse referent in the domain of the immediate DRS in which it
occurs or in the domain of a superordinated DRS; all other variables are bound. To
be more precise, I define two functions, FREE and BOUND, that compute the free and
bound variables for DRSs and DRS-conditions:
</bodyText>
<sectionHeader confidence="0.539279" genericHeader="method">
Definition
</sectionHeader>
<bodyText confidence="0.925629">
Free and bound variables in α-DRSs are defined according to the following nine
clauses:
</bodyText>
<listItem confidence="0.998103111111111">
1. FREE(({x1 ... xn}, {γ1 ...γm})) = (FREE(γ1) ∪ . . . ∪ FREE(γm))\{x1 ... xn};
BOUND(({x1 ... xn}, {γ1 ... γm})) = {x1 ... xn}
2. FREE(BαB&apos;) = (FREE(B) ∪ FREE(B&apos;))\BOUND(B);
BOUND(BαB&apos;) = BOUND(B) ∪ BOUND(B&apos;)
3. FREE(B;B&apos;) = (FREE(B) ∪ FREE(B&apos;))\BOUND(B);
BOUND(B; B&apos;) = BOUND(B) ∪ BOUND(B&apos;)
4. FREE(R(x1,...,xn)) = {x1,...,xn};
BOUND(R(x1, ... , xn)) = ∅
5. FREE(x=y)= {x,y};
BOUND(x=y)= ∅
6. FREE(B ⇒ B&apos;) = (FREE(B) ∪ FREE(B&apos;))\BOUND(B);
BOUND(B ⇒ B&apos;) = ∅
7. FREE(B ∨ B&apos;) = FREE(B&apos;) ∪ FREE(B);
BOUND(B ∨ B&apos;) = ∅
8. FREE(γ) = FREE(B) if γ is of the form ¬B, ❑B, OB;
BOUND(γ) = ∅ if γ is of the form ¬B, ❑B, OB
9. FREE(x : B) = {x} ∪ FREE(B);
BOUND(x : B) = ∅
</listItem>
<page confidence="0.993136">
194
</page>
<note confidence="0.756829">
Bos Implementing Binding and Accommodation Theory
</note>
<tableCaption confidence="0.818914">
Table 1
Lexical entries for various presupposition triggers and presupposition-free expressions.
</tableCaption>
<table confidence="0.986579294117647">
Category Lexical Semantics Example
N λx.( λx. boxer
N λp.λq.(( bachelor
DET a
DET every
DET the
DET her
NP somebody
NP Mia
NP she
ADJ blue
ADJ other
V believes
V realizes
BOXER(x)
y
MALE(y) αy )
y=x
¬
MARRIED(x)
λp.λq. λp.λq.(( ;q(x)) ;p(x)))
λp.λq.(( ;p(x)) ;p(y))αyq(y))))
x
( x ;p(x))⇒ q(x)
;p(x))αxq(x))
x
x y
FEMALE(x) αx(( OF(y,x)
λp.λx.(( λp. αxp(x)) ;p(x))
λs.λx.( λp. αxp(x))
λp.( ;p(x))
λp.λx.(
x
(
BODY(x)
x
(
MIA(x)
x
FEMALE(x)
λs.λx.
BLUE(x)
;p(y))αy
y
( ¬
x=y
b
b:s
BELIEVE(x,b)
b αb )
b:s REALIZE(x,b)
</table>
<page confidence="0.673199">
195
</page>
<note confidence="0.428653">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.999672">
For renaming variables in DRSs, a (total) function r is used whose arguments are
provided by an auxiliary (total) function σ that maps a variable to a stringed sequence
of a copy of itself. The use of σ makes the values r assigns to a variable x sensitive
to the number of occurrences of x in a DRS: σ(x) = x if x has not appeared (bound)
so far in a DRS, σ(x) = xx if x has appeared (bound) once, xxx if x has appeared
(bound) twice, and so on. Putting it differently, σ is a counter. It counts the number of
occurrences of declarations of discourse referents in a DRS. On the basis of that count,
the renaming function r maps a variable onto a new, previously unused occurrence.
The renaming function r maps a sequence of variables to a new, fresh discourse
variable. The function r is injective, meaning that distinct argument sequences to r
produce distinct values. In other words, the values r assigns to x, y, z, xx, yy, zz, xxx,
yyy, zzz, and so on are all different. In sum, with the help of r and σ, we make explicit
that two discourse referents declared under the same name in two different domains
in a DRS get two different names. The definition of renaming in DRS (where for a set
of discourse referents U, UPDATE(σ, U, σ&apos;) holds just if ∀x(σ&apos;(x) = σ(x) ↔ x ∈/ U) and
</bodyText>
<equation confidence="0.802875222222222">
∀x(σ&apos;(x) = σ(x)x ↔ x ∈ U) hold) is as follows:
Definition
DRS renaming is defined according to the following eight clauses:
1. RENAME(σ, ({x1 ... xn}, {C1 ... Cm})) =
�σ�, �{r(σ�(x1)) . . . r(σ�(xn))}, {C~ 1 . . . C~ m}
if UPDATE(σ, {x1, ... , xn}, σ&apos;) and RENAME(σ&apos;, Ci) = (σ&amp;quot;, Cl) for some σ&amp;quot;
2. RENAME(σ, (B1; B2)) = (σ&amp;quot;, (B~1;B�2))
if RENAME(σ, B1) = (σ&apos;, B&apos;) and RENAME(σ�, B2) = �σ��, B~ 2
3. RENAME(σ,(B1 αx B2) = (σ&amp;quot;,(BI αr(σ&apos;(x))B2))
</equation>
<bodyText confidence="0.503152">
if RENAME(σ,B1) = (σ&apos;, B&apos;) and RENAME(σ�,B2) = �σ��,B� 2
</bodyText>
<listItem confidence="0.915568666666667">
4. RENAME(σ,R(x1,...,xn)) = �σ, R(r(σ(x1)), . . . , r(σ(xn)))�
5. RENAME(σ,x = y) = (σ,r(σ(x)) = r(σ(y)))
6. RENAME(σ, B1 ⇒ B2) = (σ, Bi ⇒ BZ)
</listItem>
<bodyText confidence="0.921300705882353">
if RENAME(σ, B1) = (σ&apos;, Bi) and RENAME(σ�, B2) = �σ��, B~ 2
for some σ��
7. RENAME(σ, B1 ∨ B2) = (σ, Bi ∨ BZ)
if RENAME(σ, B1) = (σ&apos;, B&apos;) and RENAME(σ,B2) = (σ&amp;quot;, B~ 2
for some σ&apos; and
σ//
8. RENAME(σ, ¬B) = (σ, ¬B&apos;) if RENAME(σ, B) = (σ&apos;, B&apos;) for some σ~
The function RENAME maps an ordered pair consisting of a σ-function and a DRS to
a new σ-function and the translated DRS. Clauses 1–3 of the definition handle DRSs,
clauses 4–8 handle the DRS-conditions. With respect to variables not declared in a
universe of a DRS, σ remains unchanged. For variables that are declared as discourse
referents in a DRS, σ increases the values for these variables by one. Clauses 2, 3, and
6 show that the σ-function produced by the first DRS is passed through to the second
DRS, following the definition of DRS-subordination.
With the renaming function at our disposal, we now can define pure DRSs as
DRSs that have undergone renaming. The conversion of a DRSs potentially changes its
discourse meaning, and this is actually the key function of renaming: maximizing the
</bodyText>
<page confidence="0.993726">
196
</page>
<subsectionHeader confidence="0.355878">
Bos Implementing Binding and Accommodation Theory
</subsectionHeader>
<bodyText confidence="0.999871777777778">
context change potential of a DRS. To preserve the logical meaning while renaming,
we need to put restrictions on the use of renaming. As DRSs can bind variables outside
their scope (for instance, through use of the merge operator), applying the renaming
procedure only to a DRS B that is actually part of another DRS B&apos; would possibly affect
the logical meaning of a DRS. Therefore, only complete DRSs should be renamed; that
is, if a sub-DRSs is renamed, any DRS that superordinates it must be renamed too.
Let me now relate this to practical discourse processing. Assume that processing a
text proceeds in an incremental way, starting with processing the first sentence, until a
DRS is eventually derived for the entire text. At some point during this process, after
completing the analysis of a sentence, part of the text is translated into a DRS. At this
stage of processing, the obtained DRS is complete (it is not part of another DRS, as the
rest of the text is still unanalyzed), and it can be renamed without changing its logical
meaning, while maximizing its context change potential. The rest of the discourse is
then processed with respect to the renamed DRS.
Hence, given a pure DRS, we can replace a DRS (B; B&apos;) with a new DRS that is
constructed by taking the unions of the discourse referents and the conditions of B
and B&apos;, respectively. We will specify the merging of DRSs with the help of a function
MERGE from DRSs to DRSs. This function is defined recursively:
</bodyText>
<subsectionHeader confidence="0.498694">
Definition
</subsectionHeader>
<bodyText confidence="0.966199">
Merge reduction for pure DRSs is defined according to the following two clauses:
</bodyText>
<listItem confidence="0.91883">
1. MERGE((DB,CB)) = (DB,CB)
2. MERGE((B; B&apos;)) = (DMERGE(B) U DMERGE(BI),CMERGE(B) U CMERGE(Bl))
</listItem>
<bodyText confidence="0.999612333333333">
Carrying out merge reduction simplifies the DRS structure and facilitates use of the
standard accessibility definition. Moreover, using MERGE, it is straightforward to define
the set of discourse referents within a universe of a pure DRS B, namely, UMERGE(B).
I will make use of this when I implement pronoun and presupposition resolution in
the next section. Finally, merge reduction yields DRSs that can be transformed into
first-order logic using the translation function given in Section 3.1.
</bodyText>
<sectionHeader confidence="0.895381" genericHeader="method">
4. Presupposition Resolution
</sectionHeader>
<bodyText confidence="0.99487775">
In this section I will reformulate Van der Sandt’s presupposition resolution algorithm
in terms of α-DRSs with the aim of reducing the generate-and-test nature of Van der
Sandt’s original formulation. Even for relative simple examples, the search space of
possible interpretations is vast. Consider the following example:
(27) If Bonnie finds a corpse in her house, the dead body will frighten her.
Without applying any acceptability constraints, resolving the four triggers in exam-
ple (27) will yield 1,280 different solutions. If binding is preferred to accommodation,
the example will still give rise to 525 possible interpretations. It is clear that a generate-
and-test approach, in which the acceptability constraints are applied to completely re-
solved DRSs, will be extremely inefficient. The algorithm implemented in this section
applies, as far as possible, the acceptability constraints to partially resolved DRSs, and
thereby reduces the search space.
</bodyText>
<page confidence="0.991944">
197
</page>
<note confidence="0.637955">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.999894">
To deal with the different anaphoric behavior of noun phrases in English, I will
propose a typology of noun phrases reflecting their properties with respect to binding
and accommodation. Further, I will precisely formulate the acceptability constraints
imposed by the resolution algorithm and outline how to add preference ranking to
the solutions generated by the algorithm.
</bodyText>
<subsectionHeader confidence="0.998836">
4.1 The Resolution Algorithm
</subsectionHeader>
<bodyText confidence="0.999224903225806">
Presupposition resolution in discourse processing is assumed to take place on an
utterance-by-utterance basis. Therefore, the resolution algorithm takes as input the
DRS constructed for the discourse so far and an α-DRS for the new utterance and
outputs a new DRS. The algorithm is recursive in nature, and given an α-DRS A with
n presupposition triggers, each step in the resolution process will resolve one trigger
and decrease n by one, until A is presupposition-free (i.e., n = 0).
The idea behind the resolution algorithm is to detect any violations of the accept-
ability constraints as soon as possible in the process of resolution, thereby restricting
the search space. After each resolution step the acceptability constraints are checked for
violation. Some of the acceptability constraints, however, are not defined for α-DRSs
and can be applied only to the finally resolved DRS.
I will present the algorithm in a notation borrowed from logic programming, using
negation as failure, backtracking for efficiency, and unification for term manipulation.
Given the definition below, it is straightforward to implement the algorithm using
a programming language like PROLOG. DRSs are represented as an ordered pair of
lists, and PROLOG-style variables are used to represent discourse referents and first-
order variables. Further, I will use the following notational conventions: A, B, and C
are used to denote DRSs, L and M to denote DRS-conditions, and P and Q to denote
accessibility paths.
The main predicate of the algorithm consists of the following two clauses:
resolve(C,B,B) ← presup-free(B), consistent(B), informative(C,B).
resolve(C,B,E) ← alfa(B-D,[]-[A|P]), move(A,P,D), resolve(C,D,E).
The first resolve clause terminates the recursion if all presuppositions are resolved, then
checks the resulting DRS for consistency and informativeness (see Section 4.3). The
second, recursive resolve clause makes use of two further predicates that I introduce
now: alfa, for determining the first presupposition trigger in the α-DRS, and move,
which either binds or accommodates the trigger to an accessible level of discourse.
Let us consider first alfa, which is defined for a pair of α-DRSs (or α-DRS-
conditions) and a pair of accessibility paths. (Recall that an accessibility path is a
list of levels of DRSs, starting with the presupposition trigger and ending with the
global level of discourse.) This is the definition for α-DRSs:
</bodyText>
<equation confidence="0.9875766">
alfa((AαB)-(CαB),P-Q) ← alfa(A-C,P-Q).
alfa((AαB)-(C;B),P-[A,acc(C)|P]) ← presup-free(A).
alfa((A;B)-(C;B),P-Q) ← alfa(A-C,P-Q).
alfa((A;B)-(X;C),P-Q) ← presup-free(A), alfa(B-C,[bin(A,X)|P]-Q).
alfa((U,L)-(A;R),P-Q) ← alfa(L-M,[acc(A),bin((U,M),R)|P]-Q).
</equation>
<bodyText confidence="0.98707275">
What alfa effectively does is traverse the DRS structure, thereby building up the accessi-
bility path, until it hits a presupposition trigger. The accessibility path is constructed as
a list of binding or accommodation sites. Binding sites are marked as bin(A,B), where
A is the original site (i.e., a DRS) and B the result of binding. Accommodation sites
</bodyText>
<page confidence="0.991807">
198
</page>
<subsectionHeader confidence="0.355451">
Bos Implementing Binding and Accommodation Theory
</subsectionHeader>
<bodyText confidence="0.999951555555555">
are marked as acc(A), where A is the result of accommodation. For instance, consider
the two clauses for the DRS merge in the definition above, in which the input DRS is
of the form (A;B). If A contains a presupposition, then alfa(A-C,P-Q) holds, and the
resulting DRS will be set to (C;B). If A is presupposition-free, B will be traversed for
presuppositions (resulting in C) and a binding site X for A will be introduced on the
accessibility path represented by P and Q. Possible binding sites are also introduced
by basic DRSs. Basic DRSs furthermore introduce a possible accommodation site in
case one of their complex conditions contain α-DRSs. The clauses for DRS-conditions
are defined as follows:
</bodyText>
<equation confidence="0.9860143">
alfa([XjL]-[XjM],P-Q) +— basic(X), alfa(L-M,P-Q).
alfa([�BjL]-[-CjL],P-Q) +— alfa(B-C,P-Q).
alfa([❑BjL]-[❑CjL],P-Q) +— alfa(B-C,P-Q).
alfa([OBjL]-[OCjL],P-Q) +— alfa(B-C,P-Q).
alfa([x:BjL]-[x:CjL],P-Q) +— alfa(B-C,P-Q).
alfa([BVAjL]-[CVAjL],P-Q) +— alfa(B-C,P-Q).
alfa([AVBjL]-[AVCjL],P-Q) +— presup-free(A), alfa(B-C,P-Q).
alfa([B=:�AjL]-[C=:�AjL],P-Q) +— alfa(B-C,P-Q).
alfa([A=:�BjL]-[(E;D)=:�CjL],P-Q)+— presup-free(A), presup-free(A), alfa(B-
C,[bin(A,E),acc(D)jP]-Q).
</equation>
<bodyText confidence="0.999525923076923">
Note that, because we use ordered sets of DRS-conditions, the predicate alfa behaves
in a deterministic way, and it returns the first presuppositional DRS that itself is
presupposition-free. Further note that the accessibility path reflects the accessibility
relation defined in DRT, which is mirrored by the clauses for alfa. For instance, note
the difference in definition between the implicational and disjunctional condition.
The accessibility path returned by alfa forms a skeleton for a resolved DRS, which
will be instantiated based on the decision as to whether to bind or accommodate the
presupposition, and on which level. For a site encoded by acc(A), accommodation
involves identifying the presuppositional DRS with A. For binding, it involves match-
ing the presupposition with DRS A resulting in a new DRS B for a site of the form
bin(A,B). This process is implemented by the predicates move, bind, accommodate, and
skip. Let us first consider move. As BAT dictates, resolution involves either binding or
accommodation:
</bodyText>
<equation confidence="0.993334">
move(A,P,B) +— bind(A,P), �sortal-violation(B), binding-violation(B).
move(A,P,B) +— accommodate(A,P), free-variables(B).
</equation>
<bodyText confidence="0.999964142857143">
The first clause of move binds the presupposition to a DRS on the accessibility path
and then checks the acceptability constraints (see Section 4.3 for the definition of these
constraints). The second clause invokes accommodation, followed by a check on free
variables (again, see Section 4.3). Let us first consider binding. Binding is possible only
on binding sites, where the presuppositional information is matched with the DRS on
the binding site, resulting in a new DRS. Binding is defined recursively, for there might
be several appropriate binding sites:
</bodyText>
<equation confidence="0.9914825">
bind((D,L)X,[bin((D&apos;,L&apos;),(DUD&apos;,LUL&apos;))jP]) +— XED&apos;, skip(P).
bind(A,[SjP]) +— bind(A,P), skip([S]).
</equation>
<bodyText confidence="0.9731615">
Accommodation is very similar to binding, but only accommodation sites on the
accessibility path are relevant and come into question. Accommodation now boils
</bodyText>
<page confidence="0.9957">
199
</page>
<note confidence="0.627443">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.9653155">
down to unification of the presuppositional information with the DRS on the accom-
modation site. Again, there might be several accommodation sites (corresponding to
global, local, or intermediate levels of discourse), so a recursive definition is appropri-
ate:
</bodyText>
<equation confidence="0.985388">
accommodate(A,[acc(A)|P]) ← skip(P).
accommodate(A,[S|P]) ← accommodate(A,P), skip([S]).
</equation>
<bodyText confidence="0.9951762">
Finally, we need to define skip. This function takes care of all accommodation and
binding sites that were not selected as antecedent for the presupposition trigger. For
a possible accommodation site, this will result in identifying its DRS with an empty
DRS, and for a binding site, the resulting DRS will be unchanged with respect to its
original one:
</bodyText>
<equation confidence="0.997681">
skip([]) ← true.
skip([acc((∅,∅))|P]) ← skip(P).
skip([bin(A,A)|P]) ← skip(P).
</equation>
<bodyText confidence="0.999982625">
This is the core of the algorithm, but various extensions are possible. In the follow-
ing section I will take different types of presuppositional triggers into account, be-
cause some expressions allow for accommodation and others do not, and some can
be resolved only at the global level of discourse, whereas others are not sensitive to
subordinated levels. Furthermore, I will formulate the acceptability constraints and
investigate means to account for preferences in solutions. (As it stands, the algorithm
will produce a set of solutions, all equal to one another. But as noted in the discussion
of BAT, there are sometimes clear preferences for certain solutions.)
</bodyText>
<subsectionHeader confidence="0.998812">
4.2 Classifying Presupposition Triggers
</subsectionHeader>
<bodyText confidence="0.99844015">
The resolution algorithm, as formulated in the previous section, does not discriminate
among different types of anaphoric expressions. With regard to noun phrases, it is well
known that the choice of referring expression affects coherence in discourse (Grosz,
Joshi, and Weinstein 1995). Perhaps related to this observation is the fact that pronouns,
definite descriptions, and proper names all vary in terms of their capacity for binding
and accommodation. The performance of the algorithm would strongly benefit from
taking these differences into account, because it would further narrow down the search
space.
With respect to accommodation, some noun phrases allow accommodation on
any level, whereas others accommodate only globally. Third-person anaphoric pro-
nouns normally do not allow accommodation, with the exception of discourse-initial
occurrences. Reflexive pronouns do not have the ability to accommodate, for they are
intrinsically anaphoric. Definite descriptions, especially genitive constructions, have
the power to accommodate on all levels (see example (7)). Proper names allow ac-
commodation only on the global level. If one also considers first- and second-person
pronouns, which belong to the family of deictic expressions, it can be concluded that
this class of expressions does not allow accommodation at all, simply because deictic
expressions refer to objects presumed in the context of interpretation.
For binding, the differences among noun phrases are not so marked. Most of them
allow binding on all levels of discourse structure, with the exception of proper names.4
</bodyText>
<footnote confidence="0.639976">
4 However, Geurts (1997) claims that proper names are able to bind nonglobally; he uses examples such
as If a child is christened “Bambi,” and Disney Inc. hear about it, then they will sue Bambi’s parents.
</footnote>
<page confidence="0.98942">
200
</page>
<note confidence="0.851913">
Bos Implementing Binding and Accommodation Theory
</note>
<tableCaption confidence="0.99607">
Table 2
</tableCaption>
<table confidence="0.772627375">
Binding and accommodation behavior of different α-types for noun phrases.
Local Global
α-type Binding/Accommodation Binding/Accommodation Description
ref yes/no yes/no reflexive pronouns
pro yes/no yes/yes third-person nonreflexive
pronouns
nam no/no yes/yes proper names
dei no/no yes/no first- and second-person
</table>
<tableCaption confidence="0.263695">
nonreflexive pronouns
</tableCaption>
<bodyText confidence="0.992526153846154">
def yes/yes yes/yes definite descriptions
Antecedents of deictic expressions are assumed to be available at the global level of
discourse, for they are part of the current context of interpretation, and so reference
to objects at subordinated levels of discourse is not an option for deictic expressions.
To account for the different referential behavior of noun phrases, we classify them
in terms of α-types. The α-types for English noun phrases and their properties are
listed in Table 2. To integrate these properties into the resolution algorithm, we need
a way to determine whether we resolve a particular presupposition at a global or
nonglobal level of discourse. Given an accessibility path, it is unequivocal to define
the conditions for operating on a global level of discourse, because subordinated levels
of DRS introduce an accommodation site, which we represent as acc(A) for a DRS A, on
the accessibility path. Therefore, a binding site is global if there is no accommodation
site on the remainder of its accessibility path:
</bodyText>
<equation confidence="0.795339">
global(P) ← ¬ acc(A)∈P.
</equation>
<bodyText confidence="0.936053142857143">
With this machinery we are able to revise the definition for accommodation, by
making it sensitive to different α-types. This results in the following clauses:
accommodate(Anam,[acc(A)|P]) ← global(P), skip(P).
accommodate(Apro,[acc(A)|P]) ← global(P), skip(P).
accommodate(Adef,[acc(A)|P]) ← skip(P).
Similarly, we can revise the definition of binding by making it sensitive to different
α-types. This yields the following clauses:
</bodyText>
<equation confidence="0.9764911">
bind((D,L)nam
X ,[bin((D&apos;,L&apos;),(DUD&apos;,LUL&apos;))|P])+— global(P),XED&apos;,skip(P).
bind((D,L)dei
X ,[bin((D&apos;,L&apos;),(DUD&apos;,LUL&apos;))|P]) +— global(P),XED&apos;,skip(P).
bind((D,L)pro
X ,[bin((D&apos;,L&apos;),(DUD&apos;,LUL&apos;))|P]) +— XED&apos;, skip(P).
bind((D,L)ref
X ,[bin((D&apos;,L&apos;),(DUD&apos;,LUL&apos;))|P]) +— XED&apos;, skip(P).
bind((D,L)def
X ,[bin((D&apos;,L&apos;),(DUD&apos;,LUL&apos;))|P]) +— XED&apos;, skip(P).
</equation>
<bodyText confidence="0.9994444">
This might be a rather rocky approximation to discriminating among different noun
phrases, but it will greatly improve the performance of the algorithm. Whether a
finer classification is required, or whether further types to deal with other kinds of
presupposition triggers (such as factives) are needed, remains subject for future corpus
studies.
</bodyText>
<page confidence="0.994798">
201
</page>
<note confidence="0.722826">
Computational Linguistics Volume 29, Number 2
</note>
<subsectionHeader confidence="0.999303">
4.3 Acceptability Constraints
</subsectionHeader>
<bodyText confidence="0.999989333333333">
The resolution algorithm imposes several acceptability constraints on resolved or par-
tially resolved DRSs. For completely resolved DRSs, there are constraints on consis-
tency and informativeness. For partially resolved DRSs (i.e., α-DRSs), there are con-
straints on sortal compatibility, binding, and the occurrences of free variables. Let us
first consider consistency and informativeness.
As an illustration of the constraints on consistency, suppose we have a DRS B.
If we can prove that ¬∃w(w,B)fo is valid, then we know that B is inconsistent. If, on
the other hand, we find that ∃w(w,B)fo is satisfiable, we know that B is consistent. In
terms of our previous formulation of the resolution algorithm, this translates as
</bodyText>
<equation confidence="0.94049">
consistent(B) ← proof(¬∃w(w,B)fo), fail.
consistent(B) ← satisfiable(∃w(w,B)fo).
</equation>
<bodyText confidence="0.999145333333333">
Now let us consider informativeness, with respect to a DRS A representing the
previous discourse and a new DRS B. If we prove that ∀w((w,A)fo→(w,B)fo), we know
that B is not informative with respect to A. On the other hand, if we are able to
show that both ∃w((w,A)fo ∧ (w,B)fo) and ∃w((w,A)fo ∧ ¬(w,B)fo) are satisfiable for-
mulas, we can say that B is informative with respect to A. This can be coded as
follows:
</bodyText>
<equation confidence="0.837601666666667">
informative(A,B) ← proof(∀w((w,A)fo →(w,B)fo)), fail.
informative(A,B) ← satisfiable(∃w((w,A)fo∧(w,B)fo)),
satisfiable(∃w((w,A)fo ∧ ¬(w,B)fo)).
</equation>
<bodyText confidence="0.999891772727273">
The constraint on sortal compatibility can be seen as a local consistency check.
It takes place after binding, and it uses a sortal ontology to ensure that discourse
referents with different sorts are not identified with each other. This eliminates any
possibility for anaphoric expressions that describe entities to refer to discourse ref-
erents for temporal information or possible worlds and so cuts the search space of
antecedents enormously. In terms of the algorithm, sortal-violation(B) will hold for a
DRS B if there is an accessibility path in B with a discourse referent that has inconsistent
properties.
The binding constraint is a linguistic confinement primarily dealing with restric-
tions of antecedents of anaphoric object noun phrases. Binding constraints are similar
to the C-command constraints found in linguistic theory, but I will give a simplified
formulation here and deal with (di)transitive verbs only. Binding constraints deal with
two complementary cases. First of all, it checks whether a reflexive pronoun in object
position is bound to the subject noun phrase. Second, it checks whether a nonreflexive
anaphoric noun phrase in object position is not bound to the subject noun phrase.
Finally, there is the constraint on bound variables for α-DRSs. With the help of
the definition of free and bound variables given in Section 3.3, it is straightforward to
include this constraint in the resolution algorithm. This can be accomplished efficiently
by traversing the DRS in a top-down manner, collecting bound variables on each
accessibility path. Free variables are then detected when one of the variables occurring
in a basic condition is not a member of the set of bound variables collected on that
accessibility path.
</bodyText>
<subsectionHeader confidence="0.995141">
4.4 Preferences
</subsectionHeader>
<bodyText confidence="0.999357">
In this section I will investigate how to account for ranking interpretations. The resolu-
tion algorithm will produce a set of solutions without stating any preferences among
</bodyText>
<page confidence="0.988995">
202
</page>
<subsectionHeader confidence="0.484529">
Bos Implementing Binding and Accommodation Theory
</subsectionHeader>
<bodyText confidence="0.999654571428571">
candidates in the solution set produced. In general, it has been noted that in most
cases, binding is strongly preferred to accommodation (Van der Sandt 1992), and that
global accommodation is preferred to local accommodation (Heim 1983). This meshes
well with a claim put forward in theories of discourse coherency that the inference
demands placed on a hearer correlate positively with the perceived coherency of a
discourse (Grosz, Joshi, and Weinstein 1995), because it makes perfect sense to ascribe
a higher inference load to accommodation than binding.
Given the resolution algorithm as defined here, one way to invoke a ranking
mechanism among potential solutions is to include scores and make them sensitive to
different α-types. Scores could be represented as numbers between 0 and 1, reflecting
the rank of the solution in the solution set. Starting with a score of 1 for a particular
solution, accommodation will decrease the score (for instance, by multiplying the cur-
rent score by 0.1), whereas binding will not. Cases of nonglobal accommodation will
further lower the score.
Van der Sandt’s constraints on local informativeness and local consistency are
further criteria for preference ranking. Unlike the global versions of informative-
ness and consistency, the local constraints cannot be “hard” constraints, for if they
were, they would rule out otherwise fine solutions. Put differently, rejection of DRSs
on the basis of violating the local informativeness constraint seems inappropriate.
I will illustrate this observation with the discourse and its translation in a DRS
(example (28)).
</bodyText>
<equation confidence="0.45222">
(28) Mia likes every woman.
x
</equation>
<bodyText confidence="0.999659611111111">
The DRS in example (28) violates the local informativeness constraint. The sub-DRS
containing the information that there is a woman is already expressed by the su-
perordinated DRS, given the background knowledge that Mia is a woman. From a
grammatical point of view, however, example (28) is a legitimate sentence. Rejecting
it on the basis of violating local informativeness seems unjustified. On the other hand,
the local constraints help in dealing with the presupposition project problem. There-
fore, we take a suggestion made by Beaver (2002) and use the local constraints as a
further criterion for ranking potential solutions of the resolution algorithm. This rank-
ing could be realized by decreasing the score of a particular DRS each time it violates
local informativeness or local consistency.
Incidentally, Van der Sandt does not give a precise formulation of local informa-
tiveness and local consistency, and it is not straightforward what would constitute a
precise formulation (Beaver 1997, 2002). I will give a novel formulation of the local
constraints with the help of a function that, given a DRS, returns a set of pairs of DRSs
and the DRSs that they subordinate. Given this function, it is straightforward to define
local informativeness and local consistency. This function, supersub, is defined, using
PROLOG notation, as follows (the definition given here is restricted to the clauses for
implication, negation and basic conditions; clauses for the remaining conditions can
</bodyText>
<equation confidence="0.968864666666667">
MIA(x)
y ⇒
WOMAN(y) LIKE(x, y)
</equation>
<page confidence="0.995952">
203
</page>
<note confidence="0.702478">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.815094">
be easily derived from these):
</bodyText>
<equation confidence="0.999771090909091">
supersub((D,[Sub=:&gt;.B|L]),A-(A;(D,L)),Sub) +— true.
supersub((D,[B=:&gt;.Sub|L]),A-(A;(D,L);B),Sub) +— true.
supersub((D,[Sub=:&gt;.B|L]),A-Sup,Sub) +— supersub(B,(A;(D,L))-Sup,Sub).
supersub((D,[B=:&gt;.C|L]),A-Sup,Sub) +— supersub(C,(((D,L);B);A)-Sup,Sub).
supersub((D,[SubVB|L]),A-(A;(D,L)),Sub) +— true.
supersub((D,[BVSub|L]),A-(A;(D,L);B)),Sub) +— true.
supersub((D,[SubVB|L]),A-Sup,Sub) +— supersub(B,(A;(D,L))-Sup,Sub).
supersub((D,[BVSub|L]),A-Sup,Sub) +— supersub(B,(A;(D,L))-Sup,Sub).
supersub((D,[-Sub|L]),A-(A;(D,L)),Sub) +— true.
supersub((D,[-B|L]),A-Sup,Sub) +— supersub(B,(A;(D,L))-Sup,Sub).
supersub((D,[X|L]),A-((D,[C]);B),Sub) +— basic(X),supersub((0,L),A-B,Sub).
</equation>
<bodyText confidence="0.965983">
The supersub predicate is recursively defined to handle arbitrarily deeply embed-
ded sub-DRSs. The crucial step in supersub is removing the conditions that contain the
subordinated DRS. Applying supersub to example (28), we get the following two pairs:
</bodyText>
<equation confidence="0.6110434">
(super-DRS: x , sub-DRS: y )
MIA(x) WOMAN(y)
(super-DRS: x y , sub-DRS: LIKE(x, y) )
MIA(x)
WOMAN(y)
</equation>
<bodyText confidence="0.999552666666667">
We can now formulate the local constraints in terms of informativeness as follows:
A pair (super-DRS: A, sub-DRS B) is locally informative if (A;B) is informative with
respect to A and locally consistent if (A;(0,[,B])) is informative with respect to A.
Adding the local constraints as further criteria for ranking potential readings pro-
duced by the resolution algorithm will give accurate predictions for the interpretation
of many problematic cases discussed in Section 2.2. Testing the local constraints in-
volves first-order theorem proving, and it is useful to add some heuristics to obtain
more efficient implementations. A valuable heuristic is one that distinguishes subor-
dinated levels of discourse in the old DRS (i.e., the DRS capturing the portion of the
discourse processed so far) from subordinated levels of discourse in the DRS of the
newly processed utterance. This avoids repeated application of local constraints to the
same subordinated levels of discourse over and over again.
</bodyText>
<sectionHeader confidence="0.968063" genericHeader="method">
5. Implementation and Performance
</sectionHeader>
<bodyText confidence="0.99979">
The resolution algorithm is implemented as part of a natural language understanding
system. I will describe the general architecture underlying this system and the imple-
mentation of the algorithm and the acceptability constraints and present performance
results obtained from applying the algorithm to a corpus of route instructions.
</bodyText>
<subsectionHeader confidence="0.989246">
5.1 Architecture
</subsectionHeader>
<bodyText confidence="0.999785166666667">
Open Agent Architecture (OAA) (Cheyer and Martin 2001) is used as prototyping en-
vironment to implement the presupposition resolution component as part of a natural
language understanding system. OAA is a collection of software agents that commu-
nicate with each other via a facilitator, a piece of middleware that distributes requests
to appropriate agents and returns the responses to the requester. OAA makes it conve-
nient to combine different components that are required in natural language process-
</bodyText>
<page confidence="0.984225">
204
</page>
<note confidence="0.367603">
Bos Implementing Binding and Accommodation Theory
</note>
<bodyText confidence="0.9997525">
ing, such as speech recognition or parsing, the presupposition resolution component,
and theorem provers, because OAA agents can be implemented in different program-
ming languages and run simultaneously on different machines (Bos and Oka 2002).
The resolution component is realized as an OAA agent implemented in PROLOG.
</bodyText>
<subsectionHeader confidence="0.998911">
5.2 Acceptability Constraints
</subsectionHeader>
<bodyText confidence="0.947105155555556">
To implement inference, a theorem prover as well as a model builder is used, both
encapsulated as OAA agents. The theorem-proving agent is used to find a counterproof
for the DRS translated into first-order logic. The model-building agent is used to check
whether the same DRS is satisfiable. So, although we are faced with the limitations for
reasoning with first-order logic (validity is undecidable in first-order logic, and model
generation is restricted to finite models), these limitations are reduced to a minimum.
For each inference problem, the two inference agents attack the problem in parallel,
and as soon as one of them finds an answer (a model or a counterproof), their task is
completed.
The three acceptability constraints that do not require first-order inference (proper
binding, bound variables, and sortal compatibility) are not implemented as separate
agents but instead are part of the resolution agent. Proper binding is checked via a neo-
Davidsonian semantics to describe events in terms of their thematic relations (Parsons
1990). Binding is violated when a (di)transitive verb has a reflexive pronoun as object
and the discourse referents for the agent and patient denote different objects, or when
a (di)transitive verb has a nonreflexive object and the discourse referents for agent and
patient denote the same object. The check for free variables is rather straightforward,
given the definitions in Section 3.
Sortal violations are detected using a conceptual ontology. Based on WordNet
(Fellbaum 1998), this ontology is substantially adapted and extended to deal with
anaphora resolution in BAT. As usual, it reflects background knowledge in the form
of inheritance (is-a) and disjointness. The three (disjoint) top concepts in this ontology
are GROUP (a collection of things), SITUATION (a condition in which certain proposi-
tions hold or do not hold), and THING (an individual object that is talked about). The
last is further divided into ABSTRACTION (a thing without mass) and ENTITY (a thing
with mass). The concept ENTITY has two subconcepts: OBJECT (a nonliving entity) and
ORGANISM (a living entity). OBJECTS are divided into ARTIFACTS (human-made things),
NATURAL-OBJECTS (things that are found in nature), and SUBSTANCES (things that are
indivisible). The subconcepts of ORGANISM are HUMAN, ANIMAL, and PLANT.
In the case of English pronouns, there is a need to distinguish between third-person
singular male, female, and neuter pronouns, as well as, of course, plural pronouns.
The plural pronouns are the easiest to deal with and introduce a discourse referent
with condition GROUP; hence they cannot bind to situations or things. Three mutually
disjoint concepts are used for singular pronouns: MALE (for he), FEMALE (for she), and
UNISEX (for concepts that disallow binding of he and she). The neuter pronoun it comes
with the feature NONHUMAN, so we allow it to refer to any nonhuman entity (this is
obviously not entirely accurate, as in certain situations, it can be used to refer to
persons). To prevent reference from singular pronouns to plural entities, we further
define GROUP disjoint from MALE, FEMALE, and NONHUMAN.
The sortal violation checker is implemented in PROLOG, where the inheritance
information is stored in the PROLOG database by clauses of the following form:
sort(ENTITY(X)) ← sort(ORGANISM(X)).
sort(ENTITY(X)) ← sort(OBJECT(X)).
sort(ORGANISM(X)) ← sort(HUMAN(X)).
sort(ORGANISM(X)) ← sort(ANIMAL(X)).
</bodyText>
<page confidence="0.993376">
205
</page>
<figure confidence="0.68950525">
Computational Linguistics Volume 29, Number 2
sort(ORGANISM(X)) ← sort(PLANT(X)).
sort(MALE(X)) ← sort(MAN(X)).
sort(FEMALE(X)) ← sort(WOMAN(X)).
Disjointness relations are implemented by clauses of the following form:
inconsistent ← sort(ORGANISM(X)), sort(OBJECT(X)).
inconsistent ← sort(HUMAN(X)), sort(ANIMAL(X)).
inconsistent ← sort(MALE(X)), sort(FEMALE(X)).
</figure>
<bodyText confidence="0.909418">
For each sortal compatibility check, the discourse referents are skolemized, and
the basic conditions of the resolved DRSs are asserted to the database. The following
clause links these basic conditions to sorts:
</bodyText>
<equation confidence="0.643996">
sort(S) ← basic(S).
</equation>
<bodyText confidence="0.992249875">
The PROLOG inference engine then attempts to prove a sortal incompatibility by trying
to find an instance of a discourse referent that has two conflicting properties, within
the transitive closure of the is-a relation, here implemented via the predicate sort. Using
negation as failure, sorts are compatible if ¬inconsistent can be proven. Consider the
following example illustrating sortal incompatibility:
(29) Suppose the result of binding is a DRS in which the two basic conditions
MAN(X) and WOMAN(X) are applied to the same variables. Asserting this
to the database as basic(MAN(a)) and basic(WOMAN(a)), it is possible to
conclude sort(MAN(a)) as well as sort(WOMAN(a)). From this, we are able
to conclude sort(MALE(a)) and sort(FEMALE(a)), and we can prove that
inconsistent holds.
Summarizing, the sortal compatibility check is used as a filter for the more general
consistency check, for which fully fledged first-order theorem proving is used. If it is
impossible to prove inconsistent, it is assumed that the antecedent discourse referent
is compatible with its binder. As I will show in the next section, this filter reduces the
search space in resolution enormously.
</bodyText>
<subsectionHeader confidence="0.984995">
5.3 Performance
</subsectionHeader>
<bodyText confidence="0.9987604">
The resolution algorithm was tested on a corpus of route instructions collected in
a scenario in which somebody explains to a mobile robot how to reach a certain
destination. The corpus, collected in the IBL project (Lauria et al. 2001), comprises
283 utterances in 72 different route instructions, spoken by 24 different native English
speakers. A typical sequence is the following:
</bodyText>
<listItem confidence="0.9203845">
(30) Instructor: Go to the university!
Robot: How do I get to the university?
</listItem>
<bodyText confidence="0.999535">
Instructor: Go straight ahead until you reach the post office. Just past
the post office turn left over the bridge. Keep walking, there will be a
building on the right and a building on your left. Keep walking until
you come to a train station on the left hand side and the university is
opposite the train station.
The corpus was processed on utterance-by-utterance basis, starting with a new
DRS for each new route instruction. Only the first (consistent) solution returned by
</bodyText>
<page confidence="0.996526">
206
</page>
<note confidence="0.851809">
Bos Implementing Binding and Accommodation Theory
</note>
<tableCaption confidence="0.998203">
Table 3
</tableCaption>
<table confidence="0.946045125">
Occurrences of triggers in 283 utterances taken from spoken route instructions.
α-type n Percentage Average per utterance
ref 1 0.1 0.04
pro 42 4.7 0.15
nam 50 5.6 0.18
dei 380 42.3 1.34
def 425 47.3 1.50
Total 898 100.0 3.17
</table>
<tableCaption confidence="0.998113">
Table 4
</tableCaption>
<table confidence="0.9636075">
Average CPU times for DRS resolution relative to the number of processed utterances.
Number of utterances 1 2 3 4 5 6 7 8 9
CPU time 0.542 0.709 1.140 1.654 1.177 1.495 6.037 2.462 0.773
n 68 60 54 41 27 12 8 4 3
</table>
<bodyText confidence="0.99972764516129">
the resolution algorithm was considered for subsequent processing of the route in-
struction. A total of 898 referential expressions appeared in the 283 utterances of the
corpus. As Table 3 shows, pronouns and proper names are relatively rare in these
route instructions, but on average there are 1.5 definite noun phrases per utterance.
The average number of accommodation sites for a presupposition trigger in this
corpus was 7.5. (This relatively high number can perhaps be attributed to the way DRSs
are nested into each other in representing route instructions and the way utterance
grounding is realized in the DRS. Discussion of these issues, however, falls outside
the scope of this article.) The average number of potential antecedents (i.e., accessible
discourse referents) for binding a presupposition trigger was 16.7. These statistics
illustrate the immense search space in presupposition resolution.
The implemented resolution algorithm performs with an average CPU time (mea-
sured on a Sun Blade 100 workstation with 1 GB memory and a 500 MHz processor)
of 1.21 seconds to transform an unresolved α-DRS into a proper DRS (disregarding the
consistency checking; see below). Table 4 shows the average CPU times for DRS reso-
lution relative to the number of processed utterances and so illustrates the dependence
of processing time on the size of the DRS capturing the previous discourse.
To find out which of the acceptability constraints contribute the most in narrow-
ing down the search space, the number of attempts and success/failure rate were
computed for sortal compatibility, proper binding, and bound variables, after a pre-
suppositional DRS has been resolved or accommodated. Most of the credit for reduc-
ing the size of the search space goes to checking for sortal violations, which were
detected 8,111 times in 8,303 attempts (97%). Only 99 (1.04% of 9,466 cases) α-DRSs
were found to contain free variables. Similarly rare were cases of binding violation
(73 occurrences in 9,156 considered cases). Still, it pays off to verify these constraints
on partially resolved α-DRSs. For instance, the average CPU time for resolving a DRS
that violated the bound variable constraint during resolution was 2.5 seconds (n = 35)
when this constraint was checked partially, but 15.0 seconds when it was checked on
fully resolved representations.
Finally, let us consider the findings regarding the use of first-order inference en-
gines to implement consistency checking of DRSs. This is a very hard task: Dialogues
</bodyText>
<page confidence="0.987575">
207
</page>
<note confidence="0.699796">
Computational Linguistics Volume 29, Number 2
</note>
<bodyText confidence="0.999946">
such as that in example (30) generate up to several hundred thousand clauses. More-
over, off-the-shelf provers are not designed for linguistic problems. Instead, they are
mostly tuned to mathematical problems.
Several theorem provers and model builders were put to the test, including Hans
de Nivelle’s (1998) BLIKSEM, which is optimized for the “guarded” fragment of first-
order logic, Bill McCune’s OTTER and MACE (McCune and Padmanabhan 1996; Mc-
Cune 1998), and the theorem prover SPASS (Weidenbach et al. 1999). For this particular
task the model builder MACE and the theorem prover SPASS clearly outperformed
the other inference engines; they were able to find an answer within 30 seconds for
66% of the 283 inference problems assigned to them (the majority of the DRSs being
consistent) in CPU times varying from 2.5 to 29.9 seconds (average 13.0 secs).
These results are perhaps too limited to justify the inclusion of first-order theo-
rem proving in today’s natural language understanding components. Nevertheless, I
believe that first-order theorem provers will play an important future role in com-
putational semantics for three reasons. First of all, automated theorem proving is a
promising, emerging field. Moreover, most of the first-order inference engines, albeit
general purpose, are designed to cope with nonlinguistic problems, and cooperation
of computational linguists with researchers in the area of automated deduction might
improve the performance of these inference engines on linguistic inference problems.
Second, the current approach is nonincremental. After a new utterance is combined
with the previous DRS, the complete newly constructed DRS is translated to first-order
logic and checked for consistency, without appealing to previous inference results at
all. It is likely that inference-based natural language understanding would benefit from
an incremental approach, particularly with regard to model building. Third, there is
room for improvement in the formulation of the inference problem itself. Future work
should address the use of sorted logics, include experimenting with other modal for-
mulations, and consider the use of discourse structure to limit the size of DRSs to be
checked for consistency.
</bodyText>
<sectionHeader confidence="0.998233" genericHeader="conclusions">
6. Conclusion
</sectionHeader>
<bodyText confidence="0.9999375">
The implementation of BAT presented in this article covers a wide spectrum of ref-
erential expressions, ranging from simple pronouns to rich presupposition triggers.
Compared to Van der Sandt’s (1992) original formulation of BAT, the implementa-
tion discussed here offers improvements on both the representational and inferential
levels. Representational aspects of my reformulation of BAT include a new syntax
for unresolved DRSs, which allows for selective binding and moreover provides a
means of defining free and bound variables on these structures and hence enables us
to implement the free-variable constraint on partially resolved DRSs. The inferential
aspects involve a formulation of the acceptability constraints concerning consistency
and informativeness, in particular the local versions of these, and an implementation
of these constraints using general-purpose theorem provers for first-order logic.
The core of the algorithm is realized as a PROLOG agent within the OAA envi-
ronment. Off-the-shelf first-order theorem provers are used as agents to perform the
required reasoning tasks. Results of tests conducted on a corpus of spoken route in-
structions suggest that the core of the algorithm performs reasonably well, certainly
when one considers the enormous search space that is involved in presupposition
resolution. The importance of reducing the search space is demonstrated in an exper-
iment in which the free-variable constraint, imposed on partially resolved representa-
tions, shows a substantial increase in performance compared to when it is imposed on
completely resolved representations. Furthermore, to distinguish among the different
</bodyText>
<page confidence="0.963204">
208
</page>
<bodyText confidence="0.967198066666667">
Bos Implementing Binding and Accommodation Theory
anaphoric natures of various presuppositional expressions, a classification of α-types
for presuppositions triggered by noun phrases is proposed and used to increase effi-
ciency in the implementation of the resolution algorithm.
Although the algorithm presented in this article already includes a number of
heuristics to state preferences among a number of candidates of resolved discourse
representations, it could further benefit from suggestions made in centering theory
(Grosz, Joshi, and Weinstein 1995) to express salience among discourse referents. In
the terminology of centering, discourse referents can naturally be seen as centers, with
forward-looking centers being a subset of the accessible discourse referents and the
unique backward-looking center being a designated discourse referent resembling the
focus of discourse. These aspects of centering theory will enable us to include a notion
of coherence in BAT, but how to establish the ranking of forward-looking centers (to
reflect relative prominence) in a DRT-based formalism remains a subject of future
research.
</bodyText>
<sectionHeader confidence="0.994775" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.77983332">
The research reported in this article
originated at the Department of
Computational Linguistics at the University
of the Saarland in Germany and was further
developed at the Institute for
Communicating and Collaborative Systems
at the University of Edinburgh. I wish to
thank Patrick Blackburn and Manfred
Pinkal for supervision, discussion, and
advice. I am grateful to David Beaver, Hans
Kamp, Ewan Klein, Michael Kohlhase, Hans
de Nivelle, and Rob van der Sandt for their
valuable suggestions, which greatly
improved the presupposition resolution
algorithm presented in this work. Tetsushi
Oka helped design and implemented the
inference agents in the Open Agent
Architecture. The corpus of route
instruction was collected and transcribed by
Guido Bugmann, Stasha Lauria, Theo
Kyriacou, and Joe Frankel (as part of the
IBL project, under grants GR/M90023 and
GR/M90160). Finally, I would like to thank
two anonymous reviewers for this journal
for their valuable suggestions.
</bodyText>
<sectionHeader confidence="0.995074" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998731052631579">
Beaver, David I. 1997. Presupposition. In
Johan Van Benthem and Alice
Ter Meulen, editors, Handbook of Logic and
Language. Elsevier, Amsterdam, and MIT
Press, Cambridge, pages 939–1008.
Beaver, David I. 2002. Presupposition
Projection in DRT: A critical assessment.
In David Beaver, Luis Casillas, Brady
Clark, and Stefan Kaufmann, editors, The
Construction of Meaning. Stanford
University Press, Stanford, California,
pages 23–43.
Blackburn, Patrick. 2000. Representation,
reasoning, and relational structures: A
hybrid logic manifesto. Logic Journal of the
IGPL, 8(3):339–365.
Blackburn, Patrick, Johan Bos, Michael
Kohlhase, and Hans de Nivelle. 2001.
Inference and computational semantics.
In Harry Bunt, Reinhard Muskens, and
Elias Thijsse, editors, Computing Meaning,
volume 2. Kluwer, Dordrecht,
pages 11–28.
Bos, Johan and Tetsushi Oka. 2002. An
inference-based approach to dialogue
system design. In Proceedings of COLING
2002.
Cheyer, Adam and David Martin. 2001. The
Open Agent Architecture. Journal of
Autonomous Agents and Multi-Agent
Systems, 4(1/2):143–148.
de Nivelle, Hans. 1998. A resolution
decision procedure for the guarded
fragment. In C. Kirchner and H. Kirchner,
editors, 15th International Conference on
Automated Deduction, CADE-15.
Springer-Verlag, Berlin, pages 191–204.
Fellbaum, Christiane, editor. 1998. WordNet.
An Electronic Lexical Database. MIT Press,
Cambridge.
Geurts, Bart. 1997. Good news about the
description theory of names. Journal of
Semantics, 14:319–348.
Geurts, Bart. 1999. Presuppositions and
Pronouns. Elsevier, London.
Groenendijk, Jeroen and Martin Stokhof.
1991. Dynamic predicate logic. Linguistics
and Philosophy, 14:39–100.
Grosz, Barbara J., Aravind K. Joshi, and
Scott Weinstein. 1995. Centering: A
framework for modeling the local
coherence of discourse. Computational
Linguistics, 21(2):203–225.
Heim, Irene. 1982. The Semantics of Definite
and Indefinite Noun Phrases. Ph.D. thesis,
University of Massachusetts,
Amherst.
</reference>
<page confidence="0.96442">
209
</page>
<note confidence="0.356769">
Computational Linguistics Volume 29, Number 2
</note>
<reference confidence="0.999869345679012">
Heim, Irene. 1983. On the projection
problem for presuppositions. In
M. Barlow, D. Flickinger, and
M. Westcoat, editors, Proceedings of the
Second Annual West Coast Conference on
Formal Linguistics, pages 114–126.
Kamp, Hans. 1981. A theory of truth and
semantic representation. In Jeroen
Groenendijk, Theo M. V. Janssen, and
Martin Stokhof, editors, Formal
Methods in the Study of Language, pages
277–322.
Kamp, Hans and Uwe Reyle. 1993. From
Discourse to Logic: An Introduction to
Modeltheoretic Semantics of Natural
Language, Formal Logic and DRT. Kluwer,
Dordrecht, the Netherlands.
Karttunen, L. 1974. Presuppositions and
linguistic context. Theoretical Linguistics,
1:181–194.
Kuschert, Susanna. 1999. Dynamic Meaning
and Accommodation. Ph.D. thesis,
Universit¨at des Saarlandes, Saarbruecken,
Germany.
Lauria, Stanislao, Guido Bugmann,
Theocharis Kyriacou, Johan Bos, and
Ewan Klein. 2001. Training personal
robots using natural language
instruction. IEEE Intelligent Systems,
16(5):38–45.
Lewis, David. 1979. Scorekeeping in a
language game. In R. B¨auerle, U. Egli,
and A. von Stechow, editors, Semantics
from Different Points of View, volume 6 of
Springer Series in Language and
Communication. Springer-Verlag, Berlin,
pages 172–187.
McCune, W. 1998. Automatic proofs and
counterexamples for some ortholattice
identities. Information Processing Letters,
65(6):285–291.
McCune, W. and R. Padmanabhan. 1996.
Automated Deduction in Equational Logic and
Cubic Curves. Lecture Notes in Computer
Science (AI subseries). Springer-Verlag,
New York.
Moore, Robert C. 1980. Reasoning about
knowledge and action. Technical Report
181, SRI International, Menlo Park,
California.
Muskens, Reinhard. 1996. Combining
Montague semantics and discourse
representation. Linguistics and Philosophy,
19:143–186.
Parsons, Terence. 1990. Events in the
Semantics of English: A Study in Subatomic
Semantics. MIT Press, Cambridge.
Van der Sandt, Rob A. 1992. Presupposition
projection as anaphora resolution. Journal
of Semantics, 9:333–377.
Van der Sandt, Rob A. and Bart Geurts.
1991. Presupposition, anaphora, and
lexical content. Technical Report 185, IBM,
Wissenschaftliches Zentrum, Institut f¨ur
Wissensbasierte Systeme, August.
Van Eijck, Jan and Hans Kamp. 1997.
Representing discourse in context. In
Johan Van Benthem and Alice
Ter Meulen, editors, Handbook of Logic and
Language. Elsevier, Amsterdam, and MIT
Press, Cambridge, pages 179–240.
Weidenbach, Christoph, Bijan Afshordel,
Uwe Brahm, Christian Cohrs, Thorsten
Engel, Enno Keen, Christian Theobalt,
and Dalibor Topic. 1999. System
description: Spass version 1.0.0. In Harald
Ganzinger, editor, 16th International
Conference on Automated Deduction,
CADE-16, volume 1632 of Lecture Notes in
Artificial Intelligence. Springer, Berlin,
pages 314–318.
</reference>
<page confidence="0.998961">
210
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.674550">
<title confidence="0.958216333333333">Implementing the Binding and Accommodation Theory for Anaphora Resolution and Presupposition Projection</title>
<affiliation confidence="0.881744">University of Edinburgh</affiliation>
<abstract confidence="0.985581">Computational aspects of Van der Sandt’s binding and accommodation theory (BAT) for presupposition projection and anaphora resolution are presented and discussed in this article. BAT is reformulated to meet requirements for computational implementation, which include operations on discourse representation structures (renaming and merging), the representation ofpresuppositions (allowingfor selective binding and determiningfree and bound variables), and a formulation of the acceptability constraints imposed by BAT. An efficient presupposition resolution algorithm is presented, and several further improvements such as preferences for binding and accommodation are discussed and integrated in this algorithm. Finally, innovative use offirst-order theorem provers to carry out consistency checking of discourse representations is investigated.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>David I Beaver</author>
</authors>
<date>1997</date>
<booktitle>Presupposition. In Johan Van Benthem and Alice Ter Meulen, editors, Handbook of Logic and Language. Elsevier,</booktitle>
<pages>939--1008</pages>
<publisher>MIT Press,</publisher>
<location>Amsterdam, and</location>
<contexts>
<context position="69088" citStr="Beaver 1997" startWordPosition="10778" endWordPosition="10779">fied. On the other hand, the local constraints help in dealing with the presupposition project problem. Therefore, we take a suggestion made by Beaver (2002) and use the local constraints as a further criterion for ranking potential solutions of the resolution algorithm. This ranking could be realized by decreasing the score of a particular DRS each time it violates local informativeness or local consistency. Incidentally, Van der Sandt does not give a precise formulation of local informativeness and local consistency, and it is not straightforward what would constitute a precise formulation (Beaver 1997, 2002). I will give a novel formulation of the local constraints with the help of a function that, given a DRS, returns a set of pairs of DRSs and the DRSs that they subordinate. Given this function, it is straightforward to define local informativeness and local consistency. This function, supersub, is defined, using PROLOG notation, as follows (the definition given here is restricted to the clauses for implication, negation and basic conditions; clauses for the remaining conditions can MIA(x) y ⇒ WOMAN(y) LIKE(x, y) 203 Computational Linguistics Volume 29, Number 2 be easily derived from th</context>
</contexts>
<marker>Beaver, 1997</marker>
<rawString>Beaver, David I. 1997. Presupposition. In Johan Van Benthem and Alice Ter Meulen, editors, Handbook of Logic and Language. Elsevier, Amsterdam, and MIT Press, Cambridge, pages 939–1008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David I Beaver</author>
</authors>
<title>Presupposition Projection in DRT: A critical assessment.</title>
<date>2002</date>
<booktitle>The Construction of Meaning.</booktitle>
<pages>23--43</pages>
<editor>In David Beaver, Luis Casillas, Brady Clark, and Stefan Kaufmann, editors,</editor>
<publisher>Stanford University Press,</publisher>
<location>Stanford, California,</location>
<contexts>
<context position="11260" citStr="Beaver 2002" startWordPosition="1721" endWordPosition="1722"> far is incompatible with Vincent’s having a boss (maybe he is a freelancer), then a hearer would probably refuse to accept example (8). But with the absence of information as to whether Vincent has a boss, the hearer adjusts his or her presuppositions to make sense of the new utterance or sentence. This is referred to as presuppositional accommodation. Thus, presuppositions are, under certain circumstances, able to present new information to the discourse. However, the level of acceptance of accommodation differs considerably from context to context and according to the type of trigger used (Beaver 2002) and also depends on whether the hearer has access to context or not. Presuppositions triggered by genitive constructions (as in example (8)) and factives (as in example (9)) are known to accommodate easily. Most other presupposition triggers do not allow accommodation, because doing so would lead to incoherent discourse. Consider the following dialogue between Butch and his girlfriend after Butch has fought a match: (10) Fabian: What about the man you fought? Butch: Floyd retired too. Butch’s utterance in this dialogue presupposes that someone distinct from Floyd retired, a presupposition tha</context>
<context position="68634" citStr="Beaver (2002)" startWordPosition="10708" endWordPosition="10709"> translation in a DRS (example (28)). (28) Mia likes every woman. x The DRS in example (28) violates the local informativeness constraint. The sub-DRS containing the information that there is a woman is already expressed by the superordinated DRS, given the background knowledge that Mia is a woman. From a grammatical point of view, however, example (28) is a legitimate sentence. Rejecting it on the basis of violating local informativeness seems unjustified. On the other hand, the local constraints help in dealing with the presupposition project problem. Therefore, we take a suggestion made by Beaver (2002) and use the local constraints as a further criterion for ranking potential solutions of the resolution algorithm. This ranking could be realized by decreasing the score of a particular DRS each time it violates local informativeness or local consistency. Incidentally, Van der Sandt does not give a precise formulation of local informativeness and local consistency, and it is not straightforward what would constitute a precise formulation (Beaver 1997, 2002). I will give a novel formulation of the local constraints with the help of a function that, given a DRS, returns a set of pairs of DRSs an</context>
</contexts>
<marker>Beaver, 2002</marker>
<rawString>Beaver, David I. 2002. Presupposition Projection in DRT: A critical assessment. In David Beaver, Luis Casillas, Brady Clark, and Stefan Kaufmann, editors, The Construction of Meaning. Stanford University Press, Stanford, California, pages 23–43.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Patrick Blackburn</author>
</authors>
<title>Representation, reasoning, and relational structures: A hybrid logic manifesto.</title>
<date>2000</date>
<journal>Logic Journal of the IGPL,</journal>
<volume>8</volume>
<issue>3</issue>
<contexts>
<context position="31924" citStr="Blackburn 2000" startWordPosition="4938" endWordPosition="4939">, then x : B is a DRS-condition. Given a DRS B = (D, C), D is called the domain of B, members of C are the conditions of B, and members of D are called B’s discourse referents. Clause 1 of the definition defines DRSs in the standard way. The basic conditions (clauses 2–3) are defined just as in standard DRT. Clause 5 introduces negation and the modal operators, and clause 6 disjunction and implication. Clause 7 is nonstandard; it introduces a modal operator that explicitly associates variables ranging over possible worlds with DRSs. It is therefore related to constructs used in hybrid logics (Blackburn 2000). We will use it in our fragment of English to represent sentential complements. DRSs are interpreted in an indirect manner, with the help of a translation function that maps DRSs to first-order formulas (under the same vocabulary of predicate symbols and with respect to the same set of variables). This translation is implemented as the function (.,.) fo, from first-order variables (ranging over possible worlds) and DRSs to ordinary first-order formula syntax. The complete translation is shown in the following definition. Definition The translation (.,.)fo from DRSs to first-order logic is def</context>
</contexts>
<marker>Blackburn, 2000</marker>
<rawString>Blackburn, Patrick. 2000. Representation, reasoning, and relational structures: A hybrid logic manifesto. Logic Journal of the IGPL, 8(3):339–365.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Patrick Blackburn</author>
<author>Johan Bos</author>
<author>Michael Kohlhase</author>
<author>Hans de Nivelle</author>
</authors>
<title>Inference and computational semantics.</title>
<date>2001</date>
<booktitle>Computing Meaning,</booktitle>
<volume>2</volume>
<pages>11--28</pages>
<editor>In Harry Bunt, Reinhard Muskens, and Elias Thijsse, editors,</editor>
<publisher>Kluwer,</publisher>
<location>Dordrecht,</location>
<marker>Blackburn, Bos, Kohlhase, de Nivelle, 2001</marker>
<rawString>Blackburn, Patrick, Johan Bos, Michael Kohlhase, and Hans de Nivelle. 2001. Inference and computational semantics. In Harry Bunt, Reinhard Muskens, and Elias Thijsse, editors, Computing Meaning, volume 2. Kluwer, Dordrecht, pages 11–28.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan Bos</author>
<author>Tetsushi Oka</author>
</authors>
<title>An inference-based approach to dialogue system design.</title>
<date>2002</date>
<booktitle>In Proceedings of COLING</booktitle>
<contexts>
<context position="72901" citStr="Bos and Oka 2002" startWordPosition="11288" endWordPosition="11291">anding system. OAA is a collection of software agents that communicate with each other via a facilitator, a piece of middleware that distributes requests to appropriate agents and returns the responses to the requester. OAA makes it convenient to combine different components that are required in natural language process204 Bos Implementing Binding and Accommodation Theory ing, such as speech recognition or parsing, the presupposition resolution component, and theorem provers, because OAA agents can be implemented in different programming languages and run simultaneously on different machines (Bos and Oka 2002). The resolution component is realized as an OAA agent implemented in PROLOG. 5.2 Acceptability Constraints To implement inference, a theorem prover as well as a model builder is used, both encapsulated as OAA agents. The theorem-proving agent is used to find a counterproof for the DRS translated into first-order logic. The model-building agent is used to check whether the same DRS is satisfiable. So, although we are faced with the limitations for reasoning with first-order logic (validity is undecidable in first-order logic, and model generation is restricted to finite models), these limitati</context>
</contexts>
<marker>Bos, Oka, 2002</marker>
<rawString>Bos, Johan and Tetsushi Oka. 2002. An inference-based approach to dialogue system design. In Proceedings of COLING 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Adam Cheyer</author>
<author>David Martin</author>
</authors>
<title>The Open Agent Architecture.</title>
<date>2001</date>
<journal>Journal of Autonomous Agents and Multi-Agent Systems,</journal>
<pages>4--1</pages>
<contexts>
<context position="72158" citStr="Cheyer and Martin 2001" startWordPosition="11177" endWordPosition="11180">evels of discourse in the DRS of the newly processed utterance. This avoids repeated application of local constraints to the same subordinated levels of discourse over and over again. 5. Implementation and Performance The resolution algorithm is implemented as part of a natural language understanding system. I will describe the general architecture underlying this system and the implementation of the algorithm and the acceptability constraints and present performance results obtained from applying the algorithm to a corpus of route instructions. 5.1 Architecture Open Agent Architecture (OAA) (Cheyer and Martin 2001) is used as prototyping environment to implement the presupposition resolution component as part of a natural language understanding system. OAA is a collection of software agents that communicate with each other via a facilitator, a piece of middleware that distributes requests to appropriate agents and returns the responses to the requester. OAA makes it convenient to combine different components that are required in natural language process204 Bos Implementing Binding and Accommodation Theory ing, such as speech recognition or parsing, the presupposition resolution component, and theorem pr</context>
</contexts>
<marker>Cheyer, Martin, 2001</marker>
<rawString>Cheyer, Adam and David Martin. 2001. The Open Agent Architecture. Journal of Autonomous Agents and Multi-Agent Systems, 4(1/2):143–148.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hans de Nivelle</author>
</authors>
<title>A resolution decision procedure for the guarded fragment.</title>
<date>1998</date>
<booktitle>15th International Conference on Automated Deduction, CADE-15.</booktitle>
<pages>191--204</pages>
<editor>In C. Kirchner and H. Kirchner, editors,</editor>
<publisher>Springer-Verlag,</publisher>
<location>Berlin,</location>
<marker>de Nivelle, 1998</marker>
<rawString>de Nivelle, Hans. 1998. A resolution decision procedure for the guarded fragment. In C. Kirchner and H. Kirchner, editors, 15th International Conference on Automated Deduction, CADE-15. Springer-Verlag, Berlin, pages 191–204.</rawString>
</citation>
<citation valid="true">
<title>WordNet. An Electronic Lexical Database.</title>
<date>1998</date>
<editor>Fellbaum, Christiane, editor.</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge.</location>
<contexts>
<context position="82607" citStr="(1998)" startWordPosition="12802" endWordPosition="12802">tially, but 15.0 seconds when it was checked on fully resolved representations. Finally, let us consider the findings regarding the use of first-order inference engines to implement consistency checking of DRSs. This is a very hard task: Dialogues 207 Computational Linguistics Volume 29, Number 2 such as that in example (30) generate up to several hundred thousand clauses. Moreover, off-the-shelf provers are not designed for linguistic problems. Instead, they are mostly tuned to mathematical problems. Several theorem provers and model builders were put to the test, including Hans de Nivelle’s (1998) BLIKSEM, which is optimized for the “guarded” fragment of firstorder logic, Bill McCune’s OTTER and MACE (McCune and Padmanabhan 1996; McCune 1998), and the theorem prover SPASS (Weidenbach et al. 1999). For this particular task the model builder MACE and the theorem prover SPASS clearly outperformed the other inference engines; they were able to find an answer within 30 seconds for 66% of the 283 inference problems assigned to them (the majority of the DRSs being consistent) in CPU times varying from 2.5 to 29.9 seconds (average 13.0 secs). These results are perhaps too limited to justify th</context>
</contexts>
<marker>1998</marker>
<rawString>Fellbaum, Christiane, editor. 1998. WordNet. An Electronic Lexical Database. MIT Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bart Geurts</author>
</authors>
<title>Good news about the description theory of names.</title>
<date>1997</date>
<journal>Journal of Semantics,</journal>
<pages>14--319</pages>
<contexts>
<context position="60252" citStr="Geurts (1997)" startWordPosition="9456" endWordPosition="9457">tions, have the power to accommodate on all levels (see example (7)). Proper names allow accommodation only on the global level. If one also considers first- and second-person pronouns, which belong to the family of deictic expressions, it can be concluded that this class of expressions does not allow accommodation at all, simply because deictic expressions refer to objects presumed in the context of interpretation. For binding, the differences among noun phrases are not so marked. Most of them allow binding on all levels of discourse structure, with the exception of proper names.4 4 However, Geurts (1997) claims that proper names are able to bind nonglobally; he uses examples such as If a child is christened “Bambi,” and Disney Inc. hear about it, then they will sue Bambi’s parents. 200 Bos Implementing Binding and Accommodation Theory Table 2 Binding and accommodation behavior of different α-types for noun phrases. Local Global α-type Binding/Accommodation Binding/Accommodation Description ref yes/no yes/no reflexive pronouns pro yes/no yes/yes third-person nonreflexive pronouns nam no/no yes/yes proper names dei no/no yes/no first- and second-person nonreflexive pronouns def yes/yes yes/yes </context>
</contexts>
<marker>Geurts, 1997</marker>
<rawString>Geurts, Bart. 1997. Good news about the description theory of names. Journal of Semantics, 14:319–348.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bart Geurts</author>
</authors>
<title>Presuppositions and Pronouns.</title>
<date>1999</date>
<publisher>Elsevier,</publisher>
<location>London.</location>
<contexts>
<context position="1306" citStr="Geurts 1999" startWordPosition="176" endWordPosition="177">on algorithm is presented, and several further improvements such as preferences for binding and accommodation are discussed and integrated in this algorithm. Finally, innovative use offirst-order theorem provers to carry out consistency checking of discourse representations is investigated. 1. Introduction The last decade has seen an increase of formal interest in combining what were previously thought as of being two distinct phenomena: anaphora and presupposition. In particular what I will refer to as binding and accommodation theory (BAT) (Van der Sandt and Geurts 1991; Van der Sandt 1992; Geurts 1999), in which presuppositional expressions are essentially analyzed as rich anaphora, played an important role here. Not only does this theory help us gain new insights into the nature of presuppositions, it also accounts for an impressive range of problems related to linguistic behavior of presuppositions. In this paper I will put BAT in a computational perspective. The time is ripe to enter into this endeavor for two major reasons. First, because BAT is stipulated in the now well established and extensively formulated discourse representation theory (DRT) (Kamp and Reyle 1993), we have at our d</context>
</contexts>
<marker>Geurts, 1999</marker>
<rawString>Geurts, Bart. 1999. Presuppositions and Pronouns. Elsevier, London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeroen Groenendijk</author>
<author>Martin Stokhof</author>
</authors>
<date>1991</date>
<booktitle>Dynamic predicate logic. Linguistics and Philosophy,</booktitle>
<pages>14--39</pages>
<contexts>
<context position="13616" citStr="Groenendijk and Stokhof 1991" startWordPosition="2085" endWordPosition="2089">y for presuppositions would benefit from a formulation in a dynamic theory of meaning. Indeed, BAT is set in DRT (Kamp 1981; Kamp and Reyle 1993; Van Eijck and Kamp 1997), and because it heavily depends on it, I will briefly summarize the most prominent features of DRT here. DRT is one of several formal semantic frameworks designed to deal with the problems related to discourse anaphora, but it is certainly unrivaled with respect to its impressive coverage of linguistic phenomena. Alternative formalisms for discourse semantics are file change semantics (Heim 1982) and dynamic predicate logic (Groenendijk and Stokhof 1991). The latter uses the syntax of ordinary first-order predicate logic, but with a different “context change potential” semantics, allowing existential quantifiers to bind variables outside their syntactic scope. The linguistic phenomena that led to the development of dynamic theories such as DRT were mainly centered on the problems introduced by anaphora and indefinite noun phrases. Because anaphora are able to operate on an intersentential level, the traditional method of assigning closed formulas to sentences caused problems for discourse processing, and one had to resort to a number of ad ho</context>
<context position="40415" citStr="Groenendijk and Stokhof 1991" startWordPosition="6318" endWordPosition="6321">RSs, then so is (B1;B2). 4. If B1 and B2 are α-DRSs, and x is a discourse referent declared in the domain of B1, then (B1 αx B2) is an α-DRS. Note that in clause 1 of the definition, ordered sets are used rather then plain sets for discourse referents and DRS-conditions; this will make definition of the resolution algorithm easier. DRS merging (clause 4) is used in many alternative formulations of DRT (Muskens 1996; Van Eijck and Kamp 1997; Kuschert 1999). The merge employed here, “;”, is adopted from Muskens and behaves semantically the same as dynamic conjunction in dynamic predicate logic (Groenendijk and Stokhof 1991). The syntax of α-DRS-conditions is defined as follows: Definition The syntax of α-DRS-conditions is defined according to the following four clauses: 1. Every basic DRS-condition is an α-DRS-condition. 2. If B is an α-DRS, then ¬B, ✷B, and ✸B are α-DRS-conditions. 3. If B1 and B2 are α-DRSs, then B1 V B2 and B1 ⇒ B2 are α-DRS-conditions. 4. If x is a variable and B is an α-DRS, then x : B is an α-DRS-condition. 193 Computational Linguistics Volume 29, Number 2 So the syntax for α-DRSs subsumes the syntax of DRSs. I will refer to α-DRSs that contain no DRSs of the form (B αi B&apos;) as presuppositi</context>
</contexts>
<marker>Groenendijk, Stokhof, 1991</marker>
<rawString>Groenendijk, Jeroen and Martin Stokhof. 1991. Dynamic predicate logic. Linguistics and Philosophy, 14:39–100.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Barbara J Grosz</author>
<author>Aravind K Joshi</author>
<author>Scott Weinstein</author>
</authors>
<title>Centering: A framework for modeling the local coherence of discourse.</title>
<date>1995</date>
<journal>Computational Linguistics,</journal>
<volume>21</volume>
<issue>2</issue>
<marker>Grosz, Joshi, Weinstein, 1995</marker>
<rawString>Grosz, Barbara J., Aravind K. Joshi, and Scott Weinstein. 1995. Centering: A framework for modeling the local coherence of discourse. Computational Linguistics, 21(2):203–225.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Irene Heim</author>
</authors>
<title>The Semantics of Definite and Indefinite Noun Phrases.</title>
<date>1982</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Massachusetts,</institution>
<location>Amherst.</location>
<contexts>
<context position="13557" citStr="Heim 1982" startWordPosition="2079" endWordPosition="2080">surprise that an adequate semantic theory for presuppositions would benefit from a formulation in a dynamic theory of meaning. Indeed, BAT is set in DRT (Kamp 1981; Kamp and Reyle 1993; Van Eijck and Kamp 1997), and because it heavily depends on it, I will briefly summarize the most prominent features of DRT here. DRT is one of several formal semantic frameworks designed to deal with the problems related to discourse anaphora, but it is certainly unrivaled with respect to its impressive coverage of linguistic phenomena. Alternative formalisms for discourse semantics are file change semantics (Heim 1982) and dynamic predicate logic (Groenendijk and Stokhof 1991). The latter uses the syntax of ordinary first-order predicate logic, but with a different “context change potential” semantics, allowing existential quantifiers to bind variables outside their syntactic scope. The linguistic phenomena that led to the development of dynamic theories such as DRT were mainly centered on the problems introduced by anaphora and indefinite noun phrases. Because anaphora are able to operate on an intersentential level, the traditional method of assigning closed formulas to sentences caused problems for disco</context>
</contexts>
<marker>Heim, 1982</marker>
<rawString>Heim, Irene. 1982. The Semantics of Definite and Indefinite Noun Phrases. Ph.D. thesis, University of Massachusetts, Amherst.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Irene Heim</author>
</authors>
<title>On the projection problem for presuppositions.</title>
<date>1983</date>
<booktitle>Proceedings of the Second Annual West Coast Conference on Formal Linguistics,</booktitle>
<pages>114--126</pages>
<editor>In M. Barlow, D. Flickinger, and M. Westcoat, editors,</editor>
<contexts>
<context position="66689" citStr="Heim 1983" startWordPosition="10405" endWordPosition="10406">the variables occurring in a basic condition is not a member of the set of bound variables collected on that accessibility path. 4.4 Preferences In this section I will investigate how to account for ranking interpretations. The resolution algorithm will produce a set of solutions without stating any preferences among 202 Bos Implementing Binding and Accommodation Theory candidates in the solution set produced. In general, it has been noted that in most cases, binding is strongly preferred to accommodation (Van der Sandt 1992), and that global accommodation is preferred to local accommodation (Heim 1983). This meshes well with a claim put forward in theories of discourse coherency that the inference demands placed on a hearer correlate positively with the perceived coherency of a discourse (Grosz, Joshi, and Weinstein 1995), because it makes perfect sense to ascribe a higher inference load to accommodation than binding. Given the resolution algorithm as defined here, one way to invoke a ranking mechanism among potential solutions is to include scores and make them sensitive to different α-types. Scores could be represented as numbers between 0 and 1, reflecting the rank of the solution in the</context>
</contexts>
<marker>Heim, 1983</marker>
<rawString>Heim, Irene. 1983. On the projection problem for presuppositions. In M. Barlow, D. Flickinger, and M. Westcoat, editors, Proceedings of the Second Annual West Coast Conference on Formal Linguistics, pages 114–126.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hans Kamp</author>
</authors>
<title>A theory of truth and semantic representation.</title>
<date>1981</date>
<booktitle>Formal Methods in the Study of Language,</booktitle>
<pages>277--322</pages>
<editor>In Jeroen Groenendijk, Theo M. V. Janssen, and Martin Stokhof, editors,</editor>
<contexts>
<context position="13110" citStr="Kamp 1981" startWordPosition="2009" endWordPosition="2010">addressed in this conversation was the retirement of somebody different from Floyd. This is when the other 182 Bos Implementing Binding and Accommodation Theory role of presuppositional accommodation comes into play, constituting a situation in which hearers don’t have access to the context and use accommodation as a repair strategy. 2.3 Discourse Representation Theory Presupposition is a genuine discourse phenomenon. It should not come as a surprise that an adequate semantic theory for presuppositions would benefit from a formulation in a dynamic theory of meaning. Indeed, BAT is set in DRT (Kamp 1981; Kamp and Reyle 1993; Van Eijck and Kamp 1997), and because it heavily depends on it, I will briefly summarize the most prominent features of DRT here. DRT is one of several formal semantic frameworks designed to deal with the problems related to discourse anaphora, but it is certainly unrivaled with respect to its impressive coverage of linguistic phenomena. Alternative formalisms for discourse semantics are file change semantics (Heim 1982) and dynamic predicate logic (Groenendijk and Stokhof 1991). The latter uses the syntax of ordinary first-order predicate logic, but with a different “co</context>
</contexts>
<marker>Kamp, 1981</marker>
<rawString>Kamp, Hans. 1981. A theory of truth and semantic representation. In Jeroen Groenendijk, Theo M. V. Janssen, and Martin Stokhof, editors, Formal Methods in the Study of Language, pages 277–322.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hans Kamp</author>
<author>Uwe Reyle</author>
</authors>
<title>From Discourse to Logic: An Introduction to Modeltheoretic Semantics of Natural Language, Formal Logic and DRT.</title>
<date>1993</date>
<publisher>Kluwer,</publisher>
<location>Dordrecht, the Netherlands.</location>
<contexts>
<context position="1888" citStr="Kamp and Reyle 1993" startWordPosition="266" endWordPosition="269">1991; Van der Sandt 1992; Geurts 1999), in which presuppositional expressions are essentially analyzed as rich anaphora, played an important role here. Not only does this theory help us gain new insights into the nature of presuppositions, it also accounts for an impressive range of problems related to linguistic behavior of presuppositions. In this paper I will put BAT in a computational perspective. The time is ripe to enter into this endeavor for two major reasons. First, because BAT is stipulated in the now well established and extensively formulated discourse representation theory (DRT) (Kamp and Reyle 1993), we have at our disposal a formalism covering a wide range of linguistic phenomena, including anaphora, plurals, tense, aspect, and scope ambiguities. Second, recent results in automated deduction, especially the performance of first-order theorem provers, open the doors for implementing a genuine inference component within a wider context of discourse processing (Blackburn et al. 2001). This is important, because in BAT, reasoning is required for correctly dealing with presuppositional phenomena. I start by giving an overview of linguistic aspects of the problems introduced by presupposition</context>
<context position="13131" citStr="Kamp and Reyle 1993" startWordPosition="2011" endWordPosition="2014">n this conversation was the retirement of somebody different from Floyd. This is when the other 182 Bos Implementing Binding and Accommodation Theory role of presuppositional accommodation comes into play, constituting a situation in which hearers don’t have access to the context and use accommodation as a repair strategy. 2.3 Discourse Representation Theory Presupposition is a genuine discourse phenomenon. It should not come as a surprise that an adequate semantic theory for presuppositions would benefit from a formulation in a dynamic theory of meaning. Indeed, BAT is set in DRT (Kamp 1981; Kamp and Reyle 1993; Van Eijck and Kamp 1997), and because it heavily depends on it, I will briefly summarize the most prominent features of DRT here. DRT is one of several formal semantic frameworks designed to deal with the problems related to discourse anaphora, but it is certainly unrivaled with respect to its impressive coverage of linguistic phenomena. Alternative formalisms for discourse semantics are file change semantics (Heim 1982) and dynamic predicate logic (Groenendijk and Stokhof 1991). The latter uses the syntax of ordinary first-order predicate logic, but with a different “context change potentia</context>
<context position="18829" citStr="Kamp and Reyle 1993" startWordPosition="2891" endWordPosition="2894">phoric links to pronouns in subsequent sentences. The DRS in example (14) shows how DRT deals with these observations: Because the discourse referent y introduced for a five dollar shake is part of an embedded DRS (introduced by negation), it is not accessible for u, the referent introduced for the pronoun it: 1 I am disregarding wide-scope or specific readings here. 184 Bos Implementing Binding and Accommodation Theory (14) Mia didn’t order a five dollar shake. Vincent tasted it*. xzu In other words, negation blocks anaphoric links. Similar anaphoric behavior is shown by disjunctive clauses (Kamp and Reyle 1993, page 185) and implicational sentences. The latter introduce DRS-conditions of the form B ⇒ B&apos;, where discourse referents declared in B are accessible from B&apos;. Example (15) illustrates this: (15) If Butch has a valuable watch, he will take care of it. He keeps it* in his apartment. xuv The accessibility relation in DRT governs possible links between anaphoric expressions and their potential antecedents. It is defined on the structure of DRSs, which is normally stated in terms of subordination, a transitive relation. A DRS B subordinates a DRS B&apos; if B&apos; appears as a condition of B as argument o</context>
<context position="33134" citStr="Kamp and Reyle (1993)" startWordPosition="5154" endWordPosition="5157">ogic is defined according to the following nine clauses: 190 (w, x1 ... xn ) fo def =∃x1 ··· ∃xn((w,γ1)fo ∧ ··· ∧ (w,γm)fo) (w, de (w, =f R(w,x1,...,xn) (w, =f x1 = x2 (w, = (w, B1) fo ∨ (w, B2) fo (w, ⇒ B)fo def = ∀x1 ··· ∀xn(((w,γ1)fo ∧ ··· ∧ (w,γm)fo) → (w,B)fo) (w,v ∧ (v,B)fo) → (v,B)fo) ∧ (v,B)fo) de def = ¬(w,B)fo γ1 ... γm (w,R(x1, (w,¬B)fo ...,xn)) x1 = x2) fo B1 ∨ B2)fo def x1 ... xn γ1 ... γm OB) fo def = ∃v(R(w,v) ❑B)fo def = ∀v(R(w,v) : B) fo def = (R(w,v) Bos Implementing Binding and Accommodation Theory This translation from DRSs to first-order logic is based on the one given in Kamp and Reyle (1993) extended with Moore’s proposal for modal operators (Moore 1980). It behaves linearly on the size of the input, so the computational overhead is kept low. I will use it to implement the acceptability constraints imposed by BAT on presupposition resolution that require inference, to wit, the check for consistency and informativeness. 3.2 Representing Presuppositions What is a proper representation for elementary presuppositions? There seems to be common agreement, in most of the accounts in presupposition theory, that presuppositions represent expressions of propositional type. Hence, to use a </context>
</contexts>
<marker>Kamp, Reyle, 1993</marker>
<rawString>Kamp, Hans and Uwe Reyle. 1993. From Discourse to Logic: An Introduction to Modeltheoretic Semantics of Natural Language, Formal Logic and DRT. Kluwer, Dordrecht, the Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Karttunen</author>
</authors>
<title>Presuppositions and linguistic context. Theoretical Linguistics,</title>
<date>1974</date>
<pages>1--181</pages>
<contexts>
<context position="9805" citStr="Karttunen (1974)" startWordPosition="1487" endWordPosition="1489">pposition: (7) If Mia is married, then her husband is out of town. 181 Computational Linguistics Volume 29, Number 2 This sentence does not presuppose that Mia has a husband. It is the bringing about of Mia’s marital status in the antecedent of the conditional that neutralizes the presupposition of Mia’s being married. Hence, in complex sentences there is no systematic way for dealing with presupposition triggers, as sometimes subparts of complex sentences carry presuppositions that are canceled in the main sentence. Finally, let us consider presuppositional accommodation, as characterised by Karttunen (1974) and later formalized by Lewis (1979). I believe that accommodation plays a role in two related but different linguistic situations. The first of these is one in which presuppositions assert new information to the common ground without violating discourse coherency. The second situation is one best described as a hearer’s discourse “repair strategy.” Examples (8) and (9) illustrate the first type: (8) Vincent informed his boss. (9) Butch didn’t realize there was a difference between a tummy and a potbelly. The presuppositions conveyed by these utterances are that Vincent has a boss and that th</context>
</contexts>
<marker>Karttunen, 1974</marker>
<rawString>Karttunen, L. 1974. Presuppositions and linguistic context. Theoretical Linguistics, 1:181–194.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Susanna Kuschert</author>
</authors>
<title>Dynamic Meaning and Accommodation.</title>
<date>1999</date>
<booktitle>Ph.D. thesis, Universit¨at des Saarlandes,</booktitle>
<location>Saarbruecken, Germany.</location>
<contexts>
<context position="40245" citStr="Kuschert 1999" startWordPosition="6295" endWordPosition="6296">red set of α-DRS-conditions, then the ordered pair ({x1 ... xn}, {-y1 ... -ym}) is a basic α-DRS. 2. Every basic α-DRS is an α-DRS. 3. If B1 and B2 are α-DRSs, then so is (B1;B2). 4. If B1 and B2 are α-DRSs, and x is a discourse referent declared in the domain of B1, then (B1 αx B2) is an α-DRS. Note that in clause 1 of the definition, ordered sets are used rather then plain sets for discourse referents and DRS-conditions; this will make definition of the resolution algorithm easier. DRS merging (clause 4) is used in many alternative formulations of DRT (Muskens 1996; Van Eijck and Kamp 1997; Kuschert 1999). The merge employed here, “;”, is adopted from Muskens and behaves semantically the same as dynamic conjunction in dynamic predicate logic (Groenendijk and Stokhof 1991). The syntax of α-DRS-conditions is defined as follows: Definition The syntax of α-DRS-conditions is defined according to the following four clauses: 1. Every basic DRS-condition is an α-DRS-condition. 2. If B is an α-DRS, then ¬B, ✷B, and ✸B are α-DRS-conditions. 3. If B1 and B2 are α-DRSs, then B1 V B2 and B1 ⇒ B2 are α-DRS-conditions. 4. If x is a variable and B is an α-DRS, then x : B is an α-DRS-condition. 193 Computation</context>
</contexts>
<marker>Kuschert, 1999</marker>
<rawString>Kuschert, Susanna. 1999. Dynamic Meaning and Accommodation. Ph.D. thesis, Universit¨at des Saarlandes, Saarbruecken, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stanislao Lauria</author>
<author>Guido Bugmann</author>
<author>Theocharis Kyriacou</author>
<author>Johan Bos</author>
<author>Ewan Klein</author>
</authors>
<title>Training personal robots using natural language instruction.</title>
<date>2001</date>
<journal>IEEE Intelligent Systems,</journal>
<volume>16</volume>
<issue>5</issue>
<contexts>
<context position="78514" citStr="Lauria et al. 2001" startWordPosition="12132" endWordPosition="12135">compatibility check is used as a filter for the more general consistency check, for which fully fledged first-order theorem proving is used. If it is impossible to prove inconsistent, it is assumed that the antecedent discourse referent is compatible with its binder. As I will show in the next section, this filter reduces the search space in resolution enormously. 5.3 Performance The resolution algorithm was tested on a corpus of route instructions collected in a scenario in which somebody explains to a mobile robot how to reach a certain destination. The corpus, collected in the IBL project (Lauria et al. 2001), comprises 283 utterances in 72 different route instructions, spoken by 24 different native English speakers. A typical sequence is the following: (30) Instructor: Go to the university! Robot: How do I get to the university? Instructor: Go straight ahead until you reach the post office. Just past the post office turn left over the bridge. Keep walking, there will be a building on the right and a building on your left. Keep walking until you come to a train station on the left hand side and the university is opposite the train station. The corpus was processed on utterance-by-utterance basis, </context>
</contexts>
<marker>Lauria, Bugmann, Kyriacou, Bos, Klein, 2001</marker>
<rawString>Lauria, Stanislao, Guido Bugmann, Theocharis Kyriacou, Johan Bos, and Ewan Klein. 2001. Training personal robots using natural language instruction. IEEE Intelligent Systems, 16(5):38–45.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Lewis</author>
</authors>
<title>Scorekeeping in a language game. In</title>
<date>1979</date>
<booktitle>Semantics from Different Points of View,</booktitle>
<volume>6</volume>
<pages>172--187</pages>
<editor>R. B¨auerle, U. Egli, and A. von Stechow, editors,</editor>
<publisher>Springer-Verlag,</publisher>
<location>Berlin,</location>
<contexts>
<context position="9842" citStr="Lewis (1979)" startWordPosition="1494" endWordPosition="1495">r husband is out of town. 181 Computational Linguistics Volume 29, Number 2 This sentence does not presuppose that Mia has a husband. It is the bringing about of Mia’s marital status in the antecedent of the conditional that neutralizes the presupposition of Mia’s being married. Hence, in complex sentences there is no systematic way for dealing with presupposition triggers, as sometimes subparts of complex sentences carry presuppositions that are canceled in the main sentence. Finally, let us consider presuppositional accommodation, as characterised by Karttunen (1974) and later formalized by Lewis (1979). I believe that accommodation plays a role in two related but different linguistic situations. The first of these is one in which presuppositions assert new information to the common ground without violating discourse coherency. The second situation is one best described as a hearer’s discourse “repair strategy.” Examples (8) and (9) illustrate the first type: (8) Vincent informed his boss. (9) Butch didn’t realize there was a difference between a tummy and a potbelly. The presuppositions conveyed by these utterances are that Vincent has a boss and that there is a difference between a tummy a</context>
</contexts>
<marker>Lewis, 1979</marker>
<rawString>Lewis, David. 1979. Scorekeeping in a language game. In R. B¨auerle, U. Egli, and A. von Stechow, editors, Semantics from Different Points of View, volume 6 of Springer Series in Language and Communication. Springer-Verlag, Berlin, pages 172–187.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W McCune</author>
</authors>
<title>Automatic proofs and counterexamples for some ortholattice identities.</title>
<date>1998</date>
<journal>Information Processing Letters,</journal>
<volume>65</volume>
<issue>6</issue>
<contexts>
<context position="82755" citStr="McCune 1998" startWordPosition="12824" endWordPosition="12826">st-order inference engines to implement consistency checking of DRSs. This is a very hard task: Dialogues 207 Computational Linguistics Volume 29, Number 2 such as that in example (30) generate up to several hundred thousand clauses. Moreover, off-the-shelf provers are not designed for linguistic problems. Instead, they are mostly tuned to mathematical problems. Several theorem provers and model builders were put to the test, including Hans de Nivelle’s (1998) BLIKSEM, which is optimized for the “guarded” fragment of firstorder logic, Bill McCune’s OTTER and MACE (McCune and Padmanabhan 1996; McCune 1998), and the theorem prover SPASS (Weidenbach et al. 1999). For this particular task the model builder MACE and the theorem prover SPASS clearly outperformed the other inference engines; they were able to find an answer within 30 seconds for 66% of the 283 inference problems assigned to them (the majority of the DRSs being consistent) in CPU times varying from 2.5 to 29.9 seconds (average 13.0 secs). These results are perhaps too limited to justify the inclusion of first-order theorem proving in today’s natural language understanding components. Nevertheless, I believe that first-order theorem pr</context>
</contexts>
<marker>McCune, 1998</marker>
<rawString>McCune, W. 1998. Automatic proofs and counterexamples for some ortholattice identities. Information Processing Letters, 65(6):285–291.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W McCune</author>
<author>R Padmanabhan</author>
</authors>
<title>Automated Deduction in Equational Logic and Cubic Curves.</title>
<date>1996</date>
<booktitle>Lecture Notes in Computer Science (AI subseries).</booktitle>
<publisher>Springer-Verlag,</publisher>
<location>New York.</location>
<contexts>
<context position="82741" citStr="McCune and Padmanabhan 1996" startWordPosition="12820" endWordPosition="12823">ings regarding the use of first-order inference engines to implement consistency checking of DRSs. This is a very hard task: Dialogues 207 Computational Linguistics Volume 29, Number 2 such as that in example (30) generate up to several hundred thousand clauses. Moreover, off-the-shelf provers are not designed for linguistic problems. Instead, they are mostly tuned to mathematical problems. Several theorem provers and model builders were put to the test, including Hans de Nivelle’s (1998) BLIKSEM, which is optimized for the “guarded” fragment of firstorder logic, Bill McCune’s OTTER and MACE (McCune and Padmanabhan 1996; McCune 1998), and the theorem prover SPASS (Weidenbach et al. 1999). For this particular task the model builder MACE and the theorem prover SPASS clearly outperformed the other inference engines; they were able to find an answer within 30 seconds for 66% of the 283 inference problems assigned to them (the majority of the DRSs being consistent) in CPU times varying from 2.5 to 29.9 seconds (average 13.0 secs). These results are perhaps too limited to justify the inclusion of first-order theorem proving in today’s natural language understanding components. Nevertheless, I believe that first-or</context>
</contexts>
<marker>McCune, Padmanabhan, 1996</marker>
<rawString>McCune, W. and R. Padmanabhan. 1996. Automated Deduction in Equational Logic and Cubic Curves. Lecture Notes in Computer Science (AI subseries). Springer-Verlag, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert C Moore</author>
</authors>
<title>Reasoning about knowledge and action.</title>
<date>1980</date>
<tech>Technical Report 181, SRI International,</tech>
<location>Menlo Park, California.</location>
<contexts>
<context position="33198" citStr="Moore 1980" startWordPosition="5165" endWordPosition="5166"> ) fo def =∃x1 ··· ∃xn((w,γ1)fo ∧ ··· ∧ (w,γm)fo) (w, de (w, =f R(w,x1,...,xn) (w, =f x1 = x2 (w, = (w, B1) fo ∨ (w, B2) fo (w, ⇒ B)fo def = ∀x1 ··· ∀xn(((w,γ1)fo ∧ ··· ∧ (w,γm)fo) → (w,B)fo) (w,v ∧ (v,B)fo) → (v,B)fo) ∧ (v,B)fo) de def = ¬(w,B)fo γ1 ... γm (w,R(x1, (w,¬B)fo ...,xn)) x1 = x2) fo B1 ∨ B2)fo def x1 ... xn γ1 ... γm OB) fo def = ∃v(R(w,v) ❑B)fo def = ∀v(R(w,v) : B) fo def = (R(w,v) Bos Implementing Binding and Accommodation Theory This translation from DRSs to first-order logic is based on the one given in Kamp and Reyle (1993) extended with Moore’s proposal for modal operators (Moore 1980). It behaves linearly on the size of the input, so the computational overhead is kept low. I will use it to implement the acceptability constraints imposed by BAT on presupposition resolution that require inference, to wit, the check for consistency and informativeness. 3.2 Representing Presuppositions What is a proper representation for elementary presuppositions? There seems to be common agreement, in most of the accounts in presupposition theory, that presuppositions represent expressions of propositional type. Hence, to use a DRS to represent a single presupposition seems a natural choice.</context>
</contexts>
<marker>Moore, 1980</marker>
<rawString>Moore, Robert C. 1980. Reasoning about knowledge and action. Technical Report 181, SRI International, Menlo Park, California.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Reinhard Muskens</author>
</authors>
<title>Combining Montague semantics and discourse representation. Linguistics and Philosophy,</title>
<date>1996</date>
<contexts>
<context position="40204" citStr="Muskens 1996" startWordPosition="6288" endWordPosition="6289">bles and {-y1 ... -ym} is a finite ordered set of α-DRS-conditions, then the ordered pair ({x1 ... xn}, {-y1 ... -ym}) is a basic α-DRS. 2. Every basic α-DRS is an α-DRS. 3. If B1 and B2 are α-DRSs, then so is (B1;B2). 4. If B1 and B2 are α-DRSs, and x is a discourse referent declared in the domain of B1, then (B1 αx B2) is an α-DRS. Note that in clause 1 of the definition, ordered sets are used rather then plain sets for discourse referents and DRS-conditions; this will make definition of the resolution algorithm easier. DRS merging (clause 4) is used in many alternative formulations of DRT (Muskens 1996; Van Eijck and Kamp 1997; Kuschert 1999). The merge employed here, “;”, is adopted from Muskens and behaves semantically the same as dynamic conjunction in dynamic predicate logic (Groenendijk and Stokhof 1991). The syntax of α-DRS-conditions is defined as follows: Definition The syntax of α-DRS-conditions is defined according to the following four clauses: 1. Every basic DRS-condition is an α-DRS-condition. 2. If B is an α-DRS, then ¬B, ✷B, and ✸B are α-DRS-conditions. 3. If B1 and B2 are α-DRSs, then B1 V B2 and B1 ⇒ B2 are α-DRS-conditions. 4. If x is a variable and B is an α-DRS, then x :</context>
<context position="41420" citStr="Muskens, 1996" startWordPosition="6487" endWordPosition="6488"> is an α-DRS-condition. 193 Computational Linguistics Volume 29, Number 2 So the syntax for α-DRSs subsumes the syntax of DRSs. I will refer to α-DRSs that contain no DRSs of the form (B αi B&apos;) as presupposition-free. All other α-DRSs are referred to as presupposition-containing. (The same terminology will be used for α- DRS-conditions.) It is easy to show that presupposition-free α-DRSs are proper DRSs. In Table 1, I give several examples of lexical entries of presupposition triggers, assuming a compositional semantics in the Montagovian tradition based on Muskens’s (1996) compositional DRT (Muskens, 1996). The syntactic categories used in the table are N (noun), DET (determiner), NP (noun phrase), ADJ (adjective), and V (verb). Further, p and q are used to denote variables ranging over properties, and s to denote variables ranging over propositions. The table lists various kinds of presupposition triggers, including the definite determiner, a proper name (Mia), a factive verb (to realize), a sortally restricted predicate (bachelor), and the iterative adjective other. 3.3 Operations on Discourse Representations In this section I will formulate two operations on discourse representations require</context>
</contexts>
<marker>Muskens, 1996</marker>
<rawString>Muskens, Reinhard. 1996. Combining Montague semantics and discourse representation. Linguistics and Philosophy, 19:143–186.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Terence Parsons</author>
</authors>
<title>Events in the Semantics of English: A Study in Subatomic Semantics.</title>
<date>1990</date>
<publisher>MIT Press,</publisher>
<location>Cambridge.</location>
<contexts>
<context position="74063" citStr="Parsons 1990" startWordPosition="11470" endWordPosition="11471">ion is restricted to finite models), these limitations are reduced to a minimum. For each inference problem, the two inference agents attack the problem in parallel, and as soon as one of them finds an answer (a model or a counterproof), their task is completed. The three acceptability constraints that do not require first-order inference (proper binding, bound variables, and sortal compatibility) are not implemented as separate agents but instead are part of the resolution agent. Proper binding is checked via a neoDavidsonian semantics to describe events in terms of their thematic relations (Parsons 1990). Binding is violated when a (di)transitive verb has a reflexive pronoun as object and the discourse referents for the agent and patient denote different objects, or when a (di)transitive verb has a nonreflexive object and the discourse referents for agent and patient denote the same object. The check for free variables is rather straightforward, given the definitions in Section 3. Sortal violations are detected using a conceptual ontology. Based on WordNet (Fellbaum 1998), this ontology is substantially adapted and extended to deal with anaphora resolution in BAT. As usual, it reflects backgr</context>
</contexts>
<marker>Parsons, 1990</marker>
<rawString>Parsons, Terence. 1990. Events in the Semantics of English: A Study in Subatomic Semantics. MIT Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rob A Van der Sandt</author>
</authors>
<title>Presupposition projection as anaphora resolution.</title>
<date>1992</date>
<journal>Journal of Semantics,</journal>
<pages>9--333</pages>
<marker>Van der Sandt, 1992</marker>
<rawString>Van der Sandt, Rob A. 1992. Presupposition projection as anaphora resolution. Journal of Semantics, 9:333–377.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rob A Van der Sandt</author>
<author>Bart Geurts</author>
</authors>
<title>Presupposition, anaphora, and lexical content.</title>
<date>1991</date>
<tech>Technical Report 185, IBM,</tech>
<institution>Wissenschaftliches Zentrum, Institut f¨ur Wissensbasierte Systeme,</institution>
<marker>Van der Sandt, Geurts, 1991</marker>
<rawString>Van der Sandt, Rob A. and Bart Geurts. 1991. Presupposition, anaphora, and lexical content. Technical Report 185, IBM, Wissenschaftliches Zentrum, Institut f¨ur Wissensbasierte Systeme, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Van Eijck</author>
<author>Hans Kamp</author>
</authors>
<title>Representing discourse in context.</title>
<date>1997</date>
<booktitle>In Johan Van Benthem and Alice Ter Meulen, editors, Handbook of Logic and Language. Elsevier,</booktitle>
<pages>179--240</pages>
<publisher>MIT Press,</publisher>
<location>Amsterdam, and</location>
<marker>Van Eijck, Kamp, 1997</marker>
<rawString>Van Eijck, Jan and Hans Kamp. 1997. Representing discourse in context. In Johan Van Benthem and Alice Ter Meulen, editors, Handbook of Logic and Language. Elsevier, Amsterdam, and MIT Press, Cambridge, pages 179–240.</rawString>
</citation>
<citation valid="true">
<title>Theobalt, and Dalibor Topic.</title>
<date>1999</date>
<booktitle>In Harald Ganzinger, editor, 16th International Conference on Automated Deduction, CADE-16,</booktitle>
<volume>1632</volume>
<pages>314--318</pages>
<editor>Weidenbach, Christoph, Bijan Afshordel, Uwe Brahm, Christian Cohrs, Thorsten Engel, Enno Keen, Christian</editor>
<publisher>Springer,</publisher>
<location>Berlin,</location>
<marker>1999</marker>
<rawString>Weidenbach, Christoph, Bijan Afshordel, Uwe Brahm, Christian Cohrs, Thorsten Engel, Enno Keen, Christian Theobalt, and Dalibor Topic. 1999. System description: Spass version 1.0.0. In Harald Ganzinger, editor, 16th International Conference on Automated Deduction, CADE-16, volume 1632 of Lecture Notes in Artificial Intelligence. Springer, Berlin, pages 314–318.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>