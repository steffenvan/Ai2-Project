<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000062">
<title confidence="0.995863">
Counter-Training in Discovery of Semantic Patterns
</title>
<author confidence="0.998088">
Roman Yangarber
</author>
<affiliation confidence="0.80962">
Courant Institute of Mathematical Sciences
New York University
</affiliation>
<email confidence="0.998905">
roman@cs.nyu.edu
</email>
<sectionHeader confidence="0.995646" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999986409090909">
This paper presents a method for unsu-
pervised discovery of semantic patterns.
Semantic patterns are useful for a vari-
ety of text understanding tasks, in par-
ticular for locating events in text for in-
formation extraction. The method builds
upon previously described approaches to
iterative unsupervised pattern acquisition.
One common characteristic of prior ap-
proaches is that the output of the algorithm
is a continuous stream of patterns, with
gradually degrading precision.
Our method differs from the previous pat-
tern acquisition algorithms in that it intro-
duces competition among several scenar-
ios simultaneously. This provides natu-
ral stopping criteria for the unsupervised
learners, while maintaining good preci-
sion levels at termination. We discuss the
results of experiments with several scenar-
ios, and examine different aspects of the
new procedure.
</bodyText>
<sectionHeader confidence="0.999337" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.996001106666667">
The work described in this paper is motivated by
research into automatic pattern acquisition. Pat-
tern acquisition is considered important for a variety
of “text understanding” tasks, though our particular
reference will be to Information Extraction (IE). In
IE, the objective is to search through text for enti-
ties and events of a particular kind—corresponding
to the user’s interest. Many current systems achieve
this by pattern matching. The problem of recall, or
coverage, in IE can then be restated to a large ex-
tent as a problem of acquiring a comprehensive set
of good patterns which are relevant to the scenario
of interest, i.e., which describe events occurring in
this scenario.
Among the approaches to pattern acquisition
recently proposed, unsupervised methods&apos; have
gained some popularity, due to the substantial re-
duction in amount of manual labor they require. We
build upon these approaches for learning IE patterns.
The focus of this paper is on the problem of con-
vergence in unsupervised methods. As with a variety
of related iterative, unsupervised methods, the out-
put of the system is a stream of patterns, in which
the quality is high initially, but then gradually de-
grades. This degradation is inherent in the trade-off,
or tension, in the scoring metrics: between trying
to achieve higher recall vs. higher precision. Thus,
when the learning algorithm is applied against a ref-
erence corpus, the result is a ranked list of patterns,
and going down the list produces a curve which
trades off precision for recall.
Simply put, the unsupervised algorithm does not
know when to stop learning. In the absence of a
good stopping criterion, the resulting list of patterns
must be manually reviewed by a human; otherwise
one can set ad-hoc thresholds, e.g., on the number
of allowed iterations, as in (Riloff and Jones, 1999),
or else to resort to supervised training to determine
such thresholds—which is unsatisfactory when our
&apos;As described in, e.g., (Riloff, 1996; Riloff and Jones, 1999;
Yangarber et al., 2000).
goal from the outset is to try to limit supervision.
Thus, the lack of natural stopping criteria renders
these algorithms less unsupervised than one would
hope. More importantly, this lack makes the al-
gorithms difficult to use in settings where training
must be completely automatic, such as in a general-
purpose information extraction system, where the
topic may not be known in advance.
At the same time, certain unsupervised learning
algorithms in other domains exhibit inherently natu-
ral stopping criteria. One example is the algorithm
for word sense disambiguation in (Yarowsky, 1995).
Of particular relevance to our method are the algo-
rithms for semantic classification of names or NPs
described in (Thelen and Riloff, 2002; Yangarber et
al., 2002).
Inspired in part by these algorithms, we introduce
the counter-training technique for unsupervised pat-
tern acquisition. The main idea behind counter-
training is that several identical simple learners run
simultaneously to compete with one another in dif-
ferent domains. This yields an improvement in pre-
cision, and most crucially, it provides a natural indi-
cation to the learner when to stop learning—namely,
once it attempts to wander into territory already
claimed by other learners.
We review the main features of the underlying un-
supervised pattern learner and related work in Sec-
tion 2. In Section 3 we describe the algorithm; 3.2
gives the details of the basic learner, and 3.3 in-
troduces the counter-training framework which is
super-imposed on it. We present the results with and
without counter-training on several domains, Sec-
tion 4, followed by discussion in Section 5.
</bodyText>
<sectionHeader confidence="0.995317" genericHeader="introduction">
2 Background
</sectionHeader>
<subsectionHeader confidence="0.998715">
2.1 Unsupervised Pattern Learning
</subsectionHeader>
<bodyText confidence="0.999506750000001">
We outline those aspects of the prior work that are
relevant to the algorithm developed in our presenta-
tion.
We are given an IE scenario , e.g., “Man-
agement Succession” (as in MUC-6). We have a
raw general news corpus for training, i.e., an un-
classified and un-tagged set of documents . The
problem is to find a good set of patterns in , which
cover events relevant to .
We presuppose the existence of two general-
purpose, lower-level language tools—a name recog-
nizer and a parser. These tools are used to extract all
potential patterns from the corpus.
The user provides a small number of seed pat-
terns for . The algorithm uses the corpus to itera-
tively bootstrap a larger set of good patterns for .
The algorithm/learner achieves this bootstrap-
ping by utilizing the duality between the space of
documents and the space of patterns: good extrac-
tion patterns select documents relevant to the chosen
scenario; conversely, relevant documents typically
contain more than one good pattern. This duality
drives the bootstrapping process.
The primary aim of the learning is to train a
strong recognizer for ; is embodied in the set
of good patterns. However, as a result of training
, the procedure also produces the set of doc-
uments that it deems relevant to✁—the documents
selected by .
Evaluation: to evaluate the quality of discov-
ered patterns, (Riloff, 1996) describes a direct eval-
uation strategy, where precision of the patterns re-
sulting from a given run is established by manual re-
view. (Yangarber et al., 2000) uses an automatic but
indirect evaluation of the recognizer : they retrieve
a test sub-set from the training corpus
and manually judge the relevance of every document
in ; one can then obtain standard IR-style recall
and precision scores for relative to .
In presenting our results, we will discuss both
kinds of evaluation.
The recall/precision curves produced by the indi-
rect evaluation generally reach some level of recall
at which precision begins to drop. This happens be-
cause at some point in the learning process the al-
gorithm picks up patterns that are common in , but
are not sufficiently specific to alone. These pat-
terns then pick up irrelevant documents, and preci-
sion drops.
Our goal is to prevent this kind of degradation, by
helping the learner stop when precision is still high,
while achieving maximal recall.
</bodyText>
<subsectionHeader confidence="0.506261">
2.2 Related Work
</subsectionHeader>
<bodyText confidence="0.999938741935484">
We briefly mention some of the unsupervised meth-
ods for acquiring knowledge for NL understanding,
in particular in the context of IE. A typical archi-
tecture for an IE system includes knowledge bases
(KBs), which must be customized when the system
is ported to new domains. The KBs cover different
levels, viz. a lexicon, a semantic conceptual hierar-
chy, a set of patterns, a set of inference rules, a set
of logical representations for objects in the domain.
Each KB can be expected to be domain-specific, to
a greater or lesser degree.
Among the research that deals with automatic ac-
quisition of knowledge from text, the following are
particularly relevant to us. (Strzalkowski and Wang,
1996) proposed a method for learning concepts be-
longing to a given semantic class. (Riloff and Jones,
1999; Riloff, 1996; Yangarber et al., 2000) present
different combinations of learners of patterns and
concept classes specifically for IE.
In (Riloff, 1996) the system AutoSlog-TS learns
patterns for filling an individual slot in an event tem-
plate, while simultaneously acquiring a set of lexical
elements/concepts eligible to fill the slot. AutoSlog-
TS, does not require a pre-annotated corpus, but
does require one that has been split into subsets that
are relevant vs. non-relevant subsets to the scenario.
(Yangarber et al., 2000) attempts to find extrac-
tion patterns, without a pre-classified corpus, start-
ing from a set of seed patterns. This is the ba-
sic unsupervised learner on which our approach is
founded; it is described in the next section.
</bodyText>
<sectionHeader confidence="0.996511" genericHeader="method">
3 Algorithm
</sectionHeader>
<bodyText confidence="0.999933">
We first present the basic algorithm for pattern ac-
quisition, similar to that presented in (Yangarber et
al., 2000). Section 3.3 places the algorithm in the
framework of counter-training.
</bodyText>
<subsectionHeader confidence="0.9999">
3.1 Pre-processing
</subsectionHeader>
<bodyText confidence="0.992663377777778">
Prior to learning, the training corpus undergoes sev-
eral steps of pre-processing. The learning algorithm
depends on the fundamental redundancy in natural
language, and the pre-processing the text is designed
to reduce the sparseness of data, by reducing the ef-
fects of phenomena which mask redundancy.
Name Factorization: We use a name classifier to
tag all proper names in the corpus as belonging to
one of several categories—person, location, and or-
ganization, or as an unidentified name. Each name
is replaced with its category label, a single token.
The name classifier also factors out other out-of-
vocabulary (OOV) classes of items: dates, times,
numeric and monetary expressions. Name classifi-
cation is a well-studied subject, e.g., (Collins and
Singer, 1999). The name recognizer we use is based
on lists of common name markers—such as personal
titles (Dr., Ms.) and corporate designators (Ltd.,
GmbH)—and hand-crafted rules.
Parsing: After name classification, we apply a gen-
eral English parser, from Conexor Oy, (Tapanainen
and J¨arvinen, 1997). The parser recognizes the
name tags generated in the preceding step, and treats
them as atomic. The parser’s output is a set of syn-
tactic dependency trees for each document.
Syntactic Normalization: To reduce variation in
the corpus further, we apply a tree-transforming pro-
gram to the parse trees. For every (non-auxiliary)
verb heading its own clause, the transformer pro-
duces a corresponding active tree, where possi-
ble. This converts for passive, relative, subordinate
clauses, etc. into active clauses.
Pattern Generalization: A “primary” tuple is ex-
tracted from each clause: the verb and its main ar-
guments, subject and object.
The tuple consists of three literals [s,v,o]; if
the direct object is missing the tuple contains in its
place the subject complement; if the object is a sub-
ordinate clause, the tuple contains in its place the
head verb of that clause.
Each primary tuple produces three generalized tu-
ples, with one of the literals replaced by a wildcard.
A pattern is simply a primary or generalized tuple.
The pre-processed corpus is thus a many-many map-
ping between the patterns and the document set.
</bodyText>
<subsectionHeader confidence="0.999909">
3.2 Unsupervised Learner
</subsectionHeader>
<bodyText confidence="0.999217">
We now outline the main steps of the algorithm, fol-
lowed by the formulas used in these steps.
</bodyText>
<listItem confidence="0.886148322580645">
1. Given: a seed set of patterns, expressed as pri-
mary or generalized tuples.
2. Partition: divide the corpus into relevant
vs. non-relevant documents. A document is
relevant—receives a weight of 1—if some seed
matches , and non-relevant otherwise, receiving
weight 0. After the first iteration, documents are
assigned relevance weights between and . So
at each iteration, there is a distribution of relevance
weights on the corpus, rather than a binary partition.
3. Pattern Ranking: Every pattern appearing in
a relevant document is a candidate pattern. Assign
a score to each candidate; the score depends on how
accurately the candidate predicts the relevance of a
document, with respect to the current weight distri-
bution, and on how much support it has—the total
wight of the relevant documents it matches in the
corpus (in Equation 2). Rank the candidates accord-
ing to their score. On the-th iteration, we select the
pattern most correlated with the documents that
have high relevance. Add to the growing set of
seeds , and record its accuracy.
4. Document Relevance: For each document
covered by any of the accepted patterns in , re-
compute the relevance of to the target scenario ,
. Relevance of is based on the cumulative
accuracy of patterns from which match .
5. Repeat: Back to Partition in step 2. The ex-
panded pattern set induces a new relevance distribu-
tion on the corpus. Repeat the procedure as long as
learning is possible.
</listItem>
<bodyText confidence="0.972018461538462">
The formula used for scoring candidate patterns
in step 3 is similar to that in (Riloff, 1996):
where are documents where matched,
and the support is computed as the sum of
their relevance:
Document relevance is computed as in (Yangarber et
al., 2000)
where is the set of accepted patterns that
match ; this is a rough estimate of the likelihood of
relevance of , based on the pattern accuracy mea-
sure. Pattern accuracy, or precision, is given by the
average relevance of the documents matched by :
Equation 1 can therefore be written simply as:
</bodyText>
<subsectionHeader confidence="0.999601">
3.3 Counter-Training
</subsectionHeader>
<bodyText confidence="0.9996593">
The two terms in Equation 5 capture the trade-off
between precision and recall. As mentioned in Sec-
tion 2.1, the learner running in isolation will even-
tually acquire patterns that are too general for the
scenario, which will cause it to assign positive rel-
evance to non-relevant documents, and learn more
irrelevant patterns. From that point onward pattern
accuracy will decline.
To deal with this problem, we arrange different
learners, for different scenarios to
train simultaneously on each iteration. Each learner
stores its own bag of good patterns, and each as-
signs its own relevance, , to the documents.
Documents that are “ambiguous” will have high rel-
evance in more than one scenario.
Now, given multiple learners, we can refine the
measure of pattern precision in Eq. 4 for scenario ,
to take into account the negative evidence—i.e., how
much weight the documents matched by the pattern
received in other scenarios:
</bodyText>
<equation confidence="0.515793">
(6)
</equation>
<bodyText confidence="0.999642705882353">
If the candidate is not considered for
acceptance. Equations 6 and 5 imply that the learner
will disfavor a pattern if it has too much opposition
from other scenarios.
The algorithm proceeds as long as two or more
scenarios are still learning patterns. When the num-
ber of surviving scenarios drops to one, learning
terminates, since, running unopposed, the surviving
scenario is may start learning non-relevant patterns
which will degrade its precision.
Scenarios may be represented with different den-
sity within the corpus, and may be learned at dif-
ferent rates. To account for this, we introduce a pa-
rameter, : rather than acquiring a single pattern
on each iteration, each learner may acquire up to
patterns (3 in this paper), as long as their scores are
near (within 5% of) the top-scoring pattern.
</bodyText>
<sectionHeader confidence="0.999723" genericHeader="method">
4 Experiments
</sectionHeader>
<bodyText confidence="0.999455666666667">
We tested the algorithm on documents from the Wall
Street Journal (WSJ). The training corpus consisted
of 15,000 articles from 3 months between 1992 and
</bodyText>
<tableCaption confidence="0.999263">
Table 1: Scenarios in Competition
</tableCaption>
<table confidence="0.958421384615385">
Scenario Seed Patterns # Documents Last Iteration
Management Succession [Company appoint Person] [Person quit] 220 143
Merger&amp;Acquisition [buy Company] [Company merge] 231 210
Legal Action [sue Organization] [bring/settle suit] 169 132
Bill/Law Passing [pass bill] 89 79
Political Election [run/win/lose election/campaign] 42 24
Sports Event [run/win/lose competition/event] 25 19
Layoff [expect/announce layoff] 43 15
Bankruptcy [file/declare bankruptcy] 7 4
Natural Disaster [disaster kill/damage people/property] 16 0
Don’t Care [cut/raise/lower rate] [report/post earning] 413 —
1994. This included the MUC-6 training corpus of
100 tagged WSJ articles (from 1993).
</table>
<bodyText confidence="0.998549230769231">
We used the scenarios shown in Table 1 to com-
pete with each other in different combinations. The
seed patterns for the scenarios, and the number
of documents initially picked up by the seeds are
shown in the table.2 The seeds were kept small, and
they yielded high precision; it is evident that these
scenarios are represented to a varying degree within
the corpus.
We also introduced an additional “negative” sce-
nario (the row labeled “Don’t care”), seeded with
patterns for earnings reports and interest rate fluctu-
ations.
The last column shows the number of iterations
before learning stopped. A sample of the discovered
patterns3 appears in Table 2.
For an indirect evaluation of the quality of the
learned patterns, we employ the text-filtering eval-
uation strategy, as in (Yangarber et al., 2000). As a
by-product of pattern acquisition, the algorithm ac-
quires a set of relevant documents (more precisely, a
distribution of document relevance weights). Rather
than inspecting patterns on the-th iteration by
hand, we can judge the quality of this pattern set
based on the quality of the documents that the pat-
terns match. Viewed as a categorization task
on a set of documents, this is similar to the text-
</bodyText>
<footnote confidence="0.9972662">
2Capitalized entries refer to Named Entity classes, and ital-
icized entries refer to small classes of synonyms, containing
about 3 words each; e.g., appoint appoint, name, promote.
3The algorithm learns hundreds of patterns; we present a
sample to give the reader a sense of their shape and content.
</footnote>
<figure confidence="0.961313866666667">
Management Succession
demand/announce resignation
Person succeed/replace person
Person continue run/serve
Person continue/serve/remain/step-down chairman
Person retain/leave/hold/assume/relinquish post
Company hire/fire/dismiss/oust Person
Merger&amp;Acquisition
Company plan/expect/offer/agree buy/merge
complete merger/acquisition/purchase
agree sell/pay/acquire
get/buy/take-over business/unit/interest/asset
agreement creates company
hold/exchange/offer unit/subsidiary
Legal Action
</figure>
<bodyText confidence="0.572782">
deny charge/wrongdoing/allegation
appeal ruling/decision
settle/deny claim/charge
judge/court dismiss suit
Company mislead investor/public
</bodyText>
<tableCaption confidence="0.966038">
Table 2: Sample Acquired Patterns
</tableCaption>
<bodyText confidence="0.991276111111111">
filtering task in the MUC competitions. We use the
text-filtering power of the set as a quantitative
measure of the goodness of the patterns.
To conduct the text-filtering evaluation we need
a binary relevance judgement for each document.
This is obtained as follows. We introduce a cutoff
threshold on document relevance; if the system
has internal confidence of more than that a doc-
ument is relevant, it labels as relevant externally
</bodyText>
<figure confidence="0.937331">
0 0.2 0.4 0.6 0.8 1
Recall
</figure>
<figureCaption confidence="0.998593">
Figure 1: Management Succession
</figureCaption>
<figure confidence="0.9854745">
0.2 0.4 0.6 0.8 1
Recall
</figure>
<figureCaption confidence="0.881863">
Figure 2: Legal Action/Lawsuit
</figureCaption>
<figure confidence="0.998073894736842">
Counter
Mono
Baseline (54%)
Precision
Counter-Strong
Counter
Mono
Baseline (52%)
Precision 1
0.9
0.8
0.7
0.6
0.5
1
0.9
0.8
0.7
0.6
</figure>
<bodyText confidence="0.974348692307692">
for the purpose of scoring recall and precision. Oth-
erwise it labels as non-relevant.4
The results of the pattern learner for the “Man-
agement Succession” scenario, with and without
counter-training, are shown in Figure 1. The test
sub-corpus consists of the 100 MUC-6 documents.
The initial seed yields about 15% recall at 86%
precision. The curve labeled Mono shows the perfor-
mance of the baseline algorithm up to 150 iterations.
It stops learning good patterns after 60 iterations, at
73% recall, from which point precision drops.
The reason the recall appears to continue improv-
ing is that, after this point, the learner begins to ac-
quire patterns describing secondary events, deriva-
tive of or commonly co-occurring with the focal
topic. Examples of such events are fluctuations in
stock prices, revenue estimates, and other common
business news elements.
The Baseline 54% is the precision we would ex-
pect to get by randomly marking the documents as
relevant to the scenario.
The performance of the Management Succes-
sion learner counter-trained against other learners is
traced by the curve labeled Counter. It is impor-
tant to recall that the counter-trained algorithm ter-
minates at the final point on the curve, whereas the
</bodyText>
<footnote confidence="0.796493714285714">
4The relevance cut-off parameter, was set to 0.3 for
mono-trained experiments, and to 0.2 for counter-training.
These numbers were obtained from empirical trials, which sug-
gest that a lower confidence is acceptable in the presence of neg-
ative evidence. Internal relevance measures, , are main-
tained by the algorithm, and the external, binary measures are
used only for evaluation of performance.
</footnote>
<bodyText confidence="0.977986608695652">
mono-trained case it does not.
We checked the quality of the discovered patterns
by hand. Termination occurs at 142 iterations. We
observed that after iteration 103 only 10% of the pat-
terns are “good”, the rest are secondary. However, in
the first 103 iterations, over 90% of the patterns are
good Management Succession patterns.
In the same experiment the behaviour of the
learner of the “Legal Action” scenario is shown in
Figure 2. The test corpus for this learner consists
of 250 documents: the 100 MUC-6 training docu-
ments and 150 WSJ documents which we retrieved
using a set of keywords and categorized manually.
The curves labeled Mono, Counter and Baseline are
as in the preceding figure.
We observe that the counter-training termination
point is near the mono-trained curve, and has a good
recall-precision trade-off. However, the improve-
ment from counter-training is less pronounced here
than for the Succession scenario. This is due to a
subtle interplay between the combination of scenar-
ios, their distribution in the corpus, and the choice
of seeds. We return to this in the next section.
</bodyText>
<sectionHeader confidence="0.99871" genericHeader="method">
5 Discussion
</sectionHeader>
<bodyText confidence="0.999746666666667">
Although the results we presented here are encour-
aging, there remains much research, experimenta-
tion and theoretical work to be done.
</bodyText>
<sectionHeader confidence="0.63509" genericHeader="evaluation">
Ambiguity and Document Overlap
</sectionHeader>
<bodyText confidence="0.993993144444444">
When a learner runs in isolation, it is in a sense
undergoing “mono-training”: the only evidence it
has on a given iteration is derived from its own
guesses on previous iterations. Thus once it starts
to go astray, it is difficult to set it back on course.
Counter-training provides a framework in which
other recognizers, training in parallel with a given
recognizer , can label documents as belonging to
their own, other categories, and therefore as being
less likely to belong to ’s category. This likelihood
is proportional to the amount of anticipated ambigu-
ity or overlap among the counter-trained scenarios.
We are still in the early stages of exploring the
space of possibilities provided by this methodology,
though it is clear that it is affected by several fac-
tors. One obvious contributing factor is the choice
of seed patterns, since seeds may cause the learner
to explore different parts of the document space first,
which may affect the subsequent outcome.
Another factor is the particular combination of
competing scenarios. If two scenarios are very
close—i.e., share many semantic features—they will
inhibit each other, and result in lower recall. This
closeness will need to be qualified at a future time.
There is “ambiguity” both at the level of docu-
ments as well as at the level of patterns. Document
ambiguity means that some documents cover more
than one topic, which will lead to high relevance
scores in multiple scenarios. This is more common
for longer documents, and may therefore disfavor
patterns contained in such documents.
An important issue is the extent of overlap among
scenarios: Management Succession and Mergers
and Acquisitions are likely to have more documents
in common than either has with Natural Disasters.
Patterns may be pragmatically or semantically
ambiguous; “Person died” is an indicator for Man-
agement Succession, as well as for Natural Disas-
ters. The pattern “win race” caused the sports sce-
nario to learn patterns for political elections.
Some of the chosen scenarios will be better rep-
resented in the corpus than others, which may block
learning of the under-represented scenarios.
The scenarios that are represented well may be
learned at different rates, which again may inhibit
other learners. This effect is seen in Figure 2; the
Lawsuit learner is inhibited by the other, stronger
scenarios. The curve labeled Counter-Strong is ob-
tained from a separate experiment. The Lawsuit
learner ran against the same scenarios as in Table 1,
but some of the other learners were “weakened”:
they were given smaller seeds, and therefore picked
up fewer documents initially.5 This enabled them to
provide sufficient guidance to the Lawsuit learner to
maintain high precision, without inhibiting high re-
call. The initial part of the curve is difficult to see
because it overlaps largely with the Counter curve.
However, they diverge substantially toward the end,
above the 80% recall mark.
We should note that the objective of the pro-
posed methodology is to learn good patterns, and
that reaching for the maximal document recall may
not necessarily serve the same objective.
Finally, counter-training can be applied to discov-
ering knowledge of other kinds. (Yangarber et al.,
2002) presents the same technique successfully ap-
plied to learning names of entities of a given seman-
tic class, e.g., diseases or infectious agents.6 The
main differences are: a. the data-points in (Yan-
garber et al., 2002) are instances of names in text
(which are to be labeled with their semantic cate-
gories), whereas here the data-points are documents;
b. the intended product there is a list of categorized
names, whereas here the focus is on the patterns that
categorize documents.
(Thelen and Riloff, 2002) presents a very simi-
lar technique, in the same application as the one de-
scribed in (Yangarber et al., 2002).7 However, (The-
len and Riloff, 2002) did not focus on the issue of
convergence, and on leveraging negative categories
to achieve or improve convergence.
Co-Training
The type of learning described in this paper differs
from the co-training method, covered, e.g., in (Blum
and Mitchell, 1998). In co-training, learning centers
on labeling a set of data-points in situations where
these data-points have multiple disjoint and redun-
dant views.8 Examples of spaces of such data-points
are strings of text containing proper names, (Collins
and Singer, 1999), or Web pages relevant to a query
</bodyText>
<footnote confidence="0.98911125">
5The seeds for Management Succession and M&amp;A scenarios
were reduced to pick up fewer than 170 documents, each.
6These are termed generalized names, since they may not
abide by capitalization rules of conventional proper names.
7The two papers appeared within two months of each other.
8A view, in the sense of relational algebra, is a sub-set of
features of the data-points. In the cited papers, these views are
exemplified by internal and external contextual cues.
</footnote>
<bodyText confidence="0.9885008">
(Blum and Mitchell, 1998).
Co-training iteratively trains, or refines, two or
more n-way classifiers.9 Each classifier utilizes only
one of the views on the data-points. The main idea
is that the classifiers can start out weak, but will
strengthen each other as a result of learning, by la-
beling a growing number of data-points based on the
mutually independent sets of evidence that they pro-
vide to each other.
In this paper the context is somewhat different.
A data-point for each learner is a single document in
the corpus. The learner assigns a binary label to each
data-point: relevant or non-relevant to the learner’s
scenario. The classifier that is being trained is em-
bodied in the set of acquired patterns. A data-point
can be thought of having one view: the patterns that
match on the data-point.
In both frameworks, the unsupervised learners
help one another to bootstrap. In co-training, they
do so by providing reliable positive examples to
each other. In counter-training they proceed by find-
ing their own weakly reliable positive evidence, and
by providing each other with reliable negative ev-
idence. Thus, in effect, the unsupervised learners
“supervise” each other.
</bodyText>
<sectionHeader confidence="0.999575" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.987270625">
In this paper we have presented counter-training, a
method for strengthening unsupervised strategies for
knowledge acquisition. It is a simple way to com-
bine unsupervised learners for a kind of “mutual
supervision”, where they prevent each other from
degradation of accuracy.
Our experiments in acquisition of semantic pat-
terns show that counter-training is an effective way
to combat the otherwise unlimited expansion in un-
supervised search. Counter-training is applicable in
settings where a set of data points has to be catego-
rized as belonging to one or more target categories.
The main features of counter-training are:
Training several simple learners in parallel;
Competition among learners;
Convergence of the overall learning process;
</bodyText>
<footnote confidence="0.8717485">
9The cited literature reports results with exactly two classi-
fiers.
</footnote>
<bodyText confidence="0.9753935">
Termination with good recall-precision trade-
off, compared to the single-trained learner.
</bodyText>
<sectionHeader confidence="0.994737" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.5723915">
This research is supported by the Defense Advanced Research
Projects Agency as part of the Translingual Information Detec-
tion, Extraction and Summarization (TIDES) program, under
Grant N66001-001-1-8917 from the Space and Naval Warfare
Systems Center San Diego, and by the National Science Foun-
dation under Grant IIS-0081962.
</bodyText>
<sectionHeader confidence="0.962856" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999360305555555">
A. Blum and T. Mitchell. 1998. Combining labeled
and unlabeled data with co-training. In Proc. 11th
Annl. Conf Computational Learning Theory (COLT-
98), New York.
M. Collins and Y. Singer. 1999. Unsupervised models
for named entity classification. In Proc. Joint SIGDAT
Conf. on EMNLP/VLC, College Park, MD.
E. Riloff and R. Jones. 1999. Learning dictionaries for
information extraction by multi-level bootstrapping.
In Proc. 16th Natl. Conf. on AI (AAAI-99), Orlando,
FL.
E. Riloff. 1996. Automatically generating extraction pat-
terns from untagged text. In Proc. 13th Natl. Conf. on
AI (AAAI-96).
T. Strzalkowski and J. Wang. 1996. A self-learning uni-
versal concept spotter. In Proc. 16th Intl. Conf. Com-
putational Linguistics (COLING-96), Copenhagen.
P. Tapanainen and T. J¨arvinen. 1997. A non-projective
dependency parser. In Proc. 5th Conf. Applied Natural
Language Processing, Washington, D.C.
M. Thelen and E. Riloff. 2002. A bootstrapping method
for learning semantic lexicons using extraction pattern
contexts. In Proc. 2002 Conf. Empirical Methods in
NLP (EMNLP 2002).
R. Yangarber, R. Grishman, P. Tapanainen, and S. Hut-
tunen. 2000. Automatic acquisition of domain knowl-
edge for information extraction. In Proc. 18th Intl.
Conf. Computational Linguistics (COLING 2000),
Saarbr¨ucken.
R. Yangarber, W. Lin, and R. Grishman. 2002. Un-
supervised learning of generalized names. In Proc.
19th Intl. Conf. Computational Linguistics (COLING
2002), Taipei.
D. Yarowsky. 1995. Unsupervised word sense disam-
biguation rivaling supervised methods. In Proc. 33rd
Annual Meeting ofACL, Cambridge, MA.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.978341">
<title confidence="0.999882">Counter-Training in Discovery of Semantic Patterns</title>
<author confidence="0.999936">Roman Yangarber</author>
<affiliation confidence="0.997024">Courant Institute of Mathematical Sciences New York University</affiliation>
<email confidence="0.999334">roman@cs.nyu.edu</email>
<abstract confidence="0.999278956521739">This paper presents a method for unsupervised discovery of semantic patterns. Semantic patterns are useful for a variety of text understanding tasks, in particular for locating events in text for information extraction. The method builds upon previously described approaches to iterative unsupervised pattern acquisition. One common characteristic of prior approaches is that the output of the algorithm is a continuous stream of patterns, with gradually degrading precision. Our method differs from the previous pattern acquisition algorithms in that it introduces competition among several scenarios simultaneously. This provides natural stopping criteria for the unsupervised learners, while maintaining good precision levels at termination. We discuss the results of experiments with several scenarios, and examine different aspects of the new procedure.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A Blum</author>
<author>T Mitchell</author>
</authors>
<title>Combining labeled and unlabeled data with co-training.</title>
<date>1998</date>
<booktitle>In Proc. 11th Annl. Conf Computational Learning Theory (COLT98),</booktitle>
<location>New York.</location>
<contexts>
<context position="25653" citStr="Blum and Mitchell, 1998" startWordPosition="4096" endWordPosition="4099">ir semantic categories), whereas here the data-points are documents; b. the intended product there is a list of categorized names, whereas here the focus is on the patterns that categorize documents. (Thelen and Riloff, 2002) presents a very similar technique, in the same application as the one described in (Yangarber et al., 2002).7 However, (Thelen and Riloff, 2002) did not focus on the issue of convergence, and on leveraging negative categories to achieve or improve convergence. Co-Training The type of learning described in this paper differs from the co-training method, covered, e.g., in (Blum and Mitchell, 1998). In co-training, learning centers on labeling a set of data-points in situations where these data-points have multiple disjoint and redundant views.8 Examples of spaces of such data-points are strings of text containing proper names, (Collins and Singer, 1999), or Web pages relevant to a query 5The seeds for Management Succession and M&amp;A scenarios were reduced to pick up fewer than 170 documents, each. 6These are termed generalized names, since they may not abide by capitalization rules of conventional proper names. 7The two papers appeared within two months of each other. 8A view, in the sen</context>
</contexts>
<marker>Blum, Mitchell, 1998</marker>
<rawString>A. Blum and T. Mitchell. 1998. Combining labeled and unlabeled data with co-training. In Proc. 11th Annl. Conf Computational Learning Theory (COLT98), New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Collins</author>
<author>Y Singer</author>
</authors>
<title>Unsupervised models for named entity classification.</title>
<date>1999</date>
<booktitle>In Proc. Joint SIGDAT Conf. on EMNLP/VLC,</booktitle>
<location>College Park, MD.</location>
<contexts>
<context position="9629" citStr="Collins and Singer, 1999" startWordPosition="1546" endWordPosition="1549">cy in natural language, and the pre-processing the text is designed to reduce the sparseness of data, by reducing the effects of phenomena which mask redundancy. Name Factorization: We use a name classifier to tag all proper names in the corpus as belonging to one of several categories—person, location, and organization, or as an unidentified name. Each name is replaced with its category label, a single token. The name classifier also factors out other out-ofvocabulary (OOV) classes of items: dates, times, numeric and monetary expressions. Name classification is a well-studied subject, e.g., (Collins and Singer, 1999). The name recognizer we use is based on lists of common name markers—such as personal titles (Dr., Ms.) and corporate designators (Ltd., GmbH)—and hand-crafted rules. Parsing: After name classification, we apply a general English parser, from Conexor Oy, (Tapanainen and J¨arvinen, 1997). The parser recognizes the name tags generated in the preceding step, and treats them as atomic. The parser’s output is a set of syntactic dependency trees for each document. Syntactic Normalization: To reduce variation in the corpus further, we apply a tree-transforming program to the parse trees. For every (</context>
<context position="25914" citStr="Collins and Singer, 1999" startWordPosition="4135" endWordPosition="4138"> in the same application as the one described in (Yangarber et al., 2002).7 However, (Thelen and Riloff, 2002) did not focus on the issue of convergence, and on leveraging negative categories to achieve or improve convergence. Co-Training The type of learning described in this paper differs from the co-training method, covered, e.g., in (Blum and Mitchell, 1998). In co-training, learning centers on labeling a set of data-points in situations where these data-points have multiple disjoint and redundant views.8 Examples of spaces of such data-points are strings of text containing proper names, (Collins and Singer, 1999), or Web pages relevant to a query 5The seeds for Management Succession and M&amp;A scenarios were reduced to pick up fewer than 170 documents, each. 6These are termed generalized names, since they may not abide by capitalization rules of conventional proper names. 7The two papers appeared within two months of each other. 8A view, in the sense of relational algebra, is a sub-set of features of the data-points. In the cited papers, these views are exemplified by internal and external contextual cues. (Blum and Mitchell, 1998). Co-training iteratively trains, or refines, two or more n-way classifier</context>
</contexts>
<marker>Collins, Singer, 1999</marker>
<rawString>M. Collins and Y. Singer. 1999. Unsupervised models for named entity classification. In Proc. Joint SIGDAT Conf. on EMNLP/VLC, College Park, MD.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Riloff</author>
<author>R Jones</author>
</authors>
<title>Learning dictionaries for information extraction by multi-level bootstrapping.</title>
<date>1999</date>
<booktitle>In Proc. 16th Natl. Conf. on AI (AAAI-99),</booktitle>
<location>Orlando, FL.</location>
<contexts>
<context position="2868" citStr="Riloff and Jones, 1999" startWordPosition="446" endWordPosition="449">inherent in the trade-off, or tension, in the scoring metrics: between trying to achieve higher recall vs. higher precision. Thus, when the learning algorithm is applied against a reference corpus, the result is a ranked list of patterns, and going down the list produces a curve which trades off precision for recall. Simply put, the unsupervised algorithm does not know when to stop learning. In the absence of a good stopping criterion, the resulting list of patterns must be manually reviewed by a human; otherwise one can set ad-hoc thresholds, e.g., on the number of allowed iterations, as in (Riloff and Jones, 1999), or else to resort to supervised training to determine such thresholds—which is unsatisfactory when our &apos;As described in, e.g., (Riloff, 1996; Riloff and Jones, 1999; Yangarber et al., 2000). goal from the outset is to try to limit supervision. Thus, the lack of natural stopping criteria renders these algorithms less unsupervised than one would hope. More importantly, this lack makes the algorithms difficult to use in settings where training must be completely automatic, such as in a generalpurpose information extraction system, where the topic may not be known in advance. At the same time, c</context>
<context position="7895" citStr="Riloff and Jones, 1999" startWordPosition="1275" endWordPosition="1278"> includes knowledge bases (KBs), which must be customized when the system is ported to new domains. The KBs cover different levels, viz. a lexicon, a semantic conceptual hierarchy, a set of patterns, a set of inference rules, a set of logical representations for objects in the domain. Each KB can be expected to be domain-specific, to a greater or lesser degree. Among the research that deals with automatic acquisition of knowledge from text, the following are particularly relevant to us. (Strzalkowski and Wang, 1996) proposed a method for learning concepts belonging to a given semantic class. (Riloff and Jones, 1999; Riloff, 1996; Yangarber et al., 2000) present different combinations of learners of patterns and concept classes specifically for IE. In (Riloff, 1996) the system AutoSlog-TS learns patterns for filling an individual slot in an event template, while simultaneously acquiring a set of lexical elements/concepts eligible to fill the slot. AutoSlogTS, does not require a pre-annotated corpus, but does require one that has been split into subsets that are relevant vs. non-relevant subsets to the scenario. (Yangarber et al., 2000) attempts to find extraction patterns, without a pre-classified corpus</context>
</contexts>
<marker>Riloff, Jones, 1999</marker>
<rawString>E. Riloff and R. Jones. 1999. Learning dictionaries for information extraction by multi-level bootstrapping. In Proc. 16th Natl. Conf. on AI (AAAI-99), Orlando, FL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Riloff</author>
</authors>
<title>Automatically generating extraction patterns from untagged text.</title>
<date>1996</date>
<booktitle>In Proc. 13th Natl. Conf. on AI (AAAI-96).</booktitle>
<contexts>
<context position="3010" citStr="Riloff, 1996" startWordPosition="469" endWordPosition="470">rithm is applied against a reference corpus, the result is a ranked list of patterns, and going down the list produces a curve which trades off precision for recall. Simply put, the unsupervised algorithm does not know when to stop learning. In the absence of a good stopping criterion, the resulting list of patterns must be manually reviewed by a human; otherwise one can set ad-hoc thresholds, e.g., on the number of allowed iterations, as in (Riloff and Jones, 1999), or else to resort to supervised training to determine such thresholds—which is unsatisfactory when our &apos;As described in, e.g., (Riloff, 1996; Riloff and Jones, 1999; Yangarber et al., 2000). goal from the outset is to try to limit supervision. Thus, the lack of natural stopping criteria renders these algorithms less unsupervised than one would hope. More importantly, this lack makes the algorithms difficult to use in settings where training must be completely automatic, such as in a generalpurpose information extraction system, where the topic may not be known in advance. At the same time, certain unsupervised learning algorithms in other domains exhibit inherently natural stopping criteria. One example is the algorithm for word s</context>
<context position="6098" citStr="Riloff, 1996" startWordPosition="975" endWordPosition="976">apping by utilizing the duality between the space of documents and the space of patterns: good extraction patterns select documents relevant to the chosen scenario; conversely, relevant documents typically contain more than one good pattern. This duality drives the bootstrapping process. The primary aim of the learning is to train a strong recognizer for ; is embodied in the set of good patterns. However, as a result of training , the procedure also produces the set of documents that it deems relevant to✁—the documents selected by . Evaluation: to evaluate the quality of discovered patterns, (Riloff, 1996) describes a direct evaluation strategy, where precision of the patterns resulting from a given run is established by manual review. (Yangarber et al., 2000) uses an automatic but indirect evaluation of the recognizer : they retrieve a test sub-set from the training corpus and manually judge the relevance of every document in ; one can then obtain standard IR-style recall and precision scores for relative to . In presenting our results, we will discuss both kinds of evaluation. The recall/precision curves produced by the indirect evaluation generally reach some level of recall at which precisi</context>
<context position="7909" citStr="Riloff, 1996" startWordPosition="1279" endWordPosition="1280">s (KBs), which must be customized when the system is ported to new domains. The KBs cover different levels, viz. a lexicon, a semantic conceptual hierarchy, a set of patterns, a set of inference rules, a set of logical representations for objects in the domain. Each KB can be expected to be domain-specific, to a greater or lesser degree. Among the research that deals with automatic acquisition of knowledge from text, the following are particularly relevant to us. (Strzalkowski and Wang, 1996) proposed a method for learning concepts belonging to a given semantic class. (Riloff and Jones, 1999; Riloff, 1996; Yangarber et al., 2000) present different combinations of learners of patterns and concept classes specifically for IE. In (Riloff, 1996) the system AutoSlog-TS learns patterns for filling an individual slot in an event template, while simultaneously acquiring a set of lexical elements/concepts eligible to fill the slot. AutoSlogTS, does not require a pre-annotated corpus, but does require one that has been split into subsets that are relevant vs. non-relevant subsets to the scenario. (Yangarber et al., 2000) attempts to find extraction patterns, without a pre-classified corpus, starting fro</context>
<context position="12694" citStr="Riloff, 1996" startWordPosition="2056" endWordPosition="2057">pattern most correlated with the documents that have high relevance. Add to the growing set of seeds , and record its accuracy. 4. Document Relevance: For each document covered by any of the accepted patterns in , recompute the relevance of to the target scenario , . Relevance of is based on the cumulative accuracy of patterns from which match . 5. Repeat: Back to Partition in step 2. The expanded pattern set induces a new relevance distribution on the corpus. Repeat the procedure as long as learning is possible. The formula used for scoring candidate patterns in step 3 is similar to that in (Riloff, 1996): where are documents where matched, and the support is computed as the sum of their relevance: Document relevance is computed as in (Yangarber et al., 2000) where is the set of accepted patterns that match ; this is a rough estimate of the likelihood of relevance of , based on the pattern accuracy measure. Pattern accuracy, or precision, is given by the average relevance of the documents matched by : Equation 1 can therefore be written simply as: 3.3 Counter-Training The two terms in Equation 5 capture the trade-off between precision and recall. As mentioned in Section 2.1, the learner runnin</context>
</contexts>
<marker>Riloff, 1996</marker>
<rawString>E. Riloff. 1996. Automatically generating extraction patterns from untagged text. In Proc. 13th Natl. Conf. on AI (AAAI-96).</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Strzalkowski</author>
<author>J Wang</author>
</authors>
<title>A self-learning universal concept spotter.</title>
<date>1996</date>
<booktitle>In Proc. 16th Intl. Conf. Computational Linguistics (COLING-96),</booktitle>
<location>Copenhagen.</location>
<contexts>
<context position="7794" citStr="Strzalkowski and Wang, 1996" startWordPosition="1258" endWordPosition="1261">knowledge for NL understanding, in particular in the context of IE. A typical architecture for an IE system includes knowledge bases (KBs), which must be customized when the system is ported to new domains. The KBs cover different levels, viz. a lexicon, a semantic conceptual hierarchy, a set of patterns, a set of inference rules, a set of logical representations for objects in the domain. Each KB can be expected to be domain-specific, to a greater or lesser degree. Among the research that deals with automatic acquisition of knowledge from text, the following are particularly relevant to us. (Strzalkowski and Wang, 1996) proposed a method for learning concepts belonging to a given semantic class. (Riloff and Jones, 1999; Riloff, 1996; Yangarber et al., 2000) present different combinations of learners of patterns and concept classes specifically for IE. In (Riloff, 1996) the system AutoSlog-TS learns patterns for filling an individual slot in an event template, while simultaneously acquiring a set of lexical elements/concepts eligible to fill the slot. AutoSlogTS, does not require a pre-annotated corpus, but does require one that has been split into subsets that are relevant vs. non-relevant subsets to the sce</context>
</contexts>
<marker>Strzalkowski, Wang, 1996</marker>
<rawString>T. Strzalkowski and J. Wang. 1996. A self-learning universal concept spotter. In Proc. 16th Intl. Conf. Computational Linguistics (COLING-96), Copenhagen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Tapanainen</author>
<author>T J¨arvinen</author>
</authors>
<title>A non-projective dependency parser.</title>
<date>1997</date>
<booktitle>In Proc. 5th Conf. Applied Natural Language Processing,</booktitle>
<location>Washington, D.C.</location>
<marker>Tapanainen, J¨arvinen, 1997</marker>
<rawString>P. Tapanainen and T. J¨arvinen. 1997. A non-projective dependency parser. In Proc. 5th Conf. Applied Natural Language Processing, Washington, D.C.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Thelen</author>
<author>E Riloff</author>
</authors>
<title>A bootstrapping method for learning semantic lexicons using extraction pattern contexts.</title>
<date>2002</date>
<booktitle>In Proc. 2002 Conf. Empirical Methods in NLP (EMNLP</booktitle>
<contexts>
<context position="3789" citStr="Thelen and Riloff, 2002" startWordPosition="590" endWordPosition="593">these algorithms less unsupervised than one would hope. More importantly, this lack makes the algorithms difficult to use in settings where training must be completely automatic, such as in a generalpurpose information extraction system, where the topic may not be known in advance. At the same time, certain unsupervised learning algorithms in other domains exhibit inherently natural stopping criteria. One example is the algorithm for word sense disambiguation in (Yarowsky, 1995). Of particular relevance to our method are the algorithms for semantic classification of names or NPs described in (Thelen and Riloff, 2002; Yangarber et al., 2002). Inspired in part by these algorithms, we introduce the counter-training technique for unsupervised pattern acquisition. The main idea behind countertraining is that several identical simple learners run simultaneously to compete with one another in different domains. This yields an improvement in precision, and most crucially, it provides a natural indication to the learner when to stop learning—namely, once it attempts to wander into territory already claimed by other learners. We review the main features of the underlying unsupervised pattern learner and related wo</context>
<context position="25254" citStr="Thelen and Riloff, 2002" startWordPosition="4031" endWordPosition="4034">objective. Finally, counter-training can be applied to discovering knowledge of other kinds. (Yangarber et al., 2002) presents the same technique successfully applied to learning names of entities of a given semantic class, e.g., diseases or infectious agents.6 The main differences are: a. the data-points in (Yangarber et al., 2002) are instances of names in text (which are to be labeled with their semantic categories), whereas here the data-points are documents; b. the intended product there is a list of categorized names, whereas here the focus is on the patterns that categorize documents. (Thelen and Riloff, 2002) presents a very similar technique, in the same application as the one described in (Yangarber et al., 2002).7 However, (Thelen and Riloff, 2002) did not focus on the issue of convergence, and on leveraging negative categories to achieve or improve convergence. Co-Training The type of learning described in this paper differs from the co-training method, covered, e.g., in (Blum and Mitchell, 1998). In co-training, learning centers on labeling a set of data-points in situations where these data-points have multiple disjoint and redundant views.8 Examples of spaces of such data-points are strings</context>
</contexts>
<marker>Thelen, Riloff, 2002</marker>
<rawString>M. Thelen and E. Riloff. 2002. A bootstrapping method for learning semantic lexicons using extraction pattern contexts. In Proc. 2002 Conf. Empirical Methods in NLP (EMNLP 2002).</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Yangarber</author>
<author>R Grishman</author>
<author>P Tapanainen</author>
<author>S Huttunen</author>
</authors>
<title>Automatic acquisition of domain knowledge for information extraction.</title>
<date>2000</date>
<booktitle>In Proc. 18th Intl. Conf. Computational Linguistics (COLING 2000), Saarbr¨ucken.</booktitle>
<contexts>
<context position="3059" citStr="Yangarber et al., 2000" startWordPosition="475" endWordPosition="478">orpus, the result is a ranked list of patterns, and going down the list produces a curve which trades off precision for recall. Simply put, the unsupervised algorithm does not know when to stop learning. In the absence of a good stopping criterion, the resulting list of patterns must be manually reviewed by a human; otherwise one can set ad-hoc thresholds, e.g., on the number of allowed iterations, as in (Riloff and Jones, 1999), or else to resort to supervised training to determine such thresholds—which is unsatisfactory when our &apos;As described in, e.g., (Riloff, 1996; Riloff and Jones, 1999; Yangarber et al., 2000). goal from the outset is to try to limit supervision. Thus, the lack of natural stopping criteria renders these algorithms less unsupervised than one would hope. More importantly, this lack makes the algorithms difficult to use in settings where training must be completely automatic, such as in a generalpurpose information extraction system, where the topic may not be known in advance. At the same time, certain unsupervised learning algorithms in other domains exhibit inherently natural stopping criteria. One example is the algorithm for word sense disambiguation in (Yarowsky, 1995). Of parti</context>
<context position="6255" citStr="Yangarber et al., 2000" startWordPosition="1000" endWordPosition="1003"> chosen scenario; conversely, relevant documents typically contain more than one good pattern. This duality drives the bootstrapping process. The primary aim of the learning is to train a strong recognizer for ; is embodied in the set of good patterns. However, as a result of training , the procedure also produces the set of documents that it deems relevant to✁—the documents selected by . Evaluation: to evaluate the quality of discovered patterns, (Riloff, 1996) describes a direct evaluation strategy, where precision of the patterns resulting from a given run is established by manual review. (Yangarber et al., 2000) uses an automatic but indirect evaluation of the recognizer : they retrieve a test sub-set from the training corpus and manually judge the relevance of every document in ; one can then obtain standard IR-style recall and precision scores for relative to . In presenting our results, we will discuss both kinds of evaluation. The recall/precision curves produced by the indirect evaluation generally reach some level of recall at which precision begins to drop. This happens because at some point in the learning process the algorithm picks up patterns that are common in , but are not sufficiently s</context>
<context position="7934" citStr="Yangarber et al., 2000" startWordPosition="1281" endWordPosition="1284"> must be customized when the system is ported to new domains. The KBs cover different levels, viz. a lexicon, a semantic conceptual hierarchy, a set of patterns, a set of inference rules, a set of logical representations for objects in the domain. Each KB can be expected to be domain-specific, to a greater or lesser degree. Among the research that deals with automatic acquisition of knowledge from text, the following are particularly relevant to us. (Strzalkowski and Wang, 1996) proposed a method for learning concepts belonging to a given semantic class. (Riloff and Jones, 1999; Riloff, 1996; Yangarber et al., 2000) present different combinations of learners of patterns and concept classes specifically for IE. In (Riloff, 1996) the system AutoSlog-TS learns patterns for filling an individual slot in an event template, while simultaneously acquiring a set of lexical elements/concepts eligible to fill the slot. AutoSlogTS, does not require a pre-annotated corpus, but does require one that has been split into subsets that are relevant vs. non-relevant subsets to the scenario. (Yangarber et al., 2000) attempts to find extraction patterns, without a pre-classified corpus, starting from a set of seed patterns.</context>
<context position="12851" citStr="Yangarber et al., 2000" startWordPosition="2080" endWordPosition="2083">ce: For each document covered by any of the accepted patterns in , recompute the relevance of to the target scenario , . Relevance of is based on the cumulative accuracy of patterns from which match . 5. Repeat: Back to Partition in step 2. The expanded pattern set induces a new relevance distribution on the corpus. Repeat the procedure as long as learning is possible. The formula used for scoring candidate patterns in step 3 is similar to that in (Riloff, 1996): where are documents where matched, and the support is computed as the sum of their relevance: Document relevance is computed as in (Yangarber et al., 2000) where is the set of accepted patterns that match ; this is a rough estimate of the likelihood of relevance of , based on the pattern accuracy measure. Pattern accuracy, or precision, is given by the average relevance of the documents matched by : Equation 1 can therefore be written simply as: 3.3 Counter-Training The two terms in Equation 5 capture the trade-off between precision and recall. As mentioned in Section 2.1, the learner running in isolation will eventually acquire patterns that are too general for the scenario, which will cause it to assign positive relevance to non-relevant docum</context>
<context position="16571" citStr="Yangarber et al., 2000" startWordPosition="2674" endWordPosition="2677">by the seeds are shown in the table.2 The seeds were kept small, and they yielded high precision; it is evident that these scenarios are represented to a varying degree within the corpus. We also introduced an additional “negative” scenario (the row labeled “Don’t care”), seeded with patterns for earnings reports and interest rate fluctuations. The last column shows the number of iterations before learning stopped. A sample of the discovered patterns3 appears in Table 2. For an indirect evaluation of the quality of the learned patterns, we employ the text-filtering evaluation strategy, as in (Yangarber et al., 2000). As a by-product of pattern acquisition, the algorithm acquires a set of relevant documents (more precisely, a distribution of document relevance weights). Rather than inspecting patterns on the-th iteration by hand, we can judge the quality of this pattern set based on the quality of the documents that the patterns match. Viewed as a categorization task on a set of documents, this is similar to the text2Capitalized entries refer to Named Entity classes, and italicized entries refer to small classes of synonyms, containing about 3 words each; e.g., appoint appoint, name, promote. 3The algorit</context>
</contexts>
<marker>Yangarber, Grishman, Tapanainen, Huttunen, 2000</marker>
<rawString>R. Yangarber, R. Grishman, P. Tapanainen, and S. Huttunen. 2000. Automatic acquisition of domain knowledge for information extraction. In Proc. 18th Intl. Conf. Computational Linguistics (COLING 2000), Saarbr¨ucken.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Yangarber</author>
<author>W Lin</author>
<author>R Grishman</author>
</authors>
<title>Unsupervised learning of generalized names.</title>
<date>2002</date>
<booktitle>In Proc. 19th Intl. Conf. Computational Linguistics (COLING 2002),</booktitle>
<location>Taipei.</location>
<contexts>
<context position="3814" citStr="Yangarber et al., 2002" startWordPosition="594" endWordPosition="597">upervised than one would hope. More importantly, this lack makes the algorithms difficult to use in settings where training must be completely automatic, such as in a generalpurpose information extraction system, where the topic may not be known in advance. At the same time, certain unsupervised learning algorithms in other domains exhibit inherently natural stopping criteria. One example is the algorithm for word sense disambiguation in (Yarowsky, 1995). Of particular relevance to our method are the algorithms for semantic classification of names or NPs described in (Thelen and Riloff, 2002; Yangarber et al., 2002). Inspired in part by these algorithms, we introduce the counter-training technique for unsupervised pattern acquisition. The main idea behind countertraining is that several identical simple learners run simultaneously to compete with one another in different domains. This yields an improvement in precision, and most crucially, it provides a natural indication to the learner when to stop learning—namely, once it attempts to wander into territory already claimed by other learners. We review the main features of the underlying unsupervised pattern learner and related work in Section 2. In Secti</context>
<context position="24747" citStr="Yangarber et al., 2002" startWordPosition="3947" endWordPosition="3950">uments initially.5 This enabled them to provide sufficient guidance to the Lawsuit learner to maintain high precision, without inhibiting high recall. The initial part of the curve is difficult to see because it overlaps largely with the Counter curve. However, they diverge substantially toward the end, above the 80% recall mark. We should note that the objective of the proposed methodology is to learn good patterns, and that reaching for the maximal document recall may not necessarily serve the same objective. Finally, counter-training can be applied to discovering knowledge of other kinds. (Yangarber et al., 2002) presents the same technique successfully applied to learning names of entities of a given semantic class, e.g., diseases or infectious agents.6 The main differences are: a. the data-points in (Yangarber et al., 2002) are instances of names in text (which are to be labeled with their semantic categories), whereas here the data-points are documents; b. the intended product there is a list of categorized names, whereas here the focus is on the patterns that categorize documents. (Thelen and Riloff, 2002) presents a very similar technique, in the same application as the one described in (Yangarbe</context>
</contexts>
<marker>Yangarber, Lin, Grishman, 2002</marker>
<rawString>R. Yangarber, W. Lin, and R. Grishman. 2002. Unsupervised learning of generalized names. In Proc. 19th Intl. Conf. Computational Linguistics (COLING 2002), Taipei.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Yarowsky</author>
</authors>
<title>Unsupervised word sense disambiguation rivaling supervised methods.</title>
<date>1995</date>
<booktitle>In Proc. 33rd Annual Meeting ofACL,</booktitle>
<location>Cambridge, MA.</location>
<contexts>
<context position="3649" citStr="Yarowsky, 1995" startWordPosition="569" endWordPosition="570">; Yangarber et al., 2000). goal from the outset is to try to limit supervision. Thus, the lack of natural stopping criteria renders these algorithms less unsupervised than one would hope. More importantly, this lack makes the algorithms difficult to use in settings where training must be completely automatic, such as in a generalpurpose information extraction system, where the topic may not be known in advance. At the same time, certain unsupervised learning algorithms in other domains exhibit inherently natural stopping criteria. One example is the algorithm for word sense disambiguation in (Yarowsky, 1995). Of particular relevance to our method are the algorithms for semantic classification of names or NPs described in (Thelen and Riloff, 2002; Yangarber et al., 2002). Inspired in part by these algorithms, we introduce the counter-training technique for unsupervised pattern acquisition. The main idea behind countertraining is that several identical simple learners run simultaneously to compete with one another in different domains. This yields an improvement in precision, and most crucially, it provides a natural indication to the learner when to stop learning—namely, once it attempts to wander</context>
</contexts>
<marker>Yarowsky, 1995</marker>
<rawString>D. Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In Proc. 33rd Annual Meeting ofACL, Cambridge, MA.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>