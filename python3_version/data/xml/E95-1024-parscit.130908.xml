<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000549">
<title confidence="0.997088">
Off-line Optimization for Earley-style HPSG Processing
</title>
<author confidence="0.994458">
Guido Minnen, Dale Gerdemann, Thilo Giitz *
</author>
<affiliation confidence="0.8259905">
Sonderforschungsbereich 340
University of Tübingen
</affiliation>
<address confidence="0.463289">
Wilhelmstr. 113
72074-Tiibingen
Germany
</address>
<email confidence="0.912559">
E-mail: minnenOsfs.nphil.uni-tuebingen.de
</email>
<sectionHeader confidence="0.998045" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999994692307692">
A novel approach to HPSG based natural
language processing is described that uses
an off-line compiler to automatically prime
a declarative grammar for generation or
parsing, and inputs the primed grammar to
an advanced Earley-style processor. This
way we provide an elegant solution to the
problems with empty heads and efficient
bidirectional processing which is illustrated
for the special case of HPSG generation. Ex-
tensive testing with a large HPSG grammar
revealed some important constraints on the
form of the grammar.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.992677971830986">
Bidirectionality of grammar is a research topic in
natural language processing that is enjoying increas-
ing attention (Strzalkowski, 1993a). This is mainly
due to the clear theoretical and practical advantages
of bidirectional grammar use (see, among others,
Appelt, 1987). We address this topic in describing
a novel approach to HPSG (Pollard and Sag, 1994)
based language processing that uses an off-line com-
piler to automatically prime a declarative grammar
for generation or parsing, and hands the primed
grammar to an advanced Earley processor. The de-
veloped techniques are direction independent in the
sense that they can be used for both generation and
parsing with HPSG grammars. In this paper, we fo-
cus on the application of the developed techniques
in the context of the comparatively neglected area
of HPSG generation.
Shieber (1988) gave the first use of Earley&apos;s al-
gorithm for generation, but this algorithm does not
*The presented research was sponsored by Teilpro-
jekt B4 &amp;quot;Constraints on Grammar for Efficient Genera-
tion&amp;quot; of the Sonderforschungsbereich 340 &amp;quot;Sprachtheo-
retische Grundlagen fiir die Computerlinguistik&amp;quot; of the
Deutsche Forschungsgemeinschaft. The authors wish to
thank Paul King, Detmar Meurers and Shuly Wintner
for valuable comments and discussion. Of course, the
authors are responsible for all remaining errors.
use the prediction step to restrict feature instantia-
tions on the predicted phrases, and thus lacks goal-
directedness. Though Gerdemann (1991) showed
how to modify the restriction function to make top-
down information available for the bottom-up com-
pletion step, Earley generation with top-down pre-
diction still has a problem in that generating the sub-
parts of a construction in the wrong order might lead
to massive nondeterminacy or even nontermination.
Gerdemann (1991) partly overcame this problem by
incorporating a head-driven strategy into Earley&apos;s
algorithm. However, evaluating the head of a con-
struction prior to its dependent subparts still suffers
from efficiency problems when the head of a con-
struction is either missing, displaced or underspec-
ified. Furthermore, Martinovie and Strzalkowski
(1992) and others have observed that a simple head-
first reordering of the grammar rules may still make
insufficient restricting information available for gen-
eration unless the form of the grammar is restricted
to unary or binary rules.
Strzalkowski&apos;s Essential Arguments Approach
(EAA; 1993b) is a top-down approach to generation
and parsing with logic grammars that uses off-line
compilation to automatically invert parser-oriented
logic grammars. The inversion process consists of
both the automatic static reordering of nodes in
the grammar, and the interchanging of arguments in
rules with recursively defined heads. It is based on
the notion of essential arguments, arguments which
must be instantiated to ensure the efficient and ter-
minating execution of a node. Minnen et al. (1995)
observe that the EAA is computationally infeasible,
because it demands the investigation of almost all
possible permutations of a grammar. Moreover,
the interchanging of arguments in recursive proce-
dures as proposed by Strzalkowski fails to guarantee
that input and output grammars are semantically
equivalent. The Direct Inversion Approach (DIA) of
Minnen et al. (1995) overcomes these problems by
making the reordering process more goal-directed
and developing a reformulation technique that al-
lows the successful treatment of rules which exhibit
head-recursion. Both the EAA and the DIA were
</bodyText>
<page confidence="0.998284">
173
</page>
<bodyText confidence="0.999923916666667">
presented as approaches to the inversion of parser-
oriented grammars into grammars suitable for gen-
eration. However, both approaches can just as well
take a declarative grammar specification as input to
produce generator and/or parser-oriented grammars
as in Dymetman et al. (1990). In this paper we
adopt the latter theoretically more interesting per-
spective.
We developed a compiler for off-line optimization
of phrase structure rule-based typed feature struc-
ture grammars which generalizes the techniques de-
veloped in the context of the DIA, and we advanced
a typed extension of the Earley-style generator of
Gerdemann (1991). Off-line compilation (section 3)
is used to produce grammars for the Earley-style
generator (section 2). We show that our use of off-
line grammar optimization overcomes problems with
empty or displaced heads. The developed techniques
are extensively tested with a large HPSG grammar for
partial VP topicalization in German (Hinrichs et al.,
1994). This uncovered some important constraints
on the form of the phrase structure rules (phrase
structure rules) in a grammar imposed by the com-
piler (section 4).
</bodyText>
<sectionHeader confidence="0.909478" genericHeader="method">
2 Advanced Earley Generation
</sectionHeader>
<bodyText confidence="0.99998365625">
As Shieber (1988) noted, the main shortcoming of
Earley generation is a lack of goal-directedness that
results in a proliferation of edges. Gerdemann (1991)
tackled this shortcoming by modifying the restric-
tion function to make top-down information avail-
able for the bottom-up completion step. Gerde-
mann&apos;s generator follows a head-driven strategy in
order to avoid inefficient evaluation orders. More
specifically, the head of the right-hand side of each
grammar rule is distinguished, and distinguished
categories are scanned or predicted upon first. The
resulting evaluation strategy is similar to that of the
head-corner approach (Shieber et al., 1990; Gerde-
mann and Hinrichs, in press): prediction follows
the main flow of semantic information until a lex-
ical pivot is reached, and only then are the head-
dependent subparts of the construction built up in
a bottom-up fashion. This mixture of top-down and
bottom-up information flow is crucial since the top-
down semantic information from the goal category
must be integrated with the bottom-up subcatego-
rization information from the lexicon. A strict top-
down evaluation strategy suffers from what may be
called head-recursion, i.e. the generation analog of
left recursion in parsing. Shieber et al. (1990) show
that a top-down evaluation strategy will fail for rules
such as VP -+ VP x, irrespective of the order of eval-
uation of the right-hand side categories in the rule.
By combining the off-line optimization process with
a mixed bottom-up/top-down evaluation strategy,
we can refrain from a complete reformulation of the
grammar as, for example, in Minnen et al. (1995).
</bodyText>
<subsectionHeader confidence="0.974807">
2.1 Optimizations
</subsectionHeader>
<bodyText confidence="0.9997594">
We further improved a typed extension of Gerde-
ms,nn&apos;s Earley generator with a number of tech-
niques that reduce the number of edges created dur-
ing generation. Three optimizations were especially
helpful. The first supplies each edge in the chart
with two indices, a backward index pointing to the
state in the chart that the edge is predicted from,
and a forward index pointing to the states that are
predicted from the edge. By matching forward and
backward indices, the edges that must be combined
for completion can be located faster. This index-
ing technique, as illustrated below, improves upon
the more complex indices in Gerdemann (1991) and
is closely related to oLDT-resolution (Tamaki and
Sato, 1986).
</bodyText>
<listItem confidence="0.9921315">
1) active(Xo Xi• X2, 1,2
•
</listItem>
<equation confidence="0.808268333333333">
2) active(X2 • Y1 Y2) 3)
3) adiVe(X2 —&gt; Y1 • Y2, 2,4)
4) passive(X2 Y1 Y2., 2)
</equation>
<bodyText confidence="0.999897478260869">
Active edge 2 resulted from active edge 1 through
prediction. The backward index of edge 2 is there-
fore identified with the forward index of edge 1.
Completion of an active edge results in an edge with
identical backward index. In the case of our exam-
ple, this would be the steps from edge 2 to edge 3
and edge 3 to edge 4. As nothing gets predicted
from a passive edge (4), it does not have a forward
index. In order to use passive edge 4 for completion
of an active edge, we only need to consider those
edges which have a forward index identical to the
backward index of 4.
The second optimization creates a table of the cat-
egories which have been used to make predictions
from. As discussed in Gerdemann (1991), such a ta-
ble can be used to avoid redundant predictions with-
out a full and expensive subsumption test. The third
indexes lexical entries which is necessary to obtain
constant-time lexical access.
The optimizations of our Earley-generator lead
to significant gains in efficiency. However, despite
these heuristic improvements, the problem of goal-
directedness is not solved.
</bodyText>
<subsectionHeader confidence="0.993661">
2.2 Empty Heads
</subsectionHeader>
<bodyText confidence="0.999994714285714">
Empty or displaced heads present the principal goal-
directedness problem for any head-driven generation
approach (Shieber et al., 1990; KOnig, 1994; Gerde-
mann and Hinrichs, in press), where empty head
refers not just to a construction in which the head
has an empty phonology, but to any construction
in which the head is partially unspecified. Since
</bodyText>
<page confidence="0.990777">
174
</page>
<bodyText confidence="0.999911">
phonology does not guide generation, the phonologi-
cal realization of the head of a construction plays no
part in the generation of that construction. To bet-
ter illustrate the problem that underspecified heads
pose, consider the sentence:
</bodyText>
<subsubsectionHeader confidence="0.474749">
Hat Karl Marie gelviifli?
</subsubsectionHeader>
<bodyText confidence="0.993252392857143">
Has Karl Marie kissed?
&amp;quot;Did Karl kiss Mary?&amp;quot;
for which we adopt the argument composition anal-
ysis presented in Hinrichs and Nakazawa (1989): the
subcat list of the auxiliary verb is partially instan-
tiated in the lexicon and only becomes fully instan-
tiated upon its combination with its verbal comple-
ment, the main verb. The phrase structure rule that
describes this construction is 1
Though a head-driven generator must generate first
the head of the rule, nothing prescribes the order of
generation of the complements of the head. If the
generator generates second the main verb then the
subcat list of the main verb instantiates the subcat
list of the head, and generation becomes a deter-
ministic procedure in which complements are gener-
ated in sequence. However, if the generator gener-
ates second some complement other than the main
verb, then the subcat list of the head contains no
restricting information to guide deterministic gener-
ation, and generation becomes a generate-and-test
procedure in which complements are generated at
random, only to be eliminated by further unifica-
tions. Clearly then, the order of evaluation of the
complements in a rule can profoundly influence the
efficiency of generation, and an efficient head-driven
generator must order the evaluation of the comple-
ments in a rule accordingly.
</bodyText>
<subsectionHeader confidence="0.994268">
2.3 Off-line versus On-line
</subsectionHeader>
<bodyText confidence="0.999755923076923">
Dynamic, on-line reordering can solve the ordering
problem discussed in the previous subsection, but is
rather unattractive: interpreting grammar rules at
&apos;For expository reasons, we refrain from a division
between the subject and the other complements of a
verb as in chapter 9 of Pollard and Sag (1994). The
test-grammar does make this division and always guar-
antees the correct order of the complements on the comps
list with respect to the obliqueness hierarchy. Further-
more, we use abbreviations of paths, such as cord for
synsendlocicont, and assume that the semantics princi-
ple is encoded in the phrase structure rule.
run time creates much overhead, and locally deter-
mining the optimal evaluation order is often impos-
sible. Goal-freezing can also overcome the ordering
problem, but is equally unappealing: goal-freezing
is computationally expensive, it demands the proce-
dural annotation of an otherwise declarative gram-
mar specification, and it presupposes that a gram-
mar writer possesses substantial computational pro-
cessing expertise. We chose instead to deal with the
ordering problem by using off-line compilation to au-
tomatically optimize a grammar such that it can be
used for generation, without additional provision for
dealing with the evaluation order, by our Earley gen-
erator.
</bodyText>
<sectionHeader confidence="0.99709" genericHeader="method">
3 Off-line Grammar Optimization
</sectionHeader>
<bodyText confidence="0.999985108108108">
Our off-line grammar optimization is based on a gen-
eralization of the dataflow analysis employed in the
DIA to a dataflow analysis for typed feature struc-
ture grammars. This dataflow analysis takes as in-
put a specification of the paths of the start category
that are considered fully instantiated. In case of
generation, this means that the user annotates the
path specifying the logical form, i.e., the path cont
(or some of its subpaths), as bound. We use the
type hierarchy and an extension of the unification
and generalization operations such that path anno-
tations are preserved, to determine the flow of (se-
mantic) information between the rules and the lexical
entries in a grammar. Structure sharing determines
the dataflow within the rules of the grammar.
The dataflow analysis is used to determine the rel-
ative efficiency of a particular evaluation order of
the right-hand side categories in a phrase structure
rule by computing the maximal degree of nondeter-
minacy introduced by the evaluation of each of these
categories. The maximal degree of nondeterminacy
introduced by a right-hand side category equals the
maximal number of rules and/or lexical entries with
which this category unifies given its binding anno-
tations. The optimal evaluation order of the right-
hand side categories is found by comparing the max-
imal degree of nondeterminacy introduced by the
evaluation of the individual categories with the de-
gree of nondeterminacy the grammar is allowed to
introduce: if the degree of nondeterminacy intro-
duced by the evaluation of one of the right-hand side
categories in a rule exceeds the admissible degree
of nondeterminacy the ordering at hand is rejected.
The degree of nondeterminacy the grammar is al-
lowed to introduce is originally set to one and con-
secutively incremented until the optimal evaluation
order for all rules in the grammar is found.
</bodyText>
<subsectionHeader confidence="0.986298">
3.1 Example
</subsectionHeader>
<bodyText confidence="0.999904333333333">
The compilation process is illustrated on the basis
of the phrase structure rule for argument composi-
tion discussed in 2.2. Space limitations force us to
</bodyText>
<figure confidence="0.998934714285714">
[cat
subcat
cont
El
cat
fin
s
aux —
cat
fin
aux El El, El
subcat El
cont El
El &gt;1
</figure>
<page confidence="0.989582">
175
</page>
<bodyText confidence="0.997112785714286">
abstract over the recursive optimization of the rules
defining the right-hand side categories through con-
sidering only the defining lexical entries.
Unifying the user annotated start category with
the left-hand side of this phrase structure rule leads
to the annotation of the path specifying the logical
form of the construction as bound (see below). As a
result of the structure-sharing between the left-hand
side of the rule and the auxiliary verb category, the
cont-value of the auxiliary verb can be treated as
bound, as well. In addition, the paths with a value
of a maximal specific type for which there are no
appropriate features specified, for example, the path
cat, can be considered bound:
</bodyText>
<table confidence="0.869391">
Catbound V El [at bou nd
finbound PI ID) firibon
aUXbound ud
subcat allXbound
contbound subcat
■•■
</table>
<bodyText confidence="0.921692325581396">
On the basis of this annotated rule, we investigate
the lexical entries defining its right-hand side cate-
gories. The auxiliary verb category is unified with
its defining lexical entries (under preservation of the
binding annotations). The following is an example
of such a lexical entry. (Note that subpaths of a path
marked as bound are considered bound too.)
phon hat
catbound v
finbound
auxbou„d
subcat ([contbo.na PI])
contb.und I nucieusbound Iargbound
The binding annotations of the lexical entries defin-
ing the auxiliary verb are used to determine with
how many lexical entries the right-hand side cate-
gory of the rule maximally unifies, i.e., its maximal
degree of nondeterminacy. In this case, the maxi-
mal degree of nondeterminacy that the evaluation
of the auxiliary verb introduces is very low as the
logical form of the auxiliary verb is considered fully
instantiated. Now we mark the paths of the defining
lexical entries whose instantiation can be deduced
from the type hierarchy. To mimic the evaluation
of the auxiliary verb, we determine the information
common to all defining lexical entries by taking their
generalization, i.e., the most specific feature struc-
ture subsuming all, and unify the result with the
original right-hand side category in the phrase struc-
ture rule. Because both the generalization and the
unification operations preserve binding annotations,
this leads (via structure-sharing) to the annotation
that the logical form of the verbal complement can
be considered instantiated. Note that the nonver-
bal complements do not become further instantiated.
By subsequent investigation of the maximal degree
of nondeterminacy introduced by the evaluation of
the complements in various permutations, we find
that the logical form of a sentence only restricts the
evaluation of the nonverbal complements after the
evaluation of the verbal complement. This can be
verified on the basis of a sample lexical entry for a
main verb.
</bodyText>
<figure confidence="0.83253552631579">
phon lieben
cat
fin
aux
subcat ([cont
cont I nucleus [lover
loved El]
evaluation leads our
The relative efficiency of this
compiler to choose
[cat
v
subcat () —,
cant 0
[
cat
fin
aux
subcat
</figure>
<bodyText confidence="0.999135">
as the optimal evaluation order of our phrase struc-
ture rule for argument composition.
</bodyText>
<subsectionHeader confidence="0.999978">
3.2 Processing Head
</subsectionHeader>
<bodyText confidence="0.930472875">
The optimal evaluation order for a phrase structure
rule need not necessarily be head-first. Our dataflow
analysis treats heads and complements alike, and in-
cludes the head in the calculation of the optimal
evaluation order of a rule. If the evaluation of the
head of a rule introduces much nondeterminacy or
provides insufficient restricting information for the
evaluation of its complements, our dataflow analysis
might not select the head as the first category to be
evaluated, and choose instead
cat
fin
aux
subcat (UI
cont
as the optimal evaluation order. This clearly demon-
strates an extremely important consequence of us-
ing our dataflow analysis to compile a declarative
grammar into a grammar optimized for generation.
Empty or displaced heads pose us no problem, since
the optimal evaluation order of the right-hand side
of a rule is determined regardless of the head. Our
dataflow analysis ignores the grammatical head, but
identifies instead the &apos;processing head&apos;, and (no less
</bodyText>
<figure confidence="0.997297272727273">
[Catbuuud
SllbCatbound
V
COIltbound
,[cont
cat
fin
aux
subcat
cont
go ,1 El
[cat
subcat ]
cont
cat at
fin
El
aux
subcat
V
ni
El
</figure>
<page confidence="0.996414">
176
</page>
<bodyText confidence="0.9993515">
importantly) the &apos;first processing complement&apos;, the
&apos;second processing complement&apos;, and so on.
</bodyText>
<sectionHeader confidence="0.869699" genericHeader="method">
4 Constraints on Grammar
</sectionHeader>
<bodyText confidence="0.9998676">
Our Earley generator and the described compiler
for off-line grammar optimization have been exten-
sively tested with a large HPSG grammar. This test-
grammar is based on the implementation of an anal-
ysis of partial VP topicalization in German (Hinrichs
et al., 1994) in the Troll system (Gerdemann and
King, 1994). Testing the developed techniques un-
covered important constraints on the form of the
phrase structure rules in a grammar imposed by the
compiler.
</bodyText>
<subsectionHeader confidence="0.996696">
4.1 Complement Displacement
</subsectionHeader>
<bodyText confidence="0.999992837837838">
The compiler is not able to find an evaluation or-
der such that the Earley generator has sufficient re-
stricting information to generate all subparts of the
construction efficiently in particular cases of comple-
ment displacement. More specifically, this problem
arises when a complement receives essential restrict-
ing information from the head of the construction
from which it has been extracted, while, at the same
time, it provides essential restricting information for
the complements that stayed behind. Such a case is
represented schematically in figure 1 (see next page).
The first processing complement (c 1) of the head
(H) has been displaced. This is problematic in case
c 1 provides essential bindings for the successful eval-
uation of the complement c2. cl can not be evalu-
ated prior to the head and once H is evaluated it
is no longer possible to evaluate c 1 prior to c2.
An example of problematic complement displace-
ment taken from our test-grammar is given in fig-
ure 2 (see next page). The topicalized partial VP
&amp;quot;Anna lieben&amp;quot; receives its restricting semantic infor-
mation from the auxiliary verb and upon its eval-
uation provides essential bindings not only for the
direct object, but also for the subject that stayed
behind in the Mittelfeld together with the auxiliary
verb. These mutual dependencies between the sub-
constituents of two different local trees lead either
to the unrestricted generation of the partial VP, or
to the unrestricted generation of the subject in the
Mittelfeld. We handled this problem by partial exe-
cution (Pereira and Shieber, 1987) of the filler-head
rule. This allows the evaluation of the filler right
after the evaluation of the auxiliary verb, but prior
to the subject. A head-driven generator has to rely
on a similar solution, as it will not be able to find a
successful ordering for the local trees either, simply
because it does not exist.
</bodyText>
<subsectionHeader confidence="0.968006">
4.2 Generalization
</subsectionHeader>
<bodyText confidence="0.999775428571429">
A potential problem for our approach constitutes
the requirement that the phrase structure rules in
the grammar need to have a particular degree of
specificity for the generalization operation to be
used successfully to mimic its evaluation. This is
best illustrated on the basis of the following, more
&apos;schematic&apos;, phrase structure rule:
</bodyText>
<equation confidence="0.77895075">
[cat v
subcat —
[fin
cat subcat (i) j&apos;
</equation>
<bodyText confidence="0.999859275862069">
Underspecificat on of the head of the rule allows it to
unify with both finite auxiliaries and finite ditransi-
tive main verbs. In combination with the underspec-
ification of the complements, this allows the rule not
only to be used for argument composition construc-
tions, as discussed above, but also for constructions
in which a finite main verb becomes saturated. This
means that the logical form of the nonverbal com-
plements (U and Eil) becomes available either upon
the evaluation of the complement tagged j (in case
of argument composition), or upon the evaluation
of the finite verb (in case the head of the rule is
a ditransitive main verb). As a result, the use of
generalization does not suffice to mimic the evalua-
tion of the respective right-hand side categories. Be-
cause both verbal categories have defining lexical en-
tries which do not instantiate the logical form of the
nonverbal arguments, the dataflow analysis leads to
the conclusion that the logical form of the nonver-
bal complements never becomes instantiated. This
causes the rejection of all possible evaluation orders
for this rule, as the evaluation of an unrestricted non-
verbal complement clearly exceeds the allowed max-
imal degree of nondeterminacy of the grammar. We
are therefore forced to split this schematic phrase
structure rule into two more specific rules at least
during the optimization process. It is important to
note that this is a consequence of a general limita-
tion of dataflow analysis (see also Mellish, 1981).
</bodyText>
<sectionHeader confidence="0.991756" genericHeader="conclusions">
5 Concluding Remarks
</sectionHeader>
<bodyText confidence="0.999873421052632">
An innovative approach to HPSG processing is de-
scribed that uses an off-line compiler to automat-
ically prime a declarative grammar for generation
or parsing, and inputs the primed grammar to an
advanced Earley processor. Our off-line compiler
extends the techniques developed in the context of
the DIA in that it compiles typed feature struc-
ture grammars, rather than simple logic grammars.
The approach allows efficient bidirectional process-
ing with similar generation and parsing times. It
is shown that combining off-line techniques with an
advanced Earley-style generator provides an elegant
solution to the general problem that empty or dis-
placed heads pose for conventional head-driven gen-
eration.
The developed off-line compilation techniques
make crucial use of the fundamental properties of the
HPSG formalism. The monostratal, uniform treat-
ment of syntax, semantics and phonology supports
</bodyText>
<figure confidence="0.9524052">
El
cont
cont
177
C2
</figure>
<figureCaption confidence="0.999766">
Figure 1: Complement displacement.
</figureCaption>
<figure confidence="0.958297580645161">
cont I nucleus I arg nucleus
[at cat v
sub
[lover karl&apos;
&apos;loved anna&apos;
cat v
inv
subcat
slash { n}
cont
[at v
subcat ()
cora
El
&apos;cat cat
fin fin
aux
aux
subcat [cat [at subcat
case nod , case acc
slash {} cont Ii cont slash
lover cont
cora nucleus {loved
v
+
(n)
°I
n I nucleus I arg
Anna lieben wird Karl.
Anna love will Karl.
&amp;quot;Karl will love Anna&amp;quot;
</figure>
<figureCaption confidence="0.984624">
Figure 2: Example of problematic complement displacement.
</figureCaption>
<page confidence="0.991443">
178
</page>
<bodyText confidence="0.999924875">
dataflow analysis, which is used extensively to pro-
vide the information upon which off-line compilation
is based. Our compiler uses the type hierarchy to de-
termine paths with a value of a minimal type with-
out appropriate features as bound. However, the
equivalent of this kind of minimal types in untyped
feature structure grammars are constants which can
be used in a similar fashion for off-line optimization.
</bodyText>
<sectionHeader confidence="0.99842" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.991380253521127">
Appelt, Douglas. 1987. Bidirectional Grammars
and the Design of Natural Language Generation
Systems. In Proceedings of TINLAP-3, Las Cruces,
New Mexico, USA.
Dymetman, Marc; Pierre Isabelle and Francois
Perrault. 1990. A Symmetrical Approach to Pars-
ing and Generation. In Proceedings of c0LING-90,
Helsinki, Finland.
Gerdemann, Dale. 1991. Parsing and Generation
of Unification Grammars. Doctoral dissertation.
University of Illinois. Published as Beckman Insti-
tute Cognitive Science technical report, number
cs-91-06. Urbana-Champaign, Illinois, USA.
Gerdemann, Dale and Erhard Hinrichs. in press.
Some Open Problems in Head-driven Genera-
tion. In Linguistics and Computation. CSLI Lec-
ture Notes. Stanford, California, USA.
Gerdemann, Dale and Paul King. 1994. The Correct
and Efficient Implementation of Appropriateness
Specifications for Typed Feature Structures. In
Proceedings of coLING-94, Kyoto, Japan.
Hinrichs, Erhard and Tsuneko Nakazawa. 1989.
Subcategorization and VP Structure in German.
Paper presented to the &apos;3rd Symposium on Ger-
manic Linguistics&apos; at Purdue University. Pub-
lished as SFB 340 technical report. Tubingen, Ger-
many.
Hinrichs, Erhard; Detmar Meurers and Tsuneko
Nakazawa. 1994. Partial VP and Split NP Top-
icalization in German: An HPSG Analysis and its
Implementation. SFB 340 technical report nr. 58.
Tübingen, Germany. _
KOnig, Esther. 1994. Syntactic-Head-Driven Gener-
ation. In Proceedings of coLING-94. Kyoto, Japan
MartinoviC, Miroslav and Tomek Strzalkowski.
1992. Comparing Two Grammar-based Genera-
tion Algorithms: A Case Study. In Proceedings of
ACL-92, Newark, Delaware, USA.
Mellish, Chris. 1981. The Automatic Generation of
Mode Declarations for Prolog Programs. In Pro-
ceedings of the Workshop on Logic Programming
and Intelligent Systems, Los Angeles, California,
USA.
Minnen, Guido; Dale Gerdemann and Erhard
Hinrichs. 1995. Direct Automated Inversion of
Logic Grammars. In New Generation Computing,
volume 13, number 2.
Pereira, Fernando and Stuart Shieber. 1987. Pro-
log and Natural Language Analysis. CSLI Lecture
Notes, number 10. Stanford, California, USA.
Pollard, Carl and Ivan Sag. 1994. Head-
driven Phrase Structure Grammar. University of
Chicago Press, Chicago, Illinois, USA.
Shieber, Stuart. 1988. A Uniform Architecture
for Parsing and Generation. In Proceedings of
COLING-88. Budapest, Hungary.
Shieber, Stuart; Gertjan van Noord; Fernando
Pereira and Robert Moore. 1990. Semantic Head-
Driven Generation. In Computational Linguistics,
volume 16, number 1.
Strzalkowski, Tomek (editor). 1993a. Re-
versible Grammar in Natural Language Process-
ing. Kluwer Academic Publishers, Dordrecht, The
Netherlands.
Strzalkowski, Tomek. 1993b. A General Com-
putational Method for Grammar Inversion. In
Strzalkowski 1993a.
Tamaki, Hisao and Taisuke Sato 1986. OLD Resolu-
tion with Tabulation. In Proceedings of the Third
International Conference on Logic Programming.
Berlin, Germany
</reference>
<page confidence="0.998773">
179
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.178104">
<title confidence="0.999659">Off-line Optimization for Earley-style HPSG Processing</title>
<author confidence="0.933621">Guido Minnen</author>
<author confidence="0.933621">Dale Gerdemann</author>
<author confidence="0.933621">Thilo Giitz</author>
<affiliation confidence="0.7235685">Sonderforschungsbereich 340 University of Tübingen</affiliation>
<address confidence="0.750135333333333">Wilhelmstr. 113 72074-Tiibingen Germany</address>
<email confidence="0.999729">E-mail:minnenOsfs.nphil.uni-tuebingen.de</email>
<abstract confidence="0.998676214285714">novel approach to natural language processing is described that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and inputs the primed grammar to an advanced Earley-style processor. This way we provide an elegant solution to the problems with empty heads and efficient bidirectional processing which is illustrated the special case of Extesting with a large revealed some important constraints on the form of the grammar.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Douglas Appelt</author>
</authors>
<title>Bidirectional Grammars and the Design of Natural Language Generation Systems.</title>
<date>1987</date>
<booktitle>In Proceedings of TINLAP-3, Las</booktitle>
<location>Cruces, New Mexico, USA.</location>
<contexts>
<context position="1053" citStr="Appelt, 1987" startWordPosition="145" endWordPosition="146">ammar to an advanced Earley-style processor. This way we provide an elegant solution to the problems with empty heads and efficient bidirectional processing which is illustrated for the special case of HPSG generation. Extensive testing with a large HPSG grammar revealed some important constraints on the form of the grammar. 1 Introduction Bidirectionality of grammar is a research topic in natural language processing that is enjoying increasing attention (Strzalkowski, 1993a). This is mainly due to the clear theoretical and practical advantages of bidirectional grammar use (see, among others, Appelt, 1987). We address this topic in describing a novel approach to HPSG (Pollard and Sag, 1994) based language processing that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and hands the primed grammar to an advanced Earley processor. The developed techniques are direction independent in the sense that they can be used for both generation and parsing with HPSG grammars. In this paper, we focus on the application of the developed techniques in the context of the comparatively neglected area of HPSG generation. Shieber (1988) gave the first use of Earle</context>
</contexts>
<marker>Appelt, 1987</marker>
<rawString>Appelt, Douglas. 1987. Bidirectional Grammars and the Design of Natural Language Generation Systems. In Proceedings of TINLAP-3, Las Cruces, New Mexico, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marc Dymetman</author>
<author>Pierre Isabelle</author>
<author>Francois Perrault</author>
</authors>
<title>A Symmetrical Approach to Parsing and Generation.</title>
<date>1990</date>
<booktitle>In Proceedings of c0LING-90,</booktitle>
<location>Helsinki, Finland.</location>
<contexts>
<context position="4598" citStr="Dymetman et al. (1990)" startWordPosition="679" endWordPosition="682">nput and output grammars are semantically equivalent. The Direct Inversion Approach (DIA) of Minnen et al. (1995) overcomes these problems by making the reordering process more goal-directed and developing a reformulation technique that allows the successful treatment of rules which exhibit head-recursion. Both the EAA and the DIA were 173 presented as approaches to the inversion of parseroriented grammars into grammars suitable for generation. However, both approaches can just as well take a declarative grammar specification as input to produce generator and/or parser-oriented grammars as in Dymetman et al. (1990). In this paper we adopt the latter theoretically more interesting perspective. We developed a compiler for off-line optimization of phrase structure rule-based typed feature structure grammars which generalizes the techniques developed in the context of the DIA, and we advanced a typed extension of the Earley-style generator of Gerdemann (1991). Off-line compilation (section 3) is used to produce grammars for the Earley-style generator (section 2). We show that our use of offline grammar optimization overcomes problems with empty or displaced heads. The developed techniques are extensively te</context>
</contexts>
<marker>Dymetman, Isabelle, Perrault, 1990</marker>
<rawString>Dymetman, Marc; Pierre Isabelle and Francois Perrault. 1990. A Symmetrical Approach to Parsing and Generation. In Proceedings of c0LING-90, Helsinki, Finland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dale Gerdemann</author>
</authors>
<title>Parsing and Generation of Unification Grammars. Doctoral dissertation. University of Illinois. Published as Beckman Institute Cognitive Science technical report, number cs-91-06. Urbana-Champaign,</title>
<date>1991</date>
<location>Illinois, USA.</location>
<contexts>
<context position="2266" citStr="Gerdemann (1991)" startWordPosition="331" endWordPosition="332">rley&apos;s algorithm for generation, but this algorithm does not *The presented research was sponsored by Teilprojekt B4 &amp;quot;Constraints on Grammar for Efficient Generation&amp;quot; of the Sonderforschungsbereich 340 &amp;quot;Sprachtheoretische Grundlagen fiir die Computerlinguistik&amp;quot; of the Deutsche Forschungsgemeinschaft. The authors wish to thank Paul King, Detmar Meurers and Shuly Wintner for valuable comments and discussion. Of course, the authors are responsible for all remaining errors. use the prediction step to restrict feature instantiations on the predicted phrases, and thus lacks goaldirectedness. Though Gerdemann (1991) showed how to modify the restriction function to make topdown information available for the bottom-up completion step, Earley generation with top-down prediction still has a problem in that generating the subparts of a construction in the wrong order might lead to massive nondeterminacy or even nontermination. Gerdemann (1991) partly overcame this problem by incorporating a head-driven strategy into Earley&apos;s algorithm. However, evaluating the head of a construction prior to its dependent subparts still suffers from efficiency problems when the head of a construction is either missing, displac</context>
<context position="4945" citStr="Gerdemann (1991)" startWordPosition="734" endWordPosition="735">s approaches to the inversion of parseroriented grammars into grammars suitable for generation. However, both approaches can just as well take a declarative grammar specification as input to produce generator and/or parser-oriented grammars as in Dymetman et al. (1990). In this paper we adopt the latter theoretically more interesting perspective. We developed a compiler for off-line optimization of phrase structure rule-based typed feature structure grammars which generalizes the techniques developed in the context of the DIA, and we advanced a typed extension of the Earley-style generator of Gerdemann (1991). Off-line compilation (section 3) is used to produce grammars for the Earley-style generator (section 2). We show that our use of offline grammar optimization overcomes problems with empty or displaced heads. The developed techniques are extensively tested with a large HPSG grammar for partial VP topicalization in German (Hinrichs et al., 1994). This uncovered some important constraints on the form of the phrase structure rules (phrase structure rules) in a grammar imposed by the compiler (section 4). 2 Advanced Earley Generation As Shieber (1988) noted, the main shortcoming of Earley generat</context>
<context position="7771" citStr="Gerdemann (1991)" startWordPosition="1180" endWordPosition="1181">d extension of Gerdems,nn&apos;s Earley generator with a number of techniques that reduce the number of edges created during generation. Three optimizations were especially helpful. The first supplies each edge in the chart with two indices, a backward index pointing to the state in the chart that the edge is predicted from, and a forward index pointing to the states that are predicted from the edge. By matching forward and backward indices, the edges that must be combined for completion can be located faster. This indexing technique, as illustrated below, improves upon the more complex indices in Gerdemann (1991) and is closely related to oLDT-resolution (Tamaki and Sato, 1986). 1) active(Xo Xi• X2, 1,2 • 2) active(X2 • Y1 Y2) 3) 3) adiVe(X2 —&gt; Y1 • Y2, 2,4) 4) passive(X2 Y1 Y2., 2) Active edge 2 resulted from active edge 1 through prediction. The backward index of edge 2 is therefore identified with the forward index of edge 1. Completion of an active edge results in an edge with identical backward index. In the case of our example, this would be the steps from edge 2 to edge 3 and edge 3 to edge 4. As nothing gets predicted from a passive edge (4), it does not have a forward index. In order to use p</context>
</contexts>
<marker>Gerdemann, 1991</marker>
<rawString>Gerdemann, Dale. 1991. Parsing and Generation of Unification Grammars. Doctoral dissertation. University of Illinois. Published as Beckman Institute Cognitive Science technical report, number cs-91-06. Urbana-Champaign, Illinois, USA.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Dale Gerdemann</author>
<author>Erhard Hinrichs</author>
</authors>
<title>in press. Some Open Problems in Head-driven Generation.</title>
<booktitle>In Linguistics and Computation. CSLI Lecture Notes.</booktitle>
<location>Stanford, California, USA.</location>
<marker>Gerdemann, Hinrichs, </marker>
<rawString>Gerdemann, Dale and Erhard Hinrichs. in press. Some Open Problems in Head-driven Generation. In Linguistics and Computation. CSLI Lecture Notes. Stanford, California, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dale Gerdemann</author>
<author>Paul King</author>
</authors>
<title>The Correct and Efficient Implementation of Appropriateness Specifications for Typed Feature Structures.</title>
<date>1994</date>
<booktitle>In Proceedings of coLING-94,</booktitle>
<location>Kyoto, Japan.</location>
<contexts>
<context position="19074" citStr="Gerdemann and King, 1994" startWordPosition="3019" endWordPosition="3022">ad, but identifies instead the &apos;processing head&apos;, and (no less [Catbuuud SllbCatbound V COIltbound ,[cont cat fin aux subcat cont go ,1 El [cat subcat ] cont cat at fin El aux subcat V ni El 176 importantly) the &apos;first processing complement&apos;, the &apos;second processing complement&apos;, and so on. 4 Constraints on Grammar Our Earley generator and the described compiler for off-line grammar optimization have been extensively tested with a large HPSG grammar. This testgrammar is based on the implementation of an analysis of partial VP topicalization in German (Hinrichs et al., 1994) in the Troll system (Gerdemann and King, 1994). Testing the developed techniques uncovered important constraints on the form of the phrase structure rules in a grammar imposed by the compiler. 4.1 Complement Displacement The compiler is not able to find an evaluation order such that the Earley generator has sufficient restricting information to generate all subparts of the construction efficiently in particular cases of complement displacement. More specifically, this problem arises when a complement receives essential restricting information from the head of the construction from which it has been extracted, while, at the same time, it p</context>
</contexts>
<marker>Gerdemann, King, 1994</marker>
<rawString>Gerdemann, Dale and Paul King. 1994. The Correct and Efficient Implementation of Appropriateness Specifications for Typed Feature Structures. In Proceedings of coLING-94, Kyoto, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Erhard Hinrichs</author>
<author>Tsuneko Nakazawa</author>
</authors>
<title>Subcategorization and VP Structure in German. Paper presented to the &apos;3rd Symposium on Germanic Linguistics&apos; at Purdue University. Published as SFB 340 technical report.</title>
<date>1989</date>
<location>Tubingen, Germany.</location>
<contexts>
<context position="9806" citStr="Hinrichs and Nakazawa (1989)" startWordPosition="1527" endWordPosition="1530">1990; KOnig, 1994; Gerdemann and Hinrichs, in press), where empty head refers not just to a construction in which the head has an empty phonology, but to any construction in which the head is partially unspecified. Since 174 phonology does not guide generation, the phonological realization of the head of a construction plays no part in the generation of that construction. To better illustrate the problem that underspecified heads pose, consider the sentence: Hat Karl Marie gelviifli? Has Karl Marie kissed? &amp;quot;Did Karl kiss Mary?&amp;quot; for which we adopt the argument composition analysis presented in Hinrichs and Nakazawa (1989): the subcat list of the auxiliary verb is partially instantiated in the lexicon and only becomes fully instantiated upon its combination with its verbal complement, the main verb. The phrase structure rule that describes this construction is 1 Though a head-driven generator must generate first the head of the rule, nothing prescribes the order of generation of the complements of the head. If the generator generates second the main verb then the subcat list of the main verb instantiates the subcat list of the head, and generation becomes a deterministic procedure in which complements are gener</context>
</contexts>
<marker>Hinrichs, Nakazawa, 1989</marker>
<rawString>Hinrichs, Erhard and Tsuneko Nakazawa. 1989. Subcategorization and VP Structure in German. Paper presented to the &apos;3rd Symposium on Germanic Linguistics&apos; at Purdue University. Published as SFB 340 technical report. Tubingen, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Erhard Hinrichs</author>
</authors>
<title>Detmar Meurers and Tsuneko Nakazawa.</title>
<date>1994</date>
<booktitle>Partial VP and Split NP Topicalization in German: An HPSG Analysis and its Implementation. SFB 340 technical report nr. 58.</booktitle>
<location>Tübingen, Germany. _</location>
<marker>Hinrichs, 1994</marker>
<rawString>Hinrichs, Erhard; Detmar Meurers and Tsuneko Nakazawa. 1994. Partial VP and Split NP Topicalization in German: An HPSG Analysis and its Implementation. SFB 340 technical report nr. 58. Tübingen, Germany. _</rawString>
</citation>
<citation valid="true">
<authors>
<author>Esther KOnig</author>
</authors>
<title>Syntactic-Head-Driven Generation.</title>
<date>1994</date>
<booktitle>In Proceedings of coLING-94. Kyoto,</booktitle>
<location>Japan</location>
<contexts>
<context position="9195" citStr="KOnig, 1994" startWordPosition="1429" endWordPosition="1430"> have been used to make predictions from. As discussed in Gerdemann (1991), such a table can be used to avoid redundant predictions without a full and expensive subsumption test. The third indexes lexical entries which is necessary to obtain constant-time lexical access. The optimizations of our Earley-generator lead to significant gains in efficiency. However, despite these heuristic improvements, the problem of goaldirectedness is not solved. 2.2 Empty Heads Empty or displaced heads present the principal goaldirectedness problem for any head-driven generation approach (Shieber et al., 1990; KOnig, 1994; Gerdemann and Hinrichs, in press), where empty head refers not just to a construction in which the head has an empty phonology, but to any construction in which the head is partially unspecified. Since 174 phonology does not guide generation, the phonological realization of the head of a construction plays no part in the generation of that construction. To better illustrate the problem that underspecified heads pose, consider the sentence: Hat Karl Marie gelviifli? Has Karl Marie kissed? &amp;quot;Did Karl kiss Mary?&amp;quot; for which we adopt the argument composition analysis presented in Hinrichs and Naka</context>
</contexts>
<marker>KOnig, 1994</marker>
<rawString>KOnig, Esther. 1994. Syntactic-Head-Driven Generation. In Proceedings of coLING-94. Kyoto, Japan</rawString>
</citation>
<citation valid="true">
<authors>
<author>Miroslav MartinoviC</author>
<author>Tomek Strzalkowski</author>
</authors>
<title>Comparing Two Grammar-based Generation Algorithms: A Case Study.</title>
<date>1992</date>
<booktitle>In Proceedings of ACL-92,</booktitle>
<location>Newark, Delaware, USA.</location>
<marker>MartinoviC, Strzalkowski, 1992</marker>
<rawString>MartinoviC, Miroslav and Tomek Strzalkowski. 1992. Comparing Two Grammar-based Generation Algorithms: A Case Study. In Proceedings of ACL-92, Newark, Delaware, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chris Mellish</author>
</authors>
<title>The Automatic Generation of Mode Declarations for Prolog Programs.</title>
<date>1981</date>
<booktitle>In Proceedings of the Workshop on Logic Programming and Intelligent Systems,</booktitle>
<location>Los Angeles, California, USA.</location>
<contexts>
<context position="23039" citStr="Mellish, 1981" startWordPosition="3673" endWordPosition="3674">verbal arguments, the dataflow analysis leads to the conclusion that the logical form of the nonverbal complements never becomes instantiated. This causes the rejection of all possible evaluation orders for this rule, as the evaluation of an unrestricted nonverbal complement clearly exceeds the allowed maximal degree of nondeterminacy of the grammar. We are therefore forced to split this schematic phrase structure rule into two more specific rules at least during the optimization process. It is important to note that this is a consequence of a general limitation of dataflow analysis (see also Mellish, 1981). 5 Concluding Remarks An innovative approach to HPSG processing is described that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and inputs the primed grammar to an advanced Earley processor. Our off-line compiler extends the techniques developed in the context of the DIA in that it compiles typed feature structure grammars, rather than simple logic grammars. The approach allows efficient bidirectional processing with similar generation and parsing times. It is shown that combining off-line techniques with an advanced Earley-style generator p</context>
</contexts>
<marker>Mellish, 1981</marker>
<rawString>Mellish, Chris. 1981. The Automatic Generation of Mode Declarations for Prolog Programs. In Proceedings of the Workshop on Logic Programming and Intelligent Systems, Los Angeles, California, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guido Minnen</author>
<author>Dale Gerdemann</author>
<author>Erhard Hinrichs</author>
</authors>
<title>Direct Automated Inversion of Logic Grammars.</title>
<date>1995</date>
<journal>In New Generation Computing,</journal>
<volume>13</volume>
<contexts>
<context position="3718" citStr="Minnen et al. (1995)" startWordPosition="549" endWordPosition="552">ss the form of the grammar is restricted to unary or binary rules. Strzalkowski&apos;s Essential Arguments Approach (EAA; 1993b) is a top-down approach to generation and parsing with logic grammars that uses off-line compilation to automatically invert parser-oriented logic grammars. The inversion process consists of both the automatic static reordering of nodes in the grammar, and the interchanging of arguments in rules with recursively defined heads. It is based on the notion of essential arguments, arguments which must be instantiated to ensure the efficient and terminating execution of a node. Minnen et al. (1995) observe that the EAA is computationally infeasible, because it demands the investigation of almost all possible permutations of a grammar. Moreover, the interchanging of arguments in recursive procedures as proposed by Strzalkowski fails to guarantee that input and output grammars are semantically equivalent. The Direct Inversion Approach (DIA) of Minnen et al. (1995) overcomes these problems by making the reordering process more goal-directed and developing a reformulation technique that allows the successful treatment of rules which exhibit head-recursion. Both the EAA and the DIA were 173 </context>
<context position="7109" citStr="Minnen et al. (1995)" startWordPosition="1069" endWordPosition="1072">y must be integrated with the bottom-up subcategorization information from the lexicon. A strict topdown evaluation strategy suffers from what may be called head-recursion, i.e. the generation analog of left recursion in parsing. Shieber et al. (1990) show that a top-down evaluation strategy will fail for rules such as VP -+ VP x, irrespective of the order of evaluation of the right-hand side categories in the rule. By combining the off-line optimization process with a mixed bottom-up/top-down evaluation strategy, we can refrain from a complete reformulation of the grammar as, for example, in Minnen et al. (1995). 2.1 Optimizations We further improved a typed extension of Gerdems,nn&apos;s Earley generator with a number of techniques that reduce the number of edges created during generation. Three optimizations were especially helpful. The first supplies each edge in the chart with two indices, a backward index pointing to the state in the chart that the edge is predicted from, and a forward index pointing to the states that are predicted from the edge. By matching forward and backward indices, the edges that must be combined for completion can be located faster. This indexing technique, as illustrated bel</context>
</contexts>
<marker>Minnen, Gerdemann, Hinrichs, 1995</marker>
<rawString>Minnen, Guido; Dale Gerdemann and Erhard Hinrichs. 1995. Direct Automated Inversion of Logic Grammars. In New Generation Computing, volume 13, number 2.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fernando Pereira</author>
<author>Stuart Shieber</author>
</authors>
<title>Prolog and Natural Language Analysis.</title>
<date>1987</date>
<booktitle>CSLI Lecture Notes, number 10.</booktitle>
<location>Stanford, California, USA.</location>
<contexts>
<context position="20824" citStr="Pereira and Shieber, 1987" startWordPosition="3304" endWordPosition="3307">est-grammar is given in figure 2 (see next page). The topicalized partial VP &amp;quot;Anna lieben&amp;quot; receives its restricting semantic information from the auxiliary verb and upon its evaluation provides essential bindings not only for the direct object, but also for the subject that stayed behind in the Mittelfeld together with the auxiliary verb. These mutual dependencies between the subconstituents of two different local trees lead either to the unrestricted generation of the partial VP, or to the unrestricted generation of the subject in the Mittelfeld. We handled this problem by partial execution (Pereira and Shieber, 1987) of the filler-head rule. This allows the evaluation of the filler right after the evaluation of the auxiliary verb, but prior to the subject. A head-driven generator has to rely on a similar solution, as it will not be able to find a successful ordering for the local trees either, simply because it does not exist. 4.2 Generalization A potential problem for our approach constitutes the requirement that the phrase structure rules in the grammar need to have a particular degree of specificity for the generalization operation to be used successfully to mimic its evaluation. This is best illustrat</context>
</contexts>
<marker>Pereira, Shieber, 1987</marker>
<rawString>Pereira, Fernando and Stuart Shieber. 1987. Prolog and Natural Language Analysis. CSLI Lecture Notes, number 10. Stanford, California, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan Sag</author>
</authors>
<title>Headdriven Phrase Structure Grammar.</title>
<date>1994</date>
<publisher>University of Chicago Press,</publisher>
<location>Chicago, Illinois, USA.</location>
<contexts>
<context position="1139" citStr="Pollard and Sag, 1994" startWordPosition="158" endWordPosition="161">olution to the problems with empty heads and efficient bidirectional processing which is illustrated for the special case of HPSG generation. Extensive testing with a large HPSG grammar revealed some important constraints on the form of the grammar. 1 Introduction Bidirectionality of grammar is a research topic in natural language processing that is enjoying increasing attention (Strzalkowski, 1993a). This is mainly due to the clear theoretical and practical advantages of bidirectional grammar use (see, among others, Appelt, 1987). We address this topic in describing a novel approach to HPSG (Pollard and Sag, 1994) based language processing that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and hands the primed grammar to an advanced Earley processor. The developed techniques are direction independent in the sense that they can be used for both generation and parsing with HPSG grammars. In this paper, we focus on the application of the developed techniques in the context of the comparatively neglected area of HPSG generation. Shieber (1988) gave the first use of Earley&apos;s algorithm for generation, but this algorithm does not *The presented research was </context>
<context position="11320" citStr="Pollard and Sag (1994)" startWordPosition="1769" endWordPosition="1772">ed at random, only to be eliminated by further unifications. Clearly then, the order of evaluation of the complements in a rule can profoundly influence the efficiency of generation, and an efficient head-driven generator must order the evaluation of the complements in a rule accordingly. 2.3 Off-line versus On-line Dynamic, on-line reordering can solve the ordering problem discussed in the previous subsection, but is rather unattractive: interpreting grammar rules at &apos;For expository reasons, we refrain from a division between the subject and the other complements of a verb as in chapter 9 of Pollard and Sag (1994). The test-grammar does make this division and always guarantees the correct order of the complements on the comps list with respect to the obliqueness hierarchy. Furthermore, we use abbreviations of paths, such as cord for synsendlocicont, and assume that the semantics principle is encoded in the phrase structure rule. run time creates much overhead, and locally determining the optimal evaluation order is often impossible. Goal-freezing can also overcome the ordering problem, but is equally unappealing: goal-freezing is computationally expensive, it demands the procedural annotation of an oth</context>
</contexts>
<marker>Pollard, Sag, 1994</marker>
<rawString>Pollard, Carl and Ivan Sag. 1994. Headdriven Phrase Structure Grammar. University of Chicago Press, Chicago, Illinois, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
</authors>
<title>A Uniform Architecture for Parsing and Generation.</title>
<date>1988</date>
<booktitle>In Proceedings of COLING-88.</booktitle>
<location>Budapest, Hungary.</location>
<contexts>
<context position="1625" citStr="Shieber (1988)" startWordPosition="238" endWordPosition="239">mmar use (see, among others, Appelt, 1987). We address this topic in describing a novel approach to HPSG (Pollard and Sag, 1994) based language processing that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and hands the primed grammar to an advanced Earley processor. The developed techniques are direction independent in the sense that they can be used for both generation and parsing with HPSG grammars. In this paper, we focus on the application of the developed techniques in the context of the comparatively neglected area of HPSG generation. Shieber (1988) gave the first use of Earley&apos;s algorithm for generation, but this algorithm does not *The presented research was sponsored by Teilprojekt B4 &amp;quot;Constraints on Grammar for Efficient Generation&amp;quot; of the Sonderforschungsbereich 340 &amp;quot;Sprachtheoretische Grundlagen fiir die Computerlinguistik&amp;quot; of the Deutsche Forschungsgemeinschaft. The authors wish to thank Paul King, Detmar Meurers and Shuly Wintner for valuable comments and discussion. Of course, the authors are responsible for all remaining errors. use the prediction step to restrict feature instantiations on the predicted phrases, and thus lacks </context>
<context position="5499" citStr="Shieber (1988)" startWordPosition="820" endWordPosition="821"> extension of the Earley-style generator of Gerdemann (1991). Off-line compilation (section 3) is used to produce grammars for the Earley-style generator (section 2). We show that our use of offline grammar optimization overcomes problems with empty or displaced heads. The developed techniques are extensively tested with a large HPSG grammar for partial VP topicalization in German (Hinrichs et al., 1994). This uncovered some important constraints on the form of the phrase structure rules (phrase structure rules) in a grammar imposed by the compiler (section 4). 2 Advanced Earley Generation As Shieber (1988) noted, the main shortcoming of Earley generation is a lack of goal-directedness that results in a proliferation of edges. Gerdemann (1991) tackled this shortcoming by modifying the restriction function to make top-down information available for the bottom-up completion step. Gerdemann&apos;s generator follows a head-driven strategy in order to avoid inefficient evaluation orders. More specifically, the head of the right-hand side of each grammar rule is distinguished, and distinguished categories are scanned or predicted upon first. The resulting evaluation strategy is similar to that of the head-</context>
</contexts>
<marker>Shieber, 1988</marker>
<rawString>Shieber, Stuart. 1988. A Uniform Architecture for Parsing and Generation. In Proceedings of COLING-88. Budapest, Hungary.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
<author>Gertjan van Noord</author>
<author>Fernando Pereira</author>
<author>Robert Moore</author>
</authors>
<title>Semantic HeadDriven Generation.</title>
<date>1990</date>
<booktitle>In Computational Linguistics,</booktitle>
<volume>16</volume>
<marker>Shieber, van Noord, Pereira, Moore, 1990</marker>
<rawString>Shieber, Stuart; Gertjan van Noord; Fernando Pereira and Robert Moore. 1990. Semantic HeadDriven Generation. In Computational Linguistics, volume 16, number 1.</rawString>
</citation>
<citation valid="false">
<booktitle>1993a. Reversible Grammar in Natural Language Processing.</booktitle>
<editor>Strzalkowski, Tomek (editor).</editor>
<publisher>Kluwer Academic Publishers,</publisher>
<location>Dordrecht, The Netherlands.</location>
<marker></marker>
<rawString>Strzalkowski, Tomek (editor). 1993a. Reversible Grammar in Natural Language Processing. Kluwer Academic Publishers, Dordrecht, The Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tomek Strzalkowski</author>
</authors>
<title>A General Computational Method for Grammar Inversion. In</title>
<date>1993</date>
<location>Strzalkowski</location>
<contexts>
<context position="918" citStr="Strzalkowski, 1993" startWordPosition="125" endWordPosition="126">is described that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and inputs the primed grammar to an advanced Earley-style processor. This way we provide an elegant solution to the problems with empty heads and efficient bidirectional processing which is illustrated for the special case of HPSG generation. Extensive testing with a large HPSG grammar revealed some important constraints on the form of the grammar. 1 Introduction Bidirectionality of grammar is a research topic in natural language processing that is enjoying increasing attention (Strzalkowski, 1993a). This is mainly due to the clear theoretical and practical advantages of bidirectional grammar use (see, among others, Appelt, 1987). We address this topic in describing a novel approach to HPSG (Pollard and Sag, 1994) based language processing that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and hands the primed grammar to an advanced Earley processor. The developed techniques are direction independent in the sense that they can be used for both generation and parsing with HPSG grammars. In this paper, we focus on the application of the</context>
</contexts>
<marker>Strzalkowski, 1993</marker>
<rawString>Strzalkowski, Tomek. 1993b. A General Computational Method for Grammar Inversion. In Strzalkowski 1993a.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tamaki</author>
</authors>
<title>Hisao and Taisuke Sato</title>
<date>1986</date>
<booktitle>In Proceedings of the Third International Conference on Logic Programming.</booktitle>
<location>Berlin, Germany</location>
<marker>Tamaki, 1986</marker>
<rawString>Tamaki, Hisao and Taisuke Sato 1986. OLD Resolution with Tabulation. In Proceedings of the Third International Conference on Logic Programming. Berlin, Germany</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>