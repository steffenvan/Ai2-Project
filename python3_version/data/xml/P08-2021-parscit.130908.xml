<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.017779">
<title confidence="0.9985635">
Machine Translation System Combination
using ITG-based Alignments*
</title>
<author confidence="0.997427">
Damianos Karakos, Jason Eisner, Sanjeev Khudanpur, Markus Dreyer
</author>
<affiliation confidence="0.913572">
Center for Language and Speech Processing
Johns Hopkins University, Baltimore, MD 21218
</affiliation>
<email confidence="0.999463">
{damianos,eisner,khudanpur,dreyer}@jhu.edu
</email>
<sectionHeader confidence="0.998604" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999702666666667">
Given several systems’ automatic translations
of the same sentence, we show how to com-
bine them into a confusion network, whose
various paths represent composite translations
that could be considered in a subsequent
rescoring step. We build our confusion net-
works using the method of Rosti et al. (2007),
but, instead of forming alignments using the
tercom script (Snover et al., 2006), we create
alignments that minimize invWER (Leusch
et al., 2003), a form of edit distance that
permits properly nested block movements of
substrings. Oracle experiments with Chinese
newswire and weblog translations show that
our confusion networks contain paths which
are significantly better (in terms of BLEU and
TER) than those in tercom-based confusion
networks.
</bodyText>
<sectionHeader confidence="0.999472" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999873777777778">
Large improvements in machine translation (MT)
may result from combining different approaches
to MT with mutually complementary strengths.
System-level combination of translation outputs is
a promising path towards such improvements. Yet
there are some significant hurdles in this path. One
must somehow align the multiple outputs—to iden-
tify where different hypotheses reinforce each other
and where they offer alternatives. One must then
</bodyText>
<footnote confidence="0.967836">
&apos;This work was partially supported by the DARPA GALE
program (Contract No HR0011-06-2-0001). Also, we would
like to thank the IBM Rosetta team for the availability of several
MT system outputs.
</footnote>
<page confidence="0.995261">
81
</page>
<bodyText confidence="0.999364352941177">
use this alignment to hypothesize a set of new, com-
posite translations, and select the best composite hy-
pothesis from this set. The alignment step is difficult
because different MT approaches usually reorder the
translated words differently. Training the selection
step is difficult because identifying the best hypothe-
sis (relative to a known reference translation) means
scoring all the composite hypotheses, of which there
may be exponentially many.
Most MT combination methods do create an ex-
ponentially large hypothesis set, representing it as a
confusion network of strings in the target language
(e.g., English). (A confusion network is a lattice
where every node is on every path; i.e., each time
step presents an independent choice among several
phrases. Note that our contributions in this paper
could be applied to arbitrary lattice topologies.) For
example, Bangalore et al. (2001) show how to build
a confusion network following a multistring align-
ment procedure of several MT outputs. The proce-
dure (used primarily in biology, (Thompson et al.,
1994)) yields monotone alignments that minimize
the number of insertions, deletions, and substitu-
tions. Unfortunately, monotone alignments are often
poor, since machine translations (particularly from
different models) can vary significantly in their word
order. Thus, when Matusov et al. (2006) use this
procedure, they deterministically reorder each trans-
lation prior to the monotone alignment.
The procedure described by Rosti et al. (2007)
has been shown to yield significant improvements in
translation quality, and uses an estimate of Trans-
lation Error Rate (TER) to guide the alignment.
(TER is defined as the minimum number of inser-
</bodyText>
<subsubsectionHeader confidence="0.352887">
Proceedings of ACL-08: HLT, Short Papers (Companion Volume), pages 81–84,
</subsubsectionHeader>
<page confidence="0.485766">
Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics
</page>
<bodyText confidence="0.999982533333334">
tions, deletions, substitutions and block shifts be-
tween two strings.) A remarkable feature of that
procedure is that it performs the alignment of the
output translations (i) without any knowledge of the
translation model used to generate the translations,
and (ii) without any knowledge of how the target
words in each translation align back to the source
words. In fact, it only requires a procedure for cre-
ating pairwise alignments of translations that allow
appropriate re-orderings. For this, Rosti et al. (2007)
use the tercom script (Snover et al., 2006), which
uses a number of heuristics (as well as dynamic pro-
gramming) for finding a sequence of edits (inser-
tions, deletions, substitutions and block shifts) that
convert an input string to another. In this paper, we
show that one can build better confusion networks
(in terms of the best translation possible from the
confusion network) when the pairwise alignments
are computed not by tercom, which approximately
minimizes TER, but instead by an exact minimiza-
tion of invWER (Leusch et al., 2003), which is a re-
stricted version of TER that permits only properly
nested sets of block shifts, and can be computed in
polynomial time.
The paper is organized as follows: a summary of
TER, tercom, and invWER, is presented in Section
2. The system combination procedure is summa-
rized in Section 3, while experimental (oracle) re-
sults are presented in Section 4. Conclusions are
given in Section 5.
</bodyText>
<subsectionHeader confidence="0.622241">
2 Comparing tercom and invWER
</subsectionHeader>
<bodyText confidence="0.99977870967742">
The tercom script was created mainly in order to
measure translation quality based on TER. As is
proved by Shapira and Storer (2002), computation
of TER is an NP-complete problem. For this reason,
tercom uses some heuristics in order to compute an
approximation to TER in polynomial time. In the
rest of the paper, we will denote this approximation
as tercomTER, to distinguish it from (the intractable)
TER. The block shifts which are allowed in tercom
have to adhere to the following constraints: (i) A
block that has an exact match cannot be moved, and
(ii) for a block to be moved, it should have an exact
match in its new position. However, this sometimes
leads to counter-intuitive sequences of edits; for in-
stance, for the sentence pair
“thomas jefferson says eat your vegetables”
“eat your cereal thomas edison says”,
tercom finds an edit sequence of cost 5, instead of
the optimum 3. Furthermore, the block selection is
done in a greedy manner, and the final outcome is
dependent on the shift order, even when the above
constraints are imposed.
An alternative to tercom, considered in this pa-
per, is to use the Inversion Transduction Grammar
(ITG) formalism (Wu, 1997) which allows one to
view the problem of alignment as a problem of bilin-
gual parsing. Specifically, ITGs can be used to find
the optimal edit sequence under the restriction that
block moves must be properly nested, like paren-
theses. That is, if an edit sequence swaps adjacent
substrings A and B of the original string, then any
other block move that affects A (or B) must stay
completely within A (or B). An edit sequence with
this restriction corresponds to a synchronous parse
tree under a simple ITG that has one nonterminal
and whose terminal symbols allow insertion, dele-
tion, and substitution.
The minimum-cost ITG tree can be found by dy-
namic programming. This leads to invWER (Leusch
et al., 2003), which is defined as the minimum num-
ber of edits (insertions, deletions, substitutions and
block shifts allowed by the ITG) needed to convert
one string to another. In this paper, the minimum-
invWER alignments are used for generating confu-
sion networks. The alignments are found with a 11-
rule Dyna program (Dyna is an environment that fa-
cilitates the development of dynamic programs—see
(Eisner et al., 2005) for more details). This pro-
gram was further sped up (by about a factor of 2)
with an A* search heuristic computed by additional
code. Specifically, our admissible outside heuris-
tic for aligning two substrings estimated the cost of
aligning the words outside those substrings as if re-
ordering those words were free. This was compli-
cated somewhat by type/token issues and by the fact
that we were aligning (possibly weighted) lattices.
Moreover, the same Dyna program was used for the
computation of the minimum invWER path in these
confusion networks (oracle path), without having to
invoke tercom numerous times to compute the best
sentence in an N-best list.
The two competing alignment procedures were
</bodyText>
<page confidence="0.985788">
82
</page>
<table confidence="0.9998114">
Lang. /Genre tercomTER invWER
Arabic NW 15.1% 14.9%
Arabic WB 26.0% 25.8%
Chinese NW 26.1% 25.6%
Chinese WB 30.9% 30.4%
</table>
<tableCaption confidence="0.990797333333333">
Table 1: Comparison of average per-document ter-
comTER with invWER on the EVAL07 GALE Newswire
(“NW”) and Weblogs (“WB”) data sets.
</tableCaption>
<bodyText confidence="0.999961333333333">
used to estimate the TER between machine transla-
tion system outputs and reference translations. Ta-
ble 1 shows the TER estimates using tercom and
invWER. These were computed on the translations
submitted by a system to NIST for the GALE eval-
uation in June 2007. The references used are the
post-edited translations for that system (i.e., these
are “HTER” approximations). As can be seen from
the table, in all language and genre conditions, in-
vWER gives a better approximation to TER than
tercomTER. In fact, out of the roughly 2000 total
segments in all languages/genres, tercomTER gives
a lower number of edits in only 8 cases! This is a
clear indication that ITGs can explore the space of
string permutations more effectively than tercom.
</bodyText>
<sectionHeader confidence="0.988723" genericHeader="method">
3 The System Combination Approach
</sectionHeader>
<bodyText confidence="0.9744852">
ITG-based alignments and tercom-based alignments
were also compared in oracle experiments involving
confusion networks created through the algorithm of
Rosti et al. (2007). The algorithm entails the follow-
ing steps:
</bodyText>
<listItem confidence="0.991697428571429">
• Computation of all pairwise alignments be-
tween system hypotheses (either using ITGs or
tercom); for each pair, one of the hypotheses
plays the role of the “reference”.
• Selection of a system output as the “skele-
ton” of the confusion network, whose words
are used as anchors for aligning all other ma-
chine translation outputs together. Each arc has
a translation output word as its label, with the
special token “NULL” used to denote an inser-
tion/deletion between the skeleton and another
system output.
• Multiple consecutive words which are inserted
relative to the skeleton form a phrase that gets
</listItem>
<table confidence="0.997980666666667">
Genre CNs with tercom CNs with ITG
NW 50.1% (27.7%) 48.8% (28.3%)
WB 51.0% (25.5%) 50.5% (26.0%)
</table>
<tableCaption confidence="0.94885525">
Table 2: TercomTERs of invWER-oracles and (in paren-
theses) oracle BLEU scores of confusion networks gen-
erated with tercom and ITG alignments. The best results
per row are shown in bold.
</tableCaption>
<bodyText confidence="0.6389395">
aligned with an epsilon arc of the confusion
network.
</bodyText>
<listItem confidence="0.973069555555556">
• Setting the weight of each arc equal to the
negative log (posterior) probability of its la-
bel; this probability is proportional to the num-
ber of systems which output the word that gets
aligned in that location. Note that the algo-
rithm of Rosti et al. (2007) used N-best lists in
the combination. Instead, we used the single-
best output of each system; this was done be-
cause not all systems were providing N-best
</listItem>
<bodyText confidence="0.846222666666667">
lists, and an unbalanced inclusion would favor
some systems much more than others. Further-
more, for each genre, one of our MT systems
was significantly better than the others in terms
of word order, and it was chosen as the skele-
ton.
</bodyText>
<sectionHeader confidence="0.993931" genericHeader="method">
4 Experimental Results
</sectionHeader>
<bodyText confidence="0.999933333333333">
Table 2 shows tercomTERs of invWER-oracles (as
computed by the aforementioned Dyna program)
and oracle BLEU scores of the confusion networks.
The confusion networks were generated using 9
MT systems applied to the Chinese GALE 2007
Dev set, which consists of roughly 550 Newswire
segments, and 650 Weblog segments. The confu-
sion networks which were generated with the ITG-
based alignments gave significantly better oracle ter-
comTERs (significance tested with a Fisher sign
test, p − 0.02) and better oracle BLEU scores.
The BLEU oracle sentences were found using the
dynamic-programming algorithm given in Dreyer et
al. (2007) and measured using Philipp Koehn’s eval-
uation script. On the other hand, a comparison be-
tween the 1-best paths did not reveal significant dif-
ferences that would favor one approach or the other
(either in terms of tercomTER or BLEU).
</bodyText>
<page confidence="0.996043">
83
</page>
<bodyText confidence="0.999974105263158">
We also tried to understand which alignment
method gives higher probability to paths “close”
to the corresponding oracle. To do that, we com-
puted the probability that a random path from a
confusion network is within x edits from its ora-
cle. This computation was done efficiently using
finite-state-machine operations, and did not involve
any randomization. Preliminary experiments with
the invWER-oracles show that the probability of all
paths which are within x = 3 edits from the oracle
is roughly the same for ITG-based and tercom-based
confusion networks. We plan to report our findings
for a whole range of x-values in future work. Fi-
nally, a runtime comparison of the two techniques
shows that ITGs are much more computationally
intensive: on average, ITG-based alignments took
1.5 hours/sentence (owing to their O(n6) complex-
ity), while tercom-based alignments only took 0.4
sec/sentence.
</bodyText>
<sectionHeader confidence="0.987909" genericHeader="method">
5 Concluding Remarks
</sectionHeader>
<bodyText confidence="0.999980666666667">
We compared alignments obtained using the widely
used program tercom with alignments obtained with
ITGs and we established that the ITG alignments are
superior in two ways. Specifically: (a) we showed
that invWER (computed using the ITG alignments)
gives a better approximation to TER between ma-
chine translation outputs and human references than
tercom; and (b) in an oracle system combination ex-
periment, we found that confusion networks gen-
erated with ITG alignments contain better oracles,
both in terms of tercomTER and in terms of BLEU.
Future work will include rescoring results with a
language model, as well as exploration of heuristics
(e.g., allowing only “short” block moves) that can
reduce the ITG alignment complexity to O(n4).
</bodyText>
<sectionHeader confidence="0.999324" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999848319148936">
S. Bangalore, G. Bordel, and G. Riccardi. 2001. Com-
puting consensus translation from multiple machine
translation systems. In Proceedings of ASRU, pages
351–354.
M. Dreyer, K. Hall, and S. Khudanpur. 2007. Compar-
ing reordering constraints for smt using efficient bleu
oracle computation. In Proceedings of SSST, NAACL-
HLT 2007 /AMTA Workshop on Syntax and Structure
in Statistical Translation, pages 103–110, Rochester,
New York, April. Association for Computational Lin-
guistics.
Jason Eisner, Eric Goldlust, and Noah A. Smith. 2005.
Compiling comp ling: Weighted dynamic program-
ming and the Dyna language. In Proceedings ofHLT-
EMNLP, pages 281–290. Association for Computa-
tional Linguistics, October.
G. Leusch, N. Ueffing, and H. Ney. 2003. A novel
string-to-string distance measure with applications to
machine translation evaluation. In Proceedings of the
Machine Translation Summit 2003, pages 240–247,
September.
E. Matusov, N. Ueffing, and H. Ney. 2006. Computing
consensus translation from multiple machine transla-
tion systems using enhanced hypotheses alignment. In
Proceedings of EACL, pages 33–40.
A.-V.I. Rosti, S. Matsoukas, and R. Schwartz. 2007.
Improved word-level system combination for machine
translation. In Proceedings of the ACL, pages 312–
319, June.
D. Shapira and J. A. Storer. 2002. Edit distance with
move operations. In Proceedings of the 13th Annual
Symposium on Combinatorial Pattern Matching, vol-
ume 2373/2002, pages 85–98, Fukuoka, Japan, July.
M. Snover, B. Dorr, R. Schwartz, L. Micciulla, and
J. Makhoul. 2006. A study of translation edit rate with
targeted human annotation. In Proceedings ofAssoci-
ation for Machine Translation in the Americas, Cam-
bridge, MA, August.
J. D. Thompson, D. G. Higgins, and T. J. Gibson.
1994. Clustalw: Improving the sensitivity of progres-
sive multiple sequence alignment through sequence
weighting, position-specific gap penalties and weight
matrix choice. Nucleic Acids Research, 22(22):4673–
4680.
D. Wu. 1997. Stochastic inversion transduction gram-
mars and bilingual parsing of parallel corpora. Com-
putational Linguistics, 23(3):377–403, September.
</reference>
<page confidence="0.999244">
84
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.789584">
<title confidence="0.9180155">Machine Translation System Combination ITG-based</title>
<author confidence="0.979176">Damianos Karakos</author>
<author confidence="0.979176">Jason Eisner</author>
<author confidence="0.979176">Sanjeev Khudanpur</author>
<author confidence="0.979176">Markus Dreyer</author>
<affiliation confidence="0.997869">Center for Language and Speech Processing</affiliation>
<address confidence="0.995146">Johns Hopkins University, Baltimore, MD 21218</address>
<abstract confidence="0.997235421052632">Given several systems’ automatic translations of the same sentence, we show how to combine them into a confusion network, whose various paths represent composite translations that could be considered in a subsequent rescoring step. We build our confusion networks using the method of Rosti et al. (2007), but, instead of forming alignments using the (Snover et al., 2006), we create alignments that minimize invWER (Leusch et al., 2003), a form of edit distance that permits properly nested block movements of substrings. Oracle experiments with Chinese newswire and weblog translations show that our confusion networks contain paths which are significantly better (in terms of BLEU and than those in confusion networks.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>S Bangalore</author>
<author>G Bordel</author>
<author>G Riccardi</author>
</authors>
<title>Computing consensus translation from multiple machine translation systems.</title>
<date>2001</date>
<booktitle>In Proceedings of ASRU,</booktitle>
<pages>351--354</pages>
<contexts>
<context position="2570" citStr="Bangalore et al. (2001)" startWordPosition="375" endWordPosition="378">is difficult because identifying the best hypothesis (relative to a known reference translation) means scoring all the composite hypotheses, of which there may be exponentially many. Most MT combination methods do create an exponentially large hypothesis set, representing it as a confusion network of strings in the target language (e.g., English). (A confusion network is a lattice where every node is on every path; i.e., each time step presents an independent choice among several phrases. Note that our contributions in this paper could be applied to arbitrary lattice topologies.) For example, Bangalore et al. (2001) show how to build a confusion network following a multistring alignment procedure of several MT outputs. The procedure (used primarily in biology, (Thompson et al., 1994)) yields monotone alignments that minimize the number of insertions, deletions, and substitutions. Unfortunately, monotone alignments are often poor, since machine translations (particularly from different models) can vary significantly in their word order. Thus, when Matusov et al. (2006) use this procedure, they deterministically reorder each translation prior to the monotone alignment. The procedure described by Rosti et a</context>
</contexts>
<marker>Bangalore, Bordel, Riccardi, 2001</marker>
<rawString>S. Bangalore, G. Bordel, and G. Riccardi. 2001. Computing consensus translation from multiple machine translation systems. In Proceedings of ASRU, pages 351–354.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Dreyer</author>
<author>K Hall</author>
<author>S Khudanpur</author>
</authors>
<title>Comparing reordering constraints for smt using efficient bleu oracle computation.</title>
<date>2007</date>
<booktitle>In Proceedings of SSST, NAACLHLT 2007 /AMTA Workshop on Syntax and Structure in Statistical Translation,</booktitle>
<pages>103--110</pages>
<location>Rochester,</location>
<contexts>
<context position="11493" citStr="Dreyer et al. (2007)" startWordPosition="1842" endWordPosition="1845"> 2 shows tercomTERs of invWER-oracles (as computed by the aforementioned Dyna program) and oracle BLEU scores of the confusion networks. The confusion networks were generated using 9 MT systems applied to the Chinese GALE 2007 Dev set, which consists of roughly 550 Newswire segments, and 650 Weblog segments. The confusion networks which were generated with the ITGbased alignments gave significantly better oracle tercomTERs (significance tested with a Fisher sign test, p − 0.02) and better oracle BLEU scores. The BLEU oracle sentences were found using the dynamic-programming algorithm given in Dreyer et al. (2007) and measured using Philipp Koehn’s evaluation script. On the other hand, a comparison between the 1-best paths did not reveal significant differences that would favor one approach or the other (either in terms of tercomTER or BLEU). 83 We also tried to understand which alignment method gives higher probability to paths “close” to the corresponding oracle. To do that, we computed the probability that a random path from a confusion network is within x edits from its oracle. This computation was done efficiently using finite-state-machine operations, and did not involve any randomization. Prelim</context>
</contexts>
<marker>Dreyer, Hall, Khudanpur, 2007</marker>
<rawString>M. Dreyer, K. Hall, and S. Khudanpur. 2007. Comparing reordering constraints for smt using efficient bleu oracle computation. In Proceedings of SSST, NAACLHLT 2007 /AMTA Workshop on Syntax and Structure in Statistical Translation, pages 103–110, Rochester,</rawString>
</citation>
<citation valid="true">
<authors>
<author>New York</author>
</authors>
<date></date>
<publisher>Association for</publisher>
<institution>Computational Linguistics.</institution>
<marker>York, </marker>
<rawString>New York, April. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jason Eisner</author>
<author>Eric Goldlust</author>
<author>Noah A Smith</author>
</authors>
<title>Compiling comp ling: Weighted dynamic programming and the Dyna language.</title>
<date>2005</date>
<booktitle>In Proceedings ofHLTEMNLP,</booktitle>
<pages>281--290</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics,</institution>
<contexts>
<context position="7308" citStr="Eisner et al., 2005" startWordPosition="1150" endWordPosition="1153">ple ITG that has one nonterminal and whose terminal symbols allow insertion, deletion, and substitution. The minimum-cost ITG tree can be found by dynamic programming. This leads to invWER (Leusch et al., 2003), which is defined as the minimum number of edits (insertions, deletions, substitutions and block shifts allowed by the ITG) needed to convert one string to another. In this paper, the minimuminvWER alignments are used for generating confusion networks. The alignments are found with a 11- rule Dyna program (Dyna is an environment that facilitates the development of dynamic programs—see (Eisner et al., 2005) for more details). This program was further sped up (by about a factor of 2) with an A* search heuristic computed by additional code. Specifically, our admissible outside heuristic for aligning two substrings estimated the cost of aligning the words outside those substrings as if reordering those words were free. This was complicated somewhat by type/token issues and by the fact that we were aligning (possibly weighted) lattices. Moreover, the same Dyna program was used for the computation of the minimum invWER path in these confusion networks (oracle path), without having to invoke tercom nu</context>
</contexts>
<marker>Eisner, Goldlust, Smith, 2005</marker>
<rawString>Jason Eisner, Eric Goldlust, and Noah A. Smith. 2005. Compiling comp ling: Weighted dynamic programming and the Dyna language. In Proceedings ofHLTEMNLP, pages 281–290. Association for Computational Linguistics, October.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Leusch</author>
<author>N Ueffing</author>
<author>H Ney</author>
</authors>
<title>A novel string-to-string distance measure with applications to machine translation evaluation.</title>
<date>2003</date>
<booktitle>In Proceedings of the Machine Translation</booktitle>
<pages>240--247</pages>
<location>Summit</location>
<contexts>
<context position="722" citStr="Leusch et al., 2003" startWordPosition="97" endWordPosition="100">jeev Khudanpur, Markus Dreyer Center for Language and Speech Processing Johns Hopkins University, Baltimore, MD 21218 {damianos,eisner,khudanpur,dreyer}@jhu.edu Abstract Given several systems’ automatic translations of the same sentence, we show how to combine them into a confusion network, whose various paths represent composite translations that could be considered in a subsequent rescoring step. We build our confusion networks using the method of Rosti et al. (2007), but, instead of forming alignments using the tercom script (Snover et al., 2006), we create alignments that minimize invWER (Leusch et al., 2003), a form of edit distance that permits properly nested block movements of substrings. Oracle experiments with Chinese newswire and weblog translations show that our confusion networks contain paths which are significantly better (in terms of BLEU and TER) than those in tercom-based confusion networks. 1 Introduction Large improvements in machine translation (MT) may result from combining different approaches to MT with mutually complementary strengths. System-level combination of translation outputs is a promising path towards such improvements. Yet there are some significant hurdles in this p</context>
<context position="4589" citStr="Leusch et al., 2003" startWordPosition="688" endWordPosition="691">translations that allow appropriate re-orderings. For this, Rosti et al. (2007) use the tercom script (Snover et al., 2006), which uses a number of heuristics (as well as dynamic programming) for finding a sequence of edits (insertions, deletions, substitutions and block shifts) that convert an input string to another. In this paper, we show that one can build better confusion networks (in terms of the best translation possible from the confusion network) when the pairwise alignments are computed not by tercom, which approximately minimizes TER, but instead by an exact minimization of invWER (Leusch et al., 2003), which is a restricted version of TER that permits only properly nested sets of block shifts, and can be computed in polynomial time. The paper is organized as follows: a summary of TER, tercom, and invWER, is presented in Section 2. The system combination procedure is summarized in Section 3, while experimental (oracle) results are presented in Section 4. Conclusions are given in Section 5. 2 Comparing tercom and invWER The tercom script was created mainly in order to measure translation quality based on TER. As is proved by Shapira and Storer (2002), computation of TER is an NP-complete pro</context>
<context position="6898" citStr="Leusch et al., 2003" startWordPosition="1083" endWordPosition="1086">Specifically, ITGs can be used to find the optimal edit sequence under the restriction that block moves must be properly nested, like parentheses. That is, if an edit sequence swaps adjacent substrings A and B of the original string, then any other block move that affects A (or B) must stay completely within A (or B). An edit sequence with this restriction corresponds to a synchronous parse tree under a simple ITG that has one nonterminal and whose terminal symbols allow insertion, deletion, and substitution. The minimum-cost ITG tree can be found by dynamic programming. This leads to invWER (Leusch et al., 2003), which is defined as the minimum number of edits (insertions, deletions, substitutions and block shifts allowed by the ITG) needed to convert one string to another. In this paper, the minimuminvWER alignments are used for generating confusion networks. The alignments are found with a 11- rule Dyna program (Dyna is an environment that facilitates the development of dynamic programs—see (Eisner et al., 2005) for more details). This program was further sped up (by about a factor of 2) with an A* search heuristic computed by additional code. Specifically, our admissible outside heuristic for alig</context>
</contexts>
<marker>Leusch, Ueffing, Ney, 2003</marker>
<rawString>G. Leusch, N. Ueffing, and H. Ney. 2003. A novel string-to-string distance measure with applications to machine translation evaluation. In Proceedings of the Machine Translation Summit 2003, pages 240–247, September.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Matusov</author>
<author>N Ueffing</author>
<author>H Ney</author>
</authors>
<title>Computing consensus translation from multiple machine translation systems using enhanced hypotheses alignment.</title>
<date>2006</date>
<booktitle>In Proceedings of EACL,</booktitle>
<pages>33--40</pages>
<contexts>
<context position="3031" citStr="Matusov et al. (2006)" startWordPosition="442" endWordPosition="445"> choice among several phrases. Note that our contributions in this paper could be applied to arbitrary lattice topologies.) For example, Bangalore et al. (2001) show how to build a confusion network following a multistring alignment procedure of several MT outputs. The procedure (used primarily in biology, (Thompson et al., 1994)) yields monotone alignments that minimize the number of insertions, deletions, and substitutions. Unfortunately, monotone alignments are often poor, since machine translations (particularly from different models) can vary significantly in their word order. Thus, when Matusov et al. (2006) use this procedure, they deterministically reorder each translation prior to the monotone alignment. The procedure described by Rosti et al. (2007) has been shown to yield significant improvements in translation quality, and uses an estimate of Translation Error Rate (TER) to guide the alignment. (TER is defined as the minimum number of inserProceedings of ACL-08: HLT, Short Papers (Companion Volume), pages 81–84, Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics tions, deletions, substitutions and block shifts between two strings.) A remarkable feature of that </context>
</contexts>
<marker>Matusov, Ueffing, Ney, 2006</marker>
<rawString>E. Matusov, N. Ueffing, and H. Ney. 2006. Computing consensus translation from multiple machine translation systems using enhanced hypotheses alignment. In Proceedings of EACL, pages 33–40.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A-V I Rosti</author>
<author>S Matsoukas</author>
<author>R Schwartz</author>
</authors>
<title>Improved word-level system combination for machine translation.</title>
<date>2007</date>
<booktitle>In Proceedings of the ACL,</booktitle>
<pages>312--319</pages>
<contexts>
<context position="3179" citStr="Rosti et al. (2007)" startWordPosition="464" endWordPosition="467">al. (2001) show how to build a confusion network following a multistring alignment procedure of several MT outputs. The procedure (used primarily in biology, (Thompson et al., 1994)) yields monotone alignments that minimize the number of insertions, deletions, and substitutions. Unfortunately, monotone alignments are often poor, since machine translations (particularly from different models) can vary significantly in their word order. Thus, when Matusov et al. (2006) use this procedure, they deterministically reorder each translation prior to the monotone alignment. The procedure described by Rosti et al. (2007) has been shown to yield significant improvements in translation quality, and uses an estimate of Translation Error Rate (TER) to guide the alignment. (TER is defined as the minimum number of inserProceedings of ACL-08: HLT, Short Papers (Companion Volume), pages 81–84, Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics tions, deletions, substitutions and block shifts between two strings.) A remarkable feature of that procedure is that it performs the alignment of the output translations (i) without any knowledge of the translation model used to generate the trans</context>
<context position="9213" citStr="Rosti et al. (2007)" startWordPosition="1459" endWordPosition="1462">em (i.e., these are “HTER” approximations). As can be seen from the table, in all language and genre conditions, invWER gives a better approximation to TER than tercomTER. In fact, out of the roughly 2000 total segments in all languages/genres, tercomTER gives a lower number of edits in only 8 cases! This is a clear indication that ITGs can explore the space of string permutations more effectively than tercom. 3 The System Combination Approach ITG-based alignments and tercom-based alignments were also compared in oracle experiments involving confusion networks created through the algorithm of Rosti et al. (2007). The algorithm entails the following steps: • Computation of all pairwise alignments between system hypotheses (either using ITGs or tercom); for each pair, one of the hypotheses plays the role of the “reference”. • Selection of a system output as the “skeleton” of the confusion network, whose words are used as anchors for aligning all other machine translation outputs together. Each arc has a translation output word as its label, with the special token “NULL” used to denote an insertion/deletion between the skeleton and another system output. • Multiple consecutive words which are inserted r</context>
<context position="10457" citStr="Rosti et al. (2007)" startWordPosition="1672" endWordPosition="1675">orm a phrase that gets Genre CNs with tercom CNs with ITG NW 50.1% (27.7%) 48.8% (28.3%) WB 51.0% (25.5%) 50.5% (26.0%) Table 2: TercomTERs of invWER-oracles and (in parentheses) oracle BLEU scores of confusion networks generated with tercom and ITG alignments. The best results per row are shown in bold. aligned with an epsilon arc of the confusion network. • Setting the weight of each arc equal to the negative log (posterior) probability of its label; this probability is proportional to the number of systems which output the word that gets aligned in that location. Note that the algorithm of Rosti et al. (2007) used N-best lists in the combination. Instead, we used the singlebest output of each system; this was done because not all systems were providing N-best lists, and an unbalanced inclusion would favor some systems much more than others. Furthermore, for each genre, one of our MT systems was significantly better than the others in terms of word order, and it was chosen as the skeleton. 4 Experimental Results Table 2 shows tercomTERs of invWER-oracles (as computed by the aforementioned Dyna program) and oracle BLEU scores of the confusion networks. The confusion networks were generated using 9 M</context>
</contexts>
<marker>Rosti, Matsoukas, Schwartz, 2007</marker>
<rawString>A.-V.I. Rosti, S. Matsoukas, and R. Schwartz. 2007. Improved word-level system combination for machine translation. In Proceedings of the ACL, pages 312– 319, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Shapira</author>
<author>J A Storer</author>
</authors>
<title>Edit distance with move operations.</title>
<date>2002</date>
<booktitle>In Proceedings of the 13th Annual Symposium on Combinatorial Pattern Matching,</booktitle>
<volume>2373</volume>
<pages>85--98</pages>
<location>Fukuoka, Japan,</location>
<contexts>
<context position="5147" citStr="Shapira and Storer (2002)" startWordPosition="784" endWordPosition="787">ut instead by an exact minimization of invWER (Leusch et al., 2003), which is a restricted version of TER that permits only properly nested sets of block shifts, and can be computed in polynomial time. The paper is organized as follows: a summary of TER, tercom, and invWER, is presented in Section 2. The system combination procedure is summarized in Section 3, while experimental (oracle) results are presented in Section 4. Conclusions are given in Section 5. 2 Comparing tercom and invWER The tercom script was created mainly in order to measure translation quality based on TER. As is proved by Shapira and Storer (2002), computation of TER is an NP-complete problem. For this reason, tercom uses some heuristics in order to compute an approximation to TER in polynomial time. In the rest of the paper, we will denote this approximation as tercomTER, to distinguish it from (the intractable) TER. The block shifts which are allowed in tercom have to adhere to the following constraints: (i) A block that has an exact match cannot be moved, and (ii) for a block to be moved, it should have an exact match in its new position. However, this sometimes leads to counter-intuitive sequences of edits; for instance, for the se</context>
</contexts>
<marker>Shapira, Storer, 2002</marker>
<rawString>D. Shapira and J. A. Storer. 2002. Edit distance with move operations. In Proceedings of the 13th Annual Symposium on Combinatorial Pattern Matching, volume 2373/2002, pages 85–98, Fukuoka, Japan, July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Snover</author>
<author>B Dorr</author>
<author>R Schwartz</author>
<author>L Micciulla</author>
<author>J Makhoul</author>
</authors>
<title>A study of translation edit rate with targeted human annotation.</title>
<date>2006</date>
<booktitle>In Proceedings ofAssociation for Machine Translation in the Americas,</booktitle>
<location>Cambridge, MA,</location>
<contexts>
<context position="657" citStr="Snover et al., 2006" startWordPosition="87" endWordPosition="90">n using ITG-based Alignments* Damianos Karakos, Jason Eisner, Sanjeev Khudanpur, Markus Dreyer Center for Language and Speech Processing Johns Hopkins University, Baltimore, MD 21218 {damianos,eisner,khudanpur,dreyer}@jhu.edu Abstract Given several systems’ automatic translations of the same sentence, we show how to combine them into a confusion network, whose various paths represent composite translations that could be considered in a subsequent rescoring step. We build our confusion networks using the method of Rosti et al. (2007), but, instead of forming alignments using the tercom script (Snover et al., 2006), we create alignments that minimize invWER (Leusch et al., 2003), a form of edit distance that permits properly nested block movements of substrings. Oracle experiments with Chinese newswire and weblog translations show that our confusion networks contain paths which are significantly better (in terms of BLEU and TER) than those in tercom-based confusion networks. 1 Introduction Large improvements in machine translation (MT) may result from combining different approaches to MT with mutually complementary strengths. System-level combination of translation outputs is a promising path towards su</context>
<context position="4092" citStr="Snover et al., 2006" startWordPosition="607" endWordPosition="610">une 2008. c�2008 Association for Computational Linguistics tions, deletions, substitutions and block shifts between two strings.) A remarkable feature of that procedure is that it performs the alignment of the output translations (i) without any knowledge of the translation model used to generate the translations, and (ii) without any knowledge of how the target words in each translation align back to the source words. In fact, it only requires a procedure for creating pairwise alignments of translations that allow appropriate re-orderings. For this, Rosti et al. (2007) use the tercom script (Snover et al., 2006), which uses a number of heuristics (as well as dynamic programming) for finding a sequence of edits (insertions, deletions, substitutions and block shifts) that convert an input string to another. In this paper, we show that one can build better confusion networks (in terms of the best translation possible from the confusion network) when the pairwise alignments are computed not by tercom, which approximately minimizes TER, but instead by an exact minimization of invWER (Leusch et al., 2003), which is a restricted version of TER that permits only properly nested sets of block shifts, and can </context>
</contexts>
<marker>Snover, Dorr, Schwartz, Micciulla, Makhoul, 2006</marker>
<rawString>M. Snover, B. Dorr, R. Schwartz, L. Micciulla, and J. Makhoul. 2006. A study of translation edit rate with targeted human annotation. In Proceedings ofAssociation for Machine Translation in the Americas, Cambridge, MA, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J D Thompson</author>
<author>D G Higgins</author>
<author>T J Gibson</author>
</authors>
<title>Clustalw: Improving the sensitivity of progressive multiple sequence alignment through sequence weighting, position-specific gap penalties and weight matrix choice.</title>
<date>1994</date>
<journal>Nucleic Acids Research,</journal>
<volume>22</volume>
<issue>22</issue>
<pages>4680</pages>
<contexts>
<context position="2741" citStr="Thompson et al., 1994" startWordPosition="403" endWordPosition="406">ally many. Most MT combination methods do create an exponentially large hypothesis set, representing it as a confusion network of strings in the target language (e.g., English). (A confusion network is a lattice where every node is on every path; i.e., each time step presents an independent choice among several phrases. Note that our contributions in this paper could be applied to arbitrary lattice topologies.) For example, Bangalore et al. (2001) show how to build a confusion network following a multistring alignment procedure of several MT outputs. The procedure (used primarily in biology, (Thompson et al., 1994)) yields monotone alignments that minimize the number of insertions, deletions, and substitutions. Unfortunately, monotone alignments are often poor, since machine translations (particularly from different models) can vary significantly in their word order. Thus, when Matusov et al. (2006) use this procedure, they deterministically reorder each translation prior to the monotone alignment. The procedure described by Rosti et al. (2007) has been shown to yield significant improvements in translation quality, and uses an estimate of Translation Error Rate (TER) to guide the alignment. (TER is def</context>
</contexts>
<marker>Thompson, Higgins, Gibson, 1994</marker>
<rawString>J. D. Thompson, D. G. Higgins, and T. J. Gibson. 1994. Clustalw: Improving the sensitivity of progressive multiple sequence alignment through sequence weighting, position-specific gap penalties and weight matrix choice. Nucleic Acids Research, 22(22):4673– 4680.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Wu</author>
</authors>
<title>Stochastic inversion transduction grammars and bilingual parsing of parallel corpora.</title>
<date>1997</date>
<journal>Computational Linguistics,</journal>
<volume>23</volume>
<issue>3</issue>
<contexts>
<context position="6192" citStr="Wu, 1997" startWordPosition="963" endWordPosition="964">lock to be moved, it should have an exact match in its new position. However, this sometimes leads to counter-intuitive sequences of edits; for instance, for the sentence pair “thomas jefferson says eat your vegetables” “eat your cereal thomas edison says”, tercom finds an edit sequence of cost 5, instead of the optimum 3. Furthermore, the block selection is done in a greedy manner, and the final outcome is dependent on the shift order, even when the above constraints are imposed. An alternative to tercom, considered in this paper, is to use the Inversion Transduction Grammar (ITG) formalism (Wu, 1997) which allows one to view the problem of alignment as a problem of bilingual parsing. Specifically, ITGs can be used to find the optimal edit sequence under the restriction that block moves must be properly nested, like parentheses. That is, if an edit sequence swaps adjacent substrings A and B of the original string, then any other block move that affects A (or B) must stay completely within A (or B). An edit sequence with this restriction corresponds to a synchronous parse tree under a simple ITG that has one nonterminal and whose terminal symbols allow insertion, deletion, and substitution.</context>
</contexts>
<marker>Wu, 1997</marker>
<rawString>D. Wu. 1997. Stochastic inversion transduction grammars and bilingual parsing of parallel corpora. Computational Linguistics, 23(3):377–403, September.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>