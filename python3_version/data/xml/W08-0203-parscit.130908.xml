<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.005881">
<title confidence="0.989054">
Freshmen’s CL curriculum: the benefits of redundancy *
</title>
<author confidence="0.993732">
Heike Zinsmeister
</author>
<affiliation confidence="0.998258">
Department of Linguistics
University of Konstanz
</affiliation>
<address confidence="0.572798">
78457 Konstanz, Germany
</address>
<email confidence="0.776374">
Heike.Zinsmeister@uni-konstanz.de
</email>
<sectionHeader confidence="0.991294" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999833875">
In the course of the European Bologna ac-
cord on higher education, German universities
have been reorganizing their traditional ”Mag-
ister” and ”Diplom” studies into modularized
bachelor’s and master’s programs. This re-
vision provides a chance to update the pro-
grams. In this paper we introduce the curricu-
lum of a first semester B.A. program in Com-
putational Linguistics which was taught for
the first time last semester. In addition, we an-
alyze the syllabi of four mandatory courses of
the first semester to identify overlapping con-
tent which led to redundancies. We suggest for
future semesters to reorganize the schedules in
a way that students encounter recurring topics
iteratively in a constructive way.
</bodyText>
<sectionHeader confidence="0.998992" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999726469387755">
We present the first semester curriculum of a newly
revised bachelor’s program in Computational Lin-
guistics at the University of Heidelberg, Germany,
which was taught for the first time at the Department
of Computational Linguistics last winter semester.
Four courses are mandatory for the students in
the first semester: a comprehensive Introduction to
Computational Linguistics, backed up with a course
on Formal Foundations that emphasizes mathemat-
ical topics, and a general introduction to linguistic
core modules in Foundations of Linguistic Analysis,
the set up is completed by an Introduction to Pro-
`This paper is about the curriculum taught at the Depart-
ment of Computational Linguistics at the University of Heidel-
berg, where the author used to work.
gramming that introduces core concepts of program-
ming employing the programming language Python.
The parallel design leads to a situation in which
related topics are introduced in the same semester
in parallel fashion. Redundant duplication per se is
to be avoided given that lecture time is always too
sparse and should be used most efficiently such that
there is enough room for examples, short in-course
exercises, questions and discussions.
We analyzed the syllabi for common topics and
plotted these topics to see whether they are dealt
with in a constructive way across the curricu-
lum. For future semesters we suggest some re-
organization to optimize the courses’ interactions.
Since all courses are taught in the department of
Computational Linguistics, decisions on both the
courses’ subtopics as well as their temporal sequenc-
ing is in full control of the local department.
We think that it is reasonable to keep the com-
mon topics and even the redundancy of introducing
them in more than one course only. Iterative re-
introduction could be helpful for the students if it
is accompanied by a reference to the earlier men-
tion as well as a motivation of the specific relevance
for the course at hand. We expect that such an iter-
ative approach reinforces understanding since it al-
lows the students to build upon their prior knowl-
edge and, furthermore, to approach the very same
concept from different perspectives. This iterative
method is inspired by the idea of spiral learning in
the sense of Jerome S. Bruner (Bruner, 1960) which
builds on a constructivist view on learning. It as-
sumes that learning is an active process in which
learners construct new ideas or concepts based upon
</bodyText>
<page confidence="0.992366">
19
</page>
<note confidence="0.7368255">
Proceedings of the Third Workshop on Issues in Teaching Computational Linguistics (TeachCL-08), pages 19–26,
Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics
</note>
<bodyText confidence="0.9998916875">
their prior knowledge. A curriculum can support this
process if it revisits its basic ideas repeatedly: ”the
spiral curriculum [..] turns back on itself at higher
levels” (Bruner, 1960, p.53).
The rest of this paper is organized as follows.
First, we briefly sketch the Bologna Process, an ef-
fort of harmonizing higher education in Europe and
also the special situation in Heidelberg being the
background against which the bachelor’s program
described is created. Then, we introduce the bach-
elor’s program of Computational Linguistics at the
University of Heidelberg in Germany and describe
its four mandatory courses of the first semester. We
analyze the syllabi for common topics, and, finally,
present a re-organized schedule for future semesters
which is inspired by an iterative learning approach.
</bodyText>
<sectionHeader confidence="0.982145" genericHeader="introduction">
2 Background
</sectionHeader>
<bodyText confidence="0.999953583333333">
The European Bologna Process is an effort of Eu-
ropean countries to establish a common higher ed-
ucation area by the year 2010. Its central element
is the introduction of a two-cycle study system con-
sisting of bachelor’s and master’s degrees with com-
parable qualifications throughout Europe based on
a common credit transfer system which allows for
comparing the workload of individual courses.1
In the course of this international harmonizing ef-
fort, German universities are reorganizing their pro-
grams from traditional ”Magister” or ”Diplom” pro-
grams to modular bachelor’s and master’s programs.
Previously ”Magister” or ”Diplom” was first degree
in Germany, i.e. a bachelor’s degree did not exist.
A characteristic of the traditional programs was the
freedom of choice they offered to their students,
more pronounced in the ”Magister” programs than
in the ”Diplom” programs the latter of which were
traditionally realized in more technically oriented
disciplines and the former in the humanities. Both
type of programs were set up with a standard period
of study of nine to ten semesters but the average stu-
dent required more than this. European bachelor’s
programs predetermine a highly structured curricu-
</bodyText>
<footnote confidence="0.9835645">
1One European Credit Transfer System point cor-
responds to 25-30 hours workload on the student cf.
http://www.uni-heidelberg.de/studium/bologna/
materialien/diploma/ECTSUsersGuide05.pdf. For the
Bologna Process in general see http://ec.europa.eu/
education/policies/educ/bologna/bologna_en.html.
</footnote>
<bodyText confidence="0.999671263157895">
lum and offer a first university degree after six or
seven semester of study.
The Computational Linguistics department in
Heidelberg was pioneering with an early bachelor’s
program devised by Peter Hellwig at the beginning
of the Bologna Process. Adaptions of the orig-
inal bachelor’s program became necessary due to
general developments in the international Bologna
policy and finally the need for a revised program
emerged. This was realized in 2007 by Anette Frank
who had filled the by then vacant chair in Compu-
tational Linguistics. The change of the departmen-
tal head brought a change from a more vocationally
oriented program that prepared students to take jobs
in the local language technology industry to a more
academically oriented one, which is reflected in the
revised syllabus. We will point to differences be-
tween the original program and the revised program
where relevant.
</bodyText>
<sectionHeader confidence="0.721653" genericHeader="method">
3 The Study of Computational Linguistics
in Heidelberg
</sectionHeader>
<bodyText confidence="0.99996608">
Computational linguistics (CL) is a
discipline between linguistics and com-
puter science which is concerned with the
computational aspects of the human lan-
guage faculty. [...] The applied compo-
nent of CL is more interested in the practi-
cal outcome of modeling human language
use. The goal is to create software prod-
ucts that have some knowledge of human
language. [...] Theoretical CL takes up
issues in formal theories. [...] Compu-
tational linguists develop formal models
simulating aspects of the human language
faculty and implement them as computer
programs. (www.aclweb.org/nlpfaq.txt,
credited to Hans Uszkoreit)
This quote from Hans Uszkoreit outlines the
knowledge and skills that a study of CL should equip
its students with: programming skills, handling of
formal models, algorithmic thinking and last but not
least an explicit knowledge of linguistic analysis.
All four areas are covered in our freshmen’s
classes which are introduced in more detail in subse-
quent subsections after the presentation of the over-
all program.
</bodyText>
<page confidence="0.967658">
20
</page>
<bodyText confidence="0.999931125">
In Heidelberg, B.A. students have to collect 180
credit points to complete their study. They nor-
mally enroll in two or three subjects which means
that they take Computational Linguistics as main
subject (in which it provides 75% of the overall
workload), secondary main subject (50%) or mi-
nor subject (25%) 2 in combination with comple-
mentary subjects in the areas of computer science3,
humanities, psychology, economics, or law. Table
1 gives an overview of the courses in a 75% B.A.
The first semester requirements are the same in all
B.A. options involving Computational Linguistics.4
In addition to the courses depicted in Table 1 stu-
dents need to gain credits in Generic Competences
(’¨ubergreifende Kompetenzen’ aka soft skills and
courses from other departments of the faculty).5
</bodyText>
<subsectionHeader confidence="0.999048">
3.1 The Curriculum
</subsectionHeader>
<bodyText confidence="0.999798272727273">
We thought it relevant for the students to get ac-
quainted with Computational Linguistics proper as
early as the first semester. Therefore, in addition to
an introduction to formal foundations and program-
ming a comprehensive introduction to algorithms
and analysis in computational linguistics is manda-
tory. It was the first time that this combination of
courses was taught. Before that, the Introduction
to Computational Linguistics also introduced stu-
dents to core linguistic topics which were spread
across the whole course. The motivation for an inde-
pendent introduction to linguistics was that students
should get a profound background knowledge in lin-
guistic analysis such that further courses could build
on them. Before that, even basic concepts such as
morpheme had to be reintroduced. Introduction to
Programming and Formal Foundations used to be in
complementary distribution due to the fact that they
used to be taught by the one and the same person.
An additional lecturer position in the department al-
lowed us to to offer both courses in parallel.
The Freshmen’s curriculum consists of four
</bodyText>
<footnote confidence="0.982040222222222">
2The minor subject option had to be introduced due to for-
mal requirements. It is likely to be dispensed with in the future.
3Computer science can only be taken as minor subject.
4In the 25% B.A. the workload on students is reduced. They
only need to attend one of the two courses on formal founda-
tions either Mathematical Foundations in the first semester or
Logical Foundations in the second one.
5In the 75% B.A. students need to collect 20 credit points in
Generic Competences during their three-year study.
</footnote>
<bodyText confidence="0.97276">
mandatory courses which are described in the fol-
lowing.
</bodyText>
<subsectionHeader confidence="0.7536165">
3.1.1 Introduction to Computational
Linguistics
</subsectionHeader>
<bodyText confidence="0.994947695652174">
The core lecture of the first semester is the Intro-
duction to Computational Linguistics. It is held four
hours a week and is worth six credit points. It in-
troduces the foundations of Computational Linguis-
tics, its research objectives and research methods. It
provides an overall survey of the field: the levels
of language description, formal-mathematical and
logical models as well as algorithmic approaches
for processing such formal models. Specific top-
ics are: dealing with ambiguities, approximation of
linguistic regularities, and the relation of language
and knowledge; some applications of Computational
Linguistics are also introduced. Mandatory read-
ings are selected sections from Jurafsky &amp; Martin
(2000), complemented by chapters from Carstensen
et al. (2004) and Bird et al. (forthcoming).
This course is seen as the backbone of the first
semester curriculum. We therefore list the lectures
in detail. The content of the other three courses is
only briefly described below and will be discussed
in Section 4.
The first part of the schedule was strongly inspired
by Jurafsky &amp; Martin (2000):
</bodyText>
<listItem confidence="0.99886975">
• Sub-token level (3 lectures): computing mor-
phology by means of regular expressions, au-
tomata, and transducers.
• Token level and context (4 lectures): identify-
ing tokens and computing them by means of
tokenizing, edit distance, n-grams, and part-of-
speech tagging.
• Syntactic level (6 lectures): syntactic analysis
</listItem>
<bodyText confidence="0.7782992">
in terms of constituency, dependency, phrase
structure grammars and probabilistic context
free grammars; formal grammar types: compu-
tation of syntactic structure by means of pars-
ing strategies and parsing algorithms, and syn-
tactic resources in terms of treebanks.
The second part of the schedule built more on
Carstensen et al. (2004). It mainly dealt with se-
mantic issues in term of analysis, computation, and
resources.
</bodyText>
<page confidence="0.990366">
21
</page>
<table confidence="0.999825">
Semester Computational Linguistics Linguistic Computational
Modules Modules Modules
6 BA-Thesis, Oral Exam
5 Advanced Studies (Computational Linguistics Core Studies in Software
or Formal Linguistics) Theoretical Project
4 Core Studies in Computational Linguistics or Applied
Computer
3 Statistical Methods Algorithmic CL Formal Semantics Science
for CL
2 Logical Formal Syntax Advanced Programming
Foundations
1 Introduction Mathematical Foundations of Introduction to
to CL Foundations Linguistic Analysis Programming
</table>
<tableCaption confidence="0.999879">
Table 1: Modules in B.A. Computational Linguistics (75%)
</tableCaption>
<listItem confidence="0.999891857142857">
• predicate logic (2 lectures)
• propositional logic and inferences (2 lectures)
• compositional semantics and Lambda calculus
(1 lecture)
• lexical semantics including resources (2 lec-
tures)
• discourse semantics / pragmatics (1 lecture)
</listItem>
<bodyText confidence="0.999977615384615">
The schedule was rounded off by two lectures
on applications, in particular information extraction
and machine translation.
There were eight assessments during the semester
of which students had to pass 60%. Most of them
dealt with theoretical comprehension, two more
practical assessments involved an introduction to ba-
sic UNIX tools, and (probabilistic) parsing with the
NLTK tools (Bird et al., forthcoming). We decided
to split the written exam into two sub-exams, the first
one took place in half time the second one in the fi-
nal week of the semester. Thus students could better
focus on the topics at hand.
</bodyText>
<subsectionHeader confidence="0.676294">
3.1.2 Formal Foundations part 1:
Mathematical Foundations
</subsectionHeader>
<bodyText confidence="0.999896714285714">
Formal Foundations is held two hours a week and
is worth six credit points. The theory of formal
languages is a prerequisite for e.g. model-theoretic
semantics and parsing approaches. This lecture in
particular deals with mathematical foundations, for-
mal languages and formal grammars, regular expres-
sions and finite automata, context-free languages,
context-sensitive languages and Type-0 languages,
Turing machines, and computability theory. The
recommended reading includes Sch¨oning (2001),
Klabunde (1998), Partee et al. (1990), as well as
Hopcroft and Ullman (1979).
There were eight graded assessments and the stu-
dents had to pass 50% of the overall tasks .
</bodyText>
<subsectionHeader confidence="0.988098">
3.1.3 Foundations of Linguistic Analysis
</subsectionHeader>
<bodyText confidence="0.999996181818182">
The introduction to linguistics is also held two
hours a week and is worth four credit points. Lin-
guistic knowledge is a distinctive property of com-
putational linguistics. In this lecture students get a
thorough introduction to the core modules of the lan-
guage faculty: phonetics and phonology, morphol-
ogy, syntax, semantics, and pragmatics with a spe-
cial emphasis on linguistic phenomena of German.
The core reading was Meibauer et al. (2002).
There were ten small assessments of which the
students had to pass eight.
</bodyText>
<subsectionHeader confidence="0.549865">
3.1.4 Introduction to Programming
</subsectionHeader>
<bodyText confidence="0.999814333333333">
The fourth mandatory course is held four hours
a week and is worth six credit points. In this lec-
ture, students learn to devise algorithmic solutions
and implementations for problems related to Natu-
ral Language Processing. Moreover, the course in-
troduces basic principles of software engineering in
</bodyText>
<page confidence="0.991799">
22
</page>
<bodyText confidence="0.999941692307692">
order to equip the students with skills to develop cor-
rect and maintainable programs. These capabilities
are further facilitated in the Advanced Programming
course during the second semester and a comprehen-
sive hands-on software project during the advanced
phase of undergraduate studies.
Recommended reading is Demleitner (unpub-
lished), Lutz and Ascher (2007), Martelli (2006),
as well as the official Python documentation (van
Rossum, 2008).
There were ten programming assessments of
which the students had to hand in eight and earn half
of the points to be permitted to take the final exam.
</bodyText>
<subsectionHeader confidence="0.986007">
3.2 Local Conditions
3.2.1 Students
</subsectionHeader>
<bodyText confidence="0.999992666666667">
Students require higher education entrance quali-
fication and no other prerequisites. Language of in-
struction is German but students come from various
countries and speak a diversity of native languages,
including Bulgarian, Chinese, English, French, Ital-
ian, Japanese, Kurdish, Polish, Russian, Spanish,
Turkish, Turkmen and Ukrainian. About 40 stu-
dents enrolled in Computational Linguistics, about
two third of which classified themselves as program-
ming beginners. In general about 20% of the first
semester students failed at least one of the courses
first time.
</bodyText>
<subsectionHeader confidence="0.995055">
3.2.2 Realization of Courses
</subsectionHeader>
<bodyText confidence="0.999972789473684">
Three of the four courses under examination are
taught by faculty members holding a PhD (or a
comparable doctoral degree) and one by a member
of the faculty still completing his doctorate. The
courses are taught as lectures which are accompa-
nied by optional tutorial sessions. These tutorials
were coached by undergraduate student tutors who
mainly corrected and discussed the students’ assess-
ments. The students had to hand in assessments on a
regular basis which could either be solved as a group
or individually depending on the course. Passing a
substantial portion of the exercises was a prerequi-
site for being permitted to take the courses’ exams.
Each course provided its own wiki platform for the
students to communicate easily among themselves
as well as with student tutors and lecturers. The
wikis were also a common platform for publishing
example solutions by the tutors and keeping records
of answers to students’ questions.
</bodyText>
<sectionHeader confidence="0.541377" genericHeader="method">
4 Analysis of the Syllabi
</sectionHeader>
<bodyText confidence="0.999700916666667">
The individual courses were planned in accordance
with the sequence of topics in standard textbooks
such as Jurafsky and Martin (2000) and Carstensen
et al. (2004) for Introduction to Computational Lin-
guistics, Sch¨oning (2001) for Formal Foundations,
and Meibauer et al. (2002) for Foundations of Lin-
guistic Analysis. In Introduction to Programming
we used a hands-on manuscript (Demleitner, unpub-
lished).
The following list summarizes the main topics
that are dealt with in more than one syllabus. Com-
mon topics include:
</bodyText>
<listItem confidence="0.99991125">
• modules of linguistics: ICL, FLA
• regular expressions: ICL, FF, IP
• automata: ICL, FF
• grammar types: ICL, FF
• morphology: ICL, FLA
• segmentation, tokenization: ICL, FLA, IP
• n-grams: ICL, IP
• phrase-structure grammars: ICL, FF, FLA
• parsing: ICL, FF, IP
• lexical semantics: ICL, FLA
• model in semantics: ICL, FF
• discourse semantics, pragmatics: ICL, FLA
</listItem>
<bodyText confidence="0.999868636363637">
Before the semester started, the group of lectur-
ers met and arranged the general schedules of the
courses. During the semester, the lecturers happened
to lose track of the progression of other courses. In
some cases explicit cross-references were given, for
example in the case of lexical semantics, but most
of the time, concepts were (re-)introduced in each
course independently. Sometimes lecturers asked
students whether they were already familiar with
a newly introduced topic from other courses; then
there was a short discussion in class and students
</bodyText>
<page confidence="0.99541">
23
</page>
<bodyText confidence="0.999848930232558">
were reminded of previous mentions of that topic. In
general, the didactics of the individual courses were
not adapted to take account of such recurrence of
topics across the curriculum.
Nevertheless, the parallel fashion of the four
courses at hand seemed to be reasonable even in
this form. Students deemed the interdependence be-
tween the courses as appropriate in the final evalua-
tion of the courses. They gave it an average score of
2.052 with a standard deviation of 1.05 on a scale of
1 (very appropriate) to 6 (non-existent).
Our conclusion is that a slight rescheduling of
the courses would improve teaching efficiency in
the sense that lecturers could count on already in-
troduced materials and students could benefit from
recurring topics by exploring them in the context of
different disciplines. Table 2 depicts our proposed
schedule.
An important and easily realizable change that we
suggest is to ensure that all linguistic modules are
dealt with first in Foundation of Linguistic Anal-
ysis (FLA) before they are set into a more formal
and also computational setting in the Introduction to
Computational Linguistics (ICL). This could be re-
alized by starting FLA with morphology right from
the beginning, instead of introducing the linguistic
modules first which was also part of the introduc-
tion in ICL. FLA also entered the areas of lexicogra-
phy and psycho linguistics (aka the mental lexicon)
which could be skipped in future semesters. Lec-
tures on phonetics and phonology which were taught
after morphology could be rescheduled to the end
of the semester. Both topics are relevant for appli-
cations which were introduced in the final sessions
of ICL and also for subsequent optional seminars
in speech generation or speech synthesis in higher
semesters.
In Formal Foundations (FF) lectures on gram-
mars, the Chomsky hierarchy, and decision theory
took place in lectures 5 and 6. They could be post-
poned and lectures on automata moved forward in-
stead. This would ensure that both of these topics
are dealt with in FF after they have been introduced
in ICL. Formal Foundations provides a more formal
and deepened insight into these topics and should,
therefore, be encountered last.
In Introduction to Programming (IP) issues of al-
gorithms and analysis are a means to an end: they
are used in programming examples and assessments.
Therefore, such topics should be referred to in IP
only after they have been introduced in ICL. The
coordination of this already worked out well with
respect to n-grams and phrase structure grammars.
Lectures on segmentation and regular expressions
took place in the last third of the semester and could
be moved forward to have them closer to their intro-
duction in the other courses.
From a student’s perspective these changes would
result in a kind of spiral curriculum. For example,
the first encounter with constituency and syntactic
phrase structure would be in FLA, the course which
is least formal and relates most to secondary school
knowledge. Their second involvement with phrase
structure would be in ICL and was more formal
and also involved computational aspects of syntactic
analysis. Then, they would learn more on the formal
characteristics of grammars in FF, and finally, they
perceived it as an application in an IP programming
task. If these lectures are seen as stages on a com-
mon pathway of learning then they conform to the
idea of spiral learning: in course of time the students
return to the same concepts each time on a more ad-
vanced level.
Table 2 gives a contrastive overview of the four
course curricula and shows how the individual topics
could temporally related to one another to support an
iterative leaning approach.
The first column counts the semester’s teaching
units in the average winter semester (which includes
some public holidays). Introduction to Computa-
tional Linguistics (ICL) and Introduction to Pro-
gramming (IP) took place twice a week, Foun-
dations of Linguistic Analysis (FLA) and Formal
Foundations (FF) only once. The 25th session is fol-
lowed by another week of revision and final exams,
which is not included here.
</bodyText>
<sectionHeader confidence="0.999259" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.998999857142857">
We proposed an enhanced curriculum for teaching
parallel freshman’s courses in Computational Lin-
guistics, in the spirit of the newly revised bache-
lor’s program in Computational Linguistics at the
University of Heidelberg. In particular, we exam-
ined the first semester curriculum of four mandatory
courses: Introduction to Computational Linguis-
</bodyText>
<page confidence="0.995879">
24
</page>
<table confidence="0.996738418181818">
# Introduction to Formal Foundations of Introduction to
Computational Linguistics Foundations Linguistic Analysis Programming
1 sets, introduction
iterations, relations
2 introduction to morphology: morphemes data types
Computational Linguistics inflection, derivation
and linguistic modules
3 regular expression equivalence relation functions and
and automata function, induction methods
formal languages
4 morphology and syntax: PoS, strings, data structures,
finite automata topological fields control structures
5 morphology and automata: sequences
finite transducers DFAs and NFAs
6 tokenizer and NFAs, regular grammars data structures:
spelling editor regular expression dictionaries
7 tokenizing syntax: phrases encodings
and n-grams chunks, X-bar schema
8 tagging: rule-based, Pumping lemma, modules,
HMMs, Brill minimizing of automata packages, tests
9 tagging syntax: valency, semantic modules
roles, gram. functions
10 syntax and CFGs closures exercise: n-grams
constituency, dependency
11 grammar types, syntax: sentential level regular expressions
parsing CP/IP structures
12 parsing: bottom up, grammars, left-right regular expressions
top down derivation, Chomsky hierarchy
13 parsing: Earley semantics: meaning, PS grammar,
algorithm lexical semantics recursion
14 midterm exam decision theory file handling
15 treebanks and PCFCs parsing: CYK algorithm tuple, list
comprehensions
16 treebanks: semantics: compositional object-oriented
resources semantics programming: basics
17 semantics: predicate logic pushdown automata oo programming:
Turing machines, techniques
computability theory
18 Christmas puzzle: pragmatics: deixis, Christmas lecture
predicate logic and anaphora, information
model theory structure
19 semantics: propositional revision: oo programming:
logic and inferences Pumping lemma techniques
20 semantics: propositional pragmatics: speech acts exercise:
logic and inference conversational maxims, segmentation
presuppositions
21 semantics: compositional a simple grammar factory functions
semantics and A-calculus for English
22 semantics: lexical phonetics blocks and visibility
semantics
23 semantics: lexical revision exceptions
semantics
24 semantics: discourse phonology object
semantics customization
25 applications exam revision exam
</table>
<tableCaption confidence="0.999535">
Table 2: Re-organized curriculum of first semester courses
</tableCaption>
<page confidence="0.997155">
25
</page>
<bodyText confidence="0.997600461538462">
tics, Formal Foundations, Foundations of Linguis-
tic Analysis, and Introduction to Programming, and
identified common topics. When the four courses
were first held in parallel last semester, it happened
that recurring topics were introduced independently
without taking into account their previous mention
in other courses. For future semesters we suggest a
better alignment of recurring topics and sketch re-
arrangements of the courses’ schedules. Instead of
pruning recurrent topics, we think that from the per-
spective of the psychology of learning it is useful
for the students if the same concepts and ideas are
approached from different angles iteratively.
</bodyText>
<sectionHeader confidence="0.998935" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.998122928571428">
We are indebted to our co-instructors in Heidel-
berg: Anette Frank, teaching the Introduction to
Computational Linguistics, Philipp Cimiano teach-
ing Formal Foundations, as well as Matthias Har-
tung and Wolodja Wentland, co-teaching Introduc-
tion to Programming, for sharing their experiences
and commenting on versions of this paper. We
would also like to thank Anke Holler for valuable
input on the history of the Heidelberg B.A. program,
Karin Thumser-Dauth for pointing us to the work of
Jerome Bruner, Piklu Gupta for commenting on a
pre-final version and also for help with the English.
A special thank goes to three anonymous reviewers
for their very detailed and constructive comments.
</bodyText>
<sectionHeader confidence="0.9992" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998822">
Steven Bird, Ewan Klein, and Edward Loper. forthcom-
ing. Natural Language Processing in Python.
Jerome S. Bruner. 1960. The Process of Education. Har-
vard University Press, Cambridge, Mass.
Kai-Uwe Carstensen, Christian Ebert, Cornelia Endriss,
Susanne Jekat, Ralf Klabunde, Hagen Langer. eds.
2004. Computerlinguistik und Sprachtechnologie.
Eine Einf¨uhrung. Spektrum, Akademischer Verlag,
Heidelberg.
Markus Demleitner. unpublished. Programmieren I.
www.cl.uni-heidelberg.de/kurs/skripte/prog1/
html/
John E. Hopcroft and Jeffrey D. Ullman. 1979. Introduc-
tion to Automata Theory, Languages and Computation
Addison Wesley.
Daniel Jurafsky and James H. Martin. 2000. Speech
and Language Processing. An Introduction to Natural
Language Processing, Computational Linguistics, and
Speech Recognition. Prentice Hall Series in Artificial
Intelligence. Prentice Hall.
Ralf Klabunde. 1998. Formale Grundlagen der Linguis-
tik Narr, T¨ubingen.
Mark Lutz and David Ascher. 2007. Learning Python.
O’Reilly, 2nd Edition.
Alex Martelli. 2006. Python in a Nutshell. A Desktop
Quick Reference. O’Reilly, 2nd Edition.
J¨org Meibauer et al. eds. 2007. Einf¨uhrung in die ger-
manistische Linguistik. Metzler, Stuttgart.
Barbara Partee et al.. 1990. Mathematical Methods in
Linguistics. Kluwer, Dordrecht.
Guido van Rossum. 2008. Python Tutorial. Python Soft-
wareFoundation. docs.python.org/tut/tut.html
Uwe Sch¨oning. 2001. Theoretische Informatik kurzge-
fasst. Spektrum Akademischer Verlag in Elsevier.
</reference>
<page confidence="0.99805">
26
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.784759">
<title confidence="0.867827">CL curriculum: the benefits of redundancy</title>
<author confidence="0.872261">Heike</author>
<affiliation confidence="0.9990225">Department of University of</affiliation>
<address confidence="0.995374">78457 Konstanz,</address>
<email confidence="0.984661">Heike.Zinsmeister@uni-konstanz.de</email>
<abstract confidence="0.998957">In the course of the European Bologna accord on higher education, German universities have been reorganizing their traditional ”Magister” and ”Diplom” studies into modularized bachelor’s and master’s programs. This revision provides a chance to update the programs. In this paper we introduce the curriculum of a first semester B.A. program in Computational Linguistics which was taught for the first time last semester. In addition, we analyze the syllabi of four mandatory courses of the first semester to identify overlapping content which led to redundancies. We suggest for future semesters to reorganize the schedules in a way that students encounter recurring topics iteratively in a constructive way.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>forthcoming</author>
</authors>
<booktitle>Natural Language Processing in Python.</booktitle>
<marker>forthcoming, </marker>
<rawString>Steven Bird, Ewan Klein, and Edward Loper. forthcoming. Natural Language Processing in Python.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jerome S Bruner</author>
</authors>
<title>The Process of Education.</title>
<date>1960</date>
<publisher>Harvard University Press,</publisher>
<location>Cambridge, Mass.</location>
<contexts>
<context position="3203" citStr="Bruner, 1960" startWordPosition="506" endWordPosition="507">eep the common topics and even the redundancy of introducing them in more than one course only. Iterative reintroduction could be helpful for the students if it is accompanied by a reference to the earlier mention as well as a motivation of the specific relevance for the course at hand. We expect that such an iterative approach reinforces understanding since it allows the students to build upon their prior knowledge and, furthermore, to approach the very same concept from different perspectives. This iterative method is inspired by the idea of spiral learning in the sense of Jerome S. Bruner (Bruner, 1960) which builds on a constructivist view on learning. It assumes that learning is an active process in which learners construct new ideas or concepts based upon 19 Proceedings of the Third Workshop on Issues in Teaching Computational Linguistics (TeachCL-08), pages 19–26, Columbus, Ohio, USA, June 2008. c�2008 Association for Computational Linguistics their prior knowledge. A curriculum can support this process if it revisits its basic ideas repeatedly: ”the spiral curriculum [..] turns back on itself at higher levels” (Bruner, 1960, p.53). The rest of this paper is organized as follows. First, </context>
</contexts>
<marker>Bruner, 1960</marker>
<rawString>Jerome S. Bruner. 1960. The Process of Education. Harvard University Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<date>2004</date>
<booktitle>Computerlinguistik und Sprachtechnologie. Eine Einf¨uhrung.</booktitle>
<editor>Kai-Uwe Carstensen, Christian Ebert, Cornelia Endriss, Susanne Jekat, Ralf Klabunde, Hagen Langer. eds.</editor>
<publisher>Spektrum, Akademischer Verlag,</publisher>
<location>Heidelberg.</location>
<contexts>
<context position="11149" citStr="(2004)" startWordPosition="1730" endWordPosition="1730">he foundations of Computational Linguistics, its research objectives and research methods. It provides an overall survey of the field: the levels of language description, formal-mathematical and logical models as well as algorithmic approaches for processing such formal models. Specific topics are: dealing with ambiguities, approximation of linguistic regularities, and the relation of language and knowledge; some applications of Computational Linguistics are also introduced. Mandatory readings are selected sections from Jurafsky &amp; Martin (2000), complemented by chapters from Carstensen et al. (2004) and Bird et al. (forthcoming). This course is seen as the backbone of the first semester curriculum. We therefore list the lectures in detail. The content of the other three courses is only briefly described below and will be discussed in Section 4. The first part of the schedule was strongly inspired by Jurafsky &amp; Martin (2000): • Sub-token level (3 lectures): computing morphology by means of regular expressions, automata, and transducers. • Token level and context (4 lectures): identifying tokens and computing them by means of tokenizing, edit distance, n-grams, and part-ofspeech tagging. •</context>
<context position="17624" citStr="(2004)" startWordPosition="2723" endWordPosition="2723">ng on the course. Passing a substantial portion of the exercises was a prerequisite for being permitted to take the courses’ exams. Each course provided its own wiki platform for the students to communicate easily among themselves as well as with student tutors and lecturers. The wikis were also a common platform for publishing example solutions by the tutors and keeping records of answers to students’ questions. 4 Analysis of the Syllabi The individual courses were planned in accordance with the sequence of topics in standard textbooks such as Jurafsky and Martin (2000) and Carstensen et al. (2004) for Introduction to Computational Linguistics, Sch¨oning (2001) for Formal Foundations, and Meibauer et al. (2002) for Foundations of Linguistic Analysis. In Introduction to Programming we used a hands-on manuscript (Demleitner, unpublished). The following list summarizes the main topics that are dealt with in more than one syllabus. Common topics include: • modules of linguistics: ICL, FLA • regular expressions: ICL, FF, IP • automata: ICL, FF • grammar types: ICL, FF • morphology: ICL, FLA • segmentation, tokenization: ICL, FLA, IP • n-grams: ICL, IP • phrase-structure grammars: ICL, FF, FL</context>
</contexts>
<marker>2004</marker>
<rawString>Kai-Uwe Carstensen, Christian Ebert, Cornelia Endriss, Susanne Jekat, Ralf Klabunde, Hagen Langer. eds. 2004. Computerlinguistik und Sprachtechnologie. Eine Einf¨uhrung. Spektrum, Akademischer Verlag, Heidelberg.</rawString>
</citation>
<citation valid="false">
<authors>
<author>unpublished Programmieren I</author>
</authors>
<note>www.cl.uni-heidelberg.de/kurs/skripte/prog1/ html/</note>
<marker>I, </marker>
<rawString>Markus Demleitner. unpublished. Programmieren I. www.cl.uni-heidelberg.de/kurs/skripte/prog1/ html/</rawString>
</citation>
<citation valid="true">
<authors>
<author>John E Hopcroft</author>
<author>Jeffrey D Ullman</author>
</authors>
<title>Introduction to Automata Theory, Languages and Computation</title>
<date>1979</date>
<publisher>Addison Wesley.</publisher>
<contexts>
<context position="14282" citStr="Hopcroft and Ullman (1979)" startWordPosition="2193" endWordPosition="2196">.2 Formal Foundations part 1: Mathematical Foundations Formal Foundations is held two hours a week and is worth six credit points. The theory of formal languages is a prerequisite for e.g. model-theoretic semantics and parsing approaches. This lecture in particular deals with mathematical foundations, formal languages and formal grammars, regular expressions and finite automata, context-free languages, context-sensitive languages and Type-0 languages, Turing machines, and computability theory. The recommended reading includes Sch¨oning (2001), Klabunde (1998), Partee et al. (1990), as well as Hopcroft and Ullman (1979). There were eight graded assessments and the students had to pass 50% of the overall tasks . 3.1.3 Foundations of Linguistic Analysis The introduction to linguistics is also held two hours a week and is worth four credit points. Linguistic knowledge is a distinctive property of computational linguistics. In this lecture students get a thorough introduction to the core modules of the language faculty: phonetics and phonology, morphology, syntax, semantics, and pragmatics with a special emphasis on linguistic phenomena of German. The core reading was Meibauer et al. (2002). There were ten small</context>
</contexts>
<marker>Hopcroft, Ullman, 1979</marker>
<rawString>John E. Hopcroft and Jeffrey D. Ullman. 1979. Introduction to Automata Theory, Languages and Computation Addison Wesley.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Jurafsky</author>
<author>James H Martin</author>
</authors>
<title>Speech and Language Processing. An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition. Prentice Hall Series in Artificial Intelligence.</title>
<date>2000</date>
<publisher>Prentice Hall.</publisher>
<contexts>
<context position="17595" citStr="Jurafsky and Martin (2000)" startWordPosition="2715" endWordPosition="2718">ther be solved as a group or individually depending on the course. Passing a substantial portion of the exercises was a prerequisite for being permitted to take the courses’ exams. Each course provided its own wiki platform for the students to communicate easily among themselves as well as with student tutors and lecturers. The wikis were also a common platform for publishing example solutions by the tutors and keeping records of answers to students’ questions. 4 Analysis of the Syllabi The individual courses were planned in accordance with the sequence of topics in standard textbooks such as Jurafsky and Martin (2000) and Carstensen et al. (2004) for Introduction to Computational Linguistics, Sch¨oning (2001) for Formal Foundations, and Meibauer et al. (2002) for Foundations of Linguistic Analysis. In Introduction to Programming we used a hands-on manuscript (Demleitner, unpublished). The following list summarizes the main topics that are dealt with in more than one syllabus. Common topics include: • modules of linguistics: ICL, FLA • regular expressions: ICL, FF, IP • automata: ICL, FF • grammar types: ICL, FF • morphology: ICL, FLA • segmentation, tokenization: ICL, FLA, IP • n-grams: ICL, IP • phrase-st</context>
<context position="11093" citStr="Jurafsky &amp; Martin (2000)" startWordPosition="1719" endWordPosition="1722"> is held four hours a week and is worth six credit points. It introduces the foundations of Computational Linguistics, its research objectives and research methods. It provides an overall survey of the field: the levels of language description, formal-mathematical and logical models as well as algorithmic approaches for processing such formal models. Specific topics are: dealing with ambiguities, approximation of linguistic regularities, and the relation of language and knowledge; some applications of Computational Linguistics are also introduced. Mandatory readings are selected sections from Jurafsky &amp; Martin (2000), complemented by chapters from Carstensen et al. (2004) and Bird et al. (forthcoming). This course is seen as the backbone of the first semester curriculum. We therefore list the lectures in detail. The content of the other three courses is only briefly described below and will be discussed in Section 4. The first part of the schedule was strongly inspired by Jurafsky &amp; Martin (2000): • Sub-token level (3 lectures): computing morphology by means of regular expressions, automata, and transducers. • Token level and context (4 lectures): identifying tokens and computing them by means of tokenizi</context>
</contexts>
<marker>Jurafsky, Martin, 2000</marker>
<rawString>Daniel Jurafsky and James H. Martin. 2000. Speech and Language Processing. An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition. Prentice Hall Series in Artificial Intelligence. Prentice Hall.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ralf Klabunde</author>
</authors>
<title>Formale Grundlagen der Linguistik Narr,</title>
<date>1998</date>
<location>T¨ubingen.</location>
<contexts>
<context position="14221" citStr="Klabunde (1998)" startWordPosition="2184" endWordPosition="2185">ents could better focus on the topics at hand. 3.1.2 Formal Foundations part 1: Mathematical Foundations Formal Foundations is held two hours a week and is worth six credit points. The theory of formal languages is a prerequisite for e.g. model-theoretic semantics and parsing approaches. This lecture in particular deals with mathematical foundations, formal languages and formal grammars, regular expressions and finite automata, context-free languages, context-sensitive languages and Type-0 languages, Turing machines, and computability theory. The recommended reading includes Sch¨oning (2001), Klabunde (1998), Partee et al. (1990), as well as Hopcroft and Ullman (1979). There were eight graded assessments and the students had to pass 50% of the overall tasks . 3.1.3 Foundations of Linguistic Analysis The introduction to linguistics is also held two hours a week and is worth four credit points. Linguistic knowledge is a distinctive property of computational linguistics. In this lecture students get a thorough introduction to the core modules of the language faculty: phonetics and phonology, morphology, syntax, semantics, and pragmatics with a special emphasis on linguistic phenomena of German. The </context>
</contexts>
<marker>Klabunde, 1998</marker>
<rawString>Ralf Klabunde. 1998. Formale Grundlagen der Linguistik Narr, T¨ubingen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Lutz</author>
<author>David Ascher</author>
</authors>
<date>2007</date>
<booktitle>Learning Python. O’Reilly, 2nd Edition.</booktitle>
<contexts>
<context position="15632" citStr="Lutz and Ascher (2007)" startWordPosition="2405" endWordPosition="2408"> hours a week and is worth six credit points. In this lecture, students learn to devise algorithmic solutions and implementations for problems related to Natural Language Processing. Moreover, the course introduces basic principles of software engineering in 22 order to equip the students with skills to develop correct and maintainable programs. These capabilities are further facilitated in the Advanced Programming course during the second semester and a comprehensive hands-on software project during the advanced phase of undergraduate studies. Recommended reading is Demleitner (unpublished), Lutz and Ascher (2007), Martelli (2006), as well as the official Python documentation (van Rossum, 2008). There were ten programming assessments of which the students had to hand in eight and earn half of the points to be permitted to take the final exam. 3.2 Local Conditions 3.2.1 Students Students require higher education entrance qualification and no other prerequisites. Language of instruction is German but students come from various countries and speak a diversity of native languages, including Bulgarian, Chinese, English, French, Italian, Japanese, Kurdish, Polish, Russian, Spanish, Turkish, Turkmen and Ukrai</context>
</contexts>
<marker>Lutz, Ascher, 2007</marker>
<rawString>Mark Lutz and David Ascher. 2007. Learning Python. O’Reilly, 2nd Edition.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alex Martelli</author>
</authors>
<title>Python in a Nutshell. A Desktop Quick Reference. O’Reilly, 2nd Edition.</title>
<date>2006</date>
<contexts>
<context position="15649" citStr="Martelli (2006)" startWordPosition="2409" endWordPosition="2410">th six credit points. In this lecture, students learn to devise algorithmic solutions and implementations for problems related to Natural Language Processing. Moreover, the course introduces basic principles of software engineering in 22 order to equip the students with skills to develop correct and maintainable programs. These capabilities are further facilitated in the Advanced Programming course during the second semester and a comprehensive hands-on software project during the advanced phase of undergraduate studies. Recommended reading is Demleitner (unpublished), Lutz and Ascher (2007), Martelli (2006), as well as the official Python documentation (van Rossum, 2008). There were ten programming assessments of which the students had to hand in eight and earn half of the points to be permitted to take the final exam. 3.2 Local Conditions 3.2.1 Students Students require higher education entrance qualification and no other prerequisites. Language of instruction is German but students come from various countries and speak a diversity of native languages, including Bulgarian, Chinese, English, French, Italian, Japanese, Kurdish, Polish, Russian, Spanish, Turkish, Turkmen and Ukrainian. About 40 st</context>
</contexts>
<marker>Martelli, 2006</marker>
<rawString>Alex Martelli. 2006. Python in a Nutshell. A Desktop Quick Reference. O’Reilly, 2nd Edition.</rawString>
</citation>
<citation valid="true">
<date>2007</date>
<booktitle>Einf¨uhrung in die germanistische Linguistik.</booktitle>
<editor>J¨org Meibauer et al. eds.</editor>
<location>Metzler, Stuttgart.</location>
<contexts>
<context position="15632" citStr="(2007)" startWordPosition="2408" endWordPosition="2408">d is worth six credit points. In this lecture, students learn to devise algorithmic solutions and implementations for problems related to Natural Language Processing. Moreover, the course introduces basic principles of software engineering in 22 order to equip the students with skills to develop correct and maintainable programs. These capabilities are further facilitated in the Advanced Programming course during the second semester and a comprehensive hands-on software project during the advanced phase of undergraduate studies. Recommended reading is Demleitner (unpublished), Lutz and Ascher (2007), Martelli (2006), as well as the official Python documentation (van Rossum, 2008). There were ten programming assessments of which the students had to hand in eight and earn half of the points to be permitted to take the final exam. 3.2 Local Conditions 3.2.1 Students Students require higher education entrance qualification and no other prerequisites. Language of instruction is German but students come from various countries and speak a diversity of native languages, including Bulgarian, Chinese, English, French, Italian, Japanese, Kurdish, Polish, Russian, Spanish, Turkish, Turkmen and Ukrai</context>
</contexts>
<marker>2007</marker>
<rawString>J¨org Meibauer et al. eds. 2007. Einf¨uhrung in die germanistische Linguistik. Metzler, Stuttgart.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Barbara Partee</author>
</authors>
<date>1990</date>
<booktitle>Mathematical Methods in Linguistics.</booktitle>
<publisher>Kluwer,</publisher>
<location>Dordrecht.</location>
<marker>Partee, 1990</marker>
<rawString>Barbara Partee et al.. 1990. Mathematical Methods in Linguistics. Kluwer, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Guido van Rossum</author>
</authors>
<title>Python Tutorial. Python SoftwareFoundation. docs.python.org/tut/tut.html Uwe Sch¨oning.</title>
<date>2008</date>
<booktitle>Theoretische Informatik kurzgefasst. Spektrum Akademischer Verlag in Elsevier.</booktitle>
<marker>van Rossum, 2008</marker>
<rawString>Guido van Rossum. 2008. Python Tutorial. Python SoftwareFoundation. docs.python.org/tut/tut.html Uwe Sch¨oning. 2001. Theoretische Informatik kurzgefasst. Spektrum Akademischer Verlag in Elsevier.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>