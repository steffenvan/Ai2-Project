<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.007552">
<title confidence="0.993172">
Better Evaluation for Grammatical Error Correction
</title>
<author confidence="0.996686">
Daniel Dahlmeier1 and Hwee Tou Ng1,2
</author>
<affiliation confidence="0.993375">
1NUS Graduate School for Integrative Sciences and Engineering
2Department of Computer Science, National University of Singapore
</affiliation>
<email confidence="0.992883">
{danielhe,nght}@comp.nus.edu.sg
</email>
<sectionHeader confidence="0.996608" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999949">
We present a novel method for evaluating
grammatical error correction. The core of
our method, which we call MaxMatch (M2),
is an algorithm for efficiently computing the
sequence of phrase-level edits between a
source sentence and a system hypothesis that
achieves the highest overlap with the gold-
standard annotation. This optimal edit se-
quence is subsequently scored using F1 mea-
sure. We test our M2 scorer on the Helping
Our Own (HOO) shared task data and show
that our method results in more accurate eval-
uation for grammatical error correction.
</bodyText>
<sectionHeader confidence="0.998783" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.996092960784314">
Progress in natural language processing (NLP) re-
search is driven and measured by automatic eval-
uation methods. Automatic evaluation allows fast
and inexpensive feedback during development, and
objective and reproducible evaluation during testing
time. Grammatical error correction is an important
NLP task with useful applications for second lan-
guage learning. Evaluation for error correction is
typically done by computing F1 measure between
a set of proposed system edits and a set of human-
annotated gold-standard edits (Leacock et al., 2010).
Unfortunately, evaluation is complicated by the
fact that the set of edit operations for a given system
hypothesis is ambiguous. This is due to two reasons.
First, the set of edits that transforms one string into
another is not necessarily unique, even at the token
level. Second, edits can consist of longer phrases
which introduce additional ambiguity. To see how
this can affect evaluation, consider the following
source sentence and system hypothesis from the re-
cent Helping Our Own (HOO) shared task (Dale and
Kilgarriff, 2011) on grammatical error correction:
Source: Our baseline system feeds word
into PB-SMT pipeline.
Hypot.: Our baseline system feeds a word
into PB-SMT pipeline.
The HOO evaluation script extracts the system edit
(c —* a), i.e., inserting the article a. Unfortunately,
the gold-standard annotation instead contains the ed-
its (word —* {a word, words}). Although the ex-
tracted system edit results in the same corrected sen-
tence as the first gold-standard edit option, the sys-
tem hypothesis was considered to be invalid.
In this work, we propose a method, called Max-
Match (M2), to overcome this problem. The key idea
is that if there are multiple possible ways to arrive
at the same correction, the system should be eval-
uated according to the set of edits that matches the
gold-standard as often as possible. To this end, we
propose an algorithm for efficiently computing the
set of phrase-level edits with the maximum overlap
with the gold standard. The edits are subsequently
scored using F1 measure. We test our method in the
context of the HOO shared task and show that our
method results in a more accurate evaluation for er-
ror correction.
The remainder of this paper is organized as fol-
lows: Section 2 describes the proposed method; Sec-
tion 3 presents experimental results; Section 4 dis-
cusses some details of grammar correction evalua-
tion; and Section 5 concludes the paper.
</bodyText>
<page confidence="0.935781666666667">
568
2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 568–572,
Montr´eal, Canada, June 3-8, 2012. c�2012 Association for Computational Linguistics
</page>
<sectionHeader confidence="0.966966" genericHeader="introduction">
2 Method
</sectionHeader>
<bodyText confidence="0.997550625">
We begin by establishing some notation. We con-
sider a set of source sentences 5 = {s1, ... , sn} to-
gether with a set of hypotheses H = {h1, ... , hn}
generated by an error correction system. Let G =
{g1, ... , gn} be the set of gold standard annota-
tions for the same sentences. Each annotation gi =
{g1i , ... , gr i } is a set of edits. An edit is a triple
(a, b, C), consisting of:
</bodyText>
<listItem confidence="0.914965636363636">
• start and end (token-) offsets a and b with re-
spect to a source sentence,
• a correction C. For gold-standard edits, C is a
set containing one or more possible corrections.
For system edits, C is a single correction.
Evaluation of the system output involves the follow-
ing two steps:
1. Extracting a set of system edits ei for each
source-hypothesis pair (si, hi).
2. Evaluating the system edits for the complete
test set with respect to the gold standard G.
</listItem>
<bodyText confidence="0.999963857142857">
The remainder of this section describes a method for
solving these two steps. We start by describing how
to construct an edit lattice from a source-hypothesis
pair. Then, we show that finding the optimal se-
quence of edits is equivalent to solving a shortest
path search through the lattice. Finally, we describe
how to evaluate the edits using F1 measure.
</bodyText>
<subsectionHeader confidence="0.991433">
2.1 Edit lattice
</subsectionHeader>
<bodyText confidence="0.9999123125">
We start from the well-established Levenshtein dis-
tance (Levenshtein, 1966), which is defined as the
minimum number of insertions, deletions, and sub-
stitutions needed to transform one string into an-
other. The Levenshtein distance between a source
sentence si = s1i,...,ski and a hypothesis hi =
h1i, ... , hl i can be efficiently computed using a two
dimensional matrix that is filled using a classic dy-
namic programming algorithm. We assume that
both si and hi have been tokenized. The matrix for
the example from Section 1 is shown in Figure 1. By
performing a simple breadth-first search, similar to
the Viterbi algorithm, we can extract the lattice of
all shortest paths that lead from the top-left corner
to the bottom-right corner of the Levenshtein ma-
trix. Each vertex in the lattice corresponds to a cell
</bodyText>
<table confidence="0.881003272727273">
Our baseline
0 1 2 3 4 5 6 7 8 9 10
Our 1 0 1 2 3 4 5 6 7 8 9
baseline 2 1 0 1 2 3 4 5 6 7 8
system 3 2 1 0 1 2 3 4 5 6 7
feeds 4 3 2 1 0 1 2 3 4 5 6
word 5 4 3 2 1 1 1 2 3 4 5
into 6 5 4 3 2 2 2 1 2 3 4
PB-SMT 7 6 5 4 3 3 3 2 1 2 3
pipeline 8 7 6 5 4 4 4 3 2 1 2
. 9 8 7 6 5 5 5 4 3 2 1
</table>
<figureCaption confidence="0.9522265">
Figure 1: The Levenshtein matrix and the shortest path
for a source sentence “Our baseline system feeds word
into PB-SMT pipeline .” and a hypothesis “Our baseline
system feeds a word into PB-SMT pipeline .”
</figureCaption>
<bodyText confidence="0.999976620689655">
in the Levenshtein matrix, and each edge in the lat-
tice corresponds to an atomic edit operation: insert-
ing a token, deleting a token, substituting a token,
or leaving a token unchanged. Each path through
the lattice corresponds to a shortest sequence of ed-
its that transform si into hi. We assign a unit cost to
each edge in the lattice.
We have seen that annotators can use longer
phrases and that phrases can include un-
changed words from the context, e.g., the
gold edit from the example in Section 1 is
(4, 5, word, {a word, words}). However, it seems
unrealistic to allow an arbitrary number of un-
changed words in an edit. In particular, we want to
avoid very large edits that cover complete sentences.
Therefore, we limit the number of unchanged words
by a parameter u. To allow for phrase-level edits,
we add transitive edges to the lattice as long as the
number of unchanged words in the newly added edit
is not greater than u and the edit changes at least one
word. Let e1 = (a1, b1, C1) and e2 = (a2, b2, C2)
be two edits corresponding to adjacent edges in the
lattice, with the first end offset b1 being equal to the
second start offset a2. We can combine them into a
new edit e3 = (a1, b2, C1 + C2), where C1 + C2 is
the concatenation of strings C1 and C2. The cost of
a transitive edge is the sum of the costs of its parts.
The lattice extracted from the example sentence is
shown in Figure 2.
</bodyText>
<subsectionHeader confidence="0.996118">
2.2 Finding maximally matching edit sequence
</subsectionHeader>
<bodyText confidence="0.824445833333333">
Our goal is to find the sequence of edits ei with
the maximum overlap with the gold standard. Let
L = (V, E) be the edit lattice graph from the last
section. We change the cost of each edge whose cor-
system feeds a word into PB-SMT
pipeline .
</bodyText>
<page confidence="0.866067">
569
</page>
<figureCaption confidence="0.999726">
Figure 2: The edit lattice for “Our baseline system feeds (c → a) word into PB-SMT pipeline .” Edge costs are shown
in parentheses. The edge from (4,4) to (5,6) matches the gold annotation and carries a negative cost.
</figureCaption>
<figure confidence="0.581465">
word into/a word into (3)
PB-SMT (1) pipeline (1) . (1)
6,7 7,8 8,9 9,10
4,4
word/a word (-45)
into (1)
feeds (1) 5,6
ε/a (1)
word (1)
feeds/feeds a (2)
4,5
system (1)
3,3
Our (1) baseline (1)
0,0 1,1 2,2
system feeds/system feeds a (3)
feeds word/feeds a word (3)
</figure>
<bodyText confidence="0.949183">
responding edit has a match in the gold standard to
−(u + 1) × |E|. An edit e matches a gold edit g
iff they have the same offsets and e’s correction is
included in g:
</bodyText>
<equation confidence="0.9770295">
match(e, g) ⇔ e.a = g.a ∧ e.b = g.b ∧ e.0 ∈ g.0
(1)
</equation>
<bodyText confidence="0.881628571428572">
Then, we perform a single-source shortest path
search with negative edge weights from the start to
the end vertex1. This can be done efficiently, for ex-
ample with the Bellman-Ford algorithm (Cormen et
al., 2001). As the lattice is acyclic, the algorithm is
guaranteed to terminate and return a shortest path.
Theorem 1. The set of edits corresponding to the
shortest path has the maximum overlap with the gold
standard annotation.
Proof. Let e = e1, ... , ek be the edit sequence cor-
responding to the shortest path and let p be the num-
ber of matched edits. Assume that there exists an-
other edit sequence e0 with higher total edge weights
but p0 &gt; p matching edits. Then we have
</bodyText>
<equation confidence="0.999709">
p(−(u + 1)|E|) + q ≤ p0(−(u + 1)|E|) + q0(2)
⇔ (q − q0) ≤ (p0 − p)(−(u + 1)|E|),
</equation>
<bodyText confidence="0.99994">
where q and q0 denote the combined cost of all non-
matching edits in the two paths, respectively. Be-
cause p0 − p ≥ 1, the right hand side is at most
−(u + 1)|E|. Because q and q0 are positive and
bounded by (u + 1)|E|, the left hand side cannot be
smaller than or equal to −(u + 1)|E|. This is a con-
tradiction. Therefore there cannot exist such an edit
sequence e0, and e is the sequence with the maxi-
mum overlap with the gold-standard annotation.
</bodyText>
<footnote confidence="0.967406333333333">
1To break ties between non-matching edges, we add a small
cost C « 1 to all non-matching edges, thus favoring paths that
use fewer edges, everything else being equal.
</footnote>
<subsectionHeader confidence="0.999365">
2.3 Evaluating edits
</subsectionHeader>
<bodyText confidence="0.9984635">
What is left to do is to evaluate the set of edits
with respect to the gold standard. This is done by
computing precision, recall, and F1 measure (van
Rijsbergen, 1979) between the set of system edits
{e1, ... , en} and the set of gold edits {g1, ... , gn}
for all sentences
</bodyText>
<equation confidence="0.999926571428571">
P = EZ 1 |ei ∩ gi (3)
E&apos;1 |ei|
R
= E&apos;1 |ei ∩ gi |(4)
EZ 1 |gi|
P × R (5)
P + R,
</equation>
<bodyText confidence="0.965513333333333">
where we define the intersection between ei and gi
as
ei ∩ gi = {e ∈ ei  |∃ g ∈ gi(match(e, g))}. (6)
</bodyText>
<sectionHeader confidence="0.9934" genericHeader="method">
3 Experiments and Results
</sectionHeader>
<bodyText confidence="0.999965583333333">
We experimentally test our M2 method in the con-
text of the HOO shared task. The HOO test data2
consists of text fragments from NLP papers to-
gether with manually-created gold-standard correc-
tions (see (Dale and Kilgarriff, 2011) for details).
We test our method by re-scoring the best runs of
the participating teams3 in the HOO shared task with
our M2 scorer and comparing the scores with the of-
ficial HOO scorer, which simply uses GNU wdiff4
to extract system edits. We obtain each system’s
output and segment it at the sentence level accord-
ing to the gold standard sentence segmentation. The
</bodyText>
<footnote confidence="0.999597">
2Available at http://groups.google.com/group/hoo-nlp/ after
registration.
3Except one team that did not submit any plain text output.
4http://www.gnu.org/s/wdiff/
</footnote>
<equation confidence="0.873909">
F1 = 2 ×
</equation>
<page confidence="0.986932">
570
</page>
<note confidence="0.862583666666667">
M2 scorer ... should basic translational unit be (word --+ a word) ...
HOO scorer ... should basic translational unit be *(e --+ a) word ...
M2 scorer ... development set similar (with --+ to) (e --+ the) test set ...
HOO scorer ... development set similar *(with --+ to the) test set ...
M2 scorer (e --+ The) *(Xinhua portion of --+ xinhua portion of) the English Gigaword3 ...
HOO scorer *(Xinhua --+ The xinhua) portion of the English Gigaword3 ...
</note>
<tableCaption confidence="0.989383">
Table 2: Examples of different edits extracted by the M2 scorer and the official HOO scorer. Edits that do not match
the gold-standard annotation are marked with an asterisk (*).
</tableCaption>
<table confidence="0.999788428571428">
Team HOO scorer M2 scorer
P R F1 P R F1
JU (0) 10.39 3.78 5.54 12.30 4.45 6.53
LI (8) 20.86 3.22 5.57 21.12 3.22 5.58
NU (0) 29.10 7.38 11.77 31.09 7.85 12.54
UI (1) 50.72 13.34 21.12 54.61 14.57 23.00
UT (1) 5.01 4.07 4.49 5.72 4.45 5.01
</table>
<tableCaption confidence="0.976925">
Table 1: Results for participants in the HOO shared task.
The run of the system is shown in parentheses.
</tableCaption>
<bodyText confidence="0.999977631578948">
source sentences, system hypotheses, and correc-
tions are tokenized using the Penn Treebank stan-
dard (Marcus et al., 1993). The character edit offsets
are automatically converted to token offsets. We set
the parameter u to 2, allowing up to two unchanged
words per edit. The results are shown in Table 1.
Note that the M2 scorer and the HOO scorer adhere
to the same score definition and only differ in the
way the system edits are computed. We can see that
the M2 scorer results in higher scores than the offi-
cial scorer for all systems, showing that the official
scorer missed some valid edits. For example, the
M2 scorer finds 155 valid edits for the UI system
compared to 141 found by the official scorer, and 83
valid edits for the NU system, compared to 78 by
the official scorer. We manually inspect the output
of the scorers and find that the M2 scorer indeed ex-
tracts the correct edits matching the gold standard
where possible. Examples are shown in Table 2.
</bodyText>
<sectionHeader confidence="0.999738" genericHeader="method">
4 Discussion
</sectionHeader>
<bodyText confidence="0.999986666666666">
The evaluation framework proposed in this work dif-
fers slightly from the one in the HOO shared task.
Sentence-by-sentence. We compute the edits
between source-hypothesis sentence pairs, while
the HOO scorer computes edits at the document
level. As the HOO data comes in a sentence-
segmented format, both approaches are equivalent,
while sentence-by-sentence is easier to work with.
Token-level offsets. In our work, the start and
end of an edit are given as token offsets, while the
HOO data uses character offsets. Character offsets
make the evaluation procedure very brittle as a small
change, e.g., an additional whitespace character, will
affect all subsequent edits. Character offsets also in-
troduce ambiguities in the annotation, e.g., whether
a comma is part of the preceding token.
Alternative scoring. The HOO shared task de-
fines three different scores: detection, recognition,
and correction. Effectively, all three scores are F1
measures and only differ in the conditions on when
an edit is counted as valid. Additionally, each score
is reported under a “with bonus” alternative, where
a system receives rewards for missed optional ed-
its. The F1 measure defined in Section 2.3 is equiv-
alent to correction without bonus. Our method can
be used to compute detection and recognition scores
and scores with bonus as well.
</bodyText>
<sectionHeader confidence="0.999261" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999933888888889">
We have presented a novel method, called Max-
Match (M2), for evaluating grammatical error cor-
rection. Our method computes the sequence of
phrase-level edits that achieves the highest over-
lap with the gold-standard annotation. Experi-
ments on the HOO data show that our method
overcomes deficiencies in the current evaluation
method. The M2 scorer is available for download
at http://nlp.comp.nus.edu.sg/software/.
</bodyText>
<sectionHeader confidence="0.998823" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999140333333333">
We thank Chang Liu for comments on an earlier
draft. This research is supported by the Singa-
pore National Research Foundation under its Inter-
national Research Centre @ Singapore Funding Ini-
tiative and administered by the IDM Programme Of-
fice.
</bodyText>
<page confidence="0.996587">
571
</page>
<sectionHeader confidence="0.993888" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99993352631579">
T. Cormen, C.E. Leiserson, R.L. Rivest, and C. Stein.
2001. Introduction to Algorithms. MIT Press, Cam-
bridge, MA.
R. Dale and A. Kilgarriff. 2011. Helping Our Own: The
HOO 2011 pilot shared task. In Proceedings of the
2011 European Workshop on Natural Language Gen-
eration.
C. Leacock, M. Chodorow, M. Gamon, and J. Tetreault,
2010. Automated Grammatical Error Detection for
Language Learners, chapter 5. Morgan and Claypool
Publishers.
V. Levenshtein. 1966. Binary codes capable of correct-
ing deletions, insertions, and reversals. Soviet Physics
Doklady, 10(8):707–710.
M.P. Marcus, M.A. Marcinkiewicz, and B. Santorini.
1993. Building a large annotated corpus of English:
The Penn Treebank. Computational Linguistics, 19.
C. J. van Rijsbergen. 1979. Information Retrieval. But-
terworth, 2nd edition.
</reference>
<page confidence="0.997413">
572
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.573463">
<title confidence="0.997077">Better Evaluation for Grammatical Error Correction</title>
<author confidence="0.846559">Tou</author>
<affiliation confidence="0.867451">Graduate School for Integrative Sciences and of Computer Science, National University of</affiliation>
<email confidence="0.85015">danielhe@comp.nus.edu.sg</email>
<email confidence="0.85015">nght@comp.nus.edu.sg</email>
<abstract confidence="0.992691857142857">We present a novel method for evaluating grammatical error correction. The core of method, which we call is an algorithm for efficiently computing the sequence of phrase-level edits between a source sentence and a system hypothesis that achieves the highest overlap with the goldstandard annotation. This optimal edit seis subsequently scored using mea- We test our on the Helping Our Own (HOO) shared task data and show that our method results in more accurate evaluation for grammatical error correction.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>T Cormen</author>
<author>C E Leiserson</author>
<author>R L Rivest</author>
<author>C Stein</author>
</authors>
<marker>Cormen, Leiserson, Rivest, Stein, </marker>
<rawString> T. Cormen, C.E. Leiserson, R.L. Rivest, and C. Stein.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Dale</author>
<author>A Kilgarriff</author>
</authors>
<title>Introduction to Algorithms.</title>
<date>2011</date>
<booktitle>In Proceedings of the 2011 European Workshop on Natural Language</booktitle>
<publisher>MIT Press,</publisher>
<marker>2001.</marker>
<rawString>Introduction to Algorithms. MIT Press, Cambridge, MA. R. Dale and A. Kilgarriff. 2011. Helping Our Own: The HOO 2011 pilot shared task. In Proceedings of the 2011 European Workshop on Natural Language Generation. C. Leacock, M. Chodorow, M. Gamon, and J. Tetreault,</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Levenshtein</author>
</authors>
<title>Automated Grammatical Error Detection for Language Learners, chapter 5.</title>
<date>1966</date>
<journal>Soviet Physics Doklady,</journal>
<volume>10</volume>
<issue>8</issue>
<publisher>Morgan</publisher>
<marker>2010.</marker>
<rawString>Automated Grammatical Error Detection for Language Learners, chapter 5. Morgan and Claypool Publishers. V. Levenshtein. 1966. Binary codes capable of correcting deletions, insertions, and reversals. Soviet Physics Doklady, 10(8):707–710. M.P. Marcus, M.A. Marcinkiewicz, and B. Santorini.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C J van Rijsbergen</author>
</authors>
<title>Building a large annotated corpus of English: The Penn Treebank.</title>
<date>1979</date>
<journal>Computational Linguistics,</journal>
<volume>19</volume>
<location>Butterworth,</location>
<marker>1993.</marker>
<rawString>Building a large annotated corpus of English: The Penn Treebank. Computational Linguistics, 19. C. J. van Rijsbergen. 1979. Information Retrieval. Butterworth, 2nd edition.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>