<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.004065">
<title confidence="0.980113">
BusTUC - A natural language bus route oracle
</title>
<author confidence="0.990212">
Tore Amble
</author>
<affiliation confidence="0.996912">
Dept. of computer and information science
University of Trondheim
</affiliation>
<address confidence="0.954003">
Norway, N-7491
</address>
<email confidence="0.998225">
amble@idi.ntnu.no
</email>
<sectionHeader confidence="0.993867" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999734857142857">
The paper describes a natural language based expert
system route advisor for the public bus transport
in Trondheim, Norway. The system is available on
the Internet,and has been intstalled at the bus com-
pany&apos;s web server since the beginning of 1999. The
system is bilingual, relying on an internal language
independent logic representation.
</bodyText>
<sectionHeader confidence="0.9988" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.997595666666666">
A natural language interface to a computer database
provides users with the capability of obtaining in-
formation stored in the database by querying the
system in a natural language (NL). With a natural
language as a means of communication with a com-
puter system, the users can make a question or a
statement in the way they normally think about the
information being discussed, freeing them from hav-
ing to know how the computer stores or processes
the information.
The present implementation represents a a major
effort in bringing natural language into practical use.
A system is developed that can answer queries about
bus routes, stated as natural language texts, and
made public through the Internet World Wide Web
( http : //www. idi ntnu no/bustuc .
Trondheim is a small city with a university and
140000 inhabitants. Its central bus systems has 42
bus lines, serving 590 stations, with 1900 depar-
tures per day (in average). That gives approximately
60000 scheduled bus station passings per day, which
is somehow represented in the route data base.
The starting point is to automate the function of
a route information agent. The following example
of a system response is using an actual request over
telephone to the local route information company:
Hi, I live in Nidarvoll and tonight i
must reach a train to Oslo at 6 oclock.
and a typical answer would follow quickly:
Bus number 54 passes by Nidarvoll skole
at 1710 and arrives at Trondheim Railway
Station at 1725.
In between the question and the answer is a pro-
cess of lexical analysis, syntax analysis, semantic
analysis, pragmatic reasoning and database query
processing.
One could argue that the information content
could be solved by an interrogation, whereby the
customer is asked to produce 4 items: station
of departure, station of arrival, earliest
departure t imeand/ or latest arrival time. It
is a myth that natural language is a better way of
communication because it is &amp;quot;natural language&amp;quot;.
The challenge is to prove by demonstration that
an NL system can be made that will be preferred
to the interrogative mode. To do that, the system
has to be correct, user friendly and almost complete
within the actual domain.
</bodyText>
<sectionHeader confidence="0.9895705" genericHeader="method">
2 Previous Efforts, CHAT-80,
PRAT-89 and HSQL
</sectionHeader>
<bodyText confidence="0.991952318181818">
The system, called BusTUC is built upon the clas-
sical system CHAT-80 (Warren and Pereira, 1982).
CHAT-80 was a state of the art natural language sys-
tem that was impressive on its own merits, but also
established Prolog as a viable and competitive lan-
guage for Artificial Intelligence in general. The sys-
tem was a brilliant masterpiece of software, efficient
and sophisticated. The natural language system was
connected to a small query system for international
geography. The following query could be analysed
and answered in a split second:
Which country bordering the Mediterranean
borders a country that is bordered by a
country whose population exceeds the
population of India?
(The answer &apos;Turkey&apos; has become incorrect as
time has passed. The irony is that Geography was
chosen as a domain without time.)
The ability to answer ridiculously long queries is
of course not the main goal. The main lesson is that
complex sentences are analysed with a proper under-
standing without sacrificing efficiency. Any superfi-
</bodyText>
<page confidence="0.966286">
1
</page>
<bodyText confidence="0.9884135">
cial pattern matching technique would prove futile
sooner or later.
</bodyText>
<subsectionHeader confidence="0.9851325">
2.1 Making a Norwegian CHAT-80,
PRAT-89
</subsectionHeader>
<bodyText confidence="0.961655652173913">
At the University of Trondheim (NTNU), two stu-
dents made a Norwegian version of CHAT-80,called
PRAT-89 (Teigen and Vetland, 1988),(Teigen and
Vetland, 1989). (Also, a similar Swedish project
SNACK-85 was reported).
The dictionary was changed from English to Nor-
wegian together with new rules for morphological
analysis. The change of grammar from English to
Norwegian proved to be amazingly easy. It showed
that the langauges were more similar than one would
believe, given that the languages are incomprehen-
sible to each other&apos;s communities.
After changing the dictionary and grammar, the
following Norwegian query about the same domain
could be answered correctly in a few seconds.
Hvilke afrikanske land som har en
befolkning stoerre enn 3 millioner
og mindre enn 50 millioner og er nord
for Botswana og oest for Libya har en
hovedstad som har en befolkning stoerre
enn 100 tusen.
(A translation is beside the point of being a long
query in Norwegian.)
</bodyText>
<subsectionHeader confidence="0.995396">
2.2 HSQL - Help System for SQL
</subsectionHeader>
<bodyText confidence="0.987169179487179">
A Nordic project HSQL (Help System for SQL) was
accomplished in 1988-89 to make a joint Nordic ef-
fort interfaces to databases.
The HSQL project was led by the Swedish State
Bureau (Statskontoret), with participants from Swe-
den, Denmark, Finland and Norway (Amble et al.,
1990). The aim of HSQL was to build a natural
language interface to SQL databases for the Scandi-
navian languages Swedish, Danish and Norwegian.
These languages are very similar, and the Norwe-
gian version of CHAT-80 was easily extended to the
other Scandinavian languages. Instead of Geogra-
phy, a more typical application area was chosen to
be a query system for hospital administration. We
decided to target an SQL database of a hospital ad-
ministration which had been developed already.
The next step was then to change the domain
of discourse from Geography to hospital adminis-
tration, using the same knowledge representation
techniques used in CHAT-80. A semantic model of
this domain was made, and then implemented in the
CHAT-80 framework.
The modelling technique that proved adequate
was to use an extended Entity Relationship (ER)
model with a class (type) hierarchy, attributes be-
longing to each class, single inheritance of attributes
and relationships.
Coupling the system to an SQL database.
After the remodelling, the system could answer
queries in &amp;quot;Scandinavian&amp;quot; to an internal hospital
database as well as CHAT-80 could answer Geog-
raphy questions. HSQL produced a Prolog-like code
FOL (First Order Logic) for execution. A mapping
from FOL to the data base Schema was defined, and
a translator from FOL to SQL was implemented.
The example
Hvilke menn ligger i en kvinnes seng?
(Which men lie in a woman&apos;s bed? )
would be translated dryly into the SQL query:
</bodyText>
<construct confidence="0.434475666666667">
SELECT DISTINCT
T3.name,T1.sex,T2.reg_no,T3.sex,
T4.reg_no,T4.bed_no,T5.hosp_no,T5.ward_no
FROM PATIENT T1,0CCUPANCY T2,PATIENT T3,
OCCUPANCY T4,WARD T5
WHERE
</construct>
<listItem confidence="0.865338285714286">
(Tl.sex=&apos;f&apos;) AND
(T2.reg_no=T1.reg_no) AND
(T3.sex=W) AND
(T4.reg_no=T3.reg_no) AND
(T4.bed_no=T2.bed_no) AND
(T5.hosp_no=T4.hosp_no) AND
(T5.ward_no=T4.ward_no)
</listItem>
<subsectionHeader confidence="0.998605">
2.3 The The Understanding Computer
</subsectionHeader>
<bodyText confidence="0.999932571428572">
The HSQL was a valuable experience in the effort
to make transportable natural language interfaces.
However, the underlying system CHAT-80 restricted
the further development.
After the HSQL Project was finished, an inter-
nal reseach project TUC (the Understanding Com-
puter) was initiated at NTNU to carry on the results
from HSQL. The project goals differed from those of
HSQL in a number of ways, and would not be con-
cerned with multimedia interfaces . On the other
hand, portability and versatility were made central
issues concerning the generality of the language and
its applications. The research goals could be sum-
marised as to
</bodyText>
<listItem confidence="0.997881166666667">
• Give computers an operational understanding
of natural language.
• Build intelligent systems with natural language
capabilities.
• Study common sense reasoning in natural lan-
guage.
</listItem>
<bodyText confidence="0.9756546">
A test criterion for the understanding capacity is
that after a set of definitions in a Naturally Read-
able Logic, NRL, the system&apos;s answer to queries in
NRL should conform to the answers of an idealised
rational agent.
</bodyText>
<page confidence="0.9708">
2
</page>
<bodyText confidence="0.9954521875">
Every man that lives loves Mary.
John is a man. John lives.
Who loves Mary?
==&gt; John
NRL is defined in a closed context. Thus in-
terfaces to other systems are in principle defined
through simulating the environment as a dialogue
partner.
TUC is a prototypical natural language proces-
sor for English written in Prolog. It is designed to
be a general purpose easily adaptable natural lan-
guage processor. It consists of a general grammar
for a subset of English, a semantic knowledge base,
and modules for interfaces to other interfaces like
UNIX, SQL-databases and general textual informa-
tion sources.
</bodyText>
<subsectionHeader confidence="0.977743">
2.4 The TABOR Project
</subsectionHeader>
<bodyText confidence="0.999966842105263">
It so happened that a Universtity Project was start-
eded in 1996, called TABOR ( &amp;quot; Speech based user
interfaces and reasoning systems &amp;quot;), with the aim of
building an automatic public transport route oracle,
available over the public telephone. At the onset of
the project, the World Wide Web was fresh, and not
as widespread as today, and the telephone was still
regarded as the main source of information for the
public.
Since then, the Internet became the dominant
medium, and it is as likeley to find a computer with
Internet connection, as to find a local busroute table.
( The consequtive wide spreading of cellular phones
changed the picture in favour of the telephone, but
that is another story).
It was decided that a text based information sys-
tem should be built, regardless of the status of the
speech rocgnition and speech synthesis effort, which
proved to lag behind after a while.
</bodyText>
<subsectionHeader confidence="0.882659">
The BusTUC system
</subsectionHeader>
<bodyText confidence="0.9997428125">
The resulting system BusTUC grew out as a natural
application of TUC, and an English prototype could
be built within a few months (Bratseth, 1997).
Since the summer 1996, the prototype was put
onto the Internet, and been developed and tested
more or less continually until today. The most im-
portant extension was that the system was made
bilingual (Norwegian and English) during the fall
1996.
In spring 1999, the BusTUC was finally adopted
by the local bus company in Trondheim ( A/S
Trondheim Trafikkselskap), which set up a server (
a 300 MHz PC with Linux).
Until today, over 150.000 questions have been an-
swered, and BusTUC seems to stabilize and grow
increasingly popular.
</bodyText>
<sectionHeader confidence="0.517258" genericHeader="method">
3 Anatomy of the bus route oracle
</sectionHeader>
<bodyText confidence="0.9629965">
The main components of the bus route information
systems are:
</bodyText>
<listItem confidence="0.991604333333333">
• A parser system, consisting of a dictionary, a
lexical processor, a grammar and a parser.
• A knowledge base (KB), divided into a semantic
KB and an application KB
• A query processor, containg a routing logic sys-
tem, and a route data base.
</listItem>
<bodyText confidence="0.9998872">
The system is bilingual and contains a double set
of dictionary, morphology and grammar. Actually, it
detects which language is most probable by count-
ing the number of unknown words related to each
language, and acts accordingly. The grammars are
surprisingly similar, but no effort is made to coa-
lesce them. The Norwegian grammar is slightly big-
ger than the English grammar, mostly because it is
more elaborated but also because Norwegian allows
a freer word order.
</bodyText>
<subsectionHeader confidence="0.998608">
3.1 Features of BusTUC
</subsectionHeader>
<bodyText confidence="0.999914413793103">
For the Norwegian systems, the figures give an in-
dication of the size of the domain: 420 nouns, 150
verbs, 165 adjectives, 60 prepositions, etc.
There are 1300 grammar rules ( 810 for English)
although half of the rules are very low level.
The semantic net described below contains about
4000 entries.
A big name table of 3050 names in addition to
the official station names, is required to capture the
variety of naming. A simple spell correction is a part
of the system ( essentially 1 character errors).
The pragmatic reasoning is needed to translate the
output from the parser to a route database query
language . This is done by a production system
called Pragma, which acts like an advanced rewrit-
ing system with 580 rules.
In addition, there is another rule base for actually
generating the natural language answers (120 rules).
The system is mainly written in Prolog (Sicstus
Prolog 3.7), with some Perl programs for the com-
munication and CGI-scripts.
At the moment, there are about 35000 lines of
programmed Prolog code (in addition to route tables
which are also in Prolog).
Average response time is usually less than 2 sec-
onds, but there are queries that demand up to 10
seconds.
The error rate for single, correct, complete and
relevant questions is about 2 percent.
</bodyText>
<subsectionHeader confidence="0.9852575">
3.2 The Parser System
The Grammar System
</subsectionHeader>
<bodyText confidence="0.997863666666667">
The grammar is based on a simple grammar for
statements, while questions and commands are de-
rived by the use of movements. The grammar
</bodyText>
<page confidence="0.997783">
3
</page>
<bodyText confidence="0.999750127659575">
formalism which is called Consensical Grammar, 4 which is analysed as
(CONtext SENSItive CompositionAL Grammar) is for which X is it true that
an easy to use variant of Extraposition Grammar the (X) person has a dog that barked?
(Pereira and Warren, 1980), which is a generalisa- where the last line is analysed as a statement.
tion of Definite Clause Grammars. Compositional Movement is easily handled in Consensical Gram-
grammar means that the semantics of a a phrase is mar without making special phrase rules for each
composed of the semantics of the subphrases; the ba- kind of movement. The following example shows
sic constituents being a form of verb complements. how TUC manages a variety of analyses using move-
As for Extraposition grammars, a grammar is trans- ments:
lated to Definite Clause Grammars, and executed as Max said Bill thought
such. Joe believed Fido Barked.
A characteristic syntactic expression in Consen- Who said Bill thought
sical Grammar may define an incomplete construct Joe believed Fido barked? ==&gt; Max
in terms of a &amp;quot;difference &amp;quot; between complete con- Who did Max say thought
structs. When possible, the parser will use the sub- Joe believed Fido barked? ==&gt; Bill
tracted part in stead of reading from the input, after Who did Max say Bill thought
a gap if necessary. The effect is the same as for Ex- believed Fido barked? ==&gt; Joe
traposition grammars, but the this format is more The parser
intuitive. The experiences with Consensical grammars are a
Examples of grammar rules. bit mixed however. The main problem is the parsing
statement(P) ---&gt; method itself, which is top down with backtracking.
noun_phrase (X ,VP ,P) , Many principles that would prove elegant for small
verb_phrase(X,VP). domains turned out to be too costly for larger do-
statement (Q) ---&gt; mains, due to the wide variety of modes of expres-
verb_complements0(VC), sions, incredible ambiguities and the sheer size of the
%% initial optional verb complements covered language.
statement(Q) The disambiguation is a major problem for small
verb_complements0(VC). grammars and large languages, and was solved by
%% may be inserted after a gap the following guidelines:
who seq (P) % whose dog barked? • a semantic type checking was integrated into the
[whose], parser, and would help to discard sematically
noun(N) , wrong parses from the start.
whoq(P) - 7.% without gap • a heuristics was followed that proved almost ir-
([who] , [has] , [a] ,noun(N), [that]) . reproachable: The longest possible phrase of a
whoq(P) ---&gt; category that is semantically correct is in most
[who] , cases the preferred interpretation.
whichq(P) - ([which] , [person]) . • due to the perplexity of the language, some
whichq(which(X)::P) ---&gt; committed choices (cuts) had to be inserted into
[which], the grammar at strategic places. As one could
statement(P) - the(X). fear however, this implied that wrong choices
Example: being made at some point in the parsing could
Whose dog barked? not be recovered by backtracking.
is analysed as if the sentence had been These problems also made it imperative to intro-
Who has a dog that barked? duce a timeout on the parsing process of embarass-
which is analysed as ing 10 seconds. Although most sentences, would be
Which person has a dog that barked? parsed within a second, some legal sentences of mod-
erate size actually need this time.
</bodyText>
<subsectionHeader confidence="0.999582">
3.3 The semantic knowledge base
</subsectionHeader>
<bodyText confidence="0.999862928571429">
Adaptability means that the system does not need
to be reprogrammed for each new application.
The design principle of TUC is that most of the
changes are made in a tabular semantic knowledge
base, while there is one general grammar and dictio-
nary. In general, the logic is generated automatically
from the semantic knowledge base.
The nouns play a key role in the understanding
part as they constitute the class or type hierarchy.
Nouns are defined in an a-kind-of hierarchy. The
hierarchy is tree-structured with single inheritance.
The top level also constitute the top level ontology
of TUC&apos;s world.
In fact, a type check of the compliances of verbs,
nouns adjectives and prepositions is not only neces-
sary for the semantic processing but is essential for
the syntax analysis for the disambiguation as well.
In TUC, the legal combinations are carefully assem-
bled in the semantic network, which then serves a
dual purpose.
These semantic definitions are necessary to allow
for instance the following sentences
The dog saw a man with a telescope.
The man saw a dog with a telescope.
to be treated differently because with telescope
may modify the noun man but not the noun dog,
while with telescope modifies the verb see, re-
stricted to person.
</bodyText>
<subsectionHeader confidence="0.927068">
3.4 The Query Processor
Event Calculus
</subsectionHeader>
<bodyText confidence="0.818316170731707">
The semantics of the phrases are built up by a kind
of verb complements, where the event play a central
role.
The text is translated from Natural language into
a form called TQL (Temporal Query Language/
TUC Query Language) which is a first order event
calculus expression, a self contained expression con-
taining the literal meaning of an utterance.
A formalism TQL that was defined, inspired by
the Event Calculus by Kowalski and Sergot (Kowal-
ski and Sergot, 1986).
The TQL expressions consist of predicates, func-
tions, constants and variables. The textual words
of nouns and verbs are translated to generic predi-
cates using the selected interpretation. The follow-
ing question
Do you know whether the bus goes
to Nidar on Saturday ?
would give the TQL expression below. Typically,
the Norwegian equivalent
Vet du om bussen gaar
til Nidar paa soendag ?
gives exactly the same code.
test:: % Type of question
isa(real,program,tuc), % tuc is a program
isa(real,bus,A), % A is a real bus
isa(real,saturday,B), % B isa saturday
isa(real,place,nidar), % Nidar is a place
event(real,D), % D is an event
know(whether,tuc,C,D), % C was known at D
event(C,E), % E is an event in C
action(go,E), % the action of E is Go
actor(A,E), % the actor of E is A
srel(to,place,nidar,E),% E is to nidar
srel(on,time,B,E). % E is on the saturday B
The event parameter plays an important role in
the semantics. It is used for various purposes. The
most salient role is to identify a subset of time and
space in which an action or event occured. Both the
actual time and space coordinates are connected to
the actions through the event parameter.
</bodyText>
<subsectionHeader confidence="0.955353">
Pragmatic reasoning
</subsectionHeader>
<bodyText confidence="0.999995">
The TQL is translated to a route database query
language (BusLOG) which is actually a Prolog pro-
gram. This is done by a production system called
Pragma, which acts like an advanced rewriting sys-
tem with 580 rules.
In addition, there is another rule base for actually
generating the natural language answers (120 rules).
</bodyText>
<sectionHeader confidence="0.999815" genericHeader="conclusions">
4 Conclusions
</sectionHeader>
<bodyText confidence="0.999562190476191">
The TUC approach has as its goal to automate the
creation of new natural language interfaces for a well
defined subset of the language and with a minimum
of explicit programming.
The implemented system has proved its worth,
and is interesting if for no other reason. There is
also an increasing interest from other bus compa-
nies and route information companies alike to get a
similar system for their customers.
Further work remains to make the parser really
efficient, and much work remains to make the lan-
guage coverage complete within reasonable limits.
It is an open question whether the system of this
kind will be a preferred way of offering information
to the public.
If it is, it is a fair amount of work to make it a
portable system that can be implemented elsewhere,
also connecting various travelling agencies.
If not, it will remain a curiosity. But anyway, a
system like this will be a contribution to the devel-
opment of intelligent systems.
</bodyText>
<sectionHeader confidence="0.998891" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.997777666666667">
Tore Amble, Erik Knudsen, Aarno Lehtola, Jan
Ljungberg, and Ole Ravnholt. 1990. Naturlig
Sprdk och Grafik - nya vagar inn i databaser.
</reference>
<page confidence="0.89774">
5
</page>
<reference confidence="0.995863833333333">
Statskontoret. Rapport om HSQL, ett kunskaps-
baseret hjalpsystem for SQL.
Jon S. Bratseth. 1997. BusTUC - A Natural Lan-
guage Bus Traffic Informations System. Master&apos;s
thesis, The Norwegian University of Science and
Technology.
R. Kowalski and M. Sergot. 1986. A logic based
calculus of events. New Generation Computing,
8(0):67-95.
F.C.N. Pereira and D.H.D. Warren. 1980. Definite
clause grammar for language analysis. Artificial
Intelligence, 0(3).
J. Teigen and V. Vetland. 1988. Syntax analysis of
norwegian language. Technical report, The Nor-
wegian Institute of Technology.
J. Teigen and V. Vetland. 1989. Handling reason-
able questions beyond
the linguistic and conceptual coverage of
natural language interfaces. Master&apos;s thesis, The
Norwegian Institute of Technology.
D.H.D Warren and F.C.N. Pereira. 1982. An effi-
cient and easily adaptable system for interpreting
natural language queries. Computational Linguis-
tics, 8(3-4).
</reference>
<page confidence="0.998747">
6
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.965685">
<title confidence="0.997642">BusTUC - A natural language bus route oracle</title>
<author confidence="0.999155">Tore Amble</author>
<affiliation confidence="0.999901">Dept. of computer and information science University of Trondheim</affiliation>
<address confidence="0.996491">Norway, N-7491</address>
<email confidence="0.986251">amble@idi.ntnu.no</email>
<abstract confidence="0.998176625">The paper describes a natural language based expert system route advisor for the public bus transport in Trondheim, Norway. The system is available on the Internet,and has been intstalled at the bus company&apos;s web server since the beginning of 1999. The system is bilingual, relying on an internal language independent logic representation.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Tore Amble</author>
<author>Erik Knudsen</author>
<author>Aarno Lehtola</author>
<author>Jan Ljungberg</author>
<author>Ole Ravnholt</author>
</authors>
<title>Naturlig Sprdk och Grafik - nya vagar inn i databaser.</title>
<date>1990</date>
<contexts>
<context position="5143" citStr="Amble et al., 1990" startWordPosition="837" endWordPosition="840">be answered correctly in a few seconds. Hvilke afrikanske land som har en befolkning stoerre enn 3 millioner og mindre enn 50 millioner og er nord for Botswana og oest for Libya har en hovedstad som har en befolkning stoerre enn 100 tusen. (A translation is beside the point of being a long query in Norwegian.) 2.2 HSQL - Help System for SQL A Nordic project HSQL (Help System for SQL) was accomplished in 1988-89 to make a joint Nordic effort interfaces to databases. The HSQL project was led by the Swedish State Bureau (Statskontoret), with participants from Sweden, Denmark, Finland and Norway (Amble et al., 1990). The aim of HSQL was to build a natural language interface to SQL databases for the Scandinavian languages Swedish, Danish and Norwegian. These languages are very similar, and the Norwegian version of CHAT-80 was easily extended to the other Scandinavian languages. Instead of Geography, a more typical application area was chosen to be a query system for hospital administration. We decided to target an SQL database of a hospital administration which had been developed already. The next step was then to change the domain of discourse from Geography to hospital administration, using the same kno</context>
</contexts>
<marker>Amble, Knudsen, Lehtola, Ljungberg, Ravnholt, 1990</marker>
<rawString>Tore Amble, Erik Knudsen, Aarno Lehtola, Jan Ljungberg, and Ole Ravnholt. 1990. Naturlig Sprdk och Grafik - nya vagar inn i databaser.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Statskontoret</author>
</authors>
<title>Rapport om HSQL, ett kunskapsbaseret hjalpsystem for SQL.</title>
<marker>Statskontoret, </marker>
<rawString>Statskontoret. Rapport om HSQL, ett kunskapsbaseret hjalpsystem for SQL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jon S Bratseth</author>
</authors>
<title>BusTUC - A Natural Language Bus Traffic Informations System. Master&apos;s thesis,</title>
<date>1997</date>
<institution>The Norwegian University of Science and Technology.</institution>
<contexts>
<context position="9680" citStr="Bratseth, 1997" startWordPosition="1563" endWordPosition="1564">net became the dominant medium, and it is as likeley to find a computer with Internet connection, as to find a local busroute table. ( The consequtive wide spreading of cellular phones changed the picture in favour of the telephone, but that is another story). It was decided that a text based information system should be built, regardless of the status of the speech rocgnition and speech synthesis effort, which proved to lag behind after a while. The BusTUC system The resulting system BusTUC grew out as a natural application of TUC, and an English prototype could be built within a few months (Bratseth, 1997). Since the summer 1996, the prototype was put onto the Internet, and been developed and tested more or less continually until today. The most important extension was that the system was made bilingual (Norwegian and English) during the fall 1996. In spring 1999, the BusTUC was finally adopted by the local bus company in Trondheim ( A/S Trondheim Trafikkselskap), which set up a server ( a 300 MHz PC with Linux). Until today, over 150.000 questions have been answered, and BusTUC seems to stabilize and grow increasingly popular. 3 Anatomy of the bus route oracle The main components of the bus ro</context>
</contexts>
<marker>Bratseth, 1997</marker>
<rawString>Jon S. Bratseth. 1997. BusTUC - A Natural Language Bus Traffic Informations System. Master&apos;s thesis, The Norwegian University of Science and Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kowalski</author>
<author>M Sergot</author>
</authors>
<title>A logic based calculus of events.</title>
<date>1986</date>
<journal>New Generation Computing,</journal>
<pages>8--0</pages>
<contexts>
<context position="17638" citStr="Kowalski and Sergot, 1986" startWordPosition="2901" endWordPosition="2905">telescope may modify the noun man but not the noun dog, while with telescope modifies the verb see, restricted to person. 3.4 The Query Processor Event Calculus The semantics of the phrases are built up by a kind of verb complements, where the event play a central role. The text is translated from Natural language into a form called TQL (Temporal Query Language/ TUC Query Language) which is a first order event calculus expression, a self contained expression containing the literal meaning of an utterance. A formalism TQL that was defined, inspired by the Event Calculus by Kowalski and Sergot (Kowalski and Sergot, 1986). The TQL expressions consist of predicates, functions, constants and variables. The textual words of nouns and verbs are translated to generic predicates using the selected interpretation. The following question Do you know whether the bus goes to Nidar on Saturday ? would give the TQL expression below. Typically, the Norwegian equivalent Vet du om bussen gaar til Nidar paa soendag ? gives exactly the same code. test:: % Type of question isa(real,program,tuc), % tuc is a program isa(real,bus,A), % A is a real bus isa(real,saturday,B), % B isa saturday isa(real,place,nidar), % Nidar is a place</context>
</contexts>
<marker>Kowalski, Sergot, 1986</marker>
<rawString>R. Kowalski and M. Sergot. 1986. A logic based calculus of events. New Generation Computing, 8(0):67-95.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F C N Pereira</author>
<author>D H D Warren</author>
</authors>
<title>Definite clause grammar for language analysis.</title>
<date>1980</date>
<journal>Artificial Intelligence,</journal>
<volume>0</volume>
<issue>3</issue>
<contexts>
<context position="12754" citStr="Pereira and Warren, 1980" startWordPosition="2089" endWordPosition="2092">erage response time is usually less than 2 seconds, but there are queries that demand up to 10 seconds. The error rate for single, correct, complete and relevant questions is about 2 percent. 3.2 The Parser System The Grammar System The grammar is based on a simple grammar for statements, while questions and commands are derived by the use of movements. The grammar 3 formalism which is called Consensical Grammar, 4 which is analysed as (CONtext SENSItive CompositionAL Grammar) is for which X is it true that an easy to use variant of Extraposition Grammar the (X) person has a dog that barked? (Pereira and Warren, 1980), which is a generalisa- where the last line is analysed as a statement. tion of Definite Clause Grammars. Compositional Movement is easily handled in Consensical Gramgrammar means that the semantics of a a phrase is mar without making special phrase rules for each composed of the semantics of the subphrases; the ba- kind of movement. The following example shows sic constituents being a form of verb complements. how TUC manages a variety of analyses using moveAs for Extraposition grammars, a grammar is trans- ments: lated to Definite Clause Grammars, and executed as Max said Bill thought such.</context>
</contexts>
<marker>Pereira, Warren, 1980</marker>
<rawString>F.C.N. Pereira and D.H.D. Warren. 1980. Definite clause grammar for language analysis. Artificial Intelligence, 0(3).</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Teigen</author>
<author>V Vetland</author>
</authors>
<title>Syntax analysis of norwegian language.</title>
<date>1988</date>
<tech>Technical report,</tech>
<institution>The Norwegian Institute of Technology.</institution>
<contexts>
<context position="4009" citStr="Teigen and Vetland, 1988" startWordPosition="650" endWordPosition="653">y whose population exceeds the population of India? (The answer &apos;Turkey&apos; has become incorrect as time has passed. The irony is that Geography was chosen as a domain without time.) The ability to answer ridiculously long queries is of course not the main goal. The main lesson is that complex sentences are analysed with a proper understanding without sacrificing efficiency. Any superfi1 cial pattern matching technique would prove futile sooner or later. 2.1 Making a Norwegian CHAT-80, PRAT-89 At the University of Trondheim (NTNU), two students made a Norwegian version of CHAT-80,called PRAT-89 (Teigen and Vetland, 1988),(Teigen and Vetland, 1989). (Also, a similar Swedish project SNACK-85 was reported). The dictionary was changed from English to Norwegian together with new rules for morphological analysis. The change of grammar from English to Norwegian proved to be amazingly easy. It showed that the langauges were more similar than one would believe, given that the languages are incomprehensible to each other&apos;s communities. After changing the dictionary and grammar, the following Norwegian query about the same domain could be answered correctly in a few seconds. Hvilke afrikanske land som har en befolkning </context>
</contexts>
<marker>Teigen, Vetland, 1988</marker>
<rawString>J. Teigen and V. Vetland. 1988. Syntax analysis of norwegian language. Technical report, The Norwegian Institute of Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Teigen</author>
<author>V Vetland</author>
</authors>
<title>Handling reasonable questions beyond the linguistic and conceptual coverage of natural language interfaces. Master&apos;s thesis, The Norwegian Institute of Technology.</title>
<date>1989</date>
<contexts>
<context position="4036" citStr="Teigen and Vetland, 1989" startWordPosition="653" endWordPosition="656">the population of India? (The answer &apos;Turkey&apos; has become incorrect as time has passed. The irony is that Geography was chosen as a domain without time.) The ability to answer ridiculously long queries is of course not the main goal. The main lesson is that complex sentences are analysed with a proper understanding without sacrificing efficiency. Any superfi1 cial pattern matching technique would prove futile sooner or later. 2.1 Making a Norwegian CHAT-80, PRAT-89 At the University of Trondheim (NTNU), two students made a Norwegian version of CHAT-80,called PRAT-89 (Teigen and Vetland, 1988),(Teigen and Vetland, 1989). (Also, a similar Swedish project SNACK-85 was reported). The dictionary was changed from English to Norwegian together with new rules for morphological analysis. The change of grammar from English to Norwegian proved to be amazingly easy. It showed that the langauges were more similar than one would believe, given that the languages are incomprehensible to each other&apos;s communities. After changing the dictionary and grammar, the following Norwegian query about the same domain could be answered correctly in a few seconds. Hvilke afrikanske land som har en befolkning stoerre enn 3 millioner og </context>
</contexts>
<marker>Teigen, Vetland, 1989</marker>
<rawString>J. Teigen and V. Vetland. 1989. Handling reasonable questions beyond the linguistic and conceptual coverage of natural language interfaces. Master&apos;s thesis, The Norwegian Institute of Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D H D Warren</author>
<author>F C N Pereira</author>
</authors>
<title>An efficient and easily adaptable system for interpreting natural language queries.</title>
<date>1982</date>
<journal>Computational Linguistics,</journal>
<pages>8--3</pages>
<contexts>
<context position="2849" citStr="Warren and Pereira, 1982" startWordPosition="465" endWordPosition="468">errogation, whereby the customer is asked to produce 4 items: station of departure, station of arrival, earliest departure t imeand/ or latest arrival time. It is a myth that natural language is a better way of communication because it is &amp;quot;natural language&amp;quot;. The challenge is to prove by demonstration that an NL system can be made that will be preferred to the interrogative mode. To do that, the system has to be correct, user friendly and almost complete within the actual domain. 2 Previous Efforts, CHAT-80, PRAT-89 and HSQL The system, called BusTUC is built upon the classical system CHAT-80 (Warren and Pereira, 1982). CHAT-80 was a state of the art natural language system that was impressive on its own merits, but also established Prolog as a viable and competitive language for Artificial Intelligence in general. The system was a brilliant masterpiece of software, efficient and sophisticated. The natural language system was connected to a small query system for international geography. The following query could be analysed and answered in a split second: Which country bordering the Mediterranean borders a country that is bordered by a country whose population exceeds the population of India? (The answer &apos;</context>
</contexts>
<marker>Warren, Pereira, 1982</marker>
<rawString>D.H.D Warren and F.C.N. Pereira. 1982. An efficient and easily adaptable system for interpreting natural language queries. Computational Linguistics, 8(3-4).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>