<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.009430">
<title confidence="0.994149">
A Linguistic Service Ontology for Language Infrastructures
</title>
<author confidence="0.994657">
Yoshihiko Hayashi
</author>
<affiliation confidence="0.990172">
Graduate School of Language and Culture, Osaka University
</affiliation>
<address confidence="0.986754">
1-8 Machikaneyama-cho, Toyonaka, 560-0043 Japan
</address>
<email confidence="0.999689">
hayashi@lang.osaka-u.ac.jp
</email>
<sectionHeader confidence="0.998606" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999941692307692">
This paper introduces conceptual frame-
work of an ontology for describing linguis-
tic services on network-based language in-
frastructures. The ontology defines a tax-
onomy of processing resources and the as-
sociated static language resources. It also
develops a sub-ontology for abstract lin-
guistic objects such as expression, meaning,
and description; these help define function-
alities of a linguistic service. The proposed
ontology is expected to serve as a solid ba-
sis for the interoperability of technical ele-
ments in language infrastructures.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999949333333333">
Several types of linguistic services are currently
available on the Web, including text translation
and dictionary access. A variety of NLP tools is
also available and public. In addition to these, a
number of community-based language resources
targeting particular domains of application have
been developed, and some of them are ready for
dissemination. A composite linguistic service tai-
lored to a particular user&apos;s requirements would be
composable, if there were a language infrastructure
on which elemental linguistic services, such as
NLP tools, and associated language resources
could be efficiently combined. Such an infrastruc-
ture should provide an efficient mechanism for
creating workflows of composite services by
means of authoring tools for the moment, and
through an automated planning in the future.
To this end, technical components in an infra-
structure must be properly described, and the se-
mantics of the descriptions should be defined
based on a shared ontology.
</bodyText>
<sectionHeader confidence="0.7294925" genericHeader="method">
2 Architecture of a Language Infrastruc-
ture
</sectionHeader>
<bodyText confidence="0.99931925">
The linguistic service ontology described in this
paper has not been intended for a particular lan-
guage infrastructure. However we expect that the
ontology should be first introduced in an infra-
structure like the Language Grid 1 , because it,
unlike other research-oriented infrastructures, tries
to incorporate a wide range of NLP tools and
community-based language resources (Ishida,
2006) in order to be useful for a range of intercul-
tural collaboration activities.
The fundamental technical components in the
Language Grid could be: (a) external web-based
services, (b) on-site NLP core functions, (c) static
language resources, and (d) wrapper programs.
Figure 1 depicts the general architecture of the
infrastructure. The technical components listed
above are deployed as shown in the figure.
Computational nodes in the language grid are
classified into the following two types as described
in (Murakami et al., 2006).
</bodyText>
<listItem confidence="0.997926111111111">
• A service node accommodates atomic linguistic
services that provide functionalities of the NLP
tool/system running on a node, or they can sim-
ply have a wrapper program that consults an ex-
ternal web-based linguistic service.
• A core node maintains a repository of the known
atomic linguistic services, and provides service
discovery functionality to the possible us-
ers/applications. It also maintains a workflow re-
</listItem>
<footnote confidence="0.636052">
1 Language Grid: http://langrid.nict.go.jp/
</footnote>
<page confidence="0.970081">
145
</page>
<bodyText confidence="0.701535">
Proceedings of the ACL 2007 Demo and Poster Sessions, pages 145–148,
Prague, June 2007. c�2007 Association for Computational Linguistics
pository for composite linguistic services, and is
equipped with a workflow engine.
</bodyText>
<figureCaption confidence="0.994539">
Figure 1. Architecture of a Language Infrastructure.
</figureCaption>
<bodyText confidence="0.999993153846154">
Given a technical architecture like this, the lin-
guistic service ontology will serve as a basis for
composition of composite linguistic services, and
efficient wrapper generation. The wrapper genera-
tion processes are unavoidable during incorpora-
tion of existing general linguistic services or dis-
semination of newly created community-based
language resources. Tthe most important desidera-
tum for the ontology, therefore, is that it be able to
specify the input/output constraints of a linguistic
service properly. Such input/output specifications
enable us to derive a taxonomy of linguistic service
and the associated language resources.
</bodyText>
<sectionHeader confidence="0.988456" genericHeader="method">
3 The Upper Ontology
</sectionHeader>
<subsectionHeader confidence="0.997614">
3.1 The top level
</subsectionHeader>
<bodyText confidence="0.9999955">
We have developed the upper part of the service
ontology so far, and have been working on detail-
ing some of its core parts. Figure 2 shows the top
level of the proposed linguistic service ontology.
</bodyText>
<figureCaption confidence="0.99828">
Figure 2. The Top Level of the Ontology.
</figureCaption>
<bodyText confidence="0.999935678571429">
The topmost class is NL_Resource, which is
partitioned into ProcessingResource, and
LanguageResource. Here, as in GATE (Cun-
ningham, 2002), processing resource refers to pro-
grammatic or algorithmic resources, while lan-
guage resource refers to data-only static resources
such as lexicons or corpora. The innate relation
between these two classes is: a processing resource
can use language resources. This relationship is
specifically introduced to properly define linguistic
services that are intended to provide access func-
tions to language resources.
As shown in the figure, LinguisticSer-
vice is provided by a processing resource, stress-
ing that any linguistic service is realized by a proc-
essing resource, even if its prominent functionality
is accessing language resources in response to a
user’s query. It also has the meta-information for
advertising its non-functional descriptions.
The fundamental classes for abstract linguistic
objects, Expression, Meaning, and De-
scription and the innate relations among them
are illustrated in Figure 3. These play roles in de-
fining functionalities of some types of processing
resources and associated language resources. As
shown in Fig. 3, an expression may denote a mean-
ing, and the meaning can be further described by a
description, especially for human uses.
</bodyText>
<figureCaption confidence="0.953241">
Figure 3. Classes for Abstract Linguistic Objects.
</figureCaption>
<bodyText confidence="0.99995825">
In addition to these, NLProcessedStatus
and LinguisticAnnotation are important in
the sense that NLP status represents the so-called
IOPE (Input-Output-Precondition-Effect) parame-
ters of a linguistic processor, which is a subclass of
the processing resource, and the data schema for
the results of a linguistic analysis is defined by us-
ing the linguistic annotation class.
</bodyText>
<subsectionHeader confidence="0.999713">
3.2 Taxonomy of language resources
</subsectionHeader>
<bodyText confidence="0.98561325">
The language resource class currently is partitioned
into subclasses for Corpus and Dictionary.
The immediate subclasses of the dictionary class
are: (1) MonolingualDictionary, (2) Bi-
</bodyText>
<figure confidence="0.999519318181818">
Linguistic
Service
wrapper
NLP
Tool
Core Node
maintains
-profiles registry
-workflows
Language
Resource
Access
Mechanism
Service Node
Application
Program
Language
Resource
External
Linguistic
Service
hasNLProcessedStatus*
</figure>
<page confidence="0.900232">
146
</page>
<bodyText confidence="0.986191666666667">
lingualDictionary, (3) Multilingual-
Terminology, and (4) ConceptLexicon.
The major instances of (1) and (2) are so-called
machine-readable dictionaries (MRDs). Many of
the community-based special language resources
should fall into (3), including multilingual termi-
nology lists specialized for some application do-
mains. For subclass (4), we consider the computa-
tional concept lexicons, which can be modeled by
a WordNet-like encoding framework (Hayashi and
Ishida, 2006).
3.3 Taxonomy of processing resources
The top level of the processing resource class con-
sists of the following four subclasses, which take
into account the input/output constraints of proc-
essing resources, as well as the language resources
they utilize.
•AbstractReader, AbstractWriter:
These classes are introduced to describe compu-
tational processes that convert to-and-from non-
textual representation (e.g. speech) and textual
representation (character strings).
• LR_Accessor: This class is introduced to de-
scribe language resource access functionalities. It
is first partitioned into CorpusAccessor and
DictionaryAccessor, depending on the
type of language resource it accesses. The input
to a language resource accessor is a query
(LR_AccessQuery, sub-class of Expres-
sion), and the output is a kind of ‘dictionary
meaning’ (DictionaryMeaning), which is a
sub-class of meaning class. The dictionary mean-
ing class is further divided into sub-classes by re-
ferring to the taxonomy of dictionary.
•LinguisticProcessor: This class is further
discussed in the next subsection.
3.4 Linguistic processors
The linguistic processor class is introduced to rep-
resent NLP tools/systems. Currently and tenta-
tively, the linguistic processor class is first parti-
tioned into Transformer and Analyzer.
The transformer class is introduced to represent
Paraphrasor and Translator; both rewrite
the input linguistic expression into another expres-
sion while maintaining the original meaning. The
only difference is the sameness of the input/output
languages. We explicitly express the input/output
language constraints in each class definition.
</bodyText>
<page confidence="0.541774">
147
</page>
<figureCaption confidence="0.762025068965517">
Figure 4. Taxonomy of Linguistic Analyzer.
Figure 4 shows the working taxonomy of the
analyzer class. While it is not depicted in the figure,
the input/output constraints of a linguistic analyzer
are specified by the Expression class, while its
precondition/effect parameters are defined by
NLProcessedStatus class. The details are
also not shown in this figure, these constraints are
further restricted with respect to the taxonomy of
the processing resource.
We also assume that any linguistic analyzer ad-
ditively annotates some linguistic information to
the input, as proposed by (Cunningham, 2002),
(Klein and Potter, 2004). That is, an analyzer
working at a certain linguistic level (or ‘depth’)
adds the corresponding level of annotations to the
input. In this sense, any natural language expres-
sion can have a layered/multiple linguistic annota-
tion. To make this happen, a linguistic service on-
tology has to appropriately define a sub-ontology
for the linguistic annotations by itself or by incor-
porating some external standard, such as LAF (Ide
and Romary, 2004).
3.5 NLP status and the associated issues
Figure 5 illustrates our working taxonomy of NLP
processed status. Note that, in this figure, only the
portion related to linguistic analyzer is detailed.
Benefits from the NLP status class will be twofold:
(1) as a part of the description of a linguistic ana-
</figureCaption>
<bodyText confidence="0.963176333333333">
lyzer, we assign corresponding instances of this
class as its precondition/effect parameters, (2) any
instance of the expression class can be concisely
‘tagged’ by instances of the NLP status class, ac-
cording to how ‘deeply’ the expression has been
linguistically analyzed so far. Essentially, such in-
formation can be retrieved from the attached lin-
guistic annotations. In this sense, the NLP status
class might be redundant. Tagging an instance of
expression in that way, however, can be reason-
able: we can define the input/output constraints of
a linguistic analyzer concisely with this device.
</bodyText>
<figureCaption confidence="0.982303">
Figure 5. Taxonomy of NLP Status.
</figureCaption>
<bodyText confidence="0.9999464">
Each subclass in the taxonomy represents the
type or level of a linguistic analysis, and the hier-
archy depicts the processing constraints among
them. For example, if an expression has been
parsed, it would already have been morphologi-
cally analyzed, because parsing usually requires
the input to be morphologically analyzed before-
hand. The subsumption relations encoded in the
taxonomy allow simple reasoning in possible com-
posite service composition processes. However
note that the taxonomy is only preliminary. The
arrangement of the subclasses within the hierarchy
may end up being far different, depending on the
languages considered, and the actual NLP tools,
these are essentially idiosyncratic, that are at hand.
For example, the notion of ‘chunk’ may be differ-
ent from language to language. Despite of these, if
we go too far in this direction, constructing a tax-
onomy would be meaningless, and we would for-
feit reasonable generalities.
</bodyText>
<sectionHeader confidence="0.999966" genericHeader="method">
4 Related Works
</sectionHeader>
<bodyText confidence="0.999965818181818">
Klein and Potter (2004) have once proposed an
ontology for NLP services with OWL-S definitions.
Their proposal however has not included detailed
taxonomies either for language resources, or for
abstract linguistic objects, as shown in this paper.
Graça, et al. (2006) introduced a framework for
integrating NLP tools with a client-server architec-
ture having a multi-layered repository. They also
proposed a data model for encoding various types
of linguistic information. However the model itself
is not ontologized as proposed in this paper.
</bodyText>
<sectionHeader confidence="0.984423" genericHeader="method">
5 Concluding Remarks
</sectionHeader>
<bodyText confidence="0.999953333333333">
Although the proposed ontology successfully de-
fined a number of first class objects and the innate
relations among them, it must be further refined by
looking at specific NLP tools/systems and the as-
sociated language resources. Furthermore, its ef-
fectiveness in composition of composite linguistic
services or wrapper generation should be demon-
strated on a specific language infrastructure such
as the Language Grid.
</bodyText>
<sectionHeader confidence="0.999506" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999928">
The presented work has been partly supported by
NICT international joint research grant. The author
would like to thank to Thierry Declerck and Paul
Buitelaar (DFKI GmbH, Germany) for their help-
ful discussions.
</bodyText>
<sectionHeader confidence="0.999436" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999640458333333">
H. Cunningham, et al. 2002. GATE: A Framework and
Graphical Development Environment for Robust
NLP Tools and Applications. Proc. of ACL 2002,
pp.168-175.
J. Graça , et al. 2006. NLP Tools Integration Using a
Multi-Layered Repository. Proc. of LREC 2006
Workshop on Merging and Layering Linguistic In-
formation.
Y. Hayashi and T. Ishida. 2006. A Dictionary Model for
Unifying Machine Readable Dictionaries and Com-
putational Concept Lexicons. Proc. of LREC 2006,
pp.1-6.
N. Ide and L. Romary. 2004. International Standard for
a Linguistic Annotation Framework. Journal of Natu-
ral Language Engineering, Vol.10:3-4, pp.211-225.
T. Ishida. 2006. Language Grid: An Infrastructure for
Intercultural Collaboration. Proc. of SAINT-06, pp.
96-100, keynote address.
E. Klein and S. Potter. 2004. An Ontology for NLP Ser-
vices. Proc. of LREC 2004 Workshop on Registry of
Linguistic Data Categories.
Y. Murakami, et al. 2006. Infrastructure for Language
Service Composition. Proc. of Second International
Conference on Semantics, Knowledge, Grid.
</reference>
<page confidence="0.996843">
148
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.927292">
<title confidence="0.999982">A Linguistic Service Ontology for Language Infrastructures</title>
<author confidence="0.999776">Yoshihiko Hayashi</author>
<affiliation confidence="0.999994">Graduate School of Language and Culture, Osaka University</affiliation>
<address confidence="0.986942">1-8 Machikaneyama-cho, Toyonaka, 560-0043 Japan</address>
<email confidence="0.976849">hayashi@lang.osaka-u.ac.jp</email>
<abstract confidence="0.997072071428571">This paper introduces conceptual framework of an ontology for describing linguistic services on network-based language infrastructures. The ontology defines a taxonomy of processing resources and the associated static language resources. It also develops a sub-ontology for abstract linguistic objects such as expression, meaning, and description; these help define functionalities of a linguistic service. The proposed ontology is expected to serve as a solid basis for the interoperability of technical elements in language infrastructures.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>H Cunningham</author>
</authors>
<title>GATE: A Framework and Graphical Development Environment for Robust NLP Tools and Applications.</title>
<date>2002</date>
<booktitle>Proc. of ACL</booktitle>
<pages>168--175</pages>
<contexts>
<context position="4521" citStr="Cunningham, 2002" startWordPosition="671" endWordPosition="673">le to specify the input/output constraints of a linguistic service properly. Such input/output specifications enable us to derive a taxonomy of linguistic service and the associated language resources. 3 The Upper Ontology 3.1 The top level We have developed the upper part of the service ontology so far, and have been working on detailing some of its core parts. Figure 2 shows the top level of the proposed linguistic service ontology. Figure 2. The Top Level of the Ontology. The topmost class is NL_Resource, which is partitioned into ProcessingResource, and LanguageResource. Here, as in GATE (Cunningham, 2002), processing resource refers to programmatic or algorithmic resources, while language resource refers to data-only static resources such as lexicons or corpora. The innate relation between these two classes is: a processing resource can use language resources. This relationship is specifically introduced to properly define linguistic services that are intended to provide access functions to language resources. As shown in the figure, LinguisticService is provided by a processing resource, stressing that any linguistic service is realized by a processing resource, even if its prominent function</context>
<context position="9261" citStr="Cunningham, 2002" startWordPosition="1349" endWordPosition="1350">definition. 147 Figure 4. Taxonomy of Linguistic Analyzer. Figure 4 shows the working taxonomy of the analyzer class. While it is not depicted in the figure, the input/output constraints of a linguistic analyzer are specified by the Expression class, while its precondition/effect parameters are defined by NLProcessedStatus class. The details are also not shown in this figure, these constraints are further restricted with respect to the taxonomy of the processing resource. We also assume that any linguistic analyzer additively annotates some linguistic information to the input, as proposed by (Cunningham, 2002), (Klein and Potter, 2004). That is, an analyzer working at a certain linguistic level (or ‘depth’) adds the corresponding level of annotations to the input. In this sense, any natural language expression can have a layered/multiple linguistic annotation. To make this happen, a linguistic service ontology has to appropriately define a sub-ontology for the linguistic annotations by itself or by incorporating some external standard, such as LAF (Ide and Romary, 2004). 3.5 NLP status and the associated issues Figure 5 illustrates our working taxonomy of NLP processed status. Note that, in this fi</context>
</contexts>
<marker>Cunningham, 2002</marker>
<rawString>H. Cunningham, et al. 2002. GATE: A Framework and Graphical Development Environment for Robust NLP Tools and Applications. Proc. of ACL 2002, pp.168-175.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Graça</author>
</authors>
<title>NLP Tools Integration Using a Multi-Layered Repository.</title>
<date>2006</date>
<booktitle>Proc. of LREC 2006 Workshop on Merging and Layering Linguistic Information.</booktitle>
<marker>Graça, 2006</marker>
<rawString>J. Graça , et al. 2006. NLP Tools Integration Using a Multi-Layered Repository. Proc. of LREC 2006 Workshop on Merging and Layering Linguistic Information.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Hayashi</author>
<author>T Ishida</author>
</authors>
<title>A Dictionary Model for Unifying Machine Readable Dictionaries and Computational Concept Lexicons.</title>
<date>2006</date>
<booktitle>Proc. of LREC</booktitle>
<pages>1--6</pages>
<contexts>
<context position="7028" citStr="Hayashi and Ishida, 2006" startWordPosition="1027" endWordPosition="1030">stry -workflows Language Resource Access Mechanism Service Node Application Program Language Resource External Linguistic Service hasNLProcessedStatus* 146 lingualDictionary, (3) MultilingualTerminology, and (4) ConceptLexicon. The major instances of (1) and (2) are so-called machine-readable dictionaries (MRDs). Many of the community-based special language resources should fall into (3), including multilingual terminology lists specialized for some application domains. For subclass (4), we consider the computational concept lexicons, which can be modeled by a WordNet-like encoding framework (Hayashi and Ishida, 2006). 3.3 Taxonomy of processing resources The top level of the processing resource class consists of the following four subclasses, which take into account the input/output constraints of processing resources, as well as the language resources they utilize. •AbstractReader, AbstractWriter: These classes are introduced to describe computational processes that convert to-and-from nontextual representation (e.g. speech) and textual representation (character strings). • LR_Accessor: This class is introduced to describe language resource access functionalities. It is first partitioned into CorpusAcces</context>
</contexts>
<marker>Hayashi, Ishida, 2006</marker>
<rawString>Y. Hayashi and T. Ishida. 2006. A Dictionary Model for Unifying Machine Readable Dictionaries and Computational Concept Lexicons. Proc. of LREC 2006, pp.1-6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Ide</author>
<author>L Romary</author>
</authors>
<title>International Standard for a Linguistic Annotation Framework.</title>
<date>2004</date>
<journal>Journal of Natural Language Engineering,</journal>
<volume>10</volume>
<pages>211--225</pages>
<contexts>
<context position="9730" citStr="Ide and Romary, 2004" startWordPosition="1422" endWordPosition="1425">g resource. We also assume that any linguistic analyzer additively annotates some linguistic information to the input, as proposed by (Cunningham, 2002), (Klein and Potter, 2004). That is, an analyzer working at a certain linguistic level (or ‘depth’) adds the corresponding level of annotations to the input. In this sense, any natural language expression can have a layered/multiple linguistic annotation. To make this happen, a linguistic service ontology has to appropriately define a sub-ontology for the linguistic annotations by itself or by incorporating some external standard, such as LAF (Ide and Romary, 2004). 3.5 NLP status and the associated issues Figure 5 illustrates our working taxonomy of NLP processed status. Note that, in this figure, only the portion related to linguistic analyzer is detailed. Benefits from the NLP status class will be twofold: (1) as a part of the description of a linguistic analyzer, we assign corresponding instances of this class as its precondition/effect parameters, (2) any instance of the expression class can be concisely ‘tagged’ by instances of the NLP status class, according to how ‘deeply’ the expression has been linguistically analyzed so far. Essentially, such</context>
</contexts>
<marker>Ide, Romary, 2004</marker>
<rawString>N. Ide and L. Romary. 2004. International Standard for a Linguistic Annotation Framework. Journal of Natural Language Engineering, Vol.10:3-4, pp.211-225.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Ishida</author>
</authors>
<title>Language Grid: An Infrastructure for Intercultural Collaboration.</title>
<date>2006</date>
<booktitle>Proc. of SAINT-06,</booktitle>
<pages>96--100</pages>
<note>keynote address.</note>
<contexts>
<context position="2195" citStr="Ishida, 2006" startWordPosition="321" endWordPosition="322">he future. To this end, technical components in an infrastructure must be properly described, and the semantics of the descriptions should be defined based on a shared ontology. 2 Architecture of a Language Infrastructure The linguistic service ontology described in this paper has not been intended for a particular language infrastructure. However we expect that the ontology should be first introduced in an infrastructure like the Language Grid 1 , because it, unlike other research-oriented infrastructures, tries to incorporate a wide range of NLP tools and community-based language resources (Ishida, 2006) in order to be useful for a range of intercultural collaboration activities. The fundamental technical components in the Language Grid could be: (a) external web-based services, (b) on-site NLP core functions, (c) static language resources, and (d) wrapper programs. Figure 1 depicts the general architecture of the infrastructure. The technical components listed above are deployed as shown in the figure. Computational nodes in the language grid are classified into the following two types as described in (Murakami et al., 2006). • A service node accommodates atomic linguistic services that prov</context>
<context position="7028" citStr="Ishida, 2006" startWordPosition="1029" endWordPosition="1030">ows Language Resource Access Mechanism Service Node Application Program Language Resource External Linguistic Service hasNLProcessedStatus* 146 lingualDictionary, (3) MultilingualTerminology, and (4) ConceptLexicon. The major instances of (1) and (2) are so-called machine-readable dictionaries (MRDs). Many of the community-based special language resources should fall into (3), including multilingual terminology lists specialized for some application domains. For subclass (4), we consider the computational concept lexicons, which can be modeled by a WordNet-like encoding framework (Hayashi and Ishida, 2006). 3.3 Taxonomy of processing resources The top level of the processing resource class consists of the following four subclasses, which take into account the input/output constraints of processing resources, as well as the language resources they utilize. •AbstractReader, AbstractWriter: These classes are introduced to describe computational processes that convert to-and-from nontextual representation (e.g. speech) and textual representation (character strings). • LR_Accessor: This class is introduced to describe language resource access functionalities. It is first partitioned into CorpusAcces</context>
</contexts>
<marker>Ishida, 2006</marker>
<rawString>T. Ishida. 2006. Language Grid: An Infrastructure for Intercultural Collaboration. Proc. of SAINT-06, pp. 96-100, keynote address.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Klein</author>
<author>S Potter</author>
</authors>
<title>An Ontology for NLP Services.</title>
<date>2004</date>
<booktitle>Proc. of LREC 2004 Workshop on Registry of Linguistic Data Categories.</booktitle>
<contexts>
<context position="9287" citStr="Klein and Potter, 2004" startWordPosition="1351" endWordPosition="1354">re 4. Taxonomy of Linguistic Analyzer. Figure 4 shows the working taxonomy of the analyzer class. While it is not depicted in the figure, the input/output constraints of a linguistic analyzer are specified by the Expression class, while its precondition/effect parameters are defined by NLProcessedStatus class. The details are also not shown in this figure, these constraints are further restricted with respect to the taxonomy of the processing resource. We also assume that any linguistic analyzer additively annotates some linguistic information to the input, as proposed by (Cunningham, 2002), (Klein and Potter, 2004). That is, an analyzer working at a certain linguistic level (or ‘depth’) adds the corresponding level of annotations to the input. In this sense, any natural language expression can have a layered/multiple linguistic annotation. To make this happen, a linguistic service ontology has to appropriately define a sub-ontology for the linguistic annotations by itself or by incorporating some external standard, such as LAF (Ide and Romary, 2004). 3.5 NLP status and the associated issues Figure 5 illustrates our working taxonomy of NLP processed status. Note that, in this figure, only the portion rel</context>
<context position="11648" citStr="Klein and Potter (2004)" startWordPosition="1727" endWordPosition="1730">encoded in the taxonomy allow simple reasoning in possible composite service composition processes. However note that the taxonomy is only preliminary. The arrangement of the subclasses within the hierarchy may end up being far different, depending on the languages considered, and the actual NLP tools, these are essentially idiosyncratic, that are at hand. For example, the notion of ‘chunk’ may be different from language to language. Despite of these, if we go too far in this direction, constructing a taxonomy would be meaningless, and we would forfeit reasonable generalities. 4 Related Works Klein and Potter (2004) have once proposed an ontology for NLP services with OWL-S definitions. Their proposal however has not included detailed taxonomies either for language resources, or for abstract linguistic objects, as shown in this paper. Graça, et al. (2006) introduced a framework for integrating NLP tools with a client-server architecture having a multi-layered repository. They also proposed a data model for encoding various types of linguistic information. However the model itself is not ontologized as proposed in this paper. 5 Concluding Remarks Although the proposed ontology successfully defined a numbe</context>
</contexts>
<marker>Klein, Potter, 2004</marker>
<rawString>E. Klein and S. Potter. 2004. An Ontology for NLP Services. Proc. of LREC 2004 Workshop on Registry of Linguistic Data Categories.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Murakami</author>
</authors>
<title>Infrastructure for Language Service Composition.</title>
<date>2006</date>
<booktitle>Proc. of Second International Conference on Semantics, Knowledge, Grid.</booktitle>
<marker>Murakami, 2006</marker>
<rawString>Y. Murakami, et al. 2006. Infrastructure for Language Service Composition. Proc. of Second International Conference on Semantics, Knowledge, Grid.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>