<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.423301">
Computational Linguistics Volume 17, Number 1
</note>
<bodyText confidence="0.970225">
As-Living-Thing that includes 12 extended metaphors. However, no taxonomies are
given for the other very general core metaphors used in MIDAS, which are Location-
Metaphor, At-State, Have-State, Container-Metaphor, Kill-Metaphor, and Eating-
Metaphor. Moreover, there is little discussion of the relationship between these core
metaphors.
The third question is: is there some way to reduce the enormous number of
metaphorical interpretations that MIDAS seeks? Step 3 of the metaphor interpreta-
tion algorithm given on page 95 states that MIDAS collects &amp;quot;all possible interpreta-
tions, both metaphorical and literal,&amp;quot; including presumably direct application of the
metaphors in MIDAS&apos;s knowledge base plus the use of MIDAS&apos;s metaphor extension
techniques. Metaphors are sought where there are no constraint violations (p. 104).
This is a vast amount of processing, and remember that MIDAS only uses 70 or so
metaphors — a larger system might contain hundreds. Martin might reply that realis-
tic metaphor interpretation does involve an enormous amount of processing. He may
be right.
</bodyText>
<sectionHeader confidence="0.745462" genericHeader="abstract">
References
</sectionHeader>
<affiliation confidence="0.363676">
•
Barnden, John A. (1989). &amp;quot;Belief,
metaphorically speaking.&amp;quot; In Proceedings,
1st International Conference on Principles of
Knowledge Representation and Reasoning,
</affiliation>
<bodyText confidence="0.789404107142857">
Morgan Kaufmann.
Barnden, John A. (1990). &amp;quot;Naive
metaphysics: A metaphor-based approach
to propositional attitude representation
(unabridged version).&amp;quot; Memorandum
MCCS-90-174, Computing Research
Laboratory, New Mexico State University.
Carbonell, Jaime G. (1982). &amp;quot;Metaphor: An
inescapable phenomenon in natural
language comprehension.&amp;quot; In Strategies for
natural language processing, edited by
Wendy G. Lehnert and Martin H. Ringle,
415-434. Lawrence Erlbaum Associates.
Jacobs, Paul S. (1987). &amp;quot;Knowledge-intensive
natural language generation.&amp;quot; Artificial
Intelligence, 33,325-378.
Lakoff, George and Johnson, Mark (1980).
Metaphors We Live By. The University of
Chicago Press.
Norvig, Peter (1989). &amp;quot;Marker passing as a
weak method for text inferencing.&amp;quot;
Cognitive Science, 13, 569-620.
Dan Fass is a visiting fellow at the Centre for Systems Science, Simon Fraser University, Canada.
Before this, he worked for three years at the Computing Research Laboratory, New Mexico State
University, U.S.A. His Ph.D. is from the University of Essex, England. His research interests
include the computer understanding of metaphor and metonymy, lexical ambiguity, machine-
readable dictionaries, ill-formed input, and beliefs. Fass&apos;s address is Centre for Systems Science,
Simon Fraser University, Burnaby, British Columbia, Canada V5A 1S6; e-mail: fass@cs.sfu.ca.
</bodyText>
<subsectionHeader confidence="0.841437">
Practical SGML
Eric van Herwijnen
</subsectionHeader>
<bodyText confidence="0.944376">
(CERN)
Dordrecht: Kluwer Academic
Publishers, 1990, xviii + 307 pp.
Paperbound, ISBN 0-7923-0635-X,
$39.95
</bodyText>
<footnote confidence="0.614682666666667">
Reviewed by
Carol Van Ess-Dykema
U.S. Department of Defense and Carnegie Mellon University
</footnote>
<page confidence="0.994858">
110
</page>
<subsectionHeader confidence="0.37843">
Book Reviews
</subsectionHeader>
<sectionHeader confidence="0.810458" genericHeader="introduction">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999782111111111">
This review begins with background information on what SGML is. This is followed
by a brief synopsis of SGML&apos;s benefits and extensibility as an information management
tool for members of the computational literary and linguistic communities. The review
then describes the current status of the Text Encoding Initiative&apos;s SGML draft Guide-
lines for computational literary and linguistic use. It identifies two projects within the
computational linguistic community that have made commitments to encode their cor-
pora and the results of their research with SGML. The final part of the review evaluates
Practical SGML, focusing on its effectiveness as a reference manual for computational
literary and linguistic practitioners who wish to learn to use SGML.
</bodyText>
<sectionHeader confidence="0.756489" genericHeader="method">
2. What Is SGML?
</sectionHeader>
<bodyText confidence="0.999268740740741">
The Standard Generalized Markup Language, commonly referred to as SGML, is an
advanced tool in the science of information management that provides its users data
portability through standardization. It is the International Standards Organization
(ISO) standard for document description (ISO 8879). The ISO standard defines SGML
as &amp;quot;a language for document representation that formalizes mark-up and frees it of
system and processing dependencies.&amp;quot; It is an abstract language developed to facilitate
text interchange in the form of computer-readable data, intended primarily for use by
publishers but with application for the computational literary and linguistic commu-
nities as well. SGML provides standardized mark-up conventions so that interpretation
for structural or typographic purposes need not be improvised for each document
every time it is transmitted (Fought and Van Ess-Dykema 1990).
SGML-encoded documents are transportable from one hardware or software en-
vironment to another without loss of information. An SGML document can be trans-
ported from your computer to a different computer via a network, diskette, or tape.
SGML-encoded data can be transferred from a text formatter to a database. Van Her-
wijnen states in the preface to Practical SGML that SGML allows for the interchange of
large amounts of complex data and for easy access to them. With SGML, data become
independent of their medium. Storage is no longer restricted to paper, but can be in
different forms such as in a database or on optical disk (p. ix).
SGML is not a text formatter like TX that many computational linguists are famil-
iar with. TEX is a computer program that performs tasks of page makeup and typeset-
ting that were traditionally carried out manually. Text formatting languages like TEX
use special characters such as \, {, and &amp; that may be translated incorrectly when
a document passes from one computer to another (pp. 3, 16-17). SGML mark-up, in
contrast, uses system-independent tags to indicate the structural composition of a doc-
ument. For example, SGML mark-up for a memorandum includes, but is not limited
to, the following: (Memo), (To), (From), (Body), (P)(paragraph), (Q)(quotation) (p. 33).
</bodyText>
<sectionHeader confidence="0.412987" genericHeader="method">
3. Extensibility to Literary and Linguistic Computing
</sectionHeader>
<bodyText confidence="0.999850833333333">
The present diversity of encoding schemes used for literary and linguistic texts makes it
difficult to move texts from one software program to another. Researchers who receive
texts from others must decipher the texts and convert them into their local encoding
scheme before they can use them. As machine-readable texts and encoding schemes
proliferate, the need for a common scheme becomes more pressing (Text Encoding
Initiative 1988).
</bodyText>
<page confidence="0.978429">
111
</page>
<note confidence="0.275968">
Computational Linguistics Volume 17, Number 1
</note>
<bodyText confidence="0.999275">
SGML mark-up conventions designed for literary and linguistic use have been
drafted by members of the Text Encoding Initiative (described below). This discipline-
specific SGML mark-up will allow for the interchange of existing literary and linguistic
data and for the encoding of new documents. Computational literary and linguistic
practitioners will, moreover, be able to encode the results of their research on texts
with SGML mark-up; for example, encoding the metrical structure of verse and the
analysis of sentence syntax.
SGML mark-up conventions developed for the literary and linguistic communities&apos;
local processing needs will be able to be used by programs that do the following:
</bodyText>
<listItem confidence="0.942923444444445">
• edit texts (e.g., word processors, syntax-directed editors, hypertext
systems),
• format and print texts (word processors, batch-oriented formatting
programs like Scribe, Script, Runoff, roff, or TEX),
• load texts into free-text retrieval databases or conventional databases,
• unload texts from databases as search results or for export to other
software,
• search texts for words or phrases,
• perform content analysis on texts,
• collate texts for critical editions,
• scan texts for automatic indexing or similar purposes,
• parse texts linguistically,
• analyze texts stylistically,
• scan verse texts metrically,
• link words of a text to images of the objects named by the words (as in a
hypertext English or foreign-language teaching system)
(Sperberg-McQueen and Burnard 1990).
4. Text Encoding Initiative
</listItem>
<bodyText confidence="0.999628636363636">
The Text Encoding Initiative (TEI) is a cooperative undertaking of the Association
for Computers and the Humanities (ACH), the Association for Computational Lin-
guistics (ACL), and the Association for Literary and Linguistic Computing (ALLC).
The Initiative has already formulated and disseminated the first draft Guidelines for
the Encoding and Interchange of Machine-Readable Texts, intended for literary,
linguistic, historical, or other textual research. The format is as far as possible
hardware- and software-independent, rigorous in its definition of textual objects, easy
to use, and compatible with existing standards (Text Encoding Initiative 1988). Four
working committees addressed the questions of text documentation, text representa-
tion, text analysis and interpretation, and metalanguage issues, in the preparation of
the draft guidelines.
</bodyText>
<page confidence="0.989983">
112
</page>
<subsectionHeader confidence="0.814774">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.999920636363636">
The first version of the Guidelines, published in 1990, will be revised and extended
over the next two years. The final version will be published in 1992.1 The draft guide-
lines are incomplete and imperfect. They need to be evaluated by a large portion of the
computational literary and linguistic communities. The final version will most likely
still leave some individuals grumbling, but the communities at large are certain to
gain.
The TEl does not expect that all members of the literary and linguistic commu-
nities will immediately encode their collections of texts with SGML. The benefits of
hardware- and software-independent interchange of data without loss of information,
however, is expected to produce many. enthusiastic SGML users in industry, govern-
ments, universities, and research centers.
</bodyText>
<sectionHeader confidence="0.568214" genericHeader="method">
5. Current Linguistic Projects Using SGML
</sectionHeader>
<bodyText confidence="0.998897578947368">
There are several projects within the computational linguistics community that have
made commitments to encode their corpora and the results of their research analyses
with SGML.
The material in the ACL Data Collection Initiative text corpus will be encoded in
a standard form based on SGML. Over time, the Initiative members hope to be able
to incorporate annotations reflecting consensually approved linguistic features, such
as part of speech and various aspects of syntactic and, perhaps, semantic structure.
The text corpus is housed with Mark Liberman in the Department of Linguistics at the
University of Pennsylvania. Both the encoding and the annotations will be coordinated
with the work of the Text Encoding Initiative.
The goal of the &amp;quot;Tree Bank of Written and Spoken American English&amp;quot; project,
also at the University of Pennsylvania, is to annotate millions of sentences with part-
of-speech assignment, skeletal syntactic parsings, intonational boundaries for spoken
language, and other forms of linguistic information that can be encoded consistently
and quickly. The project will be coordinated with the work of the TEI&apos;s Committee on
Text Analysis and Interpretation, which is concentrating initially on developing SGML
mark-up for linguistically salient features of texts. Mitch Marcus in the Department of
Computer and Information Science is housing the data of the project (Association for
Computational Linguistics, Data Collection Initiative 1989a, 1989b).
</bodyText>
<subsectionHeader confidence="0.537329">
6. How to Learn to Use SGML
</subsectionHeader>
<bodyText confidence="0.9983138">
Practical SGML contains 13 chapters, organized into three parts. Van Herwijnen states
in the preface that Part I, &amp;quot;Getting Started with SGML,&amp;quot; is for authors, document
managers, programmers, and everyone who needs an introduction to SGML. Part II,
&amp;quot;Advanced SGML,&amp;quot; is for document managers, programmers, and interested authors;
Part III, &amp;quot;SGML Implementations,&amp;quot; is for application programmers.
</bodyText>
<listItem confidence="0.5876798">
1 Interim drafts of the Guidelines are available to interested members of the computational literary and
linguistic communities for review and comment, upon request from either of the following addresses:
• Lou Burnard, Oxford University Computing Service, 13 Banbury Rd, Oxford 0X2 6NN, UK. Fax:
+44 (865) 273275; e-mail: lou@vax.oxford.ac.uk.
• C.M. Sperberg-McQueen, Computer Center MC 135, University of Illinois at Chicago, Box 6998,
</listItem>
<footnote confidence="0.342033">
Chicago, IL 60680, U.S.A. Fax: (312) 996-6834; e-mail: U35395@uicvm.bitnet or
U35395@uicvm.ccouic.edu.
There is no charge for the first copy sent to any one address.
</footnote>
<page confidence="0.996175">
113
</page>
<note confidence="0.422941">
Computational Linguistics Volume 17, Number 1
</note>
<bodyText confidence="0.8185855">
Van Herwijnen says that after reading Part I (Chapters 1-5), the reader should
know, among other things:
</bodyText>
<listItem confidence="0.998878739130435">
• something about the history of SGML,
• the basic ideas of SGML,
• what its advantages are,
• how to mark up a document,
• how to read and write a Document Type Definition (DTD),
• what the functions of a parser are,
• how to manage SGML.
Part II (Chapters 6-8) presents:
• some formal aspects of the SGML language,
• how data characters are distinguished from mark-up,
• what the reference concrete syntax is,
• what the SGML declaration is,
• how to create tagged documents using various editors or tagging
systems.
Part III (Chapters 9-13) explains:
• what software components exist in an SGML environment,
• how to create SGML documents with non-SGML word processors,
• why SGML editors are important,
• some examples of parsers,
• how to translate SGML tags into application procedures,
• what Computer-Aided Acquisition and Logistics Support (CALS) is,
• how to add SGML documents to a database,
• how you can use SGML to describe Electronic Data Interchange (EDI).
</listItem>
<bodyText confidence="0.9992461">
Each of the book&apos;s 13 chapters includes a bibliography. Selected chapters contain com-
prehension questions as well.
Appendix A provides the answers to the comprehension questions. In Appendix B,
van Herwijnen describes all aspects of the electronic publication of Practical SGML
itself. He includes a description of how he moved the manuscript in SGML form
over a computer network between author and publisher, the former with an EBCDIC
system and the latter with an ASCII system, until the final version was produced.
Appendix C presents the Document Type Definition that van Herwijnen wrote for
the book. Appendix D contains entity definitions for use with the text formatter TEX.
Appendix E explains the International Standards Organization SGML standard, ISO
</bodyText>
<page confidence="0.996257">
114
</page>
<subsectionHeader confidence="0.927835">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.999975921568627">
8879. The book contains a glossary of terms and definitions presented in the text, and
an index.
An SGML user needs to know what is contained in the three parts of an SGML
document: the SGML declaration, the document type definition, and the document
instance. Chapters 2, 3, 4, and 6 of Practical SGML explain these three parts admirably.
No successful document interchange or application processing can occur without these
three parts included in or along with the document. As these chapters explain, the
document instance is the part of the SGML document that contains the marked-up
textual data. It needs to be translated into processing commands before it can be
printed. The document type definition (DTD) defines the mark-up rules for a given class
of documents. Programs called SGML parsers analyze and check that the mark-up in
a specific document satisfies the rules defined by the DTD. This means that different
documents of the same type can be processed in a uniform way. The SGML declaration
defines which characters are used in a document instance, which syntax the DTD is
written in, and which SGML features are used.
An SGML environment comprises three subsystems. New SGML users may al-
ready have available one or more of them in their local computing environment. The
three are: an input system for developing SGML documents, a parser for checking
SGML documents, and some system to process (translate) the parsed SGML docu-
ments. Van Herwijnen discusses these subsystems in Chapters 9 and 10. He correctly
emphasizes that the parser should verify every document before a program trans-
lates it for processing or before it is exported to a different computer. Since SGML
documents are processor-independent, they need to be translated into specific com-
mands for any given formatter. The translation should be done automatically by a
program.
An SGML user&apos;s source documents may originate from optical character-recogni-
tion scanners, ASCII files, printer files, and word processor output. Commercial SGML
editors are the ideal SGML input system. However, for those literary and linguistic
practitioners who are interested in learning SGML but who find themselves without
such an input system at their disposal, van Herwijnen states that the following editors
and word processing systems can also be used: a simple text editor, an editor that
formats, or a combination word processor and stylesheet. He explains that in the case
of a simple text editor, the SGML mark-up tags are added by hand in the editor, or later
by relying on the parser to understand typewriter conventions defined in the DTD. In
this situation the SGML parser adds the mark-up while it parses the document. An
easier way to insert the SGML mark-up is to use an editor that is able to format text on
the screen. Typographical styles (e.g., font) for all document elements defined in the
DTD can also be made and grouped together in macros. Using the latter, a structure
may be enforced on any document created with the word processor. Mark-up may
be added by a program afterwards, or by the parser if the DTD contains typewriter
conventions (p. 182).
The book, unfortunately, contains many copyediting infelicities. One wishes there
had been as much care taken in editing the text as there obviously was in developing
the material contained in the text and in inserting the SGML mark-up into the text.
None of the infelicities precludes the book&apos;s effectiveness.
I recommend Practical SGML to computational literary and linguistic practitioners
who may wish to learn SGML. It should serve as an excellent reference manual for
those desiring the benefits of this new tool in information management. Van Her-
wijnen is the leader of the text processing section at CERN, the European Laboratory
for Particle Physics, Geneva, where there are a large number of end-users of varied
experience. I agree with the writers of the book&apos;s foreword, who state that it is obvious
</bodyText>
<page confidence="0.993132">
115
</page>
<note confidence="0.558841">
Computational Linguistics Volume 17, Number 1
</note>
<bodyText confidence="0.997143">
that van Herwijnen has written the book on the basis of his own first-hand experience
with SGML (p. vii).
I suggest that interested practitioners use Practical SGML, together with the com-
putational literary and linguistic SGML draft Guidelines developed by the four commit-
tees of the Text Encoding Initiative, in their preparation of SGML documents. Consult
Practical SGML first, and then the Guidelines. A third source one may wish to consult is
SGML: An Author&apos;s Guide to the Standard Generalized Markup Language by Martin Bryan
(1988). Then roll up your sleeves and dig in. Insert the SGML tags and attributes into
your document. Create your SGML declaration. Write your DTD. And don&apos;t forget
to have the parser validate your mark-up before interchanging the document with
another computer or translating it for processing.
</bodyText>
<sectionHeader confidence="0.992685" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999760352941176">
Association for Computational Linguistics,
Data Collection Initiative (1989a). The
Finite String, 15(1), March 1989, 1-2.
Association for Computational Linguistics,
Data Collection Initiative (1989b). The
Finite String, 15(4), December 1989, 46-47.
Bryan, Martin (1988). SGML: An Author&apos;s
Guide to the Standard Generalized Markup
Language. Addison-Wesley.
Fought, John and Van Ess-Dykema, Carol
(1990). &amp;quot;Toward an SGML document type
definition for bilingual dictionaries.&amp;quot;
Technical Report TEl AIW20, Text
Encoding Initiative.
International Standards Organization (1986).
&amp;quot;Information processing — Text and office
systems — Standard Generalized Markup
Language (SGML) (ISO 8879).&amp;quot; ISO.
Sperberg-McQueen, C. M. and Burnard, L.,
eds. (1990). Guidelines for the Encoding and
Interchange of Machine-Readable Texts. Draft
Version 1.0. Text Encoding Initiative.
Text Encoding Initiative (1988). &amp;quot;Text
encoding initiative: Initiative for text
encoding guidelines and a common
interchange format for literary and
linguistic data.&amp;quot; Document TEl J3. Text
Encoding Initiative.
Carol Van Ess-Dykema is a member of the Dictionary Encoding Subcommittee of the Text Repre-
sentation Committee of the Text Encoding Initiative. She is a computational linguist at the U.S.
Department of Defense. She presently holds a postdoctoral fellowship at the Center for Machine
Translation, Carnegie Mellon University. Van Ess-Dykema&apos;s address is Center for Machine Trans-
lation, Smith Hall, Room 109, Carnegie Mellon University, 5000 Forbes Avenue, Pittsburgh, PA
15213; e-mail: vaness@nl.cs.cmu.edu.
</reference>
<page confidence="0.999026">
116
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000413">
<note confidence="0.409724">Computational Linguistics Volume 17, Number 1</note>
<abstract confidence="0.959679666666667">includes 12 extended metaphors. However, no taxonomies are for the other very general core metaphors used in MIDAS, which are Location- At-State, Have-State, Container-Metaphor, Kill-Metaphor, Eatingthere is little discussion of the relationship between these core metaphors. The third question is: is there some way to reduce the enormous number of metaphorical interpretations that MIDAS seeks? Step 3 of the metaphor interpretation algorithm given on page 95 states that MIDAS collects &amp;quot;all possible interpretations, both metaphorical and literal,&amp;quot; including presumably direct application of the metaphors in MIDAS&apos;s knowledge base plus the use of MIDAS&apos;s metaphor extension techniques. Metaphors are sought where there are no constraint violations (p. 104). This is a vast amount of processing, and remember that MIDAS only uses 70 or so metaphors — a larger system might contain hundreds. Martin might reply that realistic metaphor interpretation does involve an enormous amount of processing. He may be right.</abstract>
<note confidence="0.5786836">References • Barnden, John A. (1989). &amp;quot;Belief, speaking.&amp;quot; In 1st International Conference on Principles of</note>
<title confidence="0.846075">Knowledge Representation and Reasoning,</title>
<author confidence="0.878134">Morgan Kaufmann</author>
<address confidence="0.401113">Barnden, John A. (1990). &amp;quot;Naive</address>
<abstract confidence="0.959647">metaphysics: A metaphor-based approach to propositional attitude representation (unabridged version).&amp;quot; Memorandum</abstract>
<affiliation confidence="0.7494615">MCCS-90-174, Computing Research Laboratory, New Mexico State University.</affiliation>
<address confidence="0.888822">Carbonell, Jaime G. (1982). &amp;quot;Metaphor: An</address>
<abstract confidence="0.690033666666667">inescapable phenomenon in natural comprehension.&amp;quot; In for language processing, by</abstract>
<author confidence="0.943838">Wendy G Lehnert</author>
<author confidence="0.943838">Martin H Ringle</author>
<note confidence="0.6802672">415-434. Lawrence Erlbaum Associates. Jacobs, Paul S. (1987). &amp;quot;Knowledge-intensive language generation.&amp;quot; Lakoff, George and Johnson, Mark (1980). We Live The University of Chicago Press. Norvig, Peter (1989). &amp;quot;Marker passing as a weak method for text inferencing.&amp;quot; Science, Fass a visiting fellow at the Centre for Systems Science, Simon Fraser University, Canada. Before this, he worked for three years at the Computing Research Laboratory, New Mexico State University, U.S.A. His Ph.D. is from the University of Essex, England. His research interests include the computer understanding of metaphor and metonymy, lexical ambiguity, machinereadable dictionaries, ill-formed input, and beliefs. Fass&apos;s address is Centre for Systems Science, Simon Fraser University, Burnaby, British Columbia, Canada V5A 1S6; e-mail: fass@cs.sfu.ca.</note>
<title confidence="0.974202">Practical SGML</title>
<author confidence="0.998433">Eric van_Herwijnen</author>
<affiliation confidence="0.650298">(CERN) Dordrecht: Kluwer Academic</affiliation>
<note confidence="0.82830975">Publishers, 1990, xviii + 307 pp. Paperbound, ISBN 0-7923-0635-X, $39.95 Reviewed by</note>
<author confidence="0.998772">Carol Van_Ess-Dykema</author>
<affiliation confidence="0.998371">U.S. Department of Defense and Carnegie Mellon University</affiliation>
<address confidence="0.893324">110</address>
<intro confidence="0.660225">Book Reviews</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<title>Association for Computational Linguistics, Data Collection Initiative</title>
<date>1989</date>
<journal>The Finite String,</journal>
<volume>15</volume>
<issue>1</issue>
<pages>1--2</pages>
<contexts>
<context position="1157" citStr="(1989)" startWordPosition="171" endWordPosition="171">iven on page 95 states that MIDAS collects &amp;quot;all possible interpretations, both metaphorical and literal,&amp;quot; including presumably direct application of the metaphors in MIDAS&apos;s knowledge base plus the use of MIDAS&apos;s metaphor extension techniques. Metaphors are sought where there are no constraint violations (p. 104). This is a vast amount of processing, and remember that MIDAS only uses 70 or so metaphors — a larger system might contain hundreds. Martin might reply that realistic metaphor interpretation does involve an enormous amount of processing. He may be right. References • Barnden, John A. (1989). &amp;quot;Belief, metaphorically speaking.&amp;quot; In Proceedings, 1st International Conference on Principles of Knowledge Representation and Reasoning, Morgan Kaufmann. Barnden, John A. (1990). &amp;quot;Naive metaphysics: A metaphor-based approach to propositional attitude representation (unabridged version).&amp;quot; Memorandum MCCS-90-174, Computing Research Laboratory, New Mexico State University. Carbonell, Jaime G. (1982). &amp;quot;Metaphor: An inescapable phenomenon in natural language comprehension.&amp;quot; In Strategies for natural language processing, edited by Wendy G. Lehnert and Martin H. Ringle, 415-434. Lawrence Erlbaum As</context>
</contexts>
<marker>1989</marker>
<rawString>Association for Computational Linguistics, Data Collection Initiative (1989a). The Finite String, 15(1), March 1989, 1-2.</rawString>
</citation>
<citation valid="true">
<title>Association for Computational Linguistics, Data Collection Initiative</title>
<date>1989</date>
<journal>The Finite String,</journal>
<volume>15</volume>
<issue>4</issue>
<pages>46--47</pages>
<contexts>
<context position="1157" citStr="(1989)" startWordPosition="171" endWordPosition="171">iven on page 95 states that MIDAS collects &amp;quot;all possible interpretations, both metaphorical and literal,&amp;quot; including presumably direct application of the metaphors in MIDAS&apos;s knowledge base plus the use of MIDAS&apos;s metaphor extension techniques. Metaphors are sought where there are no constraint violations (p. 104). This is a vast amount of processing, and remember that MIDAS only uses 70 or so metaphors — a larger system might contain hundreds. Martin might reply that realistic metaphor interpretation does involve an enormous amount of processing. He may be right. References • Barnden, John A. (1989). &amp;quot;Belief, metaphorically speaking.&amp;quot; In Proceedings, 1st International Conference on Principles of Knowledge Representation and Reasoning, Morgan Kaufmann. Barnden, John A. (1990). &amp;quot;Naive metaphysics: A metaphor-based approach to propositional attitude representation (unabridged version).&amp;quot; Memorandum MCCS-90-174, Computing Research Laboratory, New Mexico State University. Carbonell, Jaime G. (1982). &amp;quot;Metaphor: An inescapable phenomenon in natural language comprehension.&amp;quot; In Strategies for natural language processing, edited by Wendy G. Lehnert and Martin H. Ringle, 415-434. Lawrence Erlbaum As</context>
</contexts>
<marker>1989</marker>
<rawString>Association for Computational Linguistics, Data Collection Initiative (1989b). The Finite String, 15(4), December 1989, 46-47.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Bryan</author>
</authors>
<title>SGML: An Author&apos;s Guide to the Standard Generalized Markup Language.</title>
<date>1988</date>
<publisher>Addison-Wesley.</publisher>
<marker>Bryan, 1988</marker>
<rawString>Bryan, Martin (1988). SGML: An Author&apos;s Guide to the Standard Generalized Markup Language. Addison-Wesley.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Fought</author>
<author>Van Ess-Dykema</author>
</authors>
<title>Toward an SGML document type definition for bilingual dictionaries.&amp;quot;</title>
<date>1990</date>
<tech>Technical Report TEl AIW20, Text Encoding Initiative.</tech>
<marker>Fought, Van Ess-Dykema, 1990</marker>
<rawString>Fought, John and Van Ess-Dykema, Carol (1990). &amp;quot;Toward an SGML document type definition for bilingual dictionaries.&amp;quot; Technical Report TEl AIW20, Text Encoding Initiative.</rawString>
</citation>
<citation valid="true">
<title>Information processing — Text and office systems — Standard Generalized Markup Language (SGML) (ISO 8879).&amp;quot; ISO.</title>
<date>1986</date>
<institution>International Standards Organization</institution>
<marker>1986</marker>
<rawString>International Standards Organization (1986). &amp;quot;Information processing — Text and office systems — Standard Generalized Markup Language (SGML) (ISO 8879).&amp;quot; ISO.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M Sperberg-McQueen</author>
<author>L Burnard</author>
<author>eds</author>
</authors>
<title>Guidelines for the Encoding and Interchange of Machine-Readable Texts. Draft Version 1.0. Text Encoding Initiative.</title>
<date>1990</date>
<marker>Sperberg-McQueen, Burnard, eds, 1990</marker>
<rawString>Sperberg-McQueen, C. M. and Burnard, L., eds. (1990). Guidelines for the Encoding and Interchange of Machine-Readable Texts. Draft Version 1.0. Text Encoding Initiative.</rawString>
</citation>
<citation valid="true">
<title>Text encoding initiative: Initiative for text encoding guidelines and a common interchange format for literary and linguistic data.&amp;quot; Document TEl J3. Text Encoding Initiative.</title>
<date>1988</date>
<institution>Text Encoding Initiative</institution>
<marker>1988</marker>
<rawString>Text Encoding Initiative (1988). &amp;quot;Text encoding initiative: Initiative for text encoding guidelines and a common interchange format for literary and linguistic data.&amp;quot; Document TEl J3. Text Encoding Initiative.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Carol Van</author>
</authors>
<title>Ess-Dykema is a member of the Dictionary Encoding Subcommittee of the Text Representation Committee of the Text Encoding Initiative. She is a computational linguist at the U.S. Department of Defense. She presently holds a postdoctoral fellowship at the</title>
<institution>Center for Machine Translation, Carnegie Mellon University. Van</institution>
<location>Pittsburgh, PA</location>
<note>15213; e-mail: vaness@nl.cs.cmu.edu.</note>
<marker>Van, </marker>
<rawString>Carol Van Ess-Dykema is a member of the Dictionary Encoding Subcommittee of the Text Representation Committee of the Text Encoding Initiative. She is a computational linguist at the U.S. Department of Defense. She presently holds a postdoctoral fellowship at the Center for Machine Translation, Carnegie Mellon University. Van Ess-Dykema&apos;s address is Center for Machine Translation, Smith Hall, Room 109, Carnegie Mellon University, 5000 Forbes Avenue, Pittsburgh, PA 15213; e-mail: vaness@nl.cs.cmu.edu.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>