<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.006642">
<title confidence="0.9978605">
Grammar Prototyping and Testing with the
LinGO Grammar Matrix Customization System
</title>
<author confidence="0.9932565">
Emily M. Bender, Scott Drellishak, Antske Fokkens, Michael Wayne Goodman,
Daniel P. Mills, Laurie Poulson, and Safiyyah Saleem
</author>
<affiliation confidence="0.999702">
University of Washington, Seattle, Washington, USA
</affiliation>
<email confidence="0.9879815">
{ebender,sfd,goodmami,dpmills,lpoulson,ssaleem}@uw.edu,
afokkens@coli.uni-saarland.de
</email>
<sectionHeader confidence="0.993699" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99991675">
This demonstration presents the LinGO
Grammar Matrix grammar customization
system: a repository of distilled linguis-
tic knowledge and a web-based service
which elicits a typological description of
a language from the user and yields a cus-
tomized grammar fragment ready for sus-
tained development into a broad-coverage
grammar. We describe the implementation
of this repository with an emphasis on how
the information is made available to users,
including in-browser testing capabilities.
</bodyText>
<sectionHeader confidence="0.998801" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999952913043478">
This demonstration presents the LinGO Gram-
mar Matrix grammar customization system1 and
its functionality for rapidly prototyping grammars.
The LinGO Grammar Matrix project (Bender et
al., 2002) is situated within the DELPH-IN2 col-
laboration and is both a repository of reusable
linguistic knowledge and a method of delivering
this knowledge to a user in the form of an ex-
tensible precision implemented grammar. The
stored knowledge includes both a cross-linguistic
core grammar and a series of “libraries” contain-
ing analyses of cross-linguistically variable phe-
nomena. The core grammar handles basic phrase
types, semantic compositionality, and general in-
frastructure such as the feature geometry, while
the current set of libraries includes analyses of
word order, person/number/gender, tense/aspect,
case, coordination, pro-drop, sentential negation,
yes/no questions, and direct-inverse marking, as
well as facilities for defining classes (types) of lex-
ical entries and lexical rules which apply to those
types. The grammars produced are compatible
with both the grammar development tools and the
</bodyText>
<footnote confidence="0.999699">
1http://www.delph-in.net/matrix/customize/
2http://www.delph-in.net
</footnote>
<bodyText confidence="0.999125730769231">
grammar-based applications produced by DELPH-
IN. The grammar framework used is Head-driven
Phrase Structure Grammar (HPSG) (Pollard and
Sag, 1994) and the grammars map bidirectionally
between surface strings and semantic representa-
tions in the format of Minimal Recursion Seman-
tics (Copestake et al., 2005).
The Grammar Matrix project has three goals—
one engineering and two scientific. The engineer-
ing goal is to reduce the cost of creating gram-
mars by distilling the solutions developed in exist-
ing DELPH-IN grammars and making them easily
available for new projects. The first scientific goal
is to support grammar engineering for linguistic
hypothesis testing, allowing users to quickly cus-
tomize a basic grammar and use it as a medium in
which to develop and test analyses of more inter-
esting phenomena.3 The second scientific goal is
to use computational methods to combine the re-
sults of typological research and formal syntactic
analysis into a single resource that achieves both
typological breadth (handling the known range of
realizations of the phenomena analyzed) and ana-
lytical depth (producing analyses which work to-
gether to map surface strings to semantic represen-
tations) (Drellishak, 2009).
</bodyText>
<sectionHeader confidence="0.982571" genericHeader="method">
2 System Overview
</sectionHeader>
<bodyText confidence="0.99981625">
Grammar customization with the LinGO Gram-
mar Matrix consists of three primary activities:
filling out the questionnaire, preliminary testing of
the grammar fragment, and grammar creation.
</bodyText>
<subsectionHeader confidence="0.975563">
2.1 Questionnaire
</subsectionHeader>
<bodyText confidence="0.997126">
Most of the linguistic phenomena supported by the
questionnaire vary across languages along multi-
ple dimensions. It is not enough, for example,
</bodyText>
<footnote confidence="0.999160666666667">
3Research of this type based on the Grammar Matrix
includes (Crysmann, 2009) (tone change in Hausa) and
(Fokkens et al., 2009) (Turkish suspended affixation).
</footnote>
<page confidence="0.524958">
1
</page>
<subsubsectionHeader confidence="0.189444">
Proceedings of the ACL 2010 System Demonstrations, pages 1–6,
</subsubsectionHeader>
<bodyText confidence="0.984113333333333">
Uppsala, Sweden, 13 July 2010. c�2010 Association for Computational Linguistics
simply to know that the target language has coor-
dination. It is also necessary to know, among other
things, what types of phrases can be coordinated,
how those phrases are marked, and what patterns
of marking appear in the language. Supporting a
linguistic phenomenon, therefore, requires elicit-
ing the answers to such questions from the user.
The customization system elicits these answers us-
ing a detailed, web-based, typological question-
naire, then interprets the answers without human
intervention and produces a grammar in the format
expected by the LKB (Copestake, 2002), namely
TDL (type description language).
The questionnaire is designed for linguists who
want to create computational grammars of natu-
ral languages, and therefore it freely uses techni-
cal linguistic terminology, but avoids, when possi-
ble, mentioning the internals of the grammar that
will be produced, although a user who intends to
extend the grammar will need to become familiar
with HPSG and TDL before doing so.
The questionnaire is presented to the user as a
series of connected web pages. The first page the
user sees (the “main page”) contains some intro-
ductory text and hyperlinks to direct the user to
other sections of the questionnaire (“subpages”).
Each subpage contains a set of related questions
that (with some exceptions) covers the range of
a single Matrix library. The actual questions in
the questionnaire are represented by HTML form
fields, including: text fields, check boxes, ra-
dio buttons, drop-downs, and multi-select drop-
downs. The values of these form fields are stored
in a “choices file”, which is the object passed on
to the grammar customization stage.
</bodyText>
<subsectionHeader confidence="0.761332">
2.1.1 Unbounded Content
</subsectionHeader>
<bodyText confidence="0.999974783783784">
Early versions of the customization system (Ben-
der and Flickinger, 2005; Drellishak and Bender,
2005) only allowed a finite (and small) number
of entries for things like lexical types. For in-
stance, users were required to provide exactly one
transitive verb type and one intransitive verb type.
The current system has an iterator mechanism in
the questionnaire that allows for repeated sections,
and thus unlimited entries. These repeated sec-
tions can also be nested, which allows for much
more richly structured information.
The utility of the iterator mechanism is most
apparent when filling out the Lexicon subpage.
Users can create an arbitrary number of lexical
rule “slots”, each with an arbitrary number of
morphemes which each in turn bear any num-
ber of feature constraints. For example, the
user could create a tense-agreement morpholog-
ical slot, which contains multiple portmanteau
morphemes each expressing some combination of
tense, subject person and subject number values
(e.g., French -ez expresses 2nd person plural sub-
ject agreement together with present tense).
The ability provided by the iterators to create
unbounded content facilitates the creation of sub-
stantial grammars through the customization sys-
tem. Furthermore, the system allows users to ex-
pand on some iterators while leaving others un-
specified, thus modeling complex rule interactions
even when it cannot cover features provided by
these rules. A user can correctly model the mor-
photactic framework of the language using “skele-
tal” lexical rules—those that specify morphemes’
forms and their co-occurrence restrictions, but per-
haps not their morphosyntactic features. The user
can then, post-customization, augment these rules
with the missing information.
</bodyText>
<subsectionHeader confidence="0.467379">
2.1.2 Dynamic Content
</subsectionHeader>
<bodyText confidence="0.999975782608696">
In earlier versions of the customization system, the
questionnaire was static. Not only was the num-
ber of form fields static, but the questions were
the same, regardless of user input. The current
questionnaire is more dynamic. When the user
loads the customization system’s main page or
subpages, appropriate HTML is created on the fly
on the basis of the information already collected
from the user as well as language-independent in-
formation provided by the system.
The questionnaire has two kinds of dynamic
content: expandable lists for unbounded entry
fields, and the population of drop-down selec-
tors. The lists in an iterated section can be ex-
panded or shortened with “Add” and “Delete” but-
tons near the items in question. Drop-down selec-
tors can be automatically populated in several dif-
ferent ways.4 These dynamic drop-downs greatly
lessen the amount of information the user must
remember while filling out the questionnaire and
can prevent the user from trying to enter an invalid
value. Both of these operations occur without re-
freshing the page, saving time for the user.
</bodyText>
<footnote confidence="0.687961">
4These include: the names of currently-defined features,
the currently-defined values of a feature, or the values of vari-
ables that match a particular regular expression.
</footnote>
<page confidence="0.978094">
2
</page>
<subsectionHeader confidence="0.994604">
2.2 Validation
</subsectionHeader>
<bodyText confidence="0.999997227272727">
It makes no sense to attempt to create a consis-
tent grammar from an empty questionnaire, an in-
complete questionnaire, or a questionnaire con-
taining contradictory answers, so the customiza-
tion system first sends a user’s answers through
“form validation”. This component places a set
of arbitrarily complex constraints on the answers
provided. The system insists, for example, that
the user not state the language contains no deter-
miners but then provide one in the Lexicon sub-
page. When a question fails form validation, it
is marked with a red asterisk in the questionnaire,
and if the user hovers the mouse cursor over the as-
terisk, a pop-up message appears describing how
form validation failed. The validation component
can also produce warnings (marked with red ques-
tion marks) in cases where the system can gen-
erate a grammar from the user’s answers, but we
have reason to believe the grammar won’t behave
as expected. This occurs, for example, when there
are no verbal lexical entries provided, yielding a
grammar that cannot parse any sentences.
</bodyText>
<subsectionHeader confidence="0.999826">
2.3 Creating a Grammar
</subsectionHeader>
<bodyText confidence="0.999997833333333">
After the questionnaire has passed validation, the
system enables two more buttons on the main
page: “Test by Generation” and “Create Gram-
mar”. “Test by Generation” allows the user to test
the performance of the current state of the gram-
mar without leaving the browser, and is described
in §3. “Create Grammar” causes the customiza-
tion system to output an LKB-compatible grammar
that includes all the types in the core Matrix, along
with the types from each library, tailored appropri-
ately, according to the specific answers provided
for the language described in the questionnaire.
</bodyText>
<subsectionHeader confidence="0.970251">
2.4 Summary
</subsectionHeader>
<bodyText confidence="0.999971972972973">
This section has briefly presented the structure
of the customization system. While we antici-
pate some future improvements (e.g., visualiza-
tion tools to assist with designing type hierarchies
and morphotactic dependencies), we believe that
this system is sufficiently general to support the
addition of analyses of many different linguistic
phenomena. The system has been used to create
starter grammars for more than 40 languages in the
context of a graduate grammar engineering course.
To give sense of the size of the grammars
produced by the customization system, Table 1
compares the English Resource Grammar (ERG)
(Flickinger, 2000), a broad-coverage precision
grammar in the same framework under develop-
ment since 1994, to 11 grammars produced with
the customization system by graduate students in
a grammar engineering class at the University of
Washington. The students developed these gram-
mars over three weeks using reference materials
and the customization system. We compare the
grammars in terms of the number types they de-
fine, as well as the number of lexical rule and
phrase structure rule instances.5 We separate
types defined in the Matrix core grammar from
language-specific types defined by the customiza-
tion system. Not all of the Matrix-provided types
are used in the definition of the language-specific
rules, but they are nonetheless an important part of
the grammar, serving as the foundation for further
hand-development. The Matrix core grammar in-
cludes a larger number of types whose function is
to provide disjunctions of parts of speech. These
are given in Table 1, as “head types”. The final col-
umn in the table gives the number of “choices” or
specifications that the users gave to the customiza-
tion system in order to derive these grammars.
</bodyText>
<sectionHeader confidence="0.962704" genericHeader="method">
3 Test-by-generation
</sectionHeader>
<bodyText confidence="0.999990166666667">
The purpose of the test-by-generation feature is to
provide a quick method for testing the grammar
compiled from a choices file. It accomplishes this
by generating sentences the grammar deems gram-
matical. This is useful to the user in two main
ways: it quickly shows whether any ungrammat-
ical sentences are being licensed by the grammar
and, by providing an exhaustive list of licensed
sentences for an input template, allows users to see
if an expected sentence is not being produced.
It is worth emphasizing that this feature of the
customization system relies on the bidirectional-
ity of the grammars; that is, the fact that the same
grammar can be used for both parsing and genera-
tion. Our experience has shown that grammar de-
velopers quickly find generation provides a more
stringent test than parsing, especially for the abil-
ity of a grammar to model ungrammaticality.
</bodyText>
<subsectionHeader confidence="0.981953">
3.1 Underspecified MRS
</subsectionHeader>
<bodyText confidence="0.9167145">
Testing by generation takes advantage of the gen-
eration algorithm include in the LKB (Carroll et al.,
</bodyText>
<footnote confidence="0.836756">
5Serious lexicon development is taken as a separate task
and thus lexicon size is not included in the table.
</footnote>
<page confidence="0.988317">
3
</page>
<table confidence="0.999961571428572">
Language Family Lg-specific types Matrix types Head types Lex rules Phrasal rules Choices
ERG Germanic 3654 N/A N/A 71 226 N/A
Breton Celtic 220 413 510 57 49 1692
Cherokee Iroquoian 182 413 510 95 27 985
French Romance 137 413 510 29 22 740
Jamamadi Arauan 188 413 510 87 11 1151
Lushootseed Salish 95 413 510 20 8 391
Nishnaabemwin Algonquian 289 413 510 124 50 1754
Pashto Iranian 234 413 510 86 19 1839
Pali Indo-Aryan 237 413 510 92 55 1310
Russian Slavic 190 413 510 56 35 993
Shona Bantu 136 413 510 51 9 591
Vietnamese Austro-Asiatic 105 413 510 2 26 362
Average 182.9 413 510 63.5 28.3 1073.5
</table>
<tableCaption confidence="0.999917">
Table 1: Grammar sizes in comparison to ERG
</tableCaption>
<bodyText confidence="0.999395777777778">
1999). This algorithm takes input in the form of
Minimal Recursion Semantics (MRS) (Copestake
et al., 2005): a bag of elementary predications,
each bearing features encoding a predicate string,
a label, and one or more argument positions that
can be filled with variables or with labels of other
elementary predications.6 Each variable can fur-
ther bear features encoding “variable properties”
such as tense, aspect, mood, sentential force, per-
son, number or gender.
In order to test our starter grammars by gen-
eration, therefore, we must provide input MRSs.
The shared core grammar ensures that all of
the grammars produce and interpret valid MRSs,
but there are still language-specific properties in
these semantic representations. Most notably, the
predicate strings are user-defined (and language-
specific), as are the variable properties. In addi-
tion, some coarser-grained typological properties
(such as the presence or absence of determiners)
lead to differences in the semantic representations.
Therefore, we cannot simply store a set of MRSs
from one grammar to use as input to the generator.
Instead, we take a set of stored template MRSs
and generalize them by removing all variable
properties (allowing the generator to explore all
possible values), leaving only the predicate strings
and links between the elementary predications.
We then replace the stored predicate strings with
ones selected from among those provided by the
user. Figure 1a shows an MRS produced by a
grammar fragment for English. Figure 1b shows
the MRS with the variable properties removed
and the predicate strings replaced with generic
place-holders. One such template is needed for
every sentence type (e.g., intransitive, transitive,
</bodyText>
<footnote confidence="0.99188425">
6This latter type of argument encodes scopal dependen-
cies. We abstract away here from the MRS approach to scope
underspecification which is nonetheless critical for its com-
putational tractability.
</footnote>
<equation confidence="0.974818125">
a. ( h1,e2, {h7: cat n rel(x4:SG:THIRD),
h3:exist q rel(x4, h5, h6),
h1: sleep v rel(e2:PRES, x4)},
{h5 qeq h7} )
b. ( h1,e2, {h7:#NOUN1#(x4),
h3:#DET1#(x4, h5, h6),
h1:#VERB#(e2, x4)},
{h5 qeq h7} )
</equation>
<figureCaption confidence="0.999662">
Figure 1: Original and underspecified MRS
</figureCaption>
<bodyText confidence="0.999531727272727">
negated-intransitive, etc.). In order to ensure that
the generated strings are maximally informative to
the user testing a grammar, we take advantage of
the lexical type system. Because words in lexical
types as defined by the customization system dif-
fer only in orthography and predicate string, and
not in syntactic behavior, we need only consider
one word of each type. This allows us to focus the
range of variation produced by the generator on
(a) the differences between lexical types and (b)
the variable properties.
</bodyText>
<subsectionHeader confidence="0.999945">
3.2 Test by generation process
</subsectionHeader>
<bodyText confidence="0.999984368421053">
The first step of the test-by-generation process is
to compile the choices file into a grammar. Next,
a copy of the LKB is initialized on the web server
that is hosting the Matrix system, and the newly-
created grammar is loaded into this LKB session.
We then construct the underspecified MRSs in
order to generate from them. To do this, the pro-
cess needs to find the proper predicates to use for
verbs, nouns, determiners, and any other parts of
speech that a given MRS template may require. For
nouns and determiners, the choices file is searched
for the predicate for one noun of each lexical noun
type, all of the determiner predicates, and whether
or not each noun type needs a determiner or not.
For verbs, the process is more complicated, re-
quiring valence information as well as predicate
strings in order to select the correct MRS template.
In order to get this information, the process tra-
verses the type hierarchy above the verbal lexical
</bodyText>
<page confidence="0.995647">
4
</page>
<bodyText confidence="0.999945555555555">
types until it finds a type that gives valence infor-
mation about the verb. Once the process has all
of this information, it matches verbs to MRS tem-
plates and fills in appropriate predicates.
The test-by-generation process then sends these
constructed MRSs to the LKB process and displays
the generation results, along with a brief explana-
tion of the input semantics that gave rise to them,
in HTML for the user.7
</bodyText>
<sectionHeader confidence="0.999888" genericHeader="method">
4 Related Work
</sectionHeader>
<bodyText confidence="0.99986603030303">
As stated above, the engineering goal of the Gram-
mar Matrix is to facilitate the rapid development
of large-scale precision grammars. The starter
grammars output by the customization system are
compatible in format and semantic representations
with existing DELPH-IN tools, including software
for grammar development and for applications in-
cluding machine translation (Oepen et al., 2007)
and robust textual entailment (Bergmair, 2008).
More broadly, the Grammar Matrix is situated
in the field of multilingual grammar engineer-
ing, or the practice of developing linguistically-
motivated grammars for multiple languages within
a consistent framework. Other projects in this
field include ParGram (Butt et al., 2002; King
et al., 2005) (LFG), the CoreGram project8 (e.g.,
(M¨uller, 2009)) (HPSG), and the MetaGrammar
project (de la Clergerie, 2005) (TAG).
To our knowledge, however, there is only one
other system that elicits typological information
about a language and outputs an appropriately cus-
tomized implemented grammar. The system, de-
scribed in (Black, 2004) and (Black and Black,
2009), is called PAWS (Parser And Writer for
Syntax) and is available for download online.9
PAWS is being developed by SIL in the context
of both descriptive (prose) grammar writing and
“computer-assisted related language adaptation”,
the practice of writing a text in a target language
by starting with a translation of that text in a
related source language and mapping the words
from target to source. Accordingly, the output of
PAWS consists of both a prose descriptive grammar
</bodyText>
<footnote confidence="0.989012444444444">
7This set-up scales well to multiple users, as the user’s in-
teraction with the LKB is done once per customized grammar,
providing output for the user to peruse as his or her leisure.
The LKB process does not persist, but can be started again
by reinvoking test-by-generation, such as when the user has
updated the grammar definition.
8http://hpsg.fu-berlin.de/Projects/core.html
9http://www.sil.org/computing/catalog/show_
software.asp?id=85
</footnote>
<bodyText confidence="0.999823352941177">
and an implemented grammar. The latter is in the
format required by PC-PATR (McConnel, 1995),
and is used primarily to disambiguate morpholog-
ical analyses of lexical items in the input string.
Other systems that attempt to elicit linguistic in-
formation from a user include the Expedition (Mc-
Shane and Nirenburg, 2003) and Avenue projects
(Monson et al., 2008), which are specifically tar-
geted at developing machine translation for low-
density languages. These projects differ from the
Grammar Matrix customization system in elic-
iting information from native speakers (such as
paradigms or translations of specifically tailored
corpora), rather than linguists. Further, unlike the
Grammar Matrix customization system, they do
not produce resources meant to sustain further de-
velopment by a linguist.
</bodyText>
<sectionHeader confidence="0.9977" genericHeader="method">
5 Demonstration Plan
</sectionHeader>
<bodyText confidence="0.999989846153846">
Our demonstration illustrates how the customiza-
tion system can be used to create starter gram-
mars and test them by invoking test-by-generation.
We first walk through the questionnaire to illus-
trate the functionality of libraries and the way that
the user interacts with the system to enter infor-
mation. Then, using a sample grammar for En-
glish, we demonstrate how test-by-generation can
expose both overgeneration (ungrammatical gen-
erated strings) and undergeneration (gaps in gen-
erated paradigms). Finally, we return to the ques-
tionnaire to address the bugs in the sample gram-
mar and retest to show the result.
</bodyText>
<sectionHeader confidence="0.999358" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999966411764706">
This paper has presented an overview of the
LinGO Grammar Matrix Customization System,
highlighting the ways in which it provides ac-
cess to its repository of linguistic knowledge. The
current customization system covers a sufficiently
wide range of phenomena that the grammars it
produces are non-trivial. In addition, it is not al-
ways apparent to a user what the implications will
be of selecting various options in the question-
naire, nor how analyses of different phenomena
will interact. The test-by-generation methodology
allows users to interactively explore the conse-
quences of different linguistic analyses within the
platform. We anticipate that it will, as a result, en-
courage users to develop more complex grammars
within the customization system (before moving
on to hand-editing) and thereby gain more benefit.
</bodyText>
<page confidence="0.991216">
5
</page>
<sectionHeader confidence="0.998266" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999851833333333">
This material is based upon work supported by
the National Science Foundation under Grant No.
0644097. Any opinions, findings, and conclusions
or recommendations expressed in this material are
those of the authors and do not necessarily reflect
the views of the National Science Foundation.
</bodyText>
<sectionHeader confidence="0.986782" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.970793822916666">
Emily M. Bender and Dan Flickinger. 2005. Rapid
prototyping of scalable grammars: Towards modu-
larity in extensions to a language-independent core.
In Proc. of IJCNLP-05 (Posters/Demos).
Emily M. Bender, Dan Flickinger, and Stephan Oepen.
2002. The grammar matrix: An open-source starter-
kit for the rapid development of cross-linguistically
consistent broad-coverage precision grammars. In
Proc. of the Workshop on Grammar Engineering
and Evaluation at COLING 2002, pages 8–14.
Richard Bergmair. 2008. Monte Carlo semantics:
McPIET at RTE4. In TextAnalysis Conference (TAC
2008) Workshop-RTE-4 Track. National Institute of
Standards and Technology, pages 17–19.
Cheryl A. Black and H. Andrew Black. 2009. PAWS:
Parser and writer for syntax: Drafting syntactic
grammars in the third wave. In SIL Forum for Lan-
guage Fieldwork, volume 2.
Cheryl A. Black. 2004. Parser and writer for syn-
tax. Paper presented at the International Confer-
ence on Translation with Computer-Assisted Tech-
nology: Changes in Research, Teaching, Evaluation,
and Practice, University of Rome “La Sapienza”,
April 2004.
Miriam Butt, Helge Dyvik, Tracy Holloway King, Hi-
roshi Masuichi, and Christian Rohrer. 2002. The
parallel grammar project. In Proc. of the Workshop
on Grammar Engineering and Evaluation at COL-
ING 2002, pages 1–7.
John Carroll, Ann Copestake, Dan Flickinger, and Vic-
tor Pozna´nski. 1999. An efficient chart generator
for (semi-) lexicalist grammars. In Proc. of the 7th
European workshop on natural language generation
(EWNLG99), pages 86–95.
Ann Copestake, Dan Flickinger, Carl Pollard, and
Ivan A. Sag. 2005. Minimal recursion semantics:
An introduction. Research on Language &amp; Compu-
tation, 3(4):281–332.
Ann Copestake. 2002. Implementing Typed Feature
Structure Grammars. CSLI, Stanford.
Berthold Crysmann. 2009. Autosegmental representa-
tions in an HPSG for Hausa. In Proc. of the Work-
shop on Grammar Engineering Across Frameworks
2009.
´Eric Villemonte de la Clergerie. 2005. From meta-
grammars to factorized TAG/TIG parsers. In Proc.
of IWPT’05, pages 190–191.
Scott Drellishak and Emily M. Bender. 2005. A co-
ordination module for a crosslinguistic grammar re-
source. In Stefan M¨uller, editor, Proc. of HPSG
2005, pages 108–128, Stanford. CSLI.
Scott Drellishak. 2009. Widespread But Not Uni-
versal: Improving the Typological Coverage of the
Grammar Matrix. Ph.D. thesis, University of Wash-
ington.
Dan Flickinger. 2000. On building a more efficient
grammar by exploiting types. Natural Language
Engineering, 6:15 – 28.
Antske Fokkens, Laurie Poulson, and Emily M. Ben-
der. 2009. Inflectional morphology in Turkish VP-
coordination. In Stefan M¨uller, editor, Proc. of
HPSG 2009, pages 110–130, Stanford. CSLI.
Tracy Holloway King, Martin Forst, Jonas Kuhn, and
Miriam Butt. 2005. The feature space in parallel
grammar writing. Research on Language &amp; Com-
putation, 3(2):139–163.
Stephen McConnel. 1995. PC-PATR Refer-
ence Manual. Summer Institute for Linguistics.
http://www.sil.org/pcpatr/manual/pcpatr.html.
Marjorie McShane and Sergei Nirenburg. 2003. Pa-
rameterizing and eliciting text elements across lan-
guages for use in natural language processing sys-
tems. Machine Translation, 18:129–165.
Christian Monson, Ariadna Font Llitjs, Vamshi Am-
bati, Lori Levin, Alon Lavie, Alison Alvarez,
Roberto Aranovich, Jaime Carbonell, Robert Fred-
erking, Erik Peterson, and Katharina Probst. 2008.
Linguistic structure and bilingual informants help
induce machine translation of lesser-resourced lan-
guages. In LREC’08.
Stefan M¨uller. 2009. Towards an HPSG analysis of
Maltese. In Bernard Comrie, Ray Fabri, Beth Hume,
Manwel Mifsud, Thomas Stolz, and Martine Van-
hove, editors, Introducing Maltese linguistics. Pa-
pers from the 1st International Conference on Mal-
tese Linguistics, pages 83–112. Benjamins, Amster-
dam.
Stephan Oepen, Erik Velldal, Jan Tore Lnning, Paul
Meurer, Victoria Rosn, and Dan Flickinger. 2007.
Towards hybrid quality-oriented machine transla-
tion. On linguistics and probabilities in MT. In
11th International Conference on Theoretical and
Methodological Issues in Machine Translation.
Carl Pollard and Ivan A. Sag. 1994. Head-Driven
Phrase Structure Grammar. The University of
Chicago Press, Chicago, IL.
</reference>
<page confidence="0.998786">
6
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.879672">
<title confidence="0.9892785">Grammar Prototyping and Testing with the LinGO Grammar Matrix Customization System</title>
<author confidence="0.990242">Emily M Bender</author>
<author confidence="0.990242">Scott Drellishak</author>
<author confidence="0.990242">Antske Fokkens</author>
<author confidence="0.990242">Michael Wayne Goodman</author>
<author confidence="0.990242">Daniel P Mills</author>
<author confidence="0.990242">Laurie Poulson</author>
<author confidence="0.990242">Safiyyah Saleem</author>
<affiliation confidence="0.963502">University of Washington, Seattle, Washington, USA</affiliation>
<email confidence="0.984097">ebender@uw.edu,afokkens@coli.uni-saarland.de</email>
<email confidence="0.984097">sfd@uw.edu,afokkens@coli.uni-saarland.de</email>
<email confidence="0.984097">goodmami@uw.edu,afokkens@coli.uni-saarland.de</email>
<email confidence="0.984097">dpmills@uw.edu,afokkens@coli.uni-saarland.de</email>
<email confidence="0.984097">lpoulson@uw.edu,afokkens@coli.uni-saarland.de</email>
<email confidence="0.984097">ssaleem@uw.edu,afokkens@coli.uni-saarland.de</email>
<abstract confidence="0.998175692307692">This demonstration presents the LinGO Grammar Matrix grammar customization system: a repository of distilled linguistic knowledge and a web-based service which elicits a typological description of a language from the user and yields a customized grammar fragment ready for sustained development into a broad-coverage grammar. We describe the implementation of this repository with an emphasis on how the information is made available to users, including in-browser testing capabilities.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
<author>Dan Flickinger</author>
</authors>
<title>Rapid prototyping of scalable grammars: Towards modularity in extensions to a language-independent core.</title>
<date>2005</date>
<booktitle>In Proc. of IJCNLP-05</booktitle>
<location>(Posters/Demos).</location>
<contexts>
<context position="5664" citStr="Bender and Flickinger, 2005" startWordPosition="830" endWordPosition="834">ome introductory text and hyperlinks to direct the user to other sections of the questionnaire (“subpages”). Each subpage contains a set of related questions that (with some exceptions) covers the range of a single Matrix library. The actual questions in the questionnaire are represented by HTML form fields, including: text fields, check boxes, radio buttons, drop-downs, and multi-select dropdowns. The values of these form fields are stored in a “choices file”, which is the object passed on to the grammar customization stage. 2.1.1 Unbounded Content Early versions of the customization system (Bender and Flickinger, 2005; Drellishak and Bender, 2005) only allowed a finite (and small) number of entries for things like lexical types. For instance, users were required to provide exactly one transitive verb type and one intransitive verb type. The current system has an iterator mechanism in the questionnaire that allows for repeated sections, and thus unlimited entries. These repeated sections can also be nested, which allows for much more richly structured information. The utility of the iterator mechanism is most apparent when filling out the Lexicon subpage. Users can create an arbitrary number of lexical rule</context>
</contexts>
<marker>Bender, Flickinger, 2005</marker>
<rawString>Emily M. Bender and Dan Flickinger. 2005. Rapid prototyping of scalable grammars: Towards modularity in extensions to a language-independent core. In Proc. of IJCNLP-05 (Posters/Demos).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
<author>Dan Flickinger</author>
<author>Stephan Oepen</author>
</authors>
<title>The grammar matrix: An open-source starterkit for the rapid development of cross-linguistically consistent broad-coverage precision grammars.</title>
<date>2002</date>
<booktitle>In Proc. of the Workshop on Grammar Engineering and Evaluation at COLING</booktitle>
<pages>8--14</pages>
<contexts>
<context position="1051" citStr="Bender et al., 2002" startWordPosition="134" endWordPosition="137">system: a repository of distilled linguistic knowledge and a web-based service which elicits a typological description of a language from the user and yields a customized grammar fragment ready for sustained development into a broad-coverage grammar. We describe the implementation of this repository with an emphasis on how the information is made available to users, including in-browser testing capabilities. 1 Introduction This demonstration presents the LinGO Grammar Matrix grammar customization system1 and its functionality for rapidly prototyping grammars. The LinGO Grammar Matrix project (Bender et al., 2002) is situated within the DELPH-IN2 collaboration and is both a repository of reusable linguistic knowledge and a method of delivering this knowledge to a user in the form of an extensible precision implemented grammar. The stored knowledge includes both a cross-linguistic core grammar and a series of “libraries” containing analyses of cross-linguistically variable phenomena. The core grammar handles basic phrase types, semantic compositionality, and general infrastructure such as the feature geometry, while the current set of libraries includes analyses of word order, person/number/gender, tens</context>
</contexts>
<marker>Bender, Flickinger, Oepen, 2002</marker>
<rawString>Emily M. Bender, Dan Flickinger, and Stephan Oepen. 2002. The grammar matrix: An open-source starterkit for the rapid development of cross-linguistically consistent broad-coverage precision grammars. In Proc. of the Workshop on Grammar Engineering and Evaluation at COLING 2002, pages 8–14.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Bergmair</author>
</authors>
<title>Monte Carlo semantics: McPIET at RTE4.</title>
<date>2008</date>
<booktitle>In TextAnalysis Conference (TAC 2008) Workshop-RTE-4 Track. National Institute of Standards and Technology,</booktitle>
<pages>17--19</pages>
<contexts>
<context position="18381" citStr="Bergmair, 2008" startWordPosition="2888" endWordPosition="2889">ed MRSs to the LKB process and displays the generation results, along with a brief explanation of the input semantics that gave rise to them, in HTML for the user.7 4 Related Work As stated above, the engineering goal of the Grammar Matrix is to facilitate the rapid development of large-scale precision grammars. The starter grammars output by the customization system are compatible in format and semantic representations with existing DELPH-IN tools, including software for grammar development and for applications including machine translation (Oepen et al., 2007) and robust textual entailment (Bergmair, 2008). More broadly, the Grammar Matrix is situated in the field of multilingual grammar engineering, or the practice of developing linguisticallymotivated grammars for multiple languages within a consistent framework. Other projects in this field include ParGram (Butt et al., 2002; King et al., 2005) (LFG), the CoreGram project8 (e.g., (M¨uller, 2009)) (HPSG), and the MetaGrammar project (de la Clergerie, 2005) (TAG). To our knowledge, however, there is only one other system that elicits typological information about a language and outputs an appropriately customized implemented grammar. The syste</context>
</contexts>
<marker>Bergmair, 2008</marker>
<rawString>Richard Bergmair. 2008. Monte Carlo semantics: McPIET at RTE4. In TextAnalysis Conference (TAC 2008) Workshop-RTE-4 Track. National Institute of Standards and Technology, pages 17–19.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cheryl A Black</author>
<author>H Andrew Black</author>
</authors>
<title>PAWS: Parser and writer for syntax: Drafting syntactic grammars in the third wave.</title>
<date>2009</date>
<booktitle>In SIL Forum for Language Fieldwork,</booktitle>
<volume>2</volume>
<contexts>
<context position="19038" citStr="Black and Black, 2009" startWordPosition="2985" endWordPosition="2988">is situated in the field of multilingual grammar engineering, or the practice of developing linguisticallymotivated grammars for multiple languages within a consistent framework. Other projects in this field include ParGram (Butt et al., 2002; King et al., 2005) (LFG), the CoreGram project8 (e.g., (M¨uller, 2009)) (HPSG), and the MetaGrammar project (de la Clergerie, 2005) (TAG). To our knowledge, however, there is only one other system that elicits typological information about a language and outputs an appropriately customized implemented grammar. The system, described in (Black, 2004) and (Black and Black, 2009), is called PAWS (Parser And Writer for Syntax) and is available for download online.9 PAWS is being developed by SIL in the context of both descriptive (prose) grammar writing and “computer-assisted related language adaptation”, the practice of writing a text in a target language by starting with a translation of that text in a related source language and mapping the words from target to source. Accordingly, the output of PAWS consists of both a prose descriptive grammar 7This set-up scales well to multiple users, as the user’s interaction with the LKB is done once per customized grammar, pro</context>
</contexts>
<marker>Black, Black, 2009</marker>
<rawString>Cheryl A. Black and H. Andrew Black. 2009. PAWS: Parser and writer for syntax: Drafting syntactic grammars in the third wave. In SIL Forum for Language Fieldwork, volume 2.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cheryl A Black</author>
</authors>
<title>Parser and writer for syntax. Paper presented at</title>
<date>2004</date>
<booktitle>the International Conference on Translation with Computer-Assisted Technology: Changes in Research, Teaching, Evaluation,</booktitle>
<institution>and Practice, University of Rome “La Sapienza”,</institution>
<contexts>
<context position="19010" citStr="Black, 2004" startWordPosition="2982" endWordPosition="2983">he Grammar Matrix is situated in the field of multilingual grammar engineering, or the practice of developing linguisticallymotivated grammars for multiple languages within a consistent framework. Other projects in this field include ParGram (Butt et al., 2002; King et al., 2005) (LFG), the CoreGram project8 (e.g., (M¨uller, 2009)) (HPSG), and the MetaGrammar project (de la Clergerie, 2005) (TAG). To our knowledge, however, there is only one other system that elicits typological information about a language and outputs an appropriately customized implemented grammar. The system, described in (Black, 2004) and (Black and Black, 2009), is called PAWS (Parser And Writer for Syntax) and is available for download online.9 PAWS is being developed by SIL in the context of both descriptive (prose) grammar writing and “computer-assisted related language adaptation”, the practice of writing a text in a target language by starting with a translation of that text in a related source language and mapping the words from target to source. Accordingly, the output of PAWS consists of both a prose descriptive grammar 7This set-up scales well to multiple users, as the user’s interaction with the LKB is done once</context>
</contexts>
<marker>Black, 2004</marker>
<rawString>Cheryl A. Black. 2004. Parser and writer for syntax. Paper presented at the International Conference on Translation with Computer-Assisted Technology: Changes in Research, Teaching, Evaluation, and Practice, University of Rome “La Sapienza”, April 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Miriam Butt</author>
<author>Helge Dyvik</author>
<author>Tracy Holloway King</author>
<author>Hiroshi Masuichi</author>
<author>Christian Rohrer</author>
</authors>
<title>The parallel grammar project.</title>
<date>2002</date>
<booktitle>In Proc. of the Workshop on Grammar Engineering and Evaluation at COLING</booktitle>
<pages>1--7</pages>
<contexts>
<context position="18658" citStr="Butt et al., 2002" startWordPosition="2927" endWordPosition="2930">ent of large-scale precision grammars. The starter grammars output by the customization system are compatible in format and semantic representations with existing DELPH-IN tools, including software for grammar development and for applications including machine translation (Oepen et al., 2007) and robust textual entailment (Bergmair, 2008). More broadly, the Grammar Matrix is situated in the field of multilingual grammar engineering, or the practice of developing linguisticallymotivated grammars for multiple languages within a consistent framework. Other projects in this field include ParGram (Butt et al., 2002; King et al., 2005) (LFG), the CoreGram project8 (e.g., (M¨uller, 2009)) (HPSG), and the MetaGrammar project (de la Clergerie, 2005) (TAG). To our knowledge, however, there is only one other system that elicits typological information about a language and outputs an appropriately customized implemented grammar. The system, described in (Black, 2004) and (Black and Black, 2009), is called PAWS (Parser And Writer for Syntax) and is available for download online.9 PAWS is being developed by SIL in the context of both descriptive (prose) grammar writing and “computer-assisted related language ada</context>
</contexts>
<marker>Butt, Dyvik, King, Masuichi, Rohrer, 2002</marker>
<rawString>Miriam Butt, Helge Dyvik, Tracy Holloway King, Hiroshi Masuichi, and Christian Rohrer. 2002. The parallel grammar project. In Proc. of the Workshop on Grammar Engineering and Evaluation at COLING 2002, pages 1–7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Carroll</author>
<author>Ann Copestake</author>
<author>Dan Flickinger</author>
<author>Victor Pozna´nski</author>
</authors>
<title>An efficient chart generator for (semi-) lexicalist grammars.</title>
<date>1999</date>
<booktitle>In Proc. of the 7th European workshop on natural language generation (EWNLG99),</booktitle>
<pages>86--95</pages>
<marker>Carroll, Copestake, Flickinger, Pozna´nski, 1999</marker>
<rawString>John Carroll, Ann Copestake, Dan Flickinger, and Victor Pozna´nski. 1999. An efficient chart generator for (semi-) lexicalist grammars. In Proc. of the 7th European workshop on natural language generation (EWNLG99), pages 86–95.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
<author>Dan Flickinger</author>
<author>Carl Pollard</author>
<author>Ivan A Sag</author>
</authors>
<title>Minimal recursion semantics: An introduction.</title>
<date>2005</date>
<journal>Research on Language &amp; Computation,</journal>
<volume>3</volume>
<issue>4</issue>
<contexts>
<context position="2332" citStr="Copestake et al., 2005" startWordPosition="312" endWordPosition="315">n, yes/no questions, and direct-inverse marking, as well as facilities for defining classes (types) of lexical entries and lexical rules which apply to those types. The grammars produced are compatible with both the grammar development tools and the 1http://www.delph-in.net/matrix/customize/ 2http://www.delph-in.net grammar-based applications produced by DELPHIN. The grammar framework used is Head-driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) and the grammars map bidirectionally between surface strings and semantic representations in the format of Minimal Recursion Semantics (Copestake et al., 2005). The Grammar Matrix project has three goals— one engineering and two scientific. The engineering goal is to reduce the cost of creating grammars by distilling the solutions developed in existing DELPH-IN grammars and making them easily available for new projects. The first scientific goal is to support grammar engineering for linguistic hypothesis testing, allowing users to quickly customize a basic grammar and use it as a medium in which to develop and test analyses of more interesting phenomena.3 The second scientific goal is to use computational methods to combine the results of typologica</context>
<context position="13959" citStr="Copestake et al., 2005" startWordPosition="2177" endWordPosition="2180">ton Celtic 220 413 510 57 49 1692 Cherokee Iroquoian 182 413 510 95 27 985 French Romance 137 413 510 29 22 740 Jamamadi Arauan 188 413 510 87 11 1151 Lushootseed Salish 95 413 510 20 8 391 Nishnaabemwin Algonquian 289 413 510 124 50 1754 Pashto Iranian 234 413 510 86 19 1839 Pali Indo-Aryan 237 413 510 92 55 1310 Russian Slavic 190 413 510 56 35 993 Shona Bantu 136 413 510 51 9 591 Vietnamese Austro-Asiatic 105 413 510 2 26 362 Average 182.9 413 510 63.5 28.3 1073.5 Table 1: Grammar sizes in comparison to ERG 1999). This algorithm takes input in the form of Minimal Recursion Semantics (MRS) (Copestake et al., 2005): a bag of elementary predications, each bearing features encoding a predicate string, a label, and one or more argument positions that can be filled with variables or with labels of other elementary predications.6 Each variable can further bear features encoding “variable properties” such as tense, aspect, mood, sentential force, person, number or gender. In order to test our starter grammars by generation, therefore, we must provide input MRSs. The shared core grammar ensures that all of the grammars produce and interpret valid MRSs, but there are still language-specific properties in these </context>
</contexts>
<marker>Copestake, Flickinger, Pollard, Sag, 2005</marker>
<rawString>Ann Copestake, Dan Flickinger, Carl Pollard, and Ivan A. Sag. 2005. Minimal recursion semantics: An introduction. Research on Language &amp; Computation, 3(4):281–332.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
</authors>
<title>Implementing Typed Feature Structure Grammars.</title>
<date>2002</date>
<publisher>CSLI, Stanford.</publisher>
<contexts>
<context position="4484" citStr="Copestake, 2002" startWordPosition="644" endWordPosition="645">sociation for Computational Linguistics simply to know that the target language has coordination. It is also necessary to know, among other things, what types of phrases can be coordinated, how those phrases are marked, and what patterns of marking appear in the language. Supporting a linguistic phenomenon, therefore, requires eliciting the answers to such questions from the user. The customization system elicits these answers using a detailed, web-based, typological questionnaire, then interprets the answers without human intervention and produces a grammar in the format expected by the LKB (Copestake, 2002), namely TDL (type description language). The questionnaire is designed for linguists who want to create computational grammars of natural languages, and therefore it freely uses technical linguistic terminology, but avoids, when possible, mentioning the internals of the grammar that will be produced, although a user who intends to extend the grammar will need to become familiar with HPSG and TDL before doing so. The questionnaire is presented to the user as a series of connected web pages. The first page the user sees (the “main page”) contains some introductory text and hyperlinks to direct </context>
</contexts>
<marker>Copestake, 2002</marker>
<rawString>Ann Copestake. 2002. Implementing Typed Feature Structure Grammars. CSLI, Stanford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Berthold Crysmann</author>
</authors>
<title>Autosegmental representations in an HPSG for Hausa.</title>
<date>2009</date>
<booktitle>In Proc. of the Workshop on Grammar Engineering Across Frameworks</booktitle>
<contexts>
<context position="3681" citStr="Crysmann, 2009" startWordPosition="522" endWordPosition="523">alizations of the phenomena analyzed) and analytical depth (producing analyses which work together to map surface strings to semantic representations) (Drellishak, 2009). 2 System Overview Grammar customization with the LinGO Grammar Matrix consists of three primary activities: filling out the questionnaire, preliminary testing of the grammar fragment, and grammar creation. 2.1 Questionnaire Most of the linguistic phenomena supported by the questionnaire vary across languages along multiple dimensions. It is not enough, for example, 3Research of this type based on the Grammar Matrix includes (Crysmann, 2009) (tone change in Hausa) and (Fokkens et al., 2009) (Turkish suspended affixation). 1 Proceedings of the ACL 2010 System Demonstrations, pages 1–6, Uppsala, Sweden, 13 July 2010. c�2010 Association for Computational Linguistics simply to know that the target language has coordination. It is also necessary to know, among other things, what types of phrases can be coordinated, how those phrases are marked, and what patterns of marking appear in the language. Supporting a linguistic phenomenon, therefore, requires eliciting the answers to such questions from the user. The customization system elic</context>
</contexts>
<marker>Crysmann, 2009</marker>
<rawString>Berthold Crysmann. 2009. Autosegmental representations in an HPSG for Hausa. In Proc. of the Workshop on Grammar Engineering Across Frameworks 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>´Eric Villemonte de la Clergerie</author>
</authors>
<title>From metagrammars to factorized TAG/TIG parsers.</title>
<date>2005</date>
<booktitle>In Proc. of IWPT’05,</booktitle>
<pages>190--191</pages>
<contexts>
<context position="18791" citStr="Clergerie, 2005" startWordPosition="2949" endWordPosition="2950">epresentations with existing DELPH-IN tools, including software for grammar development and for applications including machine translation (Oepen et al., 2007) and robust textual entailment (Bergmair, 2008). More broadly, the Grammar Matrix is situated in the field of multilingual grammar engineering, or the practice of developing linguisticallymotivated grammars for multiple languages within a consistent framework. Other projects in this field include ParGram (Butt et al., 2002; King et al., 2005) (LFG), the CoreGram project8 (e.g., (M¨uller, 2009)) (HPSG), and the MetaGrammar project (de la Clergerie, 2005) (TAG). To our knowledge, however, there is only one other system that elicits typological information about a language and outputs an appropriately customized implemented grammar. The system, described in (Black, 2004) and (Black and Black, 2009), is called PAWS (Parser And Writer for Syntax) and is available for download online.9 PAWS is being developed by SIL in the context of both descriptive (prose) grammar writing and “computer-assisted related language adaptation”, the practice of writing a text in a target language by starting with a translation of that text in a related source languag</context>
</contexts>
<marker>Clergerie, 2005</marker>
<rawString>´Eric Villemonte de la Clergerie. 2005. From metagrammars to factorized TAG/TIG parsers. In Proc. of IWPT’05, pages 190–191.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Scott Drellishak</author>
<author>Emily M Bender</author>
</authors>
<title>A coordination module for a crosslinguistic grammar resource.</title>
<date>2005</date>
<booktitle>Proc. of HPSG 2005,</booktitle>
<pages>108--128</pages>
<editor>In Stefan M¨uller, editor,</editor>
<publisher>CSLI.</publisher>
<location>Stanford.</location>
<contexts>
<context position="5694" citStr="Drellishak and Bender, 2005" startWordPosition="835" endWordPosition="838">erlinks to direct the user to other sections of the questionnaire (“subpages”). Each subpage contains a set of related questions that (with some exceptions) covers the range of a single Matrix library. The actual questions in the questionnaire are represented by HTML form fields, including: text fields, check boxes, radio buttons, drop-downs, and multi-select dropdowns. The values of these form fields are stored in a “choices file”, which is the object passed on to the grammar customization stage. 2.1.1 Unbounded Content Early versions of the customization system (Bender and Flickinger, 2005; Drellishak and Bender, 2005) only allowed a finite (and small) number of entries for things like lexical types. For instance, users were required to provide exactly one transitive verb type and one intransitive verb type. The current system has an iterator mechanism in the questionnaire that allows for repeated sections, and thus unlimited entries. These repeated sections can also be nested, which allows for much more richly structured information. The utility of the iterator mechanism is most apparent when filling out the Lexicon subpage. Users can create an arbitrary number of lexical rule “slots”, each with an arbitra</context>
</contexts>
<marker>Drellishak, Bender, 2005</marker>
<rawString>Scott Drellishak and Emily M. Bender. 2005. A coordination module for a crosslinguistic grammar resource. In Stefan M¨uller, editor, Proc. of HPSG 2005, pages 108–128, Stanford. CSLI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Scott Drellishak</author>
</authors>
<title>Widespread But Not Universal: Improving the Typological Coverage of the Grammar Matrix.</title>
<date>2009</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Washington.</institution>
<contexts>
<context position="3235" citStr="Drellishak, 2009" startWordPosition="457" endWordPosition="458">goal is to support grammar engineering for linguistic hypothesis testing, allowing users to quickly customize a basic grammar and use it as a medium in which to develop and test analyses of more interesting phenomena.3 The second scientific goal is to use computational methods to combine the results of typological research and formal syntactic analysis into a single resource that achieves both typological breadth (handling the known range of realizations of the phenomena analyzed) and analytical depth (producing analyses which work together to map surface strings to semantic representations) (Drellishak, 2009). 2 System Overview Grammar customization with the LinGO Grammar Matrix consists of three primary activities: filling out the questionnaire, preliminary testing of the grammar fragment, and grammar creation. 2.1 Questionnaire Most of the linguistic phenomena supported by the questionnaire vary across languages along multiple dimensions. It is not enough, for example, 3Research of this type based on the Grammar Matrix includes (Crysmann, 2009) (tone change in Hausa) and (Fokkens et al., 2009) (Turkish suspended affixation). 1 Proceedings of the ACL 2010 System Demonstrations, pages 1–6, Uppsala</context>
</contexts>
<marker>Drellishak, 2009</marker>
<rawString>Scott Drellishak. 2009. Widespread But Not Universal: Improving the Typological Coverage of the Grammar Matrix. Ph.D. thesis, University of Washington.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Flickinger</author>
</authors>
<title>On building a more efficient grammar by exploiting types.</title>
<date>2000</date>
<journal>Natural Language Engineering, 6:15 –</journal>
<volume>28</volume>
<contexts>
<context position="10938" citStr="Flickinger, 2000" startWordPosition="1665" endWordPosition="1666">fly presented the structure of the customization system. While we anticipate some future improvements (e.g., visualization tools to assist with designing type hierarchies and morphotactic dependencies), we believe that this system is sufficiently general to support the addition of analyses of many different linguistic phenomena. The system has been used to create starter grammars for more than 40 languages in the context of a graduate grammar engineering course. To give sense of the size of the grammars produced by the customization system, Table 1 compares the English Resource Grammar (ERG) (Flickinger, 2000), a broad-coverage precision grammar in the same framework under development since 1994, to 11 grammars produced with the customization system by graduate students in a grammar engineering class at the University of Washington. The students developed these grammars over three weeks using reference materials and the customization system. We compare the grammars in terms of the number types they define, as well as the number of lexical rule and phrase structure rule instances.5 We separate types defined in the Matrix core grammar from language-specific types defined by the customization system. </context>
</contexts>
<marker>Flickinger, 2000</marker>
<rawString>Dan Flickinger. 2000. On building a more efficient grammar by exploiting types. Natural Language Engineering, 6:15 – 28.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Antske Fokkens</author>
<author>Laurie Poulson</author>
<author>Emily M Bender</author>
</authors>
<title>Inflectional morphology in Turkish VPcoordination.</title>
<date>2009</date>
<booktitle>Proc. of HPSG 2009,</booktitle>
<pages>110--130</pages>
<editor>In Stefan M¨uller, editor,</editor>
<publisher>CSLI.</publisher>
<location>Stanford.</location>
<contexts>
<context position="3731" citStr="Fokkens et al., 2009" startWordPosition="529" endWordPosition="532">alytical depth (producing analyses which work together to map surface strings to semantic representations) (Drellishak, 2009). 2 System Overview Grammar customization with the LinGO Grammar Matrix consists of three primary activities: filling out the questionnaire, preliminary testing of the grammar fragment, and grammar creation. 2.1 Questionnaire Most of the linguistic phenomena supported by the questionnaire vary across languages along multiple dimensions. It is not enough, for example, 3Research of this type based on the Grammar Matrix includes (Crysmann, 2009) (tone change in Hausa) and (Fokkens et al., 2009) (Turkish suspended affixation). 1 Proceedings of the ACL 2010 System Demonstrations, pages 1–6, Uppsala, Sweden, 13 July 2010. c�2010 Association for Computational Linguistics simply to know that the target language has coordination. It is also necessary to know, among other things, what types of phrases can be coordinated, how those phrases are marked, and what patterns of marking appear in the language. Supporting a linguistic phenomenon, therefore, requires eliciting the answers to such questions from the user. The customization system elicits these answers using a detailed, web-based, typ</context>
</contexts>
<marker>Fokkens, Poulson, Bender, 2009</marker>
<rawString>Antske Fokkens, Laurie Poulson, and Emily M. Bender. 2009. Inflectional morphology in Turkish VPcoordination. In Stefan M¨uller, editor, Proc. of HPSG 2009, pages 110–130, Stanford. CSLI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tracy Holloway King</author>
<author>Martin Forst</author>
<author>Jonas Kuhn</author>
<author>Miriam Butt</author>
</authors>
<title>The feature space in parallel grammar writing.</title>
<date>2005</date>
<journal>Research on Language &amp; Computation,</journal>
<volume>3</volume>
<issue>2</issue>
<contexts>
<context position="18678" citStr="King et al., 2005" startWordPosition="2931" endWordPosition="2934">precision grammars. The starter grammars output by the customization system are compatible in format and semantic representations with existing DELPH-IN tools, including software for grammar development and for applications including machine translation (Oepen et al., 2007) and robust textual entailment (Bergmair, 2008). More broadly, the Grammar Matrix is situated in the field of multilingual grammar engineering, or the practice of developing linguisticallymotivated grammars for multiple languages within a consistent framework. Other projects in this field include ParGram (Butt et al., 2002; King et al., 2005) (LFG), the CoreGram project8 (e.g., (M¨uller, 2009)) (HPSG), and the MetaGrammar project (de la Clergerie, 2005) (TAG). To our knowledge, however, there is only one other system that elicits typological information about a language and outputs an appropriately customized implemented grammar. The system, described in (Black, 2004) and (Black and Black, 2009), is called PAWS (Parser And Writer for Syntax) and is available for download online.9 PAWS is being developed by SIL in the context of both descriptive (prose) grammar writing and “computer-assisted related language adaptation”, the practi</context>
</contexts>
<marker>King, Forst, Kuhn, Butt, 2005</marker>
<rawString>Tracy Holloway King, Martin Forst, Jonas Kuhn, and Miriam Butt. 2005. The feature space in parallel grammar writing. Research on Language &amp; Computation, 3(2):139–163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephen McConnel</author>
</authors>
<title>PC-PATR Reference Manual. Summer Institute for Linguistics.</title>
<date>1995</date>
<note>http://www.sil.org/pcpatr/manual/pcpatr.html.</note>
<contexts>
<context position="20049" citStr="McConnel, 1995" startWordPosition="3139" endWordPosition="3140">ce. Accordingly, the output of PAWS consists of both a prose descriptive grammar 7This set-up scales well to multiple users, as the user’s interaction with the LKB is done once per customized grammar, providing output for the user to peruse as his or her leisure. The LKB process does not persist, but can be started again by reinvoking test-by-generation, such as when the user has updated the grammar definition. 8http://hpsg.fu-berlin.de/Projects/core.html 9http://www.sil.org/computing/catalog/show_ software.asp?id=85 and an implemented grammar. The latter is in the format required by PC-PATR (McConnel, 1995), and is used primarily to disambiguate morphological analyses of lexical items in the input string. Other systems that attempt to elicit linguistic information from a user include the Expedition (McShane and Nirenburg, 2003) and Avenue projects (Monson et al., 2008), which are specifically targeted at developing machine translation for lowdensity languages. These projects differ from the Grammar Matrix customization system in eliciting information from native speakers (such as paradigms or translations of specifically tailored corpora), rather than linguists. Further, unlike the Grammar Matri</context>
</contexts>
<marker>McConnel, 1995</marker>
<rawString>Stephen McConnel. 1995. PC-PATR Reference Manual. Summer Institute for Linguistics. http://www.sil.org/pcpatr/manual/pcpatr.html.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marjorie McShane</author>
<author>Sergei Nirenburg</author>
</authors>
<title>Parameterizing and eliciting text elements across languages for use in natural language processing systems.</title>
<date>2003</date>
<booktitle>Machine Translation,</booktitle>
<pages>18--129</pages>
<contexts>
<context position="20274" citStr="McShane and Nirenburg, 2003" startWordPosition="3172" endWordPosition="3176">utput for the user to peruse as his or her leisure. The LKB process does not persist, but can be started again by reinvoking test-by-generation, such as when the user has updated the grammar definition. 8http://hpsg.fu-berlin.de/Projects/core.html 9http://www.sil.org/computing/catalog/show_ software.asp?id=85 and an implemented grammar. The latter is in the format required by PC-PATR (McConnel, 1995), and is used primarily to disambiguate morphological analyses of lexical items in the input string. Other systems that attempt to elicit linguistic information from a user include the Expedition (McShane and Nirenburg, 2003) and Avenue projects (Monson et al., 2008), which are specifically targeted at developing machine translation for lowdensity languages. These projects differ from the Grammar Matrix customization system in eliciting information from native speakers (such as paradigms or translations of specifically tailored corpora), rather than linguists. Further, unlike the Grammar Matrix customization system, they do not produce resources meant to sustain further development by a linguist. 5 Demonstration Plan Our demonstration illustrates how the customization system can be used to create starter grammars </context>
</contexts>
<marker>McShane, Nirenburg, 2003</marker>
<rawString>Marjorie McShane and Sergei Nirenburg. 2003. Parameterizing and eliciting text elements across languages for use in natural language processing systems. Machine Translation, 18:129–165.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian Monson</author>
<author>Ariadna Font Llitjs</author>
<author>Vamshi Ambati</author>
<author>Lori Levin</author>
<author>Alon Lavie</author>
<author>Alison Alvarez</author>
<author>Roberto Aranovich</author>
<author>Jaime Carbonell</author>
<author>Robert Frederking</author>
<author>Erik Peterson</author>
<author>Katharina Probst</author>
</authors>
<title>Linguistic structure and bilingual informants help induce machine translation of lesser-resourced languages.</title>
<date>2008</date>
<booktitle>In LREC’08.</booktitle>
<contexts>
<context position="20316" citStr="Monson et al., 2008" startWordPosition="3180" endWordPosition="3183">. The LKB process does not persist, but can be started again by reinvoking test-by-generation, such as when the user has updated the grammar definition. 8http://hpsg.fu-berlin.de/Projects/core.html 9http://www.sil.org/computing/catalog/show_ software.asp?id=85 and an implemented grammar. The latter is in the format required by PC-PATR (McConnel, 1995), and is used primarily to disambiguate morphological analyses of lexical items in the input string. Other systems that attempt to elicit linguistic information from a user include the Expedition (McShane and Nirenburg, 2003) and Avenue projects (Monson et al., 2008), which are specifically targeted at developing machine translation for lowdensity languages. These projects differ from the Grammar Matrix customization system in eliciting information from native speakers (such as paradigms or translations of specifically tailored corpora), rather than linguists. Further, unlike the Grammar Matrix customization system, they do not produce resources meant to sustain further development by a linguist. 5 Demonstration Plan Our demonstration illustrates how the customization system can be used to create starter grammars and test them by invoking test-by-generati</context>
</contexts>
<marker>Monson, Llitjs, Ambati, Levin, Lavie, Alvarez, Aranovich, Carbonell, Frederking, Peterson, Probst, 2008</marker>
<rawString>Christian Monson, Ariadna Font Llitjs, Vamshi Ambati, Lori Levin, Alon Lavie, Alison Alvarez, Roberto Aranovich, Jaime Carbonell, Robert Frederking, Erik Peterson, and Katharina Probst. 2008. Linguistic structure and bilingual informants help induce machine translation of lesser-resourced languages. In LREC’08.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan M¨uller</author>
</authors>
<title>Towards an HPSG analysis of Maltese. In</title>
<date>2009</date>
<booktitle>Introducing Maltese linguistics. Papers from the 1st International Conference on Maltese Linguistics,</booktitle>
<pages>83--112</pages>
<editor>Bernard Comrie, Ray Fabri, Beth Hume, Manwel Mifsud, Thomas Stolz, and Martine Vanhove, editors,</editor>
<publisher>Benjamins,</publisher>
<location>Amsterdam.</location>
<marker>M¨uller, 2009</marker>
<rawString>Stefan M¨uller. 2009. Towards an HPSG analysis of Maltese. In Bernard Comrie, Ray Fabri, Beth Hume, Manwel Mifsud, Thomas Stolz, and Martine Vanhove, editors, Introducing Maltese linguistics. Papers from the 1st International Conference on Maltese Linguistics, pages 83–112. Benjamins, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephan Oepen</author>
<author>Erik Velldal</author>
<author>Jan Tore Lnning</author>
<author>Paul Meurer</author>
<author>Victoria Rosn</author>
<author>Dan Flickinger</author>
</authors>
<title>Towards hybrid quality-oriented machine translation. On linguistics and probabilities in MT.</title>
<date>2007</date>
<booktitle>In 11th International Conference on Theoretical and Methodological Issues in Machine Translation.</booktitle>
<contexts>
<context position="18334" citStr="Oepen et al., 2007" startWordPosition="2880" endWordPosition="2883">st-by-generation process then sends these constructed MRSs to the LKB process and displays the generation results, along with a brief explanation of the input semantics that gave rise to them, in HTML for the user.7 4 Related Work As stated above, the engineering goal of the Grammar Matrix is to facilitate the rapid development of large-scale precision grammars. The starter grammars output by the customization system are compatible in format and semantic representations with existing DELPH-IN tools, including software for grammar development and for applications including machine translation (Oepen et al., 2007) and robust textual entailment (Bergmair, 2008). More broadly, the Grammar Matrix is situated in the field of multilingual grammar engineering, or the practice of developing linguisticallymotivated grammars for multiple languages within a consistent framework. Other projects in this field include ParGram (Butt et al., 2002; King et al., 2005) (LFG), the CoreGram project8 (e.g., (M¨uller, 2009)) (HPSG), and the MetaGrammar project (de la Clergerie, 2005) (TAG). To our knowledge, however, there is only one other system that elicits typological information about a language and outputs an appropri</context>
</contexts>
<marker>Oepen, Velldal, Lnning, Meurer, Rosn, Flickinger, 2007</marker>
<rawString>Stephan Oepen, Erik Velldal, Jan Tore Lnning, Paul Meurer, Victoria Rosn, and Dan Flickinger. 2007. Towards hybrid quality-oriented machine translation. On linguistics and probabilities in MT. In 11th International Conference on Theoretical and Methodological Issues in Machine Translation.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan A Sag</author>
</authors>
<title>Head-Driven Phrase Structure Grammar.</title>
<date>1994</date>
<publisher>The University of Chicago Press,</publisher>
<location>Chicago, IL.</location>
<contexts>
<context position="2172" citStr="Pollard and Sag, 1994" startWordPosition="288" endWordPosition="291">metry, while the current set of libraries includes analyses of word order, person/number/gender, tense/aspect, case, coordination, pro-drop, sentential negation, yes/no questions, and direct-inverse marking, as well as facilities for defining classes (types) of lexical entries and lexical rules which apply to those types. The grammars produced are compatible with both the grammar development tools and the 1http://www.delph-in.net/matrix/customize/ 2http://www.delph-in.net grammar-based applications produced by DELPHIN. The grammar framework used is Head-driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) and the grammars map bidirectionally between surface strings and semantic representations in the format of Minimal Recursion Semantics (Copestake et al., 2005). The Grammar Matrix project has three goals— one engineering and two scientific. The engineering goal is to reduce the cost of creating grammars by distilling the solutions developed in existing DELPH-IN grammars and making them easily available for new projects. The first scientific goal is to support grammar engineering for linguistic hypothesis testing, allowing users to quickly customize a basic grammar and use it as a medium in wh</context>
</contexts>
<marker>Pollard, Sag, 1994</marker>
<rawString>Carl Pollard and Ivan A. Sag. 1994. Head-Driven Phrase Structure Grammar. The University of Chicago Press, Chicago, IL.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>