<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.053718">
<title confidence="0.999214">
Designing Language Technology Applications:
A Wizard of Oz Driven Prototyping Framework
</title>
<author confidence="0.932785">
S. Schl¨ogl
</author>
<affiliation confidence="0.708628">
MCI Management Center Innsbruck
</affiliation>
<address confidence="0.711489">
Management, Communication &amp; IT
Innsbruck, AUSTRIA
</address>
<email confidence="0.99903">
schlogl@mci.edu
</email>
<author confidence="0.516666">
P. Milhorat*, G. Chollet*, J. Boudy†
</author>
<affiliation confidence="0.311103">
Institut Mines-T´el´ecom
</affiliation>
<address confidence="0.411286">
*T´el´ecom ParisTech &amp; †T´el´ecom SudParis
Paris, FRANCE
</address>
<email confidence="0.828743">
milhorat@telecom-paristech.fr
</email>
<sectionHeader confidence="0.989175" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999881526315789">
Wizard of Oz (WOZ) prototyping employs
a human wizard to simulate anticipated
functions of a future system. In Natural
Language Processing this method is usu-
ally used to obtain early feedback on di-
alogue designs, to collect language cor-
pora, or to explore interaction strategies.
Yet, existing tools often require complex
client-server configurations and setup rou-
tines, or suffer from compatibility prob-
lems with different platforms. Integrated
solutions, which may also be used by de-
signers and researchers without technical
background, are missing. In this paper
we present a framework for multi-lingual
dialog research, which combines speech
recognition and synthesis with WOZ. All
components are open source and adaptable
to different application scenarios.
</bodyText>
<sectionHeader confidence="0.998993" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99998613559322">
In recent years Language Technologies (LT) such
as Automatic Speech Recognition (ASR), Ma-
chine Translation (MT) and Text-to-Speech Syn-
thesis (TTS) have found their way into an increas-
ing number of products and services. Technolog-
ical advances in the field have created new possi-
bilities, and ubiquitous access to modern technol-
ogy (i.e. smartphones, tablet computers, etc.) has
inspired novel solutions in multiple application ar-
eas. Still, the technology at hand is not perfect and
typically substantial engineering effort (gathering
of corpora, training, tuning) is needed before pro-
totypes involving such technologies can deliver a
user experience robust enough to allow for poten-
tial applications to be evaluated with real users.
For graphical interfaces, well-known prototyping
methods like sketching and wire-framing allow for
obtaining early impressions and initial user feed-
back. These low-fidelity prototyping techniques
do not, however, work well with speech and nat-
ural language. The Wizard of Oz (WOZ) method
can be employed to address this shortcoming. By
using a human ‘wizard’ to mimic the functional-
ity of a system, either completely or in part, WOZ
supports the evaluation of potential user experi-
ences and interaction strategies without the need
for building a fully functional product first (Gould
et al., 1983). It furthermore supports the collection
of domain specific language corpora and the easy
exploration of varying dialog designs (Wir´en et al.,
2007). WOZ tools, however, are often application
dependent and built for very specific experimental
setups. Rarely, are they re-used or adapted to other
application scenarios. Also, when used in combi-
nation with existing technology components such
as ASR or TTS, they usually require complex soft-
ware installations and server-client configurations.
Thus, we see a need for an easy ‘out-of-the-box’
type solution. A tool that does not require great
technical experience and therefore may be used by
researchers and designers outside the typical NLP
research and development community. This demo
is the result of our recent efforts aimed at building
such an integrated prototyping tool.
We present a fully installed and configured
server image that offers multi-lingual (i.e. English,
German, French, Italian) ASR and TTS integrated
with a web-based WOZ platform. All components
are open-source (i.e. adaptable and extendable)
and connected via a messaging server and a num-
ber of Java programs. When started the framework
requires only one single script to be executed (i.e.
there is a separate script for each language so that
the components are started using the right param-
eters) in order to launch a WOZ driven system en-
vironment. With such a pre-configured setup we
believe that also non-NLP experts are able to suc-
cessfully conduct extended user studies for lan-
guage technologies applications.
</bodyText>
<page confidence="0.99425">
85
</page>
<note confidence="0.8582415">
Proceedings of the Demonstrations at the 14th Conference of the European Chapter of the Association for Computational Linguistics, pages 85–88,
Gothenburg, Sweden, April 26-30 2014. c�2014 Association for Computational Linguistics
</note>
<sectionHeader confidence="0.868772" genericHeader="method">
2 Existing Comparable Tools
</sectionHeader>
<bodyText confidence="0.999958897959184">
Following the literature, existing tools and frame-
works that support prototyping of language tech-
nology applications can be separated into two cat-
egories. The first category consists of so-called
Dialogue Management (DM) tools, which focus
on the evaluation of Language Technologies (LTs)
and whose primary application lies in the areas of
NLP and machine learning. Two well-known ex-
amples are the CSLU toolkit (Sutton et al., 1998)
and the Olympus dialogue framework (Bohus et
al., 2007). Others include the Jaspis dialogue man-
agement system (Turunen and Hakulinen, 2000)
and the EPFL dialogue platform (Cenek et al.,
2005). DM tools explore the language-based inter-
action between a human and a machine and aim at
improving this dialogue. They usually provide an
application development interface that integrates
different LTs such as ASR and TTS, which is then
used by an experimenter to specify a pre-defined
dialogue flow. Once the dialogue is designed, it
can be tested with human participants. The main
focus of these tools lies on testing and improving
the quality of the employed technology compo-
nents and their interplay. Unlike DM tools, rep-
resentatives from the second category, herein af-
ter referred to as WOZ tools, tend to rely entirely
on human simulation. This makes them more in-
teresting for early feedback, as they better sup-
port the aspects of low-fidelity prototyping. While
these applications often offer more flexibility, they
rarely integrate actual working LTs. Instead, a hu-
man mimics the functions of the machine, which
allows for a less restrictive dialogue design and
facilitates the testing of user experiences that are
not yet supported by existing technologies. Most
WOZ tools, however, should be categorized as
throwaway applications i.e. they are built for one
scenario and only rarely re-used in other settings.
Two examples that allow for a more generic ap-
plication are SUEDE (Klemmer et al., 2000) and
Richard Breuer’s WOZ tool1.
While both DM and WOZ tools incorporate
useful features, neither type provides a full range
of support for low-fidelity prototyping of LT ap-
plications. DM tools lack the flexibility of ex-
ploring aspects that are currently not supported by
technology, and pure WOZ applications often de-
pend too much on the actions of the wizard, which
can lead to unrealistic human-like behaviour and
</bodyText>
<footnote confidence="0.898345">
1http://www.softdoc.de/woz/index.html
</footnote>
<bodyText confidence="0.9996445625">
inconsistencies with its possible bias on evalua-
tion results. A combination of both types of tools
can outweigh their deficiencies and furthermore
allow for supporting different stages of prototyp-
ing. That is, a wizard might complement exist-
ing technology on a continuum by first taking on
the role of a ‘controller’ who simulates technol-
ogy. Then, in a second stage one could act as a
‘monitor’ who approves technology output, before
finally moving on to being a ‘supervisor’ who only
overrides output in cases where it is needed (Dow
et al., 2005). However, to allow for such variation
an architecture is required that on the one hand
supports a flexible use of technology components
and on the other hand offers an interface for real-
time human intervention.
</bodyText>
<sectionHeader confidence="0.999565" genericHeader="method">
3 Integrated Prototyping Framework
</sectionHeader>
<bodyText confidence="0.99995696">
In order to offer a flexible and easy to use pro-
totyping framework for language technology ap-
plications we have integrated a number of exist-
ing technology components using an Apache AC-
TIVEMQ messaging server2 and several Java pro-
grams. Our framework consists of the JULIUS
Large Vocabulary Continuous Speech Recogni-
tion engine3, an implementation of the GOOGLE
SPEECH API4, the WEBWOZ Wizard of Oz
Prototyping Platform5 and the MARY Text-to-
Speech Synthesis Platform6. All components are
fully installed and connected running on a VIR-
TUAL BOX server image7 (i.e. Ubuntu 12.04 LTS
Linux Server). Using this configuration we offer
a platform that supports real-time speech recogni-
tion as well as speech synthesis in English, French,
German and Italian. Natural Language Under-
standing (NLU), Dialog Management (DM), and
Natural Language Generation (NLG) is currently
performed by the human ‘wizard’. Respective
technology components may, however, be inte-
grated in future versions of the framework. The
following sections describe the different compo-
nents in some more detail and elaborate on how
they are connected.
</bodyText>
<footnote confidence="0.999897">
2http://activemq.apache.org/
3http://julius.sourceforge.jp/en index.php
4http://www.google.com/intl/en/chrome/demos/speech.html
5https://github.com/stephanschloegl/WebWOZ
6http://mary.dfki.de/
7https://www.virtualbox.org/
</footnote>
<page confidence="0.997475">
86
</page>
<subsectionHeader confidence="0.998351">
3.1 Automatic Speech Recognition
</subsectionHeader>
<bodyText confidence="0.999968411764706">
The JULIUS open-source Large Vocabulary Con-
tinuous Speech Recognition engine (LVCSR) uses
n-grams and context-dependent Hidden Markov
Models (HMM) to transform acoustic input into
text output (Lee et al., 2008). Its recognition
performance depends on the availability of lan-
guage dependent resources i.e. acoustic models,
language models, and language dictionaries. Our
framework includes basic language resources for
English, German, Italian and French. As those
resources are still very limited we have also in-
tegrated online speech recognition for these four
languages using the Google Speech API. This al-
lows for conducting experiments with users while
at the same time collecting the necessary data for
augmenting and filling in JULIUS language re-
sources.
</bodyText>
<subsectionHeader confidence="0.996106">
3.2 Text-to-Speech Synthesis
</subsectionHeader>
<bodyText confidence="0.9997934">
MARY TTS is a state-of-the-art, open source
speech synthesis platform supporting a variety
of different languages and accents (Schr¨oder and
Trouvain, 2003). For the here presented multi-
lingual prototyping framework we have installed
synthesized voices for US English (cmu-slt-
hsmm), Italian (istc-lucia-hsmm), German (dfki-
pavoque-neutral) as well as French (enst-dennys-
hsmm). Additional voices can be downloaded and
added through the MARY component installer.
</bodyText>
<subsectionHeader confidence="0.999763">
3.3 Wizard of Oz
</subsectionHeader>
<bodyText confidence="0.999992055555556">
WebWOZ is a web-based prototyping platform for
WOZ experiments that allows for a flexible inte-
gration of existing LTs (Schl¨ogl et al., 2010). It
was implemented using modern web technologies
(i.e. Java, HTML, CSS) and therefore runs in any
current web browser. It usually uses web services
to integrate a set of pre-configured LT components
(i.e. ASR, MT, TTS). For the presented prototyp-
ing framework, however, we have integrated Web-
WOZ with our ASR solution (i.e. the combined
Google/JULIUS engine) and MARY TTS. Conse-
quently ASR output is displayed in the top area
of the wizard interface. A wizard is then able to
select an appropriate response from a set of pre-
viously defined utterances or use a free-text field
to compose a response on the fly. In both cases
the utterance is sent to the MARY TTS server and
spoken out by the system.
</bodyText>
<subsectionHeader confidence="0.999854">
3.4 Messaging Server and Gluing Programs
</subsectionHeader>
<bodyText confidence="0.999983861111111">
In order to achieve the above presented integration
of ASR, WOZ and TTS we use an Apache AC-
TIVEMQ messaging server and a number of Java
programs. One of these programs takes the output
from our ASR component and inserts it into the
WebWOZ input stream. In addition it publishes
this output to a specific ASR ActiveMQ queue so
that other components (e.g. potentially an NLU
component) may also be able to process it. Once
an ASR result is available within WebWOZ, it is
up to the human wizard to respond. WebWOZ
was slightly modified so that wizard responses are
not only sent to the internal WebWOZ log, but
also to a WIZARD ActiveMQ queue. A second
Java program then takes the wizard responses from
the WIZARD queue and pushes them to a sepa-
rate MARY queue. While it may seem unneces-
sary to first take responses from one queue just to
publish them to another queue, it allows for the
easy integration of additional components. For
example, we have also experimented with a dis-
tinct NLG component. Putting this component
between the WIZARD and the MARY queue we
were able to conduct experiments where a wiz-
ard instead of sending entire text utterance would
rather send text-based semantic frames (i.e. a se-
mantically unified representation of a user’s in-
put). Such shows the flexibility of using the de-
scribed queue architecture. Finally we use a third
Java program to take text published to the MARY
queue (i.e. either directly coming from the wiz-
ard or produced by an NLG component as with
one of our experimental settings) and send it to the
MARY TTS server. Figure 1 illustrates the differ-
ent framework components and how they are con-
nected to each other.
</bodyText>
<sectionHeader confidence="0.998485" genericHeader="method">
4 Demo Setup
</sectionHeader>
<bodyText confidence="0.999938583333333">
The optimal setup for the demo uses two computer
stations, one for a wizard and one for a test user.
The stations need to be connected via a LAN con-
nection. The test user station runs the prototyping
framework, which is a fully installed and config-
ured Virtual Box software image (Note: any com-
puter capable of running Virtual Box can serve as a
test user station). The wizard station only requires
a modern web browser to interact with the test user
station. A big screen size (e.g. 17 inch) for the
wizard is recommended as such eases his/her task.
Both stations will be provided by the authors.
</bodyText>
<page confidence="0.998677">
87
</page>
<figureCaption confidence="0.999138">
Figure 1: Prototyping Framework Components.
</figureCaption>
<sectionHeader confidence="0.981545" genericHeader="conclusions">
5 Summary and Future Work
</sectionHeader>
<bodyText confidence="0.999979444444444">
This demo presents an integrated prototyping
framework for running WOZ driven language
technology application scenarios. Gluing together
existing tools for ASR, WOZ and TTS we have
created an easy to use environment for spoken di-
alog design and research. Future work will focus
on adding additional language technology compo-
nents (e.g. NLU, DM, NLG) and on improving the
currently limited ASR language resources.
</bodyText>
<sectionHeader confidence="0.997639" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9989744">
The presented research is conducted as part of the
vAssist project (AAL-2010-3-106), which is par-
tially funded by the European Ambient Assisted
Living Joint Programme and the National Funding
Agencies from Austria, France and Italy.
</bodyText>
<sectionHeader confidence="0.998622" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999925906976744">
D. Bohus, A. Raux, T. K. Harris, M. Eskenazi, and A. I.
Rudnicky. 2007. Olympus: An open-source frame-
work for conversational spoken language interface
research. In Proc. of NAACL-HLT, pages 32–39.
P. Cenek, M. Melichar, and M. Rajman. 2005. A
framework for rapid multimodal application design.
In Proceedings of TSD, pages 393–403.
S. Dow, B. Macintyre, J. Lee, C. Oezbek, J. D. Bolter,
and M. Gandy. 2005. Wizard of oz support through-
out an iterative design process. IEEE Pervasive
Computing, 4(4):18–26.
J. D. Gould, J. Conti, and T. Hovanyecz. 1983. Com-
posing letters with a simulated listening typewriter.
Communications of the ACM, 26(4):295–308.
S. R. Klemmer, A. K. Sinha, J. Chen, J. A. Landay,
N. Aboobaker, and A. Wang. 2000. SUEDE: A wiz-
ard of oz prototyping tool for speech user interfaces.
In Proc. of UIST, pages 1–10.
C. Lee, S. Jung, and G. G. Lee. 2008. Robust dia-
log management with n-best hypotheses using di-
alog examples and agenda. In Proc. of ACL-HLT,
pages 630–637.
S. Schl¨ogl, G. Doherty, N. Karamanis, and S Luz.
2010. WebWOZ: a wizard of oz prototyping frame-
work. In Proc. of the ACM EICS Symposium on En-
gineering Interactive Systems, pages 109–114.
M. Schr¨oder and J. Trouvain. 2003. The German
text-to-speech synthesis system MARY: A tool for
research, development and teaching. International
Journal of Speech Technology.
S. Sutton, R. Cole, J. de Vielliers, J. Schalkwyk, P. Ver-
meulen, M. Macon, Y. Yan, E. Kaiser, B. Rundle,
K. Shobaki, P. Hosom, A. Kain, J. Wouters, D. Mas-
saro, and M. Cohen. 1998. Universal speech tools:
The CSLU toolkit.
M. Turunen and J. Hakulinen. 2000. Jaspis- a frame-
work for multilingual adaptive speech applications.
In Proc. of ICSLP, pages 719–722.
M. Wir´en, R. Eklund, F. Engberg, and J. Westermark.
2007. Experiences of an In-Service Wizard-of-
Oz Data Collection for the Deployment of a Call-
Routing Application. In Proc. of NAACL-HLT,
pages 56–63.
</reference>
<page confidence="0.999408">
88
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.485539">
<title confidence="0.9994935">Designing Language Technology A Wizard of Oz Driven Prototyping Framework</title>
<author confidence="0.99978">S Schl¨ogl</author>
<affiliation confidence="0.9203675">MCI Management Center Innsbruck Management, Communication &amp; IT</affiliation>
<address confidence="0.884905">Innsbruck, AUSTRIA</address>
<email confidence="0.999075">schlogl@mci.edu</email>
<author confidence="0.998688">G J</author>
<affiliation confidence="0.888322666666667">Institut ParisTech &amp; Paris,</affiliation>
<email confidence="0.996923">milhorat@telecom-paristech.fr</email>
<abstract confidence="0.99969235">Wizard of Oz (WOZ) prototyping employs a human wizard to simulate anticipated functions of a future system. In Natural Language Processing this method is usually used to obtain early feedback on dialogue designs, to collect language corpora, or to explore interaction strategies. Yet, existing tools often require complex client-server configurations and setup routines, or suffer from compatibility problems with different platforms. Integrated solutions, which may also be used by designers and researchers without technical background, are missing. In this paper we present a framework for multi-lingual dialog research, which combines speech recognition and synthesis with WOZ. All components are open source and adaptable to different application scenarios.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>D Bohus</author>
<author>A Raux</author>
<author>T K Harris</author>
<author>M Eskenazi</author>
<author>A I Rudnicky</author>
</authors>
<title>Olympus: An open-source framework for conversational spoken language interface research.</title>
<date>2007</date>
<booktitle>In Proc. of NAACL-HLT,</booktitle>
<pages>32--39</pages>
<contexts>
<context position="4756" citStr="Bohus et al., 2007" startWordPosition="705" endWordPosition="708">s, pages 85–88, Gothenburg, Sweden, April 26-30 2014. c�2014 Association for Computational Linguistics 2 Existing Comparable Tools Following the literature, existing tools and frameworks that support prototyping of language technology applications can be separated into two categories. The first category consists of so-called Dialogue Management (DM) tools, which focus on the evaluation of Language Technologies (LTs) and whose primary application lies in the areas of NLP and machine learning. Two well-known examples are the CSLU toolkit (Sutton et al., 1998) and the Olympus dialogue framework (Bohus et al., 2007). Others include the Jaspis dialogue management system (Turunen and Hakulinen, 2000) and the EPFL dialogue platform (Cenek et al., 2005). DM tools explore the language-based interaction between a human and a machine and aim at improving this dialogue. They usually provide an application development interface that integrates different LTs such as ASR and TTS, which is then used by an experimenter to specify a pre-defined dialogue flow. Once the dialogue is designed, it can be tested with human participants. The main focus of these tools lies on testing and improving the quality of the employed </context>
</contexts>
<marker>Bohus, Raux, Harris, Eskenazi, Rudnicky, 2007</marker>
<rawString>D. Bohus, A. Raux, T. K. Harris, M. Eskenazi, and A. I. Rudnicky. 2007. Olympus: An open-source framework for conversational spoken language interface research. In Proc. of NAACL-HLT, pages 32–39.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Cenek</author>
<author>M Melichar</author>
<author>M Rajman</author>
</authors>
<title>A framework for rapid multimodal application design.</title>
<date>2005</date>
<booktitle>In Proceedings of TSD,</booktitle>
<pages>393--403</pages>
<contexts>
<context position="4892" citStr="Cenek et al., 2005" startWordPosition="726" endWordPosition="729">wing the literature, existing tools and frameworks that support prototyping of language technology applications can be separated into two categories. The first category consists of so-called Dialogue Management (DM) tools, which focus on the evaluation of Language Technologies (LTs) and whose primary application lies in the areas of NLP and machine learning. Two well-known examples are the CSLU toolkit (Sutton et al., 1998) and the Olympus dialogue framework (Bohus et al., 2007). Others include the Jaspis dialogue management system (Turunen and Hakulinen, 2000) and the EPFL dialogue platform (Cenek et al., 2005). DM tools explore the language-based interaction between a human and a machine and aim at improving this dialogue. They usually provide an application development interface that integrates different LTs such as ASR and TTS, which is then used by an experimenter to specify a pre-defined dialogue flow. Once the dialogue is designed, it can be tested with human participants. The main focus of these tools lies on testing and improving the quality of the employed technology components and their interplay. Unlike DM tools, representatives from the second category, herein after referred to as WOZ to</context>
</contexts>
<marker>Cenek, Melichar, Rajman, 2005</marker>
<rawString>P. Cenek, M. Melichar, and M. Rajman. 2005. A framework for rapid multimodal application design. In Proceedings of TSD, pages 393–403.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Dow</author>
<author>B Macintyre</author>
<author>J Lee</author>
<author>C Oezbek</author>
<author>J D Bolter</author>
<author>M Gandy</author>
</authors>
<title>Wizard of oz support throughout an iterative design process.</title>
<date>2005</date>
<journal>IEEE Pervasive Computing,</journal>
<volume>4</volume>
<issue>4</issue>
<contexts>
<context position="7205" citStr="Dow et al., 2005" startWordPosition="1098" endWordPosition="1101">stic human-like behaviour and 1http://www.softdoc.de/woz/index.html inconsistencies with its possible bias on evaluation results. A combination of both types of tools can outweigh their deficiencies and furthermore allow for supporting different stages of prototyping. That is, a wizard might complement existing technology on a continuum by first taking on the role of a ‘controller’ who simulates technology. Then, in a second stage one could act as a ‘monitor’ who approves technology output, before finally moving on to being a ‘supervisor’ who only overrides output in cases where it is needed (Dow et al., 2005). However, to allow for such variation an architecture is required that on the one hand supports a flexible use of technology components and on the other hand offers an interface for realtime human intervention. 3 Integrated Prototyping Framework In order to offer a flexible and easy to use prototyping framework for language technology applications we have integrated a number of existing technology components using an Apache ACTIVEMQ messaging server2 and several Java programs. Our framework consists of the JULIUS Large Vocabulary Continuous Speech Recognition engine3, an implementation of the</context>
</contexts>
<marker>Dow, Macintyre, Lee, Oezbek, Bolter, Gandy, 2005</marker>
<rawString>S. Dow, B. Macintyre, J. Lee, C. Oezbek, J. D. Bolter, and M. Gandy. 2005. Wizard of oz support throughout an iterative design process. IEEE Pervasive Computing, 4(4):18–26.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J D Gould</author>
<author>J Conti</author>
<author>T Hovanyecz</author>
</authors>
<title>Composing letters with a simulated listening typewriter.</title>
<date>1983</date>
<journal>Communications of the ACM,</journal>
<volume>26</volume>
<issue>4</issue>
<contexts>
<context position="2464" citStr="Gould et al., 1983" startWordPosition="355" endWordPosition="358">uated with real users. For graphical interfaces, well-known prototyping methods like sketching and wire-framing allow for obtaining early impressions and initial user feedback. These low-fidelity prototyping techniques do not, however, work well with speech and natural language. The Wizard of Oz (WOZ) method can be employed to address this shortcoming. By using a human ‘wizard’ to mimic the functionality of a system, either completely or in part, WOZ supports the evaluation of potential user experiences and interaction strategies without the need for building a fully functional product first (Gould et al., 1983). It furthermore supports the collection of domain specific language corpora and the easy exploration of varying dialog designs (Wir´en et al., 2007). WOZ tools, however, are often application dependent and built for very specific experimental setups. Rarely, are they re-used or adapted to other application scenarios. Also, when used in combination with existing technology components such as ASR or TTS, they usually require complex software installations and server-client configurations. Thus, we see a need for an easy ‘out-of-the-box’ type solution. A tool that does not require great technica</context>
</contexts>
<marker>Gould, Conti, Hovanyecz, 1983</marker>
<rawString>J. D. Gould, J. Conti, and T. Hovanyecz. 1983. Composing letters with a simulated listening typewriter. Communications of the ACM, 26(4):295–308.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S R Klemmer</author>
<author>A K Sinha</author>
<author>J Chen</author>
<author>J A Landay</author>
<author>N Aboobaker</author>
<author>A Wang</author>
</authors>
<title>SUEDE: A wizard of oz prototyping tool for speech user interfaces.</title>
<date>2000</date>
<booktitle>In Proc. of UIST,</booktitle>
<pages>1--10</pages>
<contexts>
<context position="6201" citStr="Klemmer et al., 2000" startWordPosition="937" endWordPosition="940">ly feedback, as they better support the aspects of low-fidelity prototyping. While these applications often offer more flexibility, they rarely integrate actual working LTs. Instead, a human mimics the functions of the machine, which allows for a less restrictive dialogue design and facilitates the testing of user experiences that are not yet supported by existing technologies. Most WOZ tools, however, should be categorized as throwaway applications i.e. they are built for one scenario and only rarely re-used in other settings. Two examples that allow for a more generic application are SUEDE (Klemmer et al., 2000) and Richard Breuer’s WOZ tool1. While both DM and WOZ tools incorporate useful features, neither type provides a full range of support for low-fidelity prototyping of LT applications. DM tools lack the flexibility of exploring aspects that are currently not supported by technology, and pure WOZ applications often depend too much on the actions of the wizard, which can lead to unrealistic human-like behaviour and 1http://www.softdoc.de/woz/index.html inconsistencies with its possible bias on evaluation results. A combination of both types of tools can outweigh their deficiencies and furthermor</context>
</contexts>
<marker>Klemmer, Sinha, Chen, Landay, Aboobaker, Wang, 2000</marker>
<rawString>S. R. Klemmer, A. K. Sinha, J. Chen, J. A. Landay, N. Aboobaker, and A. Wang. 2000. SUEDE: A wizard of oz prototyping tool for speech user interfaces. In Proc. of UIST, pages 1–10.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Lee</author>
<author>S Jung</author>
<author>G G Lee</author>
</authors>
<title>Robust dialog management with n-best hypotheses using dialog examples and agenda.</title>
<date>2008</date>
<booktitle>In Proc. of ACL-HLT,</booktitle>
<pages>630--637</pages>
<contexts>
<context position="9032" citStr="Lee et al., 2008" startWordPosition="1351" endWordPosition="1354">ure versions of the framework. The following sections describe the different components in some more detail and elaborate on how they are connected. 2http://activemq.apache.org/ 3http://julius.sourceforge.jp/en index.php 4http://www.google.com/intl/en/chrome/demos/speech.html 5https://github.com/stephanschloegl/WebWOZ 6http://mary.dfki.de/ 7https://www.virtualbox.org/ 86 3.1 Automatic Speech Recognition The JULIUS open-source Large Vocabulary Continuous Speech Recognition engine (LVCSR) uses n-grams and context-dependent Hidden Markov Models (HMM) to transform acoustic input into text output (Lee et al., 2008). Its recognition performance depends on the availability of language dependent resources i.e. acoustic models, language models, and language dictionaries. Our framework includes basic language resources for English, German, Italian and French. As those resources are still very limited we have also integrated online speech recognition for these four languages using the Google Speech API. This allows for conducting experiments with users while at the same time collecting the necessary data for augmenting and filling in JULIUS language resources. 3.2 Text-to-Speech Synthesis MARY TTS is a state-</context>
</contexts>
<marker>Lee, Jung, Lee, 2008</marker>
<rawString>C. Lee, S. Jung, and G. G. Lee. 2008. Robust dialog management with n-best hypotheses using dialog examples and agenda. In Proc. of ACL-HLT, pages 630–637.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Schl¨ogl</author>
<author>G Doherty</author>
<author>N Karamanis</author>
<author>S Luz</author>
</authors>
<title>WebWOZ: a wizard of oz prototyping framework.</title>
<date>2010</date>
<booktitle>In Proc. of the ACM EICS Symposium on Engineering Interactive Systems,</booktitle>
<pages>109--114</pages>
<marker>Schl¨ogl, Doherty, Karamanis, Luz, 2010</marker>
<rawString>S. Schl¨ogl, G. Doherty, N. Karamanis, and S Luz. 2010. WebWOZ: a wizard of oz prototyping framework. In Proc. of the ACM EICS Symposium on Engineering Interactive Systems, pages 109–114.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Schr¨oder</author>
<author>J Trouvain</author>
</authors>
<title>The German text-to-speech synthesis system MARY: A tool for research, development and teaching.</title>
<date>2003</date>
<journal>International Journal of Speech Technology.</journal>
<marker>Schr¨oder, Trouvain, 2003</marker>
<rawString>M. Schr¨oder and J. Trouvain. 2003. The German text-to-speech synthesis system MARY: A tool for research, development and teaching. International Journal of Speech Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Sutton</author>
<author>R Cole</author>
<author>J de Vielliers</author>
<author>J Schalkwyk</author>
<author>P Vermeulen</author>
<author>M Macon</author>
<author>Y Yan</author>
<author>E Kaiser</author>
<author>B Rundle</author>
<author>K Shobaki</author>
<author>P Hosom</author>
<author>A Kain</author>
<author>J Wouters</author>
<author>D Massaro</author>
<author>M Cohen</author>
</authors>
<title>Universal speech tools: The CSLU toolkit.</title>
<date>1998</date>
<marker>Sutton, Cole, de Vielliers, Schalkwyk, Vermeulen, Macon, Yan, Kaiser, Rundle, Shobaki, Hosom, Kain, Wouters, Massaro, Cohen, 1998</marker>
<rawString>S. Sutton, R. Cole, J. de Vielliers, J. Schalkwyk, P. Vermeulen, M. Macon, Y. Yan, E. Kaiser, B. Rundle, K. Shobaki, P. Hosom, A. Kain, J. Wouters, D. Massaro, and M. Cohen. 1998. Universal speech tools: The CSLU toolkit.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Turunen</author>
<author>J Hakulinen</author>
</authors>
<title>Jaspis- a framework for multilingual adaptive speech applications.</title>
<date>2000</date>
<booktitle>In Proc. of ICSLP,</booktitle>
<pages>719--722</pages>
<contexts>
<context position="4840" citStr="Turunen and Hakulinen, 2000" startWordPosition="717" endWordPosition="720">r Computational Linguistics 2 Existing Comparable Tools Following the literature, existing tools and frameworks that support prototyping of language technology applications can be separated into two categories. The first category consists of so-called Dialogue Management (DM) tools, which focus on the evaluation of Language Technologies (LTs) and whose primary application lies in the areas of NLP and machine learning. Two well-known examples are the CSLU toolkit (Sutton et al., 1998) and the Olympus dialogue framework (Bohus et al., 2007). Others include the Jaspis dialogue management system (Turunen and Hakulinen, 2000) and the EPFL dialogue platform (Cenek et al., 2005). DM tools explore the language-based interaction between a human and a machine and aim at improving this dialogue. They usually provide an application development interface that integrates different LTs such as ASR and TTS, which is then used by an experimenter to specify a pre-defined dialogue flow. Once the dialogue is designed, it can be tested with human participants. The main focus of these tools lies on testing and improving the quality of the employed technology components and their interplay. Unlike DM tools, representatives from the</context>
</contexts>
<marker>Turunen, Hakulinen, 2000</marker>
<rawString>M. Turunen and J. Hakulinen. 2000. Jaspis- a framework for multilingual adaptive speech applications. In Proc. of ICSLP, pages 719–722.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Wir´en</author>
<author>R Eklund</author>
<author>F Engberg</author>
<author>J Westermark</author>
</authors>
<title>Experiences of an In-Service Wizard-ofOz Data Collection for the Deployment of a CallRouting Application. In</title>
<date>2007</date>
<booktitle>Proc. of NAACL-HLT,</booktitle>
<pages>56--63</pages>
<marker>Wir´en, Eklund, Engberg, Westermark, 2007</marker>
<rawString>M. Wir´en, R. Eklund, F. Engberg, and J. Westermark. 2007. Experiences of an In-Service Wizard-ofOz Data Collection for the Deployment of a CallRouting Application. In Proc. of NAACL-HLT, pages 56–63.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>