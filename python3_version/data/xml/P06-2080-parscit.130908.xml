<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000002">
<title confidence="0.994835">
Semantic parsing with Structured SVM Ensemble Classification Models
</title>
<author confidence="0.996344">
Le-Minh Nguyen, Akira Shimazu, and Xuan-Hieu Phan
</author>
<affiliation confidence="0.998093">
Japan Advanced Institute of Science and Technology (JAIST)
</affiliation>
<address confidence="0.496892">
Asahidai 1-1, Nomi, Ishikawa, 923-1292 Japan
</address>
<email confidence="0.99792">
{nguyenml,shimazu,hieuxuan}@jaist.ac.jp
</email>
<sectionHeader confidence="0.997381" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999810666666667">
We present a learning framework for struc-
tured support vector models in which
boosting and bagging methods are used to
construct ensemble models. We also pro-
pose a selection method which is based on
a switching model among a set of outputs
of individual classifiers when dealing with
natural language parsing problems. The
switching model uses subtrees mined from
the corpus and a boosting-based algorithm
to select the most appropriate output. The
application of the proposed framework on
the domain of semantic parsing shows ad-
vantages in comparison with the original
large margin methods.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999968649122807">
Natural language semantic parsing is an interest-
ing problem in NLP (Manning and Schutze, 1999)
as it would very likely be part of any interesting
NLP applications (Allen, 1995). For example, the
necessary of semantic parsing for most of NLP ap-
plication and the ability to map natural language to
a formal query or command language is critical for
developing more user-friendly interfaces.
Recent approaches have focused on using struc-
tured prediction for dealing with syntactic parsing
(B. Taskar et. al., 2004) and text chunking prob-
lems (Lafferty et al, 2001). For semantic pars-
ing, Zettlemoyer and Collins (2005) proposed a
method for mapping a NL sentence to its logical
form by structured classification using a log-linear
model that represents a distribution over syntac-
tic and semantic analyses conditioned on the in-
put sentence. Taskar et al (B. Taskar et. al.,
2004) present a discriminative approach to pars-
ing inspired by the large-margin criterion under-
lying support vector machines in which the loss
function is factorized analogous to the decoding
process. Tsochantaridis et al (Tsochantaridis et
al., 2004) propose a large-margin models based on
SVMs for structured prediction (SSVM) in gen-
eral and apply it for syntactic parsing problem so
that the models can adapt to overlap features, ker-
nels, and any loss functions.
Following the successes of the SSVM algorithm
to structured prediction, in this paper we exploit
the use of SSVM to the semantic parsing problem
by modifying the loss function, feature representa-
tion, maximization algorithm in the original algo-
rithm for structured outputs (Tsochantaridis et al.,
2004).
Beside that, forming committees or ensembles
of learned systems is known to improve accuracy
and bagging and boosting are two popular ensem-
ble methods that typically achieve better accuracy
than a single classifier (Dietterich, 2000). This
leads to employing ensemble learning models for
SSVM is worth to investigate. The first problem of
forming an ensemble learning for semantic pars-
ing is how to obtain individual parsers with re-
spect to the fact that each individual parser per-
forms well enough as well as they make different
types of errors. The second one is that of com-
bining outputs from individual semantic parsers.
The natural way is to use the majority voting strat-
egy that the semantic tree with highest frequency
among the outputs obtained by individual parsers
is selected. However, it is not sure that the ma-
jority voting technique is effective for combining
complex outputs such as a logical form structure.
Thus, a better combination method for semantic
tree output should be investigated.
To deal with these problems, we proposed an
</bodyText>
<page confidence="0.983061">
619
</page>
<note confidence="0.7249615">
Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 619–626,
Sydney, July 2006. c�2006 Association for Computational Linguistics
</note>
<bodyText confidence="0.999748333333333">
ensemble method which consists of learning and
averaging phases in which the learning phases are
either a boosting or a bagging model, and the av-
eraging phase is based on a switching method on
outputs obtained from all individual SSVMs. For
the averaging phase, the switching model is used
subtrees mined from the corpus and a boosting-
based algorithm to select the most appropriate out-
put.
Applications of SSVM ensemble in the seman-
tic parsing problem show that the proposed SSVM
ensemble is better than the SSVM in term of the F-
measure score and accuracy measurements.
The rest of this paper are organized as follows:
Section 2 gives some background about the struc-
tured support vector machine model for structured
predictions and related works. Section 3 proposes
our ensemble method for structured SVMs on the
semantic parsing problem. Section 4 shows exper-
imental results and Section 5 discusses the advan-
tage of our methods and describes future works.
</bodyText>
<sectionHeader confidence="0.761395" genericHeader="introduction">
2 Backgrounds
2.1 Related Works
</sectionHeader>
<bodyText confidence="0.99997292">
Zelle and Mooney initially proposed the empir-
ically based method using a corpus of NL sen-
tences and their formal representation for learn-
ing by inductive logic programming (Zelle, 1996).
Several extensions for mapping a NL sentence to
its logical form have been addressed by (Tang,
2003). Transforming a natural language sentence
to a logical form was formulated as the task of de-
termining a sequence of actions that would trans-
form the given input sentence to a logical form
(Tang, 2003). The main problem is how to learn a
set of rules from the corpus using the ILP method.
The advantage of the ILP method is that we do not
need to design features for learning a set of rules
from corpus. The disadvantage is that it is quite
complex and slow to acquire parsers for mapping
sentences to logical forms. Kate et al presented
a method (Kate et al., 2005) that used transfor-
mation rules to transform NL sentences to logi-
cal forms. Those transformation rules are learnt
using the corpus of sentences and their logical
forms. This method is much simpler than the ILP
method, while it can achieve comparable result on
the CLANG (Coach Language) and Query corpus.
The transformation based method has the condi-
tion that the formal language should be in the form
of LR grammar.
Ge and Mooney also presented a statistical
method (Ge and Mooney, 2005) by merging syn-
tactic and semantic information. Their method
relaxed the condition in (Kate et al., 2005) and
achieved a state-of the art performance on the
CLANG and query database corpus. However the
distinction of this method in comparison with the
method presented in (Kate et al., 2005) is that Ge
and Mooney require training data to have SAPTs,
while the transforation based method only needs
the LR grammar for the formal language.
The work proposed by (Zettlemoyer and
Collins, 2005) that maps a NL sentence to its log-
ical form by structured classification, using a log-
linear model that represents a distribution over
syntactic and semantic analyses conditioned on
the input sentence. This work is quite similar to
our work in considering the structured classifica-
tion problem. The difference is that we used the
kernel based method instead of a log-linear model
in order to utilize the advantage of handling a very
large number of features by maximizing the mar-
gin in the learning process.
</bodyText>
<subsectionHeader confidence="0.998256">
2.2 Structured Support Vector Models
</subsectionHeader>
<bodyText confidence="0.999848636363636">
Structured classification is the problem of predict-
ing y from x in the case where y has a meaningful
internal structure. Elements y E Y may be, for in-
stance, sequences, strings, labelled trees, lattices,
or graphs.
The approach we pursue is to learn a dis-
criminant function F : X x Y —* R over &lt;
input, output &gt; pairs from which we can derive
a prediction by maximizing F over the response
variable for a specific given input x. Hence, the
general form of our hypotheses f is
</bodyText>
<equation confidence="0.9905055">
f(x; w) = arg max
yEY
</equation>
<bodyText confidence="0.985287142857143">
where w denotes a parameter vector.
As the principle of the maximum-margin pre-
sented in (Vapnik, 1998), in the structured clas-
sification problem, (Tsochantaridis et al., 2004)
proposed several maximum-margin optimization
problems.
For convenience, we define
</bodyText>
<equation confidence="0.997939">
j0i(y) = 0(xi,yi) − 0(xi,y)
</equation>
<bodyText confidence="0.932556">
where (xi,yi) is the training data.
The hard-margin optimization problem is:
</bodyText>
<equation confidence="0.9600102">
SVM0 : min� 2 I1wI12
1 (1)
F(x; y; w)
620
∀i, ∀y ∈ Y\yi : hw, δψi(y)i &gt; 0 (2)
</equation>
<bodyText confidence="0.999697833333333">
where hw, δψi(y)i is the linear combination of
feature representation for input and output.
The soft-margin criterion was proposed
(Tsochantaridis et al., 2004) in order to allow
errors in the training set, by introducing slack
variables.
</bodyText>
<equation confidence="0.99532425">
ξi,s.t.∀i, ξi ≥ 0
(3)
∀i, ∀y ∈ Y\yi : hw, δψi(y)i ≥ 1 − ξi (4)
P
</equation>
<bodyText confidence="0.904127769230769">
Alternatively, using a quadratic term C2n
i
penalize margin violations, we obtained SVM2.
Here C &gt; 0 is a constant that control the trade-
off between training error minimization and mar-
gin maximization.
To deal with problems in which |Y  |is very
large, such as semantic parsing, (Tsochantaridis et
al., 2004) proposed two approaches that general-
ize the formulation SVM0 and SVM1 to the cases
of arbitrary loss function. The first approach is to
re-scale the slack variables according to the loss
incurred in each of the linear constraints.
</bodyText>
<equation confidence="0.998176833333333">
SVMΔs : min n ξi,s.t.∀i, ξi ≥ 0
|{z} 2 kwk2 + 1 (5)
w,ξ n
i=1
1 −ξi
∀i, ∀y ∈ Y \yi : hw, δψi(y)i ≥ Δ(yi, y) (6)
</equation>
<bodyText confidence="0.871465428571429">
The second approach to include loss function is to
re-scale the margin as a special case of the Ham-
ming loss. The margin constraints in this setting
take the following form:
∀i, ∀y ∈ Y\yi : hw, δψi(y)i ≥ Δ(yi, y) − ξi (7)
This set of constraints yields an optimization prob-
lem, namely SVMΔm
</bodyText>
<equation confidence="0.596535">
1 .
</equation>
<subsectionHeader confidence="0.999437">
2.3 Support Vector Machine Learning
</subsectionHeader>
<bodyText confidence="0.999997142857143">
The support vector learning algorithm aims to find
a small set of active constraints that ensures a suf-
ficiently accurate solution. The detailed algorithm,
as presented in (Tsochantaridis et al., 2004) can be
applied to all SVM formulations mentioned above.
The only difference between them is the cost func-
tion in the following optimization problems:
</bodyText>
<equation confidence="0.947803125">
SVMΔs
1 : H(y) ≡ (1 − hδψi(y), wi)Δ(yi, y)
SVMΔs
2 : H(y) ≡ (1 − hδψi(y), wi)pΔ(yi, y)
SVMΔm
1 : H(y) ≡ (Δ(yi, y) − hδψi(y), wi)
SVMΔm
2 : H(y) ≡ (pΔ(yi, y) − hδψi(y), wi)
</equation>
<bodyText confidence="0.999961625">
Typically, the way to apply structured SVM is to
implement feature mapping ψ(x, y), the loss func-
tion Δ(yi, y), as well as the maximization algo-
rithm. In the following section, we apply a struc-
tured support vector machine to the problem of se-
mantic parsing in which the mapping function, the
maximization algorithm, and the loss function are
introduced.
</bodyText>
<sectionHeader confidence="0.987026" genericHeader="method">
3 SSVM Ensemble for Semantic Parsing
</sectionHeader>
<bodyText confidence="0.999925428571429">
Although the bagging and boosting techniques
have known to be effective for improving the
performance of syntactic parsing (Henderson and
Brill, 2000), in this section we focus on our en-
semble learning of SSVM for semantic parsing
and propose a new effective switching model for
either bagging or boosting model.
</bodyText>
<subsectionHeader confidence="0.895817">
3.1 SSVM for Semantic Parsing
</subsectionHeader>
<bodyText confidence="0.999892875">
As discussed in (Tsochantaridis et al., 2004), the
major problem for using the SSVM is to imple-
ment the feature mapping ψ(x, y), the loss func-
tion Δ(yi, y), as well as the maximization algo-
rithm. For semantic parsing, we describe here
the method of structure representation, the feature
mapping, the loss function, and the maximization
algorithm.
</bodyText>
<subsectionHeader confidence="0.856805">
3.1.1 Structure representation
</subsectionHeader>
<bodyText confidence="0.999969571428572">
A tree structure representation incorporated
with semantic and syntactic information is named
semantically augmented parse tree (SAPT) (Ge
and Mooney, 2005). As defined in (Ge and
Mooney, 2005), in an SAPT, each internal node in
the parse tree is annotated with a semantic label.
Figure 1 shows the SAPT for a simple sentence in
the CLANG domain. The semantic labels which
are shown after dashes are concepts in the domain.
Some concepts refer to predicates and take an or-
dered list of arguments. Concepts such as ”team”
and ”unum” might not have arguments. A special
semantic label, ”null”, is used for a node that does
not correspond to any concept in the domain.
</bodyText>
<subsectionHeader confidence="0.812682">
3.1.2 Feature mapping
</subsectionHeader>
<bodyText confidence="0.998452714285714">
For semantic parsing, we can choose a mapping
function to get a model that is isomorphic to a
probabilistic grammar in which each rule within
the grammar consists of both a syntactic rule and
a semantic rule. Each node in a parse tree y for a
sentence x corresponds to a grammar rule gj with
a score wj.
</bodyText>
<equation confidence="0.6341872">
Xn
1
SVM1 : min 2 kwk2 + Cn
i=1
ξ2i to
</equation>
<page confidence="0.884766">
621
</page>
<figureCaption confidence="0.98142475">
Figure 2: Example of feature mapping using tree
representation
Figure 1: An Example of tree representation in
SAPT
</figureCaption>
<bodyText confidence="0.999595625">
All valid parse trees y for a sentence x are
scored by the sum of the wj of their nodes, and the
feature mapping O(x, y) is a history gram vector
counting how often each grammar rule gj occurs
in the tree y. Note that the grammar rules are lex-
icalized. The example shown in Figure 2 clearly
explains the way features are mapped from an in-
put sentence and a tree structure.
</bodyText>
<subsectionHeader confidence="0.782214">
3.1.3 Loss function
</subsectionHeader>
<bodyText confidence="0.9999374">
Let z and zi be two semantic tree outputs and
|zi |and |zi |be the number of brackets in z and
zi, respectively. Let n be the number of common
brackets in the two trees. The loss function be-
tween zi and z is computed as bellow.
</bodyText>
<equation confidence="0.926030333333333">
2 � n
F − loss(zi, z) = 1 − |zi |� |z |(8)
�
1 if z; =� z
zero − one(zi, z) = (9)
0 otherwise
</equation>
<subsectionHeader confidence="0.818852">
3.1.4 Maximization algorithm
</subsectionHeader>
<bodyText confidence="0.999922909090909">
Note that the learning function can be efficiently
computed by finding a structure y E Y that max-
imizes F(x, y; w)=(w, SOi(y)) via a maximiza-
tion algorithm. Typically we used a variant of
CYK maximization algorithm which is similar to
the one for the syntactic parsing problem (John-
son,1999). There are two phases in our maximiza-
tion algorithm for semantic parsing. The first is
to use a variant of CYK algorithm to generate a
SAPT tree. The second phase then applies a deter-
ministic algorithm to output a logical form. The
score of the maximization algorithm is the same
with the obtained value of the CYK algorithm.
The procedure of generating a logical form us-
ing a SAPT structure originally proposed by (Ge
and Mooney, 2005) and it is expressed as Algo-
rithm 1. It generates a logical form based on a
knowledge database K for given input node N.
The predicate argument knowledge, K, specifies,
for each predicate, the semantic constraints on its
arguments. Constraints are specified in terms of
the concepts that can fill each argument, such as
player(team, unum) and bowner(player).
The GETsemanticHEAD determines which of
node’s children is its semantic head based on they
having matching semantic labels. For example, in
Figure 1 N3 is determined to be the semantic head
of the sentence since it matches N8’s semantic la-
bel. ComposeMR assigns their meaning represen-
tation (MR) to fill the arguments in the head’s MR
to construct the complete MR for the node. Figure
1 shows an example of using BuildMR to generate
a semantic tree to a logical form.
</bodyText>
<page confidence="0.982869">
622
</page>
<figure confidence="0.7540375">
Input: The root node N of a SAPT
Predicate knowledge K
Notation: XMR is the MR of node X
Output: NMR
Begin
Ci= the ith child node of N
Ch= GETsemanticHEAD(N)
ChMR =BuildMR(Ch, K)
for each other child Ci where i =� h do
CiMR =BuildMR(Ci, K)
ComposeMR(ChMR,CiMR, K)
end
NMR=ChMR
End
</figure>
<figureCaption confidence="0.9369374">
Algorithm 1: BuildMR(N, K): Computing a logical
form form an SAPT(Ge and Mooney, 2005)
Algorithm 2: Algorithm of SSVM learning for se-
mantic parsing. The algorithm is based on the original
algorithm(Tsochantaridis et al., 2004)
</figureCaption>
<subsectionHeader confidence="0.509562">
3.1.5 SSVM learning for semantic parsing
</subsectionHeader>
<bodyText confidence="0.999998">
As mentioned above, the proposed maximiza-
tion algorithm includes two parts: the first is to
parse the given input sentence to the SAPT tree
and the second part (BuildMR) is to convert the
SAPT tree to a logical form. Here, the score
of maximization algorithm is the same with the
score to generate a SAPT tree and the loss function
should be the measurement based on two logical
form outputs. Algorithm 2 shows our generation
of SSVM learning for the semantic parsing prob-
lem which the loss function is based on the score
of two logical form outputs.
</bodyText>
<subsectionHeader confidence="0.996229">
3.2 SSVM Ensemble for semantic parsing
</subsectionHeader>
<bodyText confidence="0.99995525">
The structured SVM ensemble consists of a train-
ing and a testing phase. In the training phase, each
individual SSVM is trained independently by its
own replicated training data set via a bootstrap
method. In the testing phase, a test example is ap-
plied to all SSVMs simultaneously and a collec-
tive decision is obtained based on an aggregation
strategy.
</bodyText>
<subsectionHeader confidence="0.845758">
3.2.1 Bagging for semantic parsing
</subsectionHeader>
<bodyText confidence="0.999917">
The bagging method (Breiman, 1996) is sim-
ply created K bootstrap with sampling m items
from the training data of sentences and their logi-
cal forms with replacement. We then applied the
SSVM learning in the K generated training data
to create K semantic parser. In the testing phase,
a given input sentence is parsed by K semantic
parsers and their outputs are applied a switching
model to obtain an output for the SSVM ensemble
parser.
</bodyText>
<subsectionHeader confidence="0.80494">
3.2.2 Boosting for semantic parsing
</subsectionHeader>
<bodyText confidence="0.993086538461538">
The representative boosting algorithm is the
AdaBoost algorithm (Schapire, 1999). Each
SSVM is trained using a different training set.
Assuming that we have a training set TR =
(xi; yi)|i = 1, 2, ..., l consisting of l samples and
each sample in the TR is assigned to have the
same value of weight po(xi) = 1/l. For training
the kth SSVM classifier, we build a set of training
samples
TRboostk = (xi; yi)|i = 1, 2, .., l&apos; that is ob-
tained by selecting l&apos;(&lt; l) samples among the
whole data set TR according to the weight value
pk−1(xi) at the (k-1)th iteration. This training
samples is used for training the kth SSVM clas-
sifier. Then, we obtained the updated weight val-
ues pk(xi) of the training samples as follows. The
weight values of the incorrectly classified sam-
ples are increased but the weight values of the
correctly classified samples are decreased. This
shows that the samples which are hard to clas-
sify are selected more frequently. These updated
weight values will be used for building the train-
ing samples TRboostk+1 = (xi; yi)|i = 1, 2, ..., l&apos;
of the (k+1)th SSVM classifier. The sampling pro-
cedure will be repeated until K training samples
set has been built for the Kth SSVM classifier.
</bodyText>
<figure confidence="0.9936558">
6 compute &lt; y*, z* &gt;= arg maxy,zEY,Z H(Y, Z);
7 compute �i = max{0, maxy,zESi H(y, z)};
8 if H(y*, z*) &gt; �i + a then
9 Si — Si U y*, z*;
10 solving optimization with SVM;
11 end
12 end
13 until no Si has changed during iteration;
1 Input: S = (xi; yi; zi), i = 1, 2, ..., l in which xi is
the sentence and yi, zi is the pair of tree structure and
its logical form
2 Output: SSVM model
3 repeat
4 fori=1tondo
5
</figure>
<equation confidence="0.810323">
SVM°s : H(y, z) = (1 − (S&apos;pi(y), w))A(zi, z)
SVM2 s : H(y, z) = (1 − (60i (y), w))y A(zi, z)
SVMA— : H(y, z) = (A (zi, z) − (6,0i (y), w))
SVM2 — : H(y, z) = (y A(zi, z) − (6,0i (y), w))
</equation>
<page confidence="0.996402">
623
</page>
<subsectionHeader confidence="0.599348">
3.2.3 The proposed SSVM ensemble model
</subsectionHeader>
<bodyText confidence="0.999982">
We construct a SSVM ensemble model by using
different parameters for each individual SSVM to-
gether with bagging and boosting models. The pa-
rameters we used here including the kernel func-
tion and the loss function as well as features used
in a SSVM. Let N and K be the number of dif-
ferent parameters and individual semantic parsers
in a SSVM ensemble, respectively. The motiva-
tion is to create individual parsers with respect to
the fact that each individual parser performs well
enough as well as they make different types of
errors. We firstly create N ensemble models us-
ing either boosting or bagging models to obtain
N xK individual parsers. We then select the top T
parsers so that their errors on the training data are
minimized and in different types. After forming
an ensemble model of SSVMs, we need a process
for aggregating outputs of individual SSVM clas-
sifiers. Intuitively, a simplest way is to use a vot-
ing method to select the output of a SSVM ensem-
ble. Instead, we propose a switching method using
subtrees mining from the set of trees as follows.
Let t1, t2, ..., tK be a set of candidate parse trees
produced by an ensemble of K parsers. From the
set of tree t1, t2, ..., tK we generated a set of train-
ing data that maps a tree to a label +1 or -1, where
the tree tj received the label +1 if it is an corrected
output. Otherwise tj received the label -1. We
need to define a learning function for classifying a
tree structure to two labels +1 and -1.
For this problem, we can apply a boosting tech-
nique presented in (Kudo and Matsumoto, 2004).
The method is based on a generation of Adaboost
(Schapire, 1999) in which subtrees mined from the
training data are severed as weak decision stump
functions.
The technique for mining these subtrees is pre-
sented in (Zaki, 2002) which is an efficient method
for mining a large corpus of trees. Table 1 shows
an example of mining subtrees on our corpus. One
</bodyText>
<tableCaption confidence="0.999322">
Table 1: Subtrees mined from the corpus
</tableCaption>
<figure confidence="0.860848166666667">
Frequency Subtree
20 (and(bowner)(bpos))
4 (and(bowner)(bpos(right)))
4 (bpos(circle(pt(playerour11))))
15 (and(bpos)(not(bpos)))
8 (and(bpos(penalty-areaour)))
</figure>
<bodyText confidence="0.999150875">
problem for using the boosting subtrees algorithm
(BT) in our switching models is that we might ob-
tain several outputs with label +1. To solve this,
we evaluate a score for each value +1 obtained by
the BT and select the output with the highest score.
In the case of there is no tree output received the
value +1, the output of the first individual semantic
parser will be the value of our switching model.
</bodyText>
<sectionHeader confidence="0.990647" genericHeader="evaluation">
4 Experimental Results
</sectionHeader>
<bodyText confidence="0.998652230769231">
For the purpose of testing our SSVM ensem-
bles on semantic parsing, we used the CLANG
corpus which is the RoboCup Coach Language
(www.robocup.org). In the Coach Competition,
teams of agents compete on a simulated soccer
field and receive advice from a team coach in
a formal language. The CLANG consists of 37
non-terminal and 133 productions; the corpus for
CLANG includes 300 sentences and their struc-
tured representation in SAPT (Kate et al., 2005),
then the logical form representations were built
from the trees. Table 2 shows the statistic on the
CLANG corpus.
</bodyText>
<tableCaption confidence="0.959217">
Table 2: Statistics on CLANG corpus. The average length
of an NL sentence in the CLANG corpus is 22.52 words. This
indicates that CLANG is the hard corpus. The average length
of the MRs is also large in the CLANG corpus.
</tableCaption>
<table confidence="0.999356428571429">
Statistic CLANG
No.of. Examples 300
Avg. NL sentence length 22.5
Avg. MR length (tokens) 13.42
No. of non-terminals 16
No. of productions 102
No. of unique NL tokens 337
</table>
<tableCaption confidence="0.997825">
Table 3: Training accuracy on CLANG corpus
</tableCaption>
<table confidence="0.967303">
Parameter Training Accuracy
linear+F-loss(O3) 83.9%
polynomial(d=2)+F-loss (O.) 90.1%
polynomial(d=2)+F-loss(O3) 98.8%
polynomial(d=2)+F-loss(O.) 90.2%
RBF+F-loss(O3) 86.3%
</table>
<bodyText confidence="0.999658181818182">
To create an ensemble learning with SSVM, we
used the following parameters with the linear ker-
nel, the polynomial kernel, and RBF kernel, re-
spectively. Table 3 shows that they obtained dif-
ferent accuracies on the training corpus, and their
accuracies are good enough to form a SSVM en-
semble. The parameters in Table 3 is used to form
our proposed SSVM model.
The following is the performance of the
SSVM1, the boosting model, the bagging model,
and the models with different parameters on the
</bodyText>
<footnote confidence="0.996538">
1The SSVM is obtained via http://svmlight.joachims.org/
</footnote>
<page confidence="0.997474">
624
</page>
<bodyText confidence="0.999815666666667">
CLANG corpus2. Note that the numbers of in-
dividual SSVMs in our ensemble models are set
to 10 for boosting and bagging, and each individ-
ual SSVM can be used the zero-one and F1 loss
function. In addition, we also compare the per-
formance of the proposed ensemble SSVM mod-
els and the conventional ensemble models to as-
sert that our models are more effective in forming
SSVM ensemble learning.
We used the standard 10-fold cross validation
test for evaluating the methods. To train a BT
model for the switching phase in each fold test,
we separated the training data into 10-folds. We
keep 9/10 for forming a SSVM ensemble, and
1/10 for producing training data for the switch-
ing model. In addition, we mined a subset of
subtrees in which a frequency of each subtree is
greater than 2, and used them as weak functions
for the boosting tree model. Note that in testing
the whole training data in each fold is formed a
SSVM ensemble model to use the BT model esti-
mated above for selecting outputs obtained by the
SSVM ensemble.
To evaluate the proposed methods in parsing NL
sentences to logical form, we measured the num-
ber of test sentences that produced complete log-
ical forms, and the number of those logical forms
that were correct. For CLANG, a logical form is
correct if it exactly matches the correct representa-
tion, up to reordering of the arguments of commu-
tative operators. We used the evaluation method
presented in (Kate et al., 2005) as the formula be-
low.
</bodyText>
<equation confidence="0.44100425">
precision — #correct−representation
#completed−representation
recall —_ #correct−representation
#sentences
</equation>
<bodyText confidence="0.9997562">
Table 4 shows the results of SSVM, the SCSIS-
SOR system (Ge and Mooney, 2005), and the SILT
system (Kate et al., 2005) on the CLANG corpus,
respectively. It shows that SCSISSOR obtained
approximately 89% precision and 72.3% recall
while on the same corpus our best single SSVM
method 3 achieved a recall (74.3%) and lower pre-
cision (84.2%). The SILT system achieved ap-
proximately 83.9% precision and 51.3% recall 4
which is lower than the best single SSVM.
</bodyText>
<footnote confidence="0.8915474">
2We set N to 5 and K to 6 for the proposed SSVM.
3The parameter for SSVM is the polynomial(d=2)+(03)
4Those figures for precision and recall described in
(Kate et al., 2005) showed approximately this precision and
recall of their method in this paper
</footnote>
<tableCaption confidence="0.9576868">
Table 4: Experiment results with CLANG corpus. Each
SSVM ensemble consists of 10 individual SSVM. SSVM
bagging and SSVM boosting used the voting method. P-
SSVM boosting and P-SSVM bagging used the switching
method (BT) and voting method (VT).
</tableCaption>
<table confidence="0.9996824">
System Methods Precision Recall
1 SSVM 84.2% 74.3%
1 SCSISSOR 89.0% 72.3%
1 SILT 83.9% 51.3%
10 SSVM Bagging 85.7% 72.4%
10 SSVM Boosting 85.7% 72.4%
10 P-SSVM Boosting(BT) 88.4% 79.3%
10 P-SSVM Bagging(BT) 86.5% 79.3%
10 P-SSVM Boosting(VT) 86.5% 75.8%
10 P-SSVM Bagging(VT) 84.6% 75.8%
</table>
<tableCaption confidence="0.547188">
Table 4 also shows the performance of Bagging,
</tableCaption>
<bodyText confidence="0.997139771428571">
Boosting, and the proposed SSVM ensemble mod-
els with bagging and boosting models. It is impor-
tant to note that the switching model using a boost-
ing tree method (BT) to learn the outputs of indi-
vidual SSVMs within the SSVM ensemble model.
It clearly indicates that our proposed ensem-
ble method can enhance the performance of the
SSVM model and the proposed methods are more
effective than the conventional ensemble method
for SSVM. This was because the output of each
SSVM is complex (i.e a logical form) so it is not
sure that the voting method can select a corrected
output. In other words, the boosting tree algo-
rithms can utilize subtrees mined from the corpus
to estimate the good weight values for subtrees,
and then combines them to determine whether or
not a tree is selected. In our opinion, with the
boosting tree algorithm we can have a chance to
obtain more accurate outputs. These results in Ta-
ble 4 effectively support for this evidence.
Moreover, Table 4 depicts that the proposed en-
semble method using different parameters for ei-
ther bagging and boosting models can effectively
improve the performance of bagging and boost-
ing in term of precision and recall. This was be-
cause the accuracy of each individual parser in the
model with different parameters is better than each
one in either the boosting or the bagging model.
In addition, when performing SSVM on the test
set, we might obtain some ’NULL’ outputs since
the grammar generated by SSVM could not de-
rive this sentence. Forming a number of individual
SSVMs to an ensemble model is the way to handle
this case, but it could make the numbers of com-
pleted outputs and corrected outputs increase. Ta-
</bodyText>
<page confidence="0.996858">
625
</page>
<bodyText confidence="0.999904090909091">
ble 4 indicates that the proposed SSVM ensemble
model obtained 88.4% precision and 79.3% recall.
Therefore it shows substantially a better F1 score
in comparison with previous work on the CLANG
corpus.
Summarily, our method achieved the best re-
call result and a high precision on CLANG corpus.
The proposed ensemble models outperformed the
original SSVM on CLANG corpus and its perfor-
mances also is better than that of the best pub-
lished result.
</bodyText>
<sectionHeader confidence="0.999721" genericHeader="conclusions">
5 Conclusions
</sectionHeader>
<bodyText confidence="0.9999729375">
This paper presents a structured support vector
machine ensemble model for semantic parsing
problem by employing it on the corpus of sen-
tences and their representation in logical form.
We also draw a novel SSVM ensemble model in
which the forming ensemble strategy is based on a
selection method on various parameters of SSVM,
and the aggregation method is based on a switch-
ing model using subtrees mined from the outputs
of a SSVM ensemble model.
Experimental results show substantially that the
proposed ensemble model is better than the con-
ventional ensemble models for SSVM. It can also
effectively improve the performance in term of
precision and recall in comparison with previous
works.
</bodyText>
<sectionHeader confidence="0.999201" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9923485">
The work on this paper was supported by a Mon-
bukagakusho 21st COE Program.
</bodyText>
<sectionHeader confidence="0.999178" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998951915254237">
J. Allen. 1995. Natural Language Understand-
ing (2nd Edition). Mento Park, CA: Benjam-
ing/Cumming.
L. Breiman. 1996. Bagging predictors. Machine
Learning 24, 123-140.
T.G. Dietterich. 2000. An experimental compari-
son of three methods for constructing ensembles
of decision trees: Bagging, boosting, and ran-
domization. Machine Learning 40 (2) 139-158.
M. Johnson 1999. PCFG models of linguistic tree
representation. Computational Linguistics.
R. Ge and R.J. Mooney. 2005. A Statistical Se-
mantic Parser that Integrates Syntax and Seman-
ics. In proceedings of CONLL 2005.
J.C. Henderson and E. Brill 2000. Bagging and
Boosting a Treebank Parser. In proceedings
ANLP 2000: 34-41
R.J. Kate et al. 2005. Learning to Transform Nat-
ural to Formal Languages. Proceedings ofAAAI
2005, page 825-830.
T. Kudo, Y. Matsumoto. A Boosting Algorithm
for Classification of Semi-Structured Text. In
proceeding EMNLP 2004.
J. Lafferty, A. McCallum, and F. Pereira. 2001.
Conditional random fields: Probabilistic models
for segmenting and labeling sequence data. In
Proc. ofICML 2001.
D.C. Manning and H. Schutze. 1999. Founda-
tion of Statistical Natural Language Processing.
Cambridge, MA: MIT Press.
L.S. Zettlemoyer and M. Collins. 2005. Learn-
ing to Map Sentences to Logical Form: Struc-
tured Classification with Probabilistic Catego-
rial Grammars. In Proceedings of UAI, pages
825–830.
I. Tsochantaridis, T. Hofmann, T. Joachims, and
Y. Altun. 2004. Support Vector Machine Learn-
ing for Interdependent and Structured Output
Spaces. In proceedings ICML 2004.
V. Vapnik. 1995. The Nature of Statistical Learn-
ing Theory. Springer, N.Y., 1995.
L.R. Tang. 2003. Integrating Top-down and
Bottom-up Approaches in Inductive Logic Pro-
gramming: Applications in Natural Language
Processing and Relation Data Mining. Ph.D.
Dissertation, University of Texas, Austin, TX,
2003.
B. Taskar, D. Klein, M. Collins, D. Koller, and
C.D. Manning. 2004. Max-Margin Parsing. In
proceedings ofEMNLP, 2004.
R.E. Schapire. 1999. A brief introduction to boost-
ing. Proceedings ofIJCAI 99
M.J. Zaki. 2002. Efficiently Mining Frequent
Trees in a Forest. In proceedings 8th ACM
SIGKDD 2002.
J.M. Zelle and R.J. Mooney. 1996. Learning
to parse database queries using inductive logic
programming. In Proceedings AAAI-96, 1050-
1055.
</reference>
<page confidence="0.998815">
626
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.235295">
<note confidence="0.4266425">Semantic parsing with Structured SVM Ensemble Classification Models Nguyen, Akira Shimazu, Phan Japan Advanced Institute of Science and Technology (JAIST) Asahidai 1-1, Nomi, Ishikawa, 923-1292 Japan</note>
<abstract confidence="0.9996605625">We present a learning framework for structured support vector models in which boosting and bagging methods are used to construct ensemble models. We also propose a selection method which is based on a switching model among a set of outputs of individual classifiers when dealing with natural language parsing problems. The switching model uses subtrees mined from the corpus and a boosting-based algorithm to select the most appropriate output. The application of the proposed framework on the domain of semantic parsing shows advantages in comparison with the original large margin methods.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Allen</author>
</authors>
<title>Natural Language Understanding (2nd Edition).</title>
<date>1995</date>
<publisher>Benjaming/Cumming.</publisher>
<location>Mento Park, CA:</location>
<contexts>
<context position="1054" citStr="Allen, 1995" startWordPosition="154" endWordPosition="155">on method which is based on a switching model among a set of outputs of individual classifiers when dealing with natural language parsing problems. The switching model uses subtrees mined from the corpus and a boosting-based algorithm to select the most appropriate output. The application of the proposed framework on the domain of semantic parsing shows advantages in comparison with the original large margin methods. 1 Introduction Natural language semantic parsing is an interesting problem in NLP (Manning and Schutze, 1999) as it would very likely be part of any interesting NLP applications (Allen, 1995). For example, the necessary of semantic parsing for most of NLP application and the ability to map natural language to a formal query or command language is critical for developing more user-friendly interfaces. Recent approaches have focused on using structured prediction for dealing with syntactic parsing (B. Taskar et. al., 2004) and text chunking problems (Lafferty et al, 2001). For semantic parsing, Zettlemoyer and Collins (2005) proposed a method for mapping a NL sentence to its logical form by structured classification using a log-linear model that represents a distribution over syntac</context>
</contexts>
<marker>Allen, 1995</marker>
<rawString>J. Allen. 1995. Natural Language Understanding (2nd Edition). Mento Park, CA: Benjaming/Cumming.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Breiman</author>
</authors>
<title>Bagging predictors.</title>
<date>1996</date>
<journal>Machine Learning</journal>
<volume>24</volume>
<pages>123--140</pages>
<contexts>
<context position="15965" citStr="Breiman, 1996" startWordPosition="2720" endWordPosition="2721">ithm 2 shows our generation of SSVM learning for the semantic parsing problem which the loss function is based on the score of two logical form outputs. 3.2 SSVM Ensemble for semantic parsing The structured SVM ensemble consists of a training and a testing phase. In the training phase, each individual SSVM is trained independently by its own replicated training data set via a bootstrap method. In the testing phase, a test example is applied to all SSVMs simultaneously and a collective decision is obtained based on an aggregation strategy. 3.2.1 Bagging for semantic parsing The bagging method (Breiman, 1996) is simply created K bootstrap with sampling m items from the training data of sentences and their logical forms with replacement. We then applied the SSVM learning in the K generated training data to create K semantic parser. In the testing phase, a given input sentence is parsed by K semantic parsers and their outputs are applied a switching model to obtain an output for the SSVM ensemble parser. 3.2.2 Boosting for semantic parsing The representative boosting algorithm is the AdaBoost algorithm (Schapire, 1999). Each SSVM is trained using a different training set. Assuming that we have a tra</context>
</contexts>
<marker>Breiman, 1996</marker>
<rawString>L. Breiman. 1996. Bagging predictors. Machine Learning 24, 123-140.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T G Dietterich</author>
</authors>
<title>An experimental comparison of three methods for constructing ensembles of decision trees: Bagging, boosting, and randomization.</title>
<date>2000</date>
<journal>Machine Learning</journal>
<volume>40</volume>
<issue>2</issue>
<pages>139--158</pages>
<contexts>
<context position="2751" citStr="Dietterich, 2000" startWordPosition="420" endWordPosition="421">that the models can adapt to overlap features, kernels, and any loss functions. Following the successes of the SSVM algorithm to structured prediction, in this paper we exploit the use of SSVM to the semantic parsing problem by modifying the loss function, feature representation, maximization algorithm in the original algorithm for structured outputs (Tsochantaridis et al., 2004). Beside that, forming committees or ensembles of learned systems is known to improve accuracy and bagging and boosting are two popular ensemble methods that typically achieve better accuracy than a single classifier (Dietterich, 2000). This leads to employing ensemble learning models for SSVM is worth to investigate. The first problem of forming an ensemble learning for semantic parsing is how to obtain individual parsers with respect to the fact that each individual parser performs well enough as well as they make different types of errors. The second one is that of combining outputs from individual semantic parsers. The natural way is to use the majority voting strategy that the semantic tree with highest frequency among the outputs obtained by individual parsers is selected. However, it is not sure that the majority vot</context>
</contexts>
<marker>Dietterich, 2000</marker>
<rawString>T.G. Dietterich. 2000. An experimental comparison of three methods for constructing ensembles of decision trees: Bagging, boosting, and randomization. Machine Learning 40 (2) 139-158.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Johnson</author>
</authors>
<title>PCFG models of linguistic tree representation. Computational Linguistics.</title>
<date>1999</date>
<marker>Johnson, 1999</marker>
<rawString>M. Johnson 1999. PCFG models of linguistic tree representation. Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Ge</author>
<author>R J Mooney</author>
</authors>
<title>A Statistical Semantic Parser that Integrates Syntax and Semanics.</title>
<date>2005</date>
<booktitle>In proceedings of CONLL</booktitle>
<contexts>
<context position="6054" citStr="Ge and Mooney, 2005" startWordPosition="973" endWordPosition="976"> quite complex and slow to acquire parsers for mapping sentences to logical forms. Kate et al presented a method (Kate et al., 2005) that used transformation rules to transform NL sentences to logical forms. Those transformation rules are learnt using the corpus of sentences and their logical forms. This method is much simpler than the ILP method, while it can achieve comparable result on the CLANG (Coach Language) and Query corpus. The transformation based method has the condition that the formal language should be in the form of LR grammar. Ge and Mooney also presented a statistical method (Ge and Mooney, 2005) by merging syntactic and semantic information. Their method relaxed the condition in (Kate et al., 2005) and achieved a state-of the art performance on the CLANG and query database corpus. However the distinction of this method in comparison with the method presented in (Kate et al., 2005) is that Ge and Mooney require training data to have SAPTs, while the transforation based method only needs the LR grammar for the formal language. The work proposed by (Zettlemoyer and Collins, 2005) that maps a NL sentence to its logical form by structured classification, using a loglinear model that repre</context>
<context position="11107" citStr="Ge and Mooney, 2005" startWordPosition="1846" endWordPosition="1849">e switching model for either bagging or boosting model. 3.1 SSVM for Semantic Parsing As discussed in (Tsochantaridis et al., 2004), the major problem for using the SSVM is to implement the feature mapping ψ(x, y), the loss function Δ(yi, y), as well as the maximization algorithm. For semantic parsing, we describe here the method of structure representation, the feature mapping, the loss function, and the maximization algorithm. 3.1.1 Structure representation A tree structure representation incorporated with semantic and syntactic information is named semantically augmented parse tree (SAPT) (Ge and Mooney, 2005). As defined in (Ge and Mooney, 2005), in an SAPT, each internal node in the parse tree is annotated with a semantic label. Figure 1 shows the SAPT for a simple sentence in the CLANG domain. The semantic labels which are shown after dashes are concepts in the domain. Some concepts refer to predicates and take an ordered list of arguments. Concepts such as ”team” and ”unum” might not have arguments. A special semantic label, ”null”, is used for a node that does not correspond to any concept in the domain. 3.1.2 Feature mapping For semantic parsing, we can choose a mapping function to get a mode</context>
<context position="13573" citStr="Ge and Mooney, 2005" startWordPosition="2311" endWordPosition="2314"> y; w)=(w, SOi(y)) via a maximization algorithm. Typically we used a variant of CYK maximization algorithm which is similar to the one for the syntactic parsing problem (Johnson,1999). There are two phases in our maximization algorithm for semantic parsing. The first is to use a variant of CYK algorithm to generate a SAPT tree. The second phase then applies a deterministic algorithm to output a logical form. The score of the maximization algorithm is the same with the obtained value of the CYK algorithm. The procedure of generating a logical form using a SAPT structure originally proposed by (Ge and Mooney, 2005) and it is expressed as Algorithm 1. It generates a logical form based on a knowledge database K for given input node N. The predicate argument knowledge, K, specifies, for each predicate, the semantic constraints on its arguments. Constraints are specified in terms of the concepts that can fill each argument, such as player(team, unum) and bowner(player). The GETsemanticHEAD determines which of node’s children is its semantic head based on they having matching semantic labels. For example, in Figure 1 N3 is determined to be the semantic head of the sentence since it matches N8’s semantic labe</context>
<context position="24168" citStr="Ge and Mooney, 2005" startWordPosition="4164" endWordPosition="4167">aluate the proposed methods in parsing NL sentences to logical form, we measured the number of test sentences that produced complete logical forms, and the number of those logical forms that were correct. For CLANG, a logical form is correct if it exactly matches the correct representation, up to reordering of the arguments of commutative operators. We used the evaluation method presented in (Kate et al., 2005) as the formula below. precision — #correct−representation #completed−representation recall —_ #correct−representation #sentences Table 4 shows the results of SSVM, the SCSISSOR system (Ge and Mooney, 2005), and the SILT system (Kate et al., 2005) on the CLANG corpus, respectively. It shows that SCSISSOR obtained approximately 89% precision and 72.3% recall while on the same corpus our best single SSVM method 3 achieved a recall (74.3%) and lower precision (84.2%). The SILT system achieved approximately 83.9% precision and 51.3% recall 4 which is lower than the best single SSVM. 2We set N to 5 and K to 6 for the proposed SSVM. 3The parameter for SSVM is the polynomial(d=2)+(03) 4Those figures for precision and recall described in (Kate et al., 2005) showed approximately this precision and recall</context>
</contexts>
<marker>Ge, Mooney, 2005</marker>
<rawString>R. Ge and R.J. Mooney. 2005. A Statistical Semantic Parser that Integrates Syntax and Semanics. In proceedings of CONLL 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J C Henderson</author>
<author>E Brill</author>
</authors>
<title>Bagging and Boosting a Treebank Parser.</title>
<date>2000</date>
<booktitle>In proceedings ANLP</booktitle>
<pages>34--41</pages>
<contexts>
<context position="10380" citStr="Henderson and Brill, 2000" startWordPosition="1732" endWordPosition="1735">SVMΔm 1 : H(y) ≡ (Δ(yi, y) − hδψi(y), wi) SVMΔm 2 : H(y) ≡ (pΔ(yi, y) − hδψi(y), wi) Typically, the way to apply structured SVM is to implement feature mapping ψ(x, y), the loss function Δ(yi, y), as well as the maximization algorithm. In the following section, we apply a structured support vector machine to the problem of semantic parsing in which the mapping function, the maximization algorithm, and the loss function are introduced. 3 SSVM Ensemble for Semantic Parsing Although the bagging and boosting techniques have known to be effective for improving the performance of syntactic parsing (Henderson and Brill, 2000), in this section we focus on our ensemble learning of SSVM for semantic parsing and propose a new effective switching model for either bagging or boosting model. 3.1 SSVM for Semantic Parsing As discussed in (Tsochantaridis et al., 2004), the major problem for using the SSVM is to implement the feature mapping ψ(x, y), the loss function Δ(yi, y), as well as the maximization algorithm. For semantic parsing, we describe here the method of structure representation, the feature mapping, the loss function, and the maximization algorithm. 3.1.1 Structure representation A tree structure representati</context>
</contexts>
<marker>Henderson, Brill, 2000</marker>
<rawString>J.C. Henderson and E. Brill 2000. Bagging and Boosting a Treebank Parser. In proceedings ANLP 2000: 34-41</rawString>
</citation>
<citation valid="true">
<authors>
<author>R J Kate</author>
</authors>
<title>Learning to Transform Natural to Formal Languages.</title>
<date>2005</date>
<booktitle>Proceedings ofAAAI 2005,</booktitle>
<pages>825--830</pages>
<marker>Kate, 2005</marker>
<rawString>R.J. Kate et al. 2005. Learning to Transform Natural to Formal Languages. Proceedings ofAAAI 2005, page 825-830.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Kudo</author>
<author>Y Matsumoto</author>
</authors>
<title>A Boosting Algorithm for Classification of Semi-Structured Text.</title>
<date>2004</date>
<booktitle>In proceeding EMNLP</booktitle>
<contexts>
<context position="19807" citStr="Kudo and Matsumoto, 2004" startWordPosition="3444" endWordPosition="3447">ct the output of a SSVM ensemble. Instead, we propose a switching method using subtrees mining from the set of trees as follows. Let t1, t2, ..., tK be a set of candidate parse trees produced by an ensemble of K parsers. From the set of tree t1, t2, ..., tK we generated a set of training data that maps a tree to a label +1 or -1, where the tree tj received the label +1 if it is an corrected output. Otherwise tj received the label -1. We need to define a learning function for classifying a tree structure to two labels +1 and -1. For this problem, we can apply a boosting technique presented in (Kudo and Matsumoto, 2004). The method is based on a generation of Adaboost (Schapire, 1999) in which subtrees mined from the training data are severed as weak decision stump functions. The technique for mining these subtrees is presented in (Zaki, 2002) which is an efficient method for mining a large corpus of trees. Table 1 shows an example of mining subtrees on our corpus. One Table 1: Subtrees mined from the corpus Frequency Subtree 20 (and(bowner)(bpos)) 4 (and(bowner)(bpos(right))) 4 (bpos(circle(pt(playerour11)))) 15 (and(bpos)(not(bpos))) 8 (and(bpos(penalty-areaour))) problem for using the boosting subtrees al</context>
</contexts>
<marker>Kudo, Matsumoto, 2004</marker>
<rawString>T. Kudo, Y. Matsumoto. A Boosting Algorithm for Classification of Semi-Structured Text. In proceeding EMNLP 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lafferty</author>
<author>A McCallum</author>
<author>F Pereira</author>
</authors>
<title>Conditional random fields: Probabilistic models for segmenting and labeling sequence data. In</title>
<date>2001</date>
<booktitle>Proc. ofICML</booktitle>
<contexts>
<context position="1439" citStr="Lafferty et al, 2001" startWordPosition="214" endWordPosition="217">ison with the original large margin methods. 1 Introduction Natural language semantic parsing is an interesting problem in NLP (Manning and Schutze, 1999) as it would very likely be part of any interesting NLP applications (Allen, 1995). For example, the necessary of semantic parsing for most of NLP application and the ability to map natural language to a formal query or command language is critical for developing more user-friendly interfaces. Recent approaches have focused on using structured prediction for dealing with syntactic parsing (B. Taskar et. al., 2004) and text chunking problems (Lafferty et al, 2001). For semantic parsing, Zettlemoyer and Collins (2005) proposed a method for mapping a NL sentence to its logical form by structured classification using a log-linear model that represents a distribution over syntactic and semantic analyses conditioned on the input sentence. Taskar et al (B. Taskar et. al., 2004) present a discriminative approach to parsing inspired by the large-margin criterion underlying support vector machines in which the loss function is factorized analogous to the decoding process. Tsochantaridis et al (Tsochantaridis et al., 2004) propose a large-margin models based on </context>
</contexts>
<marker>Lafferty, McCallum, Pereira, 2001</marker>
<rawString>J. Lafferty, A. McCallum, and F. Pereira. 2001. Conditional random fields: Probabilistic models for segmenting and labeling sequence data. In Proc. ofICML 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D C Manning</author>
<author>H Schutze</author>
</authors>
<title>Foundation of Statistical Natural Language Processing.</title>
<date>1999</date>
<publisher>MIT Press.</publisher>
<location>Cambridge, MA:</location>
<contexts>
<context position="972" citStr="Manning and Schutze, 1999" startWordPosition="138" endWordPosition="141">ch boosting and bagging methods are used to construct ensemble models. We also propose a selection method which is based on a switching model among a set of outputs of individual classifiers when dealing with natural language parsing problems. The switching model uses subtrees mined from the corpus and a boosting-based algorithm to select the most appropriate output. The application of the proposed framework on the domain of semantic parsing shows advantages in comparison with the original large margin methods. 1 Introduction Natural language semantic parsing is an interesting problem in NLP (Manning and Schutze, 1999) as it would very likely be part of any interesting NLP applications (Allen, 1995). For example, the necessary of semantic parsing for most of NLP application and the ability to map natural language to a formal query or command language is critical for developing more user-friendly interfaces. Recent approaches have focused on using structured prediction for dealing with syntactic parsing (B. Taskar et. al., 2004) and text chunking problems (Lafferty et al, 2001). For semantic parsing, Zettlemoyer and Collins (2005) proposed a method for mapping a NL sentence to its logical form by structured </context>
</contexts>
<marker>Manning, Schutze, 1999</marker>
<rawString>D.C. Manning and H. Schutze. 1999. Foundation of Statistical Natural Language Processing. Cambridge, MA: MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L S Zettlemoyer</author>
<author>M Collins</author>
</authors>
<title>Learning to Map Sentences to Logical Form: Structured Classification with Probabilistic Categorial Grammars.</title>
<date>2005</date>
<booktitle>In Proceedings of UAI,</booktitle>
<pages>825--830</pages>
<contexts>
<context position="1493" citStr="Zettlemoyer and Collins (2005)" startWordPosition="222" endWordPosition="225">1 Introduction Natural language semantic parsing is an interesting problem in NLP (Manning and Schutze, 1999) as it would very likely be part of any interesting NLP applications (Allen, 1995). For example, the necessary of semantic parsing for most of NLP application and the ability to map natural language to a formal query or command language is critical for developing more user-friendly interfaces. Recent approaches have focused on using structured prediction for dealing with syntactic parsing (B. Taskar et. al., 2004) and text chunking problems (Lafferty et al, 2001). For semantic parsing, Zettlemoyer and Collins (2005) proposed a method for mapping a NL sentence to its logical form by structured classification using a log-linear model that represents a distribution over syntactic and semantic analyses conditioned on the input sentence. Taskar et al (B. Taskar et. al., 2004) present a discriminative approach to parsing inspired by the large-margin criterion underlying support vector machines in which the loss function is factorized analogous to the decoding process. Tsochantaridis et al (Tsochantaridis et al., 2004) propose a large-margin models based on SVMs for structured prediction (SSVM) in general and a</context>
<context position="6545" citStr="Zettlemoyer and Collins, 2005" startWordPosition="1054" endWordPosition="1057">ition that the formal language should be in the form of LR grammar. Ge and Mooney also presented a statistical method (Ge and Mooney, 2005) by merging syntactic and semantic information. Their method relaxed the condition in (Kate et al., 2005) and achieved a state-of the art performance on the CLANG and query database corpus. However the distinction of this method in comparison with the method presented in (Kate et al., 2005) is that Ge and Mooney require training data to have SAPTs, while the transforation based method only needs the LR grammar for the formal language. The work proposed by (Zettlemoyer and Collins, 2005) that maps a NL sentence to its logical form by structured classification, using a loglinear model that represents a distribution over syntactic and semantic analyses conditioned on the input sentence. This work is quite similar to our work in considering the structured classification problem. The difference is that we used the kernel based method instead of a log-linear model in order to utilize the advantage of handling a very large number of features by maximizing the margin in the learning process. 2.2 Structured Support Vector Models Structured classification is the problem of predicting </context>
</contexts>
<marker>Zettlemoyer, Collins, 2005</marker>
<rawString>L.S. Zettlemoyer and M. Collins. 2005. Learning to Map Sentences to Logical Form: Structured Classification with Probabilistic Categorial Grammars. In Proceedings of UAI, pages 825–830.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Tsochantaridis</author>
<author>T Hofmann</author>
<author>T Joachims</author>
<author>Y Altun</author>
</authors>
<title>Support Vector Machine Learning for Interdependent and Structured Output Spaces.</title>
<date>2004</date>
<booktitle>In proceedings ICML</booktitle>
<contexts>
<context position="1999" citStr="Tsochantaridis et al., 2004" startWordPosition="301" endWordPosition="304">kar et. al., 2004) and text chunking problems (Lafferty et al, 2001). For semantic parsing, Zettlemoyer and Collins (2005) proposed a method for mapping a NL sentence to its logical form by structured classification using a log-linear model that represents a distribution over syntactic and semantic analyses conditioned on the input sentence. Taskar et al (B. Taskar et. al., 2004) present a discriminative approach to parsing inspired by the large-margin criterion underlying support vector machines in which the loss function is factorized analogous to the decoding process. Tsochantaridis et al (Tsochantaridis et al., 2004) propose a large-margin models based on SVMs for structured prediction (SSVM) in general and apply it for syntactic parsing problem so that the models can adapt to overlap features, kernels, and any loss functions. Following the successes of the SSVM algorithm to structured prediction, in this paper we exploit the use of SSVM to the semantic parsing problem by modifying the loss function, feature representation, maximization algorithm in the original algorithm for structured outputs (Tsochantaridis et al., 2004). Beside that, forming committees or ensembles of learned systems is known to impro</context>
<context position="7763" citStr="Tsochantaridis et al., 2004" startWordPosition="1267" endWordPosition="1270">redicting y from x in the case where y has a meaningful internal structure. Elements y E Y may be, for instance, sequences, strings, labelled trees, lattices, or graphs. The approach we pursue is to learn a discriminant function F : X x Y —* R over &lt; input, output &gt; pairs from which we can derive a prediction by maximizing F over the response variable for a specific given input x. Hence, the general form of our hypotheses f is f(x; w) = arg max yEY where w denotes a parameter vector. As the principle of the maximum-margin presented in (Vapnik, 1998), in the structured classification problem, (Tsochantaridis et al., 2004) proposed several maximum-margin optimization problems. For convenience, we define j0i(y) = 0(xi,yi) − 0(xi,y) where (xi,yi) is the training data. The hard-margin optimization problem is: SVM0 : min� 2 I1wI12 1 (1) F(x; y; w) 620 ∀i, ∀y ∈ Y\yi : hw, δψi(y)i &gt; 0 (2) where hw, δψi(y)i is the linear combination of feature representation for input and output. The soft-margin criterion was proposed (Tsochantaridis et al., 2004) in order to allow errors in the training set, by introducing slack variables. ξi,s.t.∀i, ξi ≥ 0 (3) ∀i, ∀y ∈ Y\yi : hw, δψi(y)i ≥ 1 − ξi (4) P Alternatively, using a quadrat</context>
<context position="9516" citStr="Tsochantaridis et al., 2004" startWordPosition="1580" endWordPosition="1583">,s.t.∀i, ξi ≥ 0 |{z} 2 kwk2 + 1 (5) w,ξ n i=1 1 −ξi ∀i, ∀y ∈ Y \yi : hw, δψi(y)i ≥ Δ(yi, y) (6) The second approach to include loss function is to re-scale the margin as a special case of the Hamming loss. The margin constraints in this setting take the following form: ∀i, ∀y ∈ Y\yi : hw, δψi(y)i ≥ Δ(yi, y) − ξi (7) This set of constraints yields an optimization problem, namely SVMΔm 1 . 2.3 Support Vector Machine Learning The support vector learning algorithm aims to find a small set of active constraints that ensures a sufficiently accurate solution. The detailed algorithm, as presented in (Tsochantaridis et al., 2004) can be applied to all SVM formulations mentioned above. The only difference between them is the cost function in the following optimization problems: SVMΔs 1 : H(y) ≡ (1 − hδψi(y), wi)Δ(yi, y) SVMΔs 2 : H(y) ≡ (1 − hδψi(y), wi)pΔ(yi, y) SVMΔm 1 : H(y) ≡ (Δ(yi, y) − hδψi(y), wi) SVMΔm 2 : H(y) ≡ (pΔ(yi, y) − hδψi(y), wi) Typically, the way to apply structured SVM is to implement feature mapping ψ(x, y), the loss function Δ(yi, y), as well as the maximization algorithm. In the following section, we apply a structured support vector machine to the problem of semantic parsing in which the mapping</context>
<context position="14911" citStr="Tsochantaridis et al., 2004" startWordPosition="2538" endWordPosition="2541"> complete MR for the node. Figure 1 shows an example of using BuildMR to generate a semantic tree to a logical form. 622 Input: The root node N of a SAPT Predicate knowledge K Notation: XMR is the MR of node X Output: NMR Begin Ci= the ith child node of N Ch= GETsemanticHEAD(N) ChMR =BuildMR(Ch, K) for each other child Ci where i =� h do CiMR =BuildMR(Ci, K) ComposeMR(ChMR,CiMR, K) end NMR=ChMR End Algorithm 1: BuildMR(N, K): Computing a logical form form an SAPT(Ge and Mooney, 2005) Algorithm 2: Algorithm of SSVM learning for semantic parsing. The algorithm is based on the original algorithm(Tsochantaridis et al., 2004) 3.1.5 SSVM learning for semantic parsing As mentioned above, the proposed maximization algorithm includes two parts: the first is to parse the given input sentence to the SAPT tree and the second part (BuildMR) is to convert the SAPT tree to a logical form. Here, the score of maximization algorithm is the same with the score to generate a SAPT tree and the loss function should be the measurement based on two logical form outputs. Algorithm 2 shows our generation of SSVM learning for the semantic parsing problem which the loss function is based on the score of two logical form outputs. 3.2 SSV</context>
</contexts>
<marker>Tsochantaridis, Hofmann, Joachims, Altun, 2004</marker>
<rawString>I. Tsochantaridis, T. Hofmann, T. Joachims, and Y. Altun. 2004. Support Vector Machine Learning for Interdependent and Structured Output Spaces. In proceedings ICML 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Vapnik</author>
</authors>
<title>The Nature of Statistical Learning Theory.</title>
<date>1995</date>
<publisher>Springer,</publisher>
<location>N.Y.,</location>
<marker>Vapnik, 1995</marker>
<rawString>V. Vapnik. 1995. The Nature of Statistical Learning Theory. Springer, N.Y., 1995.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L R Tang</author>
</authors>
<title>Integrating Top-down and Bottom-up Approaches</title>
<date>2003</date>
<booktitle>in Inductive Logic Programming: Applications in Natural Language Processing and Relation Data Mining. Ph.D. Dissertation,</booktitle>
<institution>University of Texas,</institution>
<location>Austin, TX,</location>
<contexts>
<context position="5000" citStr="Tang, 2003" startWordPosition="788" endWordPosition="789">ctured support vector machine model for structured predictions and related works. Section 3 proposes our ensemble method for structured SVMs on the semantic parsing problem. Section 4 shows experimental results and Section 5 discusses the advantage of our methods and describes future works. 2 Backgrounds 2.1 Related Works Zelle and Mooney initially proposed the empirically based method using a corpus of NL sentences and their formal representation for learning by inductive logic programming (Zelle, 1996). Several extensions for mapping a NL sentence to its logical form have been addressed by (Tang, 2003). Transforming a natural language sentence to a logical form was formulated as the task of determining a sequence of actions that would transform the given input sentence to a logical form (Tang, 2003). The main problem is how to learn a set of rules from the corpus using the ILP method. The advantage of the ILP method is that we do not need to design features for learning a set of rules from corpus. The disadvantage is that it is quite complex and slow to acquire parsers for mapping sentences to logical forms. Kate et al presented a method (Kate et al., 2005) that used transformation rules to</context>
</contexts>
<marker>Tang, 2003</marker>
<rawString>L.R. Tang. 2003. Integrating Top-down and Bottom-up Approaches in Inductive Logic Programming: Applications in Natural Language Processing and Relation Data Mining. Ph.D. Dissertation, University of Texas, Austin, TX, 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Taskar</author>
<author>D Klein</author>
<author>M Collins</author>
<author>D Koller</author>
<author>C D Manning</author>
</authors>
<title>Max-Margin Parsing.</title>
<date>2004</date>
<booktitle>In proceedings ofEMNLP,</booktitle>
<marker>Taskar, Klein, Collins, Koller, Manning, 2004</marker>
<rawString>B. Taskar, D. Klein, M. Collins, D. Koller, and C.D. Manning. 2004. Max-Margin Parsing. In proceedings ofEMNLP, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R E Schapire</author>
</authors>
<title>A brief introduction to boosting.</title>
<date>1999</date>
<booktitle>Proceedings ofIJCAI 99</booktitle>
<contexts>
<context position="16483" citStr="Schapire, 1999" startWordPosition="2806" endWordPosition="2807">on an aggregation strategy. 3.2.1 Bagging for semantic parsing The bagging method (Breiman, 1996) is simply created K bootstrap with sampling m items from the training data of sentences and their logical forms with replacement. We then applied the SSVM learning in the K generated training data to create K semantic parser. In the testing phase, a given input sentence is parsed by K semantic parsers and their outputs are applied a switching model to obtain an output for the SSVM ensemble parser. 3.2.2 Boosting for semantic parsing The representative boosting algorithm is the AdaBoost algorithm (Schapire, 1999). Each SSVM is trained using a different training set. Assuming that we have a training set TR = (xi; yi)|i = 1, 2, ..., l consisting of l samples and each sample in the TR is assigned to have the same value of weight po(xi) = 1/l. For training the kth SSVM classifier, we build a set of training samples TRboostk = (xi; yi)|i = 1, 2, .., l&apos; that is obtained by selecting l&apos;(&lt; l) samples among the whole data set TR according to the weight value pk−1(xi) at the (k-1)th iteration. This training samples is used for training the kth SSVM classifier. Then, we obtained the updated weight values pk(xi) </context>
<context position="19873" citStr="Schapire, 1999" startWordPosition="3457" endWordPosition="3458">ng subtrees mining from the set of trees as follows. Let t1, t2, ..., tK be a set of candidate parse trees produced by an ensemble of K parsers. From the set of tree t1, t2, ..., tK we generated a set of training data that maps a tree to a label +1 or -1, where the tree tj received the label +1 if it is an corrected output. Otherwise tj received the label -1. We need to define a learning function for classifying a tree structure to two labels +1 and -1. For this problem, we can apply a boosting technique presented in (Kudo and Matsumoto, 2004). The method is based on a generation of Adaboost (Schapire, 1999) in which subtrees mined from the training data are severed as weak decision stump functions. The technique for mining these subtrees is presented in (Zaki, 2002) which is an efficient method for mining a large corpus of trees. Table 1 shows an example of mining subtrees on our corpus. One Table 1: Subtrees mined from the corpus Frequency Subtree 20 (and(bowner)(bpos)) 4 (and(bowner)(bpos(right))) 4 (bpos(circle(pt(playerour11)))) 15 (and(bpos)(not(bpos))) 8 (and(bpos(penalty-areaour))) problem for using the boosting subtrees algorithm (BT) in our switching models is that we might obtain sever</context>
</contexts>
<marker>Schapire, 1999</marker>
<rawString>R.E. Schapire. 1999. A brief introduction to boosting. Proceedings ofIJCAI 99</rawString>
</citation>
<citation valid="true">
<authors>
<author>M J Zaki</author>
</authors>
<title>Efficiently Mining Frequent Trees in a Forest.</title>
<date>2002</date>
<booktitle>In proceedings 8th ACM SIGKDD</booktitle>
<contexts>
<context position="20035" citStr="Zaki, 2002" startWordPosition="3484" endWordPosition="3485">t1, t2, ..., tK we generated a set of training data that maps a tree to a label +1 or -1, where the tree tj received the label +1 if it is an corrected output. Otherwise tj received the label -1. We need to define a learning function for classifying a tree structure to two labels +1 and -1. For this problem, we can apply a boosting technique presented in (Kudo and Matsumoto, 2004). The method is based on a generation of Adaboost (Schapire, 1999) in which subtrees mined from the training data are severed as weak decision stump functions. The technique for mining these subtrees is presented in (Zaki, 2002) which is an efficient method for mining a large corpus of trees. Table 1 shows an example of mining subtrees on our corpus. One Table 1: Subtrees mined from the corpus Frequency Subtree 20 (and(bowner)(bpos)) 4 (and(bowner)(bpos(right))) 4 (bpos(circle(pt(playerour11)))) 15 (and(bpos)(not(bpos))) 8 (and(bpos(penalty-areaour))) problem for using the boosting subtrees algorithm (BT) in our switching models is that we might obtain several outputs with label +1. To solve this, we evaluate a score for each value +1 obtained by the BT and select the output with the highest score. In the case of the</context>
</contexts>
<marker>Zaki, 2002</marker>
<rawString>M.J. Zaki. 2002. Efficiently Mining Frequent Trees in a Forest. In proceedings 8th ACM SIGKDD 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J M Zelle</author>
<author>R J Mooney</author>
</authors>
<title>Learning to parse database queries using inductive logic programming.</title>
<date>1996</date>
<booktitle>In Proceedings AAAI-96,</booktitle>
<pages>1050--1055</pages>
<marker>Zelle, Mooney, 1996</marker>
<rawString>J.M. Zelle and R.J. Mooney. 1996. Learning to parse database queries using inductive logic programming. In Proceedings AAAI-96, 1050-1055.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>