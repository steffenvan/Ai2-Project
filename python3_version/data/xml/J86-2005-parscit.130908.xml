<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000451">
<title confidence="0.385652">
Book Reviews Communicating with Databases in Natural Language
</title>
<note confidence="0.67593025">
COMMUNICATING WITH DATABASES IN NATURAL
LANGUAGE
(Ellis Horwood series in artificial intelligence)
Mark Wallace
</note>
<keyword confidence="0.194133">
Chichester: Ellis Horwood, 1984, 170 pp.
</keyword>
<sectionHeader confidence="0.590363" genericHeader="abstract">
ISBN 0-85312-639-9; $29.95
</sectionHeader>
<bodyText confidence="0.999815865384616">
[Also distributed by Halsted Press/John Wiley &amp; Sons as
ISBN 0-470-20105-3]
As a programming language for computational linguistics,
Prolog is a relative newcomer. Mark Wallace, however,
demonstrates very clearly in this timely book the value of
this important tool, especially as it relates to the building
of natural language front ends and interfaces to database
systems. He takes a very practical approach which should
appeal to anyone who has had to contend with the diffi-
culties of designing and implementing natural language
interfaces.
Wallace begins by providing some background on
natural language interfaces. He surveys most of the
conceptual issues, but generously intersperses concrete
references to major research papers and projects. Some
might find his survey too shallow and broad in certain
respects, but I personally found his treatment fair and
complete.
In subsequent chapters, Wallace introduces a formal
query language, called D&amp;Qs, based on referring phrases
(Descriptions) and qualifying phrases (Qualifiers). He
then uses this formalism as a representational vehicle in
the development and Prolog implementation of a natural
language interface, called QPROC. D&amp;Qs is based on
predicate calculus, suitably restricted to provide an
adequate relational query language. Queries in D&amp;Qs
can either be cast into Prolog (as in his &amp;quot;pilot&amp;quot; version)
or converted by Prolog to an underlying query language.
In the Prolog version, each simple qualifier is handled
through facts, each relation maps into a predicate, and
each tuple of the relation ends up as a Prolog clause for
that predicate.
Although the parser is treated in a domain-indepen-
dent fashion, semantics adopts a fairly conventional
relation and attribute style, with verbs, of course, playing
the major roles. Some major issues of semantics are
clearly identified for the reader, including ambiguity,
several matters involving reference and qualification, and
ways to handle the verb to be.
The reader should not, however, view this book as
something it does not claim to be — namely, a book that
provides a thorough and adequate introduction to the
areas of database systems, natural language understand-
ing, or Prolog (although the latter is discussed at some
length in an appendix). Such readers will be disap-
pointed. A moderate level of competence in these areas is
certainly assumed. The interested reader should find the
extensive bibliography also very useful.
I recommend this book to those who feel competent
with Prolog, have a basic understanding of relational
database systems, and can reason through a modest
amount of predicate calculus.
</bodyText>
<figure confidence="0.362264375">
Stan C. Kwasny
Department of Computer Science
Indiana University
Bloomington, IN 47405
THE MENTAL REPRESENTATION OF GRAMMATICAL
RELATIONS
(MIT Press series on cognitive theory and mental repre-
sentation)
Joan Bresnan, Editor
Cambridge: The MIT Press, 1983, 1E+874 pp.
ISBN 0-262-02158-7, $35.00
LEXICAL-FUNCTIONAL GRAMMAR
(Trends in linguistics, Studies and monographs 21)
George M. Horn
Berlin: Mouton Publishers, 1983, 394 pp.
ISBN 90-279-3169-0
</figure>
<bodyText confidence="0.999854">
One of the curiosities of practical linguistics has long
been the chasm between linguistics, as practiced by, for
example, computational linguists, and linguistic theory.
Lexical-functional grammar deserves some attention
from the practical linguist if only because it contains an
explicit attempt to bridge this chasm.
Lexical-functional grammar is firmly planted in
Chomskyan tradition. It builds on all the accepted
conclusions of that theory through X-bar theory. Bres-
nan began lexical-functional grammar in a 1978 publica-
tion, and she has continued it since then in a number of
publications. The Mental Representation of Grammatical
Relations brings together this work and the work of a
number of collaborators into a synthesis that includes
many interesting innovations. Lexical-Functional Gram-
mar is an individual work that is not &amp;quot;orthodox&amp;quot;, in the
sense that it deviates from Bresnan&apos;s own theory in some
non-trivial ways. In this review, I will concentrate on
Bresnan&apos;s theory and discuss Horn&apos;s contributions only in
passing.
I will begin by trying to describe lexical-functional
grammar for the outsider. It will be necessary to squeeze
a lot into a few sentences, but the reader needs to under-
stand some of the machinery (for instance, the striking
up-arrow and down-arrow notation) to understand
anything about the theory.
Grammar is divided into several modules that function
independently of one another to process an utterance out
of the mind into speech, or in the other direction.
Theoreticians like to ignore the production of sentences
and move directly to a module, having no generally
</bodyText>
<page confidence="0.285803">
Computational Linguistics, Volume 12, Numbers 2, April-June 1986 127
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.182322">
<title confidence="0.90408375">Book Reviews Communicating with Databases in Natural Language COMMUNICATING WITH DATABASES IN NATURAL LANGUAGE (Ellis Horwood series in artificial intelligence)</title>
<author confidence="0.997874">Mark Wallace</author>
<note confidence="0.946683">Chichester: Ellis Horwood, 1984, 170 pp. ISBN 0-85312-639-9; $29.95 [Also distributed by Halsted Press/John Wiley &amp; Sons as</note>
<abstract confidence="0.971032375">ISBN 0-470-20105-3] As a programming language for computational linguistics, Prolog is a relative newcomer. Mark Wallace, however, demonstrates very clearly in this timely book the value of this important tool, especially as it relates to the building of natural language front ends and interfaces to database systems. He takes a very practical approach which should appeal to anyone who has had to contend with the difficulties of designing and implementing natural language interfaces. Wallace begins by providing some background on natural language interfaces. He surveys most of the conceptual issues, but generously intersperses concrete references to major research papers and projects. Some might find his survey too shallow and broad in certain respects, but I personally found his treatment fair and complete. In subsequent chapters, Wallace introduces a formal query language, called D&amp;Qs, based on referring phrases (Descriptions) and qualifying phrases (Qualifiers). He then uses this formalism as a representational vehicle in the development and Prolog implementation of a natural interface, called is based on predicate calculus, suitably restricted to provide an adequate relational query language. Queries in D&amp;Qs can either be cast into Prolog (as in his &amp;quot;pilot&amp;quot; version) or converted by Prolog to an underlying query language. In the Prolog version, each simple qualifier is handled through facts, each relation maps into a predicate, and each tuple of the relation ends up as a Prolog clause for that predicate. Although the parser is treated in a domain-independent fashion, semantics adopts a fairly conventional relation and attribute style, with verbs, of course, playing the major roles. Some major issues of semantics are clearly identified for the reader, including ambiguity, several matters involving reference and qualification, and to handle the verb be. The reader should not, however, view this book as something it does not claim to be — namely, a book that</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
</citationList>
</algorithm>
</algorithms>