<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.9985975">
Generating Full Paraphrases of Fragments in a
Dialogue Interpretation System
</title>
<author confidence="0.991777666666667">
Christian Ebert
Shalom Lappin
Howard Gregory
</author>
<affiliation confidence="0.9319195">
Department of Computer Science
King&apos;s College London
</affiliation>
<email confidence="0.9747805">
febert, lappinl@dcs.kcl.ac.uk
howard.gregory@kcl.ac.uk
</email>
<author confidence="0.57652">
Nicolas Nicolov
</author>
<affiliation confidence="0.2589155">
IBM T. J. Watson Research Center
Yorktown, New York
</affiliation>
<email confidence="0.993511">
nicolas@watson.ibm.com
</email>
<sectionHeader confidence="0.982878" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999843833333333">
Using SHARDS — a semantically-
based HPSG approach to the res-
olution of dialogue fragments — we
will show how to generate full para-
phrases for fragments in dialogue.
We adopt a template-filler approach
that does not require deep gener-
ation from an underlying semantic
representation. Instead it reuses the
results of the parse and interpreta-
tion process to dynamically compute
templates and to update fillers as
the dialogue proceeds. This recy-
cling of already available syntactic
and phonological information makes
generation efficient, as it reduces the
operations of the generator to mere
string manipulations.
</bodyText>
<sectionHeader confidence="0.99733" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999865777777778">
Much previous work on generation has fo-
cused on the general problem of producing
lexical strings from abstract semantic repre-
sentations. We consider generation in the
context of a particular task, creating full sen-
tential paraphrases of fragments in dialogue.
When the syntactic, semantic and phonolog-
ical information provided by a dialogue frag-
ment resolution system is made accessible to
a generation component, much of the indeter-
minacy of lexical selection is eliminated.
One major challenge for any dialogue in-
terpretation system is the proper treatment
of fragments. Examples include bare NP an-
swers (2a), where the NP a personnel man-
ager is resolved as the assertion (2b), and
sluicing (4a), where the wh-phrase is inter-
preted as the question (4b)1.
</bodyText>
<listItem confidence="0.940631857142857">
(1) Who hired Jones?
(2) (a) A personnel manager.
(b) A personnel manager hired Jones.
(3) A personnel manager hired Jones.
(4) (a) Who?
(b) Which personnel manager hired
Jones?
</listItem>
<bodyText confidence="0.763668333333333">
Furthermore the antecedent or the frag-
ment may be embedded, as in the following
examples.
</bodyText>
<listItem confidence="0.935149909090909">
(5) The management asked who hired
Jones.
(6) (a) The personnel department thinks a
board member.
(b) The personnel department thinks a
board member hired Jones.
(7) The personnel department thinks a
board member hired Jones.
(8) (a) The CEO wonders who.
(b) The CEO wonders which board
member hired Jones.
</listItem>
<subsectionHeader confidence="0.765548">
&apos;Throughout this paper sentences representing
paraphrases will be set in italics.
</subsectionHeader>
<bodyText confidence="0.951042342857143">
Generating full paraphrases for interpreted
fragments in a dialogue management system
is an important utility for facilitating human-
machine communication. We consider three
cases where paraphrase generation performs
a useful function.
Dialogue Systems In dialogue systems
the purpose of paraphrase generation is
twofold. First, it increases the explicitness
and transparency of the system, which might
be an option that the user wishes to use.
Second, it is necessary for the generation
of clarification questions, which can be
used by the system to resolve ambiguity.
This is illustrated in the following dialogue
between a user and an information system.
USER: Who did the personnel depart-
ment hire?
SYSTEM: John thinks a student.
USER: Who?
At this point Who? might ask for more de-
tails about John (because the user wonders
who John is) or it might be a question
about the hired student. To resolve
this ambiguity the system produces the
following clarification question by generat-
ing the paraphrase of the user&apos;s wh-sluice:
SYSTEM: Do you want to know which stu-
dent John thinks the personnel
department hired?
If the user answers positively the sys-
tem responds with the fragment an-
swer or the full paraphrase, depend-
ing on the parameter which con-
trols the system&apos;s level of explicitness:
SYSTEM: Bill Smith.
or
SYSTEM: John thinks the personnel de-
partment hired Bill Smith.
If the user answers negatively, then the sys-
tem will treat Who? as a clarificatory
question on John2.
System Evaluation A natural application
of paraphrase generation is the monitoring of
a system&apos;s performance. Full paraphrases can
be used to interactively test the system&apos;s in-
terpretation of fragments. When the para-
phrase is available to a human user, he/she
can confirm or revise the paraphrase, and so
monitor the performance of the system effi-
ciently. The paraphrase generator that we
present in this paper is currently used for
monitoring the performance of the SHARDS
system — a system for resolving fragments in
dialogue — which is introduced in more detail
in section 2.
Machine Translation Certain elided
structures pose a problem for machine
translation. Although the source language
might exhibit ellipsis structures of a specific
kind, the target language might not allow for
these. Therefore these structures will have
no direct translation. Two cases in point are
VP-ellipsis and pseudo-gapping in English,
which have no direct counterparts in lan-
guages such as German. A straightforward
solution is to use full paraphrases instead of
ellipsis as the input to the MT component.
Consider the following English dialogue and
it&apos;s translation into German3.
</bodyText>
<listItem confidence="0.961770125">
(9) (E) Who submitted a report today?
(G) Wer legte heute einen Bericht vor?
(10) (E) John did to his supervisor.
(G) John ?[*tat es] seinem Betreuer.
(11) (E) John submitted a report to his
supervisor today.
(G) John legte heute einen Bericht
seinem Betreuer vor.
</listItem>
<footnote confidence="0.938165">
2See (Ginzburg, 2001) for an account of clarifica-
tory ellipsis within the general HPSG framework as-
sumed here. A procedure for recognizing clarificatory
question fragments is being developed on the basis of
this account.
3Currently our system is not capable of handling
ellipsis structures. But as we point out in the last
section, we are extending it to deal with these cases.
</footnote>
<bodyText confidence="0.9998992">
The English answer (10E) exhibits pseudo-
gapping, which cannot be translated into a
similar structure in German (10G). A trans-
lation including an auxiliary corresponding to
did is ungrammatical. Dropping the auxiliary
prior to the translation results in an (at best)
odd sentence.
This problem can be circumvented using
paraphrase generation. Instead of translating
(10E) directly, it&apos;s paraphrase (11E) is com-
puted. Then the translation can proceed with
this paraphrase as the source input to obtain
an appropriate German sentence (11G).
Using the fragment interpretation system
SHARDS we show how to generate para-
phrases for fragments in dialogues like those
in (b) in the examples (1-8) above. The gen-
erator uses a template-filler approach, and it
does not do any deep generation from an un-
derlying semantic representation. Instead it
reuses the results of the parse and interpreta-
tion process of SHARDS to dynamically com-
pute the templates, and then to update the
filler. This recycling of already available syn-
tactic structures makes generation efficient
because it reduces the operations of the gen-
erator to string manipulations.
In Section 2 we give a brief review of
the SHARDS system. We then explain
our proposal for generating fragment para-
phrases with templates in Section 3. In Sec-
tion 4 we briefly describe the implementation
of SHARDS and the generation component.
Section 5 sketches some directions for future
work.
</bodyText>
<sectionHeader confidence="0.955067" genericHeader="introduction">
2 The SHARDS System
</sectionHeader>
<bodyText confidence="0.965159041666667">
SHARDS (Ginzburg et al., 2001) is a Head
Driven Phrase Structure Grammar (HPSG)-
based system for the resolution of fragments
in dialogue. It is based on a version of HPSG
developed in (Ginzburg and Sag, 2000) which
integrates the situation semantics-based the-
ory of dialogue context given in the KOS
framework (Cooper et al., 1999) into recent
work in HPSG (Pollard and Sag, 1994; Sag,
1997). Following (Ginzburg and Sag, 2000),
two new attributes are defined within the
CONTEXT feature structure: the Maximal
Question Under Discussion (MAX-QuD) and
the Salient Utterance (SAL-urr).
The MAX-QUD4 can be seen as the most
salient question that needs to be answered in
the course of a dialogue. It&apos;s value is of type
question. In the framework of this system,
questions are represented as semantic objects
comprising a set of parameters — that is, re-
stricted indices — and a State of Affairs (SOA)
(12).
(12) question
PARAMS
[
SOA [soa(... 7r . . .)
This is the feature structure counterpart of
the )-abstract A7r.(... 7r ...). In a wh-question
the PARAMS set represents the abstracted IN-
DEX values associated with the wh-phrase(s).
For a polar (yes-no) question the PARAMS set
is empty. In general a number of such ques-
tions may be available in a given dialogue con-
text, of which one is selected as the value of
MAX-QUD.
The SAL-UTT represents a distinguished
constituent of the utterance whose content is
the current value of MAX-QUD. In informa-
tion structure terms, it can be thought of as
specifying a potential parallel element corre-
lated with an element in the antecedent ques-
tion or assertion. It&apos;s value is of type sign,
enabling the system to encode syntactic cat-
egorial parallelism, including case assignment
for the fragment.
Specifically, SAL-UTT is computed as the
(sub)utterance associated with the role bear-
ing widest scope within MAX-QUD:
</bodyText>
<listItem confidence="0.990771714285714">
• For wh-questions, SAL-UTT is the wh-
phrase associated with the PARAMS set
of the question.
• If MAX-QUD is a question with an empty
PARAMS set, the context will be under-
specified for SAL-UTT. The possible val-
ues for the SAL-UTT feature are either
</listItem>
<footnote confidence="0.687174">
41n the following we will use &apos;MAX-QUD&apos; as an ab-
breviation for &apos;maximal question under discussion&apos; as
well as for the corresponding HPSG feature
</footnote>
<bodyText confidence="0.99044947826087">
i
the empty set or the utterance associ-
ated with the widest scoping quantifier
in MAX-QUD. This is envoked to resolve
sluicing5. In the case of polar questions,
SAL-UTT will be empty.
Interpreting a bare phrase B in dialogue
consists in computing from context (repre-
sented as a dialogue record) the MAX-QUD
and SAL-UTT features of the assertion or
question clause BCL that B expresses, and
then using these features to specify the CON-
TENT feature of BCL.
Bare argument phrases constitute a non-
head daughter (the fragment), the remaining
information for the interpretation being pro-
vided primarily by the contextual features.
Phrases are classified not only in terms of
their phrasal type, but also with respect to
the further dimension of clausality. Frag-
ments are assigned to a subtype of the type
bare-arg-ph, namely to bare-decl-cl for &apos;short
answers&apos; or bare-wh-cl for sluices.
The restrictions on interpretation are then
imposed by constraints on these types. The
constraint on bare-arg-ph, for instance, re-
quires unification of the NUCLEUS (proposi-
tional core) feature of the MAX-QUD and the
CONTENT feature of the proposition or ques-
tion of which the bare argument phrase is the
non-head daughter. Similarly, the CAT fea-
ture of the SAL-UTT and the non-head daugh-
ter features of the bare phrase are unified to
insure syntactic categorial parallelism. The
constraint on bare-decl-cl requires the RESTR
value of the phrase to be the union of the RE-
STR values of the MAX-QUD and the non-head
daughter (the fragment), i.e. it enforces the
amalgamation of semantic restrictions given
by the context and the fragment itself. For
further details on the grammatical framework
see (Sag, 1997; Ginzburg and Sag, 2000).
We give the result of resolving fragment
(2a). After parsing the antecedent (1) and
the fragment phrase, the resolution procedure
yields the Attribute-Value-Matrix (AVM) in
</bodyText>
<footnote confidence="0.55937125">
5SAL-UTT can also be a set containing more than
one element in contexts where MAX-QUD is a multiple
question as in A: Who arrived when? B: Jo at 5,
Mustafa at 7.
</footnote>
<bodyText confidence="0.9945285">
figure 1. The AVM satisfies the constraints
mentioned above, as the NUCLEUS value of
the entire clause for which the bare phrase is
a non-head daughter is structure shared with
MAX-QUD&apos;S NUCLEUS via 1 , categorial paral-
lelism is ensured via 6 , and the semantic re-
strictions 2 and 3 have been amalgamated
into the RESTR value of the phrase.
The generator uses AVMs like this to set
up it&apos;s templates and fillers.
</bodyText>
<sectionHeader confidence="0.8251255" genericHeader="method">
3 Generation of Fragment
Paraphrases
</sectionHeader>
<bodyText confidence="0.9929581">
Template-based approaches to NL generation
have proved useful in various systems (see e.g.
(Reiter, 1995; Becker and Busemann, 1999)).
These approaches are particularly appropri-
ate in systems where large parts of the text
to be generated remain fixed in some way, or
are partially determined prior to generation.
An inspection of the following dialogue indi-
cates that this is true for the generation of
fragment paraphrases:
</bodyText>
<listItem confidence="0.995634111111111">
(13) The personnel department wonders who
the CEO hired.
(14) (a) John thinks a student.
(b) John thinks the CEO hired a student.
(15) (a) Who?
(b) Which student did the CEO hire?
(16) (a) The student who passed all tests.
(b) The CEO hired the student who
passed all tests.
</listItem>
<bodyText confidence="0.999251583333333">
The paraphrase (14b) is a combination of
parts of the fragment answer (14a) and the
antecedent clause (13). It is worth noting
at this point that dialogues with consecu-
tive fragment answers or questions (such as
the one above) are recursive in nature. The
paraphrase (16b) for instance contains mate-
rial from the initial clause of the discourse.
Just considering the antecedent Who? and
the fragment the student who passed all tests
itself is not sufficient to generate the frag-
ment&apos;s paraphrase. It is necessary to insure
</bodyText>
<table confidence="0.998335882352941">
PHON ( a, personnel, u manager
CAT S[fin] question
CONT NUCLEUS 111
RESTR E
PARAMS {111}
MAX-QUD
Elhire(111, E)
[NUCLEUS
SOA
RESTR E nam ed (E, jones) , person(III)}
CTXT
PHON ( who )
CAT E NP[nom]
SAL-UTT E
[INDEX
CONT
RESTR {person (III)}
</table>
<figure confidence="0.655357375">
NHD-DTRS
(
PHON ( a, personnel, manager )
CAT
[INDEX
RESTR
E{personnel_manager (E)}
CONT
</figure>
<figureCaption confidence="0.999964">
Figure 1: Resolution of (2a): A personnel manager hired Jones.
</figureCaption>
<bodyText confidence="0.999266046511628">
that some parts of the dialogue (in this case
the CEO hired ...) are carried over from one
paraphrase to the other, while other parts
have to be modified with respect to the frag-
ment (such as which student and the student
who passed all tests). This suggests the use of
templates for the fixed parts that have to be
carried over, and of fillers for the parts that
might require modification within the tem-
plates.
Unlike template-based generation systems
where the templates are defined in advance,
our algorithm uses dynamically created tem-
plates. The templates are not fixed in ad-
vance, but must be constructed dynamically
from the dialogue. In a dialogue such as (13-
16) the templates are built once for a specified
MAX-QUD at the very beginning and remain
specified until the dialogue ends. More pre-
cisely, every change in the MAX-QUD forces a
recomputation of the templates. Another dy-
namic feature concerns the filler. After each
utterance, the filler is updated and combined
with one of the templates to yield the in-
tended paraphrase. This enables us to up-
date the paraphrases in a sequence of ques-
tions and fragment answers.
The main point in using this template-filler
mechanism is that it permits the reuse of con-
stituents/syntactic structure that is already
available. Since the surface strings are ac-
cessible from the user input, and the syntac-
tic and semantic information is available from
the parse and fragment interpretation, it is
useful to exploit these resources. Our genera-
tor performs shallow generation by recycling
already given data without using deep seman-
tic knowledge.
We now consider the dynamic construction
of the templates and fillers in greater detail.
Essentially, the templates correspond to dif-
ferent paraphrase schema of the MAX-QUD,
while the fillers correspond to the fragments.
</bodyText>
<subsectionHeader confidence="0.998913">
3.1 Identifying the Templates
</subsectionHeader>
<bodyText confidence="0.999900857142857">
In (13-16) the parser identifies the question
Who did the CEO hire? as the maximal ques-
tion under discussion and who as the salient
utterance. We can see that a certain con-
stituent of the MAX-QUD — namely did the
CEO hire — reappears in modified forms in
the paraphrases (14-16) (b): The paraphrases
(14b) and (16b) contain this component in
Subject-Verb-Object (SVO) order (the CEO
hired ...). The paraphrase (15b) however con-
tains this component after Subject-Auxiliary-
Inversion (SAI) has been done (...did the
CEO hire). To handle these phenomena our
algorithm constructs two different templates:
the template T80 for the SVO case and Tsa,
for the SAI case.
Both templates contain a slot (represented
by 0) which determines the position that the
filler will occupy. In the example above we
indicated this position with three points. For
the dialogue in (13-16) the templates are
</bodyText>
<equation confidence="0.9156385">
T80 = the CEO hired &lt;&gt;
Tsai = did the CEO hire
</equation>
<subsectionHeader confidence="0.994207">
3.2 Identifying the Filler
</subsectionHeader>
<bodyText confidence="0.98605475">
The dialogue contains the following progres-
sion from the SAL-UTT who in (13) to the fi-
nal bare NP answer the student who passed all
tests in (16):
</bodyText>
<equation confidence="0.9641455">
: who
F2 : a student
F3 : which student
F4 : the student who passed all tests
</equation>
<bodyText confidence="0.999962571428571">
We generate the paraphrases of the corre-
sponding fragments by substituting the fillers
F1 to F4 for the slots in the corresponding
templates. For instance substituting F3 for
the slot in Tsa, (which we write Tsa, (F3))
yields the intended paraphrase (15b).
Each fragment produces an update of the
preceding filler. E.g. the filler F2 is updated
by the fragment who of (15a) to F3. The final
selection of the template and it&apos;s composition
with the filler depends on the entire fragment
clause and not on the fragment alone. In (14),
for instance, we have to prefix John thinks to
T80 (F2) to get the intended result.
</bodyText>
<sectionHeader confidence="0.779385666666667" genericHeader="method">
4 An Implemented System for
Fragment Resolution and
Paraphrase Generation
</sectionHeader>
<bodyText confidence="0.99960275">
The entire system of fragment resolution and
generation is implemented in Prolog using
ProFIT (Erbach, 1996) as a formalism to han-
dle typed feature structures. The complete
system consists of five main components. The
components I-IV constitute the SHARDS sys-
tem (Ginzburg et al., 2001). V is the para-
phrase generator.
</bodyText>
<listItem confidence="0.835597055555556">
I. HPSG Grammar. This is a substan-
tially modified version of the gram-
mar employed by (Gregory and Lappin,
1999), but using the types and features
mentioned in Section 2.
II. Dialogue Record. When a clause has
been parsed (and any fragments re-
solved), its AVM is first converted into a
transitive network of Mother-Daughter-
Relations (the MDR list) and then stored
in a dialogue record paired with an index
(counter). A list of MAX-QUD candidates
is computed from the CONT of each sub-
clause and stored as a further component
of the dialogue record.
III. Context Resolution Procedure.
This assigns values from the dialogue
record to the MAX-QUD and SAL-UTT
</listItem>
<bodyText confidence="0.9993219">
features of the current clause. The
most recent element of the MAX-QUD
candidate list which is compatible with
the constraints imposed by the bare
argument phrase is selected as the value
of the MAX-QUD6. SAL-UTT is obtained
from the sign whose content provides
MAX-QUD by applying the conditions on
scoped elements proposed in (Ginzburg
et al., 2001).
</bodyText>
<listItem confidence="0.954836">
IV. Fragment Resolution Procedure.
This computes the semantics (i.e. the
CONT) of the current fragment clause
from its MAX-QUD and SAL-UTT values.
V. Paraphrase Generator. After the res-
</listItem>
<bodyText confidence="0.688045">
olution procedure has been applied, the
generator is called with the antecedent
clause in the form of the MDR list and
the resolved fragment clause in the form
</bodyText>
<footnote confidence="0.868084666666667">
6This recency-based procedure for selecting the
MAX-QUD from the candidate list may require mod-
ification in light of future testing and evaluation
</footnote>
<bodyText confidence="0.997881666666667">
of an AVM. It computes the templates,
updates the fillers, and returns the para-
phrase of the fragment clause.
</bodyText>
<subsectionHeader confidence="0.990168">
4.1 Implementation of the
Generation Algorithm
</subsectionHeader>
<bodyText confidence="0.999969222222222">
The generator takes AVMs as arguments
(a list of AVMs as the Mother- Daughter-
Relations list corresponding to the antecedent
and the AVM of the resolved fragment clause)
and returns the paraphrase of the fragment
clause in the form of a word string. The
MDR list argument enables the generator to
search the parse of the antecedent clause ef-
ficiently, e.g. for the auxiliary in SAI clauses
or for some verbal head, etc. The operations
(such as deletion or substitution of an ele-
ment) that the generator performs are car-
ried out on the surface strings, i.e. on the
values of the PHON features. The generator
extracts the PHON values of the AVMs for the
antecedent clause and the fragment clause in
the initial phase of generation and performs
it&apos;s operations not on their AVMs but just on
these surface strings. All operations — though
guided by the information in the full AVMs —
are simple string manipulations.
If the generator is called for the first time
(or when the MAX-QUD changes, e.g. when
a new dialogue starts), it computes the two
templates and the first filler F1, using the an-
tecedent clause and the fragment, according
to the following algorithm:
</bodyText>
<subsectionHeader confidence="0.500603">
Construct Templates
</subsectionHeader>
<listItem confidence="0.970782181818182">
1. Identify the SAL-UTT and store the AVM
as first filler F1.
2. Identify the MAX-QUD and delete the
SAL-UTT to get the AVM MQ.
3. Compute the templates Tsa, and Tsvo
from MQ and store them:
(a) If MQ is in SVO order, store it as
T8v0, compute Tsat, and insert the
slots; else
(b) MQ is in SAT order, store it as Tsat,
compute T8v0, and insert the slots.
</listItem>
<bodyText confidence="0.997474625">
The setup of the templates requires a conver-
sion from a clause in SVO order to one in SAI
order or vice versa. If the clause is in SVO
order, the verbal head has to be searched, an
appropriate auxiliary has to be inserted into
the string, and the base form of the verb has
to be substituted for it&apos;s inflected form. If
the conversion has to be done in the other
direction, then the auxiliary is identified and
deleted, and the inflected form of the verb is
substituted for it&apos;s base form.
The insertion of the slot at the appropri-
ate position in the SVO template requires the
identification of the verbal head which sub-
categorizes for the SAL-UTT. After this verb
has been found, the slot is inserted at the po-
sition that the SAL-UTT would occupy. E.g.
if the SAL-UTT is the subject, then the slot
is inserted immediately in front of this verb.
In the case of the SAI template the slot is in-
serted at the beginning of the template just
in front of the auxiliary.
As mentioned above, the search for daugh-
ters such as the verbal heads can be done effi-
ciently by going through the MDR list, which
has already been computed for the SHARDS
dialogue record (cf. component II above).
Once the templates are set up, the gener-
ator updates the filler F, to F,+1 according
to the type of the fragment. Below we refer
to the clause which contains the fragment as
FC.
</bodyText>
<listItem confidence="0.7476074">
Update Filler
1. If the fragment of FC is a wh-phrase,
substitute which for the determiner in
the filler F,; else,
2. substitute the fragment for F.
</listItem>
<bodyText confidence="0.999850333333333">
To accomplish the first case of filler update
the AVM corresponding to the stored filler F,
is searched for it&apos;s determiner. Then which is
substituted for this determiner. The second
case is straightforward.
After the filler has been updated the gener-
ator is ready to compute the complete para-
phrase P,+1. Let o stand for the concatena-
tion of strings and E for the empty string. We
write T(F) for the result of substituting the
filler F for the slot &lt;&gt; in the template T. Thus
T(E) is the result of deleting the slot from
T. The composition of template and filler de-
pends on the clause FC, which contains the
fragment.
</bodyText>
<listItem confidence="0.9401235">
Composition of template and filler
1. If Fi+1 is a wh-phrase
(a) If FC consists just of the fragment,
then Pi+1 = Tsai(Fi+1); else,
(b) substitute Fi+10T8v0(E) for the frag-
ment in FC to get Pi+1;
</listItem>
<bodyText confidence="0.9963295">
antecedent clause (13) and an AVM of the
parsed and interpreted fragment clause (14).
As this is the first call, the templates T80
and Tsa, are generated in the way described
above. The first filler F1 is set to the salient
utterance who. The situation is as follows:
</bodyText>
<equation confidence="0.553913666666667">
= who
T80 = the CEO hired &lt;&gt;
Tsai = &lt;&gt; did the CEO hire
</equation>
<bodyText confidence="0.980309826086956">
Immediately after this initial computation the
filler is updated to
else, F2 = a student
2. substitute T80(F,+1) for the fragment in
FC to get
The if-then cascade takes care of the possible
word orders and specifically of the fronting of
wh-phrases. 1(a) handles fronted wh-phrases
in SAI constructions of wh-questions such as
Which student did the CEO hire?. Case 1(b)
handles cases where the wh-question is em-
bedded, as in The personnel department won-
ders which student the CEO hired. Case 2
generates the SVO order in embedded and
non-embedded cases ([John thinks] the CEO
hired a student.).
Once the filler and the template have been
set up, the composition of these two compo-
nents is achieved by simple string concatena-
tion. We insure agreement of the filler and the
template by supplying the slot with the corre-
sponding agreement features of the template
and checking them when the filler is inserted7.
</bodyText>
<subsectionHeader confidence="0.985788">
4.2 The Generator at work
</subsectionHeader>
<bodyText confidence="0.995882285714286">
We can now illustrate the generation algo-
rithm with dialogue (13-16). The first time
the generator is called the arguments are a
parse (in the form of the MDR list) of the
71t will be necessary to refine our agreement check-
ing procedure to deal with mismatches in number and
tense, as in (i) and (ii) respectively.
</bodyText>
<listItem confidence="0.99972325">
(i) (a) Who is presenting the report?
(b) John and Mary.
(ii) (a) Who has written the program?
(b) Mary will.
</listItem>
<bodyText confidence="0.9954986">
because the fragment is a student. As
the filler is not a wh-phrase, case 2 of the
composition step applies and T80 (F2) =
the CEO hired a student is substituted for
a student in (14). The final paraphrase is
</bodyText>
<equation confidence="0.402135">
P2 = John thinks the CEO hired
</equation>
<bodyText confidence="0.883554">
a student
The next call of the generator with (14) as the
antecedent clause and (15) as the fragment
clause leads to an update of F2 to
F3 = which student
as the fragment is who and which is substi-
tuted for the determiner a in F2. The compo-
sition yields
</bodyText>
<equation confidence="0.632066">
P3 = Which student did the CEO hire?
</equation>
<bodyText confidence="0.945763">
As F3 is a wh-phrase and the fragment clause
consists of the fragment who, case 1(a) is con-
sidered. If the bare phrase had been embed-
ded, as in Bob wonders who, case 1(b) would
lead to the substitution of F3 °T80 (E) for who,
and the paraphrase would be Bob wonders
which student the CEO hired. After the
last call of the generator, the filler F3 is up-
dated to
F4 = the student who passed all tests
and the paraphrase is computed as
</bodyText>
<note confidence="0.74277">
P4 = The CEO hired the student
</note>
<footnote confidence="0.448209">
who passed all tests
</footnote>
<bodyText confidence="0.9992074">
This algorithm works properly with exam-
ples that contain multiple embeddings, as in
the case of the following antecedent clause,
where the wh-phrase occurs outside of the ma-
trix clause the system administrator thinks....
</bodyText>
<listItem confidence="0.971804333333333">
(17) Peter wonders who the system
administrator thinks deleted the files.
(18) (a) The webmaster believes a student.
</listItem>
<figure confidence="0.8832935">
(b) The webmaster believes the system
administrator thinks a student
deleted the files.
(19) (a) Who?
(b) Which student does the system
administrator think deleted the files?
</figure>
<bodyText confidence="0.998380210526316">
The parser identifies the question Who does
the system administrator think deleted the
files as the maximal question under discus-
sion and who as the salient utterance (and
the first filler F1). Therefore the antecedent
clause (17) gives rise to the two templates
Tsvo the system administrator
thinks &lt;&gt; deleted the files
Tsai &lt;&gt; does the system administra-
tor think deleted the files
The first update of the filler yields F2 =
a student, and the paraphrase (18b) is gen-
erated on case 2 of the composition proce-
dure. In the next turn F2 is updated to
F3 = which student, and case 1(a) of the
composition procedure leads to (19b).
The algorithm is able to pro-
duce paraphrases of answers to po-
lar questions quite straightforwardly.
</bodyText>
<listItem confidence="0.980620125">
(20) Does Peter think the CEO hired a
student?
(21) (a) Yes.
(b) Peter thinks the CEO hired a
student.
(c) No.
(d) Peter does not think the CEO hired
a student.
</listItem>
<bodyText confidence="0.999963">
As the polar question (20) is an SAI con-
struction we can just run the procedure for
setting up the templates on it. This will com-
pute T8v0 and since the SAL-UTT is empty in
the case of polar questions, nothing will be
deleted, and no slot will be inserted. The re-
sult will be the paraphrase (21b). A small ad-
dition to this procedure makes it possible to
generate the paraphrases of negative answers
such as (21c) as well.
The generator can produce paraphrases for
all phenomena that the parser and the resolu-
tion procedure of SHARDS currently handle.
These are bare NP fragments and bare wh-
sluices, embedded fragments and polar ques-
tions of the kind illustrated in the preceding
sections.
</bodyText>
<sectionHeader confidence="0.973092" genericHeader="conclusions">
5 Conclusion and Future Research
</sectionHeader>
<bodyText confidence="0.999976">
Most work on NL generation such as (Shieber
et al., 1990; Kay, 1996; McKeown, 1985; Ni-
colov and Mellish, 2000) has formulated the
problem in abstract terms as the produc-
tion of a lexical string to encode a seman-
tic representation. We have situated genera-
tion within the context of dialogue interpreta-
tion, specifically fragment resolution. In do-
ing so, we have been able to eliminate much of
the indeterminacy which characterizes classi-
cal generation systems by exploiting the rich
syntactic and phonological information pro-
duced in the course of dialogue interpretation.
While there are undoubtly generation prob-
lems to which this approach does not apply,
the work described here does suggest the pos-
sibility of efficient generation through the ex-
ploitation of the results of dialogue interpreta-
tion in an important class of NL applications.
The research on the system we introduced
in the preceding sections is part of a larger
project of dialogue management at King&apos;s
College, London. We are extending our sys-
tem in several directions. We plan to incorpo-
rate the handling of ellipsis structures (VP-
ellipsis and gapping) into the SHARDS sys-
tem, and the generation component will be
developed to deal with these constructions. In
addition, we are currently doing corpus work
with the British National Corpus, which will
eventually result in a typology of fragment
types. We will use the examples of ellipsis
that we find in this corpus to evaluate and im-
prove our generation system. We are also in
the process of extending the lexicon to achieve
broader coverage for our parser and fragment
interpretation components.
</bodyText>
<sectionHeader confidence="0.998651" genericHeader="acknowledgments">
6 Acknowledgements
</sectionHeader>
<bodyText confidence="0.999984714285715">
We are grateful to two anonymous reviewers
for helpful comments on an earlier draft of
this paper. The dialogue project of which
the work described here is a part is funded
by grant number R00022269 of the Economic
and Social Research Council of the United
Kingdom. Some of the research presented in
this paper was done in the summer of 2000,
when the second author was a Visiting Aca-
demic at the IBM T.J. Watson Research Cen-
ter in Hawthorne, NY. During this time he
worked with the fourth author on the design
and implementation of an initial version of the
generation algorithm.
</bodyText>
<sectionHeader confidence="0.998266" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999768629032258">
Tilman Becker and Stephan Busemann, editors.
1999. May I Speak Freely? Between Templates
and Free Choice in Natural Language Gener-
ation. Workshop at the 23rd German Annual
Conference for Artificial Intelligence (KI &apos;99),
Saarbrficken. DFKI.
R. Cooper, S. Larsson, M. Poesio, D. Traum, and
C. Matheson. 1999. Coding instructional dia-
logue for information states. In Task Oriented
Instructional Dialogue (TRINDI): Deliverable
1.1. University of Gothenburg, Gothenburg.
Gregor Erbach. 1996. ProFIT: Prolog with fea-
tures, inheritance and templates. In Proceed-
ings of the 7th European Conference of the As-
sociation for Computational Linguistics, pages
180-187.
Jonathan Ginzburg and Ivan Sag. 2000. En-
glish Interrogative Constructions. Studies in
Constraint-based Lexicalism. CSLI Publica-
tions, Stanford, California.
Jonathan Ginzburg, Howard Gregory, and Shalom
Lappin. 2001. SHARDS: Fragment resolution
in dialogue. In Harry Bunt, Ielka van der Sluis,
and Elias Thijse, editors, Proceedings of the 4th
International Workshop on Computational Se-
mantics (IWCS-4), Pages 156-172, Tilburg.
Jonathan Ginzburg. 2001. Clarification ellipsis
and nominal anaphora. In H. Bunt, editor,
Computing meaning, volume 2. Kluwer, Dor-
drecht.
Howard Gregory and Shalom Lappin. 1999. An-
tecedent contained ellipsis in HPSG. In G. We-
belhuth, J. P. Koenig, and A. Kathol, editors,
Lexical and Constructional Aspects of Linguis-
tic Explanation, pages 331-356. CSLI Publica-
tions, Stanford.
Martin Kay. 1996. Chart generation. In Proceed-
ings of the 34th Annual Meeting of the ACL,
pages 200-204.
K. R. McKeown. 1985. Text Generation: Using
Discourse Strategies and Focus Constraints to
Generate Natural Language Text. Cambridge
University Press, Cambridge.
Nicolas Nicolov and Chris Mellish. 2000. PRO-
TECTOR: Efficient Generation with Lexical-
ized Grammars. In Recent Advances in Natural
Language Processing, Current Issues in Linguis-
tic Theory (CILT 189), pages 221-243. John
Benjamin, Amsterdam &amp; Philadelphia.
Carl Pollard and Ivan Sag. 1994. Head Driven
Phrase Structure Grammar. University of
Chicago Press and CSLI Publications, Chicago.
Ehud Reiter. 1995. NLG vs. templates. In Pro-
ceedings of the Fifth European Workshop on
Natural-Language Generation (ENLGW-1995),
Leiden, The Netherlands.
Ivan Sag. 1997. English relative clause construc-
tions. Journal of Linguistics, 33:431-484.
Stuart Shieber, Fernando Pereira, Gertjan van
Noord, and Robert Moore. 1990. Semantic-
head-driven generation. Computational Lin-
guistics, 16:30-42.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.228414">
<title confidence="0.9997725">Generating Full Paraphrases of Fragments in Dialogue Interpretation System</title>
<author confidence="0.778748333333333">Christian Shalom Howard</author>
<affiliation confidence="0.9489155">Department of Computer King&apos;s College</affiliation>
<email confidence="0.969804">febert,howard.gregory@kcl.ac.uk</email>
<author confidence="0.822517">Nicolas</author>
<affiliation confidence="0.763417">T. Watson Research</affiliation>
<address confidence="0.735465">Yorktown, New</address>
<email confidence="0.999052">nicolas@watson.ibm.com</email>
<abstract confidence="0.999316947368421">Using SHARDS — a semanticallybased HPSG approach to the resolution of dialogue fragments — we will show how to generate full paraphrases for fragments in dialogue. We adopt a template-filler approach that does not require deep generation from an underlying semantic representation. Instead it reuses the results of the parse and interpretation process to dynamically compute templates and to update fillers as the dialogue proceeds. This recycling of already available syntactic and phonological information makes generation efficient, as it reduces the operations of the generator to mere string manipulations.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Tilman Becker</author>
<author>Stephan Busemann</author>
<author>editors</author>
</authors>
<title>May I Speak Freely? Between Templates and Free Choice</title>
<date>1999</date>
<booktitle>in Natural Language Generation. Workshop at the 23rd German Annual Conference for Artificial Intelligence (KI &apos;99), Saarbrficken. DFKI.</booktitle>
<marker>Becker, Busemann, editors, 1999</marker>
<rawString>Tilman Becker and Stephan Busemann, editors. 1999. May I Speak Freely? Between Templates and Free Choice in Natural Language Generation. Workshop at the 23rd German Annual Conference for Artificial Intelligence (KI &apos;99), Saarbrficken. DFKI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Cooper</author>
<author>S Larsson</author>
<author>M Poesio</author>
<author>D Traum</author>
<author>C Matheson</author>
</authors>
<title>Coding instructional dialogue for information states.</title>
<date>1999</date>
<booktitle>In Task Oriented Instructional Dialogue (TRINDI): Deliverable</booktitle>
<volume>1</volume>
<institution>University of Gothenburg, Gothenburg.</institution>
<contexts>
<context position="7444" citStr="Cooper et al., 1999" startWordPosition="1176" endWordPosition="1179"> review of the SHARDS system. We then explain our proposal for generating fragment paraphrases with templates in Section 3. In Section 4 we briefly describe the implementation of SHARDS and the generation component. Section 5 sketches some directions for future work. 2 The SHARDS System SHARDS (Ginzburg et al., 2001) is a Head Driven Phrase Structure Grammar (HPSG)- based system for the resolution of fragments in dialogue. It is based on a version of HPSG developed in (Ginzburg and Sag, 2000) which integrates the situation semantics-based theory of dialogue context given in the KOS framework (Cooper et al., 1999) into recent work in HPSG (Pollard and Sag, 1994; Sag, 1997). Following (Ginzburg and Sag, 2000), two new attributes are defined within the CONTEXT feature structure: the Maximal Question Under Discussion (MAX-QuD) and the Salient Utterance (SAL-urr). The MAX-QUD4 can be seen as the most salient question that needs to be answered in the course of a dialogue. It&apos;s value is of type question. In the framework of this system, questions are represented as semantic objects comprising a set of parameters — that is, restricted indices — and a State of Affairs (SOA) (12). (12) question PARAMS [ SOA [so</context>
</contexts>
<marker>Cooper, Larsson, Poesio, Traum, Matheson, 1999</marker>
<rawString>R. Cooper, S. Larsson, M. Poesio, D. Traum, and C. Matheson. 1999. Coding instructional dialogue for information states. In Task Oriented Instructional Dialogue (TRINDI): Deliverable 1.1. University of Gothenburg, Gothenburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gregor Erbach</author>
</authors>
<title>ProFIT: Prolog with features, inheritance and templates.</title>
<date>1996</date>
<booktitle>In Proceedings of the 7th European Conference of the Association for Computational Linguistics,</booktitle>
<pages>180--187</pages>
<contexts>
<context position="17300" citStr="Erbach, 1996" startWordPosition="2832" endWordPosition="2833">n Tsa, (which we write Tsa, (F3)) yields the intended paraphrase (15b). Each fragment produces an update of the preceding filler. E.g. the filler F2 is updated by the fragment who of (15a) to F3. The final selection of the template and it&apos;s composition with the filler depends on the entire fragment clause and not on the fragment alone. In (14), for instance, we have to prefix John thinks to T80 (F2) to get the intended result. 4 An Implemented System for Fragment Resolution and Paraphrase Generation The entire system of fragment resolution and generation is implemented in Prolog using ProFIT (Erbach, 1996) as a formalism to handle typed feature structures. The complete system consists of five main components. The components I-IV constitute the SHARDS system (Ginzburg et al., 2001). V is the paraphrase generator. I. HPSG Grammar. This is a substantially modified version of the grammar employed by (Gregory and Lappin, 1999), but using the types and features mentioned in Section 2. II. Dialogue Record. When a clause has been parsed (and any fragments resolved), its AVM is first converted into a transitive network of Mother-DaughterRelations (the MDR list) and then stored in a dialogue record paire</context>
</contexts>
<marker>Erbach, 1996</marker>
<rawString>Gregor Erbach. 1996. ProFIT: Prolog with features, inheritance and templates. In Proceedings of the 7th European Conference of the Association for Computational Linguistics, pages 180-187.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jonathan Ginzburg</author>
<author>Ivan Sag</author>
</authors>
<title>English Interrogative Constructions. Studies in Constraint-based Lexicalism.</title>
<date>2000</date>
<publisher>CSLI Publications,</publisher>
<location>Stanford, California.</location>
<contexts>
<context position="7321" citStr="Ginzburg and Sag, 2000" startWordPosition="1157" endWordPosition="1160"> generation efficient because it reduces the operations of the generator to string manipulations. In Section 2 we give a brief review of the SHARDS system. We then explain our proposal for generating fragment paraphrases with templates in Section 3. In Section 4 we briefly describe the implementation of SHARDS and the generation component. Section 5 sketches some directions for future work. 2 The SHARDS System SHARDS (Ginzburg et al., 2001) is a Head Driven Phrase Structure Grammar (HPSG)- based system for the resolution of fragments in dialogue. It is based on a version of HPSG developed in (Ginzburg and Sag, 2000) which integrates the situation semantics-based theory of dialogue context given in the KOS framework (Cooper et al., 1999) into recent work in HPSG (Pollard and Sag, 1994; Sag, 1997). Following (Ginzburg and Sag, 2000), two new attributes are defined within the CONTEXT feature structure: the Maximal Question Under Discussion (MAX-QuD) and the Salient Utterance (SAL-urr). The MAX-QUD4 can be seen as the most salient question that needs to be answered in the course of a dialogue. It&apos;s value is of type question. In the framework of this system, questions are represented as semantic objects compr</context>
<context position="11071" citStr="Ginzburg and Sag, 2000" startWordPosition="1777" endWordPosition="1780">and the CONTENT feature of the proposition or question of which the bare argument phrase is the non-head daughter. Similarly, the CAT feature of the SAL-UTT and the non-head daughter features of the bare phrase are unified to insure syntactic categorial parallelism. The constraint on bare-decl-cl requires the RESTR value of the phrase to be the union of the RESTR values of the MAX-QUD and the non-head daughter (the fragment), i.e. it enforces the amalgamation of semantic restrictions given by the context and the fragment itself. For further details on the grammatical framework see (Sag, 1997; Ginzburg and Sag, 2000). We give the result of resolving fragment (2a). After parsing the antecedent (1) and the fragment phrase, the resolution procedure yields the Attribute-Value-Matrix (AVM) in 5SAL-UTT can also be a set containing more than one element in contexts where MAX-QUD is a multiple question as in A: Who arrived when? B: Jo at 5, Mustafa at 7. figure 1. The AVM satisfies the constraints mentioned above, as the NUCLEUS value of the entire clause for which the bare phrase is a non-head daughter is structure shared with MAX-QUD&apos;S NUCLEUS via 1 , categorial parallelism is ensured via 6 , and the semantic r</context>
</contexts>
<marker>Ginzburg, Sag, 2000</marker>
<rawString>Jonathan Ginzburg and Ivan Sag. 2000. English Interrogative Constructions. Studies in Constraint-based Lexicalism. CSLI Publications, Stanford, California.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jonathan Ginzburg</author>
<author>Howard Gregory</author>
<author>Shalom Lappin</author>
</authors>
<title>SHARDS: Fragment resolution in dialogue.</title>
<date>2001</date>
<booktitle>Proceedings of the 4th International Workshop on Computational Semantics (IWCS-4),</booktitle>
<pages>156--172</pages>
<editor>In Harry Bunt, Ielka van der Sluis, and Elias Thijse, editors,</editor>
<location>Tilburg.</location>
<contexts>
<context position="7142" citStr="Ginzburg et al., 2001" startWordPosition="1126" endWordPosition="1129">the parse and interpretation process of SHARDS to dynamically compute the templates, and then to update the filler. This recycling of already available syntactic structures makes generation efficient because it reduces the operations of the generator to string manipulations. In Section 2 we give a brief review of the SHARDS system. We then explain our proposal for generating fragment paraphrases with templates in Section 3. In Section 4 we briefly describe the implementation of SHARDS and the generation component. Section 5 sketches some directions for future work. 2 The SHARDS System SHARDS (Ginzburg et al., 2001) is a Head Driven Phrase Structure Grammar (HPSG)- based system for the resolution of fragments in dialogue. It is based on a version of HPSG developed in (Ginzburg and Sag, 2000) which integrates the situation semantics-based theory of dialogue context given in the KOS framework (Cooper et al., 1999) into recent work in HPSG (Pollard and Sag, 1994; Sag, 1997). Following (Ginzburg and Sag, 2000), two new attributes are defined within the CONTEXT feature structure: the Maximal Question Under Discussion (MAX-QuD) and the Salient Utterance (SAL-urr). The MAX-QUD4 can be seen as the most salient q</context>
<context position="17478" citStr="Ginzburg et al., 2001" startWordPosition="2859" endWordPosition="2862">agment who of (15a) to F3. The final selection of the template and it&apos;s composition with the filler depends on the entire fragment clause and not on the fragment alone. In (14), for instance, we have to prefix John thinks to T80 (F2) to get the intended result. 4 An Implemented System for Fragment Resolution and Paraphrase Generation The entire system of fragment resolution and generation is implemented in Prolog using ProFIT (Erbach, 1996) as a formalism to handle typed feature structures. The complete system consists of five main components. The components I-IV constitute the SHARDS system (Ginzburg et al., 2001). V is the paraphrase generator. I. HPSG Grammar. This is a substantially modified version of the grammar employed by (Gregory and Lappin, 1999), but using the types and features mentioned in Section 2. II. Dialogue Record. When a clause has been parsed (and any fragments resolved), its AVM is first converted into a transitive network of Mother-DaughterRelations (the MDR list) and then stored in a dialogue record paired with an index (counter). A list of MAX-QUD candidates is computed from the CONT of each subclause and stored as a further component of the dialogue record. III. Context Resolut</context>
</contexts>
<marker>Ginzburg, Gregory, Lappin, 2001</marker>
<rawString>Jonathan Ginzburg, Howard Gregory, and Shalom Lappin. 2001. SHARDS: Fragment resolution in dialogue. In Harry Bunt, Ielka van der Sluis, and Elias Thijse, editors, Proceedings of the 4th International Workshop on Computational Semantics (IWCS-4), Pages 156-172, Tilburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jonathan Ginzburg</author>
</authors>
<title>Clarification ellipsis and nominal anaphora.</title>
<date>2001</date>
<booktitle>Computing meaning,</booktitle>
<volume>2</volume>
<editor>In H. Bunt, editor,</editor>
<publisher>Kluwer,</publisher>
<location>Dordrecht.</location>
<contexts>
<context position="5304" citStr="Ginzburg, 2001" startWordPosition="833" endWordPosition="834">ect translation. Two cases in point are VP-ellipsis and pseudo-gapping in English, which have no direct counterparts in languages such as German. A straightforward solution is to use full paraphrases instead of ellipsis as the input to the MT component. Consider the following English dialogue and it&apos;s translation into German3. (9) (E) Who submitted a report today? (G) Wer legte heute einen Bericht vor? (10) (E) John did to his supervisor. (G) John ?[*tat es] seinem Betreuer. (11) (E) John submitted a report to his supervisor today. (G) John legte heute einen Bericht seinem Betreuer vor. 2See (Ginzburg, 2001) for an account of clarificatory ellipsis within the general HPSG framework assumed here. A procedure for recognizing clarificatory question fragments is being developed on the basis of this account. 3Currently our system is not capable of handling ellipsis structures. But as we point out in the last section, we are extending it to deal with these cases. The English answer (10E) exhibits pseudogapping, which cannot be translated into a similar structure in German (10G). A translation including an auxiliary corresponding to did is ungrammatical. Dropping the auxiliary prior to the translation r</context>
</contexts>
<marker>Ginzburg, 2001</marker>
<rawString>Jonathan Ginzburg. 2001. Clarification ellipsis and nominal anaphora. In H. Bunt, editor, Computing meaning, volume 2. Kluwer, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Howard Gregory</author>
<author>Shalom Lappin</author>
</authors>
<title>Antecedent contained ellipsis</title>
<date>1999</date>
<booktitle>Lexical and Constructional Aspects of Linguistic Explanation,</booktitle>
<pages>331--356</pages>
<editor>in HPSG. In G. Webelhuth, J. P. Koenig, and A. Kathol, editors,</editor>
<publisher>CSLI Publications, Stanford.</publisher>
<contexts>
<context position="17622" citStr="Gregory and Lappin, 1999" startWordPosition="2885" endWordPosition="2888"> not on the fragment alone. In (14), for instance, we have to prefix John thinks to T80 (F2) to get the intended result. 4 An Implemented System for Fragment Resolution and Paraphrase Generation The entire system of fragment resolution and generation is implemented in Prolog using ProFIT (Erbach, 1996) as a formalism to handle typed feature structures. The complete system consists of five main components. The components I-IV constitute the SHARDS system (Ginzburg et al., 2001). V is the paraphrase generator. I. HPSG Grammar. This is a substantially modified version of the grammar employed by (Gregory and Lappin, 1999), but using the types and features mentioned in Section 2. II. Dialogue Record. When a clause has been parsed (and any fragments resolved), its AVM is first converted into a transitive network of Mother-DaughterRelations (the MDR list) and then stored in a dialogue record paired with an index (counter). A list of MAX-QUD candidates is computed from the CONT of each subclause and stored as a further component of the dialogue record. III. Context Resolution Procedure. This assigns values from the dialogue record to the MAX-QUD and SAL-UTT features of the current clause. The most recent element o</context>
</contexts>
<marker>Gregory, Lappin, 1999</marker>
<rawString>Howard Gregory and Shalom Lappin. 1999. Antecedent contained ellipsis in HPSG. In G. Webelhuth, J. P. Koenig, and A. Kathol, editors, Lexical and Constructional Aspects of Linguistic Explanation, pages 331-356. CSLI Publications, Stanford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Kay</author>
</authors>
<title>Chart generation.</title>
<date>1996</date>
<booktitle>In Proceedings of the 34th Annual Meeting of the ACL,</booktitle>
<pages>200--204</pages>
<contexts>
<context position="27913" citStr="Kay, 1996" startWordPosition="4720" endWordPosition="4721">e of polar questions, nothing will be deleted, and no slot will be inserted. The result will be the paraphrase (21b). A small addition to this procedure makes it possible to generate the paraphrases of negative answers such as (21c) as well. The generator can produce paraphrases for all phenomena that the parser and the resolution procedure of SHARDS currently handle. These are bare NP fragments and bare whsluices, embedded fragments and polar questions of the kind illustrated in the preceding sections. 5 Conclusion and Future Research Most work on NL generation such as (Shieber et al., 1990; Kay, 1996; McKeown, 1985; Nicolov and Mellish, 2000) has formulated the problem in abstract terms as the production of a lexical string to encode a semantic representation. We have situated generation within the context of dialogue interpretation, specifically fragment resolution. In doing so, we have been able to eliminate much of the indeterminacy which characterizes classical generation systems by exploiting the rich syntactic and phonological information produced in the course of dialogue interpretation. While there are undoubtly generation problems to which this approach does not apply, the work d</context>
</contexts>
<marker>Kay, 1996</marker>
<rawString>Martin Kay. 1996. Chart generation. In Proceedings of the 34th Annual Meeting of the ACL, pages 200-204.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K R McKeown</author>
</authors>
<title>Text Generation: Using Discourse Strategies and Focus Constraints to Generate Natural Language Text.</title>
<date>1985</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge.</location>
<contexts>
<context position="27928" citStr="McKeown, 1985" startWordPosition="4722" endWordPosition="4723">questions, nothing will be deleted, and no slot will be inserted. The result will be the paraphrase (21b). A small addition to this procedure makes it possible to generate the paraphrases of negative answers such as (21c) as well. The generator can produce paraphrases for all phenomena that the parser and the resolution procedure of SHARDS currently handle. These are bare NP fragments and bare whsluices, embedded fragments and polar questions of the kind illustrated in the preceding sections. 5 Conclusion and Future Research Most work on NL generation such as (Shieber et al., 1990; Kay, 1996; McKeown, 1985; Nicolov and Mellish, 2000) has formulated the problem in abstract terms as the production of a lexical string to encode a semantic representation. We have situated generation within the context of dialogue interpretation, specifically fragment resolution. In doing so, we have been able to eliminate much of the indeterminacy which characterizes classical generation systems by exploiting the rich syntactic and phonological information produced in the course of dialogue interpretation. While there are undoubtly generation problems to which this approach does not apply, the work described here d</context>
</contexts>
<marker>McKeown, 1985</marker>
<rawString>K. R. McKeown. 1985. Text Generation: Using Discourse Strategies and Focus Constraints to Generate Natural Language Text. Cambridge University Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nicolas Nicolov</author>
<author>Chris Mellish</author>
</authors>
<title>PROTECTOR: Efficient Generation with Lexicalized Grammars.</title>
<date>2000</date>
<booktitle>In Recent Advances in Natural Language Processing, Current Issues in Linguistic Theory (CILT 189),</booktitle>
<pages>221--243</pages>
<location>John Benjamin, Amsterdam &amp; Philadelphia.</location>
<contexts>
<context position="27956" citStr="Nicolov and Mellish, 2000" startWordPosition="4724" endWordPosition="4728">ing will be deleted, and no slot will be inserted. The result will be the paraphrase (21b). A small addition to this procedure makes it possible to generate the paraphrases of negative answers such as (21c) as well. The generator can produce paraphrases for all phenomena that the parser and the resolution procedure of SHARDS currently handle. These are bare NP fragments and bare whsluices, embedded fragments and polar questions of the kind illustrated in the preceding sections. 5 Conclusion and Future Research Most work on NL generation such as (Shieber et al., 1990; Kay, 1996; McKeown, 1985; Nicolov and Mellish, 2000) has formulated the problem in abstract terms as the production of a lexical string to encode a semantic representation. We have situated generation within the context of dialogue interpretation, specifically fragment resolution. In doing so, we have been able to eliminate much of the indeterminacy which characterizes classical generation systems by exploiting the rich syntactic and phonological information produced in the course of dialogue interpretation. While there are undoubtly generation problems to which this approach does not apply, the work described here does suggest the possibility </context>
</contexts>
<marker>Nicolov, Mellish, 2000</marker>
<rawString>Nicolas Nicolov and Chris Mellish. 2000. PROTECTOR: Efficient Generation with Lexicalized Grammars. In Recent Advances in Natural Language Processing, Current Issues in Linguistic Theory (CILT 189), pages 221-243. John Benjamin, Amsterdam &amp; Philadelphia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan Sag</author>
</authors>
<title>Head Driven Phrase Structure Grammar.</title>
<date>1994</date>
<publisher>University of Chicago Press and CSLI Publications,</publisher>
<location>Chicago.</location>
<contexts>
<context position="7492" citStr="Pollard and Sag, 1994" startWordPosition="1185" endWordPosition="1188">ur proposal for generating fragment paraphrases with templates in Section 3. In Section 4 we briefly describe the implementation of SHARDS and the generation component. Section 5 sketches some directions for future work. 2 The SHARDS System SHARDS (Ginzburg et al., 2001) is a Head Driven Phrase Structure Grammar (HPSG)- based system for the resolution of fragments in dialogue. It is based on a version of HPSG developed in (Ginzburg and Sag, 2000) which integrates the situation semantics-based theory of dialogue context given in the KOS framework (Cooper et al., 1999) into recent work in HPSG (Pollard and Sag, 1994; Sag, 1997). Following (Ginzburg and Sag, 2000), two new attributes are defined within the CONTEXT feature structure: the Maximal Question Under Discussion (MAX-QuD) and the Salient Utterance (SAL-urr). The MAX-QUD4 can be seen as the most salient question that needs to be answered in the course of a dialogue. It&apos;s value is of type question. In the framework of this system, questions are represented as semantic objects comprising a set of parameters — that is, restricted indices — and a State of Affairs (SOA) (12). (12) question PARAMS [ SOA [soa(... 7r . . .) This is the feature structure co</context>
</contexts>
<marker>Pollard, Sag, 1994</marker>
<rawString>Carl Pollard and Ivan Sag. 1994. Head Driven Phrase Structure Grammar. University of Chicago Press and CSLI Publications, Chicago.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
</authors>
<title>NLG vs. templates.</title>
<date>1995</date>
<booktitle>In Proceedings of the Fifth European Workshop on Natural-Language Generation (ENLGW-1995),</booktitle>
<location>Leiden, The Netherlands.</location>
<contexts>
<context position="11962" citStr="Reiter, 1995" startWordPosition="1930" endWordPosition="1931">tion as in A: Who arrived when? B: Jo at 5, Mustafa at 7. figure 1. The AVM satisfies the constraints mentioned above, as the NUCLEUS value of the entire clause for which the bare phrase is a non-head daughter is structure shared with MAX-QUD&apos;S NUCLEUS via 1 , categorial parallelism is ensured via 6 , and the semantic restrictions 2 and 3 have been amalgamated into the RESTR value of the phrase. The generator uses AVMs like this to set up it&apos;s templates and fillers. 3 Generation of Fragment Paraphrases Template-based approaches to NL generation have proved useful in various systems (see e.g. (Reiter, 1995; Becker and Busemann, 1999)). These approaches are particularly appropriate in systems where large parts of the text to be generated remain fixed in some way, or are partially determined prior to generation. An inspection of the following dialogue indicates that this is true for the generation of fragment paraphrases: (13) The personnel department wonders who the CEO hired. (14) (a) John thinks a student. (b) John thinks the CEO hired a student. (15) (a) Who? (b) Which student did the CEO hire? (16) (a) The student who passed all tests. (b) The CEO hired the student who passed all tests. The </context>
</contexts>
<marker>Reiter, 1995</marker>
<rawString>Ehud Reiter. 1995. NLG vs. templates. In Proceedings of the Fifth European Workshop on Natural-Language Generation (ENLGW-1995), Leiden, The Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ivan Sag</author>
</authors>
<title>English relative clause constructions.</title>
<date>1997</date>
<journal>Journal of Linguistics,</journal>
<pages>33--431</pages>
<contexts>
<context position="7504" citStr="Sag, 1997" startWordPosition="1189" endWordPosition="1190">ing fragment paraphrases with templates in Section 3. In Section 4 we briefly describe the implementation of SHARDS and the generation component. Section 5 sketches some directions for future work. 2 The SHARDS System SHARDS (Ginzburg et al., 2001) is a Head Driven Phrase Structure Grammar (HPSG)- based system for the resolution of fragments in dialogue. It is based on a version of HPSG developed in (Ginzburg and Sag, 2000) which integrates the situation semantics-based theory of dialogue context given in the KOS framework (Cooper et al., 1999) into recent work in HPSG (Pollard and Sag, 1994; Sag, 1997). Following (Ginzburg and Sag, 2000), two new attributes are defined within the CONTEXT feature structure: the Maximal Question Under Discussion (MAX-QuD) and the Salient Utterance (SAL-urr). The MAX-QUD4 can be seen as the most salient question that needs to be answered in the course of a dialogue. It&apos;s value is of type question. In the framework of this system, questions are represented as semantic objects comprising a set of parameters — that is, restricted indices — and a State of Affairs (SOA) (12). (12) question PARAMS [ SOA [soa(... 7r . . .) This is the feature structure counterpart of</context>
<context position="11046" citStr="Sag, 1997" startWordPosition="1775" endWordPosition="1776">he MAX-QUD and the CONTENT feature of the proposition or question of which the bare argument phrase is the non-head daughter. Similarly, the CAT feature of the SAL-UTT and the non-head daughter features of the bare phrase are unified to insure syntactic categorial parallelism. The constraint on bare-decl-cl requires the RESTR value of the phrase to be the union of the RESTR values of the MAX-QUD and the non-head daughter (the fragment), i.e. it enforces the amalgamation of semantic restrictions given by the context and the fragment itself. For further details on the grammatical framework see (Sag, 1997; Ginzburg and Sag, 2000). We give the result of resolving fragment (2a). After parsing the antecedent (1) and the fragment phrase, the resolution procedure yields the Attribute-Value-Matrix (AVM) in 5SAL-UTT can also be a set containing more than one element in contexts where MAX-QUD is a multiple question as in A: Who arrived when? B: Jo at 5, Mustafa at 7. figure 1. The AVM satisfies the constraints mentioned above, as the NUCLEUS value of the entire clause for which the bare phrase is a non-head daughter is structure shared with MAX-QUD&apos;S NUCLEUS via 1 , categorial parallelism is ensured v</context>
</contexts>
<marker>Sag, 1997</marker>
<rawString>Ivan Sag. 1997. English relative clause constructions. Journal of Linguistics, 33:431-484.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
<author>Fernando Pereira</author>
<author>Gertjan van Noord</author>
<author>Robert Moore</author>
</authors>
<date>1990</date>
<booktitle>Semantichead-driven generation. Computational Linguistics,</booktitle>
<pages>16--30</pages>
<marker>Shieber, Pereira, van Noord, Moore, 1990</marker>
<rawString>Stuart Shieber, Fernando Pereira, Gertjan van Noord, and Robert Moore. 1990. Semantichead-driven generation. Computational Linguistics, 16:30-42.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>