<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.019898">
<title confidence="0.847877">
Datenbank-DIALOG and the Relevance of Habitability
</title>
<author confidence="0.711502">
Harald Trost*
</author>
<sectionHeader confidence="0.722448" genericHeader="abstract">
DFKI GmbH
</sectionHeader>
<address confidence="0.3651395">
Stuhlsatzenhausweg :3
D-6600 Saarbriicken, Germany
</address>
<author confidence="0.7495685">
Wolfgang Heinz, Johannes Matiasek
Ernst Buchberger
</author>
<sectionHeader confidence="0.65366" genericHeader="keywords">
OFA!
</sectionHeader>
<address confidence="0.761089">
Schottengasse :3, A-1010 Wien, Austria
</address>
<email confidence="0.789097">
johnOai.univie.ac.at
</email>
<sectionHeader confidence="0.999608" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99997448">
The paper focusses on the issue of habitability and how it
is accounted for in Datenbank-DIALOG1. Examples from
the area of comparisons and measures—both important
for many application domains and non-trivial from a lin-
guistic point of view—demonstrate how design strategies
can support the development of a habitable system.
Datenbank-DIALOG is a German language interface to
relational databases. Since the development of a first
prototype (1985-88) it has been tested in different en-
vironments and continually been improved. Currently,
in a large field test, Datenbank-DIALOG interfaces to a
database about AI research in Austria. Questions sent
by email2 are answered automatically.
The system consists of four main components. The
scanner breaks up the natural language query into to-
kens for morphological analysis. The parser performs
syntactic and semantic analysis creating one or—in case
of ambiguities—more caseframes containing the query
representation at the domain level. The interpretation
of the query is performed in three stages. The mapping
from domain-level to database-level predicates results in
a DB-Caseframe, then a linearization step produces the
Logical Form and finally a syntactic transformation leads
to an SQL query. The answer is then given directly by
the DBMS as the result of executing the SQL query.
</bodyText>
<sectionHeader confidence="0.988974" genericHeader="method">
2 Habitability
</sectionHeader>
<bodyText confidence="0.999867333333333">
Experiments with NLIs indicate that the linguistic cov-
erage of state-of-the-art systems is adequate. Savings in
training time outweigh problems with queries not han-
dled. Very important though is that the system behaves
in a predictable way, i.e. is habitable, so that users can
learn the types of acceptable queries very fast. Other-
</bodyText>
<footnote confidence="0.933952545454546">
*at OFAI during development of Datenbank-DIALOG
&apos;The development was carried out at the Austrian Re-
search Institute for Artificial Intelligence (oFAI) jointly with
&amp;quot;Software Management GmbH&amp;quot;, Vienna and has been spon-
sored by the Austrian Government within the &amp;quot;Mikroelek-
tronik Forderungsprogramm, Schwerpunkt S7&amp;quot;. See also:
H. Trost, E. Buchberger, W. Heinz, Ch. Hortnagl and J. Ma-
tia.sek. Datenbank-DIALOG - A German Language Interface
for Relational Databases. In Applied Artificial Intelligence,
1:181-203, 1987.
2 Email address: aif orsch@ai.univie . ac. at
</footnote>
<bodyText confidence="0.999836128205128">
wise, they will either face a continuously high rejection
rate or—more likely, since humans adapt much better
than computers—formulate their queries in an unneces-
sarily simple and inefficient way.
Habitability cannot be judged solely on syntactic cov-
erage. Queries must be correctly interpreted syntac-
tically, semantically and pragmatically. While syntac-
tic coverage depends solely on the parser, semantic and
pragmatic coverage must be considered with respect to
the contents of the database to which the NLI connects.
The grammar of Datenbank-DIALOG is completely
domain-independent, designed to make the accepted
sublanguage as consistent as possible. Recent advances
of linguistic theory were incorporated in its development,
thus also facilitating implementation and maintenance.
Two examples for this strategy are the treatment of de-
terminers and verb-second (V2).
Using results of Generalized Quantifiers Theory for
natural language quantifiers (e.g. conservativity) a for-
mal correspondence between GQ-formulas (representing
the logical form of a query) and SQL-staternents (for-
mulas over the relational calculus) was established and
implemented. This gives a sound theoretical basis for
sernantic interpretation and SQL generation. All exten-
sional natural language determiners can be handled—
matching the extensional nature of databases.
In German finite verbs occur in second position in
main clauses (V2) and in final position in subordinate
clauses. Ideas from GB-Theory are used for a uniform
treatment. V2 is considered to be the result of a move-
ment from an underlying final position in the verb cluster
to clause initial complementizer position. This move-
ment is implemented as a relation between the &amp;quot;moved&amp;quot;
finite verb and its trace. In the case of main clauses,
Vfin is &amp;quot;moved back&amp;quot; to the end of the verb cluster,
and now the sarne mechanism applies uniformly. Thus
both clause types are subject to the sarne syntactic and
semantic constraints (which thus need only be stated
once) and give rise to the sarne interpretation.
</bodyText>
<sectionHeader confidence="0.999035" genericHeader="method">
3 Comparisons
</sectionHeader>
<bodyText confidence="0.99938">
A central concern in querying databases are comparisons
between various kinds of objects. Comparisons involve
a relation between values associated with a dimension
and units of measure. Values may be given explicitly or
implicitly by derivation (thus including superlatives).
</bodyText>
<page confidence="0.989239">
241
</page>
<bodyText confidence="0.999803925233645">
Linguistic rneans for expressing comparison vary
widely. Usually, comparison is associated with grad-
able adjectives and adverbs in various syntactic con-
structions: hat em n hOheres Gehalt (Aux+A/NP); verdient
mehr (V +Adv); mit einem hoheren Gehalt (A/PP). The
interpretation of those expressions should be the sarne.
Datenbank-DIA LOG uses a cornpositional sernantics and
separates the lexical itern from the underlying semantic
relation, which rnay be shared by different words.
More problems arise when specifying the value for the
comparison: em n hOheres Gehalt als 20.000,-; em n Gehalt
von mehr als 20.000,-; mehr als 20.000,- Gehalt; verdi-
cut mehr als 20.000,-. The comparative and the value
may be adjacent or not, and show up as PPs, complex
determiners or adverbial phrases. All these constructions
map onto the same semantic representation, a relation, a
value along with a dimension and a unit—thus allowing
to compare values with different units—and a compared
object. This assures a uniform semantic treatment.
In verdient mehr als Dr. Haid the value is specified
only implicitly by referring to the salary of Dr. Haid.
Despite the different structure of the corresponding SQL
queries the user will hardly notice this fundamental dif-
ference. For a habitable system it is necessary to pro-
vide solutions to both types of comparisons. Datenbank-
DIA LOG recognizes the different interpretations by the
semantic type associated with the value of the phrase to
be compared. If the value has the correct dimension, it
may safely be inserted as an argument into the compar-
ison relation. Otherwise, Datenbank-DIA LOG constructs
subquery giving the value by using the dominating
relation and fitting the cornparison object into the &amp;quot;sub-
ject&amp;quot; slot of the attribute. The resulting structure is
processed analogously to a top-level query. As a conse-
quence, anaphora resolution may be applied enabling Da-
tenbank- DIA LOG to give a correct interpretation of Wer
verdient mehr als seini Vorgesetzter?
Domain predicates need not uniquely determine the
relation and attributes of a corresponding predicate in
the database. Datenbank-DIA LOG splits the interpreta-
tion of an utterance into two stages: An interpretation
in the domain model, i.e. a caseframe, which is then
mapped (using a translation table) to an interpretation
in the database model, i.e. a DB-caseframe.
This approach allows to interpret superficially simi-
lar queries as quite different SQL queries. Attributes
with the same meaning stored in different tables (nurse.
salaryvs. doctor-salary) can be treated as well as de-
rived attributes (salary computed from basic + variable
salary) in short, the user should not need to know
about the actual encoding of information. An interesting
instance of this principle is the interpretation of Wieviele
Patienten behandell Dr. Haid. Whereas in one database
model the number of patients is stored explicitly and
can be treated analogously to the salary above, other
database models contain this &amp;quot;attribute&amp;quot; only implicitly:
the number of patients has to be computed (counted) by
the SQL query. To obtain these quite different interpre-
tations, only a different mapping of the (contents of the)
argument-slot of the predicate Treatment in the transla-
tion step between domain and database level is required.
A special case (where implicit attributes roust be made
explicit) are queries involving the comparison of two sub-
queries. This cannot be expressed in a single SQL query.
A temporary table has to be created containing the rel-
evant count-attribute together with information on the
object bearing that attribute. The actual comparison
can then be made with the now explicit attribute.
Most problems with comparatives also occur with su-
perlatives and are dealt with in an analogous way.
One interesting phenomenon which has no direct par-
allel in comparative structures shows in Welcher Arzt,
der in der Ambulanz arbeitet, verdient am meisten? In
most cases Who has the highest salary among the doctors
working in the casualty department? is the most plausi-
ble interpretation and should be preferred. To produce
this reading, a kind of copying has to be performed: not
only must the dominating relation be copied but also the
restrictions on the subject slot (i.e., on the bearer of the
attribute) have to be inherited. In Datenbank-DIALOG
this copying works on the caseframe representation, and
thus is able to handle restrictions resulting from differ-
ent syntactic constructions, such as the lexicon (Ambu-
lanzarzt), APs (in der Ambulanz arbeitende Arzt), PPs
(Arzt aus der Ambulanz), NPs (Arzt der Ambulanz) and
relative clauses (Arzt, der in der Ambulanz arbeitet). All
these constructions end up as modifications in the case-
frame due to the compositional nature of our approach.
Thus a unified solution for inheritance of modifiers in
their various forms is achieved.
A correct comparison is only possible if compared val-
ues are of the same dimension and share a unit of
measure. Differences and incompatibilities may arise
in different places: frorn special formatting conventions
(e.g. 20000, 20.000,-, $20), when the user specifies a di-
mension and unit of measure verbatim (e.g. &amp;quot;10 Meter&amp;quot;),
from the database, where comparable columns may be
associated with different units of measure. Datenbank-
DIALOG solves this problem—by defining a normalized
form associating values with units and transformation
rules between measures of different units—at the scanner
level (patterns, e.g. date formats), at the parser level
(linguistic information to fill the slots in the normalized
value frame), at the interpretation level (procedures to
transform constant values from one unit to another), at
the database level (transformation functions of the query
language).
</bodyText>
<sectionHeader confidence="0.998392" genericHeader="method">
4 Summary
</sectionHeader>
<bodyText confidence="0.999862076923077">
Habitability is a most important feature of NLIs. Us-
ing comparison as example we have shown how the de-
sign of Datenbank-DI A L OG enhances habitability, in par-
ticular by: giving a uniform interpretation to semanti-
cally equivalent user queries of different syntactic and
morphological appearance; enabling users to enter data
in the form most convenient to them (formatting, unit
conversion); removing the need for users to know about
the database representations of the concepts they use
(domain concepts vs. database relations and attributes,
implicit functions, unit conversion); making ambiguities
explicit; and incorporating presuppositions (relation and
restriction copying).
</bodyText>
<page confidence="0.996044">
242
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.634685">
<title confidence="0.99968">Datenbank-DIALOG and the Relevance of Habitability</title>
<author confidence="0.999445">Harald Trost</author>
<affiliation confidence="0.998018">DFKI GmbH</affiliation>
<address confidence="0.964262">Stuhlsatzenhausweg :3 D-6600 Saarbriicken, Germany</address>
<author confidence="0.9842325">Wolfgang Heinz</author>
<author confidence="0.9842325">Johannes Matiasek Ernst Buchberger</author>
<affiliation confidence="0.839056">OFA!</affiliation>
<address confidence="0.966446">Schottengasse :3, A-1010 Wien, Austria</address>
<email confidence="0.832529">johnOai.univie.ac.at</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
</citationList>
</algorithm>
</algorithms>