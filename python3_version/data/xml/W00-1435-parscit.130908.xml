<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001967">
<title confidence="0.799736">
Demonstration of ILEX 3.0
</title>
<author confidence="0.79915675">
Michael O&apos;Donnellt(micko©dai.ed.ac.uk),
Alistair Knottt(alik@hermes.otago.ac.nz),
Jon Oberlandert (jon©cogsci.ed.ac.uk),
Chris Mellisht(chrism©dai.ed.ac.uk)
</author>
<affiliation confidence="0.990811">
t Division of Informatics, University of Edinburgh.
t Department of Computer Science, Otago University.
</affiliation>
<sectionHeader confidence="0.937974" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999964777777778">
We will demonstrate the ILEX system, a system
which dynamically generates descriptions of data-
base objects for the web, adapting the description to
the discourse context and user type. Among other
improvements in version 3, the system now gener-
ates from relational databases, and this demonstra-
tion will focus on this ability. We will also show how
incremental extensions to the domain semantics im-
prove the quality of the text produced.
</bodyText>
<sectionHeader confidence="0.995467" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999046916666667">
ILEX is a tool for dynamic browsing of database-
defined information: it allows a user to browse
through the information in a database using hyper-
text. ILEX generates descriptions of a database ob-
ject on the fly, taking into account the user&apos;s con-
text of browsing. For more information on ILEX,
see Knott et al. (1997) and Mellish et at (1998).
The demonstration will consist of generating a
series of texts, in each case adding in additional com-
ponents of the domain semantics. This short paper
should he read in conjunction with the full paper
elsewhere in this volume.
</bodyText>
<sectionHeader confidence="0.935416" genericHeader="method">
2 Generating from Bare Data
</sectionHeader>
<bodyText confidence="0.9838168">
We start initially with a relational database, as
defined by a set of tab-delimited database files, plus
some minimal semantics. As discussed in the paper,
we use assume a relational database to consist of two
types of files,
</bodyText>
<listItem confidence="0.905643272727273">
1. Entity Files: each of which provides data for
a particular entity type_ Each row (or record)
defines the attributes of a different entity. See
figure 1.
2. Link Files: where a particular attribute. may
have multiple fillers, we use link files to define
the entity-entity relations. See figure 2.
To generate from these files, the domain-editor
needs to provide t on additional resources:
1_ Data-type specification for each entity-file, a
- specification of what data-type the values in the
</listItem>
<figure confidence="0.96992825">
Entity Material
J-997 silver
J-997 enamel
J-997 gold
</figure>
<figureCaption confidence="0.999575">
Figure 2: A Sample from a Link file
</figureCaption>
<bodyText confidence="0.913116">
column are, e.g., string, entity-id, domain type,
etc.
</bodyText>
<listItem confidence="0.677147692307692">
2. Domain Taxonomy: detailing the taxonomic or-
ganisation of the various classes of the entities.
3. Mapping Domain taxonomy onto Upper Model:
ILEX uses an Upper Model (a domain-
independent semantic taxonomy, see Bateman
(1990)), which supports the grammatical ex-
pression of entities, e.g., selection of pronoun,
differentiation between mass and count entities,
between things and qualities, etc. We require
that the basic types in the domain taxonomy
are mapped onto the upper model, to allow the
entities to be gramtnaticalised and lexicalised
appropriately.
</listItem>
<bodyText confidence="0.9726056875">
With just this semantics, we can generate texts,
although impoverished texts, such as:
The class of J-997 is necklace. It&apos;s de-
signer is Jessie M. King. It&apos;s date is 1905.
Several tricks are needed to generate without a
specified domain semantics:
Use of standard clause templates: lacking- any
knowledge of how different attributes are to be
expressed, the system .cart only generate each
attribute using a standard template structures.,
such as the X of Y is Z or It&apos;s X is Z. The
attribute names, e.g., Designer, Style, etc. can
be assumed to work as the lexical head of the
Subject. This ploy sometimes goes wrong, hut
in general works. (this approach borrowed from
Dale et al. (1998)).
</bodyText>
<page confidence="0.980629">
257
</page>
<table confidence="0.7178008">
ID Class Designer Date Style Place Sponsor
J-997 brooch King01 1905 Art-Deco London Liberty01
J998-- =necklace King01 1906 Art-Deco London
J-999 necklace Chane101 - 1910 Art-Noveau Paris
etc.
</table>
<figureCaption confidence="0.998797">
Figure 1: A Sample from an Entity file
</figureCaption>
<bodyText confidence="0.998070375">
e Referring to Entities: there are a number of
strategies open for referring to entities. If the
Name attribute is supplied: (aidefined- attribute
within the ILEX system), then the system can
use this for referring. Lacking a name, it is pos-
sible for the system to form nominal references
using the Class attribute of the entity (all en-
tities in ILEX databases are required to have
this attribute provided). We could thus gener-
ate indefinite references such as a brooch as first
mentions, and on subsequent mentions, gener-
ate forms such as the brooch or the brooch whose
designer is Jessie M. King. Without specifica-
tion of which entities should be considered part
of the general knowledge of the reader, we must
assume all entities are initially unknown.
</bodyText>
<listItem confidence="0.590022111111111">
o Fact Annotations: ILEX was designed to work
with various extra information known about
facts, such as the assumed level of interest to the
current reader model, the importance of the fact
to the system&apos;s educational agenda, and the as-
sumed assimilation of the information (how well
does the system believe the reader to already
understand it). See the main paper for more
details.
</listItem>
<bodyText confidence="0.999906">
Lacking this information, the system assumes
an average value for interest and importance,
and a 0 value for assimilation (totally un-
known).
With only default values, the system cannot
customise the text to the particular user. It may
provide information already well known by the
user, and thus risking boring them. Also, there
can be no selection of information to ensure that
the more interesting and important information
is provided on earlier pages (the reader may not
bother to look at later pages).
Other information (defeasible rules), which allows
us to organise the material into complex rhetorical
structure, is also missing.
So, these tricks allow us to generate simple texts,
consisting of a list of template-formatted clauses.
</bodyText>
<sectionHeader confidence="0.984926" genericHeader="method">
3 Adding Expression information
</sectionHeader>
<bodyText confidence="0.994197">
In the next step. we will add in information about
how the various at tributes should be expressed_ This
includes three main resources:
</bodyText>
<listItem confidence="0.89690175">
1. Syntactic expression of attributes: for each at-
tribute, we provide a specification of how the
attribute should,be-expressed. syntactically.
2.
</listItem>
<bodyText confidence="0.972216894736842">
bexicalisation of domain types: by providing
a lexicon, which maps domain types to lexical
items, we avoid problems of using the domain
type itself as the spelling. The lexical inform-
ation allows correct generation of inflectional
forms (e.g., of the plural for nouns, comparative
or superlative forms for adjectives).
3. Restrictive modifiers for referring expressions:
In choosing restrictive modifiers for forming re-
ferring expressions, some facts work better than
others. For instance, the brooch designed by
King is more likely to refer adequately than the
brooch which was 3 inches long. ILEX allows
the user to state the preferential order for choos-
ing restrictive modifiers.
The addition of these resources will result in im-
proved expression within the clauses, but not af-
fect the text structure itself, which are still a list
of clauses in random order.
</bodyText>
<sectionHeader confidence="0.911568" genericHeader="method">
4 Adding User Annotations
</sectionHeader>
<bodyText confidence="0.999256625">
In the next step, we add in the user model, which
provides, for each attribute type, predicted user in-
terest, importance for the system, and expected user
assimilation.
Using these values, ILEX can start to organise
the text, placing important/interesting information
On earlier pages, and avoiding information already
known by the user.
</bodyText>
<sectionHeader confidence="0.953669" genericHeader="method">
5 Adding Defeasible Rules, Stories
</sectionHeader>
<bodyText confidence="0.998944">
As a final step, we add in various resources which
improve the texture of the text
</bodyText>
<listItem confidence="0.926097375">
o Defensible Rules: ILEX allows the assertion
of generalisations like most Art Deco jewels
use enamel: These rules allow the genera-
tion of complex rhetorical structures which in-
clude Generalisation, Exemplification and Con-
cession. The use of these relations improves the
quality of the text generated.
9 Stories: much of the information obtainable
</listItem>
<bodyText confidence="0.733659">
about the domain is in natural language. Of-
ten, the information is specific to a particular
</bodyText>
<page confidence="0.990616">
258
</page>
<bodyText confidence="0.999752666666667">
entity, and as such, it would be a waste of time
to reduce the information into ILEX&apos;s Pred-Arg
knowledge structure, just to regenerate the text.
Because of this, ILEX allows the association
of canned text with a database entity (e.g., J-
999), or type of entity (e.g., jewels designed for
Liberty). The text can then be included in the
text when the entity or type of entity is men-
tioned.
The intermixing of generated and canned text
improves the quality, of generated texts by
providing more variety of structures, and al-
lowing anecdotes, which would be difficult to
model in terms of the knowledge representation
system.
</bodyText>
<sectionHeader confidence="0.998758" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999574142857143">
By showing incremental addition of domain spe-
cification within the ILEX system, we have demon-
strated that it is a system which can function with
varying degrees of information. This allows domain
developers to rapidly prototype a working system,
after which they can concentrate on improving the
quality of text in the directions they favour.
</bodyText>
<sectionHeader confidence="0.99418" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.93829447826087">
John Bateman. 1990. Upper modeling: organiz-
ing knowledge for natural language processing.
In Proceedings of the Fifth International Work-
shop on Natural Language Generation, Pitts-
burgh, June,
Robert Dale, Stephen J Green, Maria Milosavljevic,
Cecile Paris, Cornelia Verspoor, and Sandra Wil-
liams. 1998. The realities of generating natural
language from databases. In Proceedings of the
.11th Australian Joint Conference on Artificial In-
telligence, Brisbane, Australia, 13-17 July.
Alistair Knott, Michael O&apos;Donnell, Jon Oberlander,
and Chris Mellish. 1997. Defeasible rules in con-
tent selection and text structuring. In Proceedings
of the 6th European Workshop on Natural Lan-
guage Generation, Gerhard-Mercator t_Tniversity,
Duisburg, Germany. March 21 - 26.
Chris Mellish, Mick O&apos;Donnell, Jon Oberlander. and
Alistair Knott. 1998. An architecture for oppor-
tunistic text generation. In Proceedings of the
Ninth International Workshop on Natural Lan-
guage Generation, Niagara-on-the-Lake, Ontario,
Canada.
</reference>
<page confidence="0.998529">
259
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.403490">
<title confidence="0.71215">Demonstration of ILEX 3.0 Michael Alistair</title>
<author confidence="0.971791">Jon Oberlandert Chris Mellisht</author>
<affiliation confidence="0.97703">t Division of Informatics, University of Edinburgh. t Department of Computer Science, Otago University.</affiliation>
<abstract confidence="0.9984698">We will demonstrate the ILEX system, a system which dynamically generates descriptions of database objects for the web, adapting the description to the discourse context and user type. Among other improvements in version 3, the system now generfrom databases, this demonstration will focus on this ability. We will also show how incremental extensions to the domain semantics improve the quality of the text produced.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>John Bateman</author>
</authors>
<title>Upper modeling: organizing knowledge for natural language processing.</title>
<date>1990</date>
<booktitle>In Proceedings of the Fifth International Workshop on Natural Language Generation,</booktitle>
<location>Pittsburgh,</location>
<contexts>
<context position="2436" citStr="Bateman (1990)" startWordPosition="380" endWordPosition="381">define the entity-entity relations. See figure 2. To generate from these files, the domain-editor needs to provide t on additional resources: 1_ Data-type specification for each entity-file, a - specification of what data-type the values in the Entity Material J-997 silver J-997 enamel J-997 gold Figure 2: A Sample from a Link file column are, e.g., string, entity-id, domain type, etc. 2. Domain Taxonomy: detailing the taxonomic organisation of the various classes of the entities. 3. Mapping Domain taxonomy onto Upper Model: ILEX uses an Upper Model (a domainindependent semantic taxonomy, see Bateman (1990)), which supports the grammatical expression of entities, e.g., selection of pronoun, differentiation between mass and count entities, between things and qualities, etc. We require that the basic types in the domain taxonomy are mapped onto the upper model, to allow the entities to be gramtnaticalised and lexicalised appropriately. With just this semantics, we can generate texts, although impoverished texts, such as: The class of J-997 is necklace. It&apos;s designer is Jessie M. King. It&apos;s date is 1905. Several tricks are needed to generate without a specified domain semantics: Use of standard cla</context>
</contexts>
<marker>Bateman, 1990</marker>
<rawString>John Bateman. 1990. Upper modeling: organizing knowledge for natural language processing. In Proceedings of the Fifth International Workshop on Natural Language Generation, Pittsburgh, June,</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Dale</author>
<author>Stephen J Green</author>
<author>Maria Milosavljevic</author>
<author>Cecile Paris</author>
<author>Cornelia Verspoor</author>
<author>Sandra Williams</author>
</authors>
<title>The realities of generating natural language from databases.</title>
<date>1998</date>
<booktitle>In Proceedings of the .11th Australian Joint Conference on Artificial Intelligence,</booktitle>
<location>Brisbane, Australia,</location>
<contexts>
<context position="3457" citStr="Dale et al. (1998)" startWordPosition="545" endWordPosition="548">d texts, such as: The class of J-997 is necklace. It&apos;s designer is Jessie M. King. It&apos;s date is 1905. Several tricks are needed to generate without a specified domain semantics: Use of standard clause templates: lacking- any knowledge of how different attributes are to be expressed, the system .cart only generate each attribute using a standard template structures., such as the X of Y is Z or It&apos;s X is Z. The attribute names, e.g., Designer, Style, etc. can be assumed to work as the lexical head of the Subject. This ploy sometimes goes wrong, hut in general works. (this approach borrowed from Dale et al. (1998)). 257 ID Class Designer Date Style Place Sponsor J-997 brooch King01 1905 Art-Deco London Liberty01 J998-- =necklace King01 1906 Art-Deco London J-999 necklace Chane101 - 1910 Art-Noveau Paris etc. Figure 1: A Sample from an Entity file e Referring to Entities: there are a number of strategies open for referring to entities. If the Name attribute is supplied: (aidefined- attribute within the ILEX system), then the system can use this for referring. Lacking a name, it is possible for the system to form nominal references using the Class attribute of the entity (all entities in ILEX databases a</context>
</contexts>
<marker>Dale, Green, Milosavljevic, Paris, Verspoor, Williams, 1998</marker>
<rawString>Robert Dale, Stephen J Green, Maria Milosavljevic, Cecile Paris, Cornelia Verspoor, and Sandra Williams. 1998. The realities of generating natural language from databases. In Proceedings of the .11th Australian Joint Conference on Artificial Intelligence, Brisbane, Australia, 13-17 July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alistair Knott</author>
<author>Michael O&apos;Donnell</author>
<author>Jon Oberlander</author>
<author>Chris Mellish</author>
</authors>
<title>Defeasible rules in content selection and text structuring.</title>
<date>1997</date>
<booktitle>In Proceedings of the 6th European Workshop on Natural Language Generation, Gerhard-Mercator t_Tniversity,</booktitle>
<pages>26</pages>
<location>Duisburg, Germany.</location>
<contexts>
<context position="1065" citStr="Knott et al. (1997)" startWordPosition="153" endWordPosition="156">e discourse context and user type. Among other improvements in version 3, the system now generates from relational databases, and this demonstration will focus on this ability. We will also show how incremental extensions to the domain semantics improve the quality of the text produced. 1 Introduction ILEX is a tool for dynamic browsing of databasedefined information: it allows a user to browse through the information in a database using hypertext. ILEX generates descriptions of a database object on the fly, taking into account the user&apos;s context of browsing. For more information on ILEX, see Knott et al. (1997) and Mellish et at (1998). The demonstration will consist of generating a series of texts, in each case adding in additional components of the domain semantics. This short paper should he read in conjunction with the full paper elsewhere in this volume. 2 Generating from Bare Data We start initially with a relational database, as defined by a set of tab-delimited database files, plus some minimal semantics. As discussed in the paper, we use assume a relational database to consist of two types of files, 1. Entity Files: each of which provides data for a particular entity type_ Each row (or reco</context>
</contexts>
<marker>Knott, O&apos;Donnell, Oberlander, Mellish, 1997</marker>
<rawString>Alistair Knott, Michael O&apos;Donnell, Jon Oberlander, and Chris Mellish. 1997. Defeasible rules in content selection and text structuring. In Proceedings of the 6th European Workshop on Natural Language Generation, Gerhard-Mercator t_Tniversity, Duisburg, Germany. March 21 - 26.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alistair Knott</author>
</authors>
<title>An architecture for opportunistic text generation.</title>
<date>1998</date>
<booktitle>In Proceedings of the Ninth International Workshop on Natural Language Generation,</booktitle>
<location>Niagara-on-the-Lake, Ontario, Canada.</location>
<marker>Knott, 1998</marker>
<rawString>Chris Mellish, Mick O&apos;Donnell, Jon Oberlander. and Alistair Knott. 1998. An architecture for opportunistic text generation. In Proceedings of the Ninth International Workshop on Natural Language Generation, Niagara-on-the-Lake, Ontario, Canada.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>