<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.045791">
<title confidence="0.997717">
An Algorithm for High-Level Organization
of Multi-Paragraph Texts
</title>
<author confidence="0.838092">
Robert Granville
</author>
<sectionHeader confidence="0.691748" genericHeader="method">
rgranvilOBBN .COM
</sectionHeader>
<bodyText confidence="0.999844580645161">
Our experience with MACH-III [Kurland et al 1992] showed us that there is more to multiparagraph
text than stringing together isolated well-formed paragraphs. The underlying structure of the entire
text, depicting interparagraph relationships and emphases, must also be determined for successful
generation. Fortunately, RST [Mann-Thompson 1987] is capable of representing interparagraph
structure as well as intraparagraph structure. However, RST does not specify how to build large
structures representing multiparagraph text. This paper presents an algorithm to construct such
multiparagraph structures representing a critique of a student&apos;s performance in troubleshooting the
HAWK radar, as determined by MACH-III. This critique is based on the functional hierarchy tree
(FH tree), which is the heart of the expert system component of MACH-III [Kurland et al 1989].
Each student action is judged based on the structure of the FH tree, and where the student is
currently located in that tree. The generated critique thus needs to describe each action and how
that action helps or hinders proper navigation through the FH tree.
Functional hierarchy is a new paradigm for organizing expert system knowledge bases, based on the
procedural abstraction principles of Liskov and Gutag [Liskov-Gutag 1986]. Functional hierarchy
differs greatly from production rules (the customary basis for an expert system) in that functional
hierarchy rules define the actions a system can take, rather than the conditions under which actions
may take place. The concept of &amp;quot;action&amp;quot; is expanded to include all actions the system takes,
including control decisions, rather than just changes to the database, thereby eliminating the need
for a separate control structure. These rules are arranged in a hierarchy, where the action of a rule
is defined as a combination of other actions.
Our algorithm does not need an elaborate component to build a plan resulting in an RST for two
reasons. The first is that the desired output text is a non-interactive monologue of written text,
rather than text that models interactive dialogue, as in the text of Moore&apos;s system [Moore 1989].
Therefore, we don&apos;t need information for revising text in reaction to a listener&apos;s misunderstanding.
The second is that the database from which we are generating consists of the MACH-III functional
hierarchy trees. These FH trees are structured purposely to explicitly reflect the very organization
we need to explain. Because of these FH trees, we don&apos;t have to build plans to determine text
structure, and the job of organizing the text, that is, building RST structures is greatly simplified.
As stated above, the purpose of our generated text is describe student actions in the course of a
radar troubleshooting session, and how these actions relate to the organization in the FH trees. In
themselves, these actions are completely independent. The way RST organizes events that have no
</bodyText>
<page confidence="0.995406">
19
</page>
<bodyText confidence="0.999833302325582">
relationship between them other than the order in which they occurred is with the SEQUENCE
relationship.
This leaves the problem of the higher organization of the text, that is, where to break paragraphs in
the RST. It was argued in [Granville 1990] that the structural organization of a text is as important.
to the message to be conveyed as its factual content. Therefore, any artificial metric for paragraphs,
such as limiting them to a specific number of sentences, must be unsatisfactory. However, the
problem is not so daunting when we consider the purpose of a paragraph, which is to describe
one idea or topic. The obvious topic category for our text consists of events in the course of
troubleshooting that require explanation. The two events in the MACII-III domain that require
explanation are mistakes committed by the student, which are mistakes in navigating through the
FIT trees, and milestones telling the student when branches in the EH trees are entered or completed.
The mistake or milestone being explained is obviously the topic of the explanation, and therefore
deserves its own paragraph. Mistakes and milestones that have already been explained don&apos;t require
full explanations again, and therefore don&apos;t merit paragraph treatment.
This does not completely solve the problem, however. Depending on the FH tree and the student
actions, we may have a set of actions requiring no detailed explanation but is still too large to describe
in a single paragraph. This problem can be solved if we remember that the ultimate goal of our text
is to explain how actions should reflect the Ell tree organization of the troubleshooting knowledge.
By causing paragraph breaks when new Fll tree branches are entered, our text. explicitly reflects
the Fil tree organization. Another problem is that we may want to avoid a paragraph break after
a. detailed explanation, if the next text item is closely related, such as a single student action that
is an error needing an explanation which also happens to start a new Fll branch. Therefore, if two
consecutive items are closely related, such as due to arising from the same action, or a repetition
of an action, they will appear in the same paragraph, even though the first item would cause a
paragraph break under normal circumstances.
A brief example will help make these ideas concrete. Assume a MACH-III student is presented
with an LO fault, indicating that the local oscillator (the LO) is either malfunctioning or not being
monitored correctly. Our student performs four actions, each with a mistake. He first tests the W2
cable, a component of the HAWK radar that can&apos;t cause an LO fault even if the cable itself is faulty.
In MACH-III, this is known as an OUT OF TREE mistake, because since the W2 can&apos;t cause an
LO fault, it doesn&apos;t appear in the subtree of the functional hierarchy that deals with LO faults.
Our student next replaces the All card, a component that could cause the fault. however, he fails
to follow this action with a test. of the system (known as a 13ITE test) to see if the All was in fact
the cause of the problem. MACH-Ill calls this an EXPECTED BITE TEST mistake.
The student&apos;s third action is to test the W8 cable. Like the W2, the W8 cannot possibly cause an
LO fault, so this is again an OUT OF TREE mistake.
Finally, the student tests the P12J3 plug. This component can cause an LO fault, so it isn&apos;t an
OUT OF TREE problem. However, testing the All card is part. of determining whether the local
oscillator is being monitored correctly, while testing the PIM is part of determining whether the
local oscillator itself is malfunctioning. As stated above, one of the goals of MACH-III is to teach
students the organization exhibited in the functional hierarchy tree. Therefore, jumping around
from topic to topic, as our student is doing here, is flagged as a SKIPPING fault.
When the first action is encountered, the OUT OF TREE mistake hasn&apos;t been explained yet, so the
</bodyText>
<page confidence="0.986653">
20
</page>
<bodyText confidence="0.999954125">
action of testing the W2 and the OUT OF TREE problem warrant their own paragraph detailing
why OUT OF TREE actions are mistakes. Similarly, replacing the All card requires a separate
paragraph to explain the EXPECTED BITE TEST problem. The third action, testing the W8,
does not force a paragraph break on its own, since it exhibits the OUT OF TREE mistake, which
has already been explained. Instead, it merely mentions the problem, and the paragraph continues.
The final action of testing the P12J3 does exhibit a new problem, though, namely SKIPPING. It is
added to the third paragraph in a sequence relationship, and this paragraph is closed off because of
the required explanation. The resulting RST looks like the following:
</bodyText>
<sectionHeader confidence="0.964530666666667" genericHeader="method">
TEXT
PARAGRAPH I SEQUENCE
EXPLAIN EXPLAIN
</sectionHeader>
<figure confidence="0.531971333333333">
OUT-OF-TREE EXPECTED-BITE-TEST
W2 All
I SEQUENCE I
MENTION EXPLAIN
OUT-OF-TREE SKIPPING
W8 Pl2J3
</figure>
<sectionHeader confidence="0.711449" genericHeader="method">
References:
</sectionHeader>
<reference confidence="0.944834714285714">
[Granville 1990] Granville, Robert A., &amp;quot;The Role of Underlying Structure in Text Generation,&amp;quot; in
Proceedings of the Fifth International Workshop on Natural Language Generation, 1990
[Kurland et al 1989] Kurland, Laura C., Robert Granville, and Dawn MacLaughlin, &amp;quot;HAWK MACH-
III Explanations of the Receiver Troubleshooting Tree,&amp;quot; Technical Report, BBN Systems and Tech-
nologies, Cambridge, Massachusetts, 1989
[Kurland et al 1992] Kurla.nd, Laura C., Robert Alan Granville, and Dawn M. MacLaughlin, &amp;quot;De-
sign, Development and Implementation of an Intelligent Tutoring System (ITS) for Training Radar
Mechanics to Troubleshoot,&amp;quot; in &amp;quot;Intelligent Instruction by Computer,&amp;quot; edited by Marshall J. Farr
and Joseph Psotka, Taylor &amp; Francis, Washington, DC, 1992
[Liskov-Guttag 1986] Liskov, Barbara, and John Guttag, Abstraction and Specification in Program
Development, MIT Press, Cambridge, Massachusetts, 1986
[Mann-Thompson 1987] Mann, William C., and Sandra A. Thompson, &amp;quot;Rhetorical Structure Theory:
A Theory of Text Organization,&amp;quot; ISI/RS-87-190, Information Sciences Institute, Marina del Rey,
California, 1987
</reference>
<page confidence="0.988726">
21
</page>
<reference confidence="0.6913435">
[Moore 1989] Moore, Johanna Doris, &amp;quot;A Reactive Approach to Explanation in Expert and Advice-
Giving Systems,&amp;quot; Ph.D. thesis, University of California, Los Angeles, 1989
</reference>
<page confidence="0.998432">
22
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.003589">
<title confidence="0.9968195">An Algorithm for High-Level of Multi-Paragraph Texts</title>
<author confidence="0.834322">Robert</author>
<abstract confidence="0.999284222222222">Our experience with MACH-III [Kurland et al 1992] showed us that there is more to multiparagraph text than stringing together isolated well-formed paragraphs. The underlying structure of the entire text, depicting interparagraph relationships and emphases, must also be determined for successful generation. Fortunately, RST [Mann-Thompson 1987] is capable of representing interparagraph structure as well as intraparagraph structure. However, RST does not specify how to build large structures representing multiparagraph text. This paper presents an algorithm to construct such multiparagraph structures representing a critique of a student&apos;s performance in troubleshooting the HAWK radar, as determined by MACH-III. This critique is based on the functional hierarchy tree (FH tree), which is the heart of the expert system component of MACH-III [Kurland et al 1989]. Each student action is judged based on the structure of the FH tree, and where the student is currently located in that tree. The generated critique thus needs to describe each action and how that action helps or hinders proper navigation through the FH tree. Functional hierarchy is a new paradigm for organizing expert system knowledge bases, based on the procedural abstraction principles of Liskov and Gutag [Liskov-Gutag 1986]. Functional hierarchy differs greatly from production rules (the customary basis for an expert system) in that functional hierarchy rules define the actions a system can take, rather than the conditions under which actions may take place. The concept of &amp;quot;action&amp;quot; is expanded to include all actions the system takes, including control decisions, rather than just changes to the database, thereby eliminating the need for a separate control structure. These rules are arranged in a hierarchy, where the action of a rule is defined as a combination of other actions. Our algorithm does not need an elaborate component to build a plan resulting in an RST for two reasons. The first is that the desired output text is a non-interactive monologue of written text, rather than text that models interactive dialogue, as in the text of Moore&apos;s system [Moore 1989]. Therefore, we don&apos;t need information for revising text in reaction to a listener&apos;s misunderstanding. The second is that the database from which we are generating consists of the MACH-III functional hierarchy trees. These FH trees are structured purposely to explicitly reflect the very organization we need to explain. Because of these FH trees, we don&apos;t have to build plans to determine text structure, and the job of organizing the text, that is, building RST structures is greatly simplified. As stated above, the purpose of our generated text is describe student actions in the course of a radar troubleshooting session, and how these actions relate to the organization in the FH trees. In themselves, these actions are completely independent. The way RST organizes events that have no 19 relationship between them other than the order in which they occurred is with the SEQUENCE relationship. This leaves the problem of the higher organization of the text, that is, where to break paragraphs in the RST. It was argued in [Granville 1990] that the structural organization of a text is as important. to the message to be conveyed as its factual content. Therefore, any artificial metric for paragraphs, such as limiting them to a specific number of sentences, must be unsatisfactory. However, the problem is not so daunting when we consider the purpose of a paragraph, which is to describe one idea or topic. The obvious topic category for our text consists of events in the course of troubleshooting that require explanation. The two events in the MACII-III domain that require explanation are mistakes committed by the student, which are mistakes in navigating through the FIT trees, and milestones telling the student when branches in the EH trees are entered or completed. The mistake or milestone being explained is obviously the topic of the explanation, and therefore deserves its own paragraph. Mistakes and milestones that have already been explained don&apos;t require full explanations again, and therefore don&apos;t merit paragraph treatment. This does not completely solve the problem, however. Depending on the FH tree and the student actions, we may have a set of actions requiring no detailed explanation but is still too large to describe in a single paragraph. This problem can be solved if we remember that the ultimate goal of our text is to explain how actions should reflect the Ell tree organization of the troubleshooting knowledge. By causing paragraph breaks when new Fll tree branches are entered, our text. explicitly reflects the Fil tree organization. Another problem is that we may want to avoid a paragraph break after a. detailed explanation, if the next text item is closely related, such as a single student action that is an error needing an explanation which also happens to start a new Fll branch. Therefore, if two consecutive items are closely related, such as due to arising from the same action, or a repetition of an action, they will appear in the same paragraph, even though the first item would cause a paragraph break under normal circumstances. A brief example will help make these ideas concrete. Assume a MACH-III student is presented with an LO fault, indicating that the local oscillator (the LO) is either malfunctioning or not being monitored correctly. Our student performs four actions, each with a mistake. He first tests the W2 cable, a component of the HAWK radar that can&apos;t cause an LO fault even if the cable itself is faulty. In MACH-III, this is known as an OUT OF TREE mistake, because since the W2 can&apos;t cause an LO fault, it doesn&apos;t appear in the subtree of the functional hierarchy that deals with LO faults. Our student next replaces the All card, a component that could cause the fault. however, he fails to follow this action with a test. of the system (known as a 13ITE test) to see if the All was in fact cause of the problem. this an EXPECTED BITE TEST mistake. The student&apos;s third action is to test the W8 cable. Like the W2, the W8 cannot possibly cause an LO fault, so this is again an OUT OF TREE mistake. Finally, the student tests the P12J3 plug. This component can cause an LO fault, so it isn&apos;t an OUT OF TREE problem. However, testing the All card is part. of determining whether the local oscillator is being monitored correctly, while testing the PIM is part of determining whether the local oscillator itself is malfunctioning. As stated above, one of the goals of MACH-III is to teach students the organization exhibited in the functional hierarchy tree. Therefore, jumping around from topic to topic, as our student is doing here, is flagged as a SKIPPING fault. When the first action is encountered, the OUT OF TREE mistake hasn&apos;t been explained yet, so the 20 action of testing the W2 and the OUT OF TREE problem warrant their own paragraph detailing why OUT OF TREE actions are mistakes. Similarly, replacing the All card requires a separate paragraph to explain the EXPECTED BITE TEST problem. The third action, testing the W8, does not force a paragraph break on its own, since it exhibits the OUT OF TREE mistake, which has already been explained. Instead, it merely mentions the problem, and the paragraph continues.</abstract>
<note confidence="0.545464">The final action of testing the P12J3 does exhibit a new problem, though, namely SKIPPING. It is added to the third paragraph in a sequence relationship, and this paragraph is closed off because of</note>
<title confidence="0.375341714285714">the required explanation. The resulting RST looks like the following: TEXT PARAGRAPH I SEQUENCE EXPLAIN EXPLAIN OUT-OF-TREE EXPECTED-BITE-TEST W2 All SEQUENCE</title>
<author confidence="0.415099">MENTION EXPLAIN</author>
<affiliation confidence="0.67647">OUT-OF-TREE SKIPPING</affiliation>
<address confidence="0.500928">W8 Pl2J3</address>
<note confidence="0.924699105263158">References: [Granville 1990] Granville, Robert A., &amp;quot;The Role of Underlying Structure in Text Generation,&amp;quot; in Proceedings of the Fifth International Workshop on Natural Language Generation, 1990 et al 1989] Kurland, Laura C., and Dawn MacLaughlin, &amp;quot;HAWK MACH- III Explanations of the Receiver Troubleshooting Tree,&amp;quot; Technical Report, BBN Systems and Technologies, Cambridge, Massachusetts, 1989 [Kurland et al 1992] Kurla.nd, Laura C., Robert Alan Granville, and Dawn M. MacLaughlin, &amp;quot;Design, Development and Implementation of an Intelligent Tutoring System (ITS) for Training Radar Mechanics to Troubleshoot,&amp;quot; in &amp;quot;Intelligent Instruction by Computer,&amp;quot; edited by Marshall J. Farr and Joseph Psotka, Taylor &amp; Francis, Washington, DC, 1992 [Liskov-Guttag 1986] Liskov, Barbara, and John Guttag, Abstraction and Specification in Program Development, MIT Press, Cambridge, Massachusetts, 1986 [Mann-Thompson 1987] Mann, William C., and Sandra A. Thompson, &amp;quot;Rhetorical Structure Theory: A Theory of Text Organization,&amp;quot; ISI/RS-87-190, Information Sciences Institute, Marina del Rey, California, 1987 21 [Moore 1989] Moore, Johanna Doris, &amp;quot;A Reactive Approach to Explanation in Expert and Advice- Giving Systems,&amp;quot; Ph.D. thesis, University of California, Los Angeles, 1989 22</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Robert A Granville</author>
</authors>
<title>The Role of Underlying Structure in Text Generation,&amp;quot;</title>
<date>1990</date>
<booktitle>in Proceedings of the Fifth International Workshop on Natural Language Generation,</booktitle>
<marker>[Granville 1990]</marker>
<rawString>Granville, Robert A., &amp;quot;The Role of Underlying Structure in Text Generation,&amp;quot; in Proceedings of the Fifth International Workshop on Natural Language Generation, 1990</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura C Kurland</author>
<author>Robert Granville</author>
<author>Dawn MacLaughlin</author>
</authors>
<title>HAWK MACHIII Explanations of the Receiver Troubleshooting Tree,&amp;quot;</title>
<date>1989</date>
<booktitle>BBN Systems and Technologies,</booktitle>
<tech>Technical Report,</tech>
<location>Cambridge, Massachusetts,</location>
<marker>[Kurland et al 1989]</marker>
<rawString>Kurland, Laura C., Robert Granville, and Dawn MacLaughlin, &amp;quot;HAWK MACHIII Explanations of the Receiver Troubleshooting Tree,&amp;quot; Technical Report, BBN Systems and Technologies, Cambridge, Massachusetts, 1989</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura C Kurla nd</author>
<author>Robert Alan Granville</author>
<author>Dawn M MacLaughlin</author>
</authors>
<title>Design, Development and Implementation of an Intelligent Tutoring System (ITS) for Training Radar Mechanics to Troubleshoot,&amp;quot; in &amp;quot;Intelligent Instruction by Computer,&amp;quot; edited by</title>
<date>1992</date>
<location>Washington, DC,</location>
<marker>[Kurland et al 1992]</marker>
<rawString>Kurla.nd, Laura C., Robert Alan Granville, and Dawn M. MacLaughlin, &amp;quot;Design, Development and Implementation of an Intelligent Tutoring System (ITS) for Training Radar Mechanics to Troubleshoot,&amp;quot; in &amp;quot;Intelligent Instruction by Computer,&amp;quot; edited by Marshall J. Farr and Joseph Psotka, Taylor &amp; Francis, Washington, DC, 1992</rawString>
</citation>
<citation valid="true">
<authors>
<author>Barbara Liskov</author>
<author>John Guttag</author>
</authors>
<title>Abstraction and Specification in Program Development,</title>
<date>1986</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, Massachusetts,</location>
<marker>[Liskov-Guttag 1986]</marker>
<rawString>Liskov, Barbara, and John Guttag, Abstraction and Specification in Program Development, MIT Press, Cambridge, Massachusetts, 1986</rawString>
</citation>
<citation valid="true">
<authors>
<author>William C Mann</author>
<author>Sandra A Thompson</author>
</authors>
<title>Rhetorical Structure Theory: A Theory of Text Organization,&amp;quot;</title>
<date>1987</date>
<tech>ISI/RS-87-190,</tech>
<institution>Information Sciences Institute, Marina del Rey,</institution>
<location>California,</location>
<marker>[Mann-Thompson 1987]</marker>
<rawString>Mann, William C., and Sandra A. Thompson, &amp;quot;Rhetorical Structure Theory: A Theory of Text Organization,&amp;quot; ISI/RS-87-190, Information Sciences Institute, Marina del Rey, California, 1987</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johanna Doris Moore</author>
</authors>
<title>A Reactive Approach to Explanation in Expert and AdviceGiving Systems,&amp;quot;</title>
<date>1989</date>
<tech>Ph.D. thesis,</tech>
<institution>University of California,</institution>
<location>Los Angeles,</location>
<marker>[Moore 1989]</marker>
<rawString>Moore, Johanna Doris, &amp;quot;A Reactive Approach to Explanation in Expert and AdviceGiving Systems,&amp;quot; Ph.D. thesis, University of California, Los Angeles, 1989</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>