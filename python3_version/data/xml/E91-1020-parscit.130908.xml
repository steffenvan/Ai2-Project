<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001313">
<sectionHeader confidence="0.689142" genericHeader="abstract">
STRUCTURE-DRIVEN GENERATION
FROM SEPARATE SEMANTIC REPRESENTATIONS
</sectionHeader>
<address confidence="0.261010666666667">
Stephan Busetnann
Deutsches Forschungszentrum fiir Kiinstliche Intelligenz (DFKI) GmbH
Stuhlsatzenhausweg 3, D-6600 Saarbriicken II
</address>
<email confidence="0.676855">
uttcp: busemann©dfki.uni-sb.de
</email>
<sectionHeader confidence="0.968211" genericHeader="keywords">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999662272727273">
A new approach to structure-driven generation
is presented that is based on a separate seman-
tics as input structure. For the first time, a GPSG-
based formalism is complemented with a system of
pattern-action rules that relate the parts of a se-
mantics to appropriate syntactic rules. This way a
front. end generator can be adapted to some ap-
plication system (such as a machine translation
system) more easily than would be possible with
many previous generators based on modern gram-
mar formalisms.&apos;
</bodyText>
<sectionHeader confidence="0.997472" genericHeader="introduction">
INTRODUCTION
</sectionHeader>
<bodyText confidence="0.99243875">
In the field of unification-based computational
linguistics, current research on tactical natural lan-
guage (NL) generation concentrates on the follo-
wing problem:
</bodyText>
<listItem confidence="0.5233072">
• Given a semantic representation (which is of-
ten called logical form (LF)) arid a grammar
that includes a lexicon, what are the surface
strings corresponding to the semantic repre-
sentation?
</listItem>
<bodyText confidence="0.996763725490196">
A variety of approaches to solving this problem in
an efficient way has been put forward on the ba-
sis of unification-based grammar formalisms with a
context-free backbone and complex categories (for
some discussion see e.g. [Shieber et al. 1990]). Most
of this work shares a Montagovian view of seman-
tics by assuming that LF be integrated into the
grammar rules, thus assigning to each syntactic ca-
tegory its semantic representation.
Within this integrated-semantics approach the
generation task mainly consists of reconstructing a
This work was partially funded by the German Mini-
ster for Research and Tedmology (BMFT) under contract
ITW 9002. Most of the research underlying this article was
accomplished within the EUROTRA-D accompanying re-
search project 1&lt;1T-FAST at the Technical University of Ber-
lin and funded by the BMFT under contract 1013211.
I wish to thank Christa Ilauenschild, John Nerbonne, and
flans Uszloweit for commenting on earlier versions of this
paper.
given LF, thereby ensuring that the result is com-
plete (all parts of the input structure are recon-
structed) and coherent (no additional structure is
built up). Thus, the surface strings then come out
as a side effect.
This paper describes a different use of seman-
tics for generation. Here the semantics is riot part
of the grammar, but rather expressed within a se-
parate semantic representation language (abbrev.:
SRL). This approach, in which the grammar only
covers the syntax part, is called the separate se-
mantics approach. It has a long tradition in Al NI,
systems, but was rarely used for unification-based
syntax and semantics. It will be argued that it can
still be useful for interfacing a syntactic generator
to some application system.
The main goal of this paper is to describe a ge-
nerator using a separate semantics arid to suggest a
structure-driven strategy that is based on a system
of pattern-action (PA) rules, as they are known
from Al production systems (for an overview see
[Davis/King 1977]). The purpose of these rules is
to explicitly relate the semantic (sub)structures to
possible syntactic counterparts. The mapping pro-
cess is driven by the semantic input structure that
is traversed step by step. At each step PA rules are
applied, which contribute to successively producing
an overall syntactic structure from which the ter-
minal string can easily be produced. This new ap-
proach allows for a carefully directed and nearly
deterministic choice of grammar rules.
</bodyText>
<sectionHeader confidence="0.994889" genericHeader="method">
KEEPING SEMANTICS SEPARATE
FROM SYNTAX
</sectionHeader>
<bodyText confidence="0.9714401">
The integrated-semantics approach is often illu-
strated in a Prolog-like notation using DCG rules.
The infix function symbol is used in each ca-
tegory to separate the syntactic from the semantic
part. Rule (1) introduces complements in an IIPSG-
style manner by &amp;quot;removing&amp;quot; the complement from
the VP&apos;s subcategorization list (cf. [Pollard/Sag
1987]). The relation between the semantics S and
the semantics of Compl is established in the lexical
entry for the verb (2).
</bodyText>
<listItem confidence="0.9495114">
- 113-
(1) vp(Subcat)/S --&gt;
vp([ComplISubcat])/S, Compl.
(2) vp((np(_)/Obj , np(3rd-sing)/Subj])/
kiss(Subj, Obj) --&gt; [kisses] .
</listItem>
<bodyText confidence="0.9806705">
Recent work on semantic-head-driven generation
[Shieber et al. 1990, Calder et al. 1989, Noord 1990,
Russell et al. 1990] provides a very promising step
towards efficient, goal-directed reconstruction of LF
that is espescially suited for lexicon-centered gram-
mar formalisms such as IIPSG or UCG. It was ob-
served that top-down generation may not termi-
nate. This is illustrated in (1). If the vp node is
used for top-down expansion, there is nothing to
prevent the subcategorization list from growing in-
finitely. If the Comp node is used, the constituent
to be generated must completely be guessed due to
the uninstantiated semantics. Since the grammar
will contain recursive rules (e.g. for relative clau-
ses), the guessing procedure will not terminate eit-
her. In view of this problem a bottom-up approach
was suggested that is guided by semantic informa-
tion in a top-down fashion.
The benefits of integrated semantics are mani-
fold. Elegant analyses of linguistic phenomena are
possible that relate syntactic and semantic pro-
perties to each other (cf. the treatment of e.g.
&apos;raising&apos; and `equi&apos; constructions in [Pollard/Sag
1987]). LF is defined on purely linguistic grounds
and as such, it is well-suited to the computational
linguist&apos;s work.
However, if a generator based on an integrated
semantics is to be used for conveying the results of
some application system into NL, expressions of the
application system&apos;s SRL have to be adapted to LF.
Given that the grammar should not be rewritten,
this amounts to an additional step of processing.
This step may turn out to be costly since the SRL
will typically contain application-dependent infor-
mation that must be considered. Take, for instance,
a transfer-based machine translation (MT) system
(such as EUROTRA [Arnold/des Tombe 1986]).
The results of the transfer (say, from German to
English) are encoded in a semantic representation
that is given to the system&apos;s generation component
to produce the English target sentence. In a system
capable of translating between a variety of langua-
ges, representations of this kind may themselves be
subject to transfer and will therefore contain infor-
mation relevant for translation .2
2An exception is the MiMo2 system [Noord et al. 1990].
The price to pay for allowing transfer at the level of LF was
to accept an &amp;quot;extremely poor&amp;quot; view of translation by just
preserving the logical meaning and—as far as possible—the
way in which meaning is built compositionally (quotation
from [Noord et al. 1990]).
The effort of introducing an additional step of
processing can be saved to a large extent by ad-
opting a separate-semantics approach. The SRL of
some application system may directly serve as an
interface to the generator.3 In the case at hand, two
additional components must be introduced into the
generation scenario: the definition of SRL and PA
rules. Instead of mapping SRL onto LF, SRL is di-
rectly related to syntax by virtue of the PA rules.
</bodyText>
<sectionHeader confidence="0.854547" genericHeader="method">
A STRUCTURE-DRIVEN GENERATOR
</sectionHeader>
<bodyText confidence="0.990369595238095">
The generator to be described in this section
is a module of the Berlin MT system [Hauen-
schild/Busemann 1988], which translates sentences
taken from administrative texts in an EC corpus
from German into English and vice versa.4 The
syntax formalism used is a constructive version of
GPSG [Gazdar et a/. 1985] as described in [Buse-
mann/Hauenschild 1988]. The semantic representa-
tion language FAS (Functor-Argument Stuctures)
[Mahr/Umbach 1990] is employed as an interface
between three different processes: it is the target of
GPSG-based analysis, for sentence-semantic trans-
fer, and as the source for GPSG-based generation.
FAS is defined by context-free rule schemata with
complex categories consisting of a main category
(e.g. &apos;clause&apos; in Figure la), which is associated with
a fixed list of feature specifications.&apos; The categories
are in canonical order with the functor preceding all
of its arguments. In contrast to syntactic structures
where agreement relations are established by virtue
of feature propagation, FAS categories contain al-
most no redundant information. For instance, num-
ber information is only located at the &apos;del,&apos; category.
The use of semantic relations (encoded by the &apos;role&apos;
feature), role configurations (4conf&apos;) and semantic
features allows us to discriminate between different
readings of words that result in different transla-
tional equivalents. Moreover, part of the thematic
structure of the source language sentence is preser-
ved during transfer and encoded by virtue of the
feature &apos;them&apos; with the numerical values indicating
which portion should preferrably be presented first,
second, third etc. The definitions of FAS for the
German and English fragments mainly differ with
regard to their terminal symbols.
3This interface does not correspond to the common sepa-
ration between making decisions about what to say and how
to say it (cf. [McKeown/Swartout 1988]). Rather the inter-
face in question must be situated somewhere in the &apos;how to
say it&apos; component because it presupposes many decisions ab-
out sentence formulation (e.g. regarding pronominalization,
or voice).
</bodyText>
<footnote confidence="0.9303384">
4 The underlying view of MT is described in [llauenschild
1988].
5In the present versions there are up to seven features in a
FAS category. For sake of simplicity many details irrelevant
to the present discussion are omitted in the examples.
</footnote>
<figure confidence="0.986854666666667">
- 114-
(a) FAS expression:
las
/N
illoc clauselin
(b) GPSG structure:
-plu)
NP [+top, acc, +plul S [fin, -plu) / NP [atop, acc, +plu]
Ifin clause clause
assertion I pert : +
pres_ind
Det Ni V [fin, -plu] S [psp, -plu) / NP (+top, acc, +plu]
dies • hab NP [nom. -plu] V (trans, psp)
vorschlag
Dot Ni
d-
dot
num: plur
dies
diese vorschlage hat der
[these proposals has the
nom
n_pred
sem: plan
vorschlag
rat
Rat verabschiedet
Council adopted]
&amp;quot;These proposals have been adopted by the Council.&amp;quot;
term
role: affected
them: 1
/\ I
verabschied
/
v_pred term
voice: active role: agent
cont: ag_at them : 3
them : 2
Idel nom
num: sing
I
I n_pred
sem: inst
det_sing
rat
verab
schieden
</figure>
<figureCaption confidence="0.999983">
Figure 1: Sample FAS Expression (a) and Corresponding GPSG Structure (b).
</figureCaption>
<bodyText confidence="0.996441666666667">
The GPSG formalism used includes the ID/LP
format, feature co-occurrence restrictions (FCRs)
and universal principles of feature instantiation
(Fit&apos;s). The II) rules are interpreted by the gene-
rator as providing the basic information for a local
tree. The categories of each generated local tree are
further instantiated by the FlPs and FClis. Finally,
the branches are ordered by virtue of the LP state-
ments.
Strategies for structure building and feature
instantiation. The task of constructing an admis-
sible GPSG syntactic structure can be divided up
into the following subtasks that, can be performed
independently of each other, and each according to
its own processing strategy:
</bodyText>
<listItem confidence="0.9950106">
• Structure building (by virtue of PA rules,
which in turn use ID rules)
• Feature instantiaton and ordering of the bran-
ches (by virtue of FlPs, FCRs and LP state-
ments)
</listItem>
<bodyText confidence="0.999230533333333">
The question arises which strategies are best sui-
ted to efficient generation. For each subtask both
a top-down and a bottom-up strategy •have been
investigated. As a result it turned out that struc-
ture building should occur top-down whereas fea-
ture instantiation should be performed in a bottom-
up manner.
Before justifying the result let us have a closer
look at the structure-building algorithm. The over-
all syntactic structure (OSS) is successively con-
strued in a top-down manner. At each level there is
a set of nonterminal leaf nodes available serving
as attachment points for further expansion steps
(initially the empty category is the only attachment
point). An expansion step consists of
</bodyText>
<listItem confidence="0.992321857142857">
1. generating a local tree t by virtue of an ID rule,
2. unifying its mother node with one of the
attachment points,
3. removing the attachment point from the cur-
rent set,
4. defining the daughters of t as the new current
set of attachment points.
</listItem>
<bodyText confidence="0.986213347826087">
Since lexical entries terminate a branch of the OSS,
the fourth of the above points is dropped during
expansion of lexical categories: processing continues
with the reduced set of attachment points.
Feature instantiation and the ordering of bran-
ches take place in a bottom-up manner after a lo-
cal tree has no further attachment points associated
with it (i.e. all of its daughters have been expan-
ded). Then processing returns to the next higher
level of the OSS examining the set of attachment
points. Depending on whether or not it is empty,
the next step is either feature instantiation or struc-
ture building. Given this interlinking of the two
subtasks, an OSS is admitted by the grammar if
- 115 -
its top-most local tree has passed feature instantia-
tion.
The effects of feature instantiation with respect
to the German example in Figure lb&apos; can be better
understood with the help of the S-expansion rules
used; cf. (3)–(5).7 Rule (3) causes topicalization,
(4) introduces a perfect auxiliary, and (5) requires
a transitive verb whose object is topicalized.
</bodyText>
<listItem confidence="0.940744666666667">
(3). S X[-I-top], S[lin] / X[-Ftop]
(4) S --+ V, S[psp]
(5) S / NPH-top, acc] NP[nomb V[trans]
</listItem>
<bodyText confidence="0.999891825">
The solution will now be justified. First of all, note
that the top-most part of an FAS expression is re-
lated to the top-most part of the GPSG structure,
and that the leaves of a FAS expression usually cor-
respond to GPSG lexicon entries. As a consequence,
the order the FAS expression is traversed determi-
nes the order in which the structure-building sub-
task is performed. Why should then, in the case of
FAS, the traversal occur top-down?
The answer is motivated by the distribution of in-
formation in FAS expressions. In order to apply a
certain Ill rule deterministically, information from
distant portions of the FAS expression may be nee-
ded. For instance, the FAS specification (them : 1),
which is part of one of the daughters of clause
in Figure la, is interpreted as requiring topicaliza-
tion of a syntactic constituent under the condition
that a declarative sentence is being generated. This
latter information is, however, only available at the
[illoc [assert ion]] 8 part of the FAS expression
(cf. Figure la).
Two possible methods for collecting this infor-
mation present themselves. First, the pattern in-
cluding (them : 1) could be required to cover as
much of the FAS expression as would be needed to
include illoc. In that case, all the information nee-
ded is present, and the traversal of the FAS expres-
sion could occur bottom-up as well as top-down.
Unfortunately the required size of the pattern is
not always known in advance because the FAS syn-
tax might allow an arbitrary number of recursively
defined local trees to intervene.
The second method—which was eventually
adopted—requires the patterns to cover not more
than one local FAS tree. In order to gather infor-
mation that is locally missing, an auxiliary storage
is needed. If, for instance, the illocution is mat-
ched, information about whether or not a declara-
tive sentence is being generated is stored. Later on,
(them : 1) is encountered. Now, the ID rule for to-
</bodyText>
<footnote confidence="0.94507175">
6These are not shown for the constituents of NPs.
?Note the different. use of the symbol &apos;/&apos;: here it denotes
the category-valued feature &apos;slash&apos;.
8 Square brackets are used here to indicate tree structure.
</footnote>
<bodyText confidence="0.997783696428572">
picalization (3) is triggered iff &apos;declarative&apos; can be
retrieved from the storage.
If the necessary information is not available yet,
one must accept either a delay of a mapping or
backtracking. With a top-down traversal of FAS
expressions, however, such cases are sufficiently re-
stricted to ensure efficiency. Note that a bottom-up
traversal or a mixed strategy could be more efficient
if the distribution of information in the SRL were
different.
The problems observed with top-down genera-
tors using an integrated semantics cannot occur
in the separate-semantics approach. Expansion of
grammar rules can be controlled by the semantic
representation if each rule application is explicitly
triggered. Situations causing an infinite expansion
due to an uninstantiated semantics (as with top-
down expansion using the rule (2)) cannot arise at
all since the separate semantics is fully specified.
Let us now discuss why feature instantiation
should be a bottom-up process. The FlPs apply
to the mother and/or a subset of daughters in a
local tree. In general, the more these categories
are instantiated the less likely the FIPs will have
to choose between alternative instantiations, which
would be a source for backtracking. A top-down
strategy would meet a more completely instan-
tiated mother, but still underspecified daughters.
With a bottom-up strategy, however, only the mo-
ther would be underspecified. For instance, consi-
der the GPSG account of parasitic gaps, which are
handled by the Foot Feature Principle. The &apos;slash&apos;
feature may occur at more than one daughter and
then require all occurrences of it to unify with the
mother (cf. [Gazdar et al. 1985, p. 16211.1). While
this is easy to handle for a bottom-up process, a
top-down strategy would have to guess at which
daughters to instantiate a slash value.
Pattern-action rules. A PA rule is a pro-
duction rule with, a pattern for local FAS trees
as its left-hand side and two sets of actions as
its right-hand side. The information-gathering ac-
tions (IGAs) maintain the auxiliary storage. The
structure-building actions (SBAs) generate GPSG
trees. Either one of these sets may be empty.
In &apos;order to minimize the power of PA rules, the
inventory of IGAs and SBAs is restricted. There are
only three IGAs for storing information into and
removing from the auxiliary storage. The auxiliary
storage is a two-dimensional array of a fixed size. It
may contain atomic values for a set of features pre-
determined by the PA rule writer as well as a single
GPSG category. There are only five SBAs for diffe-
rent kinds of mapping, three of which are explained
below; cf. [Busernann 1990) for a comprehensive dis-
cussion. Any SBA will remove the stored category
</bodyText>
<table confidence="0.857080444444445">
- 116-
FAS pattern: term (them: 1)
IGA: [remove_store(sent, decl),
set_gpsgfeatures(top:
SBA:
FAS pattern:
det (def:+, num:plur)
IGA: (set_gpsgfeatures(plu:+))
SBA: (call_id( NP --&gt; Det, Ni )l
</table>
<figureCaption confidence="0.98945">
Figure 2: Two Pattern-Action Rules for NP-Topicalization.
</figureCaption>
<bodyText confidence="0.996290489583333">
from the storage and unify it with the &apos;mother of
the local tree it is about to generate. &amp;quot;
lb illustrate this let us return to the topica-
lization example. The responsible PA: rules are
shown in Figure 2. The pattern of the first one
matches any local FAS tree whose mother is a
term(them: ). The IGAs work as follows: If a spe-
cification (sent : decl) can be removed from the sto-
rage, the GPSG feature specification H-top] will be
added to the stored category (by virtue of the IGA
set_gpsg_features). The SBA set, is empty. The
second PA rule matches any local FAS tree whose
first daughter is a definite determiner with plural
number followed by zero or more daughters. Note
that both patterns match the same local tree of the
FAS expression in Figure la. There is only one IGA,
which adds the number information to the stored
GPSG category. The single SBA, calLid, states
that a local GPSG tree is generated by virtue of the
ID rule indicated and added to the OSS. Since the
mother of the local tree (NP) now contains the spe-
cification [-i-top], it can only unify with the &apos;slash&apos;
value introduced by the mother of rule (5). Fron-
ting of the NP is achieved in accordance with the
FlPs and LP statements.
Three kinds of PA rules should be distinguished
according to the effects of their Sl3AS. Figure 2
.shows two of them; the first one doesn&apos;t create
structure at all while the second one transduces
a (FAS) local tree into a (GPSG) local tree. A
third type of rules generates GPSG strueture out of
FAS feature specifications. Figure 1 shows its use
to generate the non-local subtree including the per-
fect auxiliary [s [v [hat)] , s(psp)]] from the
local FAS tree dominated by clause(perf :+).
Note that this PA rule must be applied be-
fore an attempt is started to attach the subtree
[s/np(acc) [np(nom) , v(trans)]] . This latter
subtree is generated by a PA rule whose pattern
matches the same FAS tree as the previous one.
We shall return to this problem in the following
section.
Controlling the /napping procedure. First of
all note that PA rules can communicate with each
other only indirectly, i.e. by modifying the content
of the auxiliary storage or by successfully apply-
ing an SBA, thereby creating a situation in which
another rule becomes applicable (or cannot be ap-
plied anymore). PA rules do not contain any control
knowledge.
A local FAS tree is completely verbalized if a
maximum number n&gt; 1 of applicable PA rules are
successful. A PA rule is applicable to a local FAS
tree t if its pattern unifies with t. An applicable
PA rule is successful if all elements of IGA can
be executed and an SBA—if present—is successful.
An SBA is successful if a syntactic subtree can be
attached to the OSS as described above.
Since the set of PA rules is not commutative, the
order of application is crucial in order to ensure that
is maximal. Due to the restricted power of the PA
rules possible conflicts can be detected and resolved
a priori. A conflict arises if more than one pattern
matches a given FAS tree. All FAS trees matched
by more than one pattern can be identified with
help of the FAS grammar. The respective PA rules
are members of the same conflict set. The elements
of a conflict set can be partially ordered by virtue
of precedence rules operating on pairs of PA rules.
For instance, the conflict regarding the perfect
auxiliary is resolved by making a precedence rule
check the ID rules that would be invoked by the re-
spective SBAs. If the mother of the second one can
be unified with a daughter of the first one and not
vice versa, then the first PA rule must be applied
before the second one. Thus a PA rule with an SBA
invoking ID rule (4) will apply before another one
with an SBA invoking ID rule (5).
Note that, in this example, the number of suc-
cessful PA rules would not be maximal if the order
of application was the other way around since the
SBA invoking ID rule (4) would not succeed any-
more.
The control regime described above guarantees
termination, completeness and coherence in the fol-
lowing way: The traversal of a FAS expression ter-
minates since there is only a finite number of local
trees to be investigated, and for each of them a
- 117 -
finite number of PA rules is applicable. The OSS
generated is complete because all local FAS trees
are processed and for each a maximum number of
PA rules is successful. It is coherent because (1) no
PA rule may be applied whose pattern is not mat-
ched by the FAS expression and (2) all attachment
points must be expanded.
</bodyText>
<sectionHeader confidence="0.992224" genericHeader="conclusions">
CONCLUSION
</sectionHeader>
<bodyText confidence="0.9999735">
The adaptation of a GPSG-based generator to
an MT system using FAS as its SRL was described
as an instance of the separate-semantics approach
to surface generation. In this instance, the OSS is
most efficiently built top-down whereas feature in-
stantiation is performed bottom-up.
The mapping based on PA rules has proved to
be efficient in practice. There are only a few cases
where backtracking is required; most often the local
FAS tree being verbalized allows together with the
contents of the auxiliary storage and the current
set of attachment points for a deterministic choice
of grammar rules.
The generator has been fully implemented and
tested with middle-sized fragments of English and
German. It is part of the Berlin MT system and
runs on both an IBM 4381 under VM/SP in Water-
loo Core Prolog and a PC XT/AT in Arity Prolog.
Compared to algorithms based on an integrated
semantics the separate-semantics approach pursued
here is promising if the generator has to be adapted
to the SRL of some application system. Adaptation
then consists in modifying the set of PA rules rather
than in rewriting the grammar.
</bodyText>
<sectionHeader confidence="0.995938" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.999651986666667">
[Arnold/des Tombe 1986] Doug Arnold and Louis des
Tombe (1986), &apos;Basic Theory and Methodology in
Eurotra&apos;, in S. Nirenburg (ed.), Theoretical and Me-
thodological Issues in Machine Translation, Cam-
bridge: Cambridge University Press, 114-135.
[Busernann 1990] Stephan Busemann (1990), Gene-
rierung nottirlicher Sprache mit Generalisierten
Phrasenstruktur-Grarnmatiken, Doctoral Disserta-
tion, Universitat des Saarlandes, Saarbriicken. Also
available: TU Berlin, Dept. of Computer Science,
KIT Report 87.
(Busemann/Ilauenschild 1988]
Stephan Busemann and Christa Hauenschild (1988),
&apos;A Constructive View of GPSG or How to Make it
Work&apos;, in Proc. 12th COLING-88, Budapest, 77-82.
[Calder et al. 1989] Jonathan Calder, Mike Reape, and
Henk Zeevat (1989), &apos;An Algorithm for Generation in
• Unification Categorial Grammar&apos;, in Proc. 4th Conf.
of the European Chapter of the ACL, Manchester,
233-240.
[Davis/King 1977] Randall Davis und Jonathan King
(1977), &apos;An Overview of Production Systems&apos;, in E.
W. Elcock and D. Michie (eds.), Machine Intelligence
8, Chichester: Ellis Ilorwood, 300-332.
[Gazdar et al. 1985] Gerald Gazdar, Ewan Klein, Ge-
offrey Pullum, and Ivan Sag, (1985), Generalized
Phrase Structure Grammar, Oxford: Blackwell.
[Hauenschild 1988] Christa Hauenschild (1988), &apos;Dis-
course Structure—Some Implications for Machine
Translation&apos;, in D. Maxwell, K. Schubert und A.
P. M. Witkam (eds.), New Directions in Machine
Translation, Dordrecht: Foris, 145-156.
[Hauenschild/Busemann 1988] Christa Hauen-
schild and Stephan Busemann (1988), &apos;A Construc-
tive Version of GPSG for Machine Translation&apos;, in E.
Steiner, P. Schmidt, and C. Zelinsky-Wibbelt (eds.),
From Syntax to Semantics—Insights From Machine
Translation, London: Frances Pinter, 216-238.
[Malir/Umbach 1990] Bernd Mahr and Carla Umbach
(1990), `Functor-Argument Structures for the Mea-
ning of Natural Language Sentences and Their For-
mal Interpretation&apos;, in K.-H. Blasius, U. Hedstiick,
and C.-R. Rollinger (eds.), Sorts and Types in Artifi-
cial Intelligence, Berlin, New York: Springer (Lecture
Notes in Artificial Intelligence 418), 286-304.
[McKeown/Swartout 1988] Kathleen R. McKeown and
William R. Swartout, &apos;Language Generation and Ex-
planation&apos;, in M. Zock and G. Sabah (eds.), Advan-
ces in Natural Language Generation. An Interdisci-
plinary Perspective. Vol. I, London: Frances Pinter,
1-52.
[Noord 1990] Gertjan van Noord (1990), &apos;An Overview
of Head-Driven Bottom-up Generation&apos;, in R. Dale,
C. Mellish, and M. Zock (eds.), Current Research in
Natural Language Generation, Academic, 141-165.
[Noord et al. 1990] Gertjan van Noord, Joke Dorre-
paal, Pim van der Eijk, Maria Florenza, and Louis
des Tombe (1990), &apos;The MiMo2 Research System&apos;, in
Proc. 3rd Int. Conf. on Theoretical and Methodolo-
gical Issues in Machine Translation, Austin, Texas.
[Pollard/Sag 1987] Carl J. Pollard and Ivan A. Sag
(1987), Information-Based Syntax arid Semantics.
Volume I, Center for the Study of Language and In-
formation, CSLI Lecture Notes 13, Chicago: Univer-
sity of Chicago Press.
[Russell et al. 1990] Graham Russell, Susan Warwick,
and John Carroll (1990), &apos;Asymmetry in Parsing and
Generating with Unification Grammars: Case Stu-
dies from ELU&apos;, in Proc. Conf. of the 28th Annual
Meeting of the ACL, Pittsburgh, 205-211.
[Shieber et al. 1990] Stuart M. Shieber, Gertjan van
Noord, Robert C. Moore, and Fernando C. N. Pereira
(1990), &apos;A Semantic-Head-Driven Generation Algo-
rithm for Unification-Based Formalisms&apos;, in Compu-
tational Linguistics, 16(1), 30-42.
</reference>
<page confidence="0.958998">
-118-
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.518626">
<title confidence="0.998144">STRUCTURE-DRIVEN GENERATION FROM SEPARATE SEMANTIC REPRESENTATIONS</title>
<author confidence="0.999921">Stephan Busetnann</author>
<affiliation confidence="0.981422">Deutsches Forschungszentrum fiir Kiinstliche Intelligenz (DFKI) GmbH</affiliation>
<address confidence="0.996808">Stuhlsatzenhausweg 3, D-6600 Saarbriicken II</address>
<email confidence="0.949115">uttcp:busemann©dfki.uni-sb.de</email>
<abstract confidence="0.999695090909091">A new approach to structure-driven generation is presented that is based on a separate semanas input structure. the first time, GPSGbased formalism is complemented with a system of pattern-action rules that relate the parts of a semantics to appropriate syntactic rules. This way a front. end generator can be adapted to some application system (such as a machine translation system) more easily than would be possible with many previous generators based on modern gram-</abstract>
<intro confidence="0.561281">mar formalisms.&apos;</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Doug Arnold</author>
<author>Louis des Tombe</author>
</authors>
<title>Basic Theory and Methodology in Eurotra&apos;,</title>
<date>1986</date>
<booktitle>Theoretical and Methodological Issues in Machine Translation,</booktitle>
<pages>114--135</pages>
<editor>in S. Nirenburg (ed.),</editor>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge:</location>
<marker>[Arnold/des Tombe 1986]</marker>
<rawString>Doug Arnold and Louis des Tombe (1986), &apos;Basic Theory and Methodology in Eurotra&apos;, in S. Nirenburg (ed.), Theoretical and Methodological Issues in Machine Translation, Cambridge: Cambridge University Press, 114-135.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Stephan Busemann</author>
</authors>
<title>Generierung nottirlicher Sprache mit Generalisierten Phrasenstruktur-Grarnmatiken, Doctoral Dissertation, Universitat des Saarlandes, Saarbriicken. Also available:</title>
<date>1990</date>
<journal>Stephan Busemann and Christa Hauenschild</journal>
<booktitle>Proc. 12th COLING-88,</booktitle>
<tech>Report 87. (Busemann/Ilauenschild</tech>
<pages>77--82</pages>
<institution>TU Berlin, Dept. of Computer Science, KIT</institution>
<location>Budapest,</location>
<marker>[Busernann 1990]</marker>
<rawString>Stephan Busemann (1990), Generierung nottirlicher Sprache mit Generalisierten Phrasenstruktur-Grarnmatiken, Doctoral Dissertation, Universitat des Saarlandes, Saarbriicken. Also available: TU Berlin, Dept. of Computer Science, KIT Report 87. (Busemann/Ilauenschild 1988] Stephan Busemann and Christa Hauenschild (1988), &apos;A Constructive View of GPSG or How to Make it Work&apos;, in Proc. 12th COLING-88, Budapest, 77-82.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jonathan Calder</author>
<author>Mike Reape</author>
<author>Henk Zeevat</author>
</authors>
<title>An Algorithm for Generation in • Unification Categorial Grammar&apos;,</title>
<date>1989</date>
<booktitle>in Proc. 4th Conf. of the European Chapter of the ACL, Manchester,</booktitle>
<pages>233--240</pages>
<marker>[Calder et al. 1989]</marker>
<rawString>Jonathan Calder, Mike Reape, and Henk Zeevat (1989), &apos;An Algorithm for Generation in • Unification Categorial Grammar&apos;, in Proc. 4th Conf. of the European Chapter of the ACL, Manchester, 233-240.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Randall Davis und Jonathan King</author>
</authors>
<title>An Overview of Production Systems&apos;,</title>
<date>1977</date>
<booktitle>Machine Intelligence 8, Chichester: Ellis Ilorwood,</booktitle>
<pages>300--332</pages>
<editor>in E. W. Elcock and D. Michie (eds.),</editor>
<marker>[Davis/King 1977]</marker>
<rawString>Randall Davis und Jonathan King (1977), &apos;An Overview of Production Systems&apos;, in E. W. Elcock and D. Michie (eds.), Machine Intelligence 8, Chichester: Ellis Ilorwood, 300-332.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gerald Gazdar</author>
<author>Ewan Klein</author>
<author>Geoffrey Pullum</author>
<author>Ivan Sag</author>
</authors>
<title>Generalized Phrase Structure Grammar,</title>
<date>1985</date>
<publisher>Blackwell.</publisher>
<location>Oxford:</location>
<marker>[Gazdar et al. 1985]</marker>
<rawString>Gerald Gazdar, Ewan Klein, Geoffrey Pullum, and Ivan Sag, (1985), Generalized Phrase Structure Grammar, Oxford: Blackwell.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christa Hauenschild</author>
</authors>
<title>Discourse Structure—Some Implications for Machine Translation&apos;,</title>
<date>1988</date>
<booktitle>New Directions in Machine Translation,</booktitle>
<pages>145--156</pages>
<editor>in D. Maxwell, K. Schubert und A. P. M. Witkam (eds.),</editor>
<publisher>Foris,</publisher>
<location>Dordrecht:</location>
<marker>[Hauenschild 1988]</marker>
<rawString>Christa Hauenschild (1988), &apos;Discourse Structure—Some Implications for Machine Translation&apos;, in D. Maxwell, K. Schubert und A. P. M. Witkam (eds.), New Directions in Machine Translation, Dordrecht: Foris, 145-156.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christa Hauenschild</author>
<author>Stephan Busemann</author>
</authors>
<title>A Constructive Version of GPSG for Machine Translation&apos;,</title>
<date>1988</date>
<booktitle>From Syntax to Semantics—Insights From Machine Translation,</booktitle>
<pages>216--238</pages>
<editor>in E. Steiner, P. Schmidt, and C. Zelinsky-Wibbelt (eds.),</editor>
<location>London: Frances Pinter,</location>
<marker>[Hauenschild/Busemann 1988]</marker>
<rawString>Christa Hauenschild and Stephan Busemann (1988), &apos;A Constructive Version of GPSG for Machine Translation&apos;, in E. Steiner, P. Schmidt, and C. Zelinsky-Wibbelt (eds.), From Syntax to Semantics—Insights From Machine Translation, London: Frances Pinter, 216-238.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernd Mahr</author>
<author>Carla Umbach</author>
</authors>
<title>Functor-Argument Structures for the Meaning of Natural Language Sentences and Their Formal Interpretation&apos;,</title>
<date>1990</date>
<journal>Lecture Notes in Artificial Intelligence</journal>
<booktitle>Sorts and Types in Artificial Intelligence,</booktitle>
<volume>418</volume>
<pages>286--304</pages>
<editor>in K.-H. Blasius, U. Hedstiick, and C.-R. Rollinger (eds.),</editor>
<publisher>Springer</publisher>
<location>Berlin, New York:</location>
<marker>[Malir/Umbach 1990]</marker>
<rawString>Bernd Mahr and Carla Umbach (1990), `Functor-Argument Structures for the Meaning of Natural Language Sentences and Their Formal Interpretation&apos;, in K.-H. Blasius, U. Hedstiick, and C.-R. Rollinger (eds.), Sorts and Types in Artificial Intelligence, Berlin, New York: Springer (Lecture Notes in Artificial Intelligence 418), 286-304.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Kathleen R McKeown</author>
<author>William R Swartout</author>
</authors>
<title>Language Generation and Explanation&apos;,</title>
<booktitle>Advances in Natural Language Generation. An Interdisciplinary Perspective. Vol. I,</booktitle>
<pages>1--52</pages>
<editor>in M. Zock and G. Sabah (eds.),</editor>
<location>London: Frances Pinter,</location>
<marker>[McKeown/Swartout 1988]</marker>
<rawString>Kathleen R. McKeown and William R. Swartout, &apos;Language Generation and Explanation&apos;, in M. Zock and G. Sabah (eds.), Advances in Natural Language Generation. An Interdisciplinary Perspective. Vol. I, London: Frances Pinter, 1-52.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gertjan van Noord</author>
</authors>
<title>An Overview of Head-Driven Bottom-up Generation&apos;,</title>
<date>1990</date>
<booktitle>Current Research in Natural Language Generation, Academic,</booktitle>
<pages>141--165</pages>
<editor>in R. Dale, C. Mellish, and M. Zock (eds.),</editor>
<marker>[Noord 1990]</marker>
<rawString>Gertjan van Noord (1990), &apos;An Overview of Head-Driven Bottom-up Generation&apos;, in R. Dale, C. Mellish, and M. Zock (eds.), Current Research in Natural Language Generation, Academic, 141-165.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gertjan van Noord</author>
<author>Joke Dorrepaal</author>
<author>Pim van der Eijk</author>
<author>Maria Florenza</author>
<author>Louis des Tombe</author>
</authors>
<title>The MiMo2 Research System&apos;,</title>
<date>1990</date>
<booktitle>in Proc. 3rd Int. Conf. on Theoretical and Methodological Issues in Machine Translation,</booktitle>
<location>Austin, Texas.</location>
<marker>[Noord et al. 1990]</marker>
<rawString>Gertjan van Noord, Joke Dorrepaal, Pim van der Eijk, Maria Florenza, and Louis des Tombe (1990), &apos;The MiMo2 Research System&apos;, in Proc. 3rd Int. Conf. on Theoretical and Methodological Issues in Machine Translation, Austin, Texas.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl J Pollard</author>
<author>Ivan A Sag</author>
</authors>
<title>Information-Based Syntax arid Semantics. Volume I, Center for the Study of Language and Information,</title>
<date>1987</date>
<booktitle>CSLI Lecture Notes 13,</booktitle>
<publisher>University of Chicago Press.</publisher>
<location>Chicago:</location>
<marker>[Pollard/Sag 1987]</marker>
<rawString>Carl J. Pollard and Ivan A. Sag (1987), Information-Based Syntax arid Semantics. Volume I, Center for the Study of Language and Information, CSLI Lecture Notes 13, Chicago: University of Chicago Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Graham Russell</author>
<author>Susan Warwick</author>
<author>John Carroll</author>
</authors>
<title>Asymmetry in Parsing and Generating with Unification Grammars: Case Studies from ELU&apos;, in</title>
<date>1990</date>
<booktitle>Proc. Conf. of the 28th Annual Meeting of the ACL,</booktitle>
<pages>205--211</pages>
<location>Pittsburgh,</location>
<marker>[Russell et al. 1990]</marker>
<rawString>Graham Russell, Susan Warwick, and John Carroll (1990), &apos;Asymmetry in Parsing and Generating with Unification Grammars: Case Studies from ELU&apos;, in Proc. Conf. of the 28th Annual Meeting of the ACL, Pittsburgh, 205-211.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
<author>Gertjan van Noord</author>
<author>Robert C Moore</author>
<author>Fernando C N Pereira</author>
</authors>
<title>A Semantic-Head-Driven Generation Algorithm for Unification-Based Formalisms&apos;,</title>
<date>1990</date>
<journal>in Computational Linguistics,</journal>
<volume>16</volume>
<issue>1</issue>
<pages>30--42</pages>
<marker>[Shieber et al. 1990]</marker>
<rawString>Stuart M. Shieber, Gertjan van Noord, Robert C. Moore, and Fernando C. N. Pereira (1990), &apos;A Semantic-Head-Driven Generation Algorithm for Unification-Based Formalisms&apos;, in Computational Linguistics, 16(1), 30-42.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>