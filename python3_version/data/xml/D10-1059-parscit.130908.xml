<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000355">
<title confidence="0.989732">
Minimum Error Rate Training by Sampling the Translation Lattice
</title>
<author confidence="0.999066">
Samidh Chatterjee∗ Nicola Cancedda
</author>
<affiliation confidence="0.984923">
Department of Computer Science Xerox Research Centre Europe
Florida State University, USA 6 Chemin de Maupertuis, 38240 Meylan, France
</affiliation>
<email confidence="0.999062">
chatterj@cs.fsu.edu nicola.cancedda@xrce.xerox.com
</email>
<sectionHeader confidence="0.995433" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998008894736842">
Minimum Error Rate Training is the algo-
rithm for log-linear model parameter train-
ing most used in state-of-the-art Statistical
Machine Translation systems. In its original
formulation, the algorithm uses N-best lists
output by the decoder to grow the Transla-
tion Pool that shapes the surface on which
the actual optimization is performed. Recent
work has been done to extend the algorithm
to use the entire translation lattice built by
the decoder, instead of N-best lists. We pro-
pose here a third, intermediate way, consist-
ing in growing the translation pool using sam-
ples randomly drawn from the translation lat-
tice. We empirically measure a systematic im-
provement in the BLEU scores compared to
training using N-best lists, without suffering
the increase in computational complexity as-
sociated with operating with the whole lattice.
</bodyText>
<sectionHeader confidence="0.999133" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.905343545454545">
Most state-of-the-art Statistical Machine Translation
(SMT) systems are based on a log-linear model of
the conditional probability of generating a certain
translation given a specific source sentence. More
specifically, the conditional probability of a transla-
tion e and a word alignment a given a source sen-
tence f is modeled as:
*The work behind this paper was done during an intern-
ship at the Xerox Research Centre Europe. The author was par-
tially supported by NSF through Grant CCF-0643593 and the
AFOSR Young Investigator Research Program.
</bodyText>
<equation confidence="0.914961666666667">
K
P(e, a|f) a expj: Akhk (e,a,f) (1)
(k=1
</equation>
<bodyText confidence="0.964324095238095">
where the hk(e,a,f) are feature functions provid-
ing complementary sources of information on the
quality of the produced translation (and alignment).
Once such a model is known: the decoder (i.e. the
actual translation program), which builds a transla-
tion by searching in the space of all possible transla-
tions the one that maximizes the conditional proba-
bility:
(e∗, a∗) = arg max
e,a
where we have taken into account that the exponen-
tial is monotonic.
The parameters Ak determine the relative impor-
tance of the different feature functions in the global
score. Best results are typically obtained by search-
ing in the space of all possible parameter vectors A
for the one that minimizes the error on a held-out
development dataset for which one or more refer-
ence human translations are available, as measured
by some automatic measure. This procedure is re-
ferred to as Minimum Error Rate Training (MERT).
</bodyText>
<subsectionHeader confidence="0.9315965">
1.1 Minimum Error Rate Training on N-best
Lists
</subsectionHeader>
<bodyText confidence="0.9998915">
The most widespread MERT algorithm is the one
described in (Och, 2003). This algorithm starts
by initializing the parameter vector A. For each
source sentence in the development set, the decoder
</bodyText>
<equation confidence="0.986295333333333">
K
AkhK(e,a,f) (2)
k=1
</equation>
<page confidence="0.984469">
606
</page>
<note confidence="0.8174835">
Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 606–615,
MIT, Massachusetts, USA, 9-11 October 2010. c�2010 Association for Computational Linguistics
</note>
<bodyText confidence="0.999891088888889">
is used to initialize a translation pool with a list of N-
best scoring candidate translations according to the
model. Using this pool and the corresponding refer-
ence translations then, an optimization procedure is
run to update the parameter vector to a V with re-
duced error. The decoder is then invoked again, the
new output N-best list is merged into the translation
pool, and the procedure is iterated. The algorithm
stops either after a predefined number of iterations
or upon convergence, which is reached when no new
element is added to the translation pool of any sen-
tence, or when the size of the update in the parameter
vector is below a threshold.
The error measure minimized at each iteration is
usually BLEU (Papineni et al., 2002). BLEU essen-
tially measures the precision with which the trans-
lation produced by a system recovers n-grams of
different orders from the available reference trans-
lation(s), used as a gold standard.
The optimization procedure that is run within
each iteration on the growing translation pools is
based on the key observation that BLEU only de-
pends on the single translation receiving the highest
score by the translation model (which would be the
one shown to the receipient) in the translation pool.
This in turn means that, for any given sentence, its
contribution to BLEU changes only when the value
of the parameters change in such a way that the sen-
tence ranking first according to the model switches
from one to another. This situation does not change
when one considers all the sentences in a develop-
ment set instead of just one: while varying the A
vector, the BLEU score changes only when there is
a change at the top of the ranking of the alternatives
for at least one sentence in the set. In other words,
BLEU is piece-wise constant in k MERT then pro-
ceeds by performing an iterative line search by fix-
ing each time the value of all components of A but
one1: for such a free parameter a global optimum
can be identified by enumerating all the points that
cause a change in BLEU. The value of the compo-
nent is then fixed at the middle of an interval with
maximum BLEU, and the procedure is iterated un-
til convergence. Since the error function is highly
irregular, and the iterative line search is not guaran-
</bodyText>
<footnote confidence="0.992001666666667">
1More generally, one can select each time a combination of
coordinates identifying a line in the parameter space, and is not
restricted to a coordinate direction.
</footnote>
<bodyText confidence="0.999208789473684">
teed to converge to a global optimum, the procedure
is repeated many times with different initializations,
and the best convergence point is retained.
The MERT algorithm suffers from the following
problem: it assumes at each iteration that the set
of candidates with a chance to make it to the top
(for some value of the parameter vector) is well
represented in the translation pool. If the transla-
tion pool is formed in the standard way by merg-
ing N-best lists, this assumption is easily violated in
practice. Indeed, the N-best list often contains only
candidates displaying minor differences, and repre-
sents only a very small sample of alternative possi-
ble translations, strongly biased by the current pa-
rameter setting.
Recognizing this shortcoming, Macherey et al.
(2008) extended the MERT algorithm so as to use
the whole set of candidate translations compactly
represented in the search lattice produced by the de-
coder, instead of only a N-best list of candidates
extracted from it. This is achieved via an elegant
but relatively heavy dynamic programming algo-
rithm that propagates sufficient statistics (called en-
velopes) throughout the whole search graph. The re-
ported theoretical worst-case complexity of this al-
gorithm is O(|V ||E |log |E|), where V and E are the
vertex set and the edge set of the lattice respectively.
We propose here an alternative method consist-
ing in sampling a list of candidate translations from
the probability distribution induced by the transla-
tion lattice. This simple method produces a list of
candidates more representative of the complete dis-
tribution than an N-best list, side-stepping the in-
tricacies of propagating envelopes throughout the
lattice. Computational complexity increases only
marginally over the N-best list approach, while still
yielding significant improvements in final transla-
tion quality.
</bodyText>
<subsectionHeader confidence="0.994127">
1.2 The translation lattice
</subsectionHeader>
<bodyText confidence="0.999971625">
Finding the optimal translation according to Equa-
tion 1 is NP-complete (Knight, 1999). Most phrase-
based SMT systems resort then to beam-search
heuristic algorithms for solving the problem approx-
imately. In their most widespread version, PBSMT
decoders proceed by progressively extending trans-
lation prefixes by adding one new phrase at a time,
and correspondingly “consuming” portions of the
</bodyText>
<page confidence="0.997139">
607
</page>
<bodyText confidence="0.99940925">
source sentence. Each prefix is associated with a
node in a graph, and receives a score according to
the model. Whenever two prefixes having exactly
the same possible extensions are detected, the lower-
scoring one is merged into the other, thus creating a
re-entrancy in the directed graph, which has then the
characteristics of a lattice (Figure 1). Edges in the
lattice are labelled with the phrase-pair that was used
to perform the corresponding extension, the source
word positions that were covered in doing the ex-
tension, and the corresponding increment in model
score.
</bodyText>
<figureCaption confidence="0.963836666666667">
Figure 1: A lattice showing some possible translations of
the English sentence: I have a blue car. The state with
ID 0 is the start state and the one with F is the final state.
</figureCaption>
<sectionHeader confidence="0.99924" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.9767135">
Since its introduction, (Och, 2003) there has been
various suggestions for optimizing the MERT cri-
terion. Zens et al. (2007) use the MERT criterion
to optimize the N-best lists using the Downhill
Simplex Algorithm (Press, 2007). But the Down-
hill Simplex Algorithm loses its robustness as the
dimension goes up by more than 10 (Macherey
et al., 2008). Deterministic Annealing was sug-
gested by Smith and Eisner (2006) where the au-
thors propose to minimize the expected loss or
risk. They define the expectation using a proba-
bility distribution over hypotheses that they gradu-
ally anneal to focus on the 1-best hypothesis. Dif-
ferent search strategies were investigated by Cer
et al. (2008). Work has been done to investigate a
perceptron-like online margin training for statisit-
ical machine translation (Watanabe et al., 2007).
Building on this paper, the most recent work to
our knowledge has been done by Chiang et al.
(2008). They explore the use of the Margin Infused
Relaxed Algorithm (MIRA) (Crammer and Singer,
2003; Crammer et al., 2006) algorithm instead of
MERT. Macherey et al. (2008) propose a new varia-
tion of MERT where the algorithm is tuned to work
on the whole phrase lattice instead of N-best list
only. The new algorithm constructs the error surface
of all translations that are encoded in the phrase lat-
tice. They report significant convergence improve-
ments and BLEU score gains over N-best MERT
when trained on NIST 2008 translation tasks. More
recently, this algorithm was extended to work with
hypergraphs encoding a huge number of translations
produced by MT systems based on Synchronous
Context Free Grammars (Kumar et al., 2009). All
the methods cited here work on either N-best lists or
from whole translation lattices built by the decoder.
To our knowledge, none of them proposes sampling
translations from the lattice.
3 Sampling candidate translations from
the lattice
In this section we first start by providing an intu-
ition of why we believe it is a good idea to sample
from the translation lattice, and then describe in de-
tail how we do it.
</bodyText>
<subsectionHeader confidence="0.999099">
3.1 An intuitive explanation
</subsectionHeader>
<bodyText confidence="0.999980588235294">
The limited scope of n-best lists rules out many al-
ternative translations that would receive the highest
score for some values of the parameter vector. The
complete set of translations that can be produced us-
ing a fixed phrase table (also called reachable trans-
lations) for a given source sentence can be repre-
sented as a set of vectors in the space spanned by
the feature functions (Fig. 2). Not all such transla-
tions stand a chance to receive the highest score for
any value of the parameter vector, though. Indeed, if
translations h, h’and h” are such that hk &lt; h′k &lt; h′′k
for all feature k, then there is no value of A that
will give to h’ a score higher than both h and h”.
The candidates that would rank first for some value
of the A parameter vector are those on the convex
envelope of the overall candidate set. We know of
no effective way to generate this convex envelope in
</bodyText>
<figure confidence="0.999469083333333">
bleue
(4)
I have a
J’ai une
(1,2,3)
−12.24
0
I have
J’ai
(1,2)
2 3
I have a blue
J’ai une bleue
(1,2,3,4)
1
blue
a blue car
une voiture bleue
(3,4,5)
...
voiture
(5)
car
F
</figure>
<page confidence="0.984352">
608
</page>
<bodyText confidence="0.999953972222222">
polynomial time. The set of candidates represented
by the decoder lattice is a subset (enclosed in the
larger dashed polygon in the figure) of this set. This
subset is biased to contain translations ranking high
according to the values of the parameter vector (the
direction labelled with A) used to produce it, because
of the pruning strategies that guide the construction
of the translation lattice. Both the N-best list and
our proposed random sample are further subsets of
the set of translations encoded in the lattice. The N-
best list is very biased towards translations that score
high with the current choice of parameters: its con-
vex envelope (the smaller dashed polygon) is very
different from the one of the complete set of trans-
lations, and also from that of the translations in the
lattice. The convex envelope of a random sample
from the translation lattice (the dotted polygon in the
figure), will generally be somewhat closer to the en-
velope of the whole lattice itself.
The curves in the figure indicate regions of con-
stant loss (e.g. iso-BLEU score, much more irregu-
larly shaped in reality than in the drawing). For this
sentence, then, the optimal choice of the parameters
would be around A∗. Performing an optimization
step based on the random sample envelope would
result in a more marked update (A′sample) in the di-
rection of the best parameter vector than if an N-best
list is used (A′N-best).
Notice that Figure 2 portraits a situation with only
two features, for obvious reasons. In practice the
number of features will be substantially larger, with
values between five and twenty being common prac-
tice. In real cases, then, a substantially larger frac-
tion of reachable translations will tend to lie on the
convex envelope of the set, and not inside the convex
hull.
</bodyText>
<subsectionHeader confidence="0.999761">
3.2 The sampling procedure
</subsectionHeader>
<bodyText confidence="0.999947888888889">
We propose to modify the standard MERT algorithm
and sample N candidates from the translation lattice
according to the probability distribution over paths
induced by the model, given the current setting of
the A parameters, instead of using an N-best list.
The sampling procedes from the root node of the
lattice, corresponding to an empty translation can-
didate covering no words of the source, by chosing
step by step the next edge to follow. The probability
</bodyText>
<figure confidence="0.369364">
h2
</figure>
<figureCaption confidence="0.981112">
Figure 2: Envelope of the set of reachable translations
</figureCaption>
<bodyText confidence="0.724616294117647">
where the model has two feature functions h1 and h2.
The envelope of the lattice is the outer dashed polygon,
while the envelope of the N-best list is the inner one. Us-
ing the whole lattice as translation pool will result in a
more marked update towards the optimal parameters. The
random sample from the lattice is enclosed by the dotted
line. If we use it, we can intuitively expect updates to-
wards the optimum of intermediate effectiveness between
those of the N-best list method and those of the lattice
method.
distribution for each possible follow-up is the poste-
rior probability of following the edge given the path
prefix derived from the lattice: it is obtained via a
preliminary backward sweep.
Since feature functions are incremental over the
edges by design, the non-normalized probability of
a path is given by:
</bodyText>
<equation confidence="0.82062">
��
P(e1, ... , em) = e i�&amp;quot;�(&apos;i) (3)
</equation>
<bodyText confidence="0.691376">
where
</bodyText>
<equation confidence="0.997095666666667">
K
a(ei) = Akhk(ei) (4)
k=1
</equation>
<bodyText confidence="0.999885888888889">
is the score of edge ei. With a small abuse of no-
tation we will also denote it as a(nj,k), where it is
intended that ei goes from node nj to node nk. Let’s
denote with a(ni) the score of node ni, i.e. the loga-
rithm of the cumulative unnormalized probability of
all the paths in the lattice that go from node ni to a
final node. The unnormalized probability of select-
ing node nj starting from ni can then be expressed
recursively as follows:
</bodyText>
<figure confidence="0.982756833333333">
reference
best in lattice
best in random sample
best in N−best list
best reachable
λ∗
λ’
lattice
λ’ sample
λ’N−best
λ
h1
</figure>
<page confidence="0.936082">
609
</page>
<equation confidence="0.954864">
S(nj|ni) ≈ e(a(nj)+a(ni,j)) (5)
</equation>
<bodyText confidence="0.999183833333333">
The scores required to compute this sampling
probabilities can be obtained by a simple backward
pass in the lattice. Let Pi be the set of successors
of ni. So the total unnormalized log-probability of
reaching a final state (i.e. with a complete transla-
tion) from ni is given by the equation below.
</bodyText>
<equation confidence="0.935125">
u(ni) = log( � e(a(nj)+a(ni,j))) (6)
nj∈Pi
</equation>
<bodyText confidence="0.999996380952381">
where we set u(ni) = 0 if Pi = ∅, that is if ni
is a final node. At the end of the backward sweep,
u(n0) contains the unnormalized cumulative prob-
ability of all paths, i.e. the partition function. No-
tice that this normalising constant cancels out when
computing local sampling probabilities for traversed
nodes in the lattice.
Once we know the transition probability (Eq. 5)
for each node, we sample by starting in the root node
of the lattice and at each step randomly selecting
among its successors, until we end in the final node.
The whole sampling procedure is repeated as many
times as the number of samples sought. After col-
lecting samples for each sentence, the whole list is
used to grow the translation pool.
Notice that when using this sampling method it is
no longer possible to use the stability of the trans-
lation pool as a stopping criterion. The MERT al-
gorithm must thus be run either for a fixed number
of iterations, or until the norm of the update to the
parameter vector goes below a threshold.
</bodyText>
<subsectionHeader confidence="0.998474">
3.3 Time Complexity Analysis
</subsectionHeader>
<bodyText confidence="0.999725363636364">
For each line search in the inner loop of the MERT
algorithm, all methods considered here need to com-
pute the projection of the convex envelope that can
be scanned by leaving all components unchanged
but one2. If we use either N-best lists or random
samples to form the translation pool, and M is the
size of the translation pool, then computing the en-
velope can be done in time O(M log M) using the
SweepLine algorithm reproduced as Algorithm 1 in
(Macherey et al., 2008). As shown in the same ar-
ticle, the lattice method for computing the envelope
</bodyText>
<footnote confidence="0.657186">
2In general, moving along a 1-dimensional subspace of the
parameter space.
</footnote>
<bodyText confidence="0.9997285">
is O(|V ||E |log |E|), where V is the vertex set of the
lattice, and E is its edge set. In standard decoders
there is a maximum limit D to the allowed distor-
tion, and lattice vertices are organized in J priority
queues 3 of size at most a, where J is the length of
the source sentence and a is a parameter of the de-
coder set by the user. Also, there is a limit K to
the maximum number of source words spanned by
a phrase, and only up to c alternative translations
for a same source phrase are kept in the phrase ta-
ble. Under these standard conditions, the number
of outgoing edges E′ from each lattice vertex can
be bounded by a constant. A way to see this is by
considering that if an hypothesis is extended with a
phrase, then the extended hypothesis must end up in
a stack at most K stacks to the right of the original
one. There are only aK places in these stacks, so it
must be |E′ |≤ aK.
Since the number of edges leaving each node is
bounded by a constant, it is |E |= O(|V |), and the
lattice method is O(|V |2 log(|V |)). The maximum
number of vertices in the lattice is limited by the
capacity of the stacks: |V  |≤ aJ. This eventually
leads to a complexity of O(J2 log J) for the inner
loop of the lattice method.
It is interesting to observe that the complexity is
driven by the length of the source sentence in the
case of the lattice method, and by the size of the
translation pool in the case of both the N-best list
method and the random sampling method. The lat-
ter two methods are asymptotically more effective as
long as the size of the sample/N-best list grows sub-
quadratically in the length of the sentence. In most
of our experiments we keep the size of the sample
constant, independent of the length of the sentence,
but other choices can be considered. Since the num-
ber of reachable translations grows with the length
of the source sentence, length-independent samples
explore a smaller fraction of the reachable space.
Generating samples (or n-best lists) of size increas-
ing with the length of the source sentence could thus
lead to more homogeneous sampling, and possibly a
better use of CPU time.
We have so far compared methods in term of the
complexity of the innermost loop: the search for a
global optimum along a line in the parameter space.
</bodyText>
<footnote confidence="0.899492">
3Traditionally referred to as stacks.
</footnote>
<page confidence="0.996675">
610
</page>
<bodyText confidence="0.999966741935484">
This is indeed the most important analysis, since
the line search is repeated many times. In order to
complete the analysis, we also compare the differ-
ent methods in terms of the operations that need be
performed as part of the outer iteration, that is upon
redecoding the development set with a new parame-
ter vector.
The N-best list method requires simply construct-
ing an N-best list from the lattice. This can be done
in time linear in the size J of the sentence and in N
with a backward sweep in the lattice.
The sampling method requires sampling N times
the lattice according to the probability distribution
induced by the weights on its edges. We use a
dynamic programming approach for computing the
posterior probabilities of traversing edges. In this
phase we visit each edge of the lattice exactly once,
hence this phase is linear in the number of edges
in the lattice, hence under the standard assumptions
above in the length J of the sentence. Once posterior
probabilities are computed for the lattice, we need
to sample N paths from it, each of which is com-
posed of at most J edges4. Under standard assump-
tions, randomly selecting the next edge to follow at
each lattice node can be done in constant time, so
the whole sampling is also O(NJ), like extracting
the N-best list.
No operation at all is required by the lattice
method in the outer loop, since the whole lattice is
passed over for envelope propagation to the inner
loop.
</bodyText>
<sectionHeader confidence="0.998045" genericHeader="method">
4 Experimental Results
</sectionHeader>
<bodyText confidence="0.999916230769231">
Experiments were conducted on the Europarl corpus
with the split used for the WMT-08 shared task (Eu-
roparl training and test condition) for the language
pairs English-French (En-Fr), English-Spanish (En-
Es) and English-German (En-De), each in both di-
rections. Training corpora contain between 1.2 and
1.3 million sentence pairs each, development and
test datasets are of size 2,000. Detailed token and
type statistics can be found in Callison-Burch et al.
(2008). The Moses decoder (Koehn et al., 2007)
was used for generating lattices and n-best lists. The
maximum number of decoding iterations was set to
twelve. Since Moses was run with its lexicalised dis-
</bodyText>
<footnote confidence="0.971499">
4We assume all phrase pairs cover at least one source word.
</footnote>
<figureCaption confidence="0.883000333333333">
Figure 3: Learning curves (BLEU on the development
set) for different tested conditions for English to French
(top) and French to English (bottom).
</figureCaption>
<bodyText confidence="0.999076277777778">
tortion model, there were 14 features. Moses L1-
normalises the parameter vector: parameter scaling
only marginally affects n-best list construction (via
threshold pruning during decoding), while it sub-
stantially impacts sampling.
For each of the six configurations, we compared
the BLEU score on the test data when optimizing
feature weights with MERT using n-best and ran-
dom samples of size 100 and 200. In all cases we
used 20 random restarts for MERT. Results are pre-
sented in Table 1. We also ran non systematic ex-
periments on some of the configurations with larger
samples and n-best lists, with results changing very
little from the respective 200 cases: we do not report
them here.
Learning curves (BLEU on the development set)
are shown in Figure 3. Learning curves for the other
tested language pairs follow a similar pattern.
</bodyText>
<figure confidence="0.998848481481482">
0.32
0.28
0.26
0.24
0.22
0.18
0.32
0.28
0.26
0.24
0.22
0.3
0.2
0.3
0.2
0 1 2 3 4 5 6 7 8 9 10 11 12
0 1 2 3 4 5 6 7 8 9 10 11
nb.200.en-fr
s.200.en-fr
m.200.en-fr
s.100.en-fr
nb.100.en-fr
nb.200.fr-en
s.200.fr-en
m.200.fr-en
s.100.fr-en
nb.100.fr-en
</figure>
<page confidence="0.981951">
611
</page>
<sectionHeader confidence="0.434772" genericHeader="method">
5 Analysis of results
</sectionHeader>
<bodyText confidence="0.998201285714286">
All differences of the test scores between optimiz-
ing the parameters using nbest-200 lists and from
randomly sampled lists of size 200 were found to
be statisitically significant at 0.05 level at least. We
used Approximate Randomization Test (Riezler and
Maxwell, 2005) for the purpose, random sampling
being done 1000 times.
</bodyText>
<table confidence="0.999801285714286">
S-T NB-100 RS-100 NB-200 RS-200
En-Fr 32.47 31.36 32.32 32.76
Fr-En 32.43 31.77 32.46 32.91
En-Es 29.21 28.98 29.65 30.19
Es-En 30.97 30.41 31.22 31.66
En-De 20.36 19.92 20.55 20.93
De-En 27.48 26.98 27.30 27.62
</table>
<tableCaption confidence="0.9910885">
Table 1: Test set BLEU Scores for six different “Source-
Target” Pairs
</tableCaption>
<bodyText confidence="0.998276535714286">
Somewhat surprisingly, while random sampling
with sample size of 200 yields overall the best re-
sults, random sampling with size 100 give system-
atically worse results than n-best lists of the same
size. We conjectured that n-best lists and random
samples could have complementary advantages. In-
deed, it seems intuitive that a good translation pool
should be sufficiently varied, as argued in Section
3.1. However it should also stand high chances to
contain the best reachable translation, or translations
close to the best. It might thus be that 100-best lists
are unable to provide diversity, and random samples
of size 100 to guarantee sufficient quality.
In order to test this conjecture we repeated our
experiments, but at each iteration we used the union
of a 100 random sample and a 100 n-best list. Re-
sults for this experiments are in Table 2. The cor-
responding results with random samples of size 200
are also repeated to ease comparison. Depending on
the language pair, improvements over random sam-
pling range from 0.17 (En-Es) to 0.44 (Fr-En) BLEU
points. Improvements over 200-best lists range from
0.68 (De-En) to 0.89 (Fr-En) BLEU points. These
results indicate quite clearly that N-best lists and
random samples contribute complementary infor-
mation to the translation pool: indeed, in most cases
there is very little or no overlap between the two.
Convergence curves show that RS-200, NB-100
</bodyText>
<table confidence="0.999367285714286">
Source-Target Mixed 100 + 100 RS-200
En-Fr 33.17 32.76
Fr-En 33.35 32.91
En-Es 30.37 30.19
Es-En 32.04 31.66
En-De 21.31 20.93
De-En 27.98 27.62
</table>
<tableCaption confidence="0.89469325">
Table 2: Test set BLEU Scores for the same ’‘Source-
Target” pairs using a mixed strategy combining a 100 N-
best list and a random sample of size 100 after each round
of decoding.
</tableCaption>
<bodyText confidence="0.999959117647059">
and M-200 (i.e. the hybrid combination) systemati-
cally converge to higher BLEU scores, on the devel-
opment set and on their respective translation pools,
than RS-100 and NB-200. Notice however that it is
misleading to compare scores across different trans-
lation pools, especially if these have substantially
different sizes. On the one hand adding more candi-
dates increases the chances of adding one with high
contribution to the corpus BLEU, and can thus in-
crease the achievable value of the objective function.
On the other hand, adding more candidates reduces
the freedom MERT has to find parameter values se-
lecting high-BLEU candidates for all sentences. To
see this, consider the extreme case when the transla-
tion pools are all of size one and are provided by an
oracle that gives the highest-BLEU reachable trans-
lation for each sentence: the objective surface is un-
informatively flat, all values of the parameters are
equally good, and the BLEU score on the devset is
the highest achievable one. If now we add to each
translation pool the second-best BLEU-scoring can-
didate, BLEU will be maximized in a half-space for
each sentence in the development set: MERT will try
to select A in the intersection of all the half-spaces, if
this is not empty, but will have to settle for a lower-
scoring compromise otherwise. The larger the trans-
lation pools, the more difficult it becomes for MERT
to “make all sentences happy”. A special case of this
is when adding more candidates extends the convex
envelopes in such a way that the best candidates fall
in the interior of the convex hull. It is difficult to
tell which of the two opposing effects (the one that
tends to increase the value of the objective function
or the one that tends to depress it) is stronger in any
</bodyText>
<page confidence="0.996052">
612
</page>
<bodyText confidence="0.99977575">
given case, but from the convergence curves it would
seem that the first prevails in the case of random
samples, whereas the second wins in the case of n-
best lists. In the case of random samples going from
size 100 to 200 systematically leads to higher BLEU
score on the devsets, as more high-BLEU candidates
are drawn. In the case of n-best lists, conversely,
this leads to lower BLEU scores, as lower-BLEU (in
average) candidates are added to translation pools
providing a sharper representation of the BLEU sur-
face and growing MERT out of the “delusion” that a
given high BLEU score is actually achieveable.
In the light of this discussion, it is interesting
to observe that the value achieved by the objective
function on the development set is only a weak pre-
dictor of performance on the test set, e.g. M-200
never converges to values above those of NB-100,
but is systematically superior on the test data.
In Macherey et al. (2008) the authors observe a
dip in the value of the objective function at the first
iteration when training using n-best lists. We did
not observe this behaviour in our experiments. A
possible explanation for this resides in the larger size
of the n-best lists we use (100 or 200, compared to
50 in the cited work) and in the smaller number of
dimensions (14 instead of 20-30).
We hinted in Section 3.3 that it would seem rea-
sonable to use samples/nbest-list of size increasing
with the length of the source sentence, so as to sam-
ple reachable translations with a more uniform den-
sity across development sentences. We tested this
idea on the French to English condition, making
samples size depend linearly on the length of the
sentence, and in such a way that the average sam-
ple size is either 100 or 200. For average sample
size 100 we obtained a BLEU of 31.55 (compared
to 31.77 with the constant-size 100 random sample)
and for average size 200 31.84 (32.46 in the cor-
responding constant-size condition). While partial,
these results are not particularly encouraging w.r.t.
using variable size samples.
Finally, in order to assess the stability of the pro-
posed training procedure across variations in devel-
opment datasets, we experimented with extracting
five distinct devsets of size 2,000 each for the French
to English RS-200 condition, keeping the test set
fixed: the maximum difference we observed was of
0.33 BLEU points.
</bodyText>
<sectionHeader confidence="0.999272" genericHeader="conclusions">
6 Conclusions
</sectionHeader>
<bodyText confidence="0.997646644444444">
We introduced a novel variant to the well-known
MERT method for performing parameter estimation
in Statistical Machine Translation systems based on
log-linear models. This method, of straightforward
implementation, is based on sampling candidates
from the posterior distribution as approximated by
an existing translation lattice in order to progres-
sively expand the translation pool that shapes the
optimization surface. This method compares favor-
ably against existing methods on different accounts.
Compared to the standard method by which N-best
lists are used to grow the translation pool, it yields
empirically better results as shown in our experi-
ments, without significant penalties in terms of com-
putational complexity. These results are in agree-
ment with the intuition that the sampling method
introduces more variety in the translation pool, and
thus allows to perform more effective parameter up-
dates towards the optimum. A hybrid strategy, con-
sisting in combining N-best lists and random sam-
ples, brings about further significant improvements,
indicating that both quality and variety are desire-
able in the translation pool that defines the optimiza-
tion surface. A possible direction to investigate in
the future consists in generalizing this hybrid strat-
egy and combining random samples where the prob-
ability distribution induced on the lattice by the cur-
rent parameters is scaled by a further temperature
parameter Q:
P′(e, a|f) a P(e, a|f),3 (7)
where for Q = 1 the random samples used in this pa-
per are obtained, for Q tending to infinite the distri-
bution becomes peaked around the single best path,
thus producing samples similar to N-best lists, and
samples from other real values of the temperature
can be combined.
Compared to the method using the whole lat-
tice, the proposed approaches have a substantially
lower computational complexity under very broad
and common assumptions, and yet yield transla-
tion quality improvements of comparable magnitude
over the baseline N-best list method.
While the method presented in this paper oper-
ates on the translation lattices generated by Phrase-
Based SMT decoders, the extension to translation
</bodyText>
<page confidence="0.997577">
613
</page>
<bodyText confidence="0.999973294117647">
forests generated by hierarchical decoders (Chiang,
2007) seems straightforward. In that case, the back-
ward sweep for propagating unnormalized posterior
probabilities is replaced by a bottom-up sweep, and
the sampling now concerns (binary) trees instead of
paths, but the rest of the procedure is substantially
unchanged. We conjecture however that the exten-
sion to translation forests would be less competitive
compared to working with the whole packed forest
(as in (Kumar et al., 2009)) than lattice sampling is
compared to working with the whole lattice. The
reason we believe this is that hierarchical models
lead to much more spurious ambiguity than phrase-
based models, so that both the N-best method and
the sampling method explore a smaller portion of the
candidate space compared to the compact represen-
tation of all the candidate translations in a beam.
</bodyText>
<sectionHeader confidence="0.996933" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.99995225">
We would like to thank Vassilina Nikoulina, Greg
Hanneman, Marc Dymetman for useful discussions
and the anonymous reviewers for their suggestions
and constructive criticism.
</bodyText>
<sectionHeader confidence="0.998183" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.995350691176471">
Chris Callison-Burch, Cameron Fordyce,
Philipp Koehn, Christof Monz, and Josh
Schroeder. Further meta-evaluation of ma-
chine translation. In Proceedings of the
ACL 2008 Workshop on Statistical Ma-
chine Translation, Columbus, Ohio, 2008.
http://www.statmt.org/wmt08/pdf/WMT09.pdf.
Daniel Cer, Daniel Jurafsky, and Christopher D.
Manning. Regularization and search for mini-
mum error rate training. In Proceedings of the
Third Workshop on Statistical Machine Transla-
tion, pages 26–34, Columbus, Ohio, 2008. ISBN
978-1-932432-09-1.
David Chiang. Hierarchical phrase-based transla-
tion. Computational Linguistics, 33(2):201–228,
2007.
David Chiang, Yuval Marton, and Philip Resnik.
Online large-margin training of syntactic and
structural translation features. In Proceedings of
the Conference on Empirical Methods in Natural
Language Processing (EMNLP ’08), pages 224–
233, Honolulu, Hawaii, 2008.
Koby Crammer and Yoram Singer. Ultracon-
servative online algorithms for multiclass prob-
lems. Journal of Machine Learning Research
(JMLR), 3:951–991, 2003. ISSN 1532-4435. doi:
http://dx.doi.org/10.1162/jmlr.2003.3.4-5.951.
Koby Crammer, Ofer Dekel, Joseph Keshet, Shai
Shalev-Shwartz, and Yoram Singer. Online
passive-aggressive algorithms. Journal of Ma-
chine Learning Research (JMLR), 7:551–585,
2006. ISSN 1532-4435.
Kevin Knight. Decoding complexity in word-
replacement translation modals. Computational
Linguistics, Squibs and Discussion, 25(4),, 1999.
Philipp Koehn, Hieu Hoang, Alexandra Birch,
Chris Callison-Burch, Marcello Federico, Nicola
Bertoldi, Brooke Cowan, Wade Shen, Christine
Moran, Richard Zens, Chris Dyer, Ondrej Bojar,
Alexandra Constantin, and Evan Herbst. Moses:
Open source toolkit for statistical machine trans-
lation. In Proceedings of the Annual Meeting
of the Association for Computationl Linguistics
(ACL ’07), pages 177–180, prague, Czech repub-
lic, 2007.
Shankar Kumar, Wolfgang Macherey, Chris Dyer,
and Franz Och. Efficient minimum error rate
training and minimum bayes-risk decoding for
translation hypergraphs and lattices. In Proceed-
ings of the Joint 47th Annual Meeting of the
ACL and the 4th International Joint Conference
on Natural Language Processing of the AFNLP,
pages 163–171, Suntec, Singapore, August 2009.
Wolfgang Macherey, Franz Josef Och, Ignacio
Thayer, and Jakob Uszkoreit. Lattice-based min-
imum error rate training for statistical machine
translation. In Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP ’08), pages 725–734, Honolulu,
Hawaii, 2008.
Franz Josef Och. Minimum error rate training
in statistical machine translation. In Proceed-
ings of the 41st Annual Meeting on Associa-
tion for Computational Linguistics (ACL ’03),
pages 160–167, Sapporo, Japan, 2003. doi:
http://dx.doi.org/10.3115/1075096.1075117.
Kishore Papineni, Salim Roukos, Todd Ward, and
Wei-Jing Zhu. BLEU: a method for automatic
</reference>
<page confidence="0.984121">
614
</page>
<reference confidence="0.998499736842105">
evaluation of machine translation. In Proceed-
ings of the 40th Annual Meeting on Association
for Computational Linguistics (ACL ’02), pages
311–318, Philadelphia, Pennsylvania, 2002. doi:
http://dx.doi.org/10.3115/1073083.1073135.
William H. Press. Numerical recipes : the art
of scientific computing. Cambridge University
Press, third edition, September 2007. ISBN
0521880688.
Stefan Riezler and John T. Maxwell. On some pit-
falls in automatic evaluation and significance test-
ing for MT. In Proceedings of the ACL Workshop
on Intrinsic and Extrinsic Evaluation Measures
for Machine Translation and/or Summarization,
pages 57–64, Ann Arbor, Michigan, June 2005.
David A. Smith and Jason Eisner. Minimum risk
annealing for training log-linear models. In Pro-
ceedings of the Joint International Conference
on Computational Linguistics and Annual meet-
ing of the Association for Computational Linguis-
tics (COLING/ACL ’06), pages 787–794, Sydney,
Australia, 2006.
Taro Watanabe, Jun Suzuki, Hajime Tsukada, and
Hideki Isozaki. Online large-margin training for
statistical machine translation. In Proceedings of
the 2007 Joint Conference on Empirical Meth-
ods in Natural Language Processing and Com-
putational Natural Language Learning (EMNLP-
CoNLL), pages 764–773, Prague, Czech Repub-
lic, June 2007.
Richard Zens, Sasa Hasan, and Hermann Ney. A
systematic comparison of training criteria for sta-
tistical machine translation. In Proceedings of
the 2007 Joint Conference on Empirical Meth-
ods in Natural Language Processing and Com-
putational Natural Language Learning (EMNLP-
CoNLL), pages 524–532, Prague, Czech Repub-
lic, June 2007.
</reference>
<page confidence="0.998558">
615
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.640879">
<title confidence="0.996328">Minimum Error Rate Training by Sampling the Translation Lattice</title>
<author confidence="0.887738">Cancedda</author>
<affiliation confidence="0.988536">Department of Computer Science Xerox Research Centre Europe</affiliation>
<address confidence="0.762057">Florida State University, USA 6 Chemin de Maupertuis, 38240 Meylan, France</address>
<email confidence="0.999022">chatterj@cs.fsu.edunicola.cancedda@xrce.xerox.com</email>
<abstract confidence="0.996924">Minimum Error Rate Training is the algorithm for log-linear model parameter training most used in state-of-the-art Statistical Machine Translation systems. In its original formulation, the algorithm uses N-best lists by the decoder to grow the Transla- Pool shapes the surface on which the actual optimization is performed. Recent work has been done to extend the algorithm to use the entire translation lattice built by the decoder, instead of N-best lists. We propose here a third, intermediate way, consisting in growing the translation pool using samples randomly drawn from the translation lattice. We empirically measure a systematic improvement in the BLEU scores compared to training using N-best lists, without suffering the increase in computational complexity associated with operating with the whole lattice.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Chris Callison-Burch</author>
<author>Cameron Fordyce</author>
<author>Philipp Koehn</author>
<author>Christof Monz</author>
<author>Josh Schroeder</author>
</authors>
<title>Further meta-evaluation of machine translation.</title>
<date>2008</date>
<booktitle>In Proceedings of the ACL 2008 Workshop on Statistical Machine Translation,</booktitle>
<location>Columbus, Ohio,</location>
<note>http://www.statmt.org/wmt08/pdf/WMT09.pdf.</note>
<contexts>
<context position="21805" citStr="Callison-Burch et al. (2008)" startWordPosition="3724" endWordPosition="3727"> at all is required by the lattice method in the outer loop, since the whole lattice is passed over for envelope propagation to the inner loop. 4 Experimental Results Experiments were conducted on the Europarl corpus with the split used for the WMT-08 shared task (Europarl training and test condition) for the language pairs English-French (En-Fr), English-Spanish (EnEs) and English-German (En-De), each in both directions. Training corpora contain between 1.2 and 1.3 million sentence pairs each, development and test datasets are of size 2,000. Detailed token and type statistics can be found in Callison-Burch et al. (2008). The Moses decoder (Koehn et al., 2007) was used for generating lattices and n-best lists. The maximum number of decoding iterations was set to twelve. Since Moses was run with its lexicalised dis4We assume all phrase pairs cover at least one source word. Figure 3: Learning curves (BLEU on the development set) for different tested conditions for English to French (top) and French to English (bottom). tortion model, there were 14 features. Moses L1- normalises the parameter vector: parameter scaling only marginally affects n-best list construction (via threshold pruning during decoding), while</context>
</contexts>
<marker>Callison-Burch, Fordyce, Koehn, Monz, Schroeder, 2008</marker>
<rawString>Chris Callison-Burch, Cameron Fordyce, Philipp Koehn, Christof Monz, and Josh Schroeder. Further meta-evaluation of machine translation. In Proceedings of the ACL 2008 Workshop on Statistical Machine Translation, Columbus, Ohio, 2008. http://www.statmt.org/wmt08/pdf/WMT09.pdf.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Cer</author>
<author>Daniel Jurafsky</author>
<author>Christopher D Manning</author>
</authors>
<title>Regularization and search for minimum error rate training.</title>
<date>2008</date>
<booktitle>In Proceedings of the Third Workshop on Statistical Machine Translation,</booktitle>
<pages>26--34</pages>
<location>Columbus, Ohio,</location>
<contexts>
<context position="9250" citStr="Cer et al. (2008)" startWordPosition="1503" endWordPosition="1506">s for optimizing the MERT criterion. Zens et al. (2007) use the MERT criterion to optimize the N-best lists using the Downhill Simplex Algorithm (Press, 2007). But the Downhill Simplex Algorithm loses its robustness as the dimension goes up by more than 10 (Macherey et al., 2008). Deterministic Annealing was suggested by Smith and Eisner (2006) where the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different search strategies were investigated by Cer et al. (2008). Work has been done to investigate a perceptron-like online margin training for statisitical machine translation (Watanabe et al., 2007). Building on this paper, the most recent work to our knowledge has been done by Chiang et al. (2008). They explore the use of the Margin Infused Relaxed Algorithm (MIRA) (Crammer and Singer, 2003; Crammer et al., 2006) algorithm instead of MERT. Macherey et al. (2008) propose a new variation of MERT where the algorithm is tuned to work on the whole phrase lattice instead of N-best list only. The new algorithm constructs the error surface of all translations </context>
</contexts>
<marker>Cer, Jurafsky, Manning, 2008</marker>
<rawString>Daniel Cer, Daniel Jurafsky, and Christopher D. Manning. Regularization and search for minimum error rate training. In Proceedings of the Third Workshop on Statistical Machine Translation, pages 26–34, Columbus, Ohio, 2008. ISBN 978-1-932432-09-1.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Chiang</author>
</authors>
<title>Hierarchical phrase-based translation.</title>
<date>2007</date>
<journal>Computational Linguistics,</journal>
<volume>33</volume>
<issue>2</issue>
<contexts>
<context position="32023" citStr="Chiang, 2007" startWordPosition="5426" endWordPosition="5427">e best path, thus producing samples similar to N-best lists, and samples from other real values of the temperature can be combined. Compared to the method using the whole lattice, the proposed approaches have a substantially lower computational complexity under very broad and common assumptions, and yet yield translation quality improvements of comparable magnitude over the baseline N-best list method. While the method presented in this paper operates on the translation lattices generated by PhraseBased SMT decoders, the extension to translation 613 forests generated by hierarchical decoders (Chiang, 2007) seems straightforward. In that case, the backward sweep for propagating unnormalized posterior probabilities is replaced by a bottom-up sweep, and the sampling now concerns (binary) trees instead of paths, but the rest of the procedure is substantially unchanged. We conjecture however that the extension to translation forests would be less competitive compared to working with the whole packed forest (as in (Kumar et al., 2009)) than lattice sampling is compared to working with the whole lattice. The reason we believe this is that hierarchical models lead to much more spurious ambiguity than p</context>
</contexts>
<marker>Chiang, 2007</marker>
<rawString>David Chiang. Hierarchical phrase-based translation. Computational Linguistics, 33(2):201–228, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Chiang</author>
<author>Yuval Marton</author>
<author>Philip Resnik</author>
</authors>
<title>Online large-margin training of syntactic and structural translation features.</title>
<date>2008</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP ’08),</booktitle>
<pages>224--233</pages>
<location>Honolulu, Hawaii,</location>
<contexts>
<context position="9488" citStr="Chiang et al. (2008)" startWordPosition="1542" endWordPosition="1545">es up by more than 10 (Macherey et al., 2008). Deterministic Annealing was suggested by Smith and Eisner (2006) where the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different search strategies were investigated by Cer et al. (2008). Work has been done to investigate a perceptron-like online margin training for statisitical machine translation (Watanabe et al., 2007). Building on this paper, the most recent work to our knowledge has been done by Chiang et al. (2008). They explore the use of the Margin Infused Relaxed Algorithm (MIRA) (Crammer and Singer, 2003; Crammer et al., 2006) algorithm instead of MERT. Macherey et al. (2008) propose a new variation of MERT where the algorithm is tuned to work on the whole phrase lattice instead of N-best list only. The new algorithm constructs the error surface of all translations that are encoded in the phrase lattice. They report significant convergence improvements and BLEU score gains over N-best MERT when trained on NIST 2008 translation tasks. More recently, this algorithm was extended to work with hypergraph</context>
</contexts>
<marker>Chiang, Marton, Resnik, 2008</marker>
<rawString>David Chiang, Yuval Marton, and Philip Resnik. Online large-margin training of syntactic and structural translation features. In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP ’08), pages 224– 233, Honolulu, Hawaii, 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Koby Crammer</author>
<author>Yoram Singer</author>
</authors>
<title>Ultraconservative online algorithms for multiclass problems.</title>
<date>2003</date>
<journal>Journal of Machine Learning Research (JMLR),</journal>
<volume>3</volume>
<pages>1532--4435</pages>
<contexts>
<context position="9583" citStr="Crammer and Singer, 2003" startWordPosition="1557" endWordPosition="1560">th and Eisner (2006) where the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different search strategies were investigated by Cer et al. (2008). Work has been done to investigate a perceptron-like online margin training for statisitical machine translation (Watanabe et al., 2007). Building on this paper, the most recent work to our knowledge has been done by Chiang et al. (2008). They explore the use of the Margin Infused Relaxed Algorithm (MIRA) (Crammer and Singer, 2003; Crammer et al., 2006) algorithm instead of MERT. Macherey et al. (2008) propose a new variation of MERT where the algorithm is tuned to work on the whole phrase lattice instead of N-best list only. The new algorithm constructs the error surface of all translations that are encoded in the phrase lattice. They report significant convergence improvements and BLEU score gains over N-best MERT when trained on NIST 2008 translation tasks. More recently, this algorithm was extended to work with hypergraphs encoding a huge number of translations produced by MT systems based on Synchronous Context Fr</context>
</contexts>
<marker>Crammer, Singer, 2003</marker>
<rawString>Koby Crammer and Yoram Singer. Ultraconservative online algorithms for multiclass problems. Journal of Machine Learning Research (JMLR), 3:951–991, 2003. ISSN 1532-4435. doi: http://dx.doi.org/10.1162/jmlr.2003.3.4-5.951.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Koby Crammer</author>
<author>Ofer Dekel</author>
<author>Joseph Keshet</author>
<author>Shai Shalev-Shwartz</author>
<author>Yoram Singer</author>
</authors>
<title>Online passive-aggressive algorithms.</title>
<date>2006</date>
<journal>Journal of Machine Learning Research (JMLR),</journal>
<volume>7</volume>
<pages>1532--4435</pages>
<contexts>
<context position="9606" citStr="Crammer et al., 2006" startWordPosition="1561" endWordPosition="1564"> the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different search strategies were investigated by Cer et al. (2008). Work has been done to investigate a perceptron-like online margin training for statisitical machine translation (Watanabe et al., 2007). Building on this paper, the most recent work to our knowledge has been done by Chiang et al. (2008). They explore the use of the Margin Infused Relaxed Algorithm (MIRA) (Crammer and Singer, 2003; Crammer et al., 2006) algorithm instead of MERT. Macherey et al. (2008) propose a new variation of MERT where the algorithm is tuned to work on the whole phrase lattice instead of N-best list only. The new algorithm constructs the error surface of all translations that are encoded in the phrase lattice. They report significant convergence improvements and BLEU score gains over N-best MERT when trained on NIST 2008 translation tasks. More recently, this algorithm was extended to work with hypergraphs encoding a huge number of translations produced by MT systems based on Synchronous Context Free Grammars (Kumar et a</context>
</contexts>
<marker>Crammer, Dekel, Keshet, Shalev-Shwartz, Singer, 2006</marker>
<rawString>Koby Crammer, Ofer Dekel, Joseph Keshet, Shai Shalev-Shwartz, and Yoram Singer. Online passive-aggressive algorithms. Journal of Machine Learning Research (JMLR), 7:551–585, 2006. ISSN 1532-4435.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kevin Knight</author>
</authors>
<title>Decoding complexity in wordreplacement translation modals.</title>
<date>1999</date>
<journal>Computational Linguistics, Squibs and Discussion,</journal>
<volume>25</volume>
<issue>4</issue>
<contexts>
<context position="7486" citStr="Knight, 1999" startWordPosition="1214" endWordPosition="1215">lternative method consisting in sampling a list of candidate translations from the probability distribution induced by the translation lattice. This simple method produces a list of candidates more representative of the complete distribution than an N-best list, side-stepping the intricacies of propagating envelopes throughout the lattice. Computational complexity increases only marginally over the N-best list approach, while still yielding significant improvements in final translation quality. 1.2 The translation lattice Finding the optimal translation according to Equation 1 is NP-complete (Knight, 1999). Most phrasebased SMT systems resort then to beam-search heuristic algorithms for solving the problem approximately. In their most widespread version, PBSMT decoders proceed by progressively extending translation prefixes by adding one new phrase at a time, and correspondingly “consuming” portions of the 607 source sentence. Each prefix is associated with a node in a graph, and receives a score according to the model. Whenever two prefixes having exactly the same possible extensions are detected, the lowerscoring one is merged into the other, thus creating a re-entrancy in the directed graph,</context>
</contexts>
<marker>Knight, 1999</marker>
<rawString>Kevin Knight. Decoding complexity in wordreplacement translation modals. Computational Linguistics, Squibs and Discussion, 25(4),, 1999.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Philipp Koehn</author>
<author>Hieu Hoang</author>
<author>Alexandra Birch</author>
<author>Chris Callison-Burch</author>
<author>Marcello Federico</author>
<author>Nicola Bertoldi</author>
<author>Brooke Cowan</author>
<author>Wade Shen</author>
<author>Christine Moran</author>
<author>Richard Zens</author>
</authors>
<title>Chris Dyer, Ondrej Bojar, Alexandra Constantin, and Evan Herbst. Moses: Open source toolkit for statistical machine translation.</title>
<date>2007</date>
<booktitle>In Proceedings of the Annual Meeting of the Association for Computationl Linguistics (ACL ’07),</booktitle>
<pages>177--180</pages>
<location>prague, Czech republic,</location>
<contexts>
<context position="21845" citStr="Koehn et al., 2007" startWordPosition="3731" endWordPosition="3734">outer loop, since the whole lattice is passed over for envelope propagation to the inner loop. 4 Experimental Results Experiments were conducted on the Europarl corpus with the split used for the WMT-08 shared task (Europarl training and test condition) for the language pairs English-French (En-Fr), English-Spanish (EnEs) and English-German (En-De), each in both directions. Training corpora contain between 1.2 and 1.3 million sentence pairs each, development and test datasets are of size 2,000. Detailed token and type statistics can be found in Callison-Burch et al. (2008). The Moses decoder (Koehn et al., 2007) was used for generating lattices and n-best lists. The maximum number of decoding iterations was set to twelve. Since Moses was run with its lexicalised dis4We assume all phrase pairs cover at least one source word. Figure 3: Learning curves (BLEU on the development set) for different tested conditions for English to French (top) and French to English (bottom). tortion model, there were 14 features. Moses L1- normalises the parameter vector: parameter scaling only marginally affects n-best list construction (via threshold pruning during decoding), while it substantially impacts sampling. For </context>
</contexts>
<marker>Koehn, Hoang, Birch, Callison-Burch, Federico, Bertoldi, Cowan, Shen, Moran, Zens, 2007</marker>
<rawString>Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris Callison-Burch, Marcello Federico, Nicola Bertoldi, Brooke Cowan, Wade Shen, Christine Moran, Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra Constantin, and Evan Herbst. Moses: Open source toolkit for statistical machine translation. In Proceedings of the Annual Meeting of the Association for Computationl Linguistics (ACL ’07), pages 177–180, prague, Czech republic, 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Shankar Kumar</author>
<author>Wolfgang Macherey</author>
<author>Chris Dyer</author>
<author>Franz Och</author>
</authors>
<title>Efficient minimum error rate training and minimum bayes-risk decoding for translation hypergraphs and lattices.</title>
<date>2009</date>
<booktitle>In Proceedings of the Joint 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP,</booktitle>
<pages>163--171</pages>
<location>Suntec, Singapore,</location>
<contexts>
<context position="10215" citStr="Kumar et al., 2009" startWordPosition="1661" endWordPosition="1664">al., 2006) algorithm instead of MERT. Macherey et al. (2008) propose a new variation of MERT where the algorithm is tuned to work on the whole phrase lattice instead of N-best list only. The new algorithm constructs the error surface of all translations that are encoded in the phrase lattice. They report significant convergence improvements and BLEU score gains over N-best MERT when trained on NIST 2008 translation tasks. More recently, this algorithm was extended to work with hypergraphs encoding a huge number of translations produced by MT systems based on Synchronous Context Free Grammars (Kumar et al., 2009). All the methods cited here work on either N-best lists or from whole translation lattices built by the decoder. To our knowledge, none of them proposes sampling translations from the lattice. 3 Sampling candidate translations from the lattice In this section we first start by providing an intuition of why we believe it is a good idea to sample from the translation lattice, and then describe in detail how we do it. 3.1 An intuitive explanation The limited scope of n-best lists rules out many alternative translations that would receive the highest score for some values of the parameter vector.</context>
</contexts>
<marker>Kumar, Macherey, Dyer, Och, 2009</marker>
<rawString>Shankar Kumar, Wolfgang Macherey, Chris Dyer, and Franz Och. Efficient minimum error rate training and minimum bayes-risk decoding for translation hypergraphs and lattices. In Proceedings of the Joint 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP, pages 163–171, Suntec, Singapore, August 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wolfgang Macherey</author>
<author>Franz Josef Och</author>
<author>Ignacio Thayer</author>
<author>Jakob Uszkoreit</author>
</authors>
<title>Lattice-based minimum error rate training for statistical machine translation.</title>
<date>2008</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP ’08),</booktitle>
<pages>725--734</pages>
<location>Honolulu, Hawaii,</location>
<contexts>
<context position="6297" citStr="Macherey et al. (2008)" startWordPosition="1029" endWordPosition="1032"> MERT algorithm suffers from the following problem: it assumes at each iteration that the set of candidates with a chance to make it to the top (for some value of the parameter vector) is well represented in the translation pool. If the translation pool is formed in the standard way by merging N-best lists, this assumption is easily violated in practice. Indeed, the N-best list often contains only candidates displaying minor differences, and represents only a very small sample of alternative possible translations, strongly biased by the current parameter setting. Recognizing this shortcoming, Macherey et al. (2008) extended the MERT algorithm so as to use the whole set of candidate translations compactly represented in the search lattice produced by the decoder, instead of only a N-best list of candidates extracted from it. This is achieved via an elegant but relatively heavy dynamic programming algorithm that propagates sufficient statistics (called envelopes) throughout the whole search graph. The reported theoretical worst-case complexity of this algorithm is O(|V ||E |log |E|), where V and E are the vertex set and the edge set of the lattice respectively. We propose here an alternative method consis</context>
<context position="8913" citStr="Macherey et al., 2008" startWordPosition="1448" endWordPosition="1451"> covered in doing the extension, and the corresponding increment in model score. Figure 1: A lattice showing some possible translations of the English sentence: I have a blue car. The state with ID 0 is the start state and the one with F is the final state. 2 Related Work Since its introduction, (Och, 2003) there has been various suggestions for optimizing the MERT criterion. Zens et al. (2007) use the MERT criterion to optimize the N-best lists using the Downhill Simplex Algorithm (Press, 2007). But the Downhill Simplex Algorithm loses its robustness as the dimension goes up by more than 10 (Macherey et al., 2008). Deterministic Annealing was suggested by Smith and Eisner (2006) where the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different search strategies were investigated by Cer et al. (2008). Work has been done to investigate a perceptron-like online margin training for statisitical machine translation (Watanabe et al., 2007). Building on this paper, the most recent work to our knowledge has been done by Chiang et al. (2008). They explore the use of</context>
<context position="17411" citStr="Macherey et al., 2008" startWordPosition="2936" endWordPosition="2939">either for a fixed number of iterations, or until the norm of the update to the parameter vector goes below a threshold. 3.3 Time Complexity Analysis For each line search in the inner loop of the MERT algorithm, all methods considered here need to compute the projection of the convex envelope that can be scanned by leaving all components unchanged but one2. If we use either N-best lists or random samples to form the translation pool, and M is the size of the translation pool, then computing the envelope can be done in time O(M log M) using the SweepLine algorithm reproduced as Algorithm 1 in (Macherey et al., 2008). As shown in the same article, the lattice method for computing the envelope 2In general, moving along a 1-dimensional subspace of the parameter space. is O(|V ||E |log |E|), where V is the vertex set of the lattice, and E is its edge set. In standard decoders there is a maximum limit D to the allowed distortion, and lattice vertices are organized in J priority queues 3 of size at most a, where J is the length of the source sentence and a is a parameter of the decoder set by the user. Also, there is a limit K to the maximum number of source words spanned by a phrase, and only up to c alternat</context>
<context position="28366" citStr="Macherey et al. (2008)" startWordPosition="4838" endWordPosition="4841">awn. In the case of n-best lists, conversely, this leads to lower BLEU scores, as lower-BLEU (in average) candidates are added to translation pools providing a sharper representation of the BLEU surface and growing MERT out of the “delusion” that a given high BLEU score is actually achieveable. In the light of this discussion, it is interesting to observe that the value achieved by the objective function on the development set is only a weak predictor of performance on the test set, e.g. M-200 never converges to values above those of NB-100, but is systematically superior on the test data. In Macherey et al. (2008) the authors observe a dip in the value of the objective function at the first iteration when training using n-best lists. We did not observe this behaviour in our experiments. A possible explanation for this resides in the larger size of the n-best lists we use (100 or 200, compared to 50 in the cited work) and in the smaller number of dimensions (14 instead of 20-30). We hinted in Section 3.3 that it would seem reasonable to use samples/nbest-list of size increasing with the length of the source sentence, so as to sample reachable translations with a more uniform density across development s</context>
</contexts>
<marker>Macherey, Och, Thayer, Uszkoreit, 2008</marker>
<rawString>Wolfgang Macherey, Franz Josef Och, Ignacio Thayer, and Jakob Uszkoreit. Lattice-based minimum error rate training for statistical machine translation. In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP ’08), pages 725–734, Honolulu, Hawaii, 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Franz Josef Och</author>
</authors>
<title>Minimum error rate training in statistical machine translation.</title>
<date>2003</date>
<booktitle>In Proceedings of the 41st Annual Meeting on Association for Computational Linguistics (ACL ’03),</booktitle>
<pages>160--167</pages>
<location>Sapporo, Japan,</location>
<note>doi: http://dx.doi.org/10.3115/1075096.1075117.</note>
<contexts>
<context position="2754" citStr="Och, 2003" startWordPosition="432" endWordPosition="433">count that the exponential is monotonic. The parameters Ak determine the relative importance of the different feature functions in the global score. Best results are typically obtained by searching in the space of all possible parameter vectors A for the one that minimizes the error on a held-out development dataset for which one or more reference human translations are available, as measured by some automatic measure. This procedure is referred to as Minimum Error Rate Training (MERT). 1.1 Minimum Error Rate Training on N-best Lists The most widespread MERT algorithm is the one described in (Och, 2003). This algorithm starts by initializing the parameter vector A. For each source sentence in the development set, the decoder K AkhK(e,a,f) (2) k=1 606 Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 606–615, MIT, Massachusetts, USA, 9-11 October 2010. c�2010 Association for Computational Linguistics is used to initialize a translation pool with a list of Nbest scoring candidate translations according to the model. Using this pool and the corresponding reference translations then, an optimization procedure is run to update the parameter vector to a </context>
<context position="8599" citStr="Och, 2003" startWordPosition="1397" endWordPosition="1398">the lowerscoring one is merged into the other, thus creating a re-entrancy in the directed graph, which has then the characteristics of a lattice (Figure 1). Edges in the lattice are labelled with the phrase-pair that was used to perform the corresponding extension, the source word positions that were covered in doing the extension, and the corresponding increment in model score. Figure 1: A lattice showing some possible translations of the English sentence: I have a blue car. The state with ID 0 is the start state and the one with F is the final state. 2 Related Work Since its introduction, (Och, 2003) there has been various suggestions for optimizing the MERT criterion. Zens et al. (2007) use the MERT criterion to optimize the N-best lists using the Downhill Simplex Algorithm (Press, 2007). But the Downhill Simplex Algorithm loses its robustness as the dimension goes up by more than 10 (Macherey et al., 2008). Deterministic Annealing was suggested by Smith and Eisner (2006) where the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different searc</context>
</contexts>
<marker>Och, 2003</marker>
<rawString>Franz Josef Och. Minimum error rate training in statistical machine translation. In Proceedings of the 41st Annual Meeting on Association for Computational Linguistics (ACL ’03), pages 160–167, Sapporo, Japan, 2003. doi: http://dx.doi.org/10.3115/1075096.1075117.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kishore Papineni</author>
<author>Salim Roukos</author>
<author>Todd Ward</author>
<author>Wei-Jing Zhu</author>
</authors>
<title>BLEU: a method for automatic evaluation of machine translation.</title>
<date>2002</date>
<booktitle>In Proceedings of the 40th Annual Meeting on Association for Computational Linguistics (ACL ’02),</booktitle>
<pages>311--318</pages>
<location>Philadelphia, Pennsylvania,</location>
<note>doi: http://dx.doi.org/10.3115/1073083.1073135.</note>
<contexts>
<context position="3843" citStr="Papineni et al., 2002" startWordPosition="607" endWordPosition="610">ng this pool and the corresponding reference translations then, an optimization procedure is run to update the parameter vector to a V with reduced error. The decoder is then invoked again, the new output N-best list is merged into the translation pool, and the procedure is iterated. The algorithm stops either after a predefined number of iterations or upon convergence, which is reached when no new element is added to the translation pool of any sentence, or when the size of the update in the parameter vector is below a threshold. The error measure minimized at each iteration is usually BLEU (Papineni et al., 2002). BLEU essentially measures the precision with which the translation produced by a system recovers n-grams of different orders from the available reference translation(s), used as a gold standard. The optimization procedure that is run within each iteration on the growing translation pools is based on the key observation that BLEU only depends on the single translation receiving the highest score by the translation model (which would be the one shown to the receipient) in the translation pool. This in turn means that, for any given sentence, its contribution to BLEU changes only when the value</context>
</contexts>
<marker>Papineni, Roukos, Ward, Zhu, 2002</marker>
<rawString>Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu. BLEU: a method for automatic evaluation of machine translation. In Proceedings of the 40th Annual Meeting on Association for Computational Linguistics (ACL ’02), pages 311–318, Philadelphia, Pennsylvania, 2002. doi: http://dx.doi.org/10.3115/1073083.1073135.</rawString>
</citation>
<citation valid="true">
<authors>
<author>William H Press</author>
</authors>
<title>Numerical recipes : the art of scientific computing.</title>
<date>2007</date>
<pages>0521880688</pages>
<publisher>Cambridge University Press,</publisher>
<note>third edition,</note>
<contexts>
<context position="8791" citStr="Press, 2007" startWordPosition="1428" endWordPosition="1429">d with the phrase-pair that was used to perform the corresponding extension, the source word positions that were covered in doing the extension, and the corresponding increment in model score. Figure 1: A lattice showing some possible translations of the English sentence: I have a blue car. The state with ID 0 is the start state and the one with F is the final state. 2 Related Work Since its introduction, (Och, 2003) there has been various suggestions for optimizing the MERT criterion. Zens et al. (2007) use the MERT criterion to optimize the N-best lists using the Downhill Simplex Algorithm (Press, 2007). But the Downhill Simplex Algorithm loses its robustness as the dimension goes up by more than 10 (Macherey et al., 2008). Deterministic Annealing was suggested by Smith and Eisner (2006) where the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different search strategies were investigated by Cer et al. (2008). Work has been done to investigate a perceptron-like online margin training for statisitical machine translation (Watanabe et al., 2007). Bu</context>
</contexts>
<marker>Press, 2007</marker>
<rawString>William H. Press. Numerical recipes : the art of scientific computing. Cambridge University Press, third edition, September 2007. ISBN 0521880688.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan Riezler</author>
<author>John T Maxwell</author>
</authors>
<title>On some pitfalls in automatic evaluation and significance testing for MT.</title>
<date>2005</date>
<booktitle>In Proceedings of the ACL Workshop on Intrinsic and Extrinsic Evaluation Measures for Machine Translation and/or Summarization,</booktitle>
<pages>57--64</pages>
<location>Ann Arbor, Michigan,</location>
<contexts>
<context position="23592" citStr="Riezler and Maxwell, 2005" startWordPosition="4026" endWordPosition="4029">3. Learning curves for the other tested language pairs follow a similar pattern. 0.32 0.28 0.26 0.24 0.22 0.18 0.32 0.28 0.26 0.24 0.22 0.3 0.2 0.3 0.2 0 1 2 3 4 5 6 7 8 9 10 11 12 0 1 2 3 4 5 6 7 8 9 10 11 nb.200.en-fr s.200.en-fr m.200.en-fr s.100.en-fr nb.100.en-fr nb.200.fr-en s.200.fr-en m.200.fr-en s.100.fr-en nb.100.fr-en 611 5 Analysis of results All differences of the test scores between optimizing the parameters using nbest-200 lists and from randomly sampled lists of size 200 were found to be statisitically significant at 0.05 level at least. We used Approximate Randomization Test (Riezler and Maxwell, 2005) for the purpose, random sampling being done 1000 times. S-T NB-100 RS-100 NB-200 RS-200 En-Fr 32.47 31.36 32.32 32.76 Fr-En 32.43 31.77 32.46 32.91 En-Es 29.21 28.98 29.65 30.19 Es-En 30.97 30.41 31.22 31.66 En-De 20.36 19.92 20.55 20.93 De-En 27.48 26.98 27.30 27.62 Table 1: Test set BLEU Scores for six different “SourceTarget” Pairs Somewhat surprisingly, while random sampling with sample size of 200 yields overall the best results, random sampling with size 100 give systematically worse results than n-best lists of the same size. We conjectured that n-best lists and random samples could ha</context>
</contexts>
<marker>Riezler, Maxwell, 2005</marker>
<rawString>Stefan Riezler and John T. Maxwell. On some pitfalls in automatic evaluation and significance testing for MT. In Proceedings of the ACL Workshop on Intrinsic and Extrinsic Evaluation Measures for Machine Translation and/or Summarization, pages 57–64, Ann Arbor, Michigan, June 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David A Smith</author>
<author>Jason Eisner</author>
</authors>
<title>Minimum risk annealing for training log-linear models.</title>
<date>2006</date>
<booktitle>In Proceedings of the Joint International Conference on Computational Linguistics and Annual meeting of the Association for Computational Linguistics (COLING/ACL ’06),</booktitle>
<pages>787--794</pages>
<location>Sydney, Australia,</location>
<contexts>
<context position="8979" citStr="Smith and Eisner (2006)" startWordPosition="1458" endWordPosition="1461">in model score. Figure 1: A lattice showing some possible translations of the English sentence: I have a blue car. The state with ID 0 is the start state and the one with F is the final state. 2 Related Work Since its introduction, (Och, 2003) there has been various suggestions for optimizing the MERT criterion. Zens et al. (2007) use the MERT criterion to optimize the N-best lists using the Downhill Simplex Algorithm (Press, 2007). But the Downhill Simplex Algorithm loses its robustness as the dimension goes up by more than 10 (Macherey et al., 2008). Deterministic Annealing was suggested by Smith and Eisner (2006) where the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different search strategies were investigated by Cer et al. (2008). Work has been done to investigate a perceptron-like online margin training for statisitical machine translation (Watanabe et al., 2007). Building on this paper, the most recent work to our knowledge has been done by Chiang et al. (2008). They explore the use of the Margin Infused Relaxed Algorithm (MIRA) (Crammer and Singer, </context>
</contexts>
<marker>Smith, Eisner, 2006</marker>
<rawString>David A. Smith and Jason Eisner. Minimum risk annealing for training log-linear models. In Proceedings of the Joint International Conference on Computational Linguistics and Annual meeting of the Association for Computational Linguistics (COLING/ACL ’06), pages 787–794, Sydney, Australia, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Taro Watanabe</author>
<author>Jun Suzuki</author>
</authors>
<title>Hajime Tsukada, and Hideki Isozaki. Online large-margin training for statistical machine translation.</title>
<date>2007</date>
<booktitle>In Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLPCoNLL),</booktitle>
<pages>764--773</pages>
<location>Prague, Czech Republic,</location>
<marker>Watanabe, Suzuki, 2007</marker>
<rawString>Taro Watanabe, Jun Suzuki, Hajime Tsukada, and Hideki Isozaki. Online large-margin training for statistical machine translation. In Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLPCoNLL), pages 764–773, Prague, Czech Republic, June 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Zens</author>
<author>Sasa Hasan</author>
<author>Hermann Ney</author>
</authors>
<title>A systematic comparison of training criteria for statistical machine translation.</title>
<date>2007</date>
<booktitle>In Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLPCoNLL),</booktitle>
<pages>524--532</pages>
<location>Prague, Czech Republic,</location>
<contexts>
<context position="8688" citStr="Zens et al. (2007)" startWordPosition="1410" endWordPosition="1413"> directed graph, which has then the characteristics of a lattice (Figure 1). Edges in the lattice are labelled with the phrase-pair that was used to perform the corresponding extension, the source word positions that were covered in doing the extension, and the corresponding increment in model score. Figure 1: A lattice showing some possible translations of the English sentence: I have a blue car. The state with ID 0 is the start state and the one with F is the final state. 2 Related Work Since its introduction, (Och, 2003) there has been various suggestions for optimizing the MERT criterion. Zens et al. (2007) use the MERT criterion to optimize the N-best lists using the Downhill Simplex Algorithm (Press, 2007). But the Downhill Simplex Algorithm loses its robustness as the dimension goes up by more than 10 (Macherey et al., 2008). Deterministic Annealing was suggested by Smith and Eisner (2006) where the authors propose to minimize the expected loss or risk. They define the expectation using a probability distribution over hypotheses that they gradually anneal to focus on the 1-best hypothesis. Different search strategies were investigated by Cer et al. (2008). Work has been done to investigate a </context>
</contexts>
<marker>Zens, Hasan, Ney, 2007</marker>
<rawString>Richard Zens, Sasa Hasan, and Hermann Ney. A systematic comparison of training criteria for statistical machine translation. In Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLPCoNLL), pages 524–532, Prague, Czech Republic, June 2007.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>