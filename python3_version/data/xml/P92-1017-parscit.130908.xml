<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000007">
<sectionHeader confidence="0.94634" genericHeader="abstract">
INSIDE-OUTSIDE REESTIMATION FROM PARTIALLY
BRACKETED CORPORA
</sectionHeader>
<address confidence="0.448103">
Fernando Pereira
2D-447, AT&amp;T Bell Laboratories
PO Box 636, 600 Mountain Ave
Murray Hill, NJ 07974-0636
</address>
<email confidence="0.690657">
pereiraftesearch.att.com
</email>
<author confidence="0.976583">
Yves Schabes
</author>
<affiliation confidence="0.9945265">
Dept. of Computer and Information Science
University of Pennsylvania
</affiliation>
<address confidence="0.791809">
Philadelphia, PA 19104-6389
</address>
<email confidence="0.921362">
schabesOunagi.cis.upenn.edu
</email>
<sectionHeader confidence="0.984344" genericHeader="introduction">
ABSTRACT
</sectionHeader>
<bodyText confidence="0.999774">
The inside-outside algorithm for inferring the pa-
rameters of a stochastic context-free grammar is
extended to take advantage of constituent in-
formation (constituent bracketing) in a partially
parsed corpus. Experiments on formal and natu-
ral language parsed corpora show that the new al-
gorithm can achieve faster convergence and better
modeling of hierarchical structure than the origi-
nal one. In particular, over 90% test set bracket-
ing accuracy was achieved for grammars inferred
by our algorithm from a training set of hand-
parsed part-of-speech strings for sentences in the
Air Travel Information System spoken language
corpus. Finally, the new algorithm has better time
complexity than the original one when sufficient
bracketing is provided.
</bodyText>
<sectionHeader confidence="0.996653" genericHeader="method">
1. MOTIVATION
</sectionHeader>
<bodyText confidence="0.999812109375">
The most successful stochastic language models
have been based on finite-state descriptions such
as n-grams or hidden Markov models (HMMs)
(Jelinek et al., 1992). However, finite-state mod-
els cannot represent the hierarchical structure of
natural language and are thus ill-suited to tasks
in which that structure is essential, such as lan-
guage understanding or translation. It is then
natural to consider stochastic versions of more
powerful grammar formalisms and their gram-
matical inference problems. For instance, Baker
(1979) generalized the parameter estimation meth-
ods for HMMs to stochastic context-free gram-
mars (SCFGs) (Booth, 1969) as the inside-outside
algorithm. Unfortunately, the application of
SCFGs and the original inside-outside algorithm
to natural-language modeling has been so far in-
conclusive (Lan and Young, 1990; Jelinek et al.,
1990; Lan and Young, 1991).
Several reasons can be adduced for the difficul-
ties. First, each iteration of the inside-outside al-
gorithm on a grammar with n nonterminals may
require 0(n31iv13) time per training sentence w,
while each iteration of its finite-state counterpart
training an HMM with s states requires at worst
(s2iw i) time per training sentence. That com-
plexity makes the training of sufficiently large
grammars computationally impractical.
Second, the convergence properties of the algo-
rithm sharply deteriorate as the number of non-
terminal symbols increases. This fact can be intu-
itively understood by observing that the algorithm
searches for the maximum of a function whose
number of local maxima grows with the number of
nonterminals. Finally, while SCFGs do provide a
hierarchical model of the language, that structure
is undetermined by raw text and only by chance
will the inferred grammar agree with qualitative
linguistic judgments of sentence structure. For ex-
ample, since in English texts pronouns are very
likely to immediately precede a verb, a grammar
inferred from raw text will tend to make a con-
stituent of a subject pronoun and the following
verb.
We describe here an extension of the inside-outside
algorithm that infers the parameters of a stochas-
tic context-free grammar from a partially parsed
corpus, thus providing a tighter connection be-
tween the hierarchical structure of the inferred
SCFG and that of the training corpus. The al-
gorithm takes advantage of whatever constituent
information is provided by the training corpus
bracketing, ranging from a complete constituent
analysis of the training sentences to the unparsed
corpus used for the original inside-outside algo-
rithm. In the latter case, the new algorithm re-
duces to the original one.
Using a partially parsed corpus has several advan-
tages. First, the the result grammars yield con-
stituent boundaries that cannot be inferred from
raw text. In addition, the number of iterations
needed to reach a good grammar can be reduced;
in extreme cases, a good solution is found from
parsed text but not from raw text. Finally, the
</bodyText>
<page confidence="0.996852">
128
</page>
<bodyText confidence="0.9955885">
new algorithm has better time complexity when
sufficient bracketing information is provided.
</bodyText>
<sectionHeader confidence="0.6347915" genericHeader="method">
2. PARTIALLY BRACKETED
TEXT
</sectionHeader>
<bodyText confidence="0.999942">
Informally, a partially bracketed corpus is a set
of sentences annotated with parentheses marking
constituent boundaries that any analysis of the
corpus should respect. More precisely, we start
from a corpus C consisting of bracketed strings,
which are pairs c = (w, 8) where w is a string
and B is a bracketing of w. For convenience, we
will define the length of the bracketed string c by
</bodyText>
<equation confidence="0.712526">
ici = iwi•
</equation>
<bodyText confidence="0.997075633333333">
Given a string w = w1 • •WIWI, a span of w is a
pair of integers (i, j) with 0 &lt; i &lt; j &lt; lw I, which
delimits a substring iwi = wi+i • • wj of w. The
abbreviation iw will stand for iw1„1.
A bracketing B of a string w is a finite set of spans
on w (that is, a finite set of pairs or integers (i, j)
with 0 &lt; i &lt; j &lt; lwl) satisfying a consistency
condition that ensures that each span (i, j) can be
seen as delimiting a string iwi consisting of a se-
quence of one of more. The consistency condition
is simply that no two spans in a bracketing may
overlap, where two spans (i, j) and (k, 1) overlap if
eitheri&lt;k&lt;j&lt;lork&lt;i&lt;1&lt;j.
Two bracketings of the same string are said to be
compatible if their union is consistent. A span s is
valid for a bracketing B if {s} is compatible with
B.
Note that there is no requirement that a bracket-
ing of w describe fully a constituent structure of
w. In fact, some or all sentences in a corpus may
have empty bracketings, in which case the new al-
gorithm behaves like the original one.
To present the notion of compatibility between a
derivation and a bracketed string, we need first
to define the span of a symbol occurrence in a
context-free derivation. Let (w,B) be a brack-
eted string, and ao = al • • • an, = w be
a derivation of w for (S)CFG G. The span of a
symbol occurrence in aj is defined inductively as
follows:
</bodyText>
<listItem confidence="0.8070212">
• If j m, aj = w E E*, and the span of wi in
aj is (i— 1,i).
• If j &lt; in, then aj = /9A7, aj+i =
(3X1 • • • Xk-y, where A X1 • • • Xk is a rule
of G. Then the span of A in aj is
</listItem>
<bodyText confidence="0.999988714285714">
where for each 1 &lt; 1 &lt; k, j,) is the span
of Xi in a3+1. The spans in aj of the symbol
occurrences in /3 and 7 are the same as those
of the corresponding symbols in aj+1.
A derivation of w is then compatible with a brack-
eting B of ID if the span of every symbol occurrence
in the derivation is valid in B.
</bodyText>
<sectionHeader confidence="0.983187" genericHeader="method">
3. GRAMMAR REESTIMATION
</sectionHeader>
<bodyText confidence="0.999464346153846">
The inside-outside algorithm (Baker, 1979) is a
reestimation procedure for the rule probabilities
of a Chomsky normal-form (CNF) SCFG. It takes
as inputs an initial CNF SCFG and a training cor-
pus of sentences and it iteratively reestimates rule
probabilities to maximize the probability that the
grammar used as a stochastic generator would pro-
duce the corpus.
A reestimation algorithm can be used both to re-
fine the parameter estimates for a CNF SCFG de-
rived by other means (Fujisaki et al., 1989) or to
infer a grammar from scratch. In the latter case,
the initial grammar for the inside-outside algo-
rithm consists of all possible CNF rules over given
sets N of nonterminals and E of terminals, with
suitably assigned nonzero probabilities. In what
follows, we will take N, E as fixed, n = INI, t =
lEi, and assume enumerations N = {A1, An}
and E = {b1, ,b}, with A1 the grammar start
symbol. A CNF SCFG over N, E can then be
specified by the n3 + nt probabilities Bps,, of each
possible binary rule Ap 24,. and Upon of each
possible unary rule Ap bm. Since for each p the
parameters Bp,q,,. and Upm„ are supposed to be the
probabilities of different ways of expanding Ap, we
must have for all 1 &lt;p &lt; n
</bodyText>
<equation confidence="0.886959">
EBp,q,r+Eup,„, =1 (7)
g,r
</equation>
<bodyText confidence="0.999970090909091">
For grammar inference, we give random initial val-
ues to the parameters Bp,q,„ and Up,„, subject to
the constraints (7).
The intended meaning of rule probabilities in a
SCFG is directly tied to the intuition of context-
freeness: a derivation is assigned a probability
which is the product of the probabilities of the
rules used in each step of the derivation. Context-
freeness together with the commutativity of mul-
tiplication thus allow us to identify all derivations
associated to the same parse tree, and we will
</bodyText>
<page confidence="0.989267">
129
</page>
<bodyText confidence="0.672848">
Up,,, where c = (w,B) and 4, = tvi
</bodyText>
<figure confidence="0.968375583333333">
E(i, k) E E
&lt;k
fi if p = I
otherwise.
(i—i let
E(i,k)E E 0:(i i)Bcp,r
=0 j=k+1
441,r
Pe
Pe
E B„,„„..40, /WU, 00;(i, k)
Pa
eEC 0&lt;i&lt;j&lt;k&lt;buf
E P;IPe
eEc
pc E up,„,0;0-1,0
cEc
E P;IPe
cEc
= If (0 ,Ici)
E
0&lt;i&lt;i&lt;1.1
Table I: Bracketed Reestimation
(6)
</figure>
<bodyText confidence="0.999822166666667">
speak indifferently below of derivation and anal-
ysis (parse tree) probabilities. Finally, the proba-
bility of a sentence or sentential form is the sum
of the probabilities of all its analyses (equivalently,
the sum of the probabilities of all of its leftmost
derivations from the start symbol).
</bodyText>
<subsectionHeader confidence="0.999369">
3.1. The Inside-Outside Algorithm
</subsectionHeader>
<bodyText confidence="0.999944571428572">
The basic idea of the inside-outside algorithm is
to use the current rule probabilities and the train-
ing set W to estimate the expected frequencies of
certain types of derivation step, and then compute
new rule probability estimates as appropriate ra-
tios of those expected frequency estimates. Since
these are most conveniently expressed as relative
frequencies, they are a bit loosely referred to as
inside and outside probabilities. More precisely,
for each w E W, the inside probability 1; (i, i) es-
timates the likelihood that Ap derives 1w2, while
the outside probability Cr; (i, j) estimates the like-
lihood of deriving sentential form owi Ap jw from
the start symbol Al.
</bodyText>
<subsectionHeader confidence="0.999497">
3.2. The Extended Algorithm
</subsectionHeader>
<bodyText confidence="0.990205611111111">
In adapting the inside-outside algorithm to par-
tially bracketed training text, we must take into
account the constraints that the bracketing im-
poses on possible derivations, and thus on possi-
ble phrases. Clearly, nonzero values for 1&apos;(i, j)
or ON, j) should only be allowed if iwi is com-
patible with the bracketing of w, or, equivalently,
if (i, j) is valid for the bracketing of w. There-
fore, we will in the following assume a corpus C of
bracketed strings c = (w, B), and will modify the
standard formulas for the inside and outside prob-
abilities and rule probability reestimation (Baker,
1979; Lan i and Young, 1990; Jelinek et al., 1990)
to involve only constituents whose spans are com-
patible with string bracketings. For this purpose,
for each bracketed string c = (w, B) we define the
auxiliary function
f 1 if (i, j) is valid for b E B
</bodyText>
<equation confidence="0.754972">
(i j) = 0 otherwise
</equation>
<bodyText confidence="0.9990345">
The reestimation formulas for the extended algo-
rithm are shown in Table 1. For each bracketed
sentence c in the training corpus, the inside prob-
abilities of longer spans of c are computed from
</bodyText>
<page confidence="0.98197">
130
</page>
<bodyText confidence="0.998171785714286">
those for shorter spans with the recurrence given
by equations (1) and (2). Equation (2) calculates
the expected relative frequency of derivations of
iwk from Ap compatible with the bracketing B of
c = (w,B). The multiplier e(i,k) is 1 just in case
(i, k) is valid for B, that is, when Ap can derive
iwk compatibly with B.
Similarly, the outside probabilities for shorter
spans of c can be computed from the inside prob-
abilities and the outside probabilities for longer
spans with the recurrence given by equations (3)
and (4). Once the inside and outside probabili-
ties computed for each sentence in the corpus, the
reestimated probability of binary rules, Bp,qx , and
the reestimated probability of unary rules,
are computed by the reestimation formulas (5) and
(6), which are just like the original ones (Baker,
1979; Jelinek et al., 1990; Lan i and Young, 1990)
except for the use of bracketed strings instead of
unbracketed ones.
The denominator of ratios (5) and (6) estimates
the probability that a compatible derivation of a
bracketed string in C will involve at least one ex-
pansion of nonterminal Ap. The numerator of (5)
estimates the probability that a compatible deriva-
tion of a bracketed string in C will involve rule
Ap Aq Ar, while the numerator of (6) estimates
the probability that a compatible derivation of a
string in C will rewrite Ap to bm. Thus (5) es-
timates the probability that a rewrite of Ap in a
compatible derivation of a bracketed string in C
will use rule Ap Aq Ar, and (6) estimates the
probability that an occurrence of Ap in a compat-
ible derivation of a string in in C will be rewritten
to kn. These are the best current estimates for
the binary and unary rule probabilities.
The process is then repeated with the reestimated
probabilities until the increase in the estimated
probability of the training text given the model
becomes negligible, or, what amounts to the same,
the decrease in the cross entropy estimate (nega-
tive log probability)
</bodyText>
<equation confidence="0.965826">
E log Pc
H(C,G) — cEC
(8)
E ICI
CEC
</equation>
<bodyText confidence="0.993571">
becomes negligible. Note that for comparisons
with the original algorithm, we should use the
cross-entropy estimate H(W, G) of the unbrack-
eted text W with respect to the grammar G, not
(8).
</bodyText>
<subsectionHeader confidence="0.974285">
3.3. Complexity
</subsectionHeader>
<bodyText confidence="0.999953388888889">
Each of the three steps of an iteration of the origi-
nal inside-outside algorithm — computation of in-
side probabilities, computation of outside proba-
bilities and rule probability reestimation — takes
time 0(1w13) for each training sentence w. Thus,
the whole algorithm is 0(1w I) on each training
sentence.
However, the extended algorithm performs better
when bracketing information is provided, because
it does not need to consider all possible spans for
constituents, but only those compatible with the
training set bracketing. In the limit, when the
bracketing of each training sentence comes from
a complete binary-branching analysis of the sen-
tence (a full binary bracketing), the time of each
step reduces to 0(1w1). This can be seen from the
following three facts about any full binary brack-
eting B of a string w:
</bodyText>
<listItem confidence="0.978850666666667">
1. B has 0(1w1) spans;
2. For each (i, k) in B there is exactly one split
point j such that both (i, j) and (j, k) are in
B;
3. Each valid span with respect to B must al-
ready be a member of B.
</listItem>
<bodyText confidence="0.999712416666667">
Thus, in equation (2) for instance, the number of
spans (i, k) for which e(i,k) 0 0 is O(Icl), and
there is a single j between i and k for which
e(i, j) 0 0 and&amp;quot;d(j, k) 0 0. Therefore, the total
time to compute all the k) is 0(1c1). A simi-
lar argument applies to equations (4) and (5).
Note that to achieve the above bound as well as to
take advantage of whatever bracketing is available
to improve performance, the implementation must
preprocess the training set appropriately so that
the valid spans and their split points are efficiently
enumerated.
</bodyText>
<sectionHeader confidence="0.993756" genericHeader="evaluation">
4. EXPERIMENTAL
EVALUATION
</sectionHeader>
<bodyText confidence="0.999978571428571">
The following experiments, although preliminary,
give some support to our earlier suggested advan-
tages of the inside-outside algorithm for partially
bracketed corpora.
The first experiment involves an artificial exam-
ple used by Lan i and Young (1990) in a previous
evaluation of the inside-outside algorithm. In this
</bodyText>
<page confidence="0.996917">
131
</page>
<bodyText confidence="0.999901916666667">
case, training on a bracketed corpus can lead to a
good solution while no reasonable solution is found
training on raw text only.
The second experiment uses a naturally occurring
corpus and its partially bracketed version provided
by the Penn Treebank (Brill et al., 1990). We
compare the bracketings assigned by grammars in-
ferred from raw and from bracketed training mate-
rial with the Penn Treebank bracketings of a sep-
arate test set.
To evaluate objectively the accuracy of the analy-
ses yielded by a grammar G, we use a Viterbi-style
parser to find the most likely analysis of each test
sentence according to G, and define the bracket-
ing accuracy of the grammar as the proportion
of phrases in those analyses that are compatible
in the sense defined in Section 2 with the tree
bank bracketings of the test set. This criterion is
closely related to the &amp;quot;crossing parentheses&amp;quot; score
of Black et al. (1991).&apos;
In describing the experiments, we use the nota-
tion GB for the grammar estimated by the original
inside-outside algorithm, and GB for the grammar
estimated by the bracketed algorithm.
</bodyText>
<subsectionHeader confidence="0.761331">
4.1. Inferring the Palindrome Lan-
guage
</subsectionHeader>
<bodyText confidence="0.999121">
We consider first an artificial language discussed
by Lan i and Young (1990). Our training corpus
consists of 100 sentences in the palindrome lan-
guage L over two symbols a and b
</bodyText>
<equation confidence="0.9231485">
L = WWR I w E {a,b}`).
randomly generated with the SCFG
</equation>
<bodyText confidence="0.96412305">
1Since the grammar inference procedure is restricted to
Chomsky normal form grammars, it cannot avoid difficult
decisions by leaving out brackets (thus making flatter parse
trees), as human annotators often do. Therefore, the recall
component in Black et al.&apos;s figure of merit for parser is not
needed.
The initial grammar consists of all possible CNF
rules over five nonterminals and the terminals a
and b (135 rules), with random rule probabilities.
As shown in Figure 1, with an unbracketed train-
ing set W the cross-entropy estimate H(W, GB) re-
mains almost unchanged after 40 iterations (from
1.57 to 1.44) and no useful solution is found.
In contrast, with a fully bracketed version C of
the same training set, the cross-entropy estimate
H(W,GB) decreases rapidly (1.57 initially, 0.88 af-
ter 21 iterations). Similarly, the cross-entropy esti-
mate H(C, GB) of the bracketed text with respect
to the grammar improves rapidly (2.85 initially,
0.89 after 21 iterations).
</bodyText>
<figureCaption confidence="0.994702">
Figure 1: Convergence for the Palindrome Corpus
</figureCaption>
<bodyText confidence="0.763806333333333">
The inferred grammar models correctly the palin-
drome language. Its high probability rules (p &gt;
0.1, pip&apos; &gt; 30 for any excluded rule p&apos;) are
</bodyText>
<figure confidence="0.992473285714286">
S —,. A D
S —• C B
B --4 S C
D --4. S A
A --4, b
B --. a
C --■ a
</figure>
<bodyText confidence="0.9632442">
which is a close to optimal CNF CFG for the palin-
drome language.
The results on this grammar are quite sensitive
to the size and statistics of the training corpus
and the initial rule probability assignment. In
fact, for a couple of choices of initial grammar
and corpus, the original algorithm produces gram-
mars with somewhat better cross-entropy esti-
mates than those yielded by the new one. How-
ever, in every case the bracketing accuracy on
</bodyText>
<figure confidence="0.997620791666667">
AC
BD
AA
0.1 B B
S A
- SB
-4 a
0.4
0.4
—+
0.1
A
Raw ---
Bracketed ---
5 10 15 20 25 30 35 40
Iteration
1.3
1.2
1.1
1
0.9
0.8
1
01.
</figure>
<page confidence="0.986841">
132
</page>
<bodyText confidence="0.9958745">
a separate test set for the result of bracketed
training is above 90% (100% in several cases), in
contrast to bracketing accuracies ranging between
15% and 69% for unbracketed training.
</bodyText>
<subsectionHeader confidence="0.455518">
4.2. Experiments on the ATIS Cor-
pus
</subsectionHeader>
<bodyText confidence="0.999679636363636">
For our main experiment, we used part-of-speech
sequences of spoken-language transcriptions in the
Texas Instruments subset of the Air Travel Infor-
mation System (ATIS) corpus (Hemphill et al.,
1990), and a bracketing of those sequences derived
from the parse trees for that subset in the Penn
Treebank.
Out of the 770 bracketed sentences (7812 words)
in the corpus, we used 700 as a training set C and
70 (901 words) as a test set T. The following is an
example training string
</bodyText>
<equation confidence="0.7935555">
( ( ( VB ( DT NNS ( IN ( ( NN ) (
NN CD ) ) ) ) ) ) . )
</equation>
<bodyText confidence="0.9954451">
corresponding to the parsed sentence
(Mist (the fares (for ((flight)
(number 891)))))) .)
The initial grammar consists of all 4095 possible
CNF rules over 15 nonterminals (the same number
as in the tree bank) and 48 terminal symbols for
part-of-speech tags.
A random initial grammar was trained separately
on the unbracketed and bracketed versions of the
training corpus, yielding grammars GR and GB
</bodyText>
<page confidence="0.660909125">
4.6
4.4
4.2
9
3.8
3.6
3.4
3.2
</page>
<figure confidence="0.961561">
3
2.8
1 10 20 30 40 50 60 70 75
iteration
</figure>
<figureCaption confidence="0.667159">
Figure 2: Convergence for the ATIS Corpus
Figure 2 shows that f/(W, GB) initially decreases
faster than the H(W, GB), although eventually the
</figureCaption>
<bodyText confidence="0.99960375">
two stabilize at very close values: after 75 itera-
tions, ii(W, GB)&apos;A,&apos; 2.97 and f/(W, GB) ^4 2.95.
However, the analyses assigned by the resulting
grammars to the test set are drastically different.
</bodyText>
<figure confidence="0.987045875">
100
Bracketed --- ..... -------
80
o 60
40
20
1 10 20 30 40 50 60 70 75
iteration
</figure>
<figureCaption confidence="0.999128">
Figure 3: Bracketing Accuracy for the ATIS Cor-
</figureCaption>
<bodyText confidence="0.988067806451613">
pus
With the training and test data described above,
the bracketing accuracy of GB, after 75 iterations
was only 37.35%, in contrast to 90.36% bracket-
ing accuracy for GB. Plotting bracketing accu-
racy against iterations (Figure 3), we see that un-
bracketed training does not on the whole improve
accuracy. On the other hand, bracketed training
steadily improves accuracy, although not mono-
tonically.
It is also interesting to look at some the differences
between GR and GB, as seen from the most likely
analyses they assign to certain sentences. Table
2 shows two bracketed test sentences followed by
their most likely GR and GB analyses, given for
readability in terms of the original words rather
than part-of-speech tags.
For test sentence (A), the only GB constituent
not compatible with the tree bank bracketing
is (Delta flight number), although the con-
stituent (the cheapest) is linguistically wrong.
The appearance of this constituent can be ex-
plained by lack of information in the tree bank
about the internal structure of noun phrases, as
exemplified by tree bank bracketing of the same
sentence. In contrast, the GR analysis of the same
string contains 16 constituents incompatible with
the tree bank.
For test sentence (B), the GB analysis is fully com-
patible with the tree bank. However, the GR anal-
ysis has nine incompatible constituents, which for
</bodyText>
<page confidence="0.997493">
133
</page>
<table confidence="0.993617833333333">
(A) (I would (like (to (take (Delta ((flight number) 83)) (to Atlanta)))).)
(What ((is (the cheapest fare (I can get)))) ?)
Gil (I (would (like ((to ((take (Delta flight)) (number (83 ((to Atlanta) .)))))
((What (((is the) cheapest) fare)) ((I can) (get ?)))))))
GB (((I (would (like (to (take (((Delta (flight number)) 83) (to Atlanta))))))) .)
((What (is (((the cheapest) fare) (I (can get))))) ?))
PO ((Tell me (about (the public transportation
((from SFO) (to San Francisco))))).)
Gil (Tell ((me (((about the) public) transportation))
((from SFO) ((to San) (Francisco .)))))
GB ((Tell (me (about (((the public) transportation)
((from SFO) (to (San Francisco))))))) .)
</table>
<tableCaption confidence="0.999158">
Table 2: Comparing Bracketings
</tableCaption>
<bodyText confidence="0.9997415">
example places Francisco and the final punctua-
tion in a lowest-level constituent. Since final punc-
tuation is quite often preceded by a noun, a gram-
mar inferred from raw text will tend to bracket
the noun with the punctuation mark.
This experiment illustrates the fact that although
SCFGs provide a hierarchical model of the lan-
guage, that structure is undetermined by raw text
and only by chance will the inferred grammar
agree with qualitative linguistic judgments of sen-
tence structure. This problem has also been previ-
ously observed with linguistic structure inference
methods based on mutual information. Mager-
man and Marcus (1990) addressed the problem by
specifying a predetermined list of pairs of parts of
speech (such as verb-preposition, pronoun-verb)
that can never be embraced by a low-level con-
stituent. However, these constraints are stipulated
in advance rather than being automatically de-
rived from the training material, in contrast with
what we have shown to be possible with the inside-
outside algorithm for partially bracketed corpora.
</bodyText>
<sectionHeader confidence="0.999962" genericHeader="conclusions">
5. CONCLUSIONS AND
FURTHER WORK
</sectionHeader>
<bodyText confidence="0.999628441860466">
We have introduced a modification of the well-
known inside-outside algorithm for inferring the
parameters of a stochastic context-free grammar
that can take advantage of constituent informa-
tion (constituent bracketing) in a partially brack-
eted corpus.
The method has been successfully applied to
SCFG inference for formal languages and for
part-of-speech sequences derived from the ATIS
spoken-language corpus.
The use of partially bracketed corpus can reduce
the number of iterations required for convergence
of parameter reestimation. In some cases, a good
solution is found from a bracketed corpus but not
from raw text. Most importantly, the use of par-
tially bracketed natural corpus enables the algo-
rithm to infer grammars specifying linguistically
reasonable constituent boundaries that cannot be
inferred by the inside-outside algorithm on raw
text. While none of this is very surprising, it sup-
plies some support for the view that purely unsu-
pervised, self-organizing grammar inference meth-
ods may have difficulty in distinguishing between
underlying grammatical structure and contingent
distributional regularities, or, to put it in another
way, it gives some evidence for the importance of
nondistributional regularities in language, which
in the case of bracketed training have been sup-
plied indirectly by the linguists carrying out the
bracketing.
Also of practical importance, the new algorithm
can have better time complexity for bracketed
text. In the best situation, that of a training set
with full binary-branching bracketing, the time for
each iteration is in fact linear on the total length
of the set.
These preliminary investigations could be ex-
tended in several ways. First, it is important to
determine the sensitivity of the training algorithm
to the initial probability assignments and training
corpus, as well as to lack or misplacement of brack-
ets. We have started experiments in this direction,
but reasonable statistical models of bracket elision
</bodyText>
<page confidence="0.995451">
134
</page>
<bodyText confidence="0.995113666666667">
and misplacement are lacking.
Second, we would like to extend our experiments
to larger terminal vocabularies. As is well known,
this raises both computational and data sparse-
ness problems, so clustering of terminal symbols
will be essential.
Finally, this work does not address a central weak-
ness of SCFGs, their inability to represent lex-
ical influences on distribution except by a sta-
tistically and computationally impractical pro-
liferation of nonterminal symbols. One might
instead look into versions of the current algo-
rithm for more lexically-oriented formalisms such
as stochastic lexicalized tree-adjoining grammars
(Schabes, 1992).
</bodyText>
<sectionHeader confidence="0.993959" genericHeader="acknowledgments">
ACKNOWLEGMENTS
</sectionHeader>
<bodyText confidence="0.995981285714286">
We thank Aravind Joshi and Stuart Shieber for
useful discussions, and Mitch Marcus, Beatrice
Santorini and Mary Ann Marcinkiewicz for mak-
ing available the ATIS corpus in the Penn Tree-
bank. The second author is partially supported
by DARPA Grant N0014-90-31863, ARO Grant
DAAL03-89-C-0031 and NSF Grant 111190-16592.
</bodyText>
<sectionHeader confidence="0.998251" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.903227263157895">
J.K. Baker. 1979. Trainable grammars for speech
recognition. In Jared J. Wolf and Dennis H. Klatt,
editors, Speech communication papers presented
at the 97th Meeting of the Acoustical Society of
America, MIT, Cambridge, MA, June.
E. Black, S. Abney, D. Flickenger, R. Grishman,
P. Harrison, D. Hindle, R. Ingria, F. Jelinek,
J. Klavans, M. Liberman, M. Marcus, S. Roukos,
B. Santorini, and T. Strzalkowski. 1991. A pro-
cedure for quantitatively comparing the syntactic
coverage of english grammars. In DARPA Speech
and Natural Language Workshop, pages 306-311,
Pacific Grove, California. Morgan Kaufmann.
T. Booth. 1969. Probabilistic representation of
formal languages. In Tenth Annual IEEE Sympo-
sium on Switching and Automata Theory, Octo-
ber.
Eric Brill, David Magerman, Mitchell Marcus, and
Beatrice Santorini. 1990. Deducing linguistic
structure from the statistics of large corpora. In
DARPA Speech and Natural Language Workshop.
Morgan Kaufmann, Hidden Valley, Pennsylvania,
June.
T. Fujisaki, F. Jelinek, J. Cocke, E. Black, and
T. Nishino. 1989. A probabilistic parsing method
for sentence disambiguation. In Proceedings of the
International Workshop on Parsing Technologies,
Pittsburgh, August.
Charles T. Hemphill, John J. Godfrey, and
George R. Doddington. 1990. The ATIS spoken
language systems pilot corpus. In DARPA Speech
and Natural Language Workshop, Hidden Valley,
Pennsylvania, June.
F. Jelinek, J. D. Lafferty, and R. L. Mercer. 1990.
Basic methods of probabilistic context free gram-
mars. Technical Report RC 16374 (72684), IBM,
Yorktown Heights, New York 10598.
Frederick Jelinek, Robert L. Mercer, and Salim
Roukos. 1992. Principles of lexical language mod-
eling for speech recognition. In Sada.oki Furui and
M. Mohan Sondhi, editors, Advances in Speech
Signal Processing, pages 651-699. Marcel Dekker,
Inc., New York, New York.
K. Lan i and S. J. Young. 1990. The estimation of
stochastic context-free grammars using the Inside-
Outside algorithm. Computer Speech and Lan-
guage, 4:35-56.
K. Lan i and S. J. Young. 1991. Applications of
stochastic context-free grammars using the Inside-
Outside algorithm. Computer Speech and Lan-
guage, 5:237-257.
David Magerman and Mitchell Marcus. 1990.
Parsing a natural language using mutual informa-
tion statistics. In AAAI-90, Boston, MA.
Yves Schabes. 1992. Stochastic lexicalized tree-
adjoining grammars. In COLING 92. Forthcom-
ing.
</reference>
<page confidence="0.99849">
135
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000004">
<title confidence="0.960723666666667">INSIDE-OUTSIDE REESTIMATION FROM PARTIALLY BRACKETED CORPORA 2D-447, AT&amp;T Bell Laboratories</title>
<author confidence="0.983142">PO Box</author>
<address confidence="0.994885">Murray Hill, NJ 07974-0636</address>
<email confidence="0.999689">pereiraftesearch.att.com</email>
<author confidence="0.997472">Yves Schabes</author>
<affiliation confidence="0.9999035">Dept. of Computer and Information Science University of Pennsylvania</affiliation>
<address confidence="0.998151">Philadelphia, PA 19104-6389</address>
<email confidence="0.999123">schabesOunagi.cis.upenn.edu</email>
<abstract confidence="0.968880673624288">The inside-outside algorithm for inferring the parameters of a stochastic context-free grammar is extended to take advantage of constituent information (constituent bracketing) in a partially parsed corpus. Experiments on formal and natural language parsed corpora show that the new algorithm can achieve faster convergence and better modeling of hierarchical structure than the original one. In particular, over 90% test set bracketing accuracy was achieved for grammars inferred by our algorithm from a training set of handparsed part-of-speech strings for sentences in the Air Travel Information System spoken language corpus. Finally, the new algorithm has better time complexity than the original one when sufficient bracketing is provided. 1. MOTIVATION The most successful stochastic language models have been based on finite-state descriptions such as n-grams or hidden Markov models (HMMs) (Jelinek et al., 1992). However, finite-state models cannot represent the hierarchical structure of natural language and are thus ill-suited to tasks in which that structure is essential, such as language understanding or translation. It is then natural to consider stochastic versions of more powerful grammar formalisms and their grammatical inference problems. For instance, Baker (1979) generalized the parameter estimation methods for HMMs to stochastic context-free grammars (SCFGs) (Booth, 1969) as the inside-outside algorithm. Unfortunately, the application of SCFGs and the original inside-outside algorithm to natural-language modeling has been so far inconclusive (Lan and Young, 1990; Jelinek et al., 1990; Lan and Young, 1991). Several reasons can be adduced for the difficulties. First, each iteration of the inside-outside algorithm on a grammar with n nonterminals may time per training w, while each iteration of its finite-state counterpart an HMM with requires at worst i) time per training sentence. That complexity makes the training of sufficiently large grammars computationally impractical. Second, the convergence properties of the algorithm sharply deteriorate as the number of nonterminal symbols increases. This fact can be intuitively understood by observing that the algorithm searches for the maximum of a function whose number of local maxima grows with the number of nonterminals. Finally, while SCFGs do provide a hierarchical model of the language, that structure is undetermined by raw text and only by chance will the inferred grammar agree with qualitative linguistic judgments of sentence structure. For example, since in English texts pronouns are very likely to immediately precede a verb, a grammar inferred from raw text will tend to make a conof a subject pronoun and following verb. We describe here an extension of the inside-outside algorithm that infers the parameters of a stochastic context-free grammar from a partially parsed corpus, thus providing a tighter connection between the hierarchical structure of the inferred SCFG and that of the training corpus. The algorithm takes advantage of whatever constituent information is provided by the training corpus bracketing, ranging from a complete constituent analysis of the training sentences to the unparsed corpus used for the original inside-outside algorithm. In the latter case, the new algorithm reduces to the original one. Using a partially parsed corpus has several advantages. First, the the result grammars yield constituent boundaries that cannot be inferred from raw text. In addition, the number of iterations needed to reach a good grammar can be reduced; extreme a good solution is found from parsed text but not from raw text. Finally, the 128 new algorithm has better time complexity when sufficient bracketing information is provided. 2. PARTIALLY BRACKETED TEXT Informally, a partially bracketed corpus is a set of sentences annotated with parentheses marking constituent boundaries that any analysis of the corpus should respect. More precisely, we start a corpus C consisting of strings, are pairs = (w, 8) w is a string a w. For convenience, we define the length of the bracketed string ici = iwi• a string w = • a w is a of integers j) 0 &lt; i &lt; lw I, which a substring iwi = • • wj of w. The abbreviation iw will stand for iw1„1. bracketing a string w is a finite set of spans w (that is, a finite set of pairs or integers (i, 0 &lt; &lt; j &lt; lwl) a consistency that ensures that each span (i, be as delimiting a string consisting of a sequence of one of more. The consistency condition is simply that no two spans in a bracketing may two spans j) 1) if eitheri&lt;k&lt;j&lt;lork&lt;i&lt;1&lt;j. Two bracketings of the same string are said to be their union is consistent. A span is a bracketing {s} is compatible with B. Note that there is no requirement that a bracketing of w describe fully a constituent structure of w. In fact, some or all sentences in a corpus may have empty bracketings, in which case the new algorithm behaves like the original one. To present the notion of compatibility between a derivation and a bracketed string, we need first define the a symbol occurrence in a derivation. Let (w,B) be a bracketed string, and ao = al • • • = w be derivation of w for (S)CFG span of a occurrence in defined inductively as follows: If j m, = w E E*, and the span of wi in is 1,i). If aj = = • • • X1 • • • a rule the span of A in aj is for each 1 &lt; &lt; k, j,) the span The spans in aj of the symbol occurrences in /3 and 7 are the same as those the corresponding symbols in A derivation of w is then compatible with a brackthe span of every symbol occurrence the derivation is valid in 3. GRAMMAR REESTIMATION The inside-outside algorithm (Baker, 1979) is a reestimation procedure for the rule probabilities of a Chomsky normal-form (CNF) SCFG. It takes as inputs an initial CNF SCFG and a training corpus of sentences and it iteratively reestimates rule probabilities to maximize the probability that the grammar used as a stochastic generator would produce the corpus. A reestimation algorithm can be used both to refine the parameter estimates for a CNF SCFG derived by other means (Fujisaki et al., 1989) or to infer a grammar from scratch. In the latter case, the initial grammar for the inside-outside algorithm consists of all possible CNF rules over given nonterminals and E of terminals, with suitably assigned nonzero probabilities. In what we will take as fixed, n = INI, = assume enumerations = An} E = ,b}, with A1 the grammar start A CNF SCFG over can then be by the + each binary rule 24,. of each unary rule for each p the are supposed to be the of different ways of expanding must have for all 1 &lt;p &lt; n g,r For grammar inference, we give random initial valto the parameters to the constraints (7). The intended meaning of rule probabilities in a SCFG is directly tied to the intuition of contextfreeness: a derivation is assigned a probability which is the product of the probabilities of the rules used in each step of the derivation. Contextfreeness together with the commutativity of multiplication thus allow us to identify all derivations associated to the same parse tree, and we will 129 where = (w,B) = tvi k) E &lt;k = I otherwise. let i)Bcp,r =0 441,r Pe Pe B„,„„..40, 00;(i, k) Pa eEC 0&lt;i&lt;j&lt;k&lt;buf eEc cEc cEc = If (0 ,Ici) E 0&lt;i&lt;i&lt;1.1 Table I: Bracketed Reestimation (6) speak indifferently below of derivation and analysis (parse tree) probabilities. Finally, the probability of a sentence or sentential form is the sum of the probabilities of all its analyses (equivalently, the sum of the probabilities of all of its leftmost derivations from the start symbol). The Algorithm The basic idea of the inside-outside algorithm is to use the current rule probabilities and the training set W to estimate the expected frequencies of certain types of derivation step, and then compute new rule probability estimates as appropriate ratios of those expected frequency estimates. Since these are most conveniently expressed as relative frequencies, they are a bit loosely referred to as More precisely, each w the inside probability (i, i) esthe likelihood that derives while outside probability Cr; j) the likeof deriving sentential form jw from start symbol 3.2. The Extended Algorithm In adapting the inside-outside algorithm to partially bracketed training text, we must take into account the constraints that the bracketing imposes on possible derivations, and thus on possiphrases. Clearly, nonzero values for 1&apos;(i, ON, only be allowed if iwi is compatible with the bracketing of w, or, equivalently, (i, valid for the bracketing of w. Therewe will in the following assume a corpus strings = (w, B), will modify the standard formulas for the inside and outside probabilities and rule probability reestimation (Baker, 1979; Lan i and Young, 1990; Jelinek et al., 1990) to involve only constituents whose spans are compatible with string bracketings. For this purpose, each bracketed string = (w, define the auxiliary function 1 if j) valid for j) = otherwise formulas for the extended algorithm are shown in Table 1. For each bracketed the training corpus, the inside probof longer spans of computed from 130 those for shorter spans with the recurrence given by equations (1) and (2). Equation (2) calculates the expected relative frequency of derivations of from compatible with the bracketing multiplier is 1 in case valid for is, when can derive compatibly with Similarly, the outside probabilities for shorter of be computed from the inside probabilities and the outside probabilities for longer spans with the recurrence given by equations (3) (4). Once the inside and outside probabilities computed for each sentence in the corpus, the probability of binary rules, , the reestimated probability of unary rules, are computed by the reestimation formulas (5) and (6), which are just like the original ones (Baker, 1979; Jelinek et al., 1990; Lan i and Young, 1990) except for the use of bracketed strings instead of unbracketed ones. The denominator of ratios (5) and (6) estimates the probability that a compatible derivation of a string in involve at least one exof nonterminal The numerator of (5) estimates the probability that a compatible derivaof a bracketed string in involve rule the numerator of (6) estimates the probability that a compatible derivation of a in rewrite to (5) esthe probability that a rewrite of in a derivation of a bracketed string in use rule Ar, (6) estimates the that an occurrence of in a compatderivation of a string in in be rewritten are the best current estimates for the binary and unary rule probabilities. The process is then repeated with the reestimated probabilities until the increase in the estimated probability of the training text given the model becomes negligible, or, what amounts to the same, the decrease in the cross entropy estimate (negative log probability) (8) CEC becomes negligible. Note that for comparisons with the original algorithm, we should use the estimate G) the unbrack- W with respect to the grammar (8). 3.3. Complexity Each of the three steps of an iteration of the original inside-outside algorithm — computation of inside probabilities, computation of outside probabilities and rule probability reestimation — takes 0(1w13)for each training sentence w. Thus, whole algorithm is I) on each training sentence. However, the extended algorithm performs better when bracketing information is provided, because it does not need to consider all possible spans for constituents, but only those compatible with the training set bracketing. In the limit, when the bracketing of each training sentence comes from a complete binary-branching analysis of the sen- (a bracketing), the time of each step reduces to 0(1w1). This can be seen from the following three facts about any full binary bracka string w: B has spans; For each (i, is exactly one j that both (i, k) in B; Each valid span with respect to albe a member of Thus, in equation (2) for instance, the number of k) which 0 is is a single i and which j) 0 0. Therefore, the total to compute all the is A lar argument applies to equations (4) and (5). Note that to achieve the above bound as well as to take advantage of whatever bracketing is available to improve performance, the implementation must preprocess the training set appropriately so that the valid spans and their split points are efficiently enumerated. 4. EXPERIMENTAL EVALUATION The following experiments, although preliminary, give some support to our earlier suggested advantages of the inside-outside algorithm for partially bracketed corpora. The first experiment involves an artificial example used by Lan i and Young (1990) in a previous evaluation of the inside-outside algorithm. In this 131 case, training on a bracketed corpus can lead to a good solution while no reasonable solution is found training on raw text only. The second experiment uses a naturally occurring corpus and its partially bracketed version provided by the Penn Treebank (Brill et al., 1990). We compare the bracketings assigned by grammars inferred from raw and from bracketed training material with the Penn Treebank bracketings of a separate test set. To evaluate objectively the accuracy of the analyyielded by a grammar use a Viterbi-style parser to find the most likely analysis of each test according to define the bracketaccuracy the grammar as the proportion of phrases in those analyses that are compatible in the sense defined in Section 2 with the tree bank bracketings of the test set. This criterion is closely related to the &amp;quot;crossing parentheses&amp;quot; score of Black et al. (1991).&apos; In describing the experiments, we use the notathe grammar estimated by the original algorithm, and the grammar estimated by the bracketed algorithm. 4.1. Inferring the Palindrome Language We consider first an artificial language discussed by Lan i and Young (1990). Our training corpus consists of 100 sentences in the palindrome lantwo symbols a and = w E {a,b}`). randomly generated with the SCFG the grammar inference procedure is restricted to Chomsky normal form grammars, it cannot avoid difficult decisions by leaving out brackets (thus making flatter parse trees), as human annotators often do. Therefore, the recall in Black al.&apos;s of merit for parser is not needed. The initial grammar consists of all possible CNF rules over five nonterminals and the terminals a rules), with random rule probabilities. As shown in Figure 1, with an unbracketed trainset W the cross-entropy estimate remains almost unchanged after 40 iterations (from 1.57 to 1.44) and no useful solution is found. contrast, with a fully bracketed version the same training set, the cross-entropy estimate rapidly (1.57 initially, 0.88 after 21 iterations). Similarly, the cross-entropy estiof the bracketed text with respect to the grammar improves rapidly (2.85 initially, 0.89 after 21 iterations). Figure 1: Convergence for the Palindrome Corpus The inferred grammar models correctly the palinlanguage. Its high probability rules &gt; pip&apos; &gt; 30 for any excluded rule are S —,. A D S —• C B B --4S C D --4.S A A --4, b B --. a C --■ a which is a close to optimal CNF CFG for the palindrome language. The results on this grammar are quite sensitive to the size and statistics of the training corpus and the initial rule probability assignment. In fact, for a couple of choices of initial grammar and corpus, the original algorithm produces grammars with somewhat better cross-entropy estimates than those yielded by the new one. Howevery case the bracketing accuracy on AC BD AA B S A - SB 4 0.4 0.4 —+ 0.1 A Raw --- Bracketed --- 5 10 15 20 25 30 35 40 Iteration 1.3 1.2 1.1 1 0.9 0.8 1 01. 132 a separate test set for the result of bracketed training is above 90% (100% in several cases), in contrast to bracketing accuracies ranging between 15% and 69% for unbracketed training. 4.2. Experiments on the ATIS Corpus For our main experiment, we used part-of-speech sequences of spoken-language transcriptions in the Texas Instruments subset of the Air Travel Information System (ATIS) corpus (Hemphill et al., 1990), and a bracketing of those sequences derived from the parse trees for that subset in the Penn Treebank. Out of the 770 bracketed sentences (7812 words) the corpus, we used 700 as a training set (901 words) as a test set following is an example training string ( ( VB ( DT ( ( ( NN ) ( NN CD ) ) ) ) ) ) . ) corresponding to the parsed sentence (Mist (the fares (for ((flight) (number 891)))))) .) The initial grammar consists of all 4095 possible CNF rules over 15 nonterminals (the same number as in the tree bank) and 48 terminal symbols for part-of-speech tags. A random initial grammar was trained separately on the unbracketed and bracketed versions of the corpus, yielding grammars 4.6 4.4 4.2 9 3.8 3.6 3.4 3.2 3 2.8 20 30 40 50 60 70 75 iteration Figure 2: Convergence for the ATIS Corpus 2 shows that decreases than the eventually the two stabilize at very close values: after 75 iteraii(W, and ^4 However, the analyses assigned by the resulting grammars to the test set are drastically different. 100 --- ------- 80 40 20 1 10 20 30 40 50 60 70 75 iteration 3: Bracketing for the ATIS Corpus With the training and test data described above, the bracketing accuracy of GB, after 75 iterations was only 37.35%, in contrast to 90.36% bracketaccuracy for GB.Plotting bracketing accuracy against iterations (Figure 3), we see that unbracketed training does not on the whole improve accuracy. On the other hand, bracketed training steadily improves accuracy, although not monotonically. It is also interesting to look at some the differences GB,as seen from the most likely analyses they assign to certain sentences. Table 2 shows two bracketed test sentences followed by most likely given for readability in terms of the original words rather than part-of-speech tags. test sentence (A), the only not compatible with the tree bank bracketing flight number), the concheapest) linguistically wrong. The appearance of this constituent can be explained by lack of information in the tree bank about the internal structure of noun phrases, as exemplified by tree bank bracketing of the same In contrast, the of the same string contains 16 constituents incompatible with the tree bank. test sentence (B), the is fully comwith the tree bank. However, the analysis has nine incompatible constituents, which for</abstract>
<note confidence="0.8731215">133 (A) (I would (like (to (take (Delta ((flight number) 83)) (to Atlanta)))).) ((is (the cheapest fare (I can get)))) Gil (I (would (like ((to ((take (Delta flight)) (number (83 ((to Atlanta) .))))) (((is the) cheapest) fare)) ((I can) (get GB (((I (would (like (to (take (((Delta (flight number)) 83) (to Atlanta))))))) .) ((What (is (((the cheapest) fare) (I (can get))))) ?</note>
<author confidence="0.820557">Gil public transportation SFO</author>
<abstract confidence="0.946426808080808">GB ((Tell (me (about (((the public) transportation) SFO) (to (San Francisco))))))) Table 2: Comparing Bracketings places the final punctuation in a lowest-level constituent. Since final punctuation is quite often preceded by a noun, a grammar inferred from raw text will tend to bracket the noun with the punctuation mark. This experiment illustrates the fact that although SCFGs provide a hierarchical model of the language, that structure is undetermined by raw text and only by chance will the inferred grammar agree with qualitative linguistic judgments of sentence structure. This problem has also been previously observed with linguistic structure inference methods based on mutual information. Magerman and Marcus (1990) addressed the problem by specifying a predetermined list of pairs of parts of speech (such as verb-preposition, pronoun-verb) that can never be embraced by a low-level constituent. However, these constraints are stipulated in advance rather than being automatically derived from the training material, in contrast with what we have shown to be possible with the insideoutside algorithm for partially bracketed corpora. 5. CONCLUSIONS AND FURTHER WORK We have introduced a modification of the wellknown inside-outside algorithm for inferring the parameters of a stochastic context-free grammar that can take advantage of constituent information (constituent bracketing) in a partially bracketed corpus. The method has been successfully applied to SCFG inference for formal languages and for part-of-speech sequences derived from the ATIS spoken-language corpus. The use of partially bracketed corpus can reduce the number of iterations required for convergence of parameter reestimation. In some cases, a good solution is found from a bracketed corpus but not from raw text. Most importantly, the use of partially bracketed natural corpus enables the algorithm to infer grammars specifying linguistically reasonable constituent boundaries that cannot be inferred by the inside-outside algorithm on raw text. While none of this is very surprising, it supplies some support for the view that purely unsupervised, self-organizing grammar inference methods may have difficulty in distinguishing between underlying grammatical structure and contingent distributional regularities, or, to put it in another way, it gives some evidence for the importance of nondistributional regularities in language, which in the case of bracketed training have been supplied indirectly by the linguists carrying out the bracketing. Also of practical importance, the new algorithm can have better time complexity for bracketed text. In the best situation, that of a training set with full binary-branching bracketing, the time for each iteration is in fact linear on the total length of the set. These preliminary investigations could be extended in several ways. First, it is important to determine the sensitivity of the training algorithm to the initial probability assignments and training corpus, as well as to lack or misplacement of brackets. We have started experiments in this direction, but reasonable statistical models of bracket elision 134 and misplacement are lacking. Second, we would like to extend our experiments to larger terminal vocabularies. As is well known, this raises both computational and data sparseness problems, so clustering of terminal symbols will be essential. Finally, this work does not address a central weakness of SCFGs, their inability to represent lexical influences on distribution except by a statistically and computationally impractical proliferation of nonterminal symbols. One might instead look into versions of the current algorithm for more lexically-oriented formalisms such as stochastic lexicalized tree-adjoining grammars (Schabes, 1992). ACKNOWLEGMENTS We thank Aravind Joshi and Stuart Shieber for useful discussions, and Mitch Marcus, Beatrice Santorini and Mary Ann Marcinkiewicz for making available the ATIS corpus in the Penn Treebank. The second author is partially supported by DARPA Grant N0014-90-31863, ARO Grant DAAL03-89-C-0031 and NSF Grant 111190-16592. REFERENCES J.K. Baker. 1979. Trainable grammars for speech recognition. In Jared J. Wolf and Dennis H. Klatt, communication papers presented the Meeting of the Acoustical Society of</abstract>
<address confidence="0.83394">Cambridge, MA, June.</address>
<author confidence="0.933085666666667">E Black</author>
<author confidence="0.933085666666667">S Abney</author>
<author confidence="0.933085666666667">D Flickenger</author>
<author confidence="0.933085666666667">R Grishman</author>
<author confidence="0.933085666666667">P Harrison</author>
<author confidence="0.933085666666667">D Hindle</author>
<author confidence="0.933085666666667">R Ingria</author>
<author confidence="0.933085666666667">F Jelinek</author>
<author confidence="0.933085666666667">J Klavans</author>
<author confidence="0.933085666666667">M Liberman</author>
<author confidence="0.933085666666667">M Marcus</author>
<author confidence="0.933085666666667">S Roukos</author>
<abstract confidence="0.521755666666667">B. Santorini, and T. Strzalkowski. 1991. A procedure for quantitatively comparing the syntactic of english grammars. In Speech Natural Language Workshop, 306-311, Pacific Grove, California. Morgan Kaufmann. T. Booth. 1969. Probabilistic representation of languages. In Annual IEEE Sympoon Switching and Automata Theory, October.</abstract>
<note confidence="0.6873538">Eric Brill, David Magerman, Mitchell Marcus, and Beatrice Santorini. 1990. Deducing linguistic structure from the statistics of large corpora. In DARPA Speech and Natural Language Workshop. Morgan Kaufmann, Hidden Valley, Pennsylvania,</note>
<abstract confidence="0.62847675">June. T. Fujisaki, F. Jelinek, J. Cocke, E. Black, and T. Nishino. 1989. A probabilistic parsing method sentence disambiguation. In of the</abstract>
<affiliation confidence="0.963831">International Workshop on Parsing Technologies,</affiliation>
<address confidence="0.999202">Pittsburgh, August.</address>
<author confidence="0.899896">The ATIS spoken systems pilot corpus In Speech</author>
<affiliation confidence="0.98789">Natural Language Workshop, Valley,</affiliation>
<address confidence="0.99811">Pennsylvania, June.</address>
<note confidence="0.988998333333333">F. Jelinek, J. D. Lafferty, and R. L. Mercer. 1990. Basic methods of probabilistic context free grammars. Technical Report RC 16374 (72684), IBM, Yorktown Heights, New York 10598. Frederick Jelinek, Robert L. Mercer, and Salim Roukos. 1992. Principles of lexical language mod-</note>
<title confidence="0.70695">eling for speech recognition. In Sada.oki Furui and Mohan Sondhi, editors, in Speech</title>
<author confidence="0.6286">Marcel Dekker</author>
<address confidence="0.616536">Inc., New York, New York.</address>
<abstract confidence="0.91719975">K. Lan i and S. J. Young. 1990. The estimation of stochastic context-free grammars using the Insidealgorithm. Speech and Lan- K. Lan i and S. J. Young. 1991. Applications of stochastic context-free grammars using the Insidealgorithm. Speech and Lan- David Magerman and Mitchell Marcus. 1990. Parsing a natural language using mutual informastatistics. In MA. Yves Schabes. 1992. Stochastic lexicalized treegrammars. In 92. Forthcoming.</abstract>
<intro confidence="0.857041">135</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J K Baker</author>
</authors>
<title>Trainable grammars for speech recognition. In</title>
<date>1979</date>
<booktitle>Speech communication papers presented at the 97th Meeting of the Acoustical Society of America, MIT,</booktitle>
<editor>Jared J. Wolf and Dennis H. Klatt, editors,</editor>
<location>Cambridge, MA,</location>
<contexts>
<context position="1626" citStr="Baker (1979)" startWordPosition="230" endWordPosition="231">lexity than the original one when sufficient bracketing is provided. 1. MOTIVATION The most successful stochastic language models have been based on finite-state descriptions such as n-grams or hidden Markov models (HMMs) (Jelinek et al., 1992). However, finite-state models cannot represent the hierarchical structure of natural language and are thus ill-suited to tasks in which that structure is essential, such as language understanding or translation. It is then natural to consider stochastic versions of more powerful grammar formalisms and their grammatical inference problems. For instance, Baker (1979) generalized the parameter estimation methods for HMMs to stochastic context-free grammars (SCFGs) (Booth, 1969) as the inside-outside algorithm. Unfortunately, the application of SCFGs and the original inside-outside algorithm to natural-language modeling has been so far inconclusive (Lan and Young, 1990; Jelinek et al., 1990; Lan and Young, 1991). Several reasons can be adduced for the difficulties. First, each iteration of the inside-outside algorithm on a grammar with n nonterminals may require 0(n31iv13) time per training sentence w, while each iteration of its finite-state counterpart tr</context>
<context position="6499" citStr="Baker, 1979" startWordPosition="1110" endWordPosition="1111"> a symbol occurrence in aj is defined inductively as follows: • If j m, aj = w E E*, and the span of wi in aj is (i— 1,i). • If j &lt; in, then aj = /9A7, aj+i = (3X1 • • • Xk-y, where A X1 • • • Xk is a rule of G. Then the span of A in aj is where for each 1 &lt; 1 &lt; k, j,) is the span of Xi in a3+1. The spans in aj of the symbol occurrences in /3 and 7 are the same as those of the corresponding symbols in aj+1. A derivation of w is then compatible with a bracketing B of ID if the span of every symbol occurrence in the derivation is valid in B. 3. GRAMMAR REESTIMATION The inside-outside algorithm (Baker, 1979) is a reestimation procedure for the rule probabilities of a Chomsky normal-form (CNF) SCFG. It takes as inputs an initial CNF SCFG and a training corpus of sentences and it iteratively reestimates rule probabilities to maximize the probability that the grammar used as a stochastic generator would produce the corpus. A reestimation algorithm can be used both to refine the parameter estimates for a CNF SCFG derived by other means (Fujisaki et al., 1989) or to infer a grammar from scratch. In the latter case, the initial grammar for the inside-outside algorithm consists of all possible CNF rules</context>
<context position="10113" citStr="Baker, 1979" startWordPosition="1747" endWordPosition="1748">ended Algorithm In adapting the inside-outside algorithm to partially bracketed training text, we must take into account the constraints that the bracketing imposes on possible derivations, and thus on possible phrases. Clearly, nonzero values for 1&apos;(i, j) or ON, j) should only be allowed if iwi is compatible with the bracketing of w, or, equivalently, if (i, j) is valid for the bracketing of w. Therefore, we will in the following assume a corpus C of bracketed strings c = (w, B), and will modify the standard formulas for the inside and outside probabilities and rule probability reestimation (Baker, 1979; Lan i and Young, 1990; Jelinek et al., 1990) to involve only constituents whose spans are compatible with string bracketings. For this purpose, for each bracketed string c = (w, B) we define the auxiliary function f 1 if (i, j) is valid for b E B (i j) = 0 otherwise The reestimation formulas for the extended algorithm are shown in Table 1. For each bracketed sentence c in the training corpus, the inside probabilities of longer spans of c are computed from 130 those for shorter spans with the recurrence given by equations (1) and (2). Equation (2) calculates the expected relative frequency of</context>
<context position="11397" citStr="Baker, 1979" startWordPosition="1974" endWordPosition="1975">. The multiplier e(i,k) is 1 just in case (i, k) is valid for B, that is, when Ap can derive iwk compatibly with B. Similarly, the outside probabilities for shorter spans of c can be computed from the inside probabilities and the outside probabilities for longer spans with the recurrence given by equations (3) and (4). Once the inside and outside probabilities computed for each sentence in the corpus, the reestimated probability of binary rules, Bp,qx , and the reestimated probability of unary rules, are computed by the reestimation formulas (5) and (6), which are just like the original ones (Baker, 1979; Jelinek et al., 1990; Lan i and Young, 1990) except for the use of bracketed strings instead of unbracketed ones. The denominator of ratios (5) and (6) estimates the probability that a compatible derivation of a bracketed string in C will involve at least one expansion of nonterminal Ap. The numerator of (5) estimates the probability that a compatible derivation of a bracketed string in C will involve rule Ap Aq Ar, while the numerator of (6) estimates the probability that a compatible derivation of a string in C will rewrite Ap to bm. Thus (5) estimates the probability that a rewrite of Ap </context>
</contexts>
<marker>Baker, 1979</marker>
<rawString>J.K. Baker. 1979. Trainable grammars for speech recognition. In Jared J. Wolf and Dennis H. Klatt, editors, Speech communication papers presented at the 97th Meeting of the Acoustical Society of America, MIT, Cambridge, MA, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Black</author>
<author>S Abney</author>
<author>D Flickenger</author>
<author>R Grishman</author>
<author>P Harrison</author>
<author>D Hindle</author>
<author>R Ingria</author>
<author>F Jelinek</author>
<author>J Klavans</author>
<author>M Liberman</author>
<author>M Marcus</author>
<author>S Roukos</author>
<author>B Santorini</author>
<author>T Strzalkowski</author>
</authors>
<title>A procedure for quantitatively comparing the syntactic coverage of english grammars.</title>
<date>1991</date>
<booktitle>In DARPA Speech and Natural Language Workshop,</booktitle>
<pages>306--311</pages>
<publisher>Morgan Kaufmann.</publisher>
<location>Pacific Grove, California.</location>
<contexts>
<context position="15618" citStr="Black et al. (1991)" startWordPosition="2707" endWordPosition="2710">he bracketings assigned by grammars inferred from raw and from bracketed training material with the Penn Treebank bracketings of a separate test set. To evaluate objectively the accuracy of the analyses yielded by a grammar G, we use a Viterbi-style parser to find the most likely analysis of each test sentence according to G, and define the bracketing accuracy of the grammar as the proportion of phrases in those analyses that are compatible in the sense defined in Section 2 with the tree bank bracketings of the test set. This criterion is closely related to the &amp;quot;crossing parentheses&amp;quot; score of Black et al. (1991).&apos; In describing the experiments, we use the notation GB for the grammar estimated by the original inside-outside algorithm, and GB for the grammar estimated by the bracketed algorithm. 4.1. Inferring the Palindrome Language We consider first an artificial language discussed by Lan i and Young (1990). Our training corpus consists of 100 sentences in the palindrome language L over two symbols a and b L = WWR I w E {a,b}`). randomly generated with the SCFG 1Since the grammar inference procedure is restricted to Chomsky normal form grammars, it cannot avoid difficult decisions by leaving out brac</context>
</contexts>
<marker>Black, Abney, Flickenger, Grishman, Harrison, Hindle, Ingria, Jelinek, Klavans, Liberman, Marcus, Roukos, Santorini, Strzalkowski, 1991</marker>
<rawString>E. Black, S. Abney, D. Flickenger, R. Grishman, P. Harrison, D. Hindle, R. Ingria, F. Jelinek, J. Klavans, M. Liberman, M. Marcus, S. Roukos, B. Santorini, and T. Strzalkowski. 1991. A procedure for quantitatively comparing the syntactic coverage of english grammars. In DARPA Speech and Natural Language Workshop, pages 306-311, Pacific Grove, California. Morgan Kaufmann.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Booth</author>
</authors>
<title>Probabilistic representation of formal languages.</title>
<date>1969</date>
<booktitle>In Tenth Annual IEEE Symposium on Switching and Automata Theory,</booktitle>
<contexts>
<context position="1738" citStr="Booth, 1969" startWordPosition="246" endWordPosition="247">c language models have been based on finite-state descriptions such as n-grams or hidden Markov models (HMMs) (Jelinek et al., 1992). However, finite-state models cannot represent the hierarchical structure of natural language and are thus ill-suited to tasks in which that structure is essential, such as language understanding or translation. It is then natural to consider stochastic versions of more powerful grammar formalisms and their grammatical inference problems. For instance, Baker (1979) generalized the parameter estimation methods for HMMs to stochastic context-free grammars (SCFGs) (Booth, 1969) as the inside-outside algorithm. Unfortunately, the application of SCFGs and the original inside-outside algorithm to natural-language modeling has been so far inconclusive (Lan and Young, 1990; Jelinek et al., 1990; Lan and Young, 1991). Several reasons can be adduced for the difficulties. First, each iteration of the inside-outside algorithm on a grammar with n nonterminals may require 0(n31iv13) time per training sentence w, while each iteration of its finite-state counterpart training an HMM with s states requires at worst (s2iw i) time per training sentence. That complexity makes the tra</context>
</contexts>
<marker>Booth, 1969</marker>
<rawString>T. Booth. 1969. Probabilistic representation of formal languages. In Tenth Annual IEEE Symposium on Switching and Automata Theory, October.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eric Brill</author>
<author>David Magerman</author>
<author>Mitchell Marcus</author>
<author>Beatrice Santorini</author>
</authors>
<title>Deducing linguistic structure from the statistics of large corpora.</title>
<date>1990</date>
<booktitle>In DARPA Speech and Natural Language Workshop.</booktitle>
<publisher>Morgan Kaufmann,</publisher>
<location>Hidden Valley, Pennsylvania,</location>
<contexts>
<context position="14985" citStr="Brill et al., 1990" startWordPosition="2596" endWordPosition="2599">. EXPERIMENTAL EVALUATION The following experiments, although preliminary, give some support to our earlier suggested advantages of the inside-outside algorithm for partially bracketed corpora. The first experiment involves an artificial example used by Lan i and Young (1990) in a previous evaluation of the inside-outside algorithm. In this 131 case, training on a bracketed corpus can lead to a good solution while no reasonable solution is found training on raw text only. The second experiment uses a naturally occurring corpus and its partially bracketed version provided by the Penn Treebank (Brill et al., 1990). We compare the bracketings assigned by grammars inferred from raw and from bracketed training material with the Penn Treebank bracketings of a separate test set. To evaluate objectively the accuracy of the analyses yielded by a grammar G, we use a Viterbi-style parser to find the most likely analysis of each test sentence according to G, and define the bracketing accuracy of the grammar as the proportion of phrases in those analyses that are compatible in the sense defined in Section 2 with the tree bank bracketings of the test set. This criterion is closely related to the &amp;quot;crossing parenthe</context>
</contexts>
<marker>Brill, Magerman, Marcus, Santorini, 1990</marker>
<rawString>Eric Brill, David Magerman, Mitchell Marcus, and Beatrice Santorini. 1990. Deducing linguistic structure from the statistics of large corpora. In DARPA Speech and Natural Language Workshop. Morgan Kaufmann, Hidden Valley, Pennsylvania, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Fujisaki</author>
<author>F Jelinek</author>
<author>J Cocke</author>
<author>E Black</author>
<author>T Nishino</author>
</authors>
<title>A probabilistic parsing method for sentence disambiguation.</title>
<date>1989</date>
<booktitle>In Proceedings of the International Workshop on Parsing Technologies,</booktitle>
<location>Pittsburgh,</location>
<contexts>
<context position="6955" citStr="Fujisaki et al., 1989" startWordPosition="1186" endWordPosition="1189">e with a bracketing B of ID if the span of every symbol occurrence in the derivation is valid in B. 3. GRAMMAR REESTIMATION The inside-outside algorithm (Baker, 1979) is a reestimation procedure for the rule probabilities of a Chomsky normal-form (CNF) SCFG. It takes as inputs an initial CNF SCFG and a training corpus of sentences and it iteratively reestimates rule probabilities to maximize the probability that the grammar used as a stochastic generator would produce the corpus. A reestimation algorithm can be used both to refine the parameter estimates for a CNF SCFG derived by other means (Fujisaki et al., 1989) or to infer a grammar from scratch. In the latter case, the initial grammar for the inside-outside algorithm consists of all possible CNF rules over given sets N of nonterminals and E of terminals, with suitably assigned nonzero probabilities. In what follows, we will take N, E as fixed, n = INI, t = lEi, and assume enumerations N = {A1, An} and E = {b1, ,b}, with A1 the grammar start symbol. A CNF SCFG over N, E can then be specified by the n3 + nt probabilities Bps,, of each possible binary rule Ap 24,. and Upon of each possible unary rule Ap bm. Since for each p the parameters Bp,q,,. and </context>
</contexts>
<marker>Fujisaki, Jelinek, Cocke, Black, Nishino, 1989</marker>
<rawString>T. Fujisaki, F. Jelinek, J. Cocke, E. Black, and T. Nishino. 1989. A probabilistic parsing method for sentence disambiguation. In Proceedings of the International Workshop on Parsing Technologies, Pittsburgh, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Charles T Hemphill</author>
<author>John J Godfrey</author>
<author>George R Doddington</author>
</authors>
<title>The ATIS spoken language systems pilot corpus.</title>
<date>1990</date>
<booktitle>In DARPA Speech and Natural Language Workshop,</booktitle>
<location>Hidden Valley, Pennsylvania,</location>
<contexts>
<context position="18298" citStr="Hemphill et al., 1990" startWordPosition="3179" endWordPosition="3182"> by the new one. However, in every case the bracketing accuracy on AC BD AA 0.1 B B S A - SB -4 a 0.4 0.4 —+ 0.1 A Raw --- Bracketed --- 5 10 15 20 25 30 35 40 Iteration 1.3 1.2 1.1 1 0.9 0.8 1 01. 132 a separate test set for the result of bracketed training is above 90% (100% in several cases), in contrast to bracketing accuracies ranging between 15% and 69% for unbracketed training. 4.2. Experiments on the ATIS Corpus For our main experiment, we used part-of-speech sequences of spoken-language transcriptions in the Texas Instruments subset of the Air Travel Information System (ATIS) corpus (Hemphill et al., 1990), and a bracketing of those sequences derived from the parse trees for that subset in the Penn Treebank. Out of the 770 bracketed sentences (7812 words) in the corpus, we used 700 as a training set C and 70 (901 words) as a test set T. The following is an example training string ( ( ( VB ( DT NNS ( IN ( ( NN ) ( NN CD ) ) ) ) ) ) . ) corresponding to the parsed sentence (Mist (the fares (for ((flight) (number 891)))))) .) The initial grammar consists of all 4095 possible CNF rules over 15 nonterminals (the same number as in the tree bank) and 48 terminal symbols for part-of-speech tags. A rand</context>
</contexts>
<marker>Hemphill, Godfrey, Doddington, 1990</marker>
<rawString>Charles T. Hemphill, John J. Godfrey, and George R. Doddington. 1990. The ATIS spoken language systems pilot corpus. In DARPA Speech and Natural Language Workshop, Hidden Valley, Pennsylvania, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Jelinek</author>
<author>J D Lafferty</author>
<author>R L Mercer</author>
</authors>
<title>Basic methods of probabilistic context free grammars.</title>
<date>1990</date>
<tech>Technical Report RC 16374 (72684),</tech>
<pages>10598</pages>
<location>IBM, Yorktown Heights, New York</location>
<contexts>
<context position="1954" citStr="Jelinek et al., 1990" startWordPosition="275" endWordPosition="278">f natural language and are thus ill-suited to tasks in which that structure is essential, such as language understanding or translation. It is then natural to consider stochastic versions of more powerful grammar formalisms and their grammatical inference problems. For instance, Baker (1979) generalized the parameter estimation methods for HMMs to stochastic context-free grammars (SCFGs) (Booth, 1969) as the inside-outside algorithm. Unfortunately, the application of SCFGs and the original inside-outside algorithm to natural-language modeling has been so far inconclusive (Lan and Young, 1990; Jelinek et al., 1990; Lan and Young, 1991). Several reasons can be adduced for the difficulties. First, each iteration of the inside-outside algorithm on a grammar with n nonterminals may require 0(n31iv13) time per training sentence w, while each iteration of its finite-state counterpart training an HMM with s states requires at worst (s2iw i) time per training sentence. That complexity makes the training of sufficiently large grammars computationally impractical. Second, the convergence properties of the algorithm sharply deteriorate as the number of nonterminal symbols increases. This fact can be intuitively u</context>
<context position="10159" citStr="Jelinek et al., 1990" startWordPosition="1754" endWordPosition="1757">de-outside algorithm to partially bracketed training text, we must take into account the constraints that the bracketing imposes on possible derivations, and thus on possible phrases. Clearly, nonzero values for 1&apos;(i, j) or ON, j) should only be allowed if iwi is compatible with the bracketing of w, or, equivalently, if (i, j) is valid for the bracketing of w. Therefore, we will in the following assume a corpus C of bracketed strings c = (w, B), and will modify the standard formulas for the inside and outside probabilities and rule probability reestimation (Baker, 1979; Lan i and Young, 1990; Jelinek et al., 1990) to involve only constituents whose spans are compatible with string bracketings. For this purpose, for each bracketed string c = (w, B) we define the auxiliary function f 1 if (i, j) is valid for b E B (i j) = 0 otherwise The reestimation formulas for the extended algorithm are shown in Table 1. For each bracketed sentence c in the training corpus, the inside probabilities of longer spans of c are computed from 130 those for shorter spans with the recurrence given by equations (1) and (2). Equation (2) calculates the expected relative frequency of derivations of iwk from Ap compatible with th</context>
<context position="11419" citStr="Jelinek et al., 1990" startWordPosition="1976" endWordPosition="1979">ier e(i,k) is 1 just in case (i, k) is valid for B, that is, when Ap can derive iwk compatibly with B. Similarly, the outside probabilities for shorter spans of c can be computed from the inside probabilities and the outside probabilities for longer spans with the recurrence given by equations (3) and (4). Once the inside and outside probabilities computed for each sentence in the corpus, the reestimated probability of binary rules, Bp,qx , and the reestimated probability of unary rules, are computed by the reestimation formulas (5) and (6), which are just like the original ones (Baker, 1979; Jelinek et al., 1990; Lan i and Young, 1990) except for the use of bracketed strings instead of unbracketed ones. The denominator of ratios (5) and (6) estimates the probability that a compatible derivation of a bracketed string in C will involve at least one expansion of nonterminal Ap. The numerator of (5) estimates the probability that a compatible derivation of a bracketed string in C will involve rule Ap Aq Ar, while the numerator of (6) estimates the probability that a compatible derivation of a string in C will rewrite Ap to bm. Thus (5) estimates the probability that a rewrite of Ap in a compatible deriva</context>
</contexts>
<marker>Jelinek, Lafferty, Mercer, 1990</marker>
<rawString>F. Jelinek, J. D. Lafferty, and R. L. Mercer. 1990. Basic methods of probabilistic context free grammars. Technical Report RC 16374 (72684), IBM, Yorktown Heights, New York 10598.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Frederick Jelinek</author>
<author>Robert L Mercer</author>
<author>Salim Roukos</author>
</authors>
<title>Principles of lexical language modeling for speech recognition.</title>
<date>1992</date>
<booktitle>In Sada.oki Furui</booktitle>
<pages>651--699</pages>
<editor>and M. Mohan Sondhi, editors,</editor>
<publisher>Marcel Dekker, Inc.,</publisher>
<location>New York, New York.</location>
<contexts>
<context position="1258" citStr="Jelinek et al., 1992" startWordPosition="174" endWordPosition="177">ieve faster convergence and better modeling of hierarchical structure than the original one. In particular, over 90% test set bracketing accuracy was achieved for grammars inferred by our algorithm from a training set of handparsed part-of-speech strings for sentences in the Air Travel Information System spoken language corpus. Finally, the new algorithm has better time complexity than the original one when sufficient bracketing is provided. 1. MOTIVATION The most successful stochastic language models have been based on finite-state descriptions such as n-grams or hidden Markov models (HMMs) (Jelinek et al., 1992). However, finite-state models cannot represent the hierarchical structure of natural language and are thus ill-suited to tasks in which that structure is essential, such as language understanding or translation. It is then natural to consider stochastic versions of more powerful grammar formalisms and their grammatical inference problems. For instance, Baker (1979) generalized the parameter estimation methods for HMMs to stochastic context-free grammars (SCFGs) (Booth, 1969) as the inside-outside algorithm. Unfortunately, the application of SCFGs and the original inside-outside algorithm to n</context>
</contexts>
<marker>Jelinek, Mercer, Roukos, 1992</marker>
<rawString>Frederick Jelinek, Robert L. Mercer, and Salim Roukos. 1992. Principles of lexical language modeling for speech recognition. In Sada.oki Furui and M. Mohan Sondhi, editors, Advances in Speech Signal Processing, pages 651-699. Marcel Dekker, Inc., New York, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Lan i</author>
<author>S J Young</author>
</authors>
<title>The estimation of stochastic context-free grammars using the InsideOutside algorithm.</title>
<date>1990</date>
<journal>Computer Speech and Language,</journal>
<pages>4--35</pages>
<contexts>
<context position="10136" citStr="i and Young, 1990" startWordPosition="1750" endWordPosition="1753">n adapting the inside-outside algorithm to partially bracketed training text, we must take into account the constraints that the bracketing imposes on possible derivations, and thus on possible phrases. Clearly, nonzero values for 1&apos;(i, j) or ON, j) should only be allowed if iwi is compatible with the bracketing of w, or, equivalently, if (i, j) is valid for the bracketing of w. Therefore, we will in the following assume a corpus C of bracketed strings c = (w, B), and will modify the standard formulas for the inside and outside probabilities and rule probability reestimation (Baker, 1979; Lan i and Young, 1990; Jelinek et al., 1990) to involve only constituents whose spans are compatible with string bracketings. For this purpose, for each bracketed string c = (w, B) we define the auxiliary function f 1 if (i, j) is valid for b E B (i j) = 0 otherwise The reestimation formulas for the extended algorithm are shown in Table 1. For each bracketed sentence c in the training corpus, the inside probabilities of longer spans of c are computed from 130 those for shorter spans with the recurrence given by equations (1) and (2). Equation (2) calculates the expected relative frequency of derivations of iwk fro</context>
<context position="11443" citStr="i and Young, 1990" startWordPosition="1981" endWordPosition="1984">se (i, k) is valid for B, that is, when Ap can derive iwk compatibly with B. Similarly, the outside probabilities for shorter spans of c can be computed from the inside probabilities and the outside probabilities for longer spans with the recurrence given by equations (3) and (4). Once the inside and outside probabilities computed for each sentence in the corpus, the reestimated probability of binary rules, Bp,qx , and the reestimated probability of unary rules, are computed by the reestimation formulas (5) and (6), which are just like the original ones (Baker, 1979; Jelinek et al., 1990; Lan i and Young, 1990) except for the use of bracketed strings instead of unbracketed ones. The denominator of ratios (5) and (6) estimates the probability that a compatible derivation of a bracketed string in C will involve at least one expansion of nonterminal Ap. The numerator of (5) estimates the probability that a compatible derivation of a bracketed string in C will involve rule Ap Aq Ar, while the numerator of (6) estimates the probability that a compatible derivation of a string in C will rewrite Ap to bm. Thus (5) estimates the probability that a rewrite of Ap in a compatible derivation of a bracketed stri</context>
<context position="14642" citStr="i and Young (1990)" startWordPosition="2540" endWordPosition="2543">ll the k) is 0(1c1). A similar argument applies to equations (4) and (5). Note that to achieve the above bound as well as to take advantage of whatever bracketing is available to improve performance, the implementation must preprocess the training set appropriately so that the valid spans and their split points are efficiently enumerated. 4. EXPERIMENTAL EVALUATION The following experiments, although preliminary, give some support to our earlier suggested advantages of the inside-outside algorithm for partially bracketed corpora. The first experiment involves an artificial example used by Lan i and Young (1990) in a previous evaluation of the inside-outside algorithm. In this 131 case, training on a bracketed corpus can lead to a good solution while no reasonable solution is found training on raw text only. The second experiment uses a naturally occurring corpus and its partially bracketed version provided by the Penn Treebank (Brill et al., 1990). We compare the bracketings assigned by grammars inferred from raw and from bracketed training material with the Penn Treebank bracketings of a separate test set. To evaluate objectively the accuracy of the analyses yielded by a grammar G, we use a Viterbi</context>
<context position="15919" citStr="i and Young (1990)" startWordPosition="2755" endWordPosition="2758"> sentence according to G, and define the bracketing accuracy of the grammar as the proportion of phrases in those analyses that are compatible in the sense defined in Section 2 with the tree bank bracketings of the test set. This criterion is closely related to the &amp;quot;crossing parentheses&amp;quot; score of Black et al. (1991).&apos; In describing the experiments, we use the notation GB for the grammar estimated by the original inside-outside algorithm, and GB for the grammar estimated by the bracketed algorithm. 4.1. Inferring the Palindrome Language We consider first an artificial language discussed by Lan i and Young (1990). Our training corpus consists of 100 sentences in the palindrome language L over two symbols a and b L = WWR I w E {a,b}`). randomly generated with the SCFG 1Since the grammar inference procedure is restricted to Chomsky normal form grammars, it cannot avoid difficult decisions by leaving out brackets (thus making flatter parse trees), as human annotators often do. Therefore, the recall component in Black et al.&apos;s figure of merit for parser is not needed. The initial grammar consists of all possible CNF rules over five nonterminals and the terminals a and b (135 rules), with random rule proba</context>
</contexts>
<marker>i, Young, 1990</marker>
<rawString>K. Lan i and S. J. Young. 1990. The estimation of stochastic context-free grammars using the InsideOutside algorithm. Computer Speech and Language, 4:35-56.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Lan i</author>
<author>S J Young</author>
</authors>
<title>Applications of stochastic context-free grammars using the InsideOutside algorithm.</title>
<date>1991</date>
<journal>Computer Speech and Language,</journal>
<pages>5--237</pages>
<marker>i, Young, 1991</marker>
<rawString>K. Lan i and S. J. Young. 1991. Applications of stochastic context-free grammars using the InsideOutside algorithm. Computer Speech and Language, 5:237-257.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Magerman</author>
<author>Mitchell Marcus</author>
</authors>
<title>Parsing a natural language using mutual information statistics.</title>
<date>1990</date>
<booktitle>In AAAI-90,</booktitle>
<location>Boston, MA.</location>
<contexts>
<context position="22278" citStr="Magerman and Marcus (1990)" startWordPosition="3855" endWordPosition="3859">laces Francisco and the final punctuation in a lowest-level constituent. Since final punctuation is quite often preceded by a noun, a grammar inferred from raw text will tend to bracket the noun with the punctuation mark. This experiment illustrates the fact that although SCFGs provide a hierarchical model of the language, that structure is undetermined by raw text and only by chance will the inferred grammar agree with qualitative linguistic judgments of sentence structure. This problem has also been previously observed with linguistic structure inference methods based on mutual information. Magerman and Marcus (1990) addressed the problem by specifying a predetermined list of pairs of parts of speech (such as verb-preposition, pronoun-verb) that can never be embraced by a low-level constituent. However, these constraints are stipulated in advance rather than being automatically derived from the training material, in contrast with what we have shown to be possible with the insideoutside algorithm for partially bracketed corpora. 5. CONCLUSIONS AND FURTHER WORK We have introduced a modification of the wellknown inside-outside algorithm for inferring the parameters of a stochastic context-free grammar that c</context>
</contexts>
<marker>Magerman, Marcus, 1990</marker>
<rawString>David Magerman and Mitchell Marcus. 1990. Parsing a natural language using mutual information statistics. In AAAI-90, Boston, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
</authors>
<title>Stochastic lexicalized treeadjoining grammars.</title>
<date>1992</date>
<booktitle>In COLING 92. Forthcoming.</booktitle>
<marker>Schabes, 1992</marker>
<rawString>Yves Schabes. 1992. Stochastic lexicalized treeadjoining grammars. In COLING 92. Forthcoming.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>