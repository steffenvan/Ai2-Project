<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001056">
<title confidence="0.967612">
Customizable Descriptions of Object-Oriented Models
</title>
<author confidence="0.925368">
Benoit Lavoie
</author>
<affiliation confidence="0.705182">
CoGenTex, Inc.
</affiliation>
<address confidence="0.890751">
840 Hanshaw Road
Ithaca, NY 14850, USA
</address>
<email confidence="0.994928">
benoit@cogentex.com
</email>
<author confidence="0.989219">
Owen Rainbow Ehud Reiter
</author>
<affiliation confidence="0.9858">
CoGenTex, Inc. Department of Computer Science
</affiliation>
<address confidence="0.555275">
840 Hanshaw Road University of Aberdeen
Ithaca, NY 14850, USA Aberdeen AB9 2UE, Scotland
</address>
<email confidence="0.995734">
owen@cogentex.com ereiter@csd.abdn.ac.uk
</email>
<sectionHeader confidence="0.997092" genericHeader="method">
1 Introduction: Object Models
</sectionHeader>
<bodyText confidence="0.99998775">
With the emergence of object-oriented technology
and user-centered software engineering paradigms,
the requirements analysis phase has changed in two
important ways: it has become an iterative activity,
and it has become more closely linked to the design
phase of software engineering (Davis, 1993). A re-
quirements analyst builds a formal object-oriented
(00) domain model. A user (domain expert) vali-
dates the domain model. The domain model under-
goes subsequent evolution (modification or adjust-
ment) by a (perhaps different) analyst. Finally, the
domain model is passed to the designer (system ana-
lyst), who refines the model into a 00 design model
used as the basis for implementation. Thus, we can
see that the 00 models form the basis of many im-
portant flows of information in 00 software engi-
neering methodologies. How can this information
best be communicated?
It is widely believed that graphical representations
are easy to learn and use, both for modeling and for
communication among the engineers and domain ex-
perts who tcgether develop the 00 domain model.
This belief is reflected by the large number of graph-
ical 00 modeling tools currently in research labs
and on the market. However, this belief is not accu-
rate, as some recent empirical studies show. For ex-
ample, Kim (1990) simulated a modeling task with
experienced analysts and a validation task with so-
phisticated users not familiar with the particular
graphical language. Both user groups showed se-
mantic error rates between 25% and 70% for the
separately scored areas of entities, attributes, and
relations. Relations were particularly troublesome
to both analysts and users. Petre (1995) compares
diagrams with textual representations of nested con-
ditional structures (which can be compared to 00
modeling in the complexity of the &amp;quot;paths&amp;quot; through
the system). She finds that &amp;quot;the intrinsic difficulty of
the graphics mode was the strongest effect observed&amp;quot;
(p.35). We therefore conclude that graphics, in or-
der to assure maximum communicative efficiency,
needs to be complemented by an alternate view of
the data. We claim that the alternate view should
be provided by an explanation tool that represents
the data in the form of a fluent English text. This
paper presents such a tool, the MODELEXPLAINER,
or M0DEx for short, and focuses on the customiz-
ability of the system.&apos;
Automatically generating natural-language descrip-
tions of software models and specifications is not
a new idea. The first such system was Swartout&apos;s
GIST Paraphraser (Swartout, 1982). More recent
projects include the paraphraser in ARIES (Johnson
et al., 1992); the GEMA data-flow diagram describer
(Scott and de Souza, 1989); and Gulla&apos;s paraphraser
for the PPP system (Gulla, 1993). M0DEx certainly
belongs in the tradition of these specification para-
phrasers, but the combination of features that we
will describe in the next section (and in particular
the customizability) is, to our knowledge, unique.
</bodyText>
<sectionHeader confidence="0.800769" genericHeader="method">
2 Features of M0DEx
</sectionHeader>
<bodyText confidence="0.999849222222222">
M0DEx was developed in conjunction with Ander-
sen Consulting, a large systems consulting company,
and the Software Engineering Laboratory at the
Electronic Systems Division of Raytheon, a large
Government contractor. Our design is based on ini-
tial interviews with software engineers working on a
project at Raytheon, and was modified in response
to feedback during iterative prototyping when these
software engineers were using our system.
</bodyText>
<listItem confidence="0.8986825">
• M0DEx output integrates tables, text generated
automatically, and text entered freely by the user.
Automatically generated text includes paragraphs
describing the relations between classes, and para-
</listItem>
<footnote confidence="0.9765175">
&apos;(Lavoie et et al., 1996) focuses on an earlier version of
M0DEx which did not yet include customization.
</footnote>
<page confidence="0.998785">
253
</page>
<bodyText confidence="0.991485">
graphs describing examples. The human-authored
text can capture information not deducible from the
model (such as high-level descriptions of purpose as-
sociated with the classes).
</bodyText>
<listItem confidence="0.999318117647059">
• MoDEx lets the user customize the text plans at
run-time, so that the text can reflect individual user
or organizational preferences regarding the content
and/or layout of the output.
• MoDEx uses an interactive hypertext interface
(based on standard HTML-based WWW technol-
ogy) to allow users to browse through the model.
• Input to MoDEx is based on the ODL standard de-
veloped by the Object Database Management Group
(Cattell, 1994). This allows for integration with
most existing commercial off the shelf 00 model-
ing tools. Some previous systems have paraphrased
complex modeling languages that are not widely
used outside the research community (GIST, PPP).
• MoDEx does not have access to knowledge about
the domain of the 00 model (beyond the 00 model
itself) and is therefore portable to new domains.
</listItem>
<sectionHeader confidence="0.964166" genericHeader="method">
3 A MODEx Scenario
</sectionHeader>
<bodyText confidence="0.987042428571429">
Suppose that a university has hired a consulting
company to build an information system for its ad-
ministration. Figure 1 shows a sample object model
for the university domain (adapted from (Cattell,
1994, p.56), using the notation for cardinality of
Martin and Odell (1992)) that could be designed by
a requirements analyst.
</bodyText>
<figureCaption confidence="0.999748">
Figure 1: The University 0-0 Diagram
</figureCaption>
<bodyText confidence="0.999901703703704">
Once the object model is specified, the analyst must
validate her model with a university administrator
(and maybe other university personnel, such as data-
entry clerks); as domain expert, the university ad-
ministrator may find semantic errors undetected by
the analyst. However, he is unfamiliar with the
&amp;quot;crow&apos;s foot&amp;quot; notation used in Figure 1. Instead,
he uses MoDEx to generate fluent English descrip-
tions of the model, which uses the domain terms
from the model. Figure 2 shows an example of a
description generated by MoDEx for the university
model. Suppose that in browsing through the model
using the hypertext interface, the university admin-
istrator notices that the model allows a section to
belong to zero courses, which is in fact not the case
at his university. He points out the error to the an-
alyst, who can change the model.
Suppose now that the administrator finds the texts
useful but insufficient. To change the content of the
output texts, he can go to the Text Plan Configu-
ration window for the text he has been looking at,
shown in Figure 3. He can add to the text plan spec-
ification one or more constituents (paragraphs) from
the list of pre-built constituents (shown in the lower
right corner of Figure 3). After saving his modifi-
cations, he can return to browsing the model and
obtain texts with his new specifications.
</bodyText>
<table confidence="0.9925514375">
Netscape - [Description of the Class &apos;Sect .
File Edit View Go Bookmarks aptions
Directory Window Help
[List of CI es s en] Gast of Mu des] l:Reloeit Models]
ronfigusabooj (4m1] [Ab out NI 0 delEvligar] LilcD]a
Description of the Class &apos;Section&apos;
General Observations:
A Section mart be telIght by exactly one FI de s s..ir sn&apos;t
may belono to use or more Coufses It must be L,,i..
by Me Or mare StAents and may I= it most DI.&apos;
TA
Examples:
For example. Sect&apos; is n S e dam and es usug,bt by the
P.ofeltws.,1 John Brown. It belonV to Iwo Cous,..
Mettd65 end Math201. end is ink,nn by Lwo St:idec,....-.,
Frank Belford and Sue Jones. It hit the TA Say Blake
</table>
<figureCaption confidence="0.99896">
Figure 2: Description Used for Validation
Figure 3: Text Plan Configuration Interface
Once the model has been validated by the univer-
</figureCaption>
<figure confidence="0.979170882352941">
Perm!.
name
Abdul Employee
employee-id
student-id
has_prerequisites
Course
—Ek name, number Le-
Ms
is_secuon&apos; of
takes
Section a- ssists_in
number -H—
teeekl-bY
iaken_by
TA
Professor
rank
Iller;cape • l101odelk xpl miner • Cot Plait Conligurot,onl 1:11:1
[ile Edit coY&apos;v Go 13 Dolma rks Onons Director, }±(1 n rpa
Help
11:1 mica:v.6ml 02.e■neeqr3 DOW lakssettaLnlakeesil Rebt@eeliss.i
Text Plain Ceedlon-stlen
Teel Pim
nek IDefine rpe 10a or the e. lass SCLIS5
C.E1311511011,5
0 Relelume-T •sl Care•rwlalrmerwrimO
o Fample•Se. 1710.EvappisO
i4irePtailYRIP6210101j
I:paws/140SO *II deoc n-ClessComip0000
12/4066 AO Tcd Nre■ Prorrle
Arp ebroTnin
F.ie-PeFeren,e
•—_11.111■51111111112111
</figure>
<page confidence="0.912654">
254
</page>
<figureCaption confidence="0.999807">
Figure 4: Description Used for Documentation
</figureCaption>
<bodyText confidence="0.99998684">
sity administrator, the analyst needs to document it,
including annotations about the purpose and ratio-
nale of classes and attributes. To document it, she
configures an output text type whose content and
structure is compatible with her company&apos;s stan-
dard for 00 documentation. An example of a de-
scription obtained in modifying the text plan of Fig-
ure 3 is shown in Figure 4. (This description follows
a format close to Andersen Consulting&apos;s standard
for documentation.) This description is composed
of different types of information: text generated
automatically (section Relationships), text entered
manually by the analyst because the information re-
quired is not retrievable from the CASE tool object
model (section Purpose), and tables composed both
of information generated automatically and informa-
tion entered manually (section Attributes). The ana-
lyst then saves the text plan under a new name to use
it subsequently for documentation purposes. Note
that while the generated documentation is in hyper-
text format and can be browsed interactively (as in
the 1-DOC system of Johnson and Erdem (1995)), it
can of course also be printed for traditional paper-
based documentation and/or exported to desktop
publishing environments.
</bodyText>
<sectionHeader confidence="0.941128" genericHeader="method">
4 How MoDEx Works
</sectionHeader>
<bodyText confidence="0.999900416666667">
As mentioned above, MoDEx has been developed
as a WWW application; this gives the system a
platform-independent hypertext interface. Figure 5
shows the MoDEx architecture. MoDEx runs as a
server which receives requests via a standard Web
CGI interface and returns HTML-formatted docu-
ments which can be displayed by any standard Web
browser. The documents generated by MoDEx are
always generated dynamically in response to a re-
quest, and are composed of human-authored text,
generated text and/or generated tables. The main
requests are the following:
</bodyText>
<table confidence="0.955832444444444">
ModEz
Mod&amp; Saver Interfac --&gt;
Object Model
Text Plans Specifications .
+
Annotations
T
- -• Text Planner ac Object Model
&apos;We&apos;re.,
V
&lt; -&gt;
Sentence Planner ■ English
i,&apos; ..... Grammar .....
&apos;Document &apos;
Realizer .&gt;
r English
Lexicon____
&amp;quot;4- - Formatter
</table>
<figureCaption confidence="0.974285">
Figure 5: MoDEx Server Architecture
</figureCaption>
<listItem confidence="0.992179538461539">
• Text Plan Editing. This generates an HTML doc-
ument such as that shown in Figure 3 which allows
a user to load/edit/save a text plan macro-structure
specification. A representation corresponding to
the text plan of Figure 3 is shown in Figure 6.
Once edited, this representation can be stored per-
manently in the library of text plans and can be
used to generate descriptions. In this representa-
tion, User Text indicates free text entered for a title,
while Relations-Text and Examples-Short are schema
names referring to two of the eight predefined text
functions found in a C++ class library supplied with
MoDEx.
</listItem>
<figure confidence="0.6930035">
Title Con &apos;tuents
User Text
Title ScIrma Scipma
User Text Relations-Text User Text Examples-Short
</figure>
<figureCaption confidence="0.979769">
Figure 6: Macro-Stucture for Text Plan of Figure 3
</figureCaption>
<listItem confidence="0.999589">
• Object Model Loading. This loads an object model
specification and generates a document displaying
the list of classes found in the model.
• Description Generation. This returns a description
</listItem>
<bodyText confidence="0.792495142857143">
such as that shown in Figures 2 or 4. To generate a
description, the text planner creates a text structure
corresponding to the text plan configuration selected
by the user. This text structure is a constituency
tree where the internal nodes define the text orga-
nization, while the bottom nodes define its content.
The text content can be specified as syntactic repre-
</bodyText>
<figure confidence="0.954429">
Nelscape - !Description ol lhe class &apos;Secticriej
File Edil View Go Hookinorks Options
Oireetory Window Help
5,A1.9LcIngsts] [list oF N1061101 Rel&amp;rid M sixk]
oribstp titian] Mr. 41] fAbrauggidelExpinnerl p)u.iu
Business Class: &apos;Section&apos;
Purpose/Role:
Course unit o stuabIlli can take
E thi F9tp&amp;quot;se
Attribute g:
:Aro-lute :De.s.criptime—
number e chon orlantifiarl#INTEGIT
Relationships:
Section must he taught by erectly one 1.1._fe poor end
may belong to tern or more Couises, It must be taken
by one or more Stud ank and may have at most one Ls_
nt moe
Request
Docum
</figure>
<page confidence="0.996807">
255
</page>
<bodyText confidence="0.999659538461539">
sentations, as table specification and/or as human-
authored text for the titles and the object model an-
notations. The text structure is transformed by the
sentence planner which can aggregate the syntactic
representations (cf. conjunctions and in description
on Figure 2) or introduce cue words between con-
stituents (cf. expression For example on Figure 2).
The resulting text structure is then passed to the
text realizer which uses REALPRO (Lavoie and Ram-
bow, 1997), a sentence realizer, to realize each indi-
vidual syntactic representation in the text structure.
Finally, a formatter takes the final text structure to
produce an HTML document.
</bodyText>
<listItem confidence="0.99315575">
• Object Model Annotation Editing. This allows the
user to edit human-authored annotations of the ob-
ject model. This editing can be done via links la-
belled Edit ... which appear in Figure 4. These
</listItem>
<bodyText confidence="0.5716895">
human-authored texts are used by some of the pre-
defined text functions to generate the descriptions.
</bodyText>
<sectionHeader confidence="0.999194" genericHeader="conclusions">
5 Outlook
</sectionHeader>
<bodyText confidence="0.999548173913044">
MoDEx is implemented in C++ on both UNIX
and PC platforms. It has been integrated with
two object-oriented modeling environments, the
ADM (Advanced Development Model) of the KBSA
(Knowledge-Based Software Assistant) (Benner,
1996), and with Ptech, a commercial off-the-shelf
object modeling tool. MoDEx has been fielded at a
software engineering lab at Raytheon, Inc.
The evaluation of MoDEx is based on anecdotal
user feedback obtained during iterative prototyping.
This feedback showed us that the preferences regard-
ing the content of a description can vary depending
on the organization (or type of user). The control
that MoDEx gives over the text macro-structure is
one step toward satisfying different types of text re-
quirements. We are currently extending MoDEx in
order to give the user a better control over the text
micro-structure, by replacing the set of predefined
C++ text functions with customizable ASCII spec-
ifications. This feature should make MoDEx more
easely portable among different types of users. In
addition, we intend to port MoDEx to at least two
new 00 modeling environments in the near future.
</bodyText>
<sectionHeader confidence="0.99797" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<footnote confidence="0.8278065">
The first version of MODEx for ADM was supported by
USAF Rome Laboratory under contract F30602-92-C-
0015. General enhancements to the linguistic machin-
ery were supported by SBIR F30602-92-C-0124, awarded
by USAF Rome Laboratory. Current work on MoDEx
is supported by the TRP-ROAD cooperative agreement
F30602-95-2-0005 with the sponsorship of DARPA and
Rome Laboratory. We are thankful to K. Benner, M.
</footnote>
<note confidence="0.561656">
DeBellis, J. Silver and S. Sparks of Andersen Consult-
</note>
<bodyText confidence="0.7038294">
ing, and to F. Ahmed and B. Bussiere of Raytheon Inc.,
for their comments and suggestions made during the de-
velopment of MoDEx. We also thank T. Caldwell, R.
Kittredge, T. Korelsky, D. McCullough, A. Nasr and M.
White for their comments and criticism of MoDEx.
</bodyText>
<sectionHeader confidence="0.976536" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999692704545454">
Benner, K. (1996). Addressing complexity, coordina-
tion, and automation in software development with the
KBSA/ADM. In Proceedings of the Eleventh Knowledge-
Based Software Engineering Conference (KBSE-96),
Syracuse, NY.
Cattell, R. G. G., editor (1994). The Object Database
Standard: ODMG-93. Morgan Kaufman Publishers, San
Mateo, CA.
Davis, A. M. (1993). Software Requirements. Prentice-
Hall, Inc., Upper Saddle River, NJ, revision edition.
Gulla, J. (1993). Explanation Generation in Information
Systems Engineering. PhD thesis, Norwegian Institute
of Technology.
Johnson, W. L. and Erdem, A. (1995). Interactive ex-
planation of software systems. In Proceedings of the
Tenth Knowledge-Based Software Engineering Confer-
ence (KBSE-95), pages 155-164, Boston, Mass.
Johnson, W. L., Feather, M. S., and Harris, D. R.
(1992). Representation and presentation of requirements
knowledge. IEEE Transactions on Software Engineer-
ing, pages 853-869.
Kim, Y.-G. (1990). Effects of Conceptual Data Modeling
Formalisms on User Validation and Analyst Modeling
of Information Requirements. PhD thesis, University of
Minnesota.
Lavoie, B., Rambow, 0. and Reiter, E. (1996). The
MODELEXPLAINER. In Demonstration Notes of Interna-
tional Natural Language Generation Workshop (INLG-
96), Hermonceux Castle, Sussex, UK.
Lavoie, B. and Rambow, 0. (1997). A Fast and Portable
Realizer for Text Generation Systems. In Proceedings of
the Fifth Conference on Applied Natural Language Pro-
cessing (ANLP-97), Washinghton,DC..
Martin, J. and Odell, J. (1992). Object-Oriented Analy-
sis and Design. Prentice Hall, Englewood Cliffs, NJ.
Petre, M. (1995). Why looking isn&apos;t always seeing:
Readership skills and graphical programming. Commu-
nications of the ACM, 38(6):33-42.
Scott, D. and de Souza, C. (1989). Conciliatory planning
for extended descriptive texts. Technical Report 2822,
Philips Research Laboratory, Redhill, UK.
Swartout, B. (1982). GIST English generator. In Pro-
ceedings of the National Conference on Artificial Intelli-
gence. AAAI.
</reference>
<page confidence="0.99844">
256
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.841845">
<title confidence="0.999808">Customizable Descriptions of Object-Oriented Models</title>
<author confidence="0.999896">Benoit Lavoie</author>
<affiliation confidence="0.997033">CoGenTex, Inc.</affiliation>
<address confidence="0.9999445">840 Hanshaw Road Ithaca, NY 14850, USA</address>
<email confidence="0.999823">benoit@cogentex.com</email>
<author confidence="0.99774">Owen Rainbow Ehud Reiter</author>
<affiliation confidence="0.989987">CoGenTex, Inc. Department of Computer Science</affiliation>
<address confidence="0.968323">840 Hanshaw Road University of Aberdeen Ithaca, NY 14850, USA Aberdeen AB9 2UE, Scotland</address>
<email confidence="0.91335">owen@cogentex.comereiter@csd.abdn.ac.uk</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>K Benner</author>
</authors>
<title>Addressing complexity, coordination, and automation in software development with the KBSA/ADM.</title>
<date>1996</date>
<booktitle>In Proceedings of the Eleventh KnowledgeBased Software Engineering Conference (KBSE-96),</booktitle>
<location>Syracuse, NY.</location>
<contexts>
<context position="13496" citStr="Benner, 1996" startWordPosition="2140" endWordPosition="2141">y, a formatter takes the final text structure to produce an HTML document. • Object Model Annotation Editing. This allows the user to edit human-authored annotations of the object model. This editing can be done via links labelled Edit ... which appear in Figure 4. These human-authored texts are used by some of the predefined text functions to generate the descriptions. 5 Outlook MoDEx is implemented in C++ on both UNIX and PC platforms. It has been integrated with two object-oriented modeling environments, the ADM (Advanced Development Model) of the KBSA (Knowledge-Based Software Assistant) (Benner, 1996), and with Ptech, a commercial off-the-shelf object modeling tool. MoDEx has been fielded at a software engineering lab at Raytheon, Inc. The evaluation of MoDEx is based on anecdotal user feedback obtained during iterative prototyping. This feedback showed us that the preferences regarding the content of a description can vary depending on the organization (or type of user). The control that MoDEx gives over the text macro-structure is one step toward satisfying different types of text requirements. We are currently extending MoDEx in order to give the user a better control over the text micr</context>
</contexts>
<marker>Benner, 1996</marker>
<rawString>Benner, K. (1996). Addressing complexity, coordination, and automation in software development with the KBSA/ADM. In Proceedings of the Eleventh KnowledgeBased Software Engineering Conference (KBSE-96), Syracuse, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R G G Cattell</author>
</authors>
<date>1994</date>
<booktitle>The Object Database Standard: ODMG-93.</booktitle>
<publisher>Morgan Kaufman Publishers,</publisher>
<location>San Mateo, CA.</location>
<contexts>
<context position="4711" citStr="Cattell, 1994" startWordPosition="724" endWordPosition="725">graphs describing examples. The human-authored text can capture information not deducible from the model (such as high-level descriptions of purpose associated with the classes). • MoDEx lets the user customize the text plans at run-time, so that the text can reflect individual user or organizational preferences regarding the content and/or layout of the output. • MoDEx uses an interactive hypertext interface (based on standard HTML-based WWW technology) to allow users to browse through the model. • Input to MoDEx is based on the ODL standard developed by the Object Database Management Group (Cattell, 1994). This allows for integration with most existing commercial off the shelf 00 modeling tools. Some previous systems have paraphrased complex modeling languages that are not widely used outside the research community (GIST, PPP). • MoDEx does not have access to knowledge about the domain of the 00 model (beyond the 00 model itself) and is therefore portable to new domains. 3 A MODEx Scenario Suppose that a university has hired a consulting company to build an information system for its administration. Figure 1 shows a sample object model for the university domain (adapted from (Cattell, 1994, p.</context>
</contexts>
<marker>Cattell, 1994</marker>
<rawString>Cattell, R. G. G., editor (1994). The Object Database Standard: ODMG-93. Morgan Kaufman Publishers, San Mateo, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A M Davis</author>
</authors>
<title>Software Requirements. PrenticeHall, Inc., Upper Saddle River, NJ, revision edition.</title>
<date>1993</date>
<contexts>
<context position="669" citStr="Davis, 1993" startWordPosition="88" endWordPosition="89">t Lavoie CoGenTex, Inc. 840 Hanshaw Road Ithaca, NY 14850, USA benoit@cogentex.com Owen Rainbow Ehud Reiter CoGenTex, Inc. Department of Computer Science 840 Hanshaw Road University of Aberdeen Ithaca, NY 14850, USA Aberdeen AB9 2UE, Scotland owen@cogentex.com ereiter@csd.abdn.ac.uk 1 Introduction: Object Models With the emergence of object-oriented technology and user-centered software engineering paradigms, the requirements analysis phase has changed in two important ways: it has become an iterative activity, and it has become more closely linked to the design phase of software engineering (Davis, 1993). A requirements analyst builds a formal object-oriented (00) domain model. A user (domain expert) validates the domain model. The domain model undergoes subsequent evolution (modification or adjustment) by a (perhaps different) analyst. Finally, the domain model is passed to the designer (system analyst), who refines the model into a 00 design model used as the basis for implementation. Thus, we can see that the 00 models form the basis of many important flows of information in 00 software engineering methodologies. How can this information best be communicated? It is widely believed that gra</context>
</contexts>
<marker>Davis, 1993</marker>
<rawString>Davis, A. M. (1993). Software Requirements. PrenticeHall, Inc., Upper Saddle River, NJ, revision edition.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Gulla</author>
</authors>
<title>Explanation Generation in Information Systems Engineering.</title>
<date>1993</date>
<tech>PhD thesis,</tech>
<institution>Norwegian Institute of Technology.</institution>
<contexts>
<context position="3104" citStr="Gulla, 1993" startWordPosition="478" endWordPosition="479">should be provided by an explanation tool that represents the data in the form of a fluent English text. This paper presents such a tool, the MODELEXPLAINER, or M0DEx for short, and focuses on the customizability of the system.&apos; Automatically generating natural-language descriptions of software models and specifications is not a new idea. The first such system was Swartout&apos;s GIST Paraphraser (Swartout, 1982). More recent projects include the paraphraser in ARIES (Johnson et al., 1992); the GEMA data-flow diagram describer (Scott and de Souza, 1989); and Gulla&apos;s paraphraser for the PPP system (Gulla, 1993). M0DEx certainly belongs in the tradition of these specification paraphrasers, but the combination of features that we will describe in the next section (and in particular the customizability) is, to our knowledge, unique. 2 Features of M0DEx M0DEx was developed in conjunction with Andersen Consulting, a large systems consulting company, and the Software Engineering Laboratory at the Electronic Systems Division of Raytheon, a large Government contractor. Our design is based on initial interviews with software engineers working on a project at Raytheon, and was modified in response to feedback</context>
</contexts>
<marker>Gulla, 1993</marker>
<rawString>Gulla, J. (1993). Explanation Generation in Information Systems Engineering. PhD thesis, Norwegian Institute of Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W L Johnson</author>
<author>A Erdem</author>
</authors>
<title>Interactive explanation of software systems.</title>
<date>1995</date>
<booktitle>In Proceedings of the Tenth Knowledge-Based Software Engineering Conference (KBSE-95),</booktitle>
<pages>155--164</pages>
<location>Boston, Mass.</location>
<contexts>
<context position="9431" citStr="Johnson and Erdem (1995)" startWordPosition="1488" endWordPosition="1491">ription is composed of different types of information: text generated automatically (section Relationships), text entered manually by the analyst because the information required is not retrievable from the CASE tool object model (section Purpose), and tables composed both of information generated automatically and information entered manually (section Attributes). The analyst then saves the text plan under a new name to use it subsequently for documentation purposes. Note that while the generated documentation is in hypertext format and can be browsed interactively (as in the 1-DOC system of Johnson and Erdem (1995)), it can of course also be printed for traditional paperbased documentation and/or exported to desktop publishing environments. 4 How MoDEx Works As mentioned above, MoDEx has been developed as a WWW application; this gives the system a platform-independent hypertext interface. Figure 5 shows the MoDEx architecture. MoDEx runs as a server which receives requests via a standard Web CGI interface and returns HTML-formatted documents which can be displayed by any standard Web browser. The documents generated by MoDEx are always generated dynamically in response to a request, and are composed of </context>
</contexts>
<marker>Johnson, Erdem, 1995</marker>
<rawString>Johnson, W. L. and Erdem, A. (1995). Interactive explanation of software systems. In Proceedings of the Tenth Knowledge-Based Software Engineering Conference (KBSE-95), pages 155-164, Boston, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W L Johnson</author>
<author>M S Feather</author>
<author>D R Harris</author>
</authors>
<title>Representation and presentation of requirements knowledge.</title>
<date>1992</date>
<journal>IEEE Transactions on Software Engineering,</journal>
<pages>853--869</pages>
<contexts>
<context position="2981" citStr="Johnson et al., 1992" startWordPosition="457" endWordPosition="460">ssure maximum communicative efficiency, needs to be complemented by an alternate view of the data. We claim that the alternate view should be provided by an explanation tool that represents the data in the form of a fluent English text. This paper presents such a tool, the MODELEXPLAINER, or M0DEx for short, and focuses on the customizability of the system.&apos; Automatically generating natural-language descriptions of software models and specifications is not a new idea. The first such system was Swartout&apos;s GIST Paraphraser (Swartout, 1982). More recent projects include the paraphraser in ARIES (Johnson et al., 1992); the GEMA data-flow diagram describer (Scott and de Souza, 1989); and Gulla&apos;s paraphraser for the PPP system (Gulla, 1993). M0DEx certainly belongs in the tradition of these specification paraphrasers, but the combination of features that we will describe in the next section (and in particular the customizability) is, to our knowledge, unique. 2 Features of M0DEx M0DEx was developed in conjunction with Andersen Consulting, a large systems consulting company, and the Software Engineering Laboratory at the Electronic Systems Division of Raytheon, a large Government contractor. Our design is bas</context>
</contexts>
<marker>Johnson, Feather, Harris, 1992</marker>
<rawString>Johnson, W. L., Feather, M. S., and Harris, D. R. (1992). Representation and presentation of requirements knowledge. IEEE Transactions on Software Engineering, pages 853-869.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y-G Kim</author>
</authors>
<title>Effects of Conceptual Data Modeling Formalisms on User Validation and Analyst Modeling of Information Requirements.</title>
<date>1990</date>
<tech>PhD thesis,</tech>
<institution>University of Minnesota.</institution>
<contexts>
<context position="1662" citStr="Kim (1990)" startWordPosition="255" endWordPosition="256">tation. Thus, we can see that the 00 models form the basis of many important flows of information in 00 software engineering methodologies. How can this information best be communicated? It is widely believed that graphical representations are easy to learn and use, both for modeling and for communication among the engineers and domain experts who tcgether develop the 00 domain model. This belief is reflected by the large number of graphical 00 modeling tools currently in research labs and on the market. However, this belief is not accurate, as some recent empirical studies show. For example, Kim (1990) simulated a modeling task with experienced analysts and a validation task with sophisticated users not familiar with the particular graphical language. Both user groups showed semantic error rates between 25% and 70% for the separately scored areas of entities, attributes, and relations. Relations were particularly troublesome to both analysts and users. Petre (1995) compares diagrams with textual representations of nested conditional structures (which can be compared to 00 modeling in the complexity of the &amp;quot;paths&amp;quot; through the system). She finds that &amp;quot;the intrinsic difficulty of the graphics </context>
</contexts>
<marker>Kim, 1990</marker>
<rawString>Kim, Y.-G. (1990). Effects of Conceptual Data Modeling Formalisms on User Validation and Analyst Modeling of Information Requirements. PhD thesis, University of Minnesota.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Lavoie</author>
<author>Rambow</author>
</authors>
<title>The MODELEXPLAINER.</title>
<date>1996</date>
<booktitle>In Demonstration Notes of International Natural Language Generation Workshop (INLG96), Hermonceux</booktitle>
<location>Castle, Sussex, UK.</location>
<marker>Lavoie, Rambow, 1996</marker>
<rawString>Lavoie, B., Rambow, 0. and Reiter, E. (1996). The MODELEXPLAINER. In Demonstration Notes of International Natural Language Generation Workshop (INLG96), Hermonceux Castle, Sussex, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Lavoie</author>
<author>Rambow</author>
</authors>
<title>A Fast and Portable Realizer for Text Generation Systems.</title>
<date>1997</date>
<booktitle>In Proceedings of the Fifth Conference on Applied Natural Language Processing (ANLP-97),</booktitle>
<location>Washinghton,DC..</location>
<contexts>
<context position="12779" citStr="Lavoie and Rambow, 1997" startWordPosition="2024" endWordPosition="2028">ectly one 1.1._fe poor end may belong to tern or more Couises, It must be taken by one or more Stud ank and may have at most one Ls_ nt moe Request Docum 255 sentations, as table specification and/or as humanauthored text for the titles and the object model annotations. The text structure is transformed by the sentence planner which can aggregate the syntactic representations (cf. conjunctions and in description on Figure 2) or introduce cue words between constituents (cf. expression For example on Figure 2). The resulting text structure is then passed to the text realizer which uses REALPRO (Lavoie and Rambow, 1997), a sentence realizer, to realize each individual syntactic representation in the text structure. Finally, a formatter takes the final text structure to produce an HTML document. • Object Model Annotation Editing. This allows the user to edit human-authored annotations of the object model. This editing can be done via links labelled Edit ... which appear in Figure 4. These human-authored texts are used by some of the predefined text functions to generate the descriptions. 5 Outlook MoDEx is implemented in C++ on both UNIX and PC platforms. It has been integrated with two object-oriented modeli</context>
</contexts>
<marker>Lavoie, Rambow, 1997</marker>
<rawString>Lavoie, B. and Rambow, 0. (1997). A Fast and Portable Realizer for Text Generation Systems. In Proceedings of the Fifth Conference on Applied Natural Language Processing (ANLP-97), Washinghton,DC..</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Martin</author>
<author>J Odell</author>
</authors>
<title>Object-Oriented Analysis and Design.</title>
<date>1992</date>
<publisher>Prentice Hall,</publisher>
<location>Englewood Cliffs, NJ.</location>
<contexts>
<context position="5377" citStr="Martin and Odell (1992)" startWordPosition="831" endWordPosition="834">sting commercial off the shelf 00 modeling tools. Some previous systems have paraphrased complex modeling languages that are not widely used outside the research community (GIST, PPP). • MoDEx does not have access to knowledge about the domain of the 00 model (beyond the 00 model itself) and is therefore portable to new domains. 3 A MODEx Scenario Suppose that a university has hired a consulting company to build an information system for its administration. Figure 1 shows a sample object model for the university domain (adapted from (Cattell, 1994, p.56), using the notation for cardinality of Martin and Odell (1992)) that could be designed by a requirements analyst. Figure 1: The University 0-0 Diagram Once the object model is specified, the analyst must validate her model with a university administrator (and maybe other university personnel, such as dataentry clerks); as domain expert, the university administrator may find semantic errors undetected by the analyst. However, he is unfamiliar with the &amp;quot;crow&apos;s foot&amp;quot; notation used in Figure 1. Instead, he uses MoDEx to generate fluent English descriptions of the model, which uses the domain terms from the model. Figure 2 shows an example of a description ge</context>
</contexts>
<marker>Martin, Odell, 1992</marker>
<rawString>Martin, J. and Odell, J. (1992). Object-Oriented Analysis and Design. Prentice Hall, Englewood Cliffs, NJ.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Petre</author>
</authors>
<title>Why looking isn&apos;t always seeing: Readership skills and graphical programming.</title>
<date>1995</date>
<journal>Communications of the ACM,</journal>
<pages>38--6</pages>
<contexts>
<context position="2032" citStr="Petre (1995)" startWordPosition="310" endWordPosition="311">he 00 domain model. This belief is reflected by the large number of graphical 00 modeling tools currently in research labs and on the market. However, this belief is not accurate, as some recent empirical studies show. For example, Kim (1990) simulated a modeling task with experienced analysts and a validation task with sophisticated users not familiar with the particular graphical language. Both user groups showed semantic error rates between 25% and 70% for the separately scored areas of entities, attributes, and relations. Relations were particularly troublesome to both analysts and users. Petre (1995) compares diagrams with textual representations of nested conditional structures (which can be compared to 00 modeling in the complexity of the &amp;quot;paths&amp;quot; through the system). She finds that &amp;quot;the intrinsic difficulty of the graphics mode was the strongest effect observed&amp;quot; (p.35). We therefore conclude that graphics, in order to assure maximum communicative efficiency, needs to be complemented by an alternate view of the data. We claim that the alternate view should be provided by an explanation tool that represents the data in the form of a fluent English text. This paper presents such a tool, th</context>
</contexts>
<marker>Petre, 1995</marker>
<rawString>Petre, M. (1995). Why looking isn&apos;t always seeing: Readership skills and graphical programming. Communications of the ACM, 38(6):33-42.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Scott</author>
<author>C de Souza</author>
</authors>
<title>Conciliatory planning for extended descriptive texts.</title>
<date>1989</date>
<tech>Technical Report 2822,</tech>
<institution>Philips Research Laboratory,</institution>
<location>Redhill, UK.</location>
<marker>Scott, de Souza, 1989</marker>
<rawString>Scott, D. and de Souza, C. (1989). Conciliatory planning for extended descriptive texts. Technical Report 2822, Philips Research Laboratory, Redhill, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Swartout</author>
</authors>
<title>GIST English generator.</title>
<date>1982</date>
<booktitle>In Proceedings of the National Conference on Artificial Intelligence. AAAI.</booktitle>
<contexts>
<context position="2903" citStr="Swartout, 1982" startWordPosition="447" endWordPosition="448">ect observed&amp;quot; (p.35). We therefore conclude that graphics, in order to assure maximum communicative efficiency, needs to be complemented by an alternate view of the data. We claim that the alternate view should be provided by an explanation tool that represents the data in the form of a fluent English text. This paper presents such a tool, the MODELEXPLAINER, or M0DEx for short, and focuses on the customizability of the system.&apos; Automatically generating natural-language descriptions of software models and specifications is not a new idea. The first such system was Swartout&apos;s GIST Paraphraser (Swartout, 1982). More recent projects include the paraphraser in ARIES (Johnson et al., 1992); the GEMA data-flow diagram describer (Scott and de Souza, 1989); and Gulla&apos;s paraphraser for the PPP system (Gulla, 1993). M0DEx certainly belongs in the tradition of these specification paraphrasers, but the combination of features that we will describe in the next section (and in particular the customizability) is, to our knowledge, unique. 2 Features of M0DEx M0DEx was developed in conjunction with Andersen Consulting, a large systems consulting company, and the Software Engineering Laboratory at the Electronic </context>
</contexts>
<marker>Swartout, 1982</marker>
<rawString>Swartout, B. (1982). GIST English generator. In Proceedings of the National Conference on Artificial Intelligence. AAAI.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>