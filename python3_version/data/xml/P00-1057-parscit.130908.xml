<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000004">
<title confidence="0.841773">
Multi-Component TAG and Notions of Formal Power
</title>
<author confidence="0.998454">
William Schuler, David Chiang
</author>
<affiliation confidence="0.9972415">
Computer and Information Science
University of Pennsylvania
</affiliation>
<address confidence="0.856377">
Philadelphia, PA 19104
</address>
<email confidence="0.999009">
{schuler,dchiangl@linc.cis.upenn.edu
</email>
<author confidence="0.763437">
Mark Dras
</author>
<affiliation confidence="0.850676">
Inst. for Research in Cognitive Science
University of Pennsylvania
</affiliation>
<address confidence="0.869152">
Suite 400A, 3401 Walnut Street
Philadelphia, PA 19104-6228
</address>
<email confidence="0.996877">
madras@linc.cis.upenn.edu
</email>
<sectionHeader confidence="0.995578" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999363583333333">
This paper presents a restricted version
of Set-Local Multi-Component TAGs
(Weir, 1988) which retains the strong
generative capacity of Tree-Local Multi-
Component TAG (i.e. produces the
same derived structures) but has a
greater derivational generative capacity
(i.e. can derive those structures in more
ways). This formalism is then applied as
a framework for integrating dependency
and constituency based linguistic repre-
sentations.
</bodyText>
<sectionHeader confidence="0.998516" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.987509148148148">
An aim of one strand of research in gener-
ative grammar is to find a formalism that
has a restricted descriptive capacity sufficient
to describe natural language, but no more
powerful than necessary, so that the reasons
some constructions are not legal in any nat-
ural language is explained by the formalism
rather than stipulations in the linguistic the-
ory. Several mildly context-sensitive grammar
formalisms, all characterizing the same string
languages, are currently possible candidates
for adequately describing natural language;
however, they differ in their capacities to as-
sign appropriate linguistic structural descrip-
tions to these string languages. The work in
this paper is in the vein of other work (Joshi,
2000) in extracting as much structural de-
scriptive power given a fixed ability to de-
scribe strings, and uses this to model depen-
dency as well as constituency correctly.
One way to characterize a formalism&apos;s de-
scriptive power is by the the set of string lan-
guages it can generate, called its weak gener-
ative capacity. For example, Tree Adjoining
Grammars (TAGs) (Joshi et al., 1975) can
generate the language anbncndn and Context-
Free Grammars (CFGs) cannot (Joshi, 1985).
</bodyText>
<figureCaption confidence="0.998856">
Figure 1: CFG-generable tree set for anbn.
</figureCaption>
<figure confidence="0.702682">
� � �
</figure>
<figureCaption confidence="0.998808">
Figure 2: TAG-generable tree set for anbn.
</figureCaption>
<bodyText confidence="0.999921375">
However, weak generative capacity ignores
the capacity of a grammar formalism to gener-
ate derived trees. This is known as its strong
generative capacity. For example, CFGs and
TAGs can both generate the language anbn,
but CFGs can only associate the a&apos;s and b&apos;s
by making them siblings in the derived tree,
as shown in Figure 1, whereas a TAG can gen-
erate the infinite set of trees for the language
anbn that have a&apos;s and b&apos;s as siblings, as well
as the infinite set of trees where the a&apos;s dom-
inate the b&apos;s in each tree, shown in Figure 2
(Joshi, 1985); thus TAGs have more strong
generative capacity than CFGs.
In addition to the tree sets and string lan-
guages a formalism can generate, there may
</bodyText>
<figure confidence="0.999639714285714">
S
a e b
S
a S
a e b
S
a S
a S
a e b
b
� � �
b
b
S
a S
b e
S
a S
a S
b S
b e
S
a S
a S
a S
b S
b S
b e
</figure>
<bodyText confidence="0.999438269230769">
also be linguistic reasons to care about how
these structures are derived. For this reason,
multi-component TAGs (MCTAGs) (Weir,
1988) have been adopted to model some
linguistic phenomena. In multi-component
TAG, elementary trees are grouped into tree
sets, and at each step of the derivation all the
trees of a set adjoin simultaneously. In tree-
local MCTAG (TL-MCTAG) all the trees of
a set are required to adjoin into the same
elementary tree; in set-local MCTAG (SL-
MCTAG) all the trees of a set are required
to adjoin into the same elementary tree set.
TL-MCTAGs can generate the same string
languages and derived tree sets as ordinary
TAGs, so they have the same weak and strong
generative capacities, but TL-MCTAGs can
derive these same strings and trees in more
than TAGs can. One motivation for TL-
MCTAG as a linguistic formalism (Frank,
1992) is that it can generate a functional head
(such as does) in the same derivational step
as the lexical head with which it is associated
(see Figure 3) without violating any assump-
tions about the derived phrase structure tree
— something TAGs cannot do in every case.
</bodyText>
<figure confidence="0.9089382">
�seem:S
does S
���
VP
to sleep to sleep
</figure>
<figureCaption confidence="0.999468">
Figure 3: TL-MCTAG generable derivation
</figureCaption>
<bodyText confidence="0.953518230769231">
This notion of the derivations of a gram-
mar formalism as they relate to the struc-
tures they derive has been called the deriva-
tional generative capacity (1992). Somewhat
more formally (for a precise definition, see
Becker et al. (1992)): we annotate each ele-
ment of a derived structure with a code indi-
cating which step of the derivation produced
that element. This code is simply the address
of the corresponding node in the derivation
tree.&apos; Then a formalism&apos;s derivational gener-
ative capacity is the sets of derived structures,
thus annotated, that it can generate.
</bodyText>
<footnote confidence="0.89285825">
&apos;In Becker et al. (1992) the derived structures were
always strings, and the codes were not addresses but
unordered identifiers. We trust that our definition is
in the spirit of theirs.
</footnote>
<bodyText confidence="0.999981076923077">
The derivational generative capacity of a
formalism also describes what parts of a de-
rived structure combine with each other. Thus
if we consider each derivation step to corre-
spond to a semantic dependency, then deriva-
tional generative capacity describes what
other elements a semantic element may de-
pend on. That is, if we interpret the derivation
trees of TAG as dependency structures and
the derived trees as phrase structures, then
the derivational generative capacity of TAG
limits the possible dependency structures that
can be assigned to a given phrase structure.
</bodyText>
<subsectionHeader confidence="0.985915">
1.1 Dependency and Constituency
</subsectionHeader>
<bodyText confidence="0.999873615384615">
We have seen that TL-MCTAGs can gener-
ate some derivations for &amp;quot;Does John seem
to sleep&amp;quot; that TAG cannot, but even TL-
MCTAG cannot generate the string, &amp;quot;Does
John seem likely to sleep&amp;quot; with a derived tree
that matches some linguistic notion of correct
constituency and a derivation that matches
some notion of correct dependency. This is
because the components for `does&apos; and `seem&apos;
would have to adjoin into different compo-
nents of the elementary tree set for `likely&apos;
(see Figure 4), which would require a set-local
multi-component TAG instead of tree-local.
</bodyText>
<equation confidence="0.656814">
�seem:S
does S
���
VP
seem VPS
</equation>
<figureCaption confidence="0.995323">
Figure 4: SL-MCTAG generable derivation
</figureCaption>
<bodyText confidence="0.999803285714286">
Unfortunately, unrestricted set-local multi-
component TAGs not only have more deriva-
tional generative capacity than TAGs, but
they also have more weak generative capac-
ity: SL-MCTAGs can generate the quadru-
ple copy language wwww, for example, which
does not correspond to any known linguis-
tic phenomenon. Other formalisms aiming to
model dependency correctly similarly expand
weak generative capacity, notably D-tree Sub-
stitution Grammar (Rambow et al., 1995),
and consequently end up with much greater
parsing complexity.
The work in this paper follows another
</bodyText>
<figure confidence="0.998180857142857">
seem VPS
S
does S
Ctsleep
seem
John VP
John VP
seem VP
Ctsleep:
S
likely VPS to sleep
~likely:
S
���
VP
Ctsleep:
S
John VP
Ctsleep
likely
seem
</figure>
<figureCaption confidence="0.99998">
Figure 5: Set-local adjunction.
</figureCaption>
<bodyText confidence="0.999850692307692">
line of research which has focused on squeez-
ing as much strong generative capacity as
possible out of weakly TAG-equivalent for-
malisms. Tree-local multicomponent TAG
(Weir, 1988), nondirectional composition
(Joshi and Vijay-Shanker, 1999), and seg-
mented adjunction (Kulick, 2000) are exam-
ples of this approach, wherein the constraint
on weak generative capacity naturally limits
the expressivity of these systems. We discuss
the relation of the formalism of this paper,
Restricted MCTAG (R-MCTAG) with some
of these in Section 5.
</bodyText>
<sectionHeader confidence="0.995246" genericHeader="introduction">
2 Formalism
</sectionHeader>
<subsectionHeader confidence="0.999626">
2.1 Restricting set-local MCTAG
</subsectionHeader>
<bodyText confidence="0.999934090909091">
The way we propose to deal with multi-
component adjunction is first to limit the
number of components to two, and then,
roughly speaking, to treat two-component
adjunction as one-component adjunction by
temporarily removing the material between
the two adjunction sites. The reasons behind
this scheme will be explained in subsequent
sections, but we mention it now because it
motivates the somewhat complicated restric-
tions on possible adjunction sites:
</bodyText>
<listItem confidence="0.951074214285714">
• One adjunction site must dominate the
other. If the two sites are rih and ril, call
the set of nodes dominated by one node
but not strictly dominated by the other
the site-segment (rih, ril).
• Removing a site-segment must not de-
prive a tree of its foot node. That is, no
site-segment (rih, ril) may contain a foot
node unless ril is itself the foot node.
• If two tree sets adjoin into the same tree,
the two site-segments must be simulta-
neously removable. That is, the two site-
segments must be disjoint, or one must
contain the other.
</listItem>
<bodyText confidence="0.999946882352941">
Because of the first restriction, we depict
tree sets with the components connected by
a dominance link (dotted line), in the man-
ner of (Becker et al., 1991). As written, the
above rules only allow tree-local adjunction;
we can generalize them to allow set-local ad-
junction by treating this dominance link like
an ordinary arc. But this would increase the
weak generative capacity of the system. For
present purposes it is sufficient just to allow
one type of set-local adjunction: adjoin the
upper tree to the upper foot, and the lower
tree to the lower root (see Figure 5).
This does not increase the weak generative
capacity, as will be shown in Section 2.3. Ob-
serve that the set-local TAG given in Figure 5
obeys the above restrictions.
</bodyText>
<subsectionHeader confidence="0.984565">
2.2 2LTAG
</subsectionHeader>
<bodyText confidence="0.981883888888889">
For the following section, it is useful to think
of TAG in a manner other than the usual.
Instead of it being a tree-rewriting system
whose derivation history is recorded in a
derivation tree, it can be thought of as a set
of trees (the `derivation&apos; trees) with a yield
function (here, reading off the node labels of
derivation trees, and composing correspond-
ing elementary trees by adjunction or sub-
stitution as appropriate) applied to get the
TAG trees. Weir (1988) observed that several
TAGs could be daisy-chained into a multi-
level TAG whose yield function is the com-
position of the individual yield functions.
More precisely: a 2LTAG is a pair of
TAGs (G, G&apos;) _ ((E, NT, I, A, S), (I U A, I U
A, I&apos;, A&apos;, S&apos;)).
We call G the object-level grammar, and
G&apos; the meta-level grammar. The object-level
grammar is a standard TAG: E and NT are
its terminal and nonterminal alphabets, I and
A are its initial and auxiliary trees, and S E I
contains the trees which derivations may start
with.
The meta-level grammar G&apos; is defined so
that it derives trees that look like derivation
trees of G:
</bodyText>
<listItem confidence="0.9994435">
• Nodes are labeled with (the names of)
elementary trees of G.
• Foot nodes have no labels.
• Arcs are labeled with Gorn addresses.2
</listItem>
<footnote confidence="0.9830585">
2The Gorn address of a root node is e; if a node has
Gorn address q, then its ith child has Gorn address
</footnote>
<figureCaption confidence="0.991256">
Figure 6: Adjoining into a by removing ,3a.
</figureCaption>
<listItem confidence="0.92417925">
• An auxiliary tree may adjoin anywhere.
• When a tree ,3 is adjoined at a node T1, T1 is
rewritten as ,3, and the foot of ,3 inherits
the label of T1.
</listItem>
<bodyText confidence="0.999712166666667">
The tree set of (G, G&apos;), T ((G, G&apos;)), is
fG[T (G&apos;)], where fG is the yield function of
G and T (G&apos;) is the tree set of G&apos;. Thus, the
elementary trees of G&apos; are combined to form
a derived tree, which is then interpreted as a
derivation tree for G, which gives instructions
for combining elementary trees of G into the
final derived tree.
It was shown in Dras (1999) that when the
meta-level grammar is in the regular form of
Rogers (1994) the formalism is weakly equiv-
alent to TAG.
</bodyText>
<subsectionHeader confidence="0.8013995">
2.3 Reducing restricted R-MCTAG
to RF-2LTAG
</subsectionHeader>
<bodyText confidence="0.978229315789474">
Consider the case of a multicomponent tree
set {,31, ,32} adjoining into an initial tree a
(Figure 6). Recall that we defined a site-
segment of a pair of adjunction sites to be all
the nodes which are dominated by the upper
site but not the lower site. Imagine that the
site-segment ,3a is excised from a, and that ,31
and ,32 are fused into a single elementary tree.
Now we can simulate the multi-component
adjunction by ordinary adjunction: adjoin the
fused ,31 and ,32 into what is left of a; then
replace ,3a by adjoining it between ,31 and ,32.
The replacement of ,3a can be postponed
indefinitely: some other (fused) tree set
{,31 &apos;, ,32 &apos;} can adjoin between ,31 and ,32, and
so on, and then ,3a adjoins between the last
pair of trees. This will produce the same re-
sult as a series of set-local adjunctions.
More formally:
</bodyText>
<footnote confidence="0.474343">
1. Fuse all the elementary tree sets of the
grammar by identifying the upper foot
q - i.
</footnote>
<bodyText confidence="0.998661071428571">
with the lower root. Designate this fused
node the meta-foot.
2. For each tree, and for every possible com-
bination of site-segments, excise all the
site-segments and add all the trees thus
produced (the excised auxiliary trees and
the remainders) to the grammar.
Now that our grammar has been smashed
to pieces, we must make sure that the right
pieces go back in the right places. We could do
this using features, but the resulting grammar
would only be strongly equivalent, not deriva-
tionally equivalent, to the original. Therefore
we use a meta-level grammar instead:
</bodyText>
<listItem confidence="0.9849894">
1. For each initial tree, and for every pos-
sible combination of site-segments, con-
struct the derivation tree that will re-
assemble the pieces created in step (2)
above and add it to the meta-level gram-
mar.
2. For each auxiliary tree, and for every pos-
sible combination of site-segments, con-
struct a derivation tree as above, and for
the node which corresponds to the piece
containing the meta-foot, add a child, la-
bel its arc with the meta-foot&apos;s address
(within the piece), and mark it a foot
node. Add the resulting (meta-level) aux-
iliary tree to the meta-level grammar.
</listItem>
<bodyText confidence="0.997791227272727">
Observe that set-local adjunction corre-
sponds to meta-level adjunction along the
(meta-level) spine. Recall that we restricted
set-local adjunction so that a tree set can
only adjoin at the foot of the upper tree and
the root of the lower tree. Since this pair of
nodes corresponds to the meta-foot, we can
restate our restriction in terms of the con-
verted grammar: no meta-level adjunction is
allowed along the spine of a (meta-level) aux-
iliary tree except at the (meta-level) foot.
Then all meta-level adjunction is regular
adjunction in the sense of (Rogers, 1994).
Therefore this converted 2LTAG produces
derivation tree sets which are recognizable,
and therefore our formalism is strongly equiv-
alent to TAG.
Note that this restriction is much stronger
than Rogers&apos; regular form restriction. This
was done for two reasons. First, the defini-
tion of our restriction would have been more
complicated otherwise; second, this restric-
</bodyText>
<figure confidence="0.6124605">
a
,3a
</figure>
<bodyText confidence="0.720739">
modeling, the particular choice of direction is
usually immaterial.
tion overcomes some computational difficul-
ties with RF-TAG which we discuss below.
</bodyText>
<sectionHeader confidence="0.943216" genericHeader="method">
3 Linguistic Applications
</sectionHeader>
<bodyText confidence="0.999038888888889">
In cases where TAG models dependencies cor-
rectly, the use of R-MCTAG is straightfor-
ward: when an auxiliary tree adjoins at a
site pair which is just a single node, it looks
just like conventional adjunction. However, in
problematic cases we can use the extra expres-
sive power of R-MCTAG to model dependen-
cies correctly. Two such cases are discussed
below.
</bodyText>
<subsectionHeader confidence="0.791269">
3.1 Bridge and Raising Verbs
</subsectionHeader>
<bodyText confidence="0.374618">
seems
</bodyText>
<figureCaption confidence="0.999143">
Figure 7: Trees for (1)
</figureCaption>
<bodyText confidence="0.954161">
Consider the case of sentences which con-
tain both bridge and raising verbs, noted
by Rambow et al. (1995). In most TAG-based
analyses, bridge verbs adjoin at S (or C&apos;), and
raising verbs adjoin at VP (or I&apos;). Thus the
derivation for a sentence like
</bodyText>
<listItem confidence="0.714882">
(1) John thinks that Mary seems to
</listItem>
<bodyText confidence="0.976998333333333">
sleep.
will have the trees for thinks and seems si-
multaneously adjoining into the tree for like,
which, when interpreted, gives an incorrect
dependency structure.
But under the present view we can ana-
lyze sentences like (1) with derivations mir-
roring dependencies. The desired trees for (1)
are shown in Figure 7. Since the tree for that
seems can meta-adjoin around the subject,
the tree for thinks correctly adjoins into the
tree for seems rather than eat.
Also, although the above analysis produces
the correct dependency links, the directions
are inverted in some cases. This is a disad-
vantage compared to, for example, DSG; but
since the directions are consistently inverted,
for applications like translation or statistical
</bodyText>
<subsectionHeader confidence="0.997221">
3.2 More on Raising Verbs
</subsectionHeader>
<bodyText confidence="0.99645675">
Tree-local MCTAG is able to derive (2a), but
unable to derive (2b) except by adjoining the
auxiliary tree for to be likely at the foot of the
auxiliary tree for seem (Frank et al., 1999).
</bodyText>
<listItem confidence="0.796972">
(2) a. Does John seem to sleep?
b. Does John seem to be likely to
sleep?
</listItem>
<bodyText confidence="0.99969905882353">
The derivation structure of this analysis does
not match the dependencies, however seem
adjoins into to sleep.
DSG can derive this sentence with a deriva-
tion matching the dependencies, but it loses
some of the advantage of TAG in that, for
example, cases of super-raising (where the
verb is raised out of two clauses) must be ex-
plicitly ruled out by subsertion-insertion con-
straints. Frank et al. (1999) and Kulick (2000)
give analyses of raising which assign the de-
sired derivation structures without running
into this problem. It turns out that the anal-
ysis of raising from the previous section, de-
signed for a translation problem, has both
of these properties as well. The grammar is
shown back in Figure 4.
</bodyText>
<sectionHeader confidence="0.990526" genericHeader="method">
4 A Parser
</sectionHeader>
<bodyText confidence="0.975776666666667">
Figure 8 shows a CKY-style parser for our
restriction of MCTAG as a system of inference
rules. It is limited to grammars whose trees
are at most binary-branching.
The parser consists of rules over items of
one of the following forms, where w1 • • • wn is
the input; r1, r1h, and r1l specify nodes of the
grammar; i, j, k, and l are integers between 0
and n inclusive; and code is either + or —:
</bodyText>
<listItem confidence="0.997780818181818">
• [r1, code, i, —, —,l, —, —] and
[r1, code, i, j, k, l, —, —] function as in
a CKY-style parser for standard TAG
(Vijay-Shanker, 1987): the subtree
rooted by r1 E T derives a tree whose
fringe is wi • • • wl if T is initial, or
wi • • • wjFwk • • • wl if T is the lower
auxiliary tree of a set and F is the label
of its foot node. In all four item forms,
code = + iff adjunction has taken place
at r1.
</listItem>
<figure confidence="0.998277772727273">
John V
thinks
NP
S
VP
S
���
S*
C
that
S
V
S
���
VP
VPS
Mary
NP
to sleep
S
VP
V
</figure>
<listItem confidence="0.9790135">
• [ri, code, i, j, h, l, —, ril] specifies that the
segment (ri, ril) derives a tree whose
fringe is wi • • • wjLwk • • • wl, where L is
the label of ril. Intuitively, it means that
a potential site-segment has been recog-
nized.
• [ri, code, i, j, h, l, rih, ril] specifies, if ri be-
longs to the upper tree of a set, that
the subtree rooted by ri, the segment
(rih, ril), and the lower tree concatenated
together derive a tree whose fringe is
wi • • • wjFwk • • • wl, where F is the la-
bel of the lower foot node. Intuitively, it
means that a tree set has been partially
recognized, with a site-segment inserted
between the two components.
</listItem>
<bodyText confidence="0.999821942857143">
The rules which require differ from a TAG
parser and hence explanation are Pseudopod,
Push, Pop, and Pop-push. Pseudopod applies
to any potential lower adjunction site and is
so called because the parser essentially views
every potential site-segment as an auxiliary
tree (see Section 2.3), and the Pseudopod ax-
iom recognizes the feet of these false auxiliary
trees.
The Push rule performs the adjunction of
one of these false auxiliary trees that is, it
places a site-segment between the two trees of
an elementary tree set. It is so called because
the site-segment is saved in a &amp;quot;stack&amp;quot; so that
the rest of its elementary tree can be recog-
nized later. Of course, in our case the &amp;quot;stack&amp;quot;
has at most one element.
The Pop rule does the reverse: every com-
pleted elementary tree set must contain a
site-segment, and the Pop rule places it back
where the site-segment came from, emptying
the &amp;quot;stack.&amp;quot; The Pop-push rule performs set-
local adjunction: a completed elementary tree
set is placed between the two trees of yet an-
other elementary tree set, and the &amp;quot;stack&amp;quot; is
unchanged.
Pop-push is computationally the most ex-
pensive rule; since it involves six indices and
three different elementary trees, its running
time is O(n6W ).
It was noted in (Chiang et al., 2000) that
for synchronous RF-2LTAG, parse forests
could not be transferred in time O(n6). This
fact turns out to be connected to several prop-
erties of RF-TAG (Rogers, 1994).3
</bodyText>
<subsectionHeader confidence="0.476664">
3Thanks to Anoop Sarkar for pointing out the first
</subsectionHeader>
<bodyText confidence="0.999976264705882">
The CKY-style parser for regular form
TAG described in (Rogers, 1994) essentially
keeps track of adjunctions using stacks, and
the regular form constraint ensures that the
stack depth is bounded. The only kinds of ad-
junction that can occur to arbitrary depth are
root and foot adjunction, which are treated
similarly to substitution and do not affect the
stacks. The reader will note that our parser
works in exactly the same way.
A problem arises if we allow both root
and foot adjunction, however. It is well-known
that allowing both types of adjunction creates
derivational ambiguity (Vijay-Shanker, 1987):
adjoining 131 at the foot of 132 produces the
same derived tree that adjoining 131 at the
root of 132 would. The problem is not the am-
biguity per se, but that the regular form TAG
parser, unlike a standard TAG parser, does
not always distinguish these multiple deriva-
tions, because root and foot adjunction are
both performed by the same rule (analogous
to our Pop-push). Thus for a given application
of this rule, it is not possible to say which tree
is adjoining into which without examining the
rest of the derivation.
But this knowledge is necessary to per-
form certain tasks online: for example, enforc-
ing adjoining constraints, computing proba-
bilities (and pruning based on them), or per-
forming synchronous mappings. Therefore we
arbitrarily forbid one of the two possibilities.4
The parser given in Section 4 already takes
this into account.
</bodyText>
<sectionHeader confidence="0.999733" genericHeader="evaluation">
5 Discussion
</sectionHeader>
<bodyText confidence="0.977172294117647">
Our version of MCTAG follows other
work in incorporating dependency into a
constituency-based approach to modeling
natural language. One such early integra-
tion involved work by Gaifman (1965), which
showed that projective dependency grammars
could be represented by CFGs. However, it
is known that there are common phenom-
ena which require non-projective dependency
grammars, so looking only at projective de-
such connection.
4Against tradition, we forbid root adjunction, be-
cause adjunction at the foot ensures that a bottom-up
traversal of the derived tree will encounter elementary
trees in the same order as they appear in a bottom-up
traversal of the derivation tree, simplifying the calcu-
lation of derivations.
</bodyText>
<equation confidence="0.991363583333333">
Goal: [TIr; —; 0; —; —; n; —; —] rlr an initial root
(Leaf) [T/; +; i; —; —; j; —; —] T/ a leaf
(Foot) [T/; +; i; i; j; j; —; —] q a lower foot
(Pseudopod) [T/; +; i; i; j; j; —; T/]
[T/1 ; +; i; p; q; j; ah; TIl] rl
(Unary) [rl; —; i; p; q; j; rlh; rll] Th
[q1; +; i; p; q; j; �Jh; TIl] [TJ2 ; +; j; —; —; k; —; —]
[q7; —; i; p; q; k; �Jh; all]
[TI1; +; i; —; —; j; —; —] [T12 ; +; j; p; q; k; Tjh; T/l]
[T7; —; i; p; q; k; Th; Tll]
[�; —;i; p; q; j; rlh; rll]
[�; +;i; p; q; j; rlh; rll]
</equation>
<figure confidence="0.790768083333333">
(Binary 1)
(Binary 2)
(No adjunction)
rl
Th 712
rl
Th 712
[rl1 ; +; j; p; q; k; —; —] [rh; —; i; j; k; l; —; rll] rl (i.e. q is an upper foot
... and q1 is a lower root)
rl1
(Push) [T/; +; i; p; q; l; Th; r!l]
(Pop)
</figure>
<equation confidence="0.867505">
[rll; —; j; p; q; k; rlh&apos;; rll &apos;] [r!r; +;i; j; k; l; rh; rll]
rlr a root of an upper tree
[TIh; +; i; p; q; l; Tlh&apos;; Tl &apos;] adjoinable at (Tjh; T/l)
[rl1;+;j; p; q; k; —; —] [r!r ; +;i; j; k; l; rh; rll] rl � rlr a root of an upper
</equation>
<figure confidence="0.688436666666667">
... tree adjoinable at
rl1 (T/; T71)
(Pop-push) [rl;+;i; p; q; l; rJh; r!l]
</figure>
<figureCaption confidence="0.998948">
Figure 8: Parser
</figureCaption>
<bodyText confidence="0.999640019607843">
pendency grammars is inadequate. Follow-
ing the observation of TAG derivations&apos; sim-
ilarity to dependency relations, other for-
malisms have also looked at relating depen-
dency and constituency approaches to gram-
mar formalisms.
A more recent instance is D-Tree Substi-
tution Grammars (DSG) (Rambow et al.,
1995), where the derivations are also inter-
preted as dependency relations. Thought of
in the terms of this paper, there is a clear
parallel with R-MCTAG, with a local set
ultimately representing dependencies having
some yield function applied to it; the idea
of non-immediate dominance also appears in
both formalisms. The difference between the
two is in the kinds of languages that they are
able to describe: DSG is both less and more
restrictive than R-MCTAG. DSG can gener-
ate the language COUNT-k for some arbitrary
k (that is, {a1 &apos;a2 &apos; ... ak &apos;}), which makes
it extremely powerful, whereas R-MCTAG
can only generate COUNT-4. However, DSG
cannot generate the copy language (that is,
{ww I w C E*} with E some terminal al-
phabet), whereas R-MCTAG can; this may
be problematic for a formalism modeling nat-
ural language, given the key role of the copy
language in demonstrating that natural lan-
guage is not context-free (Shieber, 1985). R-
MCTAG is thus a more constrained relaxation
of the notion of immediate dominance in fa-
vor of non-immediate dominance than is the
case for DSG.
Another formalism of particular interest
here is the Segmented Adjoining Grammar of
(Kulick, 2000). This generalization of TAG is
characterized by an extension of the adjoining
operation, motivated by evidence in scram-
bling, clitic climbing and subject-to-subject
raising. Most interestingly, this extension to
TAG, proposed on empirical grounds, is de-
fined by a composition operation with con-
strained non-immediate dominance links that
looks quite similar to the formalism described
in this paper, which began from formal con-
siderations and was then applied to data. This
confluence suggests that the ideas described
here concerning combining dependency and
constituency might be reaching towards some
deeper connection.
</bodyText>
<sectionHeader confidence="0.998356" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999978">
From a theoretical perspective, extracting
more derivational generative capacity and
thereby integrating dependency and con-
stituency into a common framework is an in-
teresting exercise. It also, however, proves to
be useful in modeling otherwise problematic
constructions, such as subject-auxiliary inver-
sion and bridge and raising verb interleaving.
Moreover, the formalism developed from the-
oretical considerations, presented in this pa-
per, has similar properties to work developed
on empirical grounds, suggesting that this is
worth further exploration.
</bodyText>
<sectionHeader confidence="0.999308" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.996507621951219">
Tilman Becker, Aravind Joshi, and Owen Ram-
bow. 1991. Long distance scrambling and tree
adjoining grammars. In Fifth Conference of the
European Chapter of the Association for Com-
putational Linguistics (EACL&apos;91), pages 21{26.
Tilman Becker, Owen Rambow, and Michael Niv.
1992. The derivational generative power of for-
mal systems, or, Scrambling is beyond LCFRS.
Technical Report IRCS-92-38, Institute for Re-
search in Cognitive Science, University of Penn-
sylvania.
David Chiang, William Schuler, and Mark Dras.
2000. Some Remarks on an Extension of Syn-
chronous TAG. In Proceedings of TAG+5,
Paris, France.
Mark Dras. 1999. A meta-level grammar: re-
defining synchronous TAG for translation and
paraphrase. In Proceedings of the 37th Annual
Meeting of the Association for Computational
Linguistics (ACL &apos;99).
Robert Frank, Seth Kulick, and K. Vijay-Shanker.
1999. C-command and extraction in tree-
adjoining grammar. Proceedings of the Sixth
Meeting on the Mathematics of Language
(MOL6).
Robert Frank. 1992. Syntactic locality and
tree adjoining grammar: grammatical acquisi-
tion and processing perspectives. Ph.D. the-
sis, Computer Science Department, University
of Pennsylvania.
Haim Gaifman. 1965. Dependency Systems and
Phrase-Structure Systems. Information and
Control, 8:304{337.
Gerald Gazdar. 1988. Applicability of indexed
grammars to natural languages. In Uwe Reyle
and Christian Rohrer, editors, Natural Lan-
guage Parsin and Linguistic Theories. D. Reidel
Publishing Company, Dordrecht, Holland.
Aravind Joshi and K. Vijay-Shanker. 1999. Com-
positional Semantics with Lexicalized Tree-
Adjoining Grammar (LTAG): How Much Un-
derspecification is Necessary? In Proceedings of
the 2nd International Workshop on Computa-
tional Semantics.
Aravind K. Joshi, Leon S. Levy, and M. Taka-
hashi. 1975. Tree adjunct grammars. Journal
of computer and system sciences, 10:136{163.
Aravind K. Joshi. 1985. How much context sen-
sitivity is necessary for characterizing struc-
tural descriptions: Tree adjoining grammars. In
L. Karttunen D. Dowty and A. Zwicky, editors,
Natural language parsing: Psychological, com-
putational and theoretical perspectives, pages
206{250. Cambridge University Press, Cam-
bridge, U.K.
Aravind Joshi. 2000. Relationship between strong
and weak generative power of formal systems.
In Proceedings of TAG+5, pages 107{114, Paris,
France.
Seth Kulick. 2000. A uniform account of locality
constraints for clitic climbing and long scram-
bling. In Proceedings of the Penn Linguistics
Colloquium.
Owen Rambow, David Weir, and K. Vijay-
Shanker. 1995. D-tree grammars. In Proceed-
ings of the 33rd Annual Meeting of the Associa-
tion for Computational Linguistics (ACL &apos;95).
James Rogers. 1994. Capturing CFLs with tree
adjoining grammars. In Proceedings of the 32nd
Annual Meeting of the Association for Compu-
tational Linguistics (ACL &apos;94).
Stuart Shieber. 1985. Evidence against the
context-freeness of natural language. Linguis-
tics and Philosophy, 8:333{343.
K. Vijay-Shanker. 1987. A study of tree adjoining
grammars. Ph.D. thesis, Department of Com-
puter and Information Science, University of
Pennsylvania.
David Weir. 1988. Characterizing Mildly
Context-Sensitive Grammar Formalisms.
Ph.D. thesis, Department of Computer and In-
formation Science, University of Pennsylvania.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.899769">
<title confidence="0.997534">Multi-Component TAG and Notions of Formal Power</title>
<author confidence="0.999737">William Schuler</author>
<author confidence="0.999737">David Chiang</author>
<affiliation confidence="0.9995125">Computer and Information Science University of Pennsylvania</affiliation>
<address confidence="0.999601">Philadelphia, PA 19104</address>
<author confidence="0.996447">Mark Dras</author>
<affiliation confidence="0.999476">Inst. for Research in Cognitive Science University of Pennsylvania</affiliation>
<address confidence="0.9927835">Suite 400A, 3401 Walnut Street Philadelphia, PA 19104-6228</address>
<email confidence="0.999627">madras@linc.cis.upenn.edu</email>
<abstract confidence="0.993831153846154">This paper presents a restricted version of Set-Local Multi-Component TAGs (Weir, 1988) which retains the strong generative capacity of Tree-Local Multi- Component TAG (i.e. produces the same derived structures) but has a greater derivational generative capacity (i.e. can derive those structures in more ways). This formalism is then applied as a framework for integrating dependency and constituency based linguistic representations.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Tilman Becker</author>
<author>Aravind Joshi</author>
<author>Owen Rambow</author>
</authors>
<title>Long distance scrambling and tree adjoining grammars.</title>
<date>1991</date>
<booktitle>In Fifth Conference of the European Chapter of the Association for Computational Linguistics (EACL&apos;91),</booktitle>
<pages>21--26</pages>
<contexts>
<context position="8543" citStr="Becker et al., 1991" startWordPosition="1417" endWordPosition="1420">ril, call the set of nodes dominated by one node but not strictly dominated by the other the site-segment (rih, ril). • Removing a site-segment must not deprive a tree of its foot node. That is, no site-segment (rih, ril) may contain a foot node unless ril is itself the foot node. • If two tree sets adjoin into the same tree, the two site-segments must be simultaneously removable. That is, the two sitesegments must be disjoint, or one must contain the other. Because of the first restriction, we depict tree sets with the components connected by a dominance link (dotted line), in the manner of (Becker et al., 1991). As written, the above rules only allow tree-local adjunction; we can generalize them to allow set-local adjunction by treating this dominance link like an ordinary arc. But this would increase the weak generative capacity of the system. For present purposes it is sufficient just to allow one type of set-local adjunction: adjoin the upper tree to the upper foot, and the lower tree to the lower root (see Figure 5). This does not increase the weak generative capacity, as will be shown in Section 2.3. Observe that the set-local TAG given in Figure 5 obeys the above restrictions. 2.2 2LTAG For th</context>
</contexts>
<marker>Becker, Joshi, Rambow, 1991</marker>
<rawString>Tilman Becker, Aravind Joshi, and Owen Rambow. 1991. Long distance scrambling and tree adjoining grammars. In Fifth Conference of the European Chapter of the Association for Computational Linguistics (EACL&apos;91), pages 21{26.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tilman Becker</author>
<author>Owen Rambow</author>
<author>Michael Niv</author>
</authors>
<title>The derivational generative power of formal systems, or, Scrambling is beyond LCFRS.</title>
<date>1992</date>
<tech>Technical Report IRCS-92-38,</tech>
<institution>Institute for Research in Cognitive Science, University of Pennsylvania.</institution>
<contexts>
<context position="4330" citStr="Becker et al. (1992)" startWordPosition="732" endWordPosition="735">as a linguistic formalism (Frank, 1992) is that it can generate a functional head (such as does) in the same derivational step as the lexical head with which it is associated (see Figure 3) without violating any assumptions about the derived phrase structure tree — something TAGs cannot do in every case. �seem:S does S ��� VP to sleep to sleep Figure 3: TL-MCTAG generable derivation This notion of the derivations of a grammar formalism as they relate to the structures they derive has been called the derivational generative capacity (1992). Somewhat more formally (for a precise definition, see Becker et al. (1992)): we annotate each element of a derived structure with a code indicating which step of the derivation produced that element. This code is simply the address of the corresponding node in the derivation tree.&apos; Then a formalism&apos;s derivational generative capacity is the sets of derived structures, thus annotated, that it can generate. &apos;In Becker et al. (1992) the derived structures were always strings, and the codes were not addresses but unordered identifiers. We trust that our definition is in the spirit of theirs. The derivational generative capacity of a formalism also describes what parts of</context>
</contexts>
<marker>Becker, Rambow, Niv, 1992</marker>
<rawString>Tilman Becker, Owen Rambow, and Michael Niv. 1992. The derivational generative power of formal systems, or, Scrambling is beyond LCFRS. Technical Report IRCS-92-38, Institute for Research in Cognitive Science, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Chiang</author>
<author>William Schuler</author>
<author>Mark Dras</author>
</authors>
<title>Some Remarks on an Extension of Synchronous TAG.</title>
<date>2000</date>
<booktitle>In Proceedings of TAG+5,</booktitle>
<location>Paris, France.</location>
<contexts>
<context position="19574" citStr="Chiang et al., 2000" startWordPosition="3407" endWordPosition="3410">zed later. Of course, in our case the &amp;quot;stack&amp;quot; has at most one element. The Pop rule does the reverse: every completed elementary tree set must contain a site-segment, and the Pop rule places it back where the site-segment came from, emptying the &amp;quot;stack.&amp;quot; The Pop-push rule performs setlocal adjunction: a completed elementary tree set is placed between the two trees of yet another elementary tree set, and the &amp;quot;stack&amp;quot; is unchanged. Pop-push is computationally the most expensive rule; since it involves six indices and three different elementary trees, its running time is O(n6W ). It was noted in (Chiang et al., 2000) that for synchronous RF-2LTAG, parse forests could not be transferred in time O(n6). This fact turns out to be connected to several properties of RF-TAG (Rogers, 1994).3 3Thanks to Anoop Sarkar for pointing out the first The CKY-style parser for regular form TAG described in (Rogers, 1994) essentially keeps track of adjunctions using stacks, and the regular form constraint ensures that the stack depth is bounded. The only kinds of adjunction that can occur to arbitrary depth are root and foot adjunction, which are treated similarly to substitution and do not affect the stacks. The reader will</context>
</contexts>
<marker>Chiang, Schuler, Dras, 2000</marker>
<rawString>David Chiang, William Schuler, and Mark Dras. 2000. Some Remarks on an Extension of Synchronous TAG. In Proceedings of TAG+5, Paris, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Dras</author>
</authors>
<title>A meta-level grammar: redefining synchronous TAG for translation and paraphrase.</title>
<date>1999</date>
<booktitle>In Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics (ACL &apos;99).</booktitle>
<contexts>
<context position="11022" citStr="Dras (1999)" startWordPosition="1879" endWordPosition="1880">orn address q, then its ith child has Gorn address Figure 6: Adjoining into a by removing ,3a. • An auxiliary tree may adjoin anywhere. • When a tree ,3 is adjoined at a node T1, T1 is rewritten as ,3, and the foot of ,3 inherits the label of T1. The tree set of (G, G&apos;), T ((G, G&apos;)), is fG[T (G&apos;)], where fG is the yield function of G and T (G&apos;) is the tree set of G&apos;. Thus, the elementary trees of G&apos; are combined to form a derived tree, which is then interpreted as a derivation tree for G, which gives instructions for combining elementary trees of G into the final derived tree. It was shown in Dras (1999) that when the meta-level grammar is in the regular form of Rogers (1994) the formalism is weakly equivalent to TAG. 2.3 Reducing restricted R-MCTAG to RF-2LTAG Consider the case of a multicomponent tree set {,31, ,32} adjoining into an initial tree a (Figure 6). Recall that we defined a sitesegment of a pair of adjunction sites to be all the nodes which are dominated by the upper site but not the lower site. Imagine that the site-segment ,3a is excised from a, and that ,31 and ,32 are fused into a single elementary tree. Now we can simulate the multi-component adjunction by ordinary adjunctio</context>
</contexts>
<marker>Dras, 1999</marker>
<rawString>Mark Dras. 1999. A meta-level grammar: redefining synchronous TAG for translation and paraphrase. In Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics (ACL &apos;99).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Frank</author>
<author>Seth Kulick</author>
<author>K Vijay-Shanker</author>
</authors>
<title>C-command and extraction in treeadjoining grammar.</title>
<date>1999</date>
<booktitle>Proceedings of the Sixth Meeting on the Mathematics of Language (MOL6).</booktitle>
<contexts>
<context position="15999" citStr="Frank et al., 1999" startWordPosition="2725" endWordPosition="2728"> tree for that seems can meta-adjoin around the subject, the tree for thinks correctly adjoins into the tree for seems rather than eat. Also, although the above analysis produces the correct dependency links, the directions are inverted in some cases. This is a disadvantage compared to, for example, DSG; but since the directions are consistently inverted, for applications like translation or statistical 3.2 More on Raising Verbs Tree-local MCTAG is able to derive (2a), but unable to derive (2b) except by adjoining the auxiliary tree for to be likely at the foot of the auxiliary tree for seem (Frank et al., 1999). (2) a. Does John seem to sleep? b. Does John seem to be likely to sleep? The derivation structure of this analysis does not match the dependencies, however seem adjoins into to sleep. DSG can derive this sentence with a derivation matching the dependencies, but it loses some of the advantage of TAG in that, for example, cases of super-raising (where the verb is raised out of two clauses) must be explicitly ruled out by subsertion-insertion constraints. Frank et al. (1999) and Kulick (2000) give analyses of raising which assign the desired derivation structures without running into this probl</context>
</contexts>
<marker>Frank, Kulick, Vijay-Shanker, 1999</marker>
<rawString>Robert Frank, Seth Kulick, and K. Vijay-Shanker. 1999. C-command and extraction in treeadjoining grammar. Proceedings of the Sixth Meeting on the Mathematics of Language (MOL6).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert Frank</author>
</authors>
<title>Syntactic locality and tree adjoining grammar: grammatical acquisition and processing perspectives.</title>
<date>1992</date>
<tech>Ph.D. thesis,</tech>
<institution>Computer Science Department, University of Pennsylvania.</institution>
<contexts>
<context position="3749" citStr="Frank, 1992" startWordPosition="633" endWordPosition="634">uped into tree sets, and at each step of the derivation all the trees of a set adjoin simultaneously. In treelocal MCTAG (TL-MCTAG) all the trees of a set are required to adjoin into the same elementary tree; in set-local MCTAG (SLMCTAG) all the trees of a set are required to adjoin into the same elementary tree set. TL-MCTAGs can generate the same string languages and derived tree sets as ordinary TAGs, so they have the same weak and strong generative capacities, but TL-MCTAGs can derive these same strings and trees in more than TAGs can. One motivation for TLMCTAG as a linguistic formalism (Frank, 1992) is that it can generate a functional head (such as does) in the same derivational step as the lexical head with which it is associated (see Figure 3) without violating any assumptions about the derived phrase structure tree — something TAGs cannot do in every case. �seem:S does S ��� VP to sleep to sleep Figure 3: TL-MCTAG generable derivation This notion of the derivations of a grammar formalism as they relate to the structures they derive has been called the derivational generative capacity (1992). Somewhat more formally (for a precise definition, see Becker et al. (1992)): we annotate each</context>
</contexts>
<marker>Frank, 1992</marker>
<rawString>Robert Frank. 1992. Syntactic locality and tree adjoining grammar: grammatical acquisition and processing perspectives. Ph.D. thesis, Computer Science Department, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Haim Gaifman</author>
</authors>
<date>1965</date>
<booktitle>Dependency Systems and Phrase-Structure Systems. Information and Control,</booktitle>
<pages>8--304</pages>
<contexts>
<context position="21458" citStr="Gaifman (1965)" startWordPosition="3717" endWordPosition="3718">ay which tree is adjoining into which without examining the rest of the derivation. But this knowledge is necessary to perform certain tasks online: for example, enforcing adjoining constraints, computing probabilities (and pruning based on them), or performing synchronous mappings. Therefore we arbitrarily forbid one of the two possibilities.4 The parser given in Section 4 already takes this into account. 5 Discussion Our version of MCTAG follows other work in incorporating dependency into a constituency-based approach to modeling natural language. One such early integration involved work by Gaifman (1965), which showed that projective dependency grammars could be represented by CFGs. However, it is known that there are common phenomena which require non-projective dependency grammars, so looking only at projective desuch connection. 4Against tradition, we forbid root adjunction, because adjunction at the foot ensures that a bottom-up traversal of the derived tree will encounter elementary trees in the same order as they appear in a bottom-up traversal of the derivation tree, simplifying the calculation of derivations. Goal: [TIr; —; 0; —; —; n; —; —] rlr an initial root (Leaf) [T/; +; i; —; —;</context>
</contexts>
<marker>Gaifman, 1965</marker>
<rawString>Haim Gaifman. 1965. Dependency Systems and Phrase-Structure Systems. Information and Control, 8:304{337.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gerald Gazdar</author>
</authors>
<title>Applicability of indexed grammars to natural languages.</title>
<date>1988</date>
<booktitle>In Uwe Reyle</booktitle>
<editor>and Christian Rohrer, editors,</editor>
<publisher>Publishing Company,</publisher>
<location>Dordrecht, Holland.</location>
<marker>Gazdar, 1988</marker>
<rawString>Gerald Gazdar. 1988. Applicability of indexed grammars to natural languages. In Uwe Reyle and Christian Rohrer, editors, Natural Language Parsin and Linguistic Theories. D. Reidel Publishing Company, Dordrecht, Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind Joshi</author>
<author>K Vijay-Shanker</author>
</authors>
<title>Compositional Semantics with Lexicalized TreeAdjoining Grammar (LTAG): How Much Underspecification is Necessary?</title>
<date>1999</date>
<booktitle>In Proceedings of the 2nd International Workshop on Computational Semantics.</booktitle>
<contexts>
<context position="7057" citStr="Joshi and Vijay-Shanker, 1999" startWordPosition="1167" endWordPosition="1170">ncy correctly similarly expand weak generative capacity, notably D-tree Substitution Grammar (Rambow et al., 1995), and consequently end up with much greater parsing complexity. The work in this paper follows another seem VPS S does S Ctsleep seem John VP John VP seem VP Ctsleep: S likely VPS to sleep ~likely: S ��� VP Ctsleep: S John VP Ctsleep likely seem Figure 5: Set-local adjunction. line of research which has focused on squeezing as much strong generative capacity as possible out of weakly TAG-equivalent formalisms. Tree-local multicomponent TAG (Weir, 1988), nondirectional composition (Joshi and Vijay-Shanker, 1999), and segmented adjunction (Kulick, 2000) are examples of this approach, wherein the constraint on weak generative capacity naturally limits the expressivity of these systems. We discuss the relation of the formalism of this paper, Restricted MCTAG (R-MCTAG) with some of these in Section 5. 2 Formalism 2.1 Restricting set-local MCTAG The way we propose to deal with multicomponent adjunction is first to limit the number of components to two, and then, roughly speaking, to treat two-component adjunction as one-component adjunction by temporarily removing the material between the two adjunction s</context>
</contexts>
<marker>Joshi, Vijay-Shanker, 1999</marker>
<rawString>Aravind Joshi and K. Vijay-Shanker. 1999. Compositional Semantics with Lexicalized TreeAdjoining Grammar (LTAG): How Much Underspecification is Necessary? In Proceedings of the 2nd International Workshop on Computational Semantics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Leon S Levy</author>
<author>M Takahashi</author>
</authors>
<title>Tree adjunct grammars. Journal of computer and system sciences,</title>
<date>1975</date>
<pages>10--136</pages>
<contexts>
<context position="1918" citStr="Joshi et al., 1975" startWordPosition="279" endWordPosition="282">ndidates for adequately describing natural language; however, they differ in their capacities to assign appropriate linguistic structural descriptions to these string languages. The work in this paper is in the vein of other work (Joshi, 2000) in extracting as much structural descriptive power given a fixed ability to describe strings, and uses this to model dependency as well as constituency correctly. One way to characterize a formalism&apos;s descriptive power is by the the set of string languages it can generate, called its weak generative capacity. For example, Tree Adjoining Grammars (TAGs) (Joshi et al., 1975) can generate the language anbncndn and ContextFree Grammars (CFGs) cannot (Joshi, 1985). Figure 1: CFG-generable tree set for anbn. � � � Figure 2: TAG-generable tree set for anbn. However, weak generative capacity ignores the capacity of a grammar formalism to generate derived trees. This is known as its strong generative capacity. For example, CFGs and TAGs can both generate the language anbn, but CFGs can only associate the a&apos;s and b&apos;s by making them siblings in the derived tree, as shown in Figure 1, whereas a TAG can generate the infinite set of trees for the language anbn that have a&apos;s </context>
</contexts>
<marker>Joshi, Levy, Takahashi, 1975</marker>
<rawString>Aravind K. Joshi, Leon S. Levy, and M. Takahashi. 1975. Tree adjunct grammars. Journal of computer and system sciences, 10:136{163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
</authors>
<title>How much context sensitivity is necessary for characterizing structural descriptions: Tree adjoining grammars.</title>
<date>1985</date>
<booktitle>Natural language parsing: Psychological, computational and theoretical perspectives,</booktitle>
<pages>206--250</pages>
<editor>In L. Karttunen D. Dowty and A. Zwicky, editors,</editor>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge, U.K.</location>
<contexts>
<context position="2006" citStr="Joshi, 1985" startWordPosition="294" endWordPosition="295">o assign appropriate linguistic structural descriptions to these string languages. The work in this paper is in the vein of other work (Joshi, 2000) in extracting as much structural descriptive power given a fixed ability to describe strings, and uses this to model dependency as well as constituency correctly. One way to characterize a formalism&apos;s descriptive power is by the the set of string languages it can generate, called its weak generative capacity. For example, Tree Adjoining Grammars (TAGs) (Joshi et al., 1975) can generate the language anbncndn and ContextFree Grammars (CFGs) cannot (Joshi, 1985). Figure 1: CFG-generable tree set for anbn. � � � Figure 2: TAG-generable tree set for anbn. However, weak generative capacity ignores the capacity of a grammar formalism to generate derived trees. This is known as its strong generative capacity. For example, CFGs and TAGs can both generate the language anbn, but CFGs can only associate the a&apos;s and b&apos;s by making them siblings in the derived tree, as shown in Figure 1, whereas a TAG can generate the infinite set of trees for the language anbn that have a&apos;s and b&apos;s as siblings, as well as the infinite set of trees where the a&apos;s dominate the b&apos;s</context>
</contexts>
<marker>Joshi, 1985</marker>
<rawString>Aravind K. Joshi. 1985. How much context sensitivity is necessary for characterizing structural descriptions: Tree adjoining grammars. In L. Karttunen D. Dowty and A. Zwicky, editors, Natural language parsing: Psychological, computational and theoretical perspectives, pages 206{250. Cambridge University Press, Cambridge, U.K.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind Joshi</author>
</authors>
<title>Relationship between strong and weak generative power of formal systems.</title>
<date>2000</date>
<booktitle>In Proceedings of TAG+5,</booktitle>
<pages>107--114</pages>
<location>Paris, France.</location>
<contexts>
<context position="1542" citStr="Joshi, 2000" startWordPosition="216" endWordPosition="217">capacity sufficient to describe natural language, but no more powerful than necessary, so that the reasons some constructions are not legal in any natural language is explained by the formalism rather than stipulations in the linguistic theory. Several mildly context-sensitive grammar formalisms, all characterizing the same string languages, are currently possible candidates for adequately describing natural language; however, they differ in their capacities to assign appropriate linguistic structural descriptions to these string languages. The work in this paper is in the vein of other work (Joshi, 2000) in extracting as much structural descriptive power given a fixed ability to describe strings, and uses this to model dependency as well as constituency correctly. One way to characterize a formalism&apos;s descriptive power is by the the set of string languages it can generate, called its weak generative capacity. For example, Tree Adjoining Grammars (TAGs) (Joshi et al., 1975) can generate the language anbncndn and ContextFree Grammars (CFGs) cannot (Joshi, 1985). Figure 1: CFG-generable tree set for anbn. � � � Figure 2: TAG-generable tree set for anbn. However, weak generative capacity ignores </context>
</contexts>
<marker>Joshi, 2000</marker>
<rawString>Aravind Joshi. 2000. Relationship between strong and weak generative power of formal systems. In Proceedings of TAG+5, pages 107{114, Paris, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Seth Kulick</author>
</authors>
<title>A uniform account of locality constraints for clitic climbing and long scrambling.</title>
<date>2000</date>
<booktitle>In Proceedings of the Penn Linguistics Colloquium.</booktitle>
<contexts>
<context position="7098" citStr="Kulick, 2000" startWordPosition="1175" endWordPosition="1176">otably D-tree Substitution Grammar (Rambow et al., 1995), and consequently end up with much greater parsing complexity. The work in this paper follows another seem VPS S does S Ctsleep seem John VP John VP seem VP Ctsleep: S likely VPS to sleep ~likely: S ��� VP Ctsleep: S John VP Ctsleep likely seem Figure 5: Set-local adjunction. line of research which has focused on squeezing as much strong generative capacity as possible out of weakly TAG-equivalent formalisms. Tree-local multicomponent TAG (Weir, 1988), nondirectional composition (Joshi and Vijay-Shanker, 1999), and segmented adjunction (Kulick, 2000) are examples of this approach, wherein the constraint on weak generative capacity naturally limits the expressivity of these systems. We discuss the relation of the formalism of this paper, Restricted MCTAG (R-MCTAG) with some of these in Section 5. 2 Formalism 2.1 Restricting set-local MCTAG The way we propose to deal with multicomponent adjunction is first to limit the number of components to two, and then, roughly speaking, to treat two-component adjunction as one-component adjunction by temporarily removing the material between the two adjunction sites. The reasons behind this scheme will</context>
<context position="16495" citStr="Kulick (2000)" startWordPosition="2814" endWordPosition="2815">cept by adjoining the auxiliary tree for to be likely at the foot of the auxiliary tree for seem (Frank et al., 1999). (2) a. Does John seem to sleep? b. Does John seem to be likely to sleep? The derivation structure of this analysis does not match the dependencies, however seem adjoins into to sleep. DSG can derive this sentence with a derivation matching the dependencies, but it loses some of the advantage of TAG in that, for example, cases of super-raising (where the verb is raised out of two clauses) must be explicitly ruled out by subsertion-insertion constraints. Frank et al. (1999) and Kulick (2000) give analyses of raising which assign the desired derivation structures without running into this problem. It turns out that the analysis of raising from the previous section, designed for a translation problem, has both of these properties as well. The grammar is shown back in Figure 4. 4 A Parser Figure 8 shows a CKY-style parser for our restriction of MCTAG as a system of inference rules. It is limited to grammars whose trees are at most binary-branching. The parser consists of rules over items of one of the following forms, where w1 • • • wn is the input; r1, r1h, and r1l specify nodes of</context>
<context position="24494" citStr="Kulick, 2000" startWordPosition="4302" endWordPosition="4303"> extremely powerful, whereas R-MCTAG can only generate COUNT-4. However, DSG cannot generate the copy language (that is, {ww I w C E*} with E some terminal alphabet), whereas R-MCTAG can; this may be problematic for a formalism modeling natural language, given the key role of the copy language in demonstrating that natural language is not context-free (Shieber, 1985). RMCTAG is thus a more constrained relaxation of the notion of immediate dominance in favor of non-immediate dominance than is the case for DSG. Another formalism of particular interest here is the Segmented Adjoining Grammar of (Kulick, 2000). This generalization of TAG is characterized by an extension of the adjoining operation, motivated by evidence in scrambling, clitic climbing and subject-to-subject raising. Most interestingly, this extension to TAG, proposed on empirical grounds, is defined by a composition operation with constrained non-immediate dominance links that looks quite similar to the formalism described in this paper, which began from formal considerations and was then applied to data. This confluence suggests that the ideas described here concerning combining dependency and constituency might be reaching towards </context>
</contexts>
<marker>Kulick, 2000</marker>
<rawString>Seth Kulick. 2000. A uniform account of locality constraints for clitic climbing and long scrambling. In Proceedings of the Penn Linguistics Colloquium.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
<author>David Weir</author>
<author>K VijayShanker</author>
</authors>
<title>D-tree grammars.</title>
<date>1995</date>
<booktitle>In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics (ACL &apos;95).</booktitle>
<contexts>
<context position="6541" citStr="Rambow et al., 1995" startWordPosition="1084" endWordPosition="1087"> (see Figure 4), which would require a set-local multi-component TAG instead of tree-local. �seem:S does S ��� VP seem VPS Figure 4: SL-MCTAG generable derivation Unfortunately, unrestricted set-local multicomponent TAGs not only have more derivational generative capacity than TAGs, but they also have more weak generative capacity: SL-MCTAGs can generate the quadruple copy language wwww, for example, which does not correspond to any known linguistic phenomenon. Other formalisms aiming to model dependency correctly similarly expand weak generative capacity, notably D-tree Substitution Grammar (Rambow et al., 1995), and consequently end up with much greater parsing complexity. The work in this paper follows another seem VPS S does S Ctsleep seem John VP John VP seem VP Ctsleep: S likely VPS to sleep ~likely: S ��� VP Ctsleep: S John VP Ctsleep likely seem Figure 5: Set-local adjunction. line of research which has focused on squeezing as much strong generative capacity as possible out of weakly TAG-equivalent formalisms. Tree-local multicomponent TAG (Weir, 1988), nondirectional composition (Joshi and Vijay-Shanker, 1999), and segmented adjunction (Kulick, 2000) are examples of this approach, wherein the</context>
<context position="14878" citStr="Rambow et al. (1995)" startWordPosition="2535" endWordPosition="2538">comes some computational difficulties with RF-TAG which we discuss below. 3 Linguistic Applications In cases where TAG models dependencies correctly, the use of R-MCTAG is straightforward: when an auxiliary tree adjoins at a site pair which is just a single node, it looks just like conventional adjunction. However, in problematic cases we can use the extra expressive power of R-MCTAG to model dependencies correctly. Two such cases are discussed below. 3.1 Bridge and Raising Verbs seems Figure 7: Trees for (1) Consider the case of sentences which contain both bridge and raising verbs, noted by Rambow et al. (1995). In most TAG-based analyses, bridge verbs adjoin at S (or C&apos;), and raising verbs adjoin at VP (or I&apos;). Thus the derivation for a sentence like (1) John thinks that Mary seems to sleep. will have the trees for thinks and seems simultaneously adjoining into the tree for like, which, when interpreted, gives an incorrect dependency structure. But under the present view we can analyze sentences like (1) with derivations mirroring dependencies. The desired trees for (1) are shown in Figure 7. Since the tree for that seems can meta-adjoin around the subject, the tree for thinks correctly adjoins int</context>
<context position="23318" citStr="Rambow et al., 1995" startWordPosition="4102" endWordPosition="4105">; p; q; k; rlh&apos;; rll &apos;] [r!r; +;i; j; k; l; rh; rll] rlr a root of an upper tree [TIh; +; i; p; q; l; Tlh&apos;; Tl &apos;] adjoinable at (Tjh; T/l) [rl1;+;j; p; q; k; —; —] [r!r ; +;i; j; k; l; rh; rll] rl � rlr a root of an upper ... tree adjoinable at rl1 (T/; T71) (Pop-push) [rl;+;i; p; q; l; rJh; r!l] Figure 8: Parser pendency grammars is inadequate. Following the observation of TAG derivations&apos; similarity to dependency relations, other formalisms have also looked at relating dependency and constituency approaches to grammar formalisms. A more recent instance is D-Tree Substitution Grammars (DSG) (Rambow et al., 1995), where the derivations are also interpreted as dependency relations. Thought of in the terms of this paper, there is a clear parallel with R-MCTAG, with a local set ultimately representing dependencies having some yield function applied to it; the idea of non-immediate dominance also appears in both formalisms. The difference between the two is in the kinds of languages that they are able to describe: DSG is both less and more restrictive than R-MCTAG. DSG can generate the language COUNT-k for some arbitrary k (that is, {a1 &apos;a2 &apos; ... ak &apos;}), which makes it extremely powerful, whereas R-MCTAG </context>
</contexts>
<marker>Rambow, Weir, VijayShanker, 1995</marker>
<rawString>Owen Rambow, David Weir, and K. VijayShanker. 1995. D-tree grammars. In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics (ACL &apos;95).</rawString>
</citation>
<citation valid="true">
<authors>
<author>James Rogers</author>
</authors>
<title>Capturing CFLs with tree adjoining grammars.</title>
<date>1994</date>
<booktitle>In Proceedings of the 32nd Annual Meeting of the Association for Computational Linguistics (ACL &apos;94).</booktitle>
<contexts>
<context position="11095" citStr="Rogers (1994)" startWordPosition="1892" endWordPosition="1893">into a by removing ,3a. • An auxiliary tree may adjoin anywhere. • When a tree ,3 is adjoined at a node T1, T1 is rewritten as ,3, and the foot of ,3 inherits the label of T1. The tree set of (G, G&apos;), T ((G, G&apos;)), is fG[T (G&apos;)], where fG is the yield function of G and T (G&apos;) is the tree set of G&apos;. Thus, the elementary trees of G&apos; are combined to form a derived tree, which is then interpreted as a derivation tree for G, which gives instructions for combining elementary trees of G into the final derived tree. It was shown in Dras (1999) that when the meta-level grammar is in the regular form of Rogers (1994) the formalism is weakly equivalent to TAG. 2.3 Reducing restricted R-MCTAG to RF-2LTAG Consider the case of a multicomponent tree set {,31, ,32} adjoining into an initial tree a (Figure 6). Recall that we defined a sitesegment of a pair of adjunction sites to be all the nodes which are dominated by the upper site but not the lower site. Imagine that the site-segment ,3a is excised from a, and that ,31 and ,32 are fused into a single elementary tree. Now we can simulate the multi-component adjunction by ordinary adjunction: adjoin the fused ,31 and ,32 into what is left of a; then replace ,3a </context>
<context position="13810" citStr="Rogers, 1994" startWordPosition="2365" endWordPosition="2366">el) auxiliary tree to the meta-level grammar. Observe that set-local adjunction corresponds to meta-level adjunction along the (meta-level) spine. Recall that we restricted set-local adjunction so that a tree set can only adjoin at the foot of the upper tree and the root of the lower tree. Since this pair of nodes corresponds to the meta-foot, we can restate our restriction in terms of the converted grammar: no meta-level adjunction is allowed along the spine of a (meta-level) auxiliary tree except at the (meta-level) foot. Then all meta-level adjunction is regular adjunction in the sense of (Rogers, 1994). Therefore this converted 2LTAG produces derivation tree sets which are recognizable, and therefore our formalism is strongly equivalent to TAG. Note that this restriction is much stronger than Rogers&apos; regular form restriction. This was done for two reasons. First, the definition of our restriction would have been more complicated otherwise; second, this restrica ,3a modeling, the particular choice of direction is usually immaterial. tion overcomes some computational difficulties with RF-TAG which we discuss below. 3 Linguistic Applications In cases where TAG models dependencies correctly, th</context>
<context position="19742" citStr="Rogers, 1994" startWordPosition="3437" endWordPosition="3438">Pop rule places it back where the site-segment came from, emptying the &amp;quot;stack.&amp;quot; The Pop-push rule performs setlocal adjunction: a completed elementary tree set is placed between the two trees of yet another elementary tree set, and the &amp;quot;stack&amp;quot; is unchanged. Pop-push is computationally the most expensive rule; since it involves six indices and three different elementary trees, its running time is O(n6W ). It was noted in (Chiang et al., 2000) that for synchronous RF-2LTAG, parse forests could not be transferred in time O(n6). This fact turns out to be connected to several properties of RF-TAG (Rogers, 1994).3 3Thanks to Anoop Sarkar for pointing out the first The CKY-style parser for regular form TAG described in (Rogers, 1994) essentially keeps track of adjunctions using stacks, and the regular form constraint ensures that the stack depth is bounded. The only kinds of adjunction that can occur to arbitrary depth are root and foot adjunction, which are treated similarly to substitution and do not affect the stacks. The reader will note that our parser works in exactly the same way. A problem arises if we allow both root and foot adjunction, however. It is well-known that allowing both types of a</context>
</contexts>
<marker>Rogers, 1994</marker>
<rawString>James Rogers. 1994. Capturing CFLs with tree adjoining grammars. In Proceedings of the 32nd Annual Meeting of the Association for Computational Linguistics (ACL &apos;94).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart Shieber</author>
</authors>
<title>Evidence against the context-freeness of natural language. Linguistics and Philosophy,</title>
<date>1985</date>
<pages>8--333</pages>
<contexts>
<context position="24250" citStr="Shieber, 1985" startWordPosition="4262" endWordPosition="4263">difference between the two is in the kinds of languages that they are able to describe: DSG is both less and more restrictive than R-MCTAG. DSG can generate the language COUNT-k for some arbitrary k (that is, {a1 &apos;a2 &apos; ... ak &apos;}), which makes it extremely powerful, whereas R-MCTAG can only generate COUNT-4. However, DSG cannot generate the copy language (that is, {ww I w C E*} with E some terminal alphabet), whereas R-MCTAG can; this may be problematic for a formalism modeling natural language, given the key role of the copy language in demonstrating that natural language is not context-free (Shieber, 1985). RMCTAG is thus a more constrained relaxation of the notion of immediate dominance in favor of non-immediate dominance than is the case for DSG. Another formalism of particular interest here is the Segmented Adjoining Grammar of (Kulick, 2000). This generalization of TAG is characterized by an extension of the adjoining operation, motivated by evidence in scrambling, clitic climbing and subject-to-subject raising. Most interestingly, this extension to TAG, proposed on empirical grounds, is defined by a composition operation with constrained non-immediate dominance links that looks quite simil</context>
</contexts>
<marker>Shieber, 1985</marker>
<rawString>Stuart Shieber. 1985. Evidence against the context-freeness of natural language. Linguistics and Philosophy, 8:333{343.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
</authors>
<title>A study of tree adjoining grammars.</title>
<date>1987</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania.</institution>
<contexts>
<context position="17326" citStr="Vijay-Shanker, 1987" startWordPosition="2973" endWordPosition="2974">, has both of these properties as well. The grammar is shown back in Figure 4. 4 A Parser Figure 8 shows a CKY-style parser for our restriction of MCTAG as a system of inference rules. It is limited to grammars whose trees are at most binary-branching. The parser consists of rules over items of one of the following forms, where w1 • • • wn is the input; r1, r1h, and r1l specify nodes of the grammar; i, j, k, and l are integers between 0 and n inclusive; and code is either + or —: • [r1, code, i, —, —,l, —, —] and [r1, code, i, j, k, l, —, —] function as in a CKY-style parser for standard TAG (Vijay-Shanker, 1987): the subtree rooted by r1 E T derives a tree whose fringe is wi • • • wl if T is initial, or wi • • • wjFwk • • • wl if T is the lower auxiliary tree of a set and F is the label of its foot node. In all four item forms, code = + iff adjunction has taken place at r1. John V thinks NP S VP S ��� S* C that S V S ��� VP VPS Mary NP to sleep S VP V • [ri, code, i, j, h, l, —, ril] specifies that the segment (ri, ril) derives a tree whose fringe is wi • • • wjLwk • • • wl, where L is the label of ril. Intuitively, it means that a potential site-segment has been recognized. • [ri, code, i, j, h, l, </context>
<context position="20404" citStr="Vijay-Shanker, 1987" startWordPosition="3544" endWordPosition="3545">t the first The CKY-style parser for regular form TAG described in (Rogers, 1994) essentially keeps track of adjunctions using stacks, and the regular form constraint ensures that the stack depth is bounded. The only kinds of adjunction that can occur to arbitrary depth are root and foot adjunction, which are treated similarly to substitution and do not affect the stacks. The reader will note that our parser works in exactly the same way. A problem arises if we allow both root and foot adjunction, however. It is well-known that allowing both types of adjunction creates derivational ambiguity (Vijay-Shanker, 1987): adjoining 131 at the foot of 132 produces the same derived tree that adjoining 131 at the root of 132 would. The problem is not the ambiguity per se, but that the regular form TAG parser, unlike a standard TAG parser, does not always distinguish these multiple derivations, because root and foot adjunction are both performed by the same rule (analogous to our Pop-push). Thus for a given application of this rule, it is not possible to say which tree is adjoining into which without examining the rest of the derivation. But this knowledge is necessary to perform certain tasks online: for example</context>
</contexts>
<marker>Vijay-Shanker, 1987</marker>
<rawString>K. Vijay-Shanker. 1987. A study of tree adjoining grammars. Ph.D. thesis, Department of Computer and Information Science, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Weir</author>
</authors>
<title>Characterizing Mildly Context-Sensitive Grammar Formalisms.</title>
<date>1988</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Computer and Information Science, University of Pennsylvania.</institution>
<contexts>
<context position="3034" citStr="Weir, 1988" startWordPosition="510" endWordPosition="511">re 1, whereas a TAG can generate the infinite set of trees for the language anbn that have a&apos;s and b&apos;s as siblings, as well as the infinite set of trees where the a&apos;s dominate the b&apos;s in each tree, shown in Figure 2 (Joshi, 1985); thus TAGs have more strong generative capacity than CFGs. In addition to the tree sets and string languages a formalism can generate, there may S a e b S a S a e b S a S a S a e b b � � � b b S a S b e S a S a S b S b e S a S a S a S b S b S b e also be linguistic reasons to care about how these structures are derived. For this reason, multi-component TAGs (MCTAGs) (Weir, 1988) have been adopted to model some linguistic phenomena. In multi-component TAG, elementary trees are grouped into tree sets, and at each step of the derivation all the trees of a set adjoin simultaneously. In treelocal MCTAG (TL-MCTAG) all the trees of a set are required to adjoin into the same elementary tree; in set-local MCTAG (SLMCTAG) all the trees of a set are required to adjoin into the same elementary tree set. TL-MCTAGs can generate the same string languages and derived tree sets as ordinary TAGs, so they have the same weak and strong generative capacities, but TL-MCTAGs can derive the</context>
<context position="6997" citStr="Weir, 1988" startWordPosition="1163" endWordPosition="1164"> Other formalisms aiming to model dependency correctly similarly expand weak generative capacity, notably D-tree Substitution Grammar (Rambow et al., 1995), and consequently end up with much greater parsing complexity. The work in this paper follows another seem VPS S does S Ctsleep seem John VP John VP seem VP Ctsleep: S likely VPS to sleep ~likely: S ��� VP Ctsleep: S John VP Ctsleep likely seem Figure 5: Set-local adjunction. line of research which has focused on squeezing as much strong generative capacity as possible out of weakly TAG-equivalent formalisms. Tree-local multicomponent TAG (Weir, 1988), nondirectional composition (Joshi and Vijay-Shanker, 1999), and segmented adjunction (Kulick, 2000) are examples of this approach, wherein the constraint on weak generative capacity naturally limits the expressivity of these systems. We discuss the relation of the formalism of this paper, Restricted MCTAG (R-MCTAG) with some of these in Section 5. 2 Formalism 2.1 Restricting set-local MCTAG The way we propose to deal with multicomponent adjunction is first to limit the number of components to two, and then, roughly speaking, to treat two-component adjunction as one-component adjunction by te</context>
<context position="9604" citStr="Weir (1988)" startWordPosition="1602" endWordPosition="1603"> generative capacity, as will be shown in Section 2.3. Observe that the set-local TAG given in Figure 5 obeys the above restrictions. 2.2 2LTAG For the following section, it is useful to think of TAG in a manner other than the usual. Instead of it being a tree-rewriting system whose derivation history is recorded in a derivation tree, it can be thought of as a set of trees (the `derivation&apos; trees) with a yield function (here, reading off the node labels of derivation trees, and composing corresponding elementary trees by adjunction or substitution as appropriate) applied to get the TAG trees. Weir (1988) observed that several TAGs could be daisy-chained into a multilevel TAG whose yield function is the composition of the individual yield functions. More precisely: a 2LTAG is a pair of TAGs (G, G&apos;) _ ((E, NT, I, A, S), (I U A, I U A, I&apos;, A&apos;, S&apos;)). We call G the object-level grammar, and G&apos; the meta-level grammar. The object-level grammar is a standard TAG: E and NT are its terminal and nonterminal alphabets, I and A are its initial and auxiliary trees, and S E I contains the trees which derivations may start with. The meta-level grammar G&apos; is defined so that it derives trees that look like der</context>
</contexts>
<marker>Weir, 1988</marker>
<rawString>David Weir. 1988. Characterizing Mildly Context-Sensitive Grammar Formalisms. Ph.D. thesis, Department of Computer and Information Science, University of Pennsylvania.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>