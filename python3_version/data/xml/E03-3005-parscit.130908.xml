<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000663">
<title confidence="0.999585">
A Dynamic Logic Formalisation
of the Dialogue Gameboard
</title>
<author confidence="0.998133">
Raquel Fernandez
</author>
<affiliation confidence="0.9381725">
Department of Computer Science
King&apos;s College London
</affiliation>
<email confidence="0.993895">
raquel@dcs.kcl.ac.uk
</email>
<sectionHeader confidence="0.995569" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999687416666667">
This paper explores the possibility of
using the paradigm of Dynamic Logic
(DL) to formalise information states and
update processes on information states.
In particular, we present a formalisa-
tion of the dialogue gameboard intro-
duced by Jonathan Ginzburg. From a
more general point of view, we show
that DL is particularly well suited to de-
velop rigorous formal foundations for an
approach to dialogue dynamics based on
information state updates.
</bodyText>
<sectionHeader confidence="0.998995" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9995444375">
A particular development that has received much
attention in recent work on dialogue modelling is
the use of information states to characterise the
state of each dialogue participant&apos;s information as
the conversation proceeds. The information state
approach to dialogue, as developed for instance
in the TRINDI project (e.g. (Bohlin et al., 1999;
Traum et al., 1999)), assumes that some aspects of
dialogue management are best captured in terms of
the relevant information that is available to each
dialogue participant at each state of the conver-
sation, along with a full account of the possible
update mechanisms that change this information.
Unlike classical Artificial Intelligence approaches
built on the basis of axiomatic theories of rational
agency,1 information state accounts tend to avoid
</bodyText>
<footnote confidence="0.7754295">
1See e.g. (Cohen and Levesque, 1990: Grosz and Sidner,
1990: Sadek, 1991).
</footnote>
<bodyText confidence="0.999611833333333">
the use of logical frameworks and concentrate on
dialogue-specific notions such as common ground,
discourse obligations and questions under discus-
sion.
In this paper we explore the possibility of us-
ing a modal logic paradigm, namely Dynamic
Logic (Hard l et al., 2000), originally conceived
as a formal system to reason about computer pro-
grams, to formalise information states and up-
date processes on information states. In partic-
ular, we present a dynamic logic formalisation
of Ginzburg&apos;s dialogue gameboard (DGB) as in-
troduced in (Ginzburg, 1996; Ginzburg, ms) and
(Larsson, 2002). From a more general point of
view, we show that Dynamic Logic is particularly
well suited to develop rigorous formal foundations
for an approach to dialogue dynamics based on in-
formation state updates.
</bodyText>
<subsectionHeader confidence="0.947433">
1.1 Overview
</subsectionHeader>
<bodyText confidence="0.999961357142857">
The structure of the paper is as follows: First,
we introduce the basic notions of First-Order Dy-
namic Logic, describing its syntax and semantics.
After briefly characterising the structure of the di-
alogue gameboard in Section 3, our formalisation
is presented in Section 4. We define the formal
language and its semantic interpretation, and dis-
cuss how the different components of the dialogue
gameboard have been modelled. In Section 5, we
show how the rules of conversational interaction
can be expressed within the formalism and explain
some examples in detail. Finally, in Section 6, we
present our conclusions and indicate some direc-
tions for future research.
</bodyText>
<page confidence="0.99878">
17
</page>
<note confidence="0.99791775">
M3o if A = cp[v],, for atomic formulae cp
MT T is always true
MI I is never true
M (t1 = t2) iff vs (ti) equals vs (t2), for terms t1 and t2
=s if M A
.A4 s (Ai A A2) iff M A1 and M =s A2
A4 1=s (Al V A2) if M A1 or M =3 A2
M (Ai —&gt; A2) iff M A1 or M =., A2
M =s xA if there is an a C D, such that s(xla)s&apos; and M =s, A
M =s VxA if for all a E D, if s(x a)s&apos; then M 1=s, A
Ms&lt;a&gt; A if there is an s&apos; C S, such that sRas&apos; and M =8, A
Jt43[c]AA if for all s&apos; e S, if sR,s&apos; then M =s, A
</note>
<tableCaption confidence="0.9998085">
Table 1: Definition of truth
Table 2: Accessibility relations
</tableCaption>
<equation confidence="0.528173333333333">
sRx:=ts&apos; iff
sR,os&apos; iff
sR,uos&apos; iff
iff
sRcp?s&apos; iff
s(3c vs(t))s&apos;
</equation>
<bodyText confidence="0.4776458">
as&amp;quot; such that sR,s&amp;quot; and s&amp;quot;Ros&apos;
sR„s&apos; or sRos&apos;
there are finitely many states Si, s2, sr, such that
s1R,s2, s2R,93, ,,,,, 1Rasn and s = Si and 5&apos; = sn
s = s&apos; and M =,
</bodyText>
<sectionHeader confidence="0.792886" genericHeader="method">
2 Dynamic Logic: Basic Notions
</sectionHeader>
<bodyText confidence="0.996900290322581">
The formalisation we present in this paper is based
on the first-order version of Dynamic Logic (DL)
as it is discussed in (Hard et al., 2000) and (Gold-
blatt, 1992). In short, DL is a multi-modal logic
with a possible worlds semantics, which distin-
guishes between expressions of two sorts: formu-
lae and programs. The language of DL is that of
first-order logic together with a set of modal op-
erators: for each program a there are a box [a]
and a diamond &lt; a &gt; operator. The set of possi-
ble worlds (or states) in the model is the set of all
possible assignments to the variables in the lan-
guage. Atomic programs change the values as-
signed to particular variables. They can be com-
bined to form complex programs by means of a
repertoire of program constructs, such as sequence
non-deterministic choice U, iteration * and test
?.
Originally, DL was conceived as a formal sys-
tem to reason about programs, formalising cor-
rectness specifications and proving rigorously that
those specifications are met by a particular pro-
gram. From a more general perspective, however,
it can be viewed as a formal system to reason about
transformations on states. In this sense, it is par-
ticularly well suited to provide a fine characteri-
sation of the dynamic processes that take place in
dialogue as updates on the information states of
the dialogue participants.
In the remainder of this section, we formally in-
troduce the syntax and the semantics of DL.
</bodyText>
<subsectionHeader confidence="0.966435">
2.1 Syntax
</subsectionHeader>
<bodyText confidence="0.99923125">
The language of first-order DL is built upon First-
Order Logic. It is generated by some first-order
vocabulary E made up of a set of predicate sym-
bols, a set of function symbols, a set of constants
and a set of variables. In addition to the proposi-
tional connectives and the universal and existential
quantifier symbols, the language also includes two
modal operators [1 and &lt;&gt;, a set H of programs
a and the program constructs ;, U, * and?.
Formulae and Programs. Atomic formulae
are atomic, first-order formulae of the vocabulary
E, including T and I. The set (I) of well-formed
</bodyText>
<page confidence="0.974228">
18
</page>
<equation confidence="0.549725333333333">
formulae A is then defined as follows:
A ::= —A_ A1 A A2 Al V A2 —&gt; A2
VxAl]xA [a] A 1&lt;a&gt;A
</equation>
<bodyText confidence="0.959007">
In the basic version of DL, atomic programs 7
are simple assignments (x := t), where x is an
individual variable and t is a first-order term. The
set 111 of programs a is defined as follows:
as variables ranging over finite strings of elements
in the domain. To manipulate these stack vari-
ables, two additional atomic programs x.pop and
x.push(x) are included. Here x is some stack
variable (i.e. a string of elements ) and stands
for the element to be pushed onto x. The accessi-
bility relations for these two new atomic programs
are shown in Table 3, where, for a string a and an
element a, tail(a • a) = a.
</bodyText>
<equation confidence="0.788641142857143">
&amp;quot;= it
al; a2
2.2 Semantics
al U a2 G*
sRX.push(x)si iff s (X v,(x) •
sRx.pops&apos; iff s(x tail (I) s(x))s&apos;
0`?
</equation>
<bodyText confidence="0.993432">
As usual in modal logic, the language is in-
terpreted in a possible-worlds based semantical
structure. A model is a structure
</bodyText>
<equation confidence="0.871388">
M = {A, S, R, VI
</equation>
<bodyText confidence="0.994497">
where
</bodyText>
<listItem confidence="0.9993938">
• A = {D, I} is a first-order structure;
• S is a non-empty set of states;
• R is a function assigning to each program a
II a binary relation R, C S x S;
• V is a function V : S &gt; SA assigning to
</listItem>
<bodyText confidence="0.99448625">
each s e S an A-valuation vs : Var D, i.e. a
mapping from the set of variables to elements in
the domain.
For s, s&apos; E S, we will write s(xla)s&apos; to mean
that vs, (x) = a and vs, (y) = vs (y) whenever
y x.
Now we are ready to define the truth-relation
.A4 = A of a formula A at state s in model M.
As usual in first-order logic, we write A 1= yo[v]
to mean that is true in A under valuation v. For
conciseness, we will omit the part dealing with the
semantics of first-order terms. The formal defini-
tion of truth in a model is shown in Table 1.
From the relations R„CSxS, we can induc-
tively define accessibility relations for the com-
pound programs. Table 2 shows the accessibility
relations for basic atomic programs and compound
programs for all states s. S.
Stack Variables. Interesting variants of DL
arise from allowing auxiliary data structures such
as stacks and arrays. Following (Harel et al.,
2000), we will consider a version of DL in which
programs can manipulate some variables as last-
in-first-out stacks. Formally, stacks are modelled
</bodyText>
<tableCaption confidence="0.983039">
Table 3: push and pop programs
</tableCaption>
<sectionHeader confidence="0.993843" genericHeader="method">
3 The Dialogue Gameboard
</sectionHeader>
<bodyText confidence="0.999986225806451">
Following the pioneering work of philosophers
like (Lewis, 1979) and (Stalnaker, 1979), the the-
ory of context developed by Jonathan Ginzburg
joins a line of research which, instead of focusing
on the intentional attitudes of the dialogue partic-
ipants, highlights the public and conventional as-
pects of communication. Under this perspective,
a dialogue can be thought of as a conversational
scoreboard that keeps track of the state of the con-
versation.
The dialogue gameboard (DGB), Ginzburg&apos;s
particular version of the conversational score-
board, plays a central role in his theory of con-
text. It can be seen as the context relative to which
conventionalised interaction is assumed to take
place. The DGB provides a structured characteri-
sation of the information which the dialogue par-
ticipants view as common in terms of three main
components: a set of FACTS, which the dialogue
participants take as common ground, a partially
ordered set of questions under discussion QUD,
and the LATEST-MOVE made in the dialogue. In-
spired by the notion of dialogue game (e.g. (Ham-
blin, 1970; Carlson, 1983)), Ginzburg assumes
that each move made by a dialogue participant de-
termines a restricted set of options for follow-up
in the dialogue, constraining what can be said and
how.
The framework has been used to provide an ac-
count of the kind of context that licenses elliptical
responses in dialogue (Ginzburg, 1999; Fernandez
</bodyText>
<page confidence="0.995409">
19
</page>
<bodyText confidence="0.99973525">
and Ginzburg, 2002; Fernandez et al., 2003) and
has also been the starting point of implemented
dialogue systems such as GoDiS (Cooper et al.,
2001) and IBiS (Larsson, 2002).
</bodyText>
<sectionHeader confidence="0.990591" genericHeader="method">
4 A DL Formalisation of the DGB
</sectionHeader>
<bodyText confidence="0.999955846153846">
To model context in dialogue as it is understood
in Ginzburg&apos;s DGB, we will consider a particular
domain of interpretation which includes entities
such as agents (the dialogue participants), ques-
tions, propositions and dialogue moves.2 For the
sake of simplicity, in this paper we restrict our-
selves to four dialogue move types, namely ask,
assert, clarification request and acknowledge. The
main strategy to reason about the effects of conver-
sational interaction on the DGB, will be to repre-
sent its main components as variables ranging over
different domains. In what follows, we introduce
the details of our formalism.
</bodyText>
<subsectionHeader confidence="0.981653">
4.1 Introducing the Formalism
</subsectionHeader>
<bodyText confidence="0.987378977272727">
Let ,C be a first-order DL language with equality
made up of unary predicate symbols Q,P,G, DP,
binary predicate symbols infl(uences) and
ans(wers), a ternary predicate symbol Utt, a
function symbol whether, constants a, b, ask,
ass, dr and ack, and an infinite set Var of vari-
ables x. Var includes a set V1 = {LMa, LMb, UTT}
of special individual variables and a set V2 =
{FACTS, QUDa, QUDb, PENDING,, PEND ING}of stack variables. We also introduce a function
symbol head to be applied to stack variables.
The set of variable symbols Var also includes
symbols i, j which range over the set of dialogue
participants, symbols q, q&amp;quot; and p, p&apos; ranging over
questions and propositions respectively, symbols
r/ ranging over propositions or questions, sym-
bols m, m&apos; ranging over moves, and symbols u, u&apos;
ranging over utterances.
Language r is interpreted over a first-order
structure A = {al}. The domain D of
A is made up of a set of dialogue participants
DPD = {a&apos;. b&apos;}, a set of questions Qv, a set of
propositions Pv , a set of dialogue moves M =
2Note that both propositions and questions are first-class
entities in the domain While this is not the standard ap-
proach, it is familiar from situation theoretic work and makes
the current formalisation simpler.
{ask&apos;, ass&apos;, clrl, acki}, and an element 1
which is used to interpret the predicate symbol G,
i.e. we set 1(G) = {1}. A number of relations are
declared over D: infl is interpreted as a binary re-
lation on Qv, ans as a binary relation between PD
and Qv, and Utt as a set of utterances Uttv, that
will be modelled as triples (i, m, r) of a dialogue
participant, a dialogue move and either a proposi-
tion or a question. The function symbol whether
is interpreted as a function whether such that for
every proposition p, whether(p) E QT). Finally,
head is interpreted as a function that maps every
string to its first element.
Recall that stack variables range over strings of
elements in the domain: Let Q*, P* , Utt* denote
the set of all finite-length strings over Qv, Pv and
Utt, respectively. This will be used later on to
model the stack variables in V2.
</bodyText>
<subsectionHeader confidence="0.88538">
4.2 The DGB Components
</subsectionHeader>
<bodyText confidence="0.999228785714286">
As mention earlier, in DL, transitions between
states are changes in variable assignment. We
therefore represent the dynamic aspects of the in-
formation state as variables ranging over different
domains. In particular, we use the variable names
FACTS, QUD and LM to represent the three dif-
ferent components of the DGB. We also include
two additional variables UT T and PENDING. New
utterances are assigned to UTI and, in case the
addressee cannot ground their content, they are
also assigned to PENDING. This allows to distin-
guish between two kinds of grounding: content
grounding (the value of UTT is assigned to LM)
and proposition grounding or acceptance (a propo-
sition is incorporated onto FACTS).
To model content grounding we use a unary
predicate G and assume that G(x) only holds
when the addressee of a particular utterance can
ground its content. That is, according to the for-
malisation introduced in Section 4.1, G(x) will
be true in all those states where v (x) = 1. As
an abbreviation, we will write G when G(x) and
v(x) = 1, and otherwise.
One of the assumptions behind the DGB is that
a realistic characterisation of context must allow
for asymmetries between the information avail-
able to the different dialogue participants at a
given point in a conversation. Thus, although the
</bodyText>
<page confidence="0.973709">
20
</page>
<bodyText confidence="0.999938892857143">
DGB attempts to represent the publicly accessible
information at each state of the dialogue, it does so
in terms of the collection of individual information
states of the participants. In the current formali-
sation, however, only QUD, LM and PENDING are
relative to each dialogue participant, while FACTS
and UTT are unique. This is an obvious choice
for the case of UTT, which is just used to hold
new contributions publicly uttered by any dialogue
participant. In the case of FACTS, however, this
is a simplification motivated by the fact that the
current formalisation only attempts to model sim-
plified situations where FACTS is assumed to be
empty at the initial state, and only propositions
that have been commonly agreed on can be inte-
grated into it. Thus, there is no room for disagree-
ments in this respect, and the set of FACTS is al-
ways the same for the two dialogue participants.
We model QUD and PENDING as stacks, in
a way that is very much inspired by Qui) &apos;s ac-
tual implementation in the GoDiS dialogue system
(Cooper et al. 2001). Although we think of FACTS
as a set,3 for technical reasons that will become
clear below, we also model FACTS as a stack. On
the other hand, UT T and LM range over utterances,
i.e. triples (i, m, r), where i is interpreted as the
speaker of U, 171 is the dialogue move performed
by u and r represents its content. Formally:
</bodyText>
<equation confidence="0.999276625">
V(FACTS) P*
V(QUDa) Q*
v(QUDb) Q*
v(PENDINGa) utt*
v(PENDINGb) utt*
v(LMa) uttp
v(I,Mb) uttp
v(UTT) uttp
</equation>
<bodyText confidence="0.974223176470588">
The reason why FACTS is modelled as a stack
variable is that we want to be able to check
whether a particular element (i.e. some proposi-
tion) is in FACTS, and we want to be able to
express this in the object language. Modelling
FACTS as a variable ranging over strings of propo-
sitions allows us to use the pop program to check
whether a particular element x belongs to FACTS
or not: if x is in FACTS and we pop the stack re-
peatedly, x will show up at some point as the head
3 Arguably, there are reasons to postulate some kind of or-
der within the set of facts. See (Ginzburg, 1997) for an ac-
count of the restrictions on which contextually presupposed
facts can serve as antecedents for some anaphoric elements.
of the stack. Thus, we will use the notation x
FACTS as an abbreviation for &lt; FACT S.pop* &gt;
head(FACTS) = x.
</bodyText>
<sectionHeader confidence="0.945053" genericHeader="method">
5 Constraining the Model
</sectionHeader>
<bodyText confidence="0.999982696969697">
Our main aim in this section is to show that the
formalism outlined previously can be used to ex-
press the rules underlying cooperative conversa-
tional interaction in terms of update operations on
the DGB. The current formalisation attempts to
model three different scenarios: asking and re-
sponding to a question, integrating a proposition
into the commonly agreed facts, and asking for
clarification when the content of an utterance has
not been grounded.
In (Fernandez, 2003) these scenarios were mod-
elled in the form of complex DL programs corre-
sponding to conventional protocols. From an ab-
stract point of view, protocols can be thought of as
a way to characterise the range of possible follow-
ups in cooperative dialogue or, alternatively, as a
representation of the obligations the dialogue par-
ticipants are socially committed to (see (Traum
and Allen, 1994; Kreutel and Matheson, 1999)).
In the present paper, however, we opt for a differ-
ent strategy: our aim here is to describe the appro-
priateness conditions for each particular scenario
by means of a set of axioms, that is, a set of for-
mulas we postulate to be valid in the model. The
aim of these formulas is to restrict the operations
that can be performed on the DGB components. In
this sense, they can be seen as constraints charac-
terising the appropriateness conditions of simple
programs like UTT := (i, c 1 r , r) (asking a clari-
fication question) or FACT S.push (x) (integrating
an item into the common ground).
In what follows we are going to present a few of
examples in detail.
</bodyText>
<subsectionHeader confidence="0.97156">
5.1 Asking for Clarification
</subsectionHeader>
<bodyText confidence="0.999579375">
Following Ginzburg&apos;s account, we assume that
when a dialogue participant a utters an utterance
L, LMa is updated with ?I. If the content of LM,
is a question q, q is pushed onto QUDa. Asserting
a proposition p raises the question whether p for
discussion. Thus, if the content of LMa is a propo-
sition p, whether(p) will be pushed onto QUDa.
At this stage, if the addressee of u can ground its
</bodyText>
<page confidence="0.984283">
21
</page>
<equation confidence="0.889602083333333">
Vu (u = (a, m , r) A (UTT = LM, = It) A
((Q(r) A head(QUDa) = r) V (P(r) A head(QUDa) = whether(r))) A
&lt; PEND INGb.push(u) &gt; T A Vi [PENDINGb.push(x)] = u))
Vu (u = (a, m, r) A (head(PENDINGb) = UTT = u)
Q(q)A &lt;UTT := (b, clr,q) &gt; T) A
(Vim&apos; q [UTT := (i, m&apos;, q)] (i = b) A = clr) A Q (q)))
Table 4: Asking for Clarification
Vup (u= (i, ack, r) A (LMa = LMb = A
P(p) A head(QUDG) = head(QUDb) = whether(p) A p V FACTS —&gt;
&lt;FACTS.push(p) &gt; T A Vi [FACT S.push(x)] = p))
Vp P(p) A (p C FACTS) A (head(QUDa) = head(QUDb) = whether(p))
&lt; QUDa.pop; QUDb.pop &gt; T
</equation>
<tableCaption confidence="0.828172">
Table 5: Accepting a Proposition
</tableCaption>
<bodyText confidence="0.999021285714286">
content, she updates her LM and QUD accordingly.
On the other hand, if the addressee cannot ground
the content of it, then it will be put aside and a
clarification question will be posited.
Table 4 shows the axioms formalising this latter
possibility. Let us have a closer look at the first
formula. The antecedent describes an information
state where an utterance it with content r is the
value of UTT and Lma, the head of QUDa is ei-
ther r (in case r is a question) or whether(r) (in
case r is a proposition), and G does not hold. This
means that the utterance it has just been posited
by dialogue participant a and that the addressee
b has not been able to ground its content. In
such a situation the information state should be up-
dated by pushing that utterance it onto PEND I NGb.
This is expressed in the consequent of the implica-
tion, firstly by a diamond formula which guaran-
tees that the update operation is actually being per-
formed, and secondly by a box formula which en-
sures that no utterance other than it can be pushed
onto PEND INGb.
In the second formula, the antecedent describes
a situation where an utterance it with speaker a is
the value of both UTT and PEND INGb. That is,
an utterance that has just been posited by speaker
a is pending in b&apos;s information state. This situa-
tion triggers a request for clarification that should
be performed by speaker b. This is expressed in
the consequent of the formula again by means of a
diamond and a box formula, which ensure that the
information state will be updated by assigning to
UTT an utterance (b, c 1r , q) such that its speaker
is dialogue participant b, its content is a question
q, and the dialogue move performed is clr.
</bodyText>
<subsectionHeader confidence="0.997383">
5.2 Proposition Acceptance
</subsectionHeader>
<bodyText confidence="0.998250863636364">
In the current formalisation, all propositions have
to be acknowledged before being introduced into
the commonly agreed facts. Only once an asser-
tion has been acknowledged it is considered to be
accepted by the two dialogue participants.
The axioms formalising the integration of a
proposition into FACTS are shown in Table 5.
The formulas follow the pattern already described
in the previous subsection. In this case, the an-
tecedent of the first formula describes a situation
where an utterance it performing an ack dialogue
move is both the value of LMa and Lmb, the head&apos;s
value of QUD, and QUD b is whether(p), where p
is a proposition, and p is not in FACTS. This is the
situation that licenses the integration of a proposi-
tion into the common ground. This is expressed
by the consequent of the axiom which, again by
means of a diamond and a box formula, ensures
that proposition p is pushed onto FACTS.
Once p belongs to FACTS, whether(p) can be
downdated from QUD. The second formula for-
malises precisely this situation.
</bodyText>
<page confidence="0.981117">
22
</page>
<table confidence="0.477828166666667">
eq (Q(q) A (head(QUDa) = head(QUDb) = q) A H]p (P(p) A (p E FACTS)) A ans(p, q))
aimr (&lt;UTT := (i,m,r)&gt; T) A
Vimr QuiT := (i, m, r)] ((m = ass) A PH A ans(r, q) A (r E FACTS)) V
((m = ask) A Q(r) A infl(r, q))))
Vpq P(p) A Q(q) A (head(QUDa) = head(QUDO = A (p C FACTS) A ans(p, q)
&lt; QuDa.pop; QuDb.pop &gt; T
</table>
<tableCaption confidence="0.97204">
Table 6: Addressing a Question
</tableCaption>
<subsectionHeader confidence="0.998829">
5.3 Addressing a Question
</subsectionHeader>
<bodyText confidence="0.9999783">
Our last example concerns appropriate responses
to a question under discussion. In cooperative
dialogue, the optimal follow-ups after a question
has been asked are either answering that question
or responding with another question which influ-
ences the first one. The first formula in Table 6
formalises this observation.
The antecedent of the formula describes an in-
formation state where a question q is the head&apos;s
value of both QUDa and QUDb, and q has not
yet been answered. The consequent of the for-
mula expresses what the appropriate responses are
in this situation. This is achieved by means of
a diamond formula which guarantees that there
is a state reachable by assigning some utterance
(i. m. r) to UTT, and a box formula which ensures
that the utterance assigned to UTT will only be ei-
ther an answer to the question under discussion or
a question which influences it.
Once a question under discussion has been an-
swered, it can be popped from QUD. The second
formula in Table 6 formalises this situation. The
antecedent of this formula has to be understood
as describing an information state reached after a
proposition uttered to answer a question has been
acknowledged and, according to axioms in Table
5, introduced into FACTS. Once FACTS contains
a proposition which is an answer to the question
currently under discussion, this question can be
downdated from QUD.
</bodyText>
<sectionHeader confidence="0.996309" genericHeader="conclusions">
6 Discussion and Future Work
</sectionHeader>
<bodyText confidence="0.999747619047619">
In this paper we have explored the possibility
of using DL to formalise the main aspects of
Ginzburg&apos;s DGB. More specifically, we have put
forward a model where the components of the
DGB are represented by variables ranging over
different domains, while update operations are
brought about by program executions that involve
changes in variable assignments.
The use of DL for linguistic matters is of course
not new. Several authors have observed strong
parallels between the execution of computer pro-
grams and the dynamic view on discourse inter-
pretation. The idea underlying the dynamic logic
approach to the semantics of programming lan-
guages, i.e. that the meaning of a program can
be captured in terms of a relation between states,
has indeed been successfully applied in natural
language semantics, for instance, by Groenendijk
and Stokhof&apos;s Dynamic Predicate Logic (Groe-
nendijk and Stokhof, 1991). Although the aims
of DPL, mostly restricted to anaphorical relations
across sentence boundaries, are rather different
from ours, its guiding idea (i.e. that the meaning of
a natural language sentence does not lie in its truth
conditions, but rather in its potential to change
context) is in line with the perspective taken in this
paper. One could view the DGB as a semantics for
utterances where each utterance is interpreted as a
pair of states, i.e. as the change it brings about in
the DGB.
As mention in the introduction, the current for-
malisation is intended as a first step towards the
development of rigorous formal foundations for an
approach to dialogue dynamics based on informa-
tion state updates. Although this is still very much
work in progress, we believe that the formalisation
presented here shows that DL is an expressive and
precise tool particularly well suited for this task.
From a more general point of view, we are
interested in the interaction patterns that char-
acterise different types of dialogue. In this re-
spect, a formalisation along the same lines as the
</bodyText>
<page confidence="0.99299">
23
</page>
<bodyText confidence="0.999985">
one outlined in the present paper has been used
in (Fernandez, 2003) to characterise the internal
structure of Inquiry-Oriented Dialogues.
There are many issues that remain still open,
perhaps the most straightforward being how to use
the current formalisation for instance to prove de-
sirable properties of particular dialogue systems.
In fact, some resemblances can be found between
the axioms presented in Section 5 and the up-
date rules described in (Ljunglof, 2000), where
the author presents a calculus for reasoning math-
ematically about the rule-based engines developed
within the TRINDI project. We expect to show in
our future research that some version of DL can
also be successfully used to provide precise speci-
fications of dialogue systems based on information
state approaches.
</bodyText>
<sectionHeader confidence="0.998523" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999586767123288">
P. Bohlin, R. Cooper, E. Engdhal, and S. Larssson.
1999. Information states and dialogue move en-
gines. In IJCAI-99 Workshop on Knowledge and
Reasoning in Practical Dialogue Systems.
L. Carlson. 1983. Dialogue Games. Synthese Lan-
guage Library. D. Reidel.
P. Cohen and H. Levesque. 1990. Rational interac-
tion as the basis for communication. In P. Cohen,
J. Morgana, and M. Pollack, editors, Intentions in
Communication. MIT Press.
R. Cooper, S. Larsson, J. Hieronymus, S. Ericsson,
E.Engdahl, and P. Ljunglof. 2001. Godis and ques-
tions under discussion. In The TRINDI Book.
R. Fernandez and J. Ginzburg. 2002. Non-Sentential
Utterances: A Corpus Study. Traitement automa-
tique des languages, 43(2):13-42.
R. Fernandez, J. Ginzburg, H. Gregory, and S. Lap-
pin. 2003. SHARDS: Fragment Resolution in Di-
alogue. In H. Bunt and R. Muskens, editors, Com-
puting Meaning, volume 3. Kluwer. To appear.
R. Fernandez. 2003. A Dynamic Logic Formalisation
of Inquirey-Oriented Dialogues. In Proceedings of
the 6th CLUK Colloquium, pages 17-24, Edinburgh,
UK.
J. Ginzburg. 1996. Interrogatives: Questions, facts,
and dialogue. In S. Lappin, editor, Handbook of
Contemporary Semantic Theory. Blackwell, Oxford.
J. Ginzburg. 1997. Structural mismatch in dia-
logue. In Proceedings of MunDial 97. Universitaet
Muenchen.
J. Ginzburg. 1999. Ellipsis resolution with syntactic
presuppositions. In H. Bunt and R. Muskens, edi-
tors, Computing Meaning: Current Issues in Com-
putational Semantics. Kluwer.
J. Ginzburg. ms. A semantics for interaction in di-
alogue. Forthcoming for CSLI Publications. Draft
chapters available from: http://www.des.kcl.ac.uld
staff/ginzburg.
R. Goldblatt. 1992. Logics of Time and Computation.
Lecture Notes. CSLI Publications.
J. Groenendijk and M. Stokhof. 1991. Dynamic pred-
icate logic. Linguistics and Philosophy, 14(1):39-
100.
B. Grosz and C. Sidner. 1990. Plans for discourse.
In P. Cohen, J. Morgana, and M. Pollack, editors,
Intentions in Communication. MIT Press.
C. L. Hamblin. 1970. Fallacies. Methuen, London.
D. Hard, D. Kozen, and J. Tiuryn. 2000. Dynamic
Logic. Foundations of Computing Series. The MIT
Press.
J. Kreutel and C. Matheson. 1999. Modelling ques-
tions and assertions in dialogue using obligations.
In Proceedings of Amstelog 99, the 3rd Workshop
on the Sematics and Pragmatics of Dialogue, Ams-
terdam.
S. Larsson. 2002. Issue based Dialogue Management.
Ph.D. thesis, Gothenburg University.
D. Lewis. 1979. Score keeping in a language game.
Journal of Philosophical Logic, 8:339-359.
P. Ljunglof. 2000. Formalizing the dialogue move en-
gine. In Proceedings of the Gotalog Workshop.
M. D. Sadek. 1991. Dialogue acts as rational plans. In
Proceedings of the ESCA/ETR workshop on multi-
modal dialogue.
R. Stalnaker. 1979. Assertion. Syntax and Semantics,
9. Academic Press.
D. Traum and J. Allen. 1994. Discourse obligations
in dialogue processing. In Proceedings of the 32nd
annual meeting of the ACL.
D. Traum, J. Bos, R. Cooper, S. Larsson, 1. Lewin,
C. Matheson, and M. Poesio. 1999. A model of
dialogue moves and information state revision. In
The TRINDI Book.
</reference>
<page confidence="0.99917">
24
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.933647">
<title confidence="0.9964365">A Dynamic Logic Formalisation of the Dialogue Gameboard</title>
<author confidence="0.99994">Raquel Fernandez</author>
<affiliation confidence="0.972998">Department of Computer Science King&apos;s College London</affiliation>
<email confidence="0.998302">raquel@dcs.kcl.ac.uk</email>
<abstract confidence="0.999654692307692">This paper explores the possibility of using the paradigm of Dynamic Logic (DL) to formalise information states and update processes on information states. In particular, we present a formalisaof the gameboard introduced by Jonathan Ginzburg. From a more general point of view, we show that DL is particularly well suited to develop rigorous formal foundations for an approach to dialogue dynamics based on information state updates.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>P Bohlin</author>
<author>R Cooper</author>
<author>E Engdhal</author>
<author>S Larssson</author>
</authors>
<title>Information states and dialogue move engines.</title>
<date>1999</date>
<booktitle>In IJCAI-99 Workshop on Knowledge and Reasoning in Practical Dialogue Systems.</booktitle>
<contexts>
<context position="964" citStr="Bohlin et al., 1999" startWordPosition="140" endWordPosition="143">lisation of the dialogue gameboard introduced by Jonathan Ginzburg. From a more general point of view, we show that DL is particularly well suited to develop rigorous formal foundations for an approach to dialogue dynamics based on information state updates. 1 Introduction A particular development that has received much attention in recent work on dialogue modelling is the use of information states to characterise the state of each dialogue participant&apos;s information as the conversation proceeds. The information state approach to dialogue, as developed for instance in the TRINDI project (e.g. (Bohlin et al., 1999; Traum et al., 1999)), assumes that some aspects of dialogue management are best captured in terms of the relevant information that is available to each dialogue participant at each state of the conversation, along with a full account of the possible update mechanisms that change this information. Unlike classical Artificial Intelligence approaches built on the basis of axiomatic theories of rational agency,1 information state accounts tend to avoid 1See e.g. (Cohen and Levesque, 1990: Grosz and Sidner, 1990: Sadek, 1991). the use of logical frameworks and concentrate on dialogue-specific not</context>
</contexts>
<marker>Bohlin, Cooper, Engdhal, Larssson, 1999</marker>
<rawString>P. Bohlin, R. Cooper, E. Engdhal, and S. Larssson. 1999. Information states and dialogue move engines. In IJCAI-99 Workshop on Knowledge and Reasoning in Practical Dialogue Systems.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Carlson</author>
</authors>
<title>Dialogue Games. Synthese Language Library.</title>
<date>1983</date>
<tech>D. Reidel.</tech>
<contexts>
<context position="9145" citStr="Carlson, 1983" startWordPosition="1625" endWordPosition="1626">B), Ginzburg&apos;s particular version of the conversational scoreboard, plays a central role in his theory of context. It can be seen as the context relative to which conventionalised interaction is assumed to take place. The DGB provides a structured characterisation of the information which the dialogue participants view as common in terms of three main components: a set of FACTS, which the dialogue participants take as common ground, a partially ordered set of questions under discussion QUD, and the LATEST-MOVE made in the dialogue. Inspired by the notion of dialogue game (e.g. (Hamblin, 1970; Carlson, 1983)), Ginzburg assumes that each move made by a dialogue participant determines a restricted set of options for follow-up in the dialogue, constraining what can be said and how. The framework has been used to provide an account of the kind of context that licenses elliptical responses in dialogue (Ginzburg, 1999; Fernandez 19 and Ginzburg, 2002; Fernandez et al., 2003) and has also been the starting point of implemented dialogue systems such as GoDiS (Cooper et al., 2001) and IBiS (Larsson, 2002). 4 A DL Formalisation of the DGB To model context in dialogue as it is understood in Ginzburg&apos;s DGB, </context>
</contexts>
<marker>Carlson, 1983</marker>
<rawString>L. Carlson. 1983. Dialogue Games. Synthese Language Library. D. Reidel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Cohen</author>
<author>H Levesque</author>
</authors>
<title>Rational interaction as the basis for communication. In</title>
<date>1990</date>
<booktitle>Intentions in Communication.</booktitle>
<editor>P. Cohen, J. Morgana, and M. Pollack, editors,</editor>
<publisher>MIT Press.</publisher>
<contexts>
<context position="1454" citStr="Cohen and Levesque, 1990" startWordPosition="215" endWordPosition="218">ation proceeds. The information state approach to dialogue, as developed for instance in the TRINDI project (e.g. (Bohlin et al., 1999; Traum et al., 1999)), assumes that some aspects of dialogue management are best captured in terms of the relevant information that is available to each dialogue participant at each state of the conversation, along with a full account of the possible update mechanisms that change this information. Unlike classical Artificial Intelligence approaches built on the basis of axiomatic theories of rational agency,1 information state accounts tend to avoid 1See e.g. (Cohen and Levesque, 1990: Grosz and Sidner, 1990: Sadek, 1991). the use of logical frameworks and concentrate on dialogue-specific notions such as common ground, discourse obligations and questions under discussion. In this paper we explore the possibility of using a modal logic paradigm, namely Dynamic Logic (Hard l et al., 2000), originally conceived as a formal system to reason about computer programs, to formalise information states and update processes on information states. In particular, we present a dynamic logic formalisation of Ginzburg&apos;s dialogue gameboard (DGB) as introduced in (Ginzburg, 1996; Ginzburg, </context>
</contexts>
<marker>Cohen, Levesque, 1990</marker>
<rawString>P. Cohen and H. Levesque. 1990. Rational interaction as the basis for communication. In P. Cohen, J. Morgana, and M. Pollack, editors, Intentions in Communication. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Cooper</author>
<author>S Larsson</author>
<author>J Hieronymus</author>
<author>S Ericsson</author>
<author>E Engdahl</author>
<author>P Ljunglof</author>
</authors>
<title>Godis and questions under discussion.</title>
<date>2001</date>
<booktitle>In The TRINDI</booktitle>
<publisher>Book.</publisher>
<contexts>
<context position="9618" citStr="Cooper et al., 2001" startWordPosition="1702" endWordPosition="1705">stions under discussion QUD, and the LATEST-MOVE made in the dialogue. Inspired by the notion of dialogue game (e.g. (Hamblin, 1970; Carlson, 1983)), Ginzburg assumes that each move made by a dialogue participant determines a restricted set of options for follow-up in the dialogue, constraining what can be said and how. The framework has been used to provide an account of the kind of context that licenses elliptical responses in dialogue (Ginzburg, 1999; Fernandez 19 and Ginzburg, 2002; Fernandez et al., 2003) and has also been the starting point of implemented dialogue systems such as GoDiS (Cooper et al., 2001) and IBiS (Larsson, 2002). 4 A DL Formalisation of the DGB To model context in dialogue as it is understood in Ginzburg&apos;s DGB, we will consider a particular domain of interpretation which includes entities such as agents (the dialogue participants), questions, propositions and dialogue moves.2 For the sake of simplicity, in this paper we restrict ourselves to four dialogue move types, namely ask, assert, clarification request and acknowledge. The main strategy to reason about the effects of conversational interaction on the DGB, will be to represent its main components as variables ranging ove</context>
<context position="14806" citStr="Cooper et al. 2001" startWordPosition="2600" endWordPosition="2603"> uttered by any dialogue participant. In the case of FACTS, however, this is a simplification motivated by the fact that the current formalisation only attempts to model simplified situations where FACTS is assumed to be empty at the initial state, and only propositions that have been commonly agreed on can be integrated into it. Thus, there is no room for disagreements in this respect, and the set of FACTS is always the same for the two dialogue participants. We model QUD and PENDING as stacks, in a way that is very much inspired by Qui) &apos;s actual implementation in the GoDiS dialogue system (Cooper et al. 2001). Although we think of FACTS as a set,3 for technical reasons that will become clear below, we also model FACTS as a stack. On the other hand, UT T and LM range over utterances, i.e. triples (i, m, r), where i is interpreted as the speaker of U, 171 is the dialogue move performed by u and r represents its content. Formally: V(FACTS) P* V(QUDa) Q* v(QUDb) Q* v(PENDINGa) utt* v(PENDINGb) utt* v(LMa) uttp v(I,Mb) uttp v(UTT) uttp The reason why FACTS is modelled as a stack variable is that we want to be able to check whether a particular element (i.e. some proposition) is in FACTS, and we want to</context>
</contexts>
<marker>Cooper, Larsson, Hieronymus, Ericsson, Engdahl, Ljunglof, 2001</marker>
<rawString>R. Cooper, S. Larsson, J. Hieronymus, S. Ericsson, E.Engdahl, and P. Ljunglof. 2001. Godis and questions under discussion. In The TRINDI Book.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Fernandez</author>
<author>J Ginzburg</author>
</authors>
<title>Non-Sentential Utterances: A Corpus Study. Traitement automatique des languages,</title>
<date>2002</date>
<pages>43--2</pages>
<marker>Fernandez, Ginzburg, 2002</marker>
<rawString>R. Fernandez and J. Ginzburg. 2002. Non-Sentential Utterances: A Corpus Study. Traitement automatique des languages, 43(2):13-42.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Fernandez</author>
<author>J Ginzburg</author>
<author>H Gregory</author>
<author>S Lappin</author>
</authors>
<title>SHARDS: Fragment Resolution in Dialogue.</title>
<date>2003</date>
<booktitle>Computing Meaning,</booktitle>
<volume>3</volume>
<editor>In H. Bunt and R. Muskens, editors,</editor>
<publisher>Kluwer.</publisher>
<note>To appear.</note>
<contexts>
<context position="9513" citStr="Fernandez et al., 2003" startWordPosition="1684" endWordPosition="1687">nents: a set of FACTS, which the dialogue participants take as common ground, a partially ordered set of questions under discussion QUD, and the LATEST-MOVE made in the dialogue. Inspired by the notion of dialogue game (e.g. (Hamblin, 1970; Carlson, 1983)), Ginzburg assumes that each move made by a dialogue participant determines a restricted set of options for follow-up in the dialogue, constraining what can be said and how. The framework has been used to provide an account of the kind of context that licenses elliptical responses in dialogue (Ginzburg, 1999; Fernandez 19 and Ginzburg, 2002; Fernandez et al., 2003) and has also been the starting point of implemented dialogue systems such as GoDiS (Cooper et al., 2001) and IBiS (Larsson, 2002). 4 A DL Formalisation of the DGB To model context in dialogue as it is understood in Ginzburg&apos;s DGB, we will consider a particular domain of interpretation which includes entities such as agents (the dialogue participants), questions, propositions and dialogue moves.2 For the sake of simplicity, in this paper we restrict ourselves to four dialogue move types, namely ask, assert, clarification request and acknowledge. The main strategy to reason about the effects of</context>
</contexts>
<marker>Fernandez, Ginzburg, Gregory, Lappin, 2003</marker>
<rawString>R. Fernandez, J. Ginzburg, H. Gregory, and S. Lappin. 2003. SHARDS: Fragment Resolution in Dialogue. In H. Bunt and R. Muskens, editors, Computing Meaning, volume 3. Kluwer. To appear.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Fernandez</author>
</authors>
<title>A Dynamic Logic Formalisation of Inquirey-Oriented Dialogues.</title>
<date>2003</date>
<booktitle>In Proceedings of the 6th CLUK Colloquium,</booktitle>
<pages>17--24</pages>
<location>Edinburgh, UK.</location>
<contexts>
<context position="16557" citStr="Fernandez, 2003" startWordPosition="2917" endWordPosition="2918">ments. of the stack. Thus, we will use the notation x FACTS as an abbreviation for &lt; FACT S.pop* &gt; head(FACTS) = x. 5 Constraining the Model Our main aim in this section is to show that the formalism outlined previously can be used to express the rules underlying cooperative conversational interaction in terms of update operations on the DGB. The current formalisation attempts to model three different scenarios: asking and responding to a question, integrating a proposition into the commonly agreed facts, and asking for clarification when the content of an utterance has not been grounded. In (Fernandez, 2003) these scenarios were modelled in the form of complex DL programs corresponding to conventional protocols. From an abstract point of view, protocols can be thought of as a way to characterise the range of possible followups in cooperative dialogue or, alternatively, as a representation of the obligations the dialogue participants are socially committed to (see (Traum and Allen, 1994; Kreutel and Matheson, 1999)). In the present paper, however, we opt for a different strategy: our aim here is to describe the appropriateness conditions for each particular scenario by means of a set of axioms, th</context>
<context position="25228" citStr="Fernandez, 2003" startWordPosition="4466" endWordPosition="4467">rmalisation is intended as a first step towards the development of rigorous formal foundations for an approach to dialogue dynamics based on information state updates. Although this is still very much work in progress, we believe that the formalisation presented here shows that DL is an expressive and precise tool particularly well suited for this task. From a more general point of view, we are interested in the interaction patterns that characterise different types of dialogue. In this respect, a formalisation along the same lines as the 23 one outlined in the present paper has been used in (Fernandez, 2003) to characterise the internal structure of Inquiry-Oriented Dialogues. There are many issues that remain still open, perhaps the most straightforward being how to use the current formalisation for instance to prove desirable properties of particular dialogue systems. In fact, some resemblances can be found between the axioms presented in Section 5 and the update rules described in (Ljunglof, 2000), where the author presents a calculus for reasoning mathematically about the rule-based engines developed within the TRINDI project. We expect to show in our future research that some version of DL c</context>
</contexts>
<marker>Fernandez, 2003</marker>
<rawString>R. Fernandez. 2003. A Dynamic Logic Formalisation of Inquirey-Oriented Dialogues. In Proceedings of the 6th CLUK Colloquium, pages 17-24, Edinburgh, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Ginzburg</author>
</authors>
<title>Interrogatives: Questions, facts, and dialogue.</title>
<date>1996</date>
<booktitle>Handbook of Contemporary Semantic Theory.</booktitle>
<editor>In S. Lappin, editor,</editor>
<publisher>Blackwell,</publisher>
<location>Oxford.</location>
<contexts>
<context position="2042" citStr="Ginzburg, 1996" startWordPosition="309" endWordPosition="310"> (Cohen and Levesque, 1990: Grosz and Sidner, 1990: Sadek, 1991). the use of logical frameworks and concentrate on dialogue-specific notions such as common ground, discourse obligations and questions under discussion. In this paper we explore the possibility of using a modal logic paradigm, namely Dynamic Logic (Hard l et al., 2000), originally conceived as a formal system to reason about computer programs, to formalise information states and update processes on information states. In particular, we present a dynamic logic formalisation of Ginzburg&apos;s dialogue gameboard (DGB) as introduced in (Ginzburg, 1996; Ginzburg, ms) and (Larsson, 2002). From a more general point of view, we show that Dynamic Logic is particularly well suited to develop rigorous formal foundations for an approach to dialogue dynamics based on information state updates. 1.1 Overview The structure of the paper is as follows: First, we introduce the basic notions of First-Order Dynamic Logic, describing its syntax and semantics. After briefly characterising the structure of the dialogue gameboard in Section 3, our formalisation is presented in Section 4. We define the formal language and its semantic interpretation, and discus</context>
</contexts>
<marker>Ginzburg, 1996</marker>
<rawString>J. Ginzburg. 1996. Interrogatives: Questions, facts, and dialogue. In S. Lappin, editor, Handbook of Contemporary Semantic Theory. Blackwell, Oxford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Ginzburg</author>
</authors>
<title>Structural mismatch in dialogue.</title>
<date>1997</date>
<booktitle>In Proceedings of MunDial 97. Universitaet Muenchen.</booktitle>
<contexts>
<context position="15818" citStr="Ginzburg, 1997" startWordPosition="2795" endWordPosition="2796">Ma) uttp v(I,Mb) uttp v(UTT) uttp The reason why FACTS is modelled as a stack variable is that we want to be able to check whether a particular element (i.e. some proposition) is in FACTS, and we want to be able to express this in the object language. Modelling FACTS as a variable ranging over strings of propositions allows us to use the pop program to check whether a particular element x belongs to FACTS or not: if x is in FACTS and we pop the stack repeatedly, x will show up at some point as the head 3 Arguably, there are reasons to postulate some kind of order within the set of facts. See (Ginzburg, 1997) for an account of the restrictions on which contextually presupposed facts can serve as antecedents for some anaphoric elements. of the stack. Thus, we will use the notation x FACTS as an abbreviation for &lt; FACT S.pop* &gt; head(FACTS) = x. 5 Constraining the Model Our main aim in this section is to show that the formalism outlined previously can be used to express the rules underlying cooperative conversational interaction in terms of update operations on the DGB. The current formalisation attempts to model three different scenarios: asking and responding to a question, integrating a propositio</context>
</contexts>
<marker>Ginzburg, 1997</marker>
<rawString>J. Ginzburg. 1997. Structural mismatch in dialogue. In Proceedings of MunDial 97. Universitaet Muenchen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Ginzburg</author>
</authors>
<title>Ellipsis resolution with syntactic presuppositions.</title>
<date>1999</date>
<booktitle>Computing Meaning: Current Issues in Computational Semantics.</booktitle>
<editor>In H. Bunt and R. Muskens, editors,</editor>
<publisher>Kluwer.</publisher>
<contexts>
<context position="9455" citStr="Ginzburg, 1999" startWordPosition="1677" endWordPosition="1678">pants view as common in terms of three main components: a set of FACTS, which the dialogue participants take as common ground, a partially ordered set of questions under discussion QUD, and the LATEST-MOVE made in the dialogue. Inspired by the notion of dialogue game (e.g. (Hamblin, 1970; Carlson, 1983)), Ginzburg assumes that each move made by a dialogue participant determines a restricted set of options for follow-up in the dialogue, constraining what can be said and how. The framework has been used to provide an account of the kind of context that licenses elliptical responses in dialogue (Ginzburg, 1999; Fernandez 19 and Ginzburg, 2002; Fernandez et al., 2003) and has also been the starting point of implemented dialogue systems such as GoDiS (Cooper et al., 2001) and IBiS (Larsson, 2002). 4 A DL Formalisation of the DGB To model context in dialogue as it is understood in Ginzburg&apos;s DGB, we will consider a particular domain of interpretation which includes entities such as agents (the dialogue participants), questions, propositions and dialogue moves.2 For the sake of simplicity, in this paper we restrict ourselves to four dialogue move types, namely ask, assert, clarification request and ack</context>
</contexts>
<marker>Ginzburg, 1999</marker>
<rawString>J. Ginzburg. 1999. Ellipsis resolution with syntactic presuppositions. In H. Bunt and R. Muskens, editors, Computing Meaning: Current Issues in Computational Semantics. Kluwer.</rawString>
</citation>
<citation valid="false">
<authors>
<author>ms</author>
</authors>
<title>A semantics for interaction in dialogue. Forthcoming for CSLI Publications. Draft chapters available from: http://www.des.kcl.ac.uld staff/ginzburg.</title>
<marker>ms, </marker>
<rawString>J. Ginzburg. ms. A semantics for interaction in dialogue. Forthcoming for CSLI Publications. Draft chapters available from: http://www.des.kcl.ac.uld staff/ginzburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Goldblatt</author>
</authors>
<title>Logics of Time and Computation. Lecture Notes.</title>
<date>1992</date>
<publisher>CSLI Publications.</publisher>
<contexts>
<context position="3934" citStr="Goldblatt, 1992" startWordPosition="682" endWordPosition="684">s&apos; then M 1=s, A Ms&lt;a&gt; A if there is an s&apos; C S, such that sRas&apos; and M =8, A Jt43[c]AA if for all s&apos; e S, if sR,s&apos; then M =s, A Table 1: Definition of truth Table 2: Accessibility relations sRx:=ts&apos; iff sR,os&apos; iff sR,uos&apos; iff iff sRcp?s&apos; iff s(3c vs(t))s&apos; as&amp;quot; such that sR,s&amp;quot; and s&amp;quot;Ros&apos; sR„s&apos; or sRos&apos; there are finitely many states Si, s2, sr, such that s1R,s2, s2R,93, ,,,,, 1Rasn and s = Si and 5&apos; = sn s = s&apos; and M =, 2 Dynamic Logic: Basic Notions The formalisation we present in this paper is based on the first-order version of Dynamic Logic (DL) as it is discussed in (Hard et al., 2000) and (Goldblatt, 1992). In short, DL is a multi-modal logic with a possible worlds semantics, which distinguishes between expressions of two sorts: formulae and programs. The language of DL is that of first-order logic together with a set of modal operators: for each program a there are a box [a] and a diamond &lt; a &gt; operator. The set of possible worlds (or states) in the model is the set of all possible assignments to the variables in the language. Atomic programs change the values assigned to particular variables. They can be combined to form complex programs by means of a repertoire of program constructs, such as</context>
</contexts>
<marker>Goldblatt, 1992</marker>
<rawString>R. Goldblatt. 1992. Logics of Time and Computation. Lecture Notes. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Groenendijk</author>
<author>M Stokhof</author>
</authors>
<date>1991</date>
<booktitle>Dynamic predicate logic. Linguistics and Philosophy,</booktitle>
<pages>14--1</pages>
<contexts>
<context position="24069" citStr="Groenendijk and Stokhof, 1991" startWordPosition="4267" endWordPosition="4271">re brought about by program executions that involve changes in variable assignments. The use of DL for linguistic matters is of course not new. Several authors have observed strong parallels between the execution of computer programs and the dynamic view on discourse interpretation. The idea underlying the dynamic logic approach to the semantics of programming languages, i.e. that the meaning of a program can be captured in terms of a relation between states, has indeed been successfully applied in natural language semantics, for instance, by Groenendijk and Stokhof&apos;s Dynamic Predicate Logic (Groenendijk and Stokhof, 1991). Although the aims of DPL, mostly restricted to anaphorical relations across sentence boundaries, are rather different from ours, its guiding idea (i.e. that the meaning of a natural language sentence does not lie in its truth conditions, but rather in its potential to change context) is in line with the perspective taken in this paper. One could view the DGB as a semantics for utterances where each utterance is interpreted as a pair of states, i.e. as the change it brings about in the DGB. As mention in the introduction, the current formalisation is intended as a first step towards the devel</context>
</contexts>
<marker>Groenendijk, Stokhof, 1991</marker>
<rawString>J. Groenendijk and M. Stokhof. 1991. Dynamic predicate logic. Linguistics and Philosophy, 14(1):39-100.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Grosz</author>
<author>C Sidner</author>
</authors>
<title>Plans for discourse.</title>
<date>1990</date>
<booktitle>Intentions in Communication.</booktitle>
<editor>In P. Cohen, J. Morgana, and M. Pollack, editors,</editor>
<publisher>MIT Press.</publisher>
<location>London.</location>
<contexts>
<context position="1478" citStr="Grosz and Sidner, 1990" startWordPosition="219" endWordPosition="222">ation state approach to dialogue, as developed for instance in the TRINDI project (e.g. (Bohlin et al., 1999; Traum et al., 1999)), assumes that some aspects of dialogue management are best captured in terms of the relevant information that is available to each dialogue participant at each state of the conversation, along with a full account of the possible update mechanisms that change this information. Unlike classical Artificial Intelligence approaches built on the basis of axiomatic theories of rational agency,1 information state accounts tend to avoid 1See e.g. (Cohen and Levesque, 1990: Grosz and Sidner, 1990: Sadek, 1991). the use of logical frameworks and concentrate on dialogue-specific notions such as common ground, discourse obligations and questions under discussion. In this paper we explore the possibility of using a modal logic paradigm, namely Dynamic Logic (Hard l et al., 2000), originally conceived as a formal system to reason about computer programs, to formalise information states and update processes on information states. In particular, we present a dynamic logic formalisation of Ginzburg&apos;s dialogue gameboard (DGB) as introduced in (Ginzburg, 1996; Ginzburg, ms) and (Larsson, 2002).</context>
</contexts>
<marker>Grosz, Sidner, 1990</marker>
<rawString>B. Grosz and C. Sidner. 1990. Plans for discourse. In P. Cohen, J. Morgana, and M. Pollack, editors, Intentions in Communication. MIT Press. C. L. Hamblin. 1970. Fallacies. Methuen, London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Hard</author>
<author>D Kozen</author>
<author>J Tiuryn</author>
</authors>
<title>Dynamic Logic. Foundations of Computing Series.</title>
<date>2000</date>
<publisher>The MIT Press.</publisher>
<contexts>
<context position="3912" citStr="Hard et al., 2000" startWordPosition="677" endWordPosition="680">for all a E D, if s(x a)s&apos; then M 1=s, A Ms&lt;a&gt; A if there is an s&apos; C S, such that sRas&apos; and M =8, A Jt43[c]AA if for all s&apos; e S, if sR,s&apos; then M =s, A Table 1: Definition of truth Table 2: Accessibility relations sRx:=ts&apos; iff sR,os&apos; iff sR,uos&apos; iff iff sRcp?s&apos; iff s(3c vs(t))s&apos; as&amp;quot; such that sR,s&amp;quot; and s&amp;quot;Ros&apos; sR„s&apos; or sRos&apos; there are finitely many states Si, s2, sr, such that s1R,s2, s2R,93, ,,,,, 1Rasn and s = Si and 5&apos; = sn s = s&apos; and M =, 2 Dynamic Logic: Basic Notions The formalisation we present in this paper is based on the first-order version of Dynamic Logic (DL) as it is discussed in (Hard et al., 2000) and (Goldblatt, 1992). In short, DL is a multi-modal logic with a possible worlds semantics, which distinguishes between expressions of two sorts: formulae and programs. The language of DL is that of first-order logic together with a set of modal operators: for each program a there are a box [a] and a diamond &lt; a &gt; operator. The set of possible worlds (or states) in the model is the set of all possible assignments to the variables in the language. Atomic programs change the values assigned to particular variables. They can be combined to form complex programs by means of a repertoire of progr</context>
</contexts>
<marker>Hard, Kozen, Tiuryn, 2000</marker>
<rawString>D. Hard, D. Kozen, and J. Tiuryn. 2000. Dynamic Logic. Foundations of Computing Series. The MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Kreutel</author>
<author>C Matheson</author>
</authors>
<title>Modelling questions and assertions in dialogue using obligations.</title>
<date>1999</date>
<booktitle>In Proceedings of Amstelog 99, the 3rd Workshop on the Sematics and Pragmatics of Dialogue,</booktitle>
<location>Amsterdam.</location>
<contexts>
<context position="16971" citStr="Kreutel and Matheson, 1999" startWordPosition="2983" endWordPosition="2986">t scenarios: asking and responding to a question, integrating a proposition into the commonly agreed facts, and asking for clarification when the content of an utterance has not been grounded. In (Fernandez, 2003) these scenarios were modelled in the form of complex DL programs corresponding to conventional protocols. From an abstract point of view, protocols can be thought of as a way to characterise the range of possible followups in cooperative dialogue or, alternatively, as a representation of the obligations the dialogue participants are socially committed to (see (Traum and Allen, 1994; Kreutel and Matheson, 1999)). In the present paper, however, we opt for a different strategy: our aim here is to describe the appropriateness conditions for each particular scenario by means of a set of axioms, that is, a set of formulas we postulate to be valid in the model. The aim of these formulas is to restrict the operations that can be performed on the DGB components. In this sense, they can be seen as constraints characterising the appropriateness conditions of simple programs like UTT := (i, c 1 r , r) (asking a clarification question) or FACT S.push (x) (integrating an item into the common ground). In what fol</context>
</contexts>
<marker>Kreutel, Matheson, 1999</marker>
<rawString>J. Kreutel and C. Matheson. 1999. Modelling questions and assertions in dialogue using obligations. In Proceedings of Amstelog 99, the 3rd Workshop on the Sematics and Pragmatics of Dialogue, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Larsson</author>
</authors>
<title>Issue based Dialogue Management.</title>
<date>2002</date>
<journal>Journal of Philosophical Logic,</journal>
<tech>Ph.D. thesis,</tech>
<pages>8--339</pages>
<institution>Gothenburg University.</institution>
<contexts>
<context position="2077" citStr="Larsson, 2002" startWordPosition="314" endWordPosition="315">nd Sidner, 1990: Sadek, 1991). the use of logical frameworks and concentrate on dialogue-specific notions such as common ground, discourse obligations and questions under discussion. In this paper we explore the possibility of using a modal logic paradigm, namely Dynamic Logic (Hard l et al., 2000), originally conceived as a formal system to reason about computer programs, to formalise information states and update processes on information states. In particular, we present a dynamic logic formalisation of Ginzburg&apos;s dialogue gameboard (DGB) as introduced in (Ginzburg, 1996; Ginzburg, ms) and (Larsson, 2002). From a more general point of view, we show that Dynamic Logic is particularly well suited to develop rigorous formal foundations for an approach to dialogue dynamics based on information state updates. 1.1 Overview The structure of the paper is as follows: First, we introduce the basic notions of First-Order Dynamic Logic, describing its syntax and semantics. After briefly characterising the structure of the dialogue gameboard in Section 3, our formalisation is presented in Section 4. We define the formal language and its semantic interpretation, and discuss how the different components of t</context>
<context position="9643" citStr="Larsson, 2002" startWordPosition="1708" endWordPosition="1709">d the LATEST-MOVE made in the dialogue. Inspired by the notion of dialogue game (e.g. (Hamblin, 1970; Carlson, 1983)), Ginzburg assumes that each move made by a dialogue participant determines a restricted set of options for follow-up in the dialogue, constraining what can be said and how. The framework has been used to provide an account of the kind of context that licenses elliptical responses in dialogue (Ginzburg, 1999; Fernandez 19 and Ginzburg, 2002; Fernandez et al., 2003) and has also been the starting point of implemented dialogue systems such as GoDiS (Cooper et al., 2001) and IBiS (Larsson, 2002). 4 A DL Formalisation of the DGB To model context in dialogue as it is understood in Ginzburg&apos;s DGB, we will consider a particular domain of interpretation which includes entities such as agents (the dialogue participants), questions, propositions and dialogue moves.2 For the sake of simplicity, in this paper we restrict ourselves to four dialogue move types, namely ask, assert, clarification request and acknowledge. The main strategy to reason about the effects of conversational interaction on the DGB, will be to represent its main components as variables ranging over different domains. In w</context>
</contexts>
<marker>Larsson, 2002</marker>
<rawString>S. Larsson. 2002. Issue based Dialogue Management. Ph.D. thesis, Gothenburg University. D. Lewis. 1979. Score keeping in a language game. Journal of Philosophical Logic, 8:339-359.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Ljunglof</author>
</authors>
<title>Formalizing the dialogue move engine.</title>
<date>2000</date>
<booktitle>In Proceedings of the Gotalog Workshop.</booktitle>
<marker>Ljunglof, 2000</marker>
<rawString>P. Ljunglof. 2000. Formalizing the dialogue move engine. In Proceedings of the Gotalog Workshop.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M D Sadek</author>
</authors>
<title>Dialogue acts as rational plans.</title>
<date>1991</date>
<booktitle>In Proceedings of the ESCA/ETR workshop on multimodal dialogue.</booktitle>
<contexts>
<context position="1492" citStr="Sadek, 1991" startWordPosition="223" endWordPosition="224">dialogue, as developed for instance in the TRINDI project (e.g. (Bohlin et al., 1999; Traum et al., 1999)), assumes that some aspects of dialogue management are best captured in terms of the relevant information that is available to each dialogue participant at each state of the conversation, along with a full account of the possible update mechanisms that change this information. Unlike classical Artificial Intelligence approaches built on the basis of axiomatic theories of rational agency,1 information state accounts tend to avoid 1See e.g. (Cohen and Levesque, 1990: Grosz and Sidner, 1990: Sadek, 1991). the use of logical frameworks and concentrate on dialogue-specific notions such as common ground, discourse obligations and questions under discussion. In this paper we explore the possibility of using a modal logic paradigm, namely Dynamic Logic (Hard l et al., 2000), originally conceived as a formal system to reason about computer programs, to formalise information states and update processes on information states. In particular, we present a dynamic logic formalisation of Ginzburg&apos;s dialogue gameboard (DGB) as introduced in (Ginzburg, 1996; Ginzburg, ms) and (Larsson, 2002). From a more g</context>
</contexts>
<marker>Sadek, 1991</marker>
<rawString>M. D. Sadek. 1991. Dialogue acts as rational plans. In Proceedings of the ESCA/ETR workshop on multimodal dialogue.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Stalnaker</author>
</authors>
<date>1979</date>
<journal>Assertion. Syntax and Semantics,</journal>
<volume>9</volume>
<publisher>Academic Press.</publisher>
<contexts>
<context position="8139" citStr="Stalnaker, 1979" startWordPosition="1461" endWordPosition="1462"> can inductively define accessibility relations for the compound programs. Table 2 shows the accessibility relations for basic atomic programs and compound programs for all states s. S. Stack Variables. Interesting variants of DL arise from allowing auxiliary data structures such as stacks and arrays. Following (Harel et al., 2000), we will consider a version of DL in which programs can manipulate some variables as lastin-first-out stacks. Formally, stacks are modelled Table 3: push and pop programs 3 The Dialogue Gameboard Following the pioneering work of philosophers like (Lewis, 1979) and (Stalnaker, 1979), the theory of context developed by Jonathan Ginzburg joins a line of research which, instead of focusing on the intentional attitudes of the dialogue participants, highlights the public and conventional aspects of communication. Under this perspective, a dialogue can be thought of as a conversational scoreboard that keeps track of the state of the conversation. The dialogue gameboard (DGB), Ginzburg&apos;s particular version of the conversational scoreboard, plays a central role in his theory of context. It can be seen as the context relative to which conventionalised interaction is assumed to ta</context>
</contexts>
<marker>Stalnaker, 1979</marker>
<rawString>R. Stalnaker. 1979. Assertion. Syntax and Semantics, 9. Academic Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Traum</author>
<author>J Allen</author>
</authors>
<title>Discourse obligations in dialogue processing.</title>
<date>1994</date>
<booktitle>In Proceedings of the 32nd annual meeting of the ACL.</booktitle>
<contexts>
<context position="16942" citStr="Traum and Allen, 1994" startWordPosition="2979" endWordPosition="2982">to model three different scenarios: asking and responding to a question, integrating a proposition into the commonly agreed facts, and asking for clarification when the content of an utterance has not been grounded. In (Fernandez, 2003) these scenarios were modelled in the form of complex DL programs corresponding to conventional protocols. From an abstract point of view, protocols can be thought of as a way to characterise the range of possible followups in cooperative dialogue or, alternatively, as a representation of the obligations the dialogue participants are socially committed to (see (Traum and Allen, 1994; Kreutel and Matheson, 1999)). In the present paper, however, we opt for a different strategy: our aim here is to describe the appropriateness conditions for each particular scenario by means of a set of axioms, that is, a set of formulas we postulate to be valid in the model. The aim of these formulas is to restrict the operations that can be performed on the DGB components. In this sense, they can be seen as constraints characterising the appropriateness conditions of simple programs like UTT := (i, c 1 r , r) (asking a clarification question) or FACT S.push (x) (integrating an item into th</context>
</contexts>
<marker>Traum, Allen, 1994</marker>
<rawString>D. Traum and J. Allen. 1994. Discourse obligations in dialogue processing. In Proceedings of the 32nd annual meeting of the ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Traum</author>
<author>J Bos</author>
<author>R Cooper</author>
<author>S Larsson</author>
</authors>
<title>A model of dialogue moves and information state revision.</title>
<date>1999</date>
<booktitle>In The TRINDI</booktitle>
<publisher>Book.</publisher>
<contexts>
<context position="985" citStr="Traum et al., 1999" startWordPosition="144" endWordPosition="147">gue gameboard introduced by Jonathan Ginzburg. From a more general point of view, we show that DL is particularly well suited to develop rigorous formal foundations for an approach to dialogue dynamics based on information state updates. 1 Introduction A particular development that has received much attention in recent work on dialogue modelling is the use of information states to characterise the state of each dialogue participant&apos;s information as the conversation proceeds. The information state approach to dialogue, as developed for instance in the TRINDI project (e.g. (Bohlin et al., 1999; Traum et al., 1999)), assumes that some aspects of dialogue management are best captured in terms of the relevant information that is available to each dialogue participant at each state of the conversation, along with a full account of the possible update mechanisms that change this information. Unlike classical Artificial Intelligence approaches built on the basis of axiomatic theories of rational agency,1 information state accounts tend to avoid 1See e.g. (Cohen and Levesque, 1990: Grosz and Sidner, 1990: Sadek, 1991). the use of logical frameworks and concentrate on dialogue-specific notions such as common g</context>
</contexts>
<marker>Traum, Bos, Cooper, Larsson, 1999</marker>
<rawString>D. Traum, J. Bos, R. Cooper, S. Larsson, 1. Lewin, C. Matheson, and M. Poesio. 1999. A model of dialogue moves and information state revision. In The TRINDI Book.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>