<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000560">
<title confidence="0.990565">
Towards A Modular Data Model For Multi-Layer Annotated Corpora
</title>
<author confidence="0.999094">
Richard Eckart
</author>
<affiliation confidence="0.999708">
Department of English Linguistics
Darmstadt University of Technology
</affiliation>
<address confidence="0.596157">
64289 Darmstadt, Germany
</address>
<email confidence="0.998067">
eckart@linglit.tu-darmstadt.de
</email>
<sectionHeader confidence="0.993898" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999580384615385">
In this paper we discuss the current meth-
ods in the representation of corpora anno-
tated at multiple levels of linguistic organi-
zation (so-called multi-level or multi-layer
corpora). Taking five approaches which
are representative of the current practice
in this area, we discuss the commonalities
and differences between them focusing on
the underlying data models. The goal of
the paper is to identify the common con-
cerns in multi-layer corpus representation
and processing so as to lay a foundation
for a unifying, modular data model.
</bodyText>
<sectionHeader confidence="0.998992" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999889428571428">
Five approaches to representing multi-layer anno-
tated corpora are reviewed in this paper. These re-
flect the current practice in the field and show the
requirements typically posed on multi-layer cor-
pus applications. Multi-layer annotated corpora
keep annotations at different levels of linguistic
organization separate from each other. Figure 1
illustrates two annotation layers on a transcrip-
tion of an audio/video signal. One layer contains
a functional annotation of a sentence in the tran-
scription. The other contains a phrase structure
annotation and Part-of-Speech tags for each word.
Layers and signals are coordinated by a common
timeline.
The motivation for this research is rooted
in finding a proper data model for PACE-Ling
(Sec. 2.2). The ultimate goal of our research is to
create a modular extensible data model for multi-
layer annotated corpora. To achieve this, we aim
to create a data model based on the current state-
of-the-art that covers all current requirements and
</bodyText>
<figureCaption confidence="0.764568">
Figure 1: Multi-layer annotation on multi-modal
base data
</figureCaption>
<bodyText confidence="0.999918214285714">
then decompose it into exchangeable components.
We identify and discuss objects contained in four
tiers commonly playing an important role in multi-
layer corpus scenarios (see Fig. 2): medial, loca-
tional, structural and featural tiers. These are gen-
eralized categories that are in principle present in
any multi-layer context, but come in different in-
carnations. Since query language and data model
are closely related, common query requirements
are also surveyed and examined for modular de-
composition. While parts of the suggested data
model and query operators are implemented by the
projects discussed here, so far no comprehensive
implementation exists.
</bodyText>
<sectionHeader confidence="0.990945" genericHeader="method">
2 Data models
</sectionHeader>
<bodyText confidence="0.999875333333333">
There are three purposes data models can serve.
The first purpose is context suitability. A data
model used for this purpose must reflect as well
as possible the data the user wants to query. The
second purpose is storage. The data model used
in the database backend can be very different from
</bodyText>
<page confidence="0.987999">
183
</page>
<note confidence="0.726326">
Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 183–190,
Sydney, July 2006. c�2006 Association for Computational Linguistics
</note>
<bodyText confidence="0.997467363636364">
the one exposed to the user, e.g. hierarchical struc-
tures may be stored in tables, indices might be
kept to speed up queries, etc. The third purpose
is exchange and archival. Here the data model, or
rather the serialization of the data model, has to be
easily parsable and follow a widely used standard.
Our review focuses on the suitability of data
models for the first purpose. As extensions of
the XML data model are used in most of the ap-
proaches reviewed here, a short introduction to
this data model will be given first.
</bodyText>
<figureCaption confidence="0.991503">
Figure 2: Tiers and objects
</figureCaption>
<subsectionHeader confidence="0.755023">
2.1 XML
</subsectionHeader>
<bodyText confidence="0.999984790697674">
Today XML has become the de-facto standard
representation format for annotated text corpora.
While the XML standard specifies a data model
and serialization format for XML, a semantics
is largely left to be defined for a particular ap-
plication. Many data models can be mapped to
the XML data model and serialized to XML (cf.
Sec. 2.5).
The XML data model describes an ordered tree
and defines several types of nodes. We examine
a simplification of this data model here, limited
to elements, attributes and text nodes. An ele-
ment (parent) can contain children: elements and
text nodes. Elements are named and can carry at-
tributes, which are identified by a name and bear a
value.
This data model is immediately suitable for sim-
ple text annotations. For example in a positional
annotation, name-value pairs (features) can be as-
signed to tokens, which are obtained via tokeniza-
tion of a text. These features and tokens can
be represented by attributes and text nodes. The
XML data model requires that both share a parent
element which binds them together. Because the
XML data model defines a tree, an additional root
element is required to govern all positional anno-
tation elements.
If the tree is constructed in such a way that
one particular traversal strategy yields all tokens
in their original order, then the data model is ca-
pable of covering all tiers: medial tier (textual
base data), locational tier (sequential token order),
structural tier (tokens) and featural tier (linguis-
tic feature annotations). The structural tier can be
expanded by adding additional elements en-route
from the root element to the text nodes (leaves).
In this way hierarchical structures can be modeled,
for instance constituency structures. However, the
XML data model covers these tiers only in a lim-
ited way. For example, tokens can not overlap
each other without destroying the linear token or-
der and thus sacrificing the temporal tier, a prob-
lem commonly known as overlapping hierarchies.
</bodyText>
<subsectionHeader confidence="0.999818">
2.2 PACE-Ling
</subsectionHeader>
<bodyText confidence="0.999914882352941">
PACE-Ling (Bartsch et al., 05) aims at develop-
ing register profiles of texts from mechanical engi-
neering (domain: data processing in construction)
based on the multi-dimensional model of Systemic
Functional Linguistics (SFL) (Halliday, 04).
The XML data model is a good foundation for
this project as only written texts are analyzed, but
SFL annotation requires multiple annotation lay-
ers with overlapping hierarchies. To solve this
problem, the project applies a strategy known as
stand-off annotation, first discussed in the context
of SFL in (Teich et al., 05) and based on previous
work by (Teich et al., 01). This strategy separates
the annotation data from the base data and intro-
duces references from the annotations to the base
data, thus allowing to keep multiple layers of an-
notations on the same base data separate.
The tools developed in the project treat anno-
tation data in XML from any source as separate
annotation layers, provided the text nodes in each
layer contain the same base data. The base data is
extracted and kept in a text file and the annotation
layers each in an XML file. The PACE-Ling data
model substitutes text nodes from the XML data
model by segments. Segments carry start and end
attributes which specify the location of the text in
the text file.
An important aspect of the PACE-Ling ap-
proach is minimal invasiveness. The minimally
invasive change of only substituting text nodes by
segments and leaving the rest of the original an-
notation file as it is, makes conversion between
the original format and the format needed by the
PACE-Ling tools very easy.
</bodyText>
<page confidence="0.997643">
184
</page>
<subsectionHeader confidence="0.940385">
2.3 NITE XML Toolkit
</subsectionHeader>
<bodyText confidence="0.999944025">
The NITE XML toolkit (NXT) (Carletta et al., 04)
was created with the intention to provide a frame-
work for building applications working with anno-
tated multi-modal data. NXT is based on the NITE
Object Model (NOM) which is an extension of the
XML data model. NOM features a similar separa-
tion of tiers as the PACE-Ling data model, but is
more general.
NOM uses a continuous timeline to coordinate
annotations. Instead of having dedicated segment
elements, any annotation element can have special
start and end attributes that anchor it to the time-
line. This makes the data model less modular, be-
cause support for handling other locational strate-
gies than a timeline can not be added by changing
the semantics of segments (cf. Sec. 3.2).
NXT can deal with audio, video and textual
base data, but due to being limited to the concept
of a single common timeline, it is not possible to
annotate a specific region in one video frame.
NOM introduces a new structural relation be-
tween annotation elements. Arbitrary links can be
created by adding a pointer to an annotation ele-
ment bearing a reference to another annotation ele-
ment which designates the first annotation element
to be a parent of the latter. Each pointer carries a
role attribute describing its use.
Using pointers, arbitrary directed graphs can be
overlaid on annotation layers and annotation el-
ements can have multiple parents, one from the
layer structure and any number of parents indi-
cated by pointer references. This facilitates the
reuse of annotations, e.g. when a number of an-
notations are kept that apply to words, the bound-
aries of words can be defined in one annotation
layer and the other annotations can refer to that
via pointers instead of defining the word bound-
aries explicitly in each layer. Using these pointers
in queries is cumbersome, because they have to be
processed one at a time (Evert et al., 03).
</bodyText>
<subsectionHeader confidence="0.986969">
2.4 Deutsch Diachron Digital
</subsectionHeader>
<bodyText confidence="0.999972655172414">
The goal of Deutsch Diachron Digital (DDD)
(Faulstich et al., 05) is the creation of a diachronic
corpus, ranging from the earliest Old High Ger-
man or Old Saxon texts from the 9th century up to
Modern German at the end of the 19th century.
DDD requires each text to be available in sev-
eral versions, ranging from the original facsimile
over several transcription versions to translations
into a modern language stage. This calls for a
high degree of alignment between those versions
as well as the annotations on those texts. Due to
the vast amount of data involved in the project, the
data model is not mapped to XML files, but to a
SQL database for a better query performance.
The DDD data model can be seen as an exten-
sion of NOM. Because the corpus contains mul-
tiple versions of documents, coordination of an-
notations and base data along a single timeline is
not sufficient. Therefore DDD segments refer to a
specific version of a document.
DDD defines how alignments are modeled, thus
elevating them from the level of structural anno-
tation to an independent object in the structural
tier: an alignment as a set of elements or segments,
each of which is associated with a role.
Treating alignments as an independent object is
reasonable because they are conceptually different
from pointers and it facilitates providing an effi-
cient storage for alignments.
</bodyText>
<subsectionHeader confidence="0.853801">
2.5 ATLAS
</subsectionHeader>
<bodyText confidence="0.99998775">
The ATLAS project (Laprun et al., 02) imple-
ments a three tier data model model, resembling
the separation of medial, locational and annota-
tion tiers. This approach features two character-
istic traits setting it apart from the others. First
the data model is not inspired by XML, but by
Annotation Graphs (AGs) (Bird &amp; Liberman, 01).
Second, it does not put any restriction on the kind
of base data by leaving the semantics of segments
and anchors undefined.
The ATLAS data model defines signals, ele-
ments, attributes, pointers, segments and anchors.
Signals are base data objects (text, audio, etc.). El-
ements are related to each other only using point-
ers. While elements and pointers can be used to
form trees, the ATLAS data model does not en-
force this. As a result, the problem of overlapping
hierarchies does not apply to the model. Elements
are not contained within layers, instead they carry
a type. However all elements of the same type can
be interpreted as belonging to one layer. Segments
do not carry start and end attributes, they carry a
number of anchors. How exactly anchors are real-
ized depends on the signals and is not specified in
the data model.
The serialization format of ATLAS (AIF) is an
XML dialect, but does not use the provisions for
modeling trees present in the XML data model to
</bodyText>
<page confidence="0.994668">
185
</page>
<bodyText confidence="0.999919571428571">
represent structural annotations as e.g. NXT does.
The annotation data is stored as a flat set of ele-
ments, pointers, etc., which precludes the efficient
use of existing tools like XPath to do structural
queries. This is especially inconvenient as the AT-
LAS project does not provide a query language
and query engine yet.
</bodyText>
<subsectionHeader confidence="0.949957">
2.6 ISO 24610-1 - Feature Structures
</subsectionHeader>
<bodyText confidence="0.99999376">
The philosophy behind (ISO-24610-1, 06) is dif-
ferent from that of the four previous approaches.
Here the base data is an XML document con-
forming to the TEI standard (Sperberg-McQueen
&amp; Burnard, 02). XML elements in the TEI base
data can reference feature stuctures. A feature
structure is a single-rooted graph, not necessarily
a tree. The inner nodes of the graph are typed ele-
ments, the leaves are values, which can be shared
amongst elements using pointers or can be ob-
tained functionally from other values.
While in the four previously discussed ap-
proaches the annotations contain references to the
base data in the leaves of the annotation structure,
here the base data contains references to the root
of the annotation structures. This is a powerful
approach to identifying features of base data seg-
ments, but it is not very well suited for represent-
ing constituent hierarchies.
Feature structures put a layer of abstraction on
top of the facilities provided by XML. XML val-
idation schemes are used only to check the well-
formedness of the serialization but not to validate
the features structures. For this purpose feature
structure declarations (FSD) have been defined.
</bodyText>
<sectionHeader confidence="0.975313" genericHeader="method">
3 A comprehensive data model
</sectionHeader>
<bodyText confidence="0.99982425">
This section suggests a data model covering the
objects that have been discussed in the context of
the approaches presented in Sections 2.1-2.6. See
Figure 3 for an overview.
</bodyText>
<subsectionHeader confidence="0.999584">
3.1 Objects of the medial tier
</subsectionHeader>
<bodyText confidence="0.9988954">
We use the term base data for any data we want
to annotate. A single instance of base data is
called signal. Signals can be of many different
kinds such as images (e.g. scans of facsimiles) or
streams of text, audio or video data.
</bodyText>
<figureCaption confidence="0.993893">
Figure 3: Comprehensive data model
</figureCaption>
<subsectionHeader confidence="0.991941">
3.2 Objects of the locational tier
</subsectionHeader>
<bodyText confidence="0.999988238095238">
Signals live in a virtual multi-dimensional signal
space1. Each point of a signal is mapped to a
unique point in signal space and vice versa. A
segment identifies an area of signal space using a
number of anchors, which uniquely identify points
in signal space.
Depending on the kind of signal the dimen-
sions of signal space have to be interpreted dif-
ferently. For instance streams have a single di-
mension: time. At each point along the time axis,
we may find a character or sound sample. Other
kinds of signals can however have more dimen-
sions: height, width, depth, etc. which can be con-
tinuous or discrete, bounded or open. For instance,
a sheet of paper has two bounded and continuous
dimensions: height and width. Thus a segment to
capture a paragraph may have to describe a poly-
gon. A single sheet of paper does not have a time
dimension, however when multiple sheets are ob-
served, these can be interpreted as a third dimen-
sion of discrete time.
</bodyText>
<subsectionHeader confidence="0.999701">
3.3 Objects of the annotational tiers
</subsectionHeader>
<bodyText confidence="0.9999696">
An annotation element has a name and can have
features, pointers and segments. A pointer is a
typed directed reference to one or more elements.
Elements relate to each other in different ways: di-
rectly by structural relations of the layer, pointers
and alignments and indirectly by locational and
medial relations (cf. Fig. 4).
An annotation layer contains elements and de-
fines structural relations between them, e.g. domi-
nance or neighborhood relations.
</bodyText>
<footnote confidence="0.995233">
1(Laprun et al., 02) calls this feature space. This label is
not used here to avoid suggesting a connection to the featural
tier.
</footnote>
<page confidence="0.996377">
186
</page>
<bodyText confidence="0.999947588235294">
An alignment defines an equivalence class of el-
ements, to each of which a role can be assigned.
Pointers can be used for structural relations that
cross-cut the structural model of a layer or to
create a relation across layer boundaries. Each
pointer carries a role that specifies the kind of re-
lation it models. Pointers allow an element to have
multiple parents and to refer to other elements
across annotation layers.
Features have a name and a value. They are al-
ways bound to an annotation element and cannot
exist on their own. For the time being we use this
simple definition of a feature, as it mirrors the con-
cept of XML attributes. However, future work has
to analyze if the ISO 24610 feature structures can
and should be modelled as a part of the structural
tier or if the featural tier should be extended.
</bodyText>
<sectionHeader confidence="0.998449" genericHeader="method">
4 Query
</sectionHeader>
<bodyText confidence="0.999776969696969">
To make use of annotated corpora, query methods
need to be defined. Depending on the data storage
model that is used, different query languages are
possible, e.g. XQuery for XML or SQL for rela-
tional databases. But these complicate query for-
mulating because they are tailored to query a low
level data storage model rather than a high level
annotation data model.
A high level query language is necessary to get a
good user acceptance and to achieve independence
from lower level data models used to represent an-
notation data in an efficient way. NXT comes with
NQL (Evert et al., 03), a sophisticated declarative
high level query language. NQL is implemented
in a completely new query engine instead of us-
ing XPath, XQuery or SQL. LPath, another recent
development (Bird et al., 06), is a path-like query
language. It is a linguistically motivated extension
of XPath with additional axes and operators that
allow additional queries and simplify others.
In some cases XML or SQL databases are sim-
ply not suited for a specific query. While we might
be able to do regular expression matches on textual
base data in a SQL or XML environment, doing
a similar operation on video base data is beyond
their scope.
The NXT project plans a translation of NQL to
XQuery in order to use existing XQuery engines.
LPath and DDD map high level query languages
to SQL. (Grust et al., 04) are working on translat-
ing XQuery to SQL. The possibility of translating
high level query languages into lower level query
languages seems a good point for modularization.
</bodyText>
<subsectionHeader confidence="0.986278">
4.1 Structural queries
</subsectionHeader>
<bodyText confidence="0.979951414634146">
Structural query operators are strongly tied to the
structure of annotation layers, because they reflect
the structural relations inside a layer. However, we
also define structural relations such as alignments
and pointers that exist independently of layers (cf.
Sec. 3.3). The separation between pointers, align-
ments and different kinds of layers offers potential
for modularization
Layers allowing only for positional annotations
know only one structural relation: the neigh-
borhood relation between two adjacent positions.
Layers following the XML data model know
parent-child relations and neighborhood relations.
Layers with different internal structures may offer
other relations. A number of possible relations is
shown in Figure 4.
Figure 4: Structural relations and crossing to other
tiers
While the implementation of query operators
depends on the internal layer structure, the syn-
tax does not necessarily have to be different. For
instance a following(a) operator of a positional
layer will yield all elements following element
a. A hierarchical layer can have two kinds of
following operators, one that only yields siblings
following a and one yielding all elements follow-
ing a. Here a choice has to be made if one of these
operators is similar enough to the following(a)
to share that name without confusing the user.
Operators to follow pointers or alignments can
be implemented independently of the layer struc-
ture.
XPath or LPath (Bird et al., 06) are path-like
query languages specifically suited to access hier-
archically structured data, but neither directly sup-
ports alignments, pointers or the locational tier.
In the context of XQuery, XPath can be extended
with user-defined functions that could be used to
provide this access, but using such functions in
path statements can become awkward. It may be a
better idea to extend the path language instead.
</bodyText>
<page confidence="0.995838">
187
</page>
<bodyText confidence="0.912057">
Structural queries could look like this:
</bodyText>
<listItem confidence="0.935482230769231">
• Which noun phrases are inside verb phrases?
//VP//NP
Result: a set of annotation elements.
• Anaphora are annotated using a pointer with
the role ”anaphor”. What do determiners in
the corpus refer to?
//DET/=&gt;anaphor
Result: a set of annotation elements.
• Translated elements are aligned in an align-
ment called ”translation”. What are the trans-
lations of the current element?
self/#translation
Result: a set of annotation elements.
</listItem>
<subsectionHeader confidence="0.992138">
4.2 Featural queries
</subsectionHeader>
<bodyText confidence="0.99350725">
If we use the simple definition of features from
Section 3.3, there is only one operator native to
the featural tier that can be used to access the an-
notation element associated with a feature. If we
use the complex definition from ISO 24610, the
operators of the featural tier are largely the same
as in hierarchically structured annotation layers.
Operators to test the value of a feature can not
strictly be assigned to the featural tier. Using the
simple definition, the value of a feature is some
typed atomic value. The query language has to
provide generic operators to compare atomic val-
ues like strings or numbers with each other. E.g.
XPath provides a weakly typed system that pro-
vides such operators.
Queries involving features could look like this:
</bodyText>
<listItem confidence="0.972945875">
• What is the value of the ”PoS” feature of the
current annotation element?
self/@PoS
Result: a string value.
• What elements have a feature called ”PoS”
with the value ”N”?
//*[@PoS=’N’]
Result: a set of annotation elements.
</listItem>
<subsectionHeader confidence="0.999766">
4.3 Locational queries
</subsectionHeader>
<bodyText confidence="0.9697426">
Locational queries operate on segment data. The
inner structure of segments reflects the structure
of signal space and different kinds of signals re-
quire different operators. Most of the time opera-
tors working on single continuous dimensions, e.g.
a timeline, will be used. An operator working on
higher dimensions could be an intersection opera-
tor of two dimensional signal space areas (scan of
a newspaper page, video frames, etc.).
Queries involving locations could look like this:
</bodyText>
<listItem confidence="0.780173">
• What parts of segments a and b overlap?
overlap($a,$b)
Result: the empty set or a segment defining
the overlapping part.
• Merge segments a and b.
merge($a, $b)
Result: if a and b overlap, the result is a new
segment that covers both, otherwise the re-
sults is a set consisting of a and b.
• Is segment a following segment b?
is-following($a, $b)
Result: true or false.
</listItem>
<bodyText confidence="0.9998898">
Locational operators are probably best bundled
into modules by the kind of locational structure
they support: a module for sequential data such as
text or audio, one for two-dimensional data such
as pictures, and so on.
</bodyText>
<subsectionHeader confidence="0.999167">
4.4 Medial queries
</subsectionHeader>
<bodyText confidence="0.99882">
Medial query operators access base data, but often
they take locational arguments or return locational
information. When a medial operator is used to
access textual base data, the result is a string. As
with feature values, such a string could be evalu-
ated by a query language that supports some prim-
itive data types.
Assume there is a textual signal named ’plain-
text’. Queries on base data could look like this:
</bodyText>
<listItem confidence="0.998209416666667">
• Where does the string ”rapid” occur?
signal(’plaintext’)/’rapid’
Result: a set of segments.
• Where does the string ”prototyping” occur to
the right of the location of ”rapid”?
signal(’plaintext’)/
’rapid’&gt;&gt;’prototyping’
Result: a set of segments.
• What is the base data between offset 5 and 9
of the signal ”plaintext”?
signal(’plaintext’)/&lt;{5,9}&gt;
Result: a portion of base data (e.g. a string).
</listItem>
<bodyText confidence="0.910426">
If the base data is an audio or video stream, the
type system of most query languages is likely to
</bodyText>
<page confidence="0.996839">
188
</page>
<bodyText confidence="0.99948975">
be insufficient. In such a case a module provid-
ing support for audio or video storage should also
provide necessary query operators and data type
extensions to the query engine.
</bodyText>
<subsectionHeader confidence="0.9697445">
4.5 Projection between annotational and
medial tiers
</subsectionHeader>
<bodyText confidence="0.9837466">
So far we have considered crossing the borders be-
tween the structural and featural tiers and between
the locational and medial tiers. Now we examine
the border between the locational and structural
tier. An operator can be used to collect all loca-
tional data associated with an annotation element
and its children:
seg(//S/VP/)
The result would be a set of potentially overlap-
ping segments. Depending on the query, it will
be necessary to merge overlapping segments to get
a list of non-overlappping segments. Assume we
have a recorded interview annotated for speakers
and at some point speaker A and B speak at the
same time. We want to listen to all parts of the
interview in which speakers A or B speak. If we
query without merging overlapping segments, we
will hear the part in which both speak at the same
time twice.
Similar decisions have to be made when pro-
jecting up from a segment into the structural layer.
Figure 5 shows a hierarchical annotation struc-
ture. Only the elements W1, W2 and W3 bear
segments that anchor them to the base data at the
points A-D.
</bodyText>
<figureCaption confidence="0.997534">
Figure 5: Example structure
</figureCaption>
<bodyText confidence="0.999827">
When projecting up from the segment {B, D}
there are a number of potentially desirable results.
Some are given here:
</bodyText>
<listItem confidence="0.952724636363636">
1. no result: because there is no annotation ele-
ment that is anchored to {B, D}.
2. W2 and W3: because both are anchored to
an area inside {B, D}.
3. Phrase 2, W2 and W3: because applying the
seg operator to either element yields seg-
ments inside {B, D}.
4. Phrase 2 only: because applying the seg op-
erator to this element yields an area that cov-
ers exactly {B, D}.
5. Phrase 1, Phrase 2: because applying the
</listItem>
<bodyText confidence="0.954083263157895">
seg operator to either element yields seg-
ments containing {B, D}.
The query language has to provide operators
that enable the user to choose the desired result.
Queries that yield the desired results could look
like in Figure 6. Here the same-extent operator
takes two sets of segments and returns those seg-
ments that are present in both lists and have the
same start and end positions. The anchored oper-
ator takes an annotation element and returns true
if the element is anchored. The contains operator
takes two sets of segments a and b and returns all
segments from set b that are contained in an area
covered by any segment in set a. The grow opera-
tor takes a set of segments and returns a segment,
which starts at the smallest offset and ends at the
largest offset present in any segment of the input
list. In the tests an empty set is interpreted as false
and a non-empty set as true.
</bodyText>
<reference confidence="0.784818875">
1. //*[same-extent(seg(.),
&lt;{B,D}&gt;)]
2. //*[anchored(.) and
contains(&lt;{B,D}&gt;, seg(.))]
3. //*[contains(&lt;{B,D}&gt;, seg(.))]
4. //*[same-extent(grow(seg(.)),
&lt;{B,D}&gt;)]
5. //*[contains(seg(.)), &lt;{B,D}&gt;]
</reference>
<figureCaption confidence="0.80845">
Figure 6: Projection examples
</figureCaption>
<sectionHeader confidence="0.998359" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999712714285714">
Corpus-based research projects often choose to
implement custom tools and encoding formats.
Small projects do not want to lose valuable time
learning complex frameworks and adapting them
to their needs. They often employ a custom XML
format to be able to use existing XML processing
tools like XQuery or XSLT processors.
</bodyText>
<page confidence="0.996818">
189
</page>
<bodyText confidence="0.999931315789474">
ATLAS or NXT are very powerful, yet they
suffer from lack of accessibility to programmers
who have to adapt them to project-specific needs.
Most specialized annotation editors do not build
upon these frameworks and neither offer conver-
sion tools between their data formats.
Projects such as DDD do not make use of the
frameworks, because they are not easily extensi-
ble, e.g. with a SQL backend instead of an XML
storage. Instead, again a high level query language
is developed and a completely new framework is
created which works with a SQL backend.
In the previous sections, objects from selected
approaches with different foci in their work with
annotated corpora have been collected and forged
into a comprehensive data model. The potential
for modularization of corpus annotation frame-
works has been shown with respect to data models
and query languages. As a next step, an existing
framework should be taken and refactored into an
extensible modular architecture. From a practical
point of view reusing existing technology as much
as possible is a desirable goal. This means reusing
existing facilities provided for XML data, such as
XPath, XQuery and XSchema and where neces-
sary trying to extend them, instead of creating a
new data model from scratch. For the annotational
tiers, as LPath has shown, a good starting point to
do so is to extend existing languages like XPath.
Locational and medial operators seem to be best
implemented as XQuery functions. The possibil-
ity to map between SQL and XML provides ac-
cess to additional efficient resources for storing
and querying annotation data. Support for various
kinds of base data or locational information can be
encapsulated in modules. Which modules exactly
should be created and what they should cover in
detail has to be further examined.
</bodyText>
<sectionHeader confidence="0.996548" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.9997652">
Many thanks go to Elke Teich and Peter
Fankhauser for their support. Part of this research
was financially supported by Hessischer Innova-
tionsfonds and PACE (Partners for the Advance-
ment of Collaborative Engineering Education).
</bodyText>
<sectionHeader confidence="0.999477" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999948192982456">
S. Bartsch, R. Eckart, M. Holtz &amp; E. Teich 2005.
Corpus-based register profiling of texts form me-
chanical engineering In Proceedings of Corpus Lin-
guistics, Birmingham, UK, July 2005.
S. Bird &amp; M. Liberman 2001. A Formal Framework
for Linguistic Annotation In Speech Communica-
tion 33(1,2), pp 23-60
S. Bird, Y. Chen, S. B. Davidson, H. Lee and Y.
Zheng. 2006. Designing and Evaluating an XPath
Dialect for Linguistic Queries. In Proceedings of the
22nd International Conference on Data Engineer-
ing, ICDE 2006, 3-8 April 2006, Atlanta, GA, USA
J. Carletta, D. McKelvie, A. Isard, A. Mengel, M. Klein
&amp; M.B. Møller 2004 A generic approach to soft-
ware support for linguistic annotation using XML
In G. Sampson and D. McCarthy (eds.), Corpus Lin-
guistics: Readings in a Widening Discipline. Lon-
don and NY: Continuum International.
S. Evert, J. Carletta, T. J. O’Donnell, J. Kilgour, A.
V¨ogele &amp; H. Voormann 2003. The NITE Object
Model v2.1 http://www.ltg.ed.ac.uk/NITE/
documents/NiteObjectModel.v2.1.pdf
L. C. Faulstich, U. Leser &amp; A. L¨udeling 2005. Storing
and querying historical texts in a relational database
In Informatik-Bericht 176, Institut f¨ur Informatik,
Humboldt-Universit¨at zu Berlin, 2005.
T. Grust and S. Sakr and J. Teubner 2002. XQuery
on SQL Hosts In Proceedings of the 30th Int’l Con-
ference on Very Large Data Bases (VLDB) Toronto,
Canada, Aug. 2004.
M.A.K. Halliday. 2004. Introduction to Functional
Grammar. Arnold, London. Revised by CMIM
Matthiessen
C. Laprun, J.G. Fiscus, J. Garofolo, S. Pa-
jot 2002. A practical introduction to AT-
LAS In Proceedings LREC 2002 Las Palmas
http://www.nist.gov/speech/atlas/download/lrec2002-
atlas.pdf
M. Laurent Romary (chair) and TC 37/SC 4/WG 2
2006. Language resource management - Feature
structures - Part 1: Feature structure representation.
In ISO 24610-1.
C. M. Sperberg-McQueen &amp; L. Burnard, (eds.) 2002.
TEI P4: Guidelines for Electronic Text Encoding
and Interchange. Text Encoding Initiative Con-
sortium. XML Version: Oxford, Providence, Char-
lottesville, Bergen
E. Teich, P. Fankhauser, R. Eckart, S. Bartsch, M.
Holtz. 2005. Representing SFL-annotated corpora.
In Proceedings of the First Computational Systemic
Functional Grammar Workshop (CSFG), Sydney,
Australia.
E. Teich, S. Hansen, and P. Fankhauser. 2001. Rep-
resenting and querying multi-layer corpora. In
Proceedings of the IRCS Workshop on Linguistic
Databases, pages 228-237, University of Pennsyl-
vania, Philadelphia, 11-13 December.
</reference>
<page confidence="0.997872">
190
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.982601">
<title confidence="0.99981">Towards A Modular Data Model For Multi-Layer Annotated Corpora</title>
<author confidence="0.999985">Richard Eckart</author>
<affiliation confidence="0.99994">Department of English Linguistics Darmstadt University of Technology</affiliation>
<address confidence="0.999993">64289 Darmstadt, Germany</address>
<email confidence="0.999598">eckart@linglit.tu-darmstadt.de</email>
<abstract confidence="0.998769357142857">In this paper we discuss the current methods in the representation of corpora annotated at multiple levels of linguistic organi- (so-called corpora). Taking five approaches which are representative of the current practice in this area, we discuss the commonalities and differences between them focusing on the underlying data models. The goal of the paper is to identify the common concerns in multi-layer corpus representation and processing so as to lay a foundation for a unifying, modular data model.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<volume>1</volume>
<note>same-extent(seg(.), &lt;{B,D}&gt;</note>
<marker></marker>
<rawString>1. //*[same-extent(seg(.), &lt;{B,D}&gt;)]</rawString>
</citation>
<citation valid="false">
<title>anchored(.) and contains(&lt;{B,D}&gt;, seg(.))] 3.</title>
<note>contains(&lt;{B,D}&gt;, seg(.</note>
<marker></marker>
<rawString>2. //*[anchored(.) and contains(&lt;{B,D}&gt;, seg(.))] 3. //*[contains(&lt;{B,D}&gt;, seg(.))]</rawString>
</citation>
<citation valid="false">
<note>{B,D}&gt;)] 5. //*[contains(seg(.)), &lt;{B,D}&gt;</note>
<marker></marker>
<rawString>4. //*[same-extent(grow(seg(.)), &lt;{B,D}&gt;)] 5. //*[contains(seg(.)), &lt;{B,D}&gt;]</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Bartsch</author>
<author>R Eckart</author>
<author>M Holtz</author>
<author>E Teich</author>
</authors>
<title>Corpus-based register profiling of texts form mechanical engineering</title>
<date>2005</date>
<booktitle>In Proceedings of Corpus Linguistics,</booktitle>
<location>Birmingham, UK,</location>
<marker>Bartsch, Eckart, Holtz, Teich, 2005</marker>
<rawString>S. Bartsch, R. Eckart, M. Holtz &amp; E. Teich 2005. Corpus-based register profiling of texts form mechanical engineering In Proceedings of Corpus Linguistics, Birmingham, UK, July 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Bird</author>
<author>M Liberman</author>
</authors>
<title>A Formal Framework for Linguistic Annotation In Speech Communication 33(1,2),</title>
<date>2001</date>
<pages>23--60</pages>
<marker>Bird, Liberman, 2001</marker>
<rawString>S. Bird &amp; M. Liberman 2001. A Formal Framework for Linguistic Annotation In Speech Communication 33(1,2), pp 23-60</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Bird</author>
<author>Y Chen</author>
<author>S B Davidson</author>
<author>H Lee</author>
<author>Y Zheng</author>
</authors>
<title>Designing and Evaluating an XPath Dialect for Linguistic Queries.</title>
<date>2006</date>
<booktitle>In Proceedings of the 22nd International Conference on Data Engineering, ICDE</booktitle>
<pages>3--8</pages>
<location>Atlanta, GA, USA</location>
<marker>Bird, Chen, Davidson, Lee, Zheng, 2006</marker>
<rawString>S. Bird, Y. Chen, S. B. Davidson, H. Lee and Y. Zheng. 2006. Designing and Evaluating an XPath Dialect for Linguistic Queries. In Proceedings of the 22nd International Conference on Data Engineering, ICDE 2006, 3-8 April 2006, Atlanta, GA, USA</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Carletta</author>
<author>D McKelvie</author>
<author>A Isard</author>
<author>A Mengel</author>
<author>M Klein</author>
<author>M B</author>
</authors>
<title>A generic approach to software support for linguistic annotation using XML</title>
<date>2004</date>
<booktitle>Corpus Linguistics: Readings in a Widening Discipline. London and NY: Continuum International.</booktitle>
<editor>In G. Sampson and D. McCarthy (eds.),</editor>
<publisher>Møller</publisher>
<marker>Carletta, McKelvie, Isard, Mengel, Klein, B, 2004</marker>
<rawString>J. Carletta, D. McKelvie, A. Isard, A. Mengel, M. Klein &amp; M.B. Møller 2004 A generic approach to software support for linguistic annotation using XML In G. Sampson and D. McCarthy (eds.), Corpus Linguistics: Readings in a Widening Discipline. London and NY: Continuum International.</rawString>
</citation>
<citation valid="false">
<booktitle>Voormann 2003. The NITE Object Model v2.1 http://www.ltg.ed.ac.uk/NITE/ documents/NiteObjectModel.v2.1.pdf</booktitle>
<editor>S. Evert, J. Carletta, T. J. O’Donnell, J. Kilgour, A. V¨ogele &amp; H.</editor>
<marker></marker>
<rawString>S. Evert, J. Carletta, T. J. O’Donnell, J. Kilgour, A. V¨ogele &amp; H. Voormann 2003. The NITE Object Model v2.1 http://www.ltg.ed.ac.uk/NITE/ documents/NiteObjectModel.v2.1.pdf</rawString>
</citation>
<citation valid="true">
<authors>
<author>L C Faulstich</author>
<author>U Leser</author>
<author>A L¨udeling</author>
</authors>
<title>Storing and querying historical texts in a relational database</title>
<date>2005</date>
<booktitle>In Informatik-Bericht 176, Institut f¨ur Informatik, Humboldt-Universit¨at zu</booktitle>
<location>Berlin,</location>
<marker>Faulstich, Leser, L¨udeling, 2005</marker>
<rawString>L. C. Faulstich, U. Leser &amp; A. L¨udeling 2005. Storing and querying historical texts in a relational database In Informatik-Bericht 176, Institut f¨ur Informatik, Humboldt-Universit¨at zu Berlin, 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Grust</author>
<author>S Sakr</author>
<author>J Teubner</author>
</authors>
<title>XQuery on SQL Hosts</title>
<date>2002</date>
<booktitle>In Proceedings of the 30th Int’l Conference on Very Large Data Bases (VLDB)</booktitle>
<location>Toronto, Canada,</location>
<marker>Grust, Sakr, Teubner, 2002</marker>
<rawString>T. Grust and S. Sakr and J. Teubner 2002. XQuery on SQL Hosts In Proceedings of the 30th Int’l Conference on Very Large Data Bases (VLDB) Toronto, Canada, Aug. 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A K Halliday</author>
</authors>
<title>Introduction to Functional Grammar.</title>
<date>2004</date>
<location>Arnold, London.</location>
<note>Revised by CMIM Matthiessen</note>
<marker>Halliday, 2004</marker>
<rawString>M.A.K. Halliday. 2004. Introduction to Functional Grammar. Arnold, London. Revised by CMIM Matthiessen</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Laprun</author>
<author>J G Fiscus</author>
<author>J Garofolo</author>
<author>S Pajot</author>
</authors>
<title>A practical introduction to ATLAS</title>
<date>2002</date>
<booktitle>In Proceedings LREC 2002 Las Palmas http://www.nist.gov/speech/atlas/download/lrec2002-atlas.pdf</booktitle>
<marker>Laprun, Fiscus, Garofolo, Pajot, 2002</marker>
<rawString>C. Laprun, J.G. Fiscus, J. Garofolo, S. Pajot 2002. A practical introduction to ATLAS In Proceedings LREC 2002 Las Palmas http://www.nist.gov/speech/atlas/download/lrec2002-atlas.pdf</rawString>
</citation>
<citation valid="false">
<authors>
<author>M Laurent</author>
</authors>
<title>Romary (chair) and TC 37/SC 4/WG 2 2006. Language resource management - Feature structures - Part 1: Feature structure representation.</title>
<booktitle>In ISO</booktitle>
<pages>24610--1</pages>
<marker>Laurent, </marker>
<rawString>M. Laurent Romary (chair) and TC 37/SC 4/WG 2 2006. Language resource management - Feature structures - Part 1: Feature structure representation. In ISO 24610-1.</rawString>
</citation>
<citation valid="true">
<date>2002</date>
<booktitle>TEI P4: Guidelines for Electronic Text Encoding and Interchange. Text Encoding Initiative Consortium. XML Version:</booktitle>
<editor>C. M. Sperberg-McQueen &amp; L. Burnard, (eds.)</editor>
<location>Oxford, Providence, Charlottesville, Bergen</location>
<marker>2002</marker>
<rawString>C. M. Sperberg-McQueen &amp; L. Burnard, (eds.) 2002. TEI P4: Guidelines for Electronic Text Encoding and Interchange. Text Encoding Initiative Consortium. XML Version: Oxford, Providence, Charlottesville, Bergen</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Teich</author>
<author>P Fankhauser</author>
<author>R Eckart</author>
<author>S Bartsch</author>
<author>M Holtz</author>
</authors>
<title>Representing SFL-annotated corpora.</title>
<date>2005</date>
<booktitle>In Proceedings of the First Computational Systemic Functional Grammar Workshop (CSFG),</booktitle>
<location>Sydney, Australia.</location>
<marker>Teich, Fankhauser, Eckart, Bartsch, Holtz, 2005</marker>
<rawString>E. Teich, P. Fankhauser, R. Eckart, S. Bartsch, M. Holtz. 2005. Representing SFL-annotated corpora. In Proceedings of the First Computational Systemic Functional Grammar Workshop (CSFG), Sydney, Australia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Teich</author>
<author>S Hansen</author>
<author>P Fankhauser</author>
</authors>
<title>Representing and querying multi-layer corpora.</title>
<date>2001</date>
<booktitle>In Proceedings of the IRCS Workshop on Linguistic Databases,</booktitle>
<pages>228--237</pages>
<institution>University of Pennsylvania,</institution>
<location>Philadelphia,</location>
<marker>Teich, Hansen, Fankhauser, 2001</marker>
<rawString>E. Teich, S. Hansen, and P. Fankhauser. 2001. Representing and querying multi-layer corpora. In Proceedings of the IRCS Workshop on Linguistic Databases, pages 228-237, University of Pennsylvania, Philadelphia, 11-13 December.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>