<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.020503">
<title confidence="0.986258">
MORPIlt: A Practical Compiler for Reversible Morphology Rules
</title>
<author confidence="0.997757">
John R. R. Leavitt
</author>
<affiliation confidence="0.9812305">
Center for Machine Translation
Carnegie Mellon University
</affiliation>
<address confidence="0.738762">
Pittsburgh, PA 15213
</address>
<email confidence="0.949309">
jrrl@cs .cmu.edu
</email>
<sectionHeader confidence="0.996386" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999764166666667">
Morpha is a Common Lisp compiler for reversible
inflectional morphology rules developed at the Cen-
ter for Machine Translation at Carnegie Mellon Uni-
versity. This paper describes the Morphe process-
ing model, its implementation, and how it handles
some common morphological processes.
</bodyText>
<sectionHeader confidence="0.999394" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999987555555555">
The input to the Morph e rule compiler is a rule file containing
inflection rules, the specification of a discrimination network
of morphological forms, and definitions of certain classes of
strings and string mappings. This rule file can be compiled
into either a word generation program or a word parsing pro-
gram. The word generation program produces an inflected
surface form from a feature structure,1 while the word pars-
ing program takes an inflected form and produces a set of
feature structures for valid parses.2
</bodyText>
<sectionHeader confidence="0.998238" genericHeader="method">
2 The Processing Model
</sectionHeader>
<bodyText confidence="0.9851585">
In Morph a the process of inflection is seen as consisting of
two basic steps:
</bodyText>
<listItem confidence="0.997175666666667">
1. By making a series of feature- and orthographically-
based decisions, choose an inflection procedure.
2. Apply that procedure to the uninflected root.
</listItem>
<bodyText confidence="0.9998081">
To implement the first step, Morph e uses a feature-based
discrimination network with orthographically-based inflec-
tion rules at the leaves. Each node in the discrimination
network specifies a set of features common to all of its descen-
dants. For example, at the top of a subtre,e for nouns, a node
might contain the features { (cat noun) } which would be
inherited by the nodes for single-noun and plural-noun, and
so on.
That Morphe explicitly divides feature-based decisions
from orthographic decisions has two important consequences:
</bodyText>
<footnote confidence="0.9859965">
&apos;These feature structures are structurally the same as those used
by the Generalized LR Parser/Compiler [Tomita et al., 19881 and
the Generation Kit [Tomita and Nyberg, 19881, and can contain
non-syntactic features.
2A detailed description of the Morphe program and rule file for-
malism and some example rule files are given in [Leavitt, 1992].
</footnote>
<listItem confidence="0.992117">
• The type of feature that may be checked in the discrimi-
nation network is not restricted. For instance, phonolog-
ical and/or morphological features (e.g. paradigm) can
be checked alongside syntactic features (e.g. category).
• A single morpheme can be split across several leaf nodes
if feature tests below the morpheme level are necessary.
</listItem>
<subsectionHeader confidence="0.986937">
2.1 The Rule Formalism
</subsectionHeader>
<bodyText confidence="0.999369666666667">
As shown in Figure 1, a rule consists of a set of clauses, each
of which contains orthographic pattern on the left-hand side
and a set of inflection operations on the right-hand side.
</bodyText>
<listItem confidence="0.993111875">
• Orthographic patterns. The orthographically-based de-
cisions are made by matching against regular expression-
based patterns. Standard regular expression operations
(i.e. Kleene closure, wildcards, etc.) are included. In
addition, non-standard operations for matching against
a pre-defined class of strings3, and binding and retrieval
of portions of the word4 are included.
• Inflection Operations. The application of the inflection
</listItem>
<bodyText confidence="0.9158795">
procedure is implemented as the sequential execution of
the inflection operations in the right-hand side. The in-
flection operations include affixation, deletion, and the
combined operation of &amp;quot;replacement&amp;quot; in prefix, suffix,
and infix positions. Also included is an operation for per-
forming regular string-to-string mapping within a word.5
</bodyText>
<sectionHeader confidence="0.98505" genericHeader="method">
3 Processing
</sectionHeader>
<bodyText confidence="0.9998428">
During generation, processing begins with a feature structure
entering the tree at the root node, and trickling down to the
appropriate leaf node. Once at the leaf node, the word root is
compared against each clause&apos;s orthographic pattern in turn.
When a match is found, the inflection procedure for that clause
is applied to the word root and the result is returned.
During parsing, processing begins with an inflected form
entering the tree at each leaf node where the inflection rules
are applied &amp;quot;in reverse&amp;quot; and the non-passing results discarded.
Applying a rule &amp;quot;in reverse&amp;quot; means that the word is matched
</bodyText>
<footnote confidence="0.981139285714286">
3This class matching is equivalent &amp;quot;alphabet subsets&amp;quot; in KIMMO
[Karttunen et al., 19831, &amp;quot;restricted variables&amp;quot; in NABU [Slocum,
19881, and &amp;quot;string vars&amp;quot; in DIMORPH [Gibson, 19911.
4These mechanisms are similar to the binding and retrieval mech-
anisms used in Unix utilities such as &amp;quot;sed&amp;quot;.
3String-to-string mapping is roughly equivalent to the &amp;quot;pairing-
up [of] variables&amp;quot; in NABU.
</footnote>
<page confidence="0.997424">
233
</page>
<bodyText confidence="0.99880375">
string-to-string mapping on a bound portion of a word.6
Alternations such as vowel rounding in the comparative
forms of German adjectives, and consonant and vowel
alternation in Rumanian, can be handled by this method.
</bodyText>
<listItem confidence="0.9562485">
• Supp/etion. Morpha currently handles suppletion by re-
quiring suppletive forms (e.g. &amp;quot;went&amp;quot; for &amp;quot;go&amp;quot;) to be
included in the lexicon. In this, it is not unlike many
other system, such as KIMMO and DIMORPH.
</listItem>
<equation confidence="0.930675888888889">
(leaf-rule v+pres-part
(((:or &amp;quot;x&amp;quot; .y”) $)
(+s &amp;quot;ing&amp;quot;))
((C V (% GC) $)
(+s %1 &amp;quot;ing&amp;quot;))
((C &amp;quot;e&amp;quot; 6) .
(rs &amp;quot;e&amp;quot; &amp;quot;ing&amp;quot;))
((C &amp;quot;ie&amp;quot; 6)
(rs &amp;quot;ie&amp;quot; &amp;quot;ying&amp;quot;))
</equation>
<figure confidence="0.978632545454545">
(:otherwise
(+s &amp;quot;ing&amp;quot;)))
; verbs
; verbs
; verbs
; verbs
like perplex s carry
like cut
like make
like die
; verbs like dent
</figure>
<figureCaption confidence="0.999993">
Figure 1: Inflection Rule for English Present Participle
</figureCaption>
<bodyText confidence="0.999866555555556">
against the inflected forms and the operations perform de-
inflection, rather than vice versa. After all clauses in all
leaves have been tried, and presumably most results have
been discarded, each remaining parse follows the network
upwards, collecting the features of each node it traverses until
a set of full feature structures arrives at the root node. When
this process is finished, a lexicon check is made to ensure that
only valid words (of the proper category, paradigm, etc.) are
kept.
</bodyText>
<sectionHeader confidence="0.9249805" genericHeader="method">
4 Handling Common Morphological
Processes
</sectionHeader>
<bodyText confidence="0.999821">
This section explains how common morphological processes
are handled by Morpha.
</bodyText>
<listItem confidence="0.9978166">
• Affixation. Prefixation, suffixation, and infixation are
handled directly by the +p, +s, and +1 inflection oper-
ators. To determine the insertion point, infixes must be
placed either before or after some portion of the word
that was bound during pattern matching.
• Deletion. Word initial, word final, and word internal
deletion are handled directly by the -p, - s, and -1
inflection operators. As with infixation, some bound
part of the word must act as an &amp;quot;anchor&amp;quot; for the deletion.
• Gemination and Reduplication. Since expressions may
</listItem>
<bodyText confidence="0.849751090909091">
be bound during pattern matching, bound expressions
can be affixed to the word to create the effects of gem-
ination or reduplication. For example, when forming
the present participle, certain English verbs repeat the
final consonant before adding the suffix &amp;quot;ing&amp;quot; (e.g. &amp;quot;cut&amp;quot;
&amp;quot;cutting&amp;quot;). This simple twinning is encoded by the
third clause in the above sample rule. Reduplication, as
found in Warlpiri [Sproat and Brunson, 19881, or Latin
[Matthews, 19741, can be handled in a similar manner
(i.e. by binding the appropriate portion of the root and
retrieving it during affixation).
</bodyText>
<listItem confidence="0.7604225">
• Paradigmatic Alternation. Alternations that consists of
a single mapping of one string to another, such as the
&amp;quot;-fe/-ve&amp;quot; alternation for the plural of English nouns like
&amp;quot;wife&amp;quot; or &amp;quot;knife&amp;quot; can be handled by a single replacement
operation. Alternations that consist of a number of re-
lated alternation, such as the {&amp;quot;-us/-i&amp;quot; &amp;quot;-um/-a&amp;quot; &amp;quot;-a/-ae&amp;quot;}
alternation for the plural of English nouns like &amp;quot;octopus&amp;quot;,
&amp;quot;spectrum&amp;quot;, and &amp;quot;vertebra&amp;quot; could be handled as separate
cases, but it is convenient to be able to refer to the en-
tire class of alternations. The map operator invokes a
</listItem>
<sectionHeader confidence="0.858065" genericHeader="method">
5 Current Uses and Future Research
</sectionHeader>
<bodyText confidence="0.999963">
Morpha is presently being used for French and German gen-
eration morphology in the Kant project, a knowledge-based
machine translation system being developed at Carnegie Mel-
lon University [Mitamura et al., 19911. In addition, a rule file
has been developed for English and one is currently being de-
signed for Spanish. Future research will be directed towards
morphological phenomena that cannot currently be handled
in an elegant fashion. Certain types of suppletion, such as
irregular stems with regular endings in Latin, should be han-
dled more generally and with less reliance on the lexicon as a
storehouse of irregularities. In addition, the design of mech-
anisms appropriate to the handling of prosodic inflection will
also be investigated.
</bodyText>
<sectionHeader confidence="0.999429" genericHeader="conclusions">
6 Acknowledgments
</sectionHeader>
<bodyText confidence="0.995276">
I would like to thank Alex Franz, Nicholas Brownlow, and
Deryle Lonsdale for their comments on drafts of this paper.
</bodyText>
<sectionHeader confidence="0.998929" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999355076923077">
[Gibson, 19911 Gibson, E. (1991). DIMORPH: A Morphological
Analyzer. Technical Report CMU-CMT-91-128, Center for Ma-
chine Translation, Carnegie Mellon University.
[Karttunen et al., 19831 Karttunen et al., L. (1983). KIMMO: A two
level morphological analyzer. In Texas Linguistic Forum 22.
[Leavitt, 1992] Leavitt, J. (1992). The MORPHE User&apos;s Guide.
Center for Machine Translation, Carnegie Mellon University.
[Matthews, 19741 Matthews, P. (1974). Morphology. Cambridge
University Press, Cambridge, England.
[Mitamura et al., 1991] Mitamura, T., Nyberg, E., and Carbonell, J.
(1991). An Efficient Interlingua Translation System for Multi-
lingual Document Production. In Proceedings of Machine Trans-
lation Summit III.
[Slocum, 1988] Slocum, J. (1988). Morphological processing in
the NABU system. In Proceedings of the Second Applied Natural
Language Processing Conference, pages 228-234.
[Sproat and Brunson, 19881 Sproat, R. and Brunson, B. (1988).
Constituent-Based Morphological Parsing: A New Approach to
the Problem of Word-Recognition. In Proceedings of the 26th An-
nual Meeting of the Association for Computational Linguistics.
[Tomita et al., 1988] Tomita, M., Mitamura, T., and Kee, M. (1988).
The Generalized LR Parser/Compiler User&apos;s Guide. Center for
Machine Translation, Carnegie Mellon University.
[Tomita and Nyberg, 19881 Tomita, M. and Nyberg, E. (1988). The
Generation Kit and the Transformation Kit. Center for Machine
Translation, Carnegie Mellon University.
</reference>
<footnote confidence="0.9850845">
6It should be noted that binding the appropriate portion of the
word is a nontrivial task and may require a place marker in the root
to help the pattern locate it. This is, however, an artifact of language,
not the inflection model.
</footnote>
<page confidence="0.993126">
234
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.976693">
<title confidence="0.999934">MORPIlt: A Practical Compiler for Reversible Morphology Rules</title>
<author confidence="0.999918">John R R Leavitt</author>
<affiliation confidence="0.999634">Center for Machine Translation Carnegie Mellon University</affiliation>
<address confidence="0.999976">Pittsburgh, PA 15213</address>
<email confidence="0.986316">jrrl@cs.cmu.edu</email>
<abstract confidence="0.998590571428571">Morpha is a Common Lisp compiler for reversible inflectional morphology rules developed at the Center for Machine Translation at Carnegie Mellon University. This paper describes the Morphe processing model, its implementation, and how it handles some common morphological processes.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<title>DIMORPH: A Morphological Analyzer.</title>
<date>1991</date>
<tech>Technical Report CMU-CMT-91-128,</tech>
<institution>Center for Machine Translation, Carnegie Mellon University.</institution>
<marker>1991</marker>
<rawString>[Gibson, 19911 Gibson, E. (1991). DIMORPH: A Morphological Analyzer. Technical Report CMU-CMT-91-128, Center for Machine Translation, Carnegie Mellon University.</rawString>
</citation>
<citation valid="true">
<title>KIMMO: A two level morphological analyzer.</title>
<date>1983</date>
<booktitle>In Texas Linguistic Forum 22.</booktitle>
<marker>1983</marker>
<rawString>[Karttunen et al., 19831 Karttunen et al., L. (1983). KIMMO: A two level morphological analyzer. In Texas Linguistic Forum 22.</rawString>
</citation>
<citation valid="true">
<title>The MORPHE User&apos;s Guide.</title>
<date>1992</date>
<institution>Center for Machine Translation, Carnegie Mellon University.</institution>
<marker>1992</marker>
<rawString>[Leavitt, 1992] Leavitt, J. (1992). The MORPHE User&apos;s Guide. Center for Machine Translation, Carnegie Mellon University.</rawString>
</citation>
<citation valid="false">
<date>1974</date>
<publisher>Morphology. Cambridge University Press,</publisher>
<location>Cambridge, England.</location>
<marker>1974</marker>
<rawString>[Matthews, 19741 Matthews, P. (1974). Morphology. Cambridge University Press, Cambridge, England.</rawString>
</citation>
<citation valid="true">
<title>An Efficient Interlingua Translation System for Multilingual Document Production.</title>
<date>1991</date>
<booktitle>In Proceedings of Machine Translation Summit III.</booktitle>
<marker>1991</marker>
<rawString>[Mitamura et al., 1991] Mitamura, T., Nyberg, E., and Carbonell, J. (1991). An Efficient Interlingua Translation System for Multilingual Document Production. In Proceedings of Machine Translation Summit III.</rawString>
</citation>
<citation valid="true">
<title>Morphological processing in the NABU system.</title>
<date>1988</date>
<booktitle>In Proceedings of the Second Applied Natural Language Processing Conference,</booktitle>
<pages>228--234</pages>
<marker>1988</marker>
<rawString>[Slocum, 1988] Slocum, J. (1988). Morphological processing in the NABU system. In Proceedings of the Second Applied Natural Language Processing Conference, pages 228-234.</rawString>
</citation>
<citation valid="true">
<title>Constituent-Based Morphological Parsing: A New Approach to the Problem of Word-Recognition.</title>
<date>1988</date>
<booktitle>In Proceedings of the 26th Annual Meeting of the Association for Computational Linguistics.</booktitle>
<marker>1988</marker>
<rawString>[Sproat and Brunson, 19881 Sproat, R. and Brunson, B. (1988). Constituent-Based Morphological Parsing: A New Approach to the Problem of Word-Recognition. In Proceedings of the 26th Annual Meeting of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<title>The Generalized LR Parser/Compiler User&apos;s Guide.</title>
<date>1988</date>
<institution>Center for Machine Translation, Carnegie Mellon University.</institution>
<marker>1988</marker>
<rawString>[Tomita et al., 1988] Tomita, M., Mitamura, T., and Kee, M. (1988). The Generalized LR Parser/Compiler User&apos;s Guide. Center for Machine Translation, Carnegie Mellon University.</rawString>
</citation>
<citation valid="true">
<title>The Generation Kit and the Transformation Kit.</title>
<date>1988</date>
<institution>Center for Machine Translation, Carnegie Mellon University.</institution>
<marker>1988</marker>
<rawString>[Tomita and Nyberg, 19881 Tomita, M. and Nyberg, E. (1988). The Generation Kit and the Transformation Kit. Center for Machine Translation, Carnegie Mellon University.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>