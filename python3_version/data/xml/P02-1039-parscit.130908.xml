<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000921">
<note confidence="0.9521295">
Proceedings of the 40th Annual Meeting of the Association for
Computational Linguistics (ACL), Philadelphia, July 2002, pp. 303-310.
</note>
<title confidence="0.997231">
A Decoder for Syntax-based Statistical MT
</title>
<author confidence="0.988981">
Kenji Yamada and Kevin Knight
</author>
<affiliation confidence="0.897055666666667">
Information Sciences Institute
University of Southern California
4676 Admiralty Way, Suite 1001
</affiliation>
<address confidence="0.623283">
Marina del Rey, CA 90292
</address>
<email confidence="0.999099">
kyamada,knight@isi.edu
</email>
<sectionHeader confidence="0.995647" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999984789473685">
This paper describes a decoding algorithm
for a syntax-based translation model (Ya-
mada and Knight, 2001). The model
has been extended to incorporate phrasal
translations as presented here. In con-
trast to a conventional word-to-word sta-
tistical model, a decoder for the syntax-
based model builds up an English parse
tree given a sentence in a foreign lan-
guage. As the model size becomes huge in
a practical setting, and the decoder consid-
ers multiple syntactic structures for each
word alignment, several pruning tech-
niques are necessary. We tested our de-
coder in a Chinese-to-English translation
system, and obtained better results than
IBM Model 4. We also discuss issues con-
cerning the relation between this decoder
and a language model.
</bodyText>
<sectionHeader confidence="0.999337" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999189897959184">
A statistical machine translation system based on the
noisy channel model consists of three components:
a language model (LM), a translation model (TM),
and a decoder. For a system which translates from
a foreign language to English, the LM gives
a prior probability P and the TM gives a chan-
nel translation probability P . These models
are automatically trained using monolingual (for the
LM) and bilingual (for the TM) corpora. A decoder
then finds the best English sentence given a foreign
are not sim-
ple probability tables but are parameterized models,
a decoder must conduct a search over the space de-
fined by the models. For the IBM models defined
by a pioneering paper (Brown et al., 1993), a de-
coding algorithm based on a left-to-right search was
described in (Berger et al., 1996). Recently (Ya-
mada and Knight, 2001) introduced a syntax-based
TM which utilized syntactic structure in the chan-
nel input, and showed that it could outperform the
IBM model in alignment quality. In contrast to the
IBM models, which are word-to-word models, the
syntax-based model works on a syntactic parse tree,
so the decoder builds up an English parse tree
given a sentencein a foreign language. This pa-
per describes an algorithm for such a decoder, and
reports experimental results.
Other statistical machine translation systems such
as (Wu, 1997) and (Alshawi et al., 2000) also pro-
duce a tree given a sentence. Their models are
based on mechanisms that generate two languages
at the same time, so an English tree is obtained
as a subproduct of parsing. However, their use of
the LM is not mathematically motivated, since their
models do not decompose into P and
unlike the noisy channel model.
Section 2 briefly reviews the syntax-based TM,
and Section 3 describes phrasal translation as an ex-
tension. Section 4 presents the basic idea for de-
coding. As in other statistical machine translation
systems, the decoder has to cope with a huge search
sentence that maximizes P , which also maxi-
mizes P according to Bayes’ rule.
A different decoder is needed for different choices
of LM and TM. Since P and P
space. Section 5 describes how to prune the search
space for practical decoding. Section 6 shows exper-
imental results. Section 7 discusses LM issues, and
is followed by conclusions.
</bodyText>
<sectionHeader confidence="0.995517" genericHeader="introduction">
2 Syntax-based TM
</sectionHeader>
<bodyText confidence="0.974591709677419">
The syntax-based TM defined by (Yamada and
Knight, 2001) assumes an English parse tree as
a channel input. The channel applies three kinds of
stochastic operations on each node : reordering
children nodes (), inserting an optional extra word
to the left or right of the node (), and translating
leaf words ().1 These operations are independent
of each other and are conditioned on the features
( , , ) of the node. Figure 1 shows an example.
The child node sequence of the top node VB is re-
ordered from PRP-VB1-VB2 into PRP-VB2-VB1
as seen in the second tree (Reordered). An extra
word ha is inserted at the leftmost node PRP as seen
in the third tree (Inserted). The English word He un-
der the same node is translated into a foreign word
kare as seen in the fourth tree (Translated). After
these operations, the channel emits a foreign word
sentenceby taking the leaves of the modified tree.
Formally, the channel probability P is
where ,
, and is a se-
quence of leaf words of a tree transformed byfrom
.
The model tables ,, and are
called the r-table, n-table, and t-table, respectively.
These tables contain the probabilities of the channel
operations (,,) conditioned by the features ( ,
, ). In Figure 1, the r-table specifies the prob-
ability of having the second tree (Reordered) given
the first tree. The n-table specifies the probability
of having the third tree (Inserted) given the second
</bodyText>
<footnote confidence="0.9960835">
1The channel operations are designed to model the differ-
ence in the word order (SVO for English vs. VSO for Arabic)
and case-marking schemes (word positions in English vs. case-
marker particles in Japanese).
</footnote>
<bodyText confidence="0.998333125">
tree. The t-table specifies the probability of having
the fourth tree (Translated) given the third tree.
The probabilities in the model tables are automat-
ically obtained by an EM-algorithm using pairs of
(channel input) and(channel output) as a training
corpus. Usually a bilingual corpus comes as pairs of
translation sentences, so we need to parse the cor-
pus. As we need to parse sentences on the channel
input side only, many X-to-English translation sys-
tems can be developed with an English parser alone.
The conditioning features ( , , ) can be any-
thing that is available on a tree, however they
should be carefully selected not to cause data-
sparseness problems. Also, the choice of fea-
tures may affect the decoding algorithm. In our
experiment, a sequence of the child node label
was used for , a pair of the node label and
the parent label was used for , and the identity
of the English word is used for. For exam-
ple, PPRP-VB2-VB1PRP-VB1-VB2
for the top node in Figure 1. Similarly for the
node PRP, Pright, haVB-PRPand
Pkarehe. More detailed examples are
found in (Yamada and Knight, 2001).
</bodyText>
<sectionHeader confidence="0.991101" genericHeader="method">
3 Phrasal Translation
</sectionHeader>
<bodyText confidence="0.977268">
In (Yamada and Knight, 2001), the translationis a
1-to-1 lexical translation from an English wordto a
foreign word, i.e., . To allow non
1-to-1 translation, such as for idiomatic phrases or
compound nouns, we extend the model as follows.
First we use fertility as used in IBM models to
allow 1-to-N mapping.
For N-to-N mapping, we allow direct transla-
tion of an English phrase to a foreign
phrase at non-terminal tree nodes as
</bodyText>
<footnote confidence="0.7149075">
and linearly mix this phrasal translation with the
word-to-word translation, i.e.,
</footnote>
<page confidence="0.509382">
P
</page>
<figure confidence="0.982892416666667">
P P
ifis terminal
P
otherwise
1. Channel Input
2. Reordered
VB
PRP VB1 VB2
VB TO
TO NN
VB
NN TO
PRP
TO
VB2
VB
VB1
VB
PRP
TO VB
VB2
VB1
NN TO
4. Translated
</figure>
<figureCaption confidence="0.999416">
Figure 1: Channel Operations: Reorder, Insert, and Translate
</figureCaption>
<figure confidence="0.995556888888889">
VB
3. Inserted
kare ha ongaku wo kiku no ga daisuki desu
5. Channel Output
PRP
VB2
VB1
TO VB
NN TO
</figure>
<bodyText confidence="0.999558285714286">
if is non-terminal. In practice, the phrase lengths
(, ) are limited to reduce the model size. In our ex-
periment (Section 5), we restricted them as
, to avoid pairs of extremely differ-
ent lengths. This formula was obtained by randomly
sampling the length of translation pairs. See (Ya-
mada, 2002) for details.
</bodyText>
<sectionHeader confidence="0.994701" genericHeader="method">
4 Decoding
</sectionHeader>
<bodyText confidence="0.999939944444444">
Our statistical MT system is based on the noisy-
channel model, so the decoder works in the reverse
direction of the channel. Given a supposed chan-
nel output (e.g., a French or Chinese sentence), it
will find the most plausible channel input (an En-
glish parse tree) based on the model parameters and
the prior probability of the input.
In the syntax-based model, the decoder’s task is
to find the most plausible English parse tree given an
observed foreign sentence. Since the task is to build
a tree structure from a string of words, we can use a
mechanism similar to normal parsing, which builds
an English parse tree from a string of English words.
Here we need to build an English parse tree from a
string of foreign (e.g., French or Chinese) words.
To parse in such an exotic way, we start from
an English context-free grammar obtained from the
training corpus,2 and extend the grammar to in-
</bodyText>
<footnote confidence="0.642264">
2The training corpus for the syntax-based model consists of
</footnote>
<bodyText confidence="0.990529344827586">
corporate the channel operations in the translation
model. For each non-lexical rule in the original En-
glish grammar (such as “VP VB NP PP”), we
supplement it with reordered rules (e.g. “VP
NP PP VB”, “VP NP VB PP ”, etc.) and asso-
ciate them with the original English order and the
reordering probability from the r-table. Similarly,
rules such as “VP VP X” and “X word” are
added for extra word insertion, and they are associ-
ated with a probability from the n-table. For each
lexical rule in the English grammar, we add rules
such as “englishWord foreignWord” with a prob-
ability from the t-table.
Now we can parse a string of foreign words and
build up a tree, which we call a decoded tree. An
example is shown in Figure 2. The decoded tree is
built up in the foreign language word order. To ob-
tain a tree in the English order, we apply the reverse
of the reorder operation (back-reordering) using the
information associated to the rule expanded by the
r-table. In Figure 2, the numbers in the dashed oval
near the top node shows the original english order.
Then, we obtain an English parse tree by remov-
ing the leaf nodes (foreign words) from the back-
reordered tree. Among the possible decoded trees,
we pick the best tree in which the product of the LM
probability (the prior probability of the English tree)
and the TM probability (the probabilities associated
pairs of English parse trees and foreign sentences.
</bodyText>
<figureCaption confidence="0.999165">
Figure 2: Decoded Tree
</figureCaption>
<bodyText confidence="0.9996846">
with the rules in the decoded tree) is the highest.
The use of an LM needs consideration. Theoret-
ically we need an LM which gives the prior prob-
ability of an English parse tree. However, we can
approximate it with an n-gram LM, which is well-
studied and widely implemented. We will discuss
this point later in Section 7.
If we use a trigram model for the LM, a con-
venient implementation is to first build a decoded-
tree forest and then to pick out the best tree using a
trigram-based forest-ranking algorithm as described
in (Langkilde, 2000). The ranker uses two leftmost
and rightmost leaf words to efficiently calculate the
trigram probability of a subtree, and finds the most
plausible tree according to the trigram and the rule
probabilities. This algorithm finds the optimal tree
in terms of the model probability — but it is not
practical when the vocabulary size and the rule size
grow. The next section describes how to make it
practical.
</bodyText>
<sectionHeader confidence="0.996278" genericHeader="method">
5 Pruning
</sectionHeader>
<bodyText confidence="0.99491">
We use our decoder for Chinese-English translation
in a general news domain. The TM becomes very
huge for such a domain. In our experiment (see Sec-
tion 6 for details), there are about 4M non-zero en-
tries in the trained table. About 10K CFG
rules are used in the parsed corpus of English, which
results in about 120K non-lexical rules for the de-
coding grammar (after we expand the CFG rules as
described in Section 4). We applied the simple al-
gorithm from Section 4, but this experiment failed
— no complete translations were produced. Even
four-word sentences could not be decoded. This is
not only because the model size is huge, but also be-
cause the decoder considers multiple syntactic struc-
tures for the same word alignment, i.e., there are
several different decoded trees even when the trans-
lation of the sentence is the same. We then applied
the following measures to achieve practical decod-
ing. The basic idea is to use additional statistics from
the training corpus.
beam search: We give up optimal decoding
by using a standard dynamic-programming parser
with beam search, which is similar to the parser
used in (Collins, 1999). A standard dynamic-
programming parser builds upnonterminal, input-
substring tuples from bottom-up according to the
grammar rules. When the parsing cost3 comes only
from the features within a subtree (TM cost, in our
case), the parser will find the optimal tree by keep-
ing the single best subtree for each tuple. When the
cost depends on the features outside of a subtree,
we need to keep all the subtrees for possible differ-
ent outside features (boundary words for the trigram
LM cost) to obtain the optimal tree. Instead of keep-
ing all the subtrees, we only retain subtrees within a
beam width for each input-substring. Since the out-
side features are not considered for the beam prun-
ing, the optimality of the parse is not guaranteed, but
the required memory size is reduced.
t-table pruning: Given a foreign (Chinese) sen-
tence to the decoder, we only consider English
wordsfor each foreign word such that P is
high. In addition, only limited part-of-speech labels
are considered to reduce the number of possible
decoded-tree structures. Thus we only use the top-5
(,) pairs ranked by
</bodyText>
<equation confidence="0.993699">
P P P P P
P P P
</equation>
<bodyText confidence="0.6468494">
Notice that P is a model parameter, and that
Pand P are obtained from the parsed training
corpus.
phrase pruning: We only consider limited pairs
(
</bodyText>
<figure confidence="0.785946444444444">
3rule-cost = (rule-probability)
kare ha
ongaku wo kiku no ga suki da
2
2
1
1 3 2
1
, ) for phrasal translation (see
</figure>
<bodyText confidence="0.998659704545455">
Section 2). The pair must appear more than once in
the Viterbi alignments4 of the training corpus. Then
we use the top-10 pairs ranked similarly to t-table
pruning above, except we replace PP with
P and use trigrams to estimate P . By this prun-
ing, we effectively remove junk phrase pairs, most of
which come from misaligned sentences or untrans-
lated phrases in the training corpus.
r-table pruning: To reduce the number of
rules for the decoding grammar, we use the
top-N rules ranked by PrulePreord so that
PrulePreord , where Pruleis
a prior probability of the rule (in the original En-
glish order) found in the parsed English corpus, and
Preordis the reordering probability in the TM. The
product is a rough estimate of how likely a rule is
used in decoding. Because only a limited number
of reorderings are used in actual translation, a small
number of rules are highly probable. In fact, among
a total of 138,662 reorder-expanded rules, the most
likely 875 rules contribute 95% of the probability
mass, so discarding the rules which contribute the
lower 5% of the probability mass efficiently elimi-
nates more than 99% of the total rules.
zero-fertility words: An English word may be
translated into a null (zero-length) foreign word.
This happens when the fertility , and such
English word(called a zero-fertility word) must be
inserted during the decoding. The decoding parser
is modified to allow inserting zero-fertility words,
but unlimited insertion easily blows up the memory
space. Therefore only limited insertion is allowed.
Observing the Viterbi alignments of the training cor-
pus, the top-20 frequent zero-fertility words5 cover
over 70% of the cases, thus only those are allowed
to be inserted. Also we use syntactic context to limit
the insertion. For example, a zero-fertility word in
is inserted as IN when “PP IN NP-A” rule is
applied. Again, observing the Viterbi alignments,
the top-20 frequent contexts cover over 60% of the
cases, so we allow insertions only in these contexts.
This kind of context sensitive insertion is possible
because the decoder builds a syntactic tree. Such se-
lective insertion by syntactic context is not easy for
</bodyText>
<footnote confidence="0.99683625">
4Viterbi alignment is the most probable word alignment ac-
cording to the trained TM tables.
5They are the, to, of, a, in, is, be, that, on, and, are, for, will,
with, have, it, ’s, has, i, and by.
</footnote>
<table confidence="0.99811375">
system P1/P2/P3/P4 LP BLEU
ibm4 36.6/11.7/4.6/1.6 0.959 0.072
syn 39.8/15.8/8.3/4.9 0.781 0.099
syn-nozf 40.6/15.3/8.1/5.3 0.797 0.102
</table>
<tableCaption confidence="0.9524395">
Table 1: Decoding performance
a word-for-word based IBM model decoder.
</tableCaption>
<bodyText confidence="0.999866666666667">
The pruning techniques shown above use extra
statistics from the training corpus, such as P,
P , and Prule. These statistics may be consid-
ered as a part of the LM P , and such syntactic
probabilities are essential when we mainly use tri-
grams for the LM. In this respect, the pruning is use-
ful not only for reducing the search space, but also
improving the quality of translation. We also use
statistics from the Viterbi alignments, such as the
phrase translation frequency and the zero-fertility
context frequency. These are statistics which are not
modeled in the TM. The frequency count is essen-
tially a joint probability P , while the TM uses
a conditional probability P . Utilizing statistics
outside of a model is an important idea for statis-
tical machine translation in general. For example,
a decoder in (Och and Ney, 2000) uses alignment
template statistics found in the Viterbi alignments.
</bodyText>
<sectionHeader confidence="0.996085" genericHeader="method">
6 Experimental Results: Chinese/English
</sectionHeader>
<bodyText confidence="0.999973945945946">
This section describes results from our experiment
using the decoder as described in the previous sec-
tion. We used a Chinese-English translation corpus
for the experiment. After discarding long sentences
(more than 20 words in English), the English side of
the corpus consisted of about 3M words, and it was
parsed with Collins’ parser (Collins, 1999). Train-
ing the TM took about 8 hours using a 54-node unix
cluster. We selected 347 short sentences (less than
14 words in the reference English translation) from
the held-out portion of the corpus, and they were
used for evaluation.
Table 1 shows the decoding performance for the
test sentences. The first system ibm4 is a reference
system, which is based on IBM Model4. The second
and the third (syn and syn-nozf) are our decoders.
Both used the same decoding algorithm and prun-
ing as described in the previous sections, except that
syn-nozf allowed no zero-fertility insertions. The
average decoding speed was about 100 seconds6 per
sentence for both syn and syn-nozf.
As an overall decoding performance measure, we
used the BLEU metric (Papineni et al., 2002). This
measure is a geometric average of n-gram accu-
racy, adjusted by a length penalty factor LP.7 The
n-gram accuracy (in percentage) is shown in Table 1
as P1/P2/P3/P4 for unigram/bigram/trigram/4-gram.
Overall, our decoder performed better than the IBM
system, as indicated by the higher BLEU score. We
obtained better n-gram accuracy, but the lower LP
score penalized the overall score. Interestingly, the
system with no explicit zero-fertility word insertion
(syn-nozf) performed better than the one with zero-
fertility insertion (syn). It seems that most zero-
fertility words were already included in the phrasal
translations, and the explicit zero-fertility word in-
sertion produced more garbage than expected words.
</bodyText>
<table confidence="0.8885555">
system Coverage
r95 92/92
r98 47/92
r100 20/92
</table>
<tableCaption confidence="0.994648">
Table 2: Effect of pruning
</tableCaption>
<bodyText confidence="0.999800277777778">
To verify that the pruning was effective, we re-
laxed the pruning threshold and checked the decod-
ing coverage for the first 92 sentences of the test
data. Table 2 shows the result. On the left, the
r-table pruning was relaxed from the 95% level to
98% or 100%. On the right, the t-table pruning was
relaxed from the top-5 (,) pairs to the top-10 or
top-20 pairs. The system r95 and w5 are identical
to syn-nozf in Table 1.
When r-table pruning was relaxed from 95% to
98%, only about half (47/92) of the test sentences
were decoded, others were aborted due to lack of
memory. When it was further relaxed to 100% (i.e.,
no pruning was done), only 20 sentences were de-
coded. Similarly, when the t-table pruning threshold
was relaxed, fewer sentences could be decoded due
to the memory limitations.
Although our decoder performed better than the
</bodyText>
<footnote confidence="0.992387666666667">
6Using a single-CPU 800Mhz Pentium III unix system with
1GB memory.
7BLEU LP. LP
</footnote>
<bodyText confidence="0.967842548387097">
if , and LP if , where , ,
is the system output length, andis the reference length.
IBM system in the BLEU score, the obtained gain
was less than what we expected. We have thought
the following three reasons. First, the syntax of Chi-
nese is not extremely different from English, com-
pared with other languages such as Japanese or Ara-
bic. Therefore, the TM could not take advantage
of syntactic reordering operations. Second, our de-
coder looks for a decoded tree, not just for a de-
coded sentence. Thus, the search space is larger than
IBM models, which might lead to more search errors
caused by pruning. Third, the LM used for our sys-
tem was exactly the same as the LM used by the IBM
system. Decoding performance might be heavily in-
fluenced by LM performance. In addition, since the
TM assumes an English parse tree as input, a trigram
LM might not be appropriate. We will discuss this
point in the next section.
Phrasal translation worked pretty well. Figure 3
shows the top-20 frequent phrase translations ob-
served in the Viterbi alignment. The leftmost col-
umn shows how many times they appeared. Most of
them are correct. It even detected frequent sentence-
to-sentence translations, since we only imposed a
relative length limit for phrasal translations (Sec-
tion 3). However, some of them, such as the one with
(in cantonese), are wrong. We expected that these
junk phrases could be eliminated by phrase pruning
(Section 5), however the junk phrases present many
times in the corpus were not effectively filtered out.
</bodyText>
<sectionHeader confidence="0.987069" genericHeader="method">
7 Decoded Trees
</sectionHeader>
<bodyText confidence="0.9998295625">
The BLEU score measures the quality of the decoder
output sentences. We were also interested in the syn-
tactic structure of the decoded trees. The leftmost
tree in Figure 4 is a decoded tree from the syn-nozf
system. Surprisingly, even though the decoded sen-
tence is passable English, the tree structure is totally
unnatural. We assumed that a good parse tree gives
high trigram probabilities. But it seems a bad parse
tree may give good trigram probabilities too. We
also noticed that too many unary rules (e.g. “NPB
PRN”) were used. This is because the reordering
probability is always 1.
To remedy this, we added CFG probabilities
(PCFG) in the decoder search, i.e., it now looks for a
tree which maximizes PtrigramPcfgPTM. The
CFG probability was obtained by counting the rule
</bodyText>
<figure confidence="0.99804225">
system Coverage
w5 92/92
w10 89/92
w20 69/92
</figure>
<figureCaption confidence="0.999915">
Figure 3: Top-20 frequent phrase translations in the Viterbi alignment
</figureCaption>
<bodyText confidence="0.999963">
frequency in the parsed English side of the train-
ing corpus. The middle of Figure 4 is the output
for the same sentence. The syntactic structure now
looks better, but we found three problems. First, the
BLEU score is worse (0.078). Second, the decoded
trees seem to prefer noun phrases. In many trees, an
entire sentence was decoded as a large noun phrase.
Third, it uses more frequent node reordering than it
should.
The BLEU score may go down because we
weighed the LM (trigram and PCFG) more than the
TM. For the problem of too many noun phrases, we
thought it was a problem with the corpus. Our train-
ing corpus contained many dictionary entries, and
the parliament transcripts also included a list of par-
ticipants’ names. This may cause the LM to prefer
noun phrases too much. Also our corpus contains
noise. There are two types of noise. One is sentence
alignment error, and the other is English parse error.
The corpus was sentence aligned by automatic soft-
ware, so it has some bad alignments. When a sen-
tence was misaligned, or the parse was wrong, the
Viterbi alignment becomes an over-reordered tree as
it picks up plausible translation word pairs first and
reorders trees to fit them.
To see if it was really a corpus problem, we se-
lected a good portion of the corpus and re-trained
the r-table. To find good pairs of sentences in the
corpus, we used the following: 1) Both English and
Chinese sentences end with a period. 2) The En-
glish word is capitalized at the beginning. 3) The
sentences do not contain symbol characters, such as
colon, dash etc, which tend to cause parse errors. 4)
The Viterbi-ratio8 is more than the average of the
pairs which satisfied the first three conditions.
Using the selected sentence pairs, we retrained
only the r-table and the PCFG. The rightmost tree
in Figure 4 is the decoded tree using the re-trained
TM. The BLEU score was improved (0.085), and
the tree structure looks better, though there are still
problems. An obvious problem is that the goodness
of syntactic structure depends on the lexical choices.
For example, the best syntactic structure is different
if a verb requires a noun phrase as object than it is
if it does not. The PCFG-based LM does not handle
this.
At this point, we gave up using the PCFG as a
component of the LM. Using only trigrams obtains
the best result for the BLEU score. However, the
BLEU metric may not be affected by the syntac-
tic aspect of translation quality, and as we saw in
Figure 4, we can improve the syntactic quality by
introducing the PCFG using some corpus selection
techniques. Also, the pruning methods described in
Section 5 use syntactic statistics from the training
corpus. Therefore, we are now investigating more
sophisticated LMs such as (Charniak, 2001) which
</bodyText>
<footnote confidence="0.808498">
8Viterbi-ratio is the ratio of the probability of the most plau-
sible alignment with the sum of the probabilities of all the align-
ments. Low Viterbi-ratio is a good indicator of misalignment or
parse error.
</footnote>
<note confidence="0.763143">
NP
</note>
<figureCaption confidence="0.999761666666667">
Figure 4: Effect of PCFG and re-training: No CFG probability (PCFG) was used (left). PCFG was used for
the search (middle). The r-table was re-trained and PCFG was used (right). Each tree was back reordered
and is shown in the English order.
</figureCaption>
<figure confidence="0.998535844444444">
PRN
VP
NP−A
VP
S
VBD
PRP
NNS
NNS
DT JJ
VBG
JJ
PP
NNS
NNS DT NN VBD
PRP VBD DT NNS MD VB X JJ NNS
S
S
NPB PRN
VP−A
S
VP
NP−A
NP−A
NP−A
VP
NPB X
NPB
NPB
NPB
ADJP
NPB
NPB
NPB
NPB
NPB NPB NPB
reporters declaring the
major contents
he briefed the reporters should declare major contents
he
briefed
NPB
PRN
S
major contents such statement briefed reporters from others
</figure>
<bodyText confidence="0.8652625">
incorporate syntactic features and lexical informa-
tion.
</bodyText>
<sectionHeader confidence="0.995937" genericHeader="conclusions">
8 Conclusion
</sectionHeader>
<bodyText confidence="0.999976470588235">
We have presented a decoding algorithm for a
syntax-based statistical machine translation. The
translation model was extended to incorporate
phrasal translations. Because the input of the chan-
nel model is an English parse tree, the decoding al-
gorithm is based on conventional syntactic parsing,
and the grammar is expanded by the channel oper-
ations of the TM. As the model size becomes huge
in a practical setting, and the decoder considers mul-
tiple syntactic structures for a word alignment, effi-
cient pruning is necessary. We applied several prun-
ing techniques and obtained good decoding quality
and coverage. The choice of the LM is an impor-
tant issue in implementing a decoder for the syntax-
based TM. At present, the best result is obtained by
using trigrams, but a more sophisticated LM seems
promising.
</bodyText>
<sectionHeader confidence="0.998845" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9957155">
This work was supported by DARPA-ITO grant
N66001-00-1-9814.
</bodyText>
<sectionHeader confidence="0.999" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999014181818182">
H. Alshawi, S. Bangalore, and S. Douglas. 2000. Learn-
ing dependency translation models as collections of fi-
nite state head transducers. Computational Linguis-
tics, 26(1).
A. Berger, P. Brown, S. Della Pietra, V. Della Pietra,
J. Gillett, J. Lafferty, R. Mercer, H. Printz, and L. Ures.
1996. Language Translation Apparatus and Method
Using Context-Based Translation Models. U.S. Patent
5,510,981.
P. Brown, S. Della Pietra, V. Della Pietra, and R. Mercer.
1993. The mathematics of statistical machine trans-
lation: Parameter estimation. Computational Linguis-
tics, 19(2).
E. Charniak. 2001. Immediate-head parsing for language
models. In ACL-01.
M. Collins. 1999. Head-Driven Statistical Models for
Natural Language Parsing. Ph.D. thesis, University
of Pennsylvania.
I. Langkilde. 2000. Forest-based statistical sentence gen-
eration. In NAACL-00.
F. Och and H. Ney. 2000. Improved statistical alignment
models. In ACL-2000.
K. Papineni, S. Roukos, T. Ward, and W. Zhu. 2002.
BLEU: a method for automatic evaluation of machine
translation. In ACL-02.
D. Wu. 1997. Stochastic inversion transduction gram-
mars and bilingual parsing of parallel corpora. Com-
putational Linguistics, 23(3).
K. Yamada and K. Knight. 2001. A syntax-based statis-
tical translation model. In ACL-01.
K. Yamada. 2002. A Syntax-Based Statistical Transla-
tion Model. Ph.D. thesis, University of Southern Cali-
fornia.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.852232">
<note confidence="0.995031">Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics (ACL), Philadelphia, July 2002, pp. 303-310.</note>
<title confidence="0.869927">A Decoder for Syntax-based Statistical MT</title>
<author confidence="0.995713">Yamada Knight</author>
<affiliation confidence="0.998679">Information Sciences Institute University of Southern California</affiliation>
<address confidence="0.997738">4676 Admiralty Way, Suite 1001 Marina del Rey, CA 90292</address>
<email confidence="0.999404">kyamada,knight@isi.edu</email>
<abstract confidence="0.9997402">This paper describes a decoding algorithm for a syntax-based translation model (Yamada and Knight, 2001). The model has been extended to incorporate phrasal translations as presented here. In contrast to a conventional word-to-word statistical model, a decoder for the syntaxbased model builds up an English parse tree given a sentence in a foreign language. As the model size becomes huge in a practical setting, and the decoder considers multiple syntactic structures for each word alignment, several pruning techniques are necessary. We tested our decoder in a Chinese-to-English translation system, and obtained better results than IBM Model 4. We also discuss issues concerning the relation between this decoder and a language model.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>H Alshawi</author>
<author>S Bangalore</author>
<author>S Douglas</author>
</authors>
<title>Learning dependency translation models as collections of finite state head transducers.</title>
<date>2000</date>
<journal>Computational Linguistics,</journal>
<volume>26</volume>
<issue>1</issue>
<contexts>
<context position="2479" citStr="Alshawi et al., 2000" startWordPosition="394" endWordPosition="397">arch was described in (Berger et al., 1996). Recently (Yamada and Knight, 2001) introduced a syntax-based TM which utilized syntactic structure in the channel input, and showed that it could outperform the IBM model in alignment quality. In contrast to the IBM models, which are word-to-word models, the syntax-based model works on a syntactic parse tree, so the decoder builds up an English parse tree given a sentencein a foreign language. This paper describes an algorithm for such a decoder, and reports experimental results. Other statistical machine translation systems such as (Wu, 1997) and (Alshawi et al., 2000) also produce a tree given a sentence. Their models are based on mechanisms that generate two languages at the same time, so an English tree is obtained as a subproduct of parsing. However, their use of the LM is not mathematically motivated, since their models do not decompose into P and unlike the noisy channel model. Section 2 briefly reviews the syntax-based TM, and Section 3 describes phrasal translation as an extension. Section 4 presents the basic idea for decoding. As in other statistical machine translation systems, the decoder has to cope with a huge search sentence that maximizes P </context>
</contexts>
<marker>Alshawi, Bangalore, Douglas, 2000</marker>
<rawString>H. Alshawi, S. Bangalore, and S. Douglas. 2000. Learning dependency translation models as collections of finite state head transducers. Computational Linguistics, 26(1).</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Berger</author>
<author>P Brown</author>
<author>S Della Pietra</author>
<author>V Della Pietra</author>
<author>J Gillett</author>
<author>J Lafferty</author>
<author>R Mercer</author>
<author>H Printz</author>
<author>L Ures</author>
</authors>
<title>Language Translation Apparatus and Method Using Context-Based Translation Models.</title>
<date>1996</date>
<tech>U.S. Patent 5,510,981.</tech>
<contexts>
<context position="1901" citStr="Berger et al., 1996" startWordPosition="301" endWordPosition="304">or a system which translates from a foreign language to English, the LM gives a prior probability P and the TM gives a channel translation probability P . These models are automatically trained using monolingual (for the LM) and bilingual (for the TM) corpora. A decoder then finds the best English sentence given a foreign are not simple probability tables but are parameterized models, a decoder must conduct a search over the space defined by the models. For the IBM models defined by a pioneering paper (Brown et al., 1993), a decoding algorithm based on a left-to-right search was described in (Berger et al., 1996). Recently (Yamada and Knight, 2001) introduced a syntax-based TM which utilized syntactic structure in the channel input, and showed that it could outperform the IBM model in alignment quality. In contrast to the IBM models, which are word-to-word models, the syntax-based model works on a syntactic parse tree, so the decoder builds up an English parse tree given a sentencein a foreign language. This paper describes an algorithm for such a decoder, and reports experimental results. Other statistical machine translation systems such as (Wu, 1997) and (Alshawi et al., 2000) also produce a tree g</context>
</contexts>
<marker>Berger, Brown, Pietra, Pietra, Gillett, Lafferty, Mercer, Printz, Ures, 1996</marker>
<rawString>A. Berger, P. Brown, S. Della Pietra, V. Della Pietra, J. Gillett, J. Lafferty, R. Mercer, H. Printz, and L. Ures. 1996. Language Translation Apparatus and Method Using Context-Based Translation Models. U.S. Patent 5,510,981.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Brown</author>
<author>S Della Pietra</author>
<author>V Della Pietra</author>
<author>R Mercer</author>
</authors>
<title>The mathematics of statistical machine translation: Parameter estimation.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<volume>19</volume>
<issue>2</issue>
<contexts>
<context position="1808" citStr="Brown et al., 1993" startWordPosition="285" endWordPosition="288">sists of three components: a language model (LM), a translation model (TM), and a decoder. For a system which translates from a foreign language to English, the LM gives a prior probability P and the TM gives a channel translation probability P . These models are automatically trained using monolingual (for the LM) and bilingual (for the TM) corpora. A decoder then finds the best English sentence given a foreign are not simple probability tables but are parameterized models, a decoder must conduct a search over the space defined by the models. For the IBM models defined by a pioneering paper (Brown et al., 1993), a decoding algorithm based on a left-to-right search was described in (Berger et al., 1996). Recently (Yamada and Knight, 2001) introduced a syntax-based TM which utilized syntactic structure in the channel input, and showed that it could outperform the IBM model in alignment quality. In contrast to the IBM models, which are word-to-word models, the syntax-based model works on a syntactic parse tree, so the decoder builds up an English parse tree given a sentencein a foreign language. This paper describes an algorithm for such a decoder, and reports experimental results. Other statistical ma</context>
</contexts>
<marker>Brown, Pietra, Pietra, Mercer, 1993</marker>
<rawString>P. Brown, S. Della Pietra, V. Della Pietra, and R. Mercer. 1993. The mathematics of statistical machine translation: Parameter estimation. Computational Linguistics, 19(2).</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Charniak</author>
</authors>
<title>Immediate-head parsing for language models.</title>
<date>2001</date>
<booktitle>In ACL-01.</booktitle>
<contexts>
<context position="24655" citStr="Charniak, 2001" startWordPosition="4213" endWordPosition="4214">se as object than it is if it does not. The PCFG-based LM does not handle this. At this point, we gave up using the PCFG as a component of the LM. Using only trigrams obtains the best result for the BLEU score. However, the BLEU metric may not be affected by the syntactic aspect of translation quality, and as we saw in Figure 4, we can improve the syntactic quality by introducing the PCFG using some corpus selection techniques. Also, the pruning methods described in Section 5 use syntactic statistics from the training corpus. Therefore, we are now investigating more sophisticated LMs such as (Charniak, 2001) which 8Viterbi-ratio is the ratio of the probability of the most plausible alignment with the sum of the probabilities of all the alignments. Low Viterbi-ratio is a good indicator of misalignment or parse error. NP Figure 4: Effect of PCFG and re-training: No CFG probability (PCFG) was used (left). PCFG was used for the search (middle). The r-table was re-trained and PCFG was used (right). Each tree was back reordered and is shown in the English order. PRN VP NP−A VP S VBD PRP NNS NNS DT JJ VBG JJ PP NNS NNS DT NN VBD PRP VBD DT NNS MD VB X JJ NNS S S NPB PRN VP−A S VP NP−A NP−A NP−A VP NPB X</context>
</contexts>
<marker>Charniak, 2001</marker>
<rawString>E. Charniak. 2001. Immediate-head parsing for language models. In ACL-01.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Collins</author>
</authors>
<title>Head-Driven Statistical Models for Natural Language Parsing.</title>
<date>1999</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="11767" citStr="Collins, 1999" startWordPosition="2025" endWordPosition="2026">ere produced. Even four-word sentences could not be decoded. This is not only because the model size is huge, but also because the decoder considers multiple syntactic structures for the same word alignment, i.e., there are several different decoded trees even when the translation of the sentence is the same. We then applied the following measures to achieve practical decoding. The basic idea is to use additional statistics from the training corpus. beam search: We give up optimal decoding by using a standard dynamic-programming parser with beam search, which is similar to the parser used in (Collins, 1999). A standard dynamicprogramming parser builds upnonterminal, inputsubstring tuples from bottom-up according to the grammar rules. When the parsing cost3 comes only from the features within a subtree (TM cost, in our case), the parser will find the optimal tree by keeping the single best subtree for each tuple. When the cost depends on the features outside of a subtree, we need to keep all the subtrees for possible different outside features (boundary words for the trigram LM cost) to obtain the optimal tree. Instead of keeping all the subtrees, we only retain subtrees within a beam width for e</context>
<context position="16986" citStr="Collins, 1999" startWordPosition="2903" endWordPosition="2904">Utilizing statistics outside of a model is an important idea for statistical machine translation in general. For example, a decoder in (Och and Ney, 2000) uses alignment template statistics found in the Viterbi alignments. 6 Experimental Results: Chinese/English This section describes results from our experiment using the decoder as described in the previous section. We used a Chinese-English translation corpus for the experiment. After discarding long sentences (more than 20 words in English), the English side of the corpus consisted of about 3M words, and it was parsed with Collins’ parser (Collins, 1999). Training the TM took about 8 hours using a 54-node unix cluster. We selected 347 short sentences (less than 14 words in the reference English translation) from the held-out portion of the corpus, and they were used for evaluation. Table 1 shows the decoding performance for the test sentences. The first system ibm4 is a reference system, which is based on IBM Model4. The second and the third (syn and syn-nozf) are our decoders. Both used the same decoding algorithm and pruning as described in the previous sections, except that syn-nozf allowed no zero-fertility insertions. The average decodin</context>
</contexts>
<marker>Collins, 1999</marker>
<rawString>M. Collins. 1999. Head-Driven Statistical Models for Natural Language Parsing. Ph.D. thesis, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Langkilde</author>
</authors>
<title>Forest-based statistical sentence generation.</title>
<date>2000</date>
<booktitle>In NAACL-00.</booktitle>
<contexts>
<context position="10216" citStr="Langkilde, 2000" startWordPosition="1760" endWordPosition="1761"> pairs of English parse trees and foreign sentences. Figure 2: Decoded Tree with the rules in the decoded tree) is the highest. The use of an LM needs consideration. Theoretically we need an LM which gives the prior probability of an English parse tree. However, we can approximate it with an n-gram LM, which is wellstudied and widely implemented. We will discuss this point later in Section 7. If we use a trigram model for the LM, a convenient implementation is to first build a decodedtree forest and then to pick out the best tree using a trigram-based forest-ranking algorithm as described in (Langkilde, 2000). The ranker uses two leftmost and rightmost leaf words to efficiently calculate the trigram probability of a subtree, and finds the most plausible tree according to the trigram and the rule probabilities. This algorithm finds the optimal tree in terms of the model probability — but it is not practical when the vocabulary size and the rule size grow. The next section describes how to make it practical. 5 Pruning We use our decoder for Chinese-English translation in a general news domain. The TM becomes very huge for such a domain. In our experiment (see Section 6 for details), there are about </context>
</contexts>
<marker>Langkilde, 2000</marker>
<rawString>I. Langkilde. 2000. Forest-based statistical sentence generation. In NAACL-00.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Och</author>
<author>H Ney</author>
</authors>
<title>Improved statistical alignment models.</title>
<date>2000</date>
<booktitle>In ACL-2000.</booktitle>
<contexts>
<context position="16526" citStr="Och and Ney, 2000" startWordPosition="2832" endWordPosition="2835">l when we mainly use trigrams for the LM. In this respect, the pruning is useful not only for reducing the search space, but also improving the quality of translation. We also use statistics from the Viterbi alignments, such as the phrase translation frequency and the zero-fertility context frequency. These are statistics which are not modeled in the TM. The frequency count is essentially a joint probability P , while the TM uses a conditional probability P . Utilizing statistics outside of a model is an important idea for statistical machine translation in general. For example, a decoder in (Och and Ney, 2000) uses alignment template statistics found in the Viterbi alignments. 6 Experimental Results: Chinese/English This section describes results from our experiment using the decoder as described in the previous section. We used a Chinese-English translation corpus for the experiment. After discarding long sentences (more than 20 words in English), the English side of the corpus consisted of about 3M words, and it was parsed with Collins’ parser (Collins, 1999). Training the TM took about 8 hours using a 54-node unix cluster. We selected 347 short sentences (less than 14 words in the reference Engl</context>
</contexts>
<marker>Och, Ney, 2000</marker>
<rawString>F. Och and H. Ney. 2000. Improved statistical alignment models. In ACL-2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Papineni</author>
<author>S Roukos</author>
<author>T Ward</author>
<author>W Zhu</author>
</authors>
<title>BLEU: a method for automatic evaluation of machine translation.</title>
<date>2002</date>
<booktitle>In ACL-02.</booktitle>
<contexts>
<context position="17748" citStr="Papineni et al., 2002" startWordPosition="3028" endWordPosition="3031">ish translation) from the held-out portion of the corpus, and they were used for evaluation. Table 1 shows the decoding performance for the test sentences. The first system ibm4 is a reference system, which is based on IBM Model4. The second and the third (syn and syn-nozf) are our decoders. Both used the same decoding algorithm and pruning as described in the previous sections, except that syn-nozf allowed no zero-fertility insertions. The average decoding speed was about 100 seconds6 per sentence for both syn and syn-nozf. As an overall decoding performance measure, we used the BLEU metric (Papineni et al., 2002). This measure is a geometric average of n-gram accuracy, adjusted by a length penalty factor LP.7 The n-gram accuracy (in percentage) is shown in Table 1 as P1/P2/P3/P4 for unigram/bigram/trigram/4-gram. Overall, our decoder performed better than the IBM system, as indicated by the higher BLEU score. We obtained better n-gram accuracy, but the lower LP score penalized the overall score. Interestingly, the system with no explicit zero-fertility word insertion (syn-nozf) performed better than the one with zerofertility insertion (syn). It seems that most zerofertility words were already include</context>
</contexts>
<marker>Papineni, Roukos, Ward, Zhu, 2002</marker>
<rawString>K. Papineni, S. Roukos, T. Ward, and W. Zhu. 2002. BLEU: a method for automatic evaluation of machine translation. In ACL-02.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Wu</author>
</authors>
<title>Stochastic inversion transduction grammars and bilingual parsing of parallel corpora.</title>
<date>1997</date>
<journal>Computational Linguistics,</journal>
<volume>23</volume>
<issue>3</issue>
<contexts>
<context position="2452" citStr="Wu, 1997" startWordPosition="391" endWordPosition="392">eft-to-right search was described in (Berger et al., 1996). Recently (Yamada and Knight, 2001) introduced a syntax-based TM which utilized syntactic structure in the channel input, and showed that it could outperform the IBM model in alignment quality. In contrast to the IBM models, which are word-to-word models, the syntax-based model works on a syntactic parse tree, so the decoder builds up an English parse tree given a sentencein a foreign language. This paper describes an algorithm for such a decoder, and reports experimental results. Other statistical machine translation systems such as (Wu, 1997) and (Alshawi et al., 2000) also produce a tree given a sentence. Their models are based on mechanisms that generate two languages at the same time, so an English tree is obtained as a subproduct of parsing. However, their use of the LM is not mathematically motivated, since their models do not decompose into P and unlike the noisy channel model. Section 2 briefly reviews the syntax-based TM, and Section 3 describes phrasal translation as an extension. Section 4 presents the basic idea for decoding. As in other statistical machine translation systems, the decoder has to cope with a huge search</context>
</contexts>
<marker>Wu, 1997</marker>
<rawString>D. Wu. 1997. Stochastic inversion transduction grammars and bilingual parsing of parallel corpora. Computational Linguistics, 23(3).</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Yamada</author>
<author>K Knight</author>
</authors>
<title>A syntax-based statistical translation model.</title>
<date>2001</date>
<booktitle>In ACL-01.</booktitle>
<contexts>
<context position="1937" citStr="Yamada and Knight, 2001" startWordPosition="306" endWordPosition="310">m a foreign language to English, the LM gives a prior probability P and the TM gives a channel translation probability P . These models are automatically trained using monolingual (for the LM) and bilingual (for the TM) corpora. A decoder then finds the best English sentence given a foreign are not simple probability tables but are parameterized models, a decoder must conduct a search over the space defined by the models. For the IBM models defined by a pioneering paper (Brown et al., 1993), a decoding algorithm based on a left-to-right search was described in (Berger et al., 1996). Recently (Yamada and Knight, 2001) introduced a syntax-based TM which utilized syntactic structure in the channel input, and showed that it could outperform the IBM model in alignment quality. In contrast to the IBM models, which are word-to-word models, the syntax-based model works on a syntactic parse tree, so the decoder builds up an English parse tree given a sentencein a foreign language. This paper describes an algorithm for such a decoder, and reports experimental results. Other statistical machine translation systems such as (Wu, 1997) and (Alshawi et al., 2000) also produce a tree given a sentence. Their models are ba</context>
<context position="3466" citStr="Yamada and Knight, 2001" startWordPosition="564" endWordPosition="567">d TM, and Section 3 describes phrasal translation as an extension. Section 4 presents the basic idea for decoding. As in other statistical machine translation systems, the decoder has to cope with a huge search sentence that maximizes P , which also maximizes P according to Bayes’ rule. A different decoder is needed for different choices of LM and TM. Since P and P space. Section 5 describes how to prune the search space for practical decoding. Section 6 shows experimental results. Section 7 discusses LM issues, and is followed by conclusions. 2 Syntax-based TM The syntax-based TM defined by (Yamada and Knight, 2001) assumes an English parse tree as a channel input. The channel applies three kinds of stochastic operations on each node : reordering children nodes (), inserting an optional extra word to the left or right of the node (), and translating leaf words ().1 These operations are independent of each other and are conditioned on the features ( , , ) of the node. Figure 1 shows an example. The child node sequence of the top node VB is reordered from PRP-VB1-VB2 into PRP-VB2-VB1 as seen in the second tree (Reordered). An extra word ha is inserted at the leftmost node PRP as seen in the third tree (Ins</context>
<context position="6111" citStr="Yamada and Knight, 2001" startWordPosition="1025" endWordPosition="1028">loped with an English parser alone. The conditioning features ( , , ) can be anything that is available on a tree, however they should be carefully selected not to cause datasparseness problems. Also, the choice of features may affect the decoding algorithm. In our experiment, a sequence of the child node label was used for , a pair of the node label and the parent label was used for , and the identity of the English word is used for. For example, PPRP-VB2-VB1PRP-VB1-VB2 for the top node in Figure 1. Similarly for the node PRP, Pright, haVB-PRPand Pkarehe. More detailed examples are found in (Yamada and Knight, 2001). 3 Phrasal Translation In (Yamada and Knight, 2001), the translationis a 1-to-1 lexical translation from an English wordto a foreign word, i.e., . To allow non 1-to-1 translation, such as for idiomatic phrases or compound nouns, we extend the model as follows. First we use fertility as used in IBM models to allow 1-to-N mapping. For N-to-N mapping, we allow direct translation of an English phrase to a foreign phrase at non-terminal tree nodes as and linearly mix this phrasal translation with the word-to-word translation, i.e., P P P ifis terminal P otherwise 1. Channel Input 2. Reordered VB P</context>
</contexts>
<marker>Yamada, Knight, 2001</marker>
<rawString>K. Yamada and K. Knight. 2001. A syntax-based statistical translation model. In ACL-01.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Yamada</author>
</authors>
<title>A Syntax-Based Statistical Translation Model.</title>
<date>2002</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Southern California.</institution>
<contexts>
<context position="7257" citStr="Yamada, 2002" startWordPosition="1233" endWordPosition="1235"> P P P ifis terminal P otherwise 1. Channel Input 2. Reordered VB PRP VB1 VB2 VB TO TO NN VB NN TO PRP TO VB2 VB VB1 VB PRP TO VB VB2 VB1 NN TO 4. Translated Figure 1: Channel Operations: Reorder, Insert, and Translate VB 3. Inserted kare ha ongaku wo kiku no ga daisuki desu 5. Channel Output PRP VB2 VB1 TO VB NN TO if is non-terminal. In practice, the phrase lengths (, ) are limited to reduce the model size. In our experiment (Section 5), we restricted them as , to avoid pairs of extremely different lengths. This formula was obtained by randomly sampling the length of translation pairs. See (Yamada, 2002) for details. 4 Decoding Our statistical MT system is based on the noisychannel model, so the decoder works in the reverse direction of the channel. Given a supposed channel output (e.g., a French or Chinese sentence), it will find the most plausible channel input (an English parse tree) based on the model parameters and the prior probability of the input. In the syntax-based model, the decoder’s task is to find the most plausible English parse tree given an observed foreign sentence. Since the task is to build a tree structure from a string of words, we can use a mechanism similar to normal p</context>
</contexts>
<marker>Yamada, 2002</marker>
<rawString>K. Yamada. 2002. A Syntax-Based Statistical Translation Model. Ph.D. thesis, University of Southern California.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>