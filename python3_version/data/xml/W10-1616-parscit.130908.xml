<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.009085">
<title confidence="0.9990675">
Computational Linguistics for helping Requirements Elicitation: a
dream about Automated Software Development
</title>
<author confidence="0.999665">
Carlos Mario Zapata J.
</author>
<affiliation confidence="0.878179">
Leader of the Computational Language Research Group, School of Sys-
tems, Mines Faculty, Universidad Nacional de Colombia
</affiliation>
<address confidence="0.827869">
Cra. 80 No. 65-223, of. M8A-310
Medellín, Colombia, South America
</address>
<email confidence="0.976667">
cmzapata@unal.edu.co
</email>
<sectionHeader confidence="0.995021" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9991554375">
Requirements elicitation is one of the first
processes of software development and it is
intended to be hand-made by means of ana-
lyst-stakeholder interviews. As a natural-
language-based activity, requirements elici-
tation can take advantages of Computational
Linguistics techniques, in order to achieve
better results looking for automation in this
field. In this paper we survey some of the
work related to software development au-
tomation, guided by Computational Linguis-
tics techniques, and performed by the Com-
putational Language Research Group from
the Universidad Nacional de Colombia. We
aim the definition of future trans-national
effort to be made in this research line.
</bodyText>
<sectionHeader confidence="0.998992" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9999871">
When stakeholders need to solve their information
problems, they commonly search for the develop-
ment of software applications (Pressman, 2005). At
the beginning of this process, a set of analyst-
stakeholder interviews take place, in order to cap-
ture the requirements belonging to the domain in
which future software application must work. After
that, in a hand-made process called “requirements
elicitation”, the analyst transforms the captured in-
formation into formal and semi-formal artifacts,
mostly diagrams. At this stage, software applica-
tion is specified by means of such diagrams (Leite,
1987).
Since interviews are the most used techniques
for collecting software requirements, they experi-
ment some of the most common problems of natu-
ral language (NL) communication: misunderstand-
ing, ambiguity, and lack of clarity (Christel and
Kang, 1992). However, as an NL-based process,
requirements elicitation can use some of the Com-
putational Linguistics (CL) and Natural Language
Processing (NLP) techniques, as a way to solve
such problems. The main goal of using CL and
NLP techniques in this particular problem is relat-
ed to the search for automation in the software de-
velopment process.
This is the strategy we (the Computational Lan-
guage Research Group—CLRG) choose to follow
for clarifying requirements elicitation process and,
therefore, for trying to automate the first phases of
software development process. In this paper, we
summarize some of the CLRG effort invested in
helping requirements elicitation process with most-
ly CL techniques, but searching for strong NLP
techniques, for instance, syntactical and discourse
parsers, and named entity recognition systems,
among others. We aim to show how we try to solve
our problems in this field (recognizing the exis-
tence of too much effort from other groups in the
world, but focusing on our own work), as a way to
motivate the definition of trans-national projects
searching for the same goals as us. Because our na-
tive language is Spanish, some of the examples we
provide in this paper are encoded in this language.
The structure of this paper is the following: in
section 2, we discuss our solutions to common
problems of requirements elicitation process; in
section 3 we propose some possible joint projects
in this field of knowledge; finally, in section 4 we
present conclusions and future work.
</bodyText>
<page confidence="0.972151">
117
</page>
<note confidence="0.444322">
Proceedings of the NAACL HLT 2010 Young Investigators Workshop on Computational Approaches to Languages of the Americas,
pages 117–124, Los Angeles, California, June 2010. c�2010 Association for Computational Linguistics
</note>
<sectionHeader confidence="0.545532" genericHeader="method">
2 Solutions to common problems of re-
quirements elicitation process
</sectionHeader>
<bodyText confidence="0.999222285714286">
Figure 1 gives us the overall software engineering
process envisioned by this research. This is a kind
of “big picture” about the way we are creating CL-
and NLP-based tools for helping automated soft-
ware development process. In the following sub-
sections, we discuss a more detailed view of every
tool.
</bodyText>
<subsectionHeader confidence="0.976972">
2.1 Pre-conceptual schemas
</subsectionHeader>
<bodyText confidence="0.9782813125">
The first gap we needed to bridge in this process
was related to the knowledge representation of re-
quirements. In this context, the UML (Unified
Modeling Language, OMG, 2010) is the de-facto
standard for representing requirements, but it is a
language directed to technical readers, and stake-
holders are not usually technical people. For this
reason, we explored the possibilities to use a
graphical language closer to the stakeholder dis-
course, and we created the pre-conceptual schemas
(Zapata, 2007) by adapting some previous effort
made by Sowa’s Conceptual Graphs (Sowa, 1984).
Figure 2 shows an example of the pre-conceptual
schemas, manually created by an analyst during the
software elicitation process of one software appli-
cation.
</bodyText>
<figureCaption confidence="0.99998">
Figure 1. Overall view of CL- and NLP-tools for automated software development.
Figure 2. An example of Pre-conceptual Schemas (Zapata, 2007).
</figureCaption>
<page confidence="0.9915">
118
</page>
<bodyText confidence="0.9998994">
Pre-conceptual schemas have provided a new
way to validate the stakeholder discourse, in order
to clarify and understand what stakeholder has to
say about the domain information related to the
software application to-be-made.
</bodyText>
<subsectionHeader confidence="0.9822275">
2.2 UN-Lencep: Specifying pre-conceptual
schemas
</subsectionHeader>
<bodyText confidence="0.926096142857143">
Pre-conceptual schemas gave us a new way to
communicate with stakeholders in the require-
ments elicitation process, but their usage was limit-
ed to analysts. However, if we are interested in cre-
ating a pre-conceptual schema, we need the in-
volvement of both kinds of actors in such action. In
this case, we need to communicate each other in an
NL-like way.
The solution to this problem came from two of
the several techniques from Computational Lin-
guistics: Information Extraction (IE) and Con-
trolled Languages. In first place, we use a set of
templates, in the same sense of IE templates, for
matching in a stakeholder discourse the same fea-
tures of a pre-conceptual schema. Then, we
constrained the NL discourse, and we created UN-
Lencep (Universidad Nacional de Colombia—
Lenguaje para la especificación de esquemas
preconceptuales, Zapata et al., 2008). By combin-
ing both techniques, we had the possibilities to cre-
ate a textual discourse in UN-Lencep. In the case
of the pre-conceptual schema in figure 2, the UN-
Lencep discourse could be something like this:
A pet belongs to an owner.
The pet has identification, name, and medical
history.
The medical history has a name and one detail.
The detail has a date, a diagnosis, and a
medicine.
When the owner requests an appointment, the
assistant assigns an appointment.
When the owner accomplishes the appoint-
ment, the veterinarian auscultates the pet.
When the veterinarian auscultates the pet, the
veterinarian registers the diagnosis.
When the veterinarian registers the diagnosis,
the veterinarian prescribes the medicine.
Note that UN-Lencep phrases can be made by
non-technical people, like stakeholders. The task of
capturing requirements is now under the responsi-
bilities of the analyst-stakeholder team, instead of
the analyst alone. Again, the UN-Lencep discourse
is manually created by the analyst with the help of
the stakeholder. We have developed a tool called
UNC-Diagrammer, for helping the software elicita-
tion process in creating UN-Lencep discourses and
pre-conceptual schemas. This tool has some mini-
mal NLP processing, because UN-Lencep is a tem-
plate-based controlled language.
</bodyText>
<subsectionHeader confidence="0.995251">
2.3 Dialog model
</subsectionHeader>
<bodyText confidence="0.999985612903226">
UN-Lencep and pre-conceptual schemas provided
the partial solution to our requirements capture
problems. However, the fact that requirements elic-
itation was initiated by a set of stakeholder-analyst
interviews reminded us the rest of the task. If we
could discover a way to obtain the UN-Lencep dis-
course from something like an interview, we could
link the beginning of the process to our partial so-
lution.
The answer, again, came from previous experi-
ences in Computational Linguistics. The work
made on dialog models provided us an environ-
ment to prove our hypothesis about stakeholder-an-
alyst interviews. We found some previous work on
dialog models related to train reservations, and we
employed it to discover the structure of dialog, as
sets of tagged utterances and turnovers. With these
ideas in mind, we propose a structure for require-
ments elicitation dialog (Zapata and Carmona, in
press), as shown in figure 3. We are, also, explor-
ing the close relationship between dialog models
for requirements elicitation and ontologies (Zapata
et al., in press).
We are currently working on some projects for
obtaining UN-Lencep discourses from a dialog
with the structure provided by figure 3. Also, we
are working in proving the utilities of such conver-
sion in order to diminish software costs and devel-
opment time in Latin-American software compa-
nies, and we select the COMPETISOFT model for
promoting such improvement.
</bodyText>
<subsectionHeader confidence="0.99002">
2.4 UNC-Corpus
</subsectionHeader>
<bodyText confidence="0.999963857142857">
Modeling is the center of requirements elicitation
activities. We need models to understand the struc-
ture, the behavior, and the interaction among the
concepts belonging to some domain. Traditionally,
analysts make models by using their own knowl-
edge and understanding of the world domain, in a
subjective way. But, is it possible to simulate such
</bodyText>
<page confidence="0.995942">
119
</page>
<bodyText confidence="0.9996585">
activity? How can we represent the knowledge ac-
quired about modeling by an analyst in creating
models? The work in Corpus Linguistics provided
us some useful ideas about these questions. A cor-
pus is a collection of proved uses of a language. If
we considered UML as a graphical modeling lan-
guage (but, finally, a language), we could gather
several “proved” uses of this language in the shape
of computationally readable files. We employed
these files to create UNC-Corpus (Zapata et al.,
2008), a UML-diagram corpus. Also, we used
UNC-Corpus for “completing” diagrams, as ana-
lysts actually does, by reviewing the contents of
the corpus as shown in figure 4.
</bodyText>
<figureCaption confidence="0.993193">
Figure 3. Requirements elicitation dialog model (Zapata and Carmona, in press).
</figureCaption>
<subsectionHeader confidence="0.741943">
2.5 AMV: a solution for conjugating and lem-
matizing Spanish verbs
</subsectionHeader>
<bodyText confidence="0.999960272727273">
Spanish is one of the most difficult languages for
tasks related to conjugate and lemmatize verbs.
Our language has a complex structure when we
need to use a verb.
CLRG have assumed these difficulties and, after
exploring state of the art in Spanish conjugators,
decided to create AMV (Analizador Morfológico
de Yerbos, Zapata y Mesa, 2009), an application
that recognize the internal structure of the vast ma-
jority of Spanish verbs. AMV can be shown in fig-
ure 5.
</bodyText>
<subsectionHeader confidence="0.966306">
2.6 Goals and problems
</subsectionHeader>
<bodyText confidence="0.999882766666667">
AMV gave us some insight about the structure of
Spanish verbs, so we could discover some differ-
ences about these verbs. For example, we discov-
ered state verbs, action verbs, and goal verbs. Goal
verbs are slightly different from the other kinds of
verbs, because they express activities with no dura-
tion, generally associated to states to be reached.
Three kinds of goal verbs can be identified: im-
provement, maintenance, and achievement verbs.
Goal verbs are not recognized by most of the peo-
ple, and their usage tends to be misunderstood
along the software development process.
CLRG devoted some effort to identify goal
verbs from NL discourses, and then represent them
into pre-conceptual schemas (Zapata et al., 2007).
For completing this task, we used previous work of
Antón (1997) for gathering some verbs in the
above mentioned categories, and then we em-
ployed a lexicon from Maryland University in or-
der to discover the internal linguistic features of
such verbs. With this information in hand, we in-
creased the number of available verbs for express-
ing goals. After that, we define a new set of sym-
bols to be used in pre-conceptual schemas for rep-
resenting goal verbs and then translating them into
goal diagrams (Lezcano, 2007). Figure 6 shows an
example of pre-conceptual schemas including goal
verbs.
We are currently exploring the relationships among
goals and problems. In our theory, problems are
</bodyText>
<page confidence="0.988964">
120
</page>
<bodyText confidence="0.9999135">
seen either as negative goals or obstacles for a goal
to be reached. So, we are trying to define a set of
structures for representing goals and another set for
representing problems. Also, we are defining some
rules for obtaining goal expressions from problem
sentences and viceversa. The first step of the pro-
cess was the state-of-the-art review of such struc-
tures (Zapata and Vargas, 2009), and we are deliv-
ering a Master’s Thesis with the structures and the
heuristic rules for proving such relationship.
</bodyText>
<figureCaption confidence="0.999989">
Figure 4. A snapshot of the use of UNC-Corpus (Zapata et al., 2008).
Figure 5. Snapshot of AMV (Zapata and Mesa, 2009).
</figureCaption>
<page confidence="0.9765">
121
</page>
<figureCaption confidence="0.992356">
Figure 6. An example of pre-conceptual schemas including goal verbs (Zapata et al., 2007)
</figureCaption>
<subsectionHeader confidence="0.711568">
2.7 Games for teaching
</subsectionHeader>
<bodyText confidence="0.999984333333333">
As a part of our research and teaching strategy, we
use games to show and reinforce some concepts
about our knowledge area. For example, we are
currently developing an on-line game—called
“Software Boulevard”—for understanding how
software industries make their intangible products.
In this game, we intend to simulate the real behav-
ior of this kind of companies, but making the ac-
tors answer questions about software development
process in several phases. Another example of our
strategy is “Requirements elicitation dialog game”
(Zapata and Giraldo, 2009), which is based on the
importance of dialog inside the software develop-
ment process. This game is like a word puzzle in
which players must fill in the blanks a set of words
previously acquired by answering questions related
to software development. The blanks are located
inside a simulated analyst-stakeholder interview
and also as parts of a pre-conceptual schema. The
main goal of the game is make conscious the play-
ers about the importance of good answers in re-
quirements elicitation, in order to adequately
“translate” the given information into diagrams
that consistently reflect such information.
</bodyText>
<subsectionHeader confidence="0.967764">
2.8 State-of-the-art Reviews
</subsectionHeader>
<bodyText confidence="0.999933">
The definition of several projects requires the ex-
tensive search for papers and journals related to the
topics we need to incorporate in the process. In ad-
dition to the mentioned review on goals and prob-
lems (Zapata and Vargas, 2009), we conducted
some other state-of-the-art reviews on Controlled
Languages (Zapata and Rosero, 2008), Dialog
Models (Zapata and Mesa, 2009b), and the Wiz-
ard-of-Oz experiment (Zapata and Carmona,
2007). Also, we made a review on Interlinguas
(Zapata and Benítez, 2009), and we are preparing
some other reviews on Computational Dialog and
Code Generation.
</bodyText>
<sectionHeader confidence="0.6186675" genericHeader="method">
3 Joint projects on requirements elicita-
tion and computational linguistics
</sectionHeader>
<bodyText confidence="0.999549625">
Our final goal—and probably “dream”—is the au-
tomation of software development process from
early stages related to speech discourses. We
strongly believe this goal is so big enough to be
reached by only one research group. We made now
some part of the task, but we need help to complete
it. For this reason, we want to create some trans-
national projects related to this field of knowledge
to be executed by several research groups in Latin
America, for example the Computation Research
Centre from the Instituto Politécnico Nacional in
Mexico, the Linguistic Engineering research group
from the Universidad Nacional Autónoma de Méx-
ico, the Working Group 2.9 (Software Require-
ments Engineering) from IFIP (International Fed-
eration for Information Processing), and the Hu-
</bodyText>
<page confidence="0.994741">
122
</page>
<bodyText confidence="0.99983693220339">
man-Computer Interaction Research Group from
the Pontificia Universidad Católica de Valparaíso.
We have contacts inside these research groups and
we are willing to initiate joint research projects re-
lated to Computational Linguistics and Require-
ments Engineering.
The first project in which we are concerned is
the use of technical documentation for require-
ments elicitation. In almost every organization in
the world, technical documents define the way
such organization must behave. If we were capable
to understand the surrounding information in these
documents, we could elicit many concepts to be
validated in the analyst-stakeholder interviews,
making too much work before the interviews take
place. In this project, we need groups with exper-
tise in analyzing and processing some kind of tech-
nical documents (for instance, technical reports,
law sentences, instructions, and so on).
The second project we need to propose have nat-
ural language speeching as the main issue. The
way a stakeholder-analyst interview is conducted
suggests that some expressions are repeated once
and again in the context of the dialog. These ex-
pressions are guidelines to gather important infor-
mation about the domain. In this case, we need
groups with larger experience in recording, retriev-
ing, and analyzing speech dialogs.
A computational corpus of stakeholder-analyst
interviews is the main product of the third project
we want to execute. Corpus linguistics can offer
many techniques for analyzing such corpus, in or-
der to discover meta-information about the process
of requirements elicitation by means of interviews.
The common uses of expressions can lead to pre-
dictive information concerning one domain. Con-
sequently, we need to gather as many recorded in-
terviews as we can, and research groups with this
kind of information.
Finally, games are needed for understanding and
simulating the entire process of requirements elici-
tation as a result from stakeholder-analyst inter-
views, and this is the goal of the fourth project we
need to propose. Our group has been using games
in the shape of teaching strategies and we plan to
keep using this strategy, because we think we are
successful on it. Here, we need research groups
with the intention to co-create and use games as
teaching strategies. Also, we need people with
some experience in evaluating the impact of games
as teaching strategies.
The above mentioned projects have some CL-
and NLP-based techniques as good offerings to
find a solution. Also, for achieving the goals of ev-
ery project, we need to interact with experts in
software elicitation process. We hope this cross-
functional and trans-national effort will give the
necessary tools to make true the dream about au-
tomation in software development process.
</bodyText>
<sectionHeader confidence="0.99617" genericHeader="conclusions">
4 Conclusions and future work
</sectionHeader>
<bodyText confidence="0.9978174375">
The Computational Language Research Group has
been developing some projects for helping require-
ments elicitation process by means of Computa-
tional Linguistics, and we shown some of this
work in this paper. We tried to summarize the most
important of our projects concerning this issue, be-
cause our aim is to propose and develop trans-na-
tional projects in searching for automated software
development.
The &amp;quot;big picture&amp;quot; of this work exhibits joint
projects for making requirements elicitation closer
to natural language dialog and speech. We look for
a dream in which software development will be a
simpler task, developed by common people by us-
ing natural language speeching interfaces.
Some work has still to be done:
</bodyText>
<listItem confidence="0.989407857142857">
• Eliciting requirements from technical docu-
ments belonging to an organization.
• Incorporating speech recognition to the re-
quirements elicitation.
• Building a computational corpus of analyst-
stakeholder interviews.
• Creating new games as teaching strategies for
</listItem>
<bodyText confidence="0.943022333333333">
understanding the entire requirements elicita-
tion process.
All of these projects are intended to be made by
trans-national groups with some concern about
software development process, computational lin-
guistics, and natural language processing.
</bodyText>
<sectionHeader confidence="0.959333" genericHeader="acknowledgments">
Acknowledgment
</sectionHeader>
<bodyText confidence="0.995736">
This work is founded by the Vicerrectoría de
Investigación from Universidad Nacional de
Colombia, under the project: “Software Boulevard
un juego de estrategia en Web para la enseñanza de
competencias de gestión en Ingeniería de
Software”, Project number 9766.
</bodyText>
<page confidence="0.99853">
123
</page>
<sectionHeader confidence="0.990085" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999633148648648">
Annie Ant6n. 1997. Goal Identification and Refinement
in the Specification of Software-Based Information
Systems. PhD Thesis, Georgia Institute of Technolo-
gy, Atlanta, USA.
Michael Christel and Kyo Kang. 1992. Issues in Re-
quirement elicitation. Technical Report, CMU/SEI-
92-TR-012, ESC-TR-92-012. Software Engineering
Institute, Carnegie Mellon University, Pittsburg.
Julio Cesar Leite. 1987. A survey on requirements anal-
ysis. Department of Information and Computer Sci-
ence, University of California, Irvine, Advanced
Software Engineering Project Technical Report RT-
P071.
Luis Lezcano. 2007. Elaboración semiautomática del
diagrama de objetivos. M.Sc. Thesis, Universidad
Nacional de Colombia, Sede Medellín.
Object Management Group (OMG). 2010. UML Super-
structure. Available at: http://www.omg.org/uml.
Roger Pressman. 2005. Software Engineering: a practi-
tioner&apos;s approach, 6th ed. McGraw Hill, New York.
John Sowa. 1984. Conceptual Structures: Information
Processing in Mind and Machine. Addison-Wesley
Publishing Co., Reading, MA.
Carlos Zapata. 2007. Definición de un esquema
preconceptual para la obtención automática de
esquemas conceptuales de UML. Ph.D. Thesis,
Universidad Nacional de Colombia, sede Medellín.
Carlos Zapata and Servio Benítez. 2009. Interlingua:
Análisis crítico de la literatura. Revista Facultad de
Ingeniería Universidad de Antioquia, 47:117–128.
Carlos Zapata and Nicolás Carmona. In press. Un
modelo de diálogo para la Educci6n de Requisitos de
Software. Dyna.
Carlos Zapata and Nicolás Carmona. 2007. El
experimento Mago de Oz y sus aplicaciones: Una
mirada retrospectiva. Dyna, 74(151):125–135.
Carlos Zapata and Gloria Giraldo. 2009. El juego del
diálogo de educci6n de requisitos de software.
Avances en Sistemas e Informática, 6(1):105–114.
Carlos Zapata, Gloria Giraldo, and John Mesa. In press.
Una propuesta de Metaontología para la Educci6n de
Requisitos de Software. Ingeniare.
Carlos Zapata, Alexander Gelbukh, and Fernando
Arango. 2006. UN-Lencep: Obtenci6n Automática de
Diagramas UML a partir de un Lenguaje Controlado.
Memorias del VII Encuentro Nacional de
Computación ENC&apos;06, San Luis Potosí, México,
254–259.
Carlos Zapata, Juan Hernández, and Raúl Zuluaga.
2008. UNC-Corpus: corpus de diagramas UML para
la soluci6n de problemas de completitud en
ingeniería de software. Revista EAFIT, 44(151):93–
106.
Carlos Zapata, Luis Lezcano, and Paula Tamayo. 2007.
Validaci6n del método para la obtenci6n automática
del diagrama de objetivos desde esquemas
preconceptuales. Revista Escuela de Ingeniería de
Antioquia, (8):21–35.
Carlos Zapata and John Mesa. 2009. Una propuesta para
el análisis morfol6gico de verbos del espaiiol. Dyna,
76(157):27–36.
Carlos Zapata and John Mesa. 2009b. Los Modelos de
Diálogo y sus Aplicaciones en Sistemas de Diálogo
Hombre-Máquina: Revisi6n de la literatura. Dyna,
76(160):305–315.
Carlos Zapata and Roberto Rosero. 2008. Revisi6n
Crítica de la Literatura especializada en Lenguajes
Controlados. Avances en Sistemas e Informática,
5(3):27–33.
Carlos Zapata and Fabio Vargas. 2009. Una revisi6n de
la literatura en consistencia entre problemas y
objetivos en Ingeniería de Software y Gerencia
Organizacional. Revista Escuela de Ingeniería de
Antioquia, 11:117–129.
</reference>
<page confidence="0.998307">
124
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.098565">
<title confidence="0.996248">Computational Linguistics for helping Requirements Elicitation: dream about Automated Software Development</title>
<author confidence="0.994886">Carlos Mario Zapata</author>
<degree confidence="0.31841">of the Computational Language Research Group, School of tems, Mines Faculty, Universidad Nacional de</degree>
<address confidence="0.5278785">Cra. 80 No. 65-223, of. Medellín, Colombia, South</address>
<email confidence="0.855751">cmzapata@unal.edu.co</email>
<abstract confidence="0.997783">Requirements elicitation is one of the first processes of software development and it is intended to be hand-made by means of analyst-stakeholder interviews. As a naturallanguage-based activity, requirements elicitation can take advantages of Computational Linguistics techniques, in order to achieve better results looking for automation in this field. In this paper we survey some of the work related to software development automation, guided by Computational Linguistics techniques, and performed by the Computational Language Research Group from the Universidad Nacional de Colombia. We aim the definition of future trans-national effort to be made in this research line.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Annie Ant6n</author>
</authors>
<title>Goal Identification and Refinement in the Specification of Software-Based Information Systems.</title>
<date>1997</date>
<tech>PhD Thesis,</tech>
<institution>Georgia Institute of Technology,</institution>
<location>Atlanta, USA.</location>
<marker>Ant6n, 1997</marker>
<rawString>Annie Ant6n. 1997. Goal Identification and Refinement in the Specification of Software-Based Information Systems. PhD Thesis, Georgia Institute of Technology, Atlanta, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Christel</author>
<author>Kyo Kang</author>
</authors>
<title>Issues in Requirement elicitation.</title>
<date>1992</date>
<tech>Technical Report, CMU/SEI92-TR-012,</tech>
<pages>92--012</pages>
<institution>Software Engineering Institute, Carnegie Mellon University,</institution>
<location>Pittsburg.</location>
<contexts>
<context position="1889" citStr="Christel and Kang, 1992" startWordPosition="272" endWordPosition="275">ce, in order to capture the requirements belonging to the domain in which future software application must work. After that, in a hand-made process called “requirements elicitation”, the analyst transforms the captured information into formal and semi-formal artifacts, mostly diagrams. At this stage, software application is specified by means of such diagrams (Leite, 1987). Since interviews are the most used techniques for collecting software requirements, they experiment some of the most common problems of natural language (NL) communication: misunderstanding, ambiguity, and lack of clarity (Christel and Kang, 1992). However, as an NL-based process, requirements elicitation can use some of the Computational Linguistics (CL) and Natural Language Processing (NLP) techniques, as a way to solve such problems. The main goal of using CL and NLP techniques in this particular problem is related to the search for automation in the software development process. This is the strategy we (the Computational Language Research Group—CLRG) choose to follow for clarifying requirements elicitation process and, therefore, for trying to automate the first phases of software development process. In this paper, we summarize so</context>
</contexts>
<marker>Christel, Kang, 1992</marker>
<rawString>Michael Christel and Kyo Kang. 1992. Issues in Requirement elicitation. Technical Report, CMU/SEI92-TR-012, ESC-TR-92-012. Software Engineering Institute, Carnegie Mellon University, Pittsburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Julio Cesar Leite</author>
</authors>
<title>A survey on requirements analysis.</title>
<date>1987</date>
<tech>Technical Report RTP071.</tech>
<institution>Department of Information and Computer Science, University of California, Irvine, Advanced Software Engineering Project</institution>
<contexts>
<context position="1640" citStr="Leite, 1987" startWordPosition="237" endWordPosition="238">ntroduction When stakeholders need to solve their information problems, they commonly search for the development of software applications (Pressman, 2005). At the beginning of this process, a set of analyststakeholder interviews take place, in order to capture the requirements belonging to the domain in which future software application must work. After that, in a hand-made process called “requirements elicitation”, the analyst transforms the captured information into formal and semi-formal artifacts, mostly diagrams. At this stage, software application is specified by means of such diagrams (Leite, 1987). Since interviews are the most used techniques for collecting software requirements, they experiment some of the most common problems of natural language (NL) communication: misunderstanding, ambiguity, and lack of clarity (Christel and Kang, 1992). However, as an NL-based process, requirements elicitation can use some of the Computational Linguistics (CL) and Natural Language Processing (NLP) techniques, as a way to solve such problems. The main goal of using CL and NLP techniques in this particular problem is related to the search for automation in the software development process. This is </context>
</contexts>
<marker>Leite, 1987</marker>
<rawString>Julio Cesar Leite. 1987. A survey on requirements analysis. Department of Information and Computer Science, University of California, Irvine, Advanced Software Engineering Project Technical Report RTP071.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Luis Lezcano</author>
</authors>
<title>Elaboración semiautomática del diagrama de objetivos.</title>
<date>2007</date>
<tech>M.Sc. Thesis,</tech>
<institution>Universidad Nacional de Colombia, Sede Medellín.</institution>
<contexts>
<context position="11666" citStr="Lezcano, 2007" startWordPosition="1839" endWordPosition="1840">verbs from NL discourses, and then represent them into pre-conceptual schemas (Zapata et al., 2007). For completing this task, we used previous work of Antón (1997) for gathering some verbs in the above mentioned categories, and then we employed a lexicon from Maryland University in order to discover the internal linguistic features of such verbs. With this information in hand, we increased the number of available verbs for expressing goals. After that, we define a new set of symbols to be used in pre-conceptual schemas for representing goal verbs and then translating them into goal diagrams (Lezcano, 2007). Figure 6 shows an example of pre-conceptual schemas including goal verbs. We are currently exploring the relationships among goals and problems. In our theory, problems are 120 seen either as negative goals or obstacles for a goal to be reached. So, we are trying to define a set of structures for representing goals and another set for representing problems. Also, we are defining some rules for obtaining goal expressions from problem sentences and viceversa. The first step of the process was the state-of-the-art review of such structures (Zapata and Vargas, 2009), and we are delivering a Mast</context>
</contexts>
<marker>Lezcano, 2007</marker>
<rawString>Luis Lezcano. 2007. Elaboración semiautomática del diagrama de objetivos. M.Sc. Thesis, Universidad Nacional de Colombia, Sede Medellín.</rawString>
</citation>
<citation valid="false">
<date>2010</date>
<institution>Object Management Group (OMG).</institution>
<note>UML Superstructure. Available at: http://www.omg.org/uml.</note>
<marker>2010</marker>
<rawString>Object Management Group (OMG). 2010. UML Superstructure. Available at: http://www.omg.org/uml.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Roger Pressman</author>
</authors>
<title>Software Engineering: a practitioner&apos;s approach, 6th ed.</title>
<date>2005</date>
<publisher>McGraw Hill,</publisher>
<location>New York.</location>
<contexts>
<context position="1182" citStr="Pressman, 2005" startWordPosition="167" endWordPosition="168"> can take advantages of Computational Linguistics techniques, in order to achieve better results looking for automation in this field. In this paper we survey some of the work related to software development automation, guided by Computational Linguistics techniques, and performed by the Computational Language Research Group from the Universidad Nacional de Colombia. We aim the definition of future trans-national effort to be made in this research line. 1 Introduction When stakeholders need to solve their information problems, they commonly search for the development of software applications (Pressman, 2005). At the beginning of this process, a set of analyststakeholder interviews take place, in order to capture the requirements belonging to the domain in which future software application must work. After that, in a hand-made process called “requirements elicitation”, the analyst transforms the captured information into formal and semi-formal artifacts, mostly diagrams. At this stage, software application is specified by means of such diagrams (Leite, 1987). Since interviews are the most used techniques for collecting software requirements, they experiment some of the most common problems of natu</context>
</contexts>
<marker>Pressman, 2005</marker>
<rawString>Roger Pressman. 2005. Software Engineering: a practitioner&apos;s approach, 6th ed. McGraw Hill, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Sowa</author>
</authors>
<title>Conceptual Structures: Information Processing in Mind and Machine.</title>
<date>1984</date>
<publisher>Addison-Wesley Publishing Co.,</publisher>
<location>Reading, MA.</location>
<contexts>
<context position="4604" citStr="Sowa, 1984" startWordPosition="705" endWordPosition="706">l. 2.1 Pre-conceptual schemas The first gap we needed to bridge in this process was related to the knowledge representation of requirements. In this context, the UML (Unified Modeling Language, OMG, 2010) is the de-facto standard for representing requirements, but it is a language directed to technical readers, and stakeholders are not usually technical people. For this reason, we explored the possibilities to use a graphical language closer to the stakeholder discourse, and we created the pre-conceptual schemas (Zapata, 2007) by adapting some previous effort made by Sowa’s Conceptual Graphs (Sowa, 1984). Figure 2 shows an example of the pre-conceptual schemas, manually created by an analyst during the software elicitation process of one software application. Figure 1. Overall view of CL- and NLP-tools for automated software development. Figure 2. An example of Pre-conceptual Schemas (Zapata, 2007). 118 Pre-conceptual schemas have provided a new way to validate the stakeholder discourse, in order to clarify and understand what stakeholder has to say about the domain information related to the software application to-be-made. 2.2 UN-Lencep: Specifying pre-conceptual schemas Pre-conceptual sche</context>
</contexts>
<marker>Sowa, 1984</marker>
<rawString>John Sowa. 1984. Conceptual Structures: Information Processing in Mind and Machine. Addison-Wesley Publishing Co., Reading, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
</authors>
<title>Definición de un esquema preconceptual para la obtención automática de esquemas conceptuales de UML.</title>
<date>2007</date>
<tech>Ph.D. Thesis,</tech>
<institution>Universidad Nacional de Colombia, sede Medellín.</institution>
<contexts>
<context position="4525" citStr="Zapata, 2007" startWordPosition="693" endWordPosition="694">ocess. In the following subsections, we discuss a more detailed view of every tool. 2.1 Pre-conceptual schemas The first gap we needed to bridge in this process was related to the knowledge representation of requirements. In this context, the UML (Unified Modeling Language, OMG, 2010) is the de-facto standard for representing requirements, but it is a language directed to technical readers, and stakeholders are not usually technical people. For this reason, we explored the possibilities to use a graphical language closer to the stakeholder discourse, and we created the pre-conceptual schemas (Zapata, 2007) by adapting some previous effort made by Sowa’s Conceptual Graphs (Sowa, 1984). Figure 2 shows an example of the pre-conceptual schemas, manually created by an analyst during the software elicitation process of one software application. Figure 1. Overall view of CL- and NLP-tools for automated software development. Figure 2. An example of Pre-conceptual Schemas (Zapata, 2007). 118 Pre-conceptual schemas have provided a new way to validate the stakeholder discourse, in order to clarify and understand what stakeholder has to say about the domain information related to the software application t</context>
</contexts>
<marker>Zapata, 2007</marker>
<rawString>Carlos Zapata. 2007. Definición de un esquema preconceptual para la obtención automática de esquemas conceptuales de UML. Ph.D. Thesis, Universidad Nacional de Colombia, sede Medellín.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>Servio Benítez</author>
</authors>
<title>Interlingua: Análisis crítico de la literatura. Revista Facultad de Ingeniería Universidad de Antioquia,</title>
<date>2009</date>
<pages>47--117</pages>
<contexts>
<context position="14281" citStr="Zapata and Benítez, 2009" startWordPosition="2254" endWordPosition="2257">ely “translate” the given information into diagrams that consistently reflect such information. 2.8 State-of-the-art Reviews The definition of several projects requires the extensive search for papers and journals related to the topics we need to incorporate in the process. In addition to the mentioned review on goals and problems (Zapata and Vargas, 2009), we conducted some other state-of-the-art reviews on Controlled Languages (Zapata and Rosero, 2008), Dialog Models (Zapata and Mesa, 2009b), and the Wizard-of-Oz experiment (Zapata and Carmona, 2007). Also, we made a review on Interlinguas (Zapata and Benítez, 2009), and we are preparing some other reviews on Computational Dialog and Code Generation. 3 Joint projects on requirements elicitation and computational linguistics Our final goal—and probably “dream”—is the automation of software development process from early stages related to speech discourses. We strongly believe this goal is so big enough to be reached by only one research group. We made now some part of the task, but we need help to complete it. For this reason, we want to create some transnational projects related to this field of knowledge to be executed by several research groups in Lati</context>
</contexts>
<marker>Zapata, Benítez, 2009</marker>
<rawString>Carlos Zapata and Servio Benítez. 2009. Interlingua: Análisis crítico de la literatura. Revista Facultad de Ingeniería Universidad de Antioquia, 47:117–128.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Carlos Zapata</author>
<author>Nicolás Carmona</author>
</authors>
<booktitle>In press. Un modelo de diálogo para la Educci6n de Requisitos de Software. Dyna.</booktitle>
<marker>Zapata, Carmona, </marker>
<rawString>Carlos Zapata and Nicolás Carmona. In press. Un modelo de diálogo para la Educci6n de Requisitos de Software. Dyna.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>Nicolás Carmona</author>
</authors>
<title>El experimento Mago de Oz y sus aplicaciones: Una mirada retrospectiva.</title>
<date>2007</date>
<journal>Dyna,</journal>
<volume>74</volume>
<issue>151</issue>
<contexts>
<context position="14214" citStr="Zapata and Carmona, 2007" startWordPosition="2243" endWordPosition="2246">ce of good answers in requirements elicitation, in order to adequately “translate” the given information into diagrams that consistently reflect such information. 2.8 State-of-the-art Reviews The definition of several projects requires the extensive search for papers and journals related to the topics we need to incorporate in the process. In addition to the mentioned review on goals and problems (Zapata and Vargas, 2009), we conducted some other state-of-the-art reviews on Controlled Languages (Zapata and Rosero, 2008), Dialog Models (Zapata and Mesa, 2009b), and the Wizard-of-Oz experiment (Zapata and Carmona, 2007). Also, we made a review on Interlinguas (Zapata and Benítez, 2009), and we are preparing some other reviews on Computational Dialog and Code Generation. 3 Joint projects on requirements elicitation and computational linguistics Our final goal—and probably “dream”—is the automation of software development process from early stages related to speech discourses. We strongly believe this goal is so big enough to be reached by only one research group. We made now some part of the task, but we need help to complete it. For this reason, we want to create some transnational projects related to this f</context>
</contexts>
<marker>Zapata, Carmona, 2007</marker>
<rawString>Carlos Zapata and Nicolás Carmona. 2007. El experimento Mago de Oz y sus aplicaciones: Una mirada retrospectiva. Dyna, 74(151):125–135.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>Gloria Giraldo</author>
</authors>
<title>El juego del diálogo de educci6n de requisitos de software.</title>
<date>2009</date>
<booktitle>Avances en Sistemas e Informática,</booktitle>
<pages>6--1</pages>
<contexts>
<context position="13147" citStr="Zapata and Giraldo, 2009" startWordPosition="2075" endWordPosition="2078">s including goal verbs (Zapata et al., 2007) 2.7 Games for teaching As a part of our research and teaching strategy, we use games to show and reinforce some concepts about our knowledge area. For example, we are currently developing an on-line game—called “Software Boulevard”—for understanding how software industries make their intangible products. In this game, we intend to simulate the real behavior of this kind of companies, but making the actors answer questions about software development process in several phases. Another example of our strategy is “Requirements elicitation dialog game” (Zapata and Giraldo, 2009), which is based on the importance of dialog inside the software development process. This game is like a word puzzle in which players must fill in the blanks a set of words previously acquired by answering questions related to software development. The blanks are located inside a simulated analyst-stakeholder interview and also as parts of a pre-conceptual schema. The main goal of the game is make conscious the players about the importance of good answers in requirements elicitation, in order to adequately “translate” the given information into diagrams that consistently reflect such informat</context>
</contexts>
<marker>Zapata, Giraldo, 2009</marker>
<rawString>Carlos Zapata and Gloria Giraldo. 2009. El juego del diálogo de educci6n de requisitos de software. Avances en Sistemas e Informática, 6(1):105–114.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Carlos Zapata</author>
<author>Gloria Giraldo</author>
<author>John Mesa</author>
</authors>
<booktitle>In press. Una propuesta de Metaontología para la Educci6n de Requisitos de Software. Ingeniare.</booktitle>
<marker>Zapata, Giraldo, Mesa, </marker>
<rawString>Carlos Zapata, Gloria Giraldo, and John Mesa. In press. Una propuesta de Metaontología para la Educci6n de Requisitos de Software. Ingeniare.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>Alexander Gelbukh</author>
<author>Fernando Arango</author>
</authors>
<title>UN-Lencep:</title>
<date>2006</date>
<booktitle>Obtenci6n Automática de Diagramas UML a partir de un Lenguaje Controlado. Memorias del VII Encuentro Nacional de Computación ENC&apos;06,</booktitle>
<pages>254--259</pages>
<location>San Luis Potosí, México,</location>
<marker>Zapata, Gelbukh, Arango, 2006</marker>
<rawString>Carlos Zapata, Alexander Gelbukh, and Fernando Arango. 2006. UN-Lencep: Obtenci6n Automática de Diagramas UML a partir de un Lenguaje Controlado. Memorias del VII Encuentro Nacional de Computación ENC&apos;06, San Luis Potosí, México, 254–259.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>Juan Hernández</author>
<author>Raúl Zuluaga</author>
</authors>
<title>UNC-Corpus: corpus de diagramas UML para la soluci6n de problemas de completitud en ingeniería de software. Revista EAFIT,</title>
<date>2008</date>
<volume>44</volume>
<issue>151</issue>
<pages>106</pages>
<contexts>
<context position="6037" citStr="Zapata et al., 2008" startWordPosition="928" endWordPosition="931">he involvement of both kinds of actors in such action. In this case, we need to communicate each other in an NL-like way. The solution to this problem came from two of the several techniques from Computational Linguistics: Information Extraction (IE) and Controlled Languages. In first place, we use a set of templates, in the same sense of IE templates, for matching in a stakeholder discourse the same features of a pre-conceptual schema. Then, we constrained the NL discourse, and we created UNLencep (Universidad Nacional de Colombia— Lenguaje para la especificación de esquemas preconceptuales, Zapata et al., 2008). By combining both techniques, we had the possibilities to create a textual discourse in UN-Lencep. In the case of the pre-conceptual schema in figure 2, the UNLencep discourse could be something like this: A pet belongs to an owner. The pet has identification, name, and medical history. The medical history has a name and one detail. The detail has a date, a diagnosis, and a medicine. When the owner requests an appointment, the assistant assigns an appointment. When the owner accomplishes the appointment, the veterinarian auscultates the pet. When the veterinarian auscultates the pet, the vet</context>
<context position="9632" citStr="Zapata et al., 2008" startWordPosition="1498" endWordPosition="1501">using their own knowledge and understanding of the world domain, in a subjective way. But, is it possible to simulate such 119 activity? How can we represent the knowledge acquired about modeling by an analyst in creating models? The work in Corpus Linguistics provided us some useful ideas about these questions. A corpus is a collection of proved uses of a language. If we considered UML as a graphical modeling language (but, finally, a language), we could gather several “proved” uses of this language in the shape of computationally readable files. We employed these files to create UNC-Corpus (Zapata et al., 2008), a UML-diagram corpus. Also, we used UNC-Corpus for “completing” diagrams, as analysts actually does, by reviewing the contents of the corpus as shown in figure 4. Figure 3. Requirements elicitation dialog model (Zapata and Carmona, in press). 2.5 AMV: a solution for conjugating and lemmatizing Spanish verbs Spanish is one of the most difficult languages for tasks related to conjugate and lemmatize verbs. Our language has a complex structure when we need to use a verb. CLRG have assumed these difficulties and, after exploring state of the art in Spanish conjugators, decided to create AMV (Ana</context>
<context position="12420" citStr="Zapata et al., 2008" startWordPosition="1962" endWordPosition="1965">nd problems. In our theory, problems are 120 seen either as negative goals or obstacles for a goal to be reached. So, we are trying to define a set of structures for representing goals and another set for representing problems. Also, we are defining some rules for obtaining goal expressions from problem sentences and viceversa. The first step of the process was the state-of-the-art review of such structures (Zapata and Vargas, 2009), and we are delivering a Master’s Thesis with the structures and the heuristic rules for proving such relationship. Figure 4. A snapshot of the use of UNC-Corpus (Zapata et al., 2008). Figure 5. Snapshot of AMV (Zapata and Mesa, 2009). 121 Figure 6. An example of pre-conceptual schemas including goal verbs (Zapata et al., 2007) 2.7 Games for teaching As a part of our research and teaching strategy, we use games to show and reinforce some concepts about our knowledge area. For example, we are currently developing an on-line game—called “Software Boulevard”—for understanding how software industries make their intangible products. In this game, we intend to simulate the real behavior of this kind of companies, but making the actors answer questions about software development </context>
</contexts>
<marker>Zapata, Hernández, Zuluaga, 2008</marker>
<rawString>Carlos Zapata, Juan Hernández, and Raúl Zuluaga. 2008. UNC-Corpus: corpus de diagramas UML para la soluci6n de problemas de completitud en ingeniería de software. Revista EAFIT, 44(151):93– 106.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>Luis Lezcano</author>
<author>Paula Tamayo</author>
</authors>
<title>Validaci6n del método para la obtenci6n automática del diagrama de objetivos desde esquemas preconceptuales. Revista Escuela de Ingeniería de</title>
<date>2007</date>
<location>Antioquia,</location>
<contexts>
<context position="11151" citStr="Zapata et al., 2007" startWordPosition="1748" endWordPosition="1751">about these verbs. For example, we discovered state verbs, action verbs, and goal verbs. Goal verbs are slightly different from the other kinds of verbs, because they express activities with no duration, generally associated to states to be reached. Three kinds of goal verbs can be identified: improvement, maintenance, and achievement verbs. Goal verbs are not recognized by most of the people, and their usage tends to be misunderstood along the software development process. CLRG devoted some effort to identify goal verbs from NL discourses, and then represent them into pre-conceptual schemas (Zapata et al., 2007). For completing this task, we used previous work of Antón (1997) for gathering some verbs in the above mentioned categories, and then we employed a lexicon from Maryland University in order to discover the internal linguistic features of such verbs. With this information in hand, we increased the number of available verbs for expressing goals. After that, we define a new set of symbols to be used in pre-conceptual schemas for representing goal verbs and then translating them into goal diagrams (Lezcano, 2007). Figure 6 shows an example of pre-conceptual schemas including goal verbs. We are cu</context>
<context position="12566" citStr="Zapata et al., 2007" startWordPosition="1986" endWordPosition="1989">t of structures for representing goals and another set for representing problems. Also, we are defining some rules for obtaining goal expressions from problem sentences and viceversa. The first step of the process was the state-of-the-art review of such structures (Zapata and Vargas, 2009), and we are delivering a Master’s Thesis with the structures and the heuristic rules for proving such relationship. Figure 4. A snapshot of the use of UNC-Corpus (Zapata et al., 2008). Figure 5. Snapshot of AMV (Zapata and Mesa, 2009). 121 Figure 6. An example of pre-conceptual schemas including goal verbs (Zapata et al., 2007) 2.7 Games for teaching As a part of our research and teaching strategy, we use games to show and reinforce some concepts about our knowledge area. For example, we are currently developing an on-line game—called “Software Boulevard”—for understanding how software industries make their intangible products. In this game, we intend to simulate the real behavior of this kind of companies, but making the actors answer questions about software development process in several phases. Another example of our strategy is “Requirements elicitation dialog game” (Zapata and Giraldo, 2009), which is based on</context>
</contexts>
<marker>Zapata, Lezcano, Tamayo, 2007</marker>
<rawString>Carlos Zapata, Luis Lezcano, and Paula Tamayo. 2007. Validaci6n del método para la obtenci6n automática del diagrama de objetivos desde esquemas preconceptuales. Revista Escuela de Ingeniería de Antioquia, (8):21–35.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>John Mesa</author>
</authors>
<title>Una propuesta para el análisis morfol6gico de verbos del espaiiol.</title>
<date>2009</date>
<journal>Dyna,</journal>
<volume>76</volume>
<issue>157</issue>
<contexts>
<context position="12471" citStr="Zapata and Mesa, 2009" startWordPosition="1971" endWordPosition="1974"> either as negative goals or obstacles for a goal to be reached. So, we are trying to define a set of structures for representing goals and another set for representing problems. Also, we are defining some rules for obtaining goal expressions from problem sentences and viceversa. The first step of the process was the state-of-the-art review of such structures (Zapata and Vargas, 2009), and we are delivering a Master’s Thesis with the structures and the heuristic rules for proving such relationship. Figure 4. A snapshot of the use of UNC-Corpus (Zapata et al., 2008). Figure 5. Snapshot of AMV (Zapata and Mesa, 2009). 121 Figure 6. An example of pre-conceptual schemas including goal verbs (Zapata et al., 2007) 2.7 Games for teaching As a part of our research and teaching strategy, we use games to show and reinforce some concepts about our knowledge area. For example, we are currently developing an on-line game—called “Software Boulevard”—for understanding how software industries make their intangible products. In this game, we intend to simulate the real behavior of this kind of companies, but making the actors answer questions about software development process in several phases. Another example of our s</context>
<context position="14152" citStr="Zapata and Mesa, 2009" startWordPosition="2234" endWordPosition="2237"> the game is make conscious the players about the importance of good answers in requirements elicitation, in order to adequately “translate” the given information into diagrams that consistently reflect such information. 2.8 State-of-the-art Reviews The definition of several projects requires the extensive search for papers and journals related to the topics we need to incorporate in the process. In addition to the mentioned review on goals and problems (Zapata and Vargas, 2009), we conducted some other state-of-the-art reviews on Controlled Languages (Zapata and Rosero, 2008), Dialog Models (Zapata and Mesa, 2009b), and the Wizard-of-Oz experiment (Zapata and Carmona, 2007). Also, we made a review on Interlinguas (Zapata and Benítez, 2009), and we are preparing some other reviews on Computational Dialog and Code Generation. 3 Joint projects on requirements elicitation and computational linguistics Our final goal—and probably “dream”—is the automation of software development process from early stages related to speech discourses. We strongly believe this goal is so big enough to be reached by only one research group. We made now some part of the task, but we need help to complete it. For this reason, w</context>
</contexts>
<marker>Zapata, Mesa, 2009</marker>
<rawString>Carlos Zapata and John Mesa. 2009. Una propuesta para el análisis morfol6gico de verbos del espaiiol. Dyna, 76(157):27–36.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>John Mesa</author>
</authors>
<title>Los Modelos de Diálogo y sus Aplicaciones en Sistemas de Diálogo Hombre-Máquina: Revisi6n de la literatura.</title>
<date>2009</date>
<journal>Dyna,</journal>
<volume>76</volume>
<issue>160</issue>
<contexts>
<context position="12471" citStr="Zapata and Mesa, 2009" startWordPosition="1971" endWordPosition="1974"> either as negative goals or obstacles for a goal to be reached. So, we are trying to define a set of structures for representing goals and another set for representing problems. Also, we are defining some rules for obtaining goal expressions from problem sentences and viceversa. The first step of the process was the state-of-the-art review of such structures (Zapata and Vargas, 2009), and we are delivering a Master’s Thesis with the structures and the heuristic rules for proving such relationship. Figure 4. A snapshot of the use of UNC-Corpus (Zapata et al., 2008). Figure 5. Snapshot of AMV (Zapata and Mesa, 2009). 121 Figure 6. An example of pre-conceptual schemas including goal verbs (Zapata et al., 2007) 2.7 Games for teaching As a part of our research and teaching strategy, we use games to show and reinforce some concepts about our knowledge area. For example, we are currently developing an on-line game—called “Software Boulevard”—for understanding how software industries make their intangible products. In this game, we intend to simulate the real behavior of this kind of companies, but making the actors answer questions about software development process in several phases. Another example of our s</context>
<context position="14152" citStr="Zapata and Mesa, 2009" startWordPosition="2234" endWordPosition="2237"> the game is make conscious the players about the importance of good answers in requirements elicitation, in order to adequately “translate” the given information into diagrams that consistently reflect such information. 2.8 State-of-the-art Reviews The definition of several projects requires the extensive search for papers and journals related to the topics we need to incorporate in the process. In addition to the mentioned review on goals and problems (Zapata and Vargas, 2009), we conducted some other state-of-the-art reviews on Controlled Languages (Zapata and Rosero, 2008), Dialog Models (Zapata and Mesa, 2009b), and the Wizard-of-Oz experiment (Zapata and Carmona, 2007). Also, we made a review on Interlinguas (Zapata and Benítez, 2009), and we are preparing some other reviews on Computational Dialog and Code Generation. 3 Joint projects on requirements elicitation and computational linguistics Our final goal—and probably “dream”—is the automation of software development process from early stages related to speech discourses. We strongly believe this goal is so big enough to be reached by only one research group. We made now some part of the task, but we need help to complete it. For this reason, w</context>
</contexts>
<marker>Zapata, Mesa, 2009</marker>
<rawString>Carlos Zapata and John Mesa. 2009b. Los Modelos de Diálogo y sus Aplicaciones en Sistemas de Diálogo Hombre-Máquina: Revisi6n de la literatura. Dyna, 76(160):305–315.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>Roberto Rosero</author>
</authors>
<date>2008</date>
<booktitle>Revisi6n Crítica de la Literatura especializada en Lenguajes Controlados. Avances en Sistemas e Informática,</booktitle>
<pages>5--3</pages>
<contexts>
<context position="14114" citStr="Zapata and Rosero, 2008" startWordPosition="2228" endWordPosition="2231">a pre-conceptual schema. The main goal of the game is make conscious the players about the importance of good answers in requirements elicitation, in order to adequately “translate” the given information into diagrams that consistently reflect such information. 2.8 State-of-the-art Reviews The definition of several projects requires the extensive search for papers and journals related to the topics we need to incorporate in the process. In addition to the mentioned review on goals and problems (Zapata and Vargas, 2009), we conducted some other state-of-the-art reviews on Controlled Languages (Zapata and Rosero, 2008), Dialog Models (Zapata and Mesa, 2009b), and the Wizard-of-Oz experiment (Zapata and Carmona, 2007). Also, we made a review on Interlinguas (Zapata and Benítez, 2009), and we are preparing some other reviews on Computational Dialog and Code Generation. 3 Joint projects on requirements elicitation and computational linguistics Our final goal—and probably “dream”—is the automation of software development process from early stages related to speech discourses. We strongly believe this goal is so big enough to be reached by only one research group. We made now some part of the task, but we need h</context>
</contexts>
<marker>Zapata, Rosero, 2008</marker>
<rawString>Carlos Zapata and Roberto Rosero. 2008. Revisi6n Crítica de la Literatura especializada en Lenguajes Controlados. Avances en Sistemas e Informática, 5(3):27–33.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlos Zapata</author>
<author>Fabio Vargas</author>
</authors>
<title>Una revisi6n de la literatura en consistencia entre problemas y objetivos en</title>
<date>2009</date>
<booktitle>Ingeniería de Software y Gerencia Organizacional. Revista Escuela de Ingeniería de Antioquia,</booktitle>
<pages>11--117</pages>
<contexts>
<context position="12236" citStr="Zapata and Vargas, 2009" startWordPosition="1930" endWordPosition="1933">en translating them into goal diagrams (Lezcano, 2007). Figure 6 shows an example of pre-conceptual schemas including goal verbs. We are currently exploring the relationships among goals and problems. In our theory, problems are 120 seen either as negative goals or obstacles for a goal to be reached. So, we are trying to define a set of structures for representing goals and another set for representing problems. Also, we are defining some rules for obtaining goal expressions from problem sentences and viceversa. The first step of the process was the state-of-the-art review of such structures (Zapata and Vargas, 2009), and we are delivering a Master’s Thesis with the structures and the heuristic rules for proving such relationship. Figure 4. A snapshot of the use of UNC-Corpus (Zapata et al., 2008). Figure 5. Snapshot of AMV (Zapata and Mesa, 2009). 121 Figure 6. An example of pre-conceptual schemas including goal verbs (Zapata et al., 2007) 2.7 Games for teaching As a part of our research and teaching strategy, we use games to show and reinforce some concepts about our knowledge area. For example, we are currently developing an on-line game—called “Software Boulevard”—for understanding how software indust</context>
<context position="14014" citStr="Zapata and Vargas, 2009" startWordPosition="2215" endWordPosition="2218">pment. The blanks are located inside a simulated analyst-stakeholder interview and also as parts of a pre-conceptual schema. The main goal of the game is make conscious the players about the importance of good answers in requirements elicitation, in order to adequately “translate” the given information into diagrams that consistently reflect such information. 2.8 State-of-the-art Reviews The definition of several projects requires the extensive search for papers and journals related to the topics we need to incorporate in the process. In addition to the mentioned review on goals and problems (Zapata and Vargas, 2009), we conducted some other state-of-the-art reviews on Controlled Languages (Zapata and Rosero, 2008), Dialog Models (Zapata and Mesa, 2009b), and the Wizard-of-Oz experiment (Zapata and Carmona, 2007). Also, we made a review on Interlinguas (Zapata and Benítez, 2009), and we are preparing some other reviews on Computational Dialog and Code Generation. 3 Joint projects on requirements elicitation and computational linguistics Our final goal—and probably “dream”—is the automation of software development process from early stages related to speech discourses. We strongly believe this goal is so b</context>
</contexts>
<marker>Zapata, Vargas, 2009</marker>
<rawString>Carlos Zapata and Fabio Vargas. 2009. Una revisi6n de la literatura en consistencia entre problemas y objetivos en Ingeniería de Software y Gerencia Organizacional. Revista Escuela de Ingeniería de Antioquia, 11:117–129.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>