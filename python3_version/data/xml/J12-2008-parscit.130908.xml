<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.017209">
<title confidence="0.680402">
Book Reviews
Unification Grammars
</title>
<author confidence="0.962677">
Nissim Francez* and Shuly Wintner$
</author>
<affiliation confidence="0.993721">
(*Technion–Israel Institute of Technology and $University of Haifa)
Cambridge University Press, 2012, xii+312 pp; hardbound, ISBN 978-1-107-01417-6,
</affiliation>
<figure confidence="0.40586">
$95.00
Reviewed by
Tracy Holloway King
eBay Inc.
</figure>
<bodyText confidence="0.999105333333334">
Francez and Wintner’s textbook on unification grammars is aimed at students interested
in computational linguistics who are at the advanced undergraduate or introductory
graduate level. As stated by the authors, the book assumes a solid introductory course
in syntax and a year of undergraduate mathematics, but no programming experience;
I agree with this assessment. The book will also be of interest to anyone working
with unification grammars—for example, an HPSG or LFG theoretician or grammar
engineer, who wants to understand more about the mathematical underpinnings of the
systems they are working on; even without a strong mathematics background, large
portions of the book will be accessible for motivated readers with previous unification
grammar experience.
Although at first glance some readers may be intimidated by the technical depth
of the book, the material is made accessible by its presentation style. Concepts are
introduced in stages, with frequent references to earlier concepts and sections. Each
concept is introduced in prose, in relevant proofs, and by examples tied to linguistic
issues, thereby reinforcing the material. Exercises are provided throughout each chapter
so that readers can check their understanding as they work through the material; many
of the exercises have answers provided in the back of the book. Another strength of the
book is the detailed further-reading section at the end of each chapter: These provide
historical background as well as an introduction to more-advanced topics.
The book comprises seven chapters, three appendices, the bibliography, and an
index.
Chapter 1: “Introduction.” The introduction overviews several major issues in the
syntax of natural languages (e.g., parts of speech, subcategorization, control, long-
distance dependencies, and coordination). There is also an overview of formal lan-
guages and context-free grammars. These are then linked by a discussion of some of the
arguments against natural languages being context-free. Building on this discussion,
mildly context-sensitive languages are introduced. This chapter will serve as a review
of relevant concepts for most readers.
Chapter 2: “Feature Structures.” Feature structures are introduced as a way of ex-
tending context-free grammars to express linguistic information, using examples from
agreement as motivation. The connection between feature graphs, feature structures,
abstract feature structures, and attribute-value matrices is presented in detail. Special
attention is paid to reentrancies and cycles, two key issues in the formal and practical
understanding of feature structures. Numerous graphical examples illustrate the formal
proofs and help to provide the intuition behind the concepts and how they relate to one
another.
</bodyText>
<table confidence="0.363741666666667">
© 2012 Association for Computational Linguistics
Computational Linguistics Volume 38, Number 2
Chapter 3: “Unification.” Using the structures presented in Chapter 2, unification is
</table>
<bodyText confidence="0.987623828571429">
introduced as the mechanism to combine the information in two compatible feature
structures. Again, graphical examples provide an intuitive view into the formalisms
introduced. A simple, destructive algorithm for unification is introduced and linked to
the formal definitions (computational aspects of unification grammars are discussed in
detail in Chapter 6). Generalization is briefly discussed as the dual of unification.
Chapter 4: “Unification Grammars.” In order to capture natural language phenomena,
feature structures are extended to multirooted feature structures and then combined
with unification to form unification grammars. Grammar rules and derivations, along
with the lexicon, are defined. Comparisons to context-free grammars and their limita-
tions are provided to further exemplify the formal power of unification grammars.
Chapter 5: “Linguistic Applications.” The formalisms introduced in Chapters 2–4
are then used to account for a variety of linguistic phenomena, including traditional
“movement” phenomena, by starting with a simple unification grammar for a fragment
of English and gradually extending it. Examples are provided of where the grammar
engineer must choose among different ways to formulate the grammar rules within
the unification grammar formalism and how these different choices can reflect different
linguistic generalizations as well as have different computational costs.
Chapter 6: “Computational Aspects of Unification Grammars.” This chapter provides a
solid overview of computational complexity and then discusses how unification gram-
mars fit into the picture. Issues with recognition and parsing are discussed. Examples
are worked out in detail (e.g., showing relevant dotted rules) for context-free grammars
and are then extended to unification grammars. This chapter could be skipped by
those focused on theoretical and formal aspects, but it provides a practical view of
the repercussions of the formal issues introduced earlier and is directly relevant for
computational linguists.
There is a short concluding chapter. The three appendices comprise a list of symbols
used in the book, a summary of preliminary mathematical notions, and solutions to
selected exercises.
In sum, this book will be an excellent textbook for computational linguistics classes,
especially in programs that have a grammar engineering track or that want to build on
a strong formal language program. I also particularly recommend it for those working
with unification grammars, especially with implementations of such grammars.
Tracy Holloway King is a principal product manager with eBay’s search science team. Previously
she focused on LFG grammar engineering and applications at The Palo Alto Research Center. Her
address is eBay Inc., 2065 Hamilton Ave, San Jose, CA 95125, USA; e-mail: tracyking@ebay.com.
</bodyText>
<page confidence="0.997425">
442
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.272793">
<title confidence="0.990981">Book Reviews Unification Grammars</title>
<author confidence="0.888877">Shuly</author>
<affiliation confidence="0.999741">Institute of Technology and of Haifa</affiliation>
<address confidence="0.8395275">Cambridge University Press, 2012, xii+312 pp; hardbound, ISBN 978-1-107-01417-6, $95.00</address>
<note confidence="0.893455">Reviewed by</note>
<author confidence="0.999325">Tracy Holloway King</author>
<affiliation confidence="0.916272">eBay Inc.</affiliation>
<abstract confidence="0.9699575">Francez and Wintner’s textbook on unification grammars is aimed at students interested in computational linguistics who are at the advanced undergraduate or introductory graduate level. As stated by the authors, the book assumes a solid introductory course in syntax and a year of undergraduate mathematics, but no programming experience; I agree with this assessment. The book will also be of interest to anyone working with unification grammars—for example, an HPSG or LFG theoretician or grammar engineer, who wants to understand more about the mathematical underpinnings of the systems they are working on; even without a strong mathematics background, large portions of the book will be accessible for motivated readers with previous unification grammar experience. Although at first glance some readers may be intimidated by the technical depth of the book, the material is made accessible by its presentation style. Concepts are introduced in stages, with frequent references to earlier concepts and sections. Each concept is introduced in prose, in relevant proofs, and by examples tied to linguistic issues, thereby reinforcing the material. Exercises are provided throughout each chapter so that readers can check their understanding as they work through the material; many of the exercises have answers provided in the back of the book. Another strength of the book is the detailed further-reading section at the end of each chapter: These provide</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
</citationList>
</algorithm>
</algorithms>