<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.003862">
<title confidence="0.993839">
A Simple Rule-Based Part of Speech Tagger
</title>
<author confidence="0.998235">
Eric Brill *
</author>
<affiliation confidence="0.92034825">
Department of Computer Science
University of Pennsylvania
Philadelphia, Pennsylvania 19104
U.S.A.
</affiliation>
<email confidence="0.808819">
brillOunagi.cis.upenn.edu
</email>
<sectionHeader confidence="0.989793" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999934875">
Automatic part of speech tagging is an area
of natural language processing where statistical
techniques have been more successful than rule-
based methods. In this paper, we present a sim-
ple rule-based part of speech tagger which au-
tomatically acquires its rules and tags with ac-
curacy comparable to stochastic taggers. The
rule-based tagger has many advantages over
these taggers, including: a vast reduction in
stored information required, the perspicuity of
a small set of meaningful rules, ease of finding
and implementing improvements to the tagger,
and better portability from one tag set, cor-
pus genre or language to another. Perhaps the
biggest contribution of this work is in demon-
strating that the stochastic method is not the
only viable method for part of speech tagging.
The fact that a simple rule-based tagger that
automatically learns its rules can perform so
well should offer encouragement for researchers
to further explore rule-based tagging, search-
ing for a better and more expressive set of rule
templates and other variations on the simple
but effective theme described below.
</bodyText>
<sectionHeader confidence="0.999134" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999849642857143">
There has been a dramatic increase in the application of
probabilistic models to natural language processing over
the last few years. The appeal of stochastic techniques
over traditional rule-based techniques comes from the
ease with which the necessary statistics can be automat-
ically acquired and the fact that very little handcrafted
knowledge need be built into the system. In contrast,
the rules in rule-based systems are usually difficult to
construct and are typically not very robust.
One area in which the statistical approach has done
particularly well is automatic part of speech tagging, as-
signing each word in an input sentence its proper part
of speech [Church 88; Cutting et al. 92; DeRose 88;
Deroualt and Merialdo 86; Garside et al. 87; Jelinek 85;
</bodyText>
<footnote confidence="0.90149575">
*The author would like to thank Mitch Marcus and Rich
Pito for valuable input. This work was supported by DARPA
and AFOSR jointly under grant No. AFOSR-90-0066, and
by ARO grant No. DAAL 03-89-00031 PRI.
</footnote>
<bodyText confidence="0.996341815789474">
Kupiec 89; Meteer et al. 911. Stochastic taggers have ob-
tained a high degree of accuracy without performing any
syntactic analysis on the input. These stochastic part of
speech taggers make use of a Markov model which cap-
tures lexical and contextual information. The parame-
ters of the model can be estimated from tagged ([Church
88; DeRose 88; Deroualt and Merialdo 86; Garside et al.
87; Meteer et al. 91]) or untag,ged ([Cutting et al. 92;
Jelinek 85; Kupiec 89]) text. Once the parameters of the
model are estimated, a sentence can then be automat-
ically tagged by assigning it the tag sequence which is
assigned the highest probability by the model. Perfor-
mance is often enhanced with the aid of various higher
level pre- and postprocessing procedures or by manually
tuning the model.
A number of rule-based taggers have been built [Klein
and Simmons 63; Green and Rubin 71; Hindle 89]. [Klein
and Simmons 63] and [Green and Rubin 71] both have
error rates substantially higher than state of the art
stochastic taggers. [Hindle 89] disambiguates words
within a deterministic parser. We wanted to determine
whether a simple rule-based tagger without any knowl-
edge of syntax can perform as well as a stochastic tagger,
or if part of speech tagging really is a domain to which
stochastic techniques are better suited.
In this paper we describe a rule-based tagger which
performs as well as taggers based upon probabilistic
models. The rule-based tagger overcomes the limitations
common in rule-based approaches to language process-
ing: it is robust, and the rules are automatically ac-
quired. In addition, the tagger has many advantages
over stochastic taggers, including: a vast reduction in
stored information required, the perspicuity of a small
set of meaningful rules as opposed to the large tables
of statistics needed for stochastic taggers, ease of find-
ing and implementing improvements to the tagger, and
better portability from one tag set or corpus genre to
another.
</bodyText>
<sectionHeader confidence="0.902499" genericHeader="method">
2 The Tagger
</sectionHeader>
<bodyText confidence="0.807780333333333">
The tagger works by automatically recognizing and rem-
edying its weaknesses, thereby incrementally improving
its performance. The tagger initially tags by assigning
each word its most likely tag, estimated by examining a
large tagged corpus, without regard to context. In both
sentences below, run would be tagged as a verb:
</bodyText>
<page confidence="0.952931">
152
</page>
<bodyText confidence="0.999301916666667">
The run lasted thirty minutes. 3. One of the two preceding (following) words is tagged
We run three miles every day.
The initial tagger has two procedures built in to im-
prove performance; both make use of no contextual in-
formation. One procedure is provided with information
that words that were not in the training corpus and are
capitalized tend to be proper nouns, and attempts to fix
tagging mistakes accordingly. This information could be
acquired automatically (see below), but is prespecified
in the current implementation. In addition, there is a
procedure which attempts to tag words not seen in the
training corpus by assigning such words the tag most
common for words ending in the same three letters. For
example, blahblahous would be tagged as an adjective,
because this is the most common tag for words ending
in ous. This information is derived automatically from
the training corpus.
This very simple algorithm has an error rate of about
7.9% when trained on 90% of the tagged Brown Corpus&apos;
[Francis and Kueera 82], and tested on a separate 5% of
the corpus.2 Training consists of compiling a list of the
most common tag for each word in the training corpus.
The tagger then acquires patches to improve its per-
formance. Patch templates are of the form:
</bodyText>
<listItem confidence="0.966561833333333">
• If a word is tagged a and it is in context C, then
change that tag to b, or
• If a word is tagged a and it has lexical property P,
then change that tag to b, or
• If a word is tagged a and a word in region R has
lexical property P, then change that tag to b.
</listItem>
<bodyText confidence="0.992627733333333">
The initial tagger was trained on 90% of the corpus
(the training corpus). 5% was held back to be used for
the patch acquisition procedure (the patch corpus) and
5% for testing. Once the initial tagger is trained, it is
used to tag the patch corpus. A list of tagging errors is
compiled by comparing the output of the tagger to the
correct tagging of the patch corpus. This list consists
of triples &lt; taga,tagb,number &gt;, indicating the number
of times the tagger mistagged a word with taga when
it should have been tagged with tagb in the patch cor-
pus. Next, for each error triple, it is determined which
instantiation of a template from the prespecified set of
pdtch templates results in the greatest error reduction.
Currently, the patch templates are:
Change tag a to tag b when:
</bodyText>
<listItem confidence="0.7770045">
1. The preceding (following) word is tagged z.
2. The word two before (after) is tagged z.
</listItem>
<footnote confidence="0.807785833333333">
The Brown Corpus contains about 1.1 million words from
a variety of genres of written English. There are 192 tags in
the tag set, 96 of which occur more than one hundred times
in the corpus.
2The test set contained text from all genres in the Brown
Corpus.
</footnote>
<listItem confidence="0.916313">
z.
4. One of the three preceding (following) words is
tagged z.
5. The preceding word is tagged z and the following
word is tagged w.
6. The preceding (following) word is tagged z and the
word two before (after) is tagged w.
7. The current word is (is not) capitalized.
</listItem>
<bodyText confidence="0.987963346153846">
8. The previous word is (is not) capitalized.
For each error triple &lt; taga,tagb, number &gt; and
patch, we compute the reduction in error which results
from applying the patch to remedy the mistagging of a
word as taga when it should have been tagged tagb. We
then compute the number of new errors caused by ap-
plying the patch; that is, the number of times the patch
results in a word being tagged as tagb when it should
be tagged taga. The net improvement is calculated by
subtracting the latter value from the former.
For example, when the initial tagger tags the patch
corpus, it mistags 159 words as verbs when they should
be nouns. If the patch change the tag from verb to noun
if one of the two preceding words is tagged as a deter-
miner is applied, it corrects 98 of the 159 errors. How-
ever, it results in an additional 18 errors from changing
tags which really should have been verb to noun. This
patch results in a net decrease of 80 errors on the patch
corpus.
The patch which results in the greatest improvement
to the patch corpus is added to the list of patches. The
patch is then applied in order to improve the tagging of
the patch corpus, and the patch acquisition procedure
continues.
The first ten patches found by the system are listed
below3.
</bodyText>
<listItem confidence="0.9998313">
(1) TO IN NEXT-TAG AT
(2) VBN VBD PREV-WORD-IS-CAP YES
(3) VBD VBN PREV-1-0R-2-0R-3-TAG HVD
(4) VB NN PREV-1-0R-2-TAG AT
(5) NN VB PREY-TAG TO
(6) TO IN NEXT-WORD-IS-CAP YES
(7) NN VB PREV-TAG MD
(8) PPS PPO NEXT-TAG.
(9) VBN VBD PREV-TAG PPS
(10) NP NN CURRENT-WORD-IS-CAP NO
</listItem>
<bodyText confidence="0.996365333333333">
The first patch states that if a word is tagged TO
and the following word is tagged AT, then switch the
tag from TO to IN. This is because a noun phrase is
</bodyText>
<footnote confidence="0.9236116">
3AT = article, HVD = had, IN = preposition, MD =
modal, NN = sing. noun, NP = proper noun, PPS = 3rd
sing. nom. pronoun, PPO = obj. personal pronoun, TO =
infinitive to, VB = verb, VBN = past part. verb, VBD =
past verb.
</footnote>
<page confidence="0.999138">
153
</page>
<bodyText confidence="0.999673708333333">
much more likely to immediately follow a preposition
than to immediately follow infinitive TO. The second
patch states that a tag should be switched from VBN
to VBD if the preceding word is capitalized. This patch
arises from two facts: the past verb tag is more likely
than the past participle verb tag after a proper noun,
and is also the more likely tag for the second word of the
sentence.4 The third patch states that VBD should be
changed to VBN if any of the preceding three words are
tagged HVD.
Once the list of patches has been acquired, new text
can be tagged as follows. First, tag the text using the
basic lexical tagger. Next, apply each patch in turn to
the corpus to decrease the error rate. A patch which
changes the tagging of a word from a to b only applies
if the word has been tagged b somewhere in the training
corpus.
Note that one need not be too careful when construct-
ing the list of patch templates. Adding a bad template
to the list will not worsen performance. If a template
is bad, then no rules which are instantiations of that
template will appear in the final list of patches learned
by the tagger. This makes it easy to experiment with
extensions to the tagger.
</bodyText>
<sectionHeader confidence="0.999792" genericHeader="evaluation">
3 Results
</sectionHeader>
<bodyText confidence="0.99999375862069">
The tagger was tested on 5% of the Brown Corpus in-
cluding sections from every genre. First, the test corpus
was tagged by the simple lexical tagger. Next, each of
the patches was in turn applied to the corpus. Below is a
graph showing the improvement in accuracy from apply-
ing patches. It is significant that with only 71 patches,
an error rate of 5.1% was obtained&apos;. Of the 71 patches,
66 resulted in a reduction in the number of errors in the
test corpus, 3 resulted in no net change, and 2 resulted
in a higher number of errors. Almost all patches which
were effective on the training corpus were also effective
on the test corpus.
Unfortunately, it is difficult to compare our results
with other published results. In [Meteer et at. 91], an
error rate of 3-4% on one domain, Wall Street Journal
articles and 5.6% on another domain, texts on terrorism
in Latin American countries, is quoted. However, both
the domains and the tag set are different from what we
use. [Church 88] reports an accuracy of &amp;quot;95-99% cor-
rect, depending on the definition of correct&amp;quot;. We imple-
mented a version of the algorithm described by Church.
When trained and tested on the same samples used in
our experiment, we found the error rate to be about
4.5%. [DeRose 88] quotes a 4% error rate; however, the
sample used for testing was part of the training corpus.
[Garside et al. 87] reports an accuracy of 96-97%. Their
probabilistic tagger has been augmented with a hand-
crafted procedure to pretag problematic &amp;quot;idioms&amp;quot;. This
procedure, which requires that a list of idioms be la-
</bodyText>
<footnote confidence="0.9915334">
4Both the first word of a sentence and proper nouns are
capitalized.
5We ran the experiment three times. Each time we divided
the corpus into training, patch and test sets in a different way.
All three runs gave an error rate of 5%.
</footnote>
<note confidence="0.756133">
Patch Application and Error Reduction
</note>
<subsectionHeader confidence="0.419193">
Number ot Patches
</subsectionHeader>
<bodyText confidence="0.967497576923077">
boriously created by hand, contributes 3% toward the
accuracy of their tagger, according to [DeRose 88]. The
idiom list would have to be rewritten if one wished to use
this tagger for a different tag set or a different corpus.
It is interesting to note that the information contained
in the idiom list can be automatically acquired by the
rule-based tagger. For example, their tagger had diffi-
culty tagging as old as. An explicit rule was written to
pretag as old as with the proper tags. According to the
tagging scheme of the Brown Corpus, the first as should
be tagged as a qualifier, and the second as a subordi-
nating conjunction. In the rule-based tagger, the most
common tag for as is subordinating conjunction. So ini-
tially, the second as is tagged correctly and the first as is
tagged incorrectly. To remedy this, the system acquires
the patch: if the current word is tagged as a subordinat-
ing conjunction, and so is the word two positions ahead,
then change the tag of the current word to gualifier.6
The rule-based tagger has automatically learned how to
properly tag this &amp;quot;idiom.&amp;quot;
Regardless of the precise rankings of the various tag-
gers, we have demonstrated that a simple rule-based tag-
ger with very few rules performs on par with stochastic
taggers.
6This was one of the 71 patches acquired by the rule-based
tagger.
</bodyText>
<page confidence="0.999602">
154
</page>
<sectionHeader confidence="0.999458" genericHeader="conclusions">
4 Conclusions
</sectionHeader>
<bodyText confidence="0.999985972222222">
We have presented a simple part of speech tagger which
performs as well as existing stochastic taggers, but has
significant advantages over these taggers.
The tagger is extremely portable. Many of the higher
level procedures used to improve the performance of
stochastic taggers would not readily transfer over to a
different tag set or genre, and certainly would not trans-
fer over to a different language. Everything except for
the proper noun discovery procedure is automatically ac-
quired by the rule-based tagger7, making it much more
portable than a stochastic tagger. If the tagger were
trained on a different corpus, a different set of patches
suitable for that corpus would be found automatically.
Large tables of statistics are not needed for the rule-
based tagger. In a stochastic tagger, tens of thousands
of lines of statistical information are needed to capture
contextual information. This information is usually a ta-
ble of trigram statistics, indicating for all tags taga, tag&amp;
and tag, the probability that tag, follows taga and tagb.
In the rule-based tagger, contextual information is cap-
tured in fewer than eighty rules. This makes for a much
more perspicuous tagger, aiding in better understanding
and simplifying further development of the tagger. Con-
textual information is expressed in a much more compact
and understandable form. As can be seen from compar-
ing error rates, this compact representation of contextual
information is just as effective as the information hidden
in the large tables of contextual probabilities.
Perhaps the biggest contribution of this work is in
demonstrating that the stochastic method is not the only
viable approach for part of speech tagging. The fact that
the simple rule-based tagger can perform so well should
offer encouragement for researchers to further explore
rule-based tagging, searching for a better and more ex-
pressive set of patch templates and other variations on
this simple but effective theme.
</bodyText>
<sectionHeader confidence="0.994651" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.986817339622641">
[Church 88] Church, K. A Stochastic Parts Program and
Noun Phrase Parser for Unrestricted Text.
In Proceedings of the Second Conference on
Applied Natural Language Processing, ACL,
136-143, 1988.
[Cutting et al. 92] Cutting, D., Kupiec, J., Pederson, J.
and Sibun, P. A Practical Part-of-Speech
Tagger. In Proceedings of the Third Confer-
ence on Applied Natural Language Process-
ing, ACL, 1992.
[DeRose 88] DeRose, S.J. Grammatical Category Dis-
ambiguation by Statistical Optimization.
Computational Linguistics 14: 31-39, 1988.
[Deroualt and Merialdo 86] Deroualt, A. and Merialdo,
B. Natural language modeling for phoneme-
to-text transcription. IEEE Transactions on
Pattern Analysis and Machine Intelligence,
Vol. PAMI-8, No. 6, 742-749, 1986.
7And even this could be learned by the tagger.
[Francis and Ku6era 82] Francis,
W. Nelson and KuCera, Henry, Frequency
analysis of English usage. Lexicon and gram-
mar. Houghton Mifflin, Boston, 1982.
[Garside et al. 87] Garside, R., Leech, G. St Sampson,
G. The Computational Analysis of English:
A Corpus-Based Approach. Longman: Lon-
don, 1987.
[Green and Rubin 71] Green, B. and Rubin, G. Auto-
mated Grammatical Tagging of English. De-
partment of Linguistics, Brown University,
1971.
[Hindle 89] Hindle, D. Acquiring disambiguation rules
from text. Proceedings of the 27th Annual
Meeting of the Association for Computa-
tional Linguistics, 1989.
[Jelinek 85] Jelinek, F. Markov source modeling of text
generation. In J. K. Skwirzinski, ed., Im-
pact of Processing Techniques on Commu-
nication, Dordrecht, 1985.
[Klein and Simmons 63] Klein, S. and Simmons, R.F.
A Computational Approach to Grammatical
Coding of English Words. JA CM 10: 334-47.
1963.
[Kupiec 89] Kupiec, J. Augmenting a hidden Markov
model for phrase-dependent word tagging.
In Proceedings of the DARPA Speech and
Natural Language Workshop, Morgan Kauf-
mann, 1989.
[Meteer et al. 91] Meteer, M., Schwartz, R., and
Weischedel, R,. Empirical Studies in Part
of Speech Labelling, Proceedings of the
DARPA Speech and Natural Language
Workshop, Morgan Kaufmann, 1991.
</reference>
<page confidence="0.999013">
155
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.972732">
<title confidence="0.99976">A Simple Rule-Based Part of Speech Tagger</title>
<author confidence="0.995788">Eric Brill</author>
<affiliation confidence="0.9998895">Department of Computer Science University of Pennsylvania</affiliation>
<address confidence="0.991809">Philadelphia, Pennsylvania 19104 U.S.A.</address>
<email confidence="0.999769">brillOunagi.cis.upenn.edu</email>
<abstract confidence="0.99974576">Automatic part of speech tagging is an area of natural language processing where statistical techniques have been more successful than rulebased methods. In this paper, we present a simple rule-based part of speech tagger which automatically acquires its rules and tags with accuracy comparable to stochastic taggers. The rule-based tagger has many advantages over these taggers, including: a vast reduction in stored information required, the perspicuity of a small set of meaningful rules, ease of finding and implementing improvements to the tagger, and better portability from one tag set, corpus genre or language to another. Perhaps the biggest contribution of this work is in demonstrating that the stochastic method is not the only viable method for part of speech tagging. The fact that a simple rule-based tagger that automatically learns its rules can perform so well should offer encouragement for researchers to further explore rule-based tagging, searching for a better and more expressive set of rule templates and other variations on the simple but effective theme described below.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>K Church</author>
</authors>
<title>A Stochastic Parts Program and Noun Phrase Parser for Unrestricted Text.</title>
<date>1988</date>
<booktitle>In Proceedings of the Second Conference on Applied Natural Language Processing, ACL,</booktitle>
<pages>136--143</pages>
<marker>[Church 88]</marker>
<rawString>Church, K. A Stochastic Parts Program and Noun Phrase Parser for Unrestricted Text. In Proceedings of the Second Conference on Applied Natural Language Processing, ACL, 136-143, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Cutting</author>
<author>J Kupiec</author>
<author>J Pederson</author>
<author>P Sibun</author>
</authors>
<title>A Practical Part-of-Speech Tagger.</title>
<date>1992</date>
<booktitle>In Proceedings of the Third Conference on Applied Natural Language Processing, ACL,</booktitle>
<marker>[Cutting et al. 92]</marker>
<rawString>Cutting, D., Kupiec, J., Pederson, J. and Sibun, P. A Practical Part-of-Speech Tagger. In Proceedings of the Third Conference on Applied Natural Language Processing, ACL, 1992.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S J DeRose</author>
</authors>
<title>Grammatical Category Disambiguation by Statistical Optimization.</title>
<date>1988</date>
<journal>Computational Linguistics</journal>
<volume>14</volume>
<pages>31--39</pages>
<marker>[DeRose 88]</marker>
<rawString>DeRose, S.J. Grammatical Category Disambiguation by Statistical Optimization. Computational Linguistics 14: 31-39, 1988.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Deroualt</author>
<author>B Merialdo</author>
</authors>
<title>Natural language modeling for phonemeto-text transcription.</title>
<date>1986</date>
<journal>IEEE Transactions on Pattern Analysis and Machine Intelligence,</journal>
<volume>8</volume>
<pages>742--749</pages>
<marker>[Deroualt and Merialdo 86]</marker>
<rawString>Deroualt, A. and Merialdo, B. Natural language modeling for phonemeto-text transcription. IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. PAMI-8, No. 6, 742-749, 1986. 7And even this could be learned by the tagger.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Nelson Francis</author>
<author>Henry KuCera</author>
</authors>
<title>Frequency analysis of English usage. Lexicon and grammar.</title>
<date>1982</date>
<location>Houghton Mifflin, Boston,</location>
<marker>[Francis and Ku6era 82]</marker>
<rawString>Francis, W. Nelson and KuCera, Henry, Frequency analysis of English usage. Lexicon and grammar. Houghton Mifflin, Boston, 1982.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Garside</author>
<author>G St Sampson Leech</author>
<author>G</author>
</authors>
<title>The Computational Analysis of English: A Corpus-Based Approach.</title>
<date>1987</date>
<location>Longman: London,</location>
<marker>[Garside et al. 87]</marker>
<rawString>Garside, R., Leech, G. St Sampson, G. The Computational Analysis of English: A Corpus-Based Approach. Longman: London, 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Green</author>
<author>G Rubin</author>
</authors>
<title>Automated Grammatical Tagging of</title>
<date>1971</date>
<institution>English. Department of Linguistics, Brown University,</institution>
<marker>[Green and Rubin 71]</marker>
<rawString>Green, B. and Rubin, G. Automated Grammatical Tagging of English. Department of Linguistics, Brown University, 1971.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Hindle</author>
</authors>
<title>Acquiring disambiguation rules from text.</title>
<date>1989</date>
<booktitle>Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<marker>[Hindle 89]</marker>
<rawString>Hindle, D. Acquiring disambiguation rules from text. Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics, 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Jelinek</author>
</authors>
<title>Markov source modeling of text generation.</title>
<date>1985</date>
<booktitle>Impact of Processing Techniques on Communication,</booktitle>
<editor>In J. K. Skwirzinski, ed.,</editor>
<location>Dordrecht,</location>
<marker>[Jelinek 85]</marker>
<rawString>Jelinek, F. Markov source modeling of text generation. In J. K. Skwirzinski, ed., Impact of Processing Techniques on Communication, Dordrecht, 1985.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Klein</author>
<author>R F Simmons</author>
</authors>
<title>A Computational Approach to Grammatical Coding of English Words.</title>
<date>1963</date>
<journal>JA CM</journal>
<volume>10</volume>
<pages>334--47</pages>
<marker>[Klein and Simmons 63]</marker>
<rawString>Klein, S. and Simmons, R.F. A Computational Approach to Grammatical Coding of English Words. JA CM 10: 334-47. 1963.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Kupiec</author>
</authors>
<title>Augmenting a hidden Markov model for phrase-dependent word tagging.</title>
<date>1989</date>
<booktitle>In Proceedings of the DARPA Speech and Natural Language Workshop,</booktitle>
<publisher>Morgan Kaufmann,</publisher>
<marker>[Kupiec 89]</marker>
<rawString>Kupiec, J. Augmenting a hidden Markov model for phrase-dependent word tagging. In Proceedings of the DARPA Speech and Natural Language Workshop, Morgan Kaufmann, 1989.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Meteer</author>
<author>R Schwartz</author>
<author>R Weischedel</author>
</authors>
<title>Empirical Studies in Part of Speech Labelling,</title>
<date>1991</date>
<booktitle>Proceedings of the DARPA Speech and Natural Language Workshop,</booktitle>
<publisher>Morgan Kaufmann,</publisher>
<marker>[Meteer et al. 91]</marker>
<rawString>Meteer, M., Schwartz, R., and Weischedel, R,. Empirical Studies in Part of Speech Labelling, Proceedings of the DARPA Speech and Natural Language Workshop, Morgan Kaufmann, 1991.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>