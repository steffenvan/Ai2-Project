<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.9959355">
Tree-Adjoining Grammars Are Not
Closed Under Strong Lexicalization
</title>
<author confidence="0.999665">
Marco Kuhlmann*
</author>
<affiliation confidence="0.996641">
Uppsala University
</affiliation>
<author confidence="0.994421">
Giorgio Satta**
</author>
<affiliation confidence="0.981896">
University of Padua
</affiliation>
<bodyText confidence="0.995228">
A lexicalized tree-adjoining grammar is a tree-adjoining grammar where each elementary tree
contains some overt lexical item. Such grammars are being used to give lexical accounts of
syntactic phenomena, where an elementary tree defines the domain of locality of the syntactic
and semantic dependencies of its lexical items. It has been claimed in the literature that for
every tree-adjoining grammar, one can construct a strongly equivalent lexicalized version. We
show that such a procedure does not exist: Tree-adjoining grammars are not closed under strong
lexicalization.
</bodyText>
<sectionHeader confidence="0.981149" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999927368421053">
Many contemporary linguistic theories give lexical accounts of syntactic phenomena,
where complex syntactic structures are analyzed as the combinations of elementary
structures taken from a finite lexicon. In the computational linguistics community, this
trend has been called lexicalization, and has been extensively investigated since the
1990s. From a mathematical perspective, the main question that arises in the context of
lexicalization is whether the restriction of a given class of grammars to lexicalized form
has any impact on the generative or computational properties of the formalism.
As a simple example, consider the class of context-free grammars (CFGs). Recall
that a CFG is in Greibach normal form if the right-hand side of every rule in the gram-
mar starts with a terminal symbol, representing an overt lexical item. Although several
procedures for casting a CFG in Greibach normal form exist, all of them substantially
alter the structure of the parse trees of the source grammar. In technical terms, these
procedures provide a weak lexicalization of the source grammar (because the string
language is preserved) but not a strong lexicalization (because the sets of parse trees
that the two grammars assign to the common string language are not the same). Strong
lexicalization is highly relevant for natural language processing, however, where the
parse tree assigned by a grammar represents the syntactic analysis of interest, and is
used by other modules such as semantic interpretation or translation. In this article, we
investigate the problem of strong lexicalization.
</bodyText>
<note confidence="0.788168">
* Department of Linguistics and Philology, Box 635, 75126 Uppsala, Sweden.
</note>
<email confidence="0.872415">
E-mail: marco.kuhlmann@lingfil.uu.se.
</email>
<note confidence="0.545066">
** Department of Information Engineering, via Gradenigo 6/A, 35131 Padova, Italy.
</note>
<email confidence="0.90836">
E-mail: satta@dei.unipd.it.
</email>
<note confidence="0.859303">
Submission received: 16 July 2011; accepted for publication: 10 September 2011.
© 2012 Association for Computational Linguistics
Computational Linguistics Volume 38, Number 3
</note>
<bodyText confidence="0.99993017948718">
Two important results about strong lexicalization have been obtained by Schabes
(1990). The first result is that CFGs are not closed under strong lexicalization. (The
author actually shows a stronger result involving a formalism called tree substitution
grammar, as will be discussed in detail in Section 3.) Informally, this means that we
cannot cast a CFG G in a special form in which each rule has an overt lexical item in its
right-hand side, under the restriction that the new grammar generates exactly the same
set of parse trees as G. As a special case, this entails that no procedure can cast a CFG
in Greibach normal form, under the additional condition that the generated parse trees
are preserved.
The second result obtained by Schabes concerns the relation between CFGs and the
class of tree-adjoining grammars (TAGs) (Joshi, Levy, and Takahashi 1975; Joshi and
Schabes 1997). A TAG consists of a finite set of elementary trees, which are phrase
structure trees of unbounded depth, and allows for the combination of these trees by
means of two operations called substitution and adjunction (described in more detail in
the next section). A lexicalized TAG is one where each elementary tree contains at least
one overt lexical item called the anchor of the tree; the elementary tree is intended to
encapsulate the syntactic and semantic dependencies of its anchor. Because CFG rules
can be viewed as elementary trees of depth one, and because context-free rewriting can
be simulated by the substitution operation defined for TAGs, we can view any CFG as
a special TAG. Under this view, one can ask whether lexicalized TAGs can provide a
strong lexicalization of CFGs. Schabes’ second result is that this is indeed the case. This
means that, given a CFG G, one can always construct a lexicalized TAG generating the
same set of parse trees as G, and consequently the same string language.
Following from this result, there arose the possibility of establishing a third result,
stating that TAGs are closed under strong lexicalization. Schabes (1990) states that this
is the case, and provides an informal argument to justify the claim. The same claim
still appears in two subsequent publications (Joshi and Schabes 1992, 1997), but no
precise proof of it has appeared until now. We speculate that the claim could be due
to the fact that adjunction is more powerful than substitution with respect to weak
generative capacity. It turns out, however, that when it comes to strong generative
capacity, adjunction also shares some of the restrictions of substitution. This observation
leads to the main result of this article: TAGs are not closed under strong lexicalization.
In other words, there are TAGs that lack a strongly equivalent lexicalized version.
In the same line of investigation, Schabes and Waters (1995) introduce a restricted
variant of TAG called tree insertion grammars (TIGs). This formalism severely restricts
the adjunction operation originally defined for TAGs, in such a way that the class of
generated string languages, as well as the class of generated parse trees, are the same
as those of CFGs. Schabes and Waters then conjecture that TIGs are closed under strong
lexicalization. In this article we also disprove their conjecture.
</bodyText>
<sectionHeader confidence="0.959864" genericHeader="keywords">
2. Preliminaries
</sectionHeader>
<bodyText confidence="0.999917666666667">
We assume familiarity with the TAG formalism; for a survey, we refer the reader to
Joshi and Schabes (1997). We briefly introduce here the basic terminology and notation
for TAG that we use in this article.
</bodyText>
<subsectionHeader confidence="0.972555">
2.1 Basic Definitions
</subsectionHeader>
<bodyText confidence="0.993523">
A TAG is a rewriting system that derives trees starting from a finite set of elementary
trees. Elementary trees are trees of finite but arbitrary depth, with internal nodes labeled
</bodyText>
<page confidence="0.989118">
618
</page>
<bodyText confidence="0.976697564102564">
Kuhlmann and Satta TAGs Are Not Closed Under Strong Lexicalization
with nonterminal symbols and frontier nodes labeled with terminal and nonterminal
symbols. Each elementary tree is either an initial tree or else an auxiliary tree. Initial
trees serve as the starting point for derivations, and may combine with other trees by
means of an operation called substitution. Tree substitution replaces a node labeled
with a nonterminal A in the frontier of some target tree with an initial tree whose
root is labeled with A. The nodes that are the target of the substitution operation are
identified by a down arrow (, ). The substitution operation is illustrated in the left half
of Figure 1.
Auxiliary trees are elementary trees in which a special node in the frontier has the
same nonterminal label as the root node. This special node is called the foot node and is
identified by an asterisk (*). Auxiliary trees may combine with other trees by means of
an operation called adjunction. The adjunction operation entails splitting some target
tree at an internal node with label A, and inserting an auxiliary tree whose root (and
foot) node is labeled with A. The adjunction operation is illustrated in the right half of
Figure 1.
A derivation in a TAG can be specified by a derivation tree d; this is a rooted
tree whose nodes are labeled with (instances of) elementary trees, and whose edges
are labeled with (addresses of) nodes at which substitution or adjunction takes place.
More specifically, an edge v -+u v&apos; in d represents the information that the elementary
tree at v&apos; is substituted at or adjoined into node u of the elementary tree at v. When
we combine the elementary trees of our TAG as specified by d, we obtain a (unique)
phrase structure tree called the derived tree associated with d, which we denote
as t(d).
We use the symbol -y as a variable ranging over elementary trees, oc as a variable
ranging over initial trees, and R as a variable ranging over auxiliary trees. We also
use the symbols u and v as variables ranging over nodes of generic trees (elementary,
derived, or derivation trees). For an elementary tree -y, a derivation tree d is said to have
type -y if the root node of d is labeled with -y. A derivation tree d is called sentential if d is
of some type -y, and the root node of -y is labeled with the start symbol of the grammar,
denoted as S.
A node u in an elementary tree -y may be annotated with an adjunction constraint,
which for purposes here is a label in the set {NA, OA}. The label NA denotes Null
Adjunction, forbidding adjunction at u; the label OA denotes Obligatory Adjunction,
forcing adjunction at u. A derivation tree d is called saturated if, at each node v of d
there is an arc v -+u v&apos;, for some v&apos;, for every node u of the elementary tree at v that
requires substitution or is annotated with an OA constraint.
For a TAG G, we denote by T(G) the set of all the derived trees t such that t = t(d) for
some sentential and saturated derivation tree d obtained in G. Each such derived tree is
</bodyText>
<figureCaption confidence="0.882881">
Figure 1
</figureCaption>
<reference confidence="0.269855">
Combination operations in TAG.
</reference>
<page confidence="0.9826">
619
</page>
<note confidence="0.281861">
Computational Linguistics Volume 38, Number 3
</note>
<bodyText confidence="0.994905666666667">
(uniquely) associated with a string y(t) called the yield of t, obtained by concatenating
all terminal symbols labeling the frontier of t, from left to right. The string language
generated by G is the set
</bodyText>
<equation confidence="0.993911">
L(G) = { y(t)  |t E T(G) }
</equation>
<bodyText confidence="0.999307166666667">
A TAG G is said to be finitely ambiguous if, for every string w E L(G), the subset of
those trees in T(G) that have w as their yield is finite.
An elementary tree -y of G is called useless if -y never occurs in a sentential and sat-
urated derivation tree of G, that is, if no sentential and saturated derivation of G uses -y.
A grammar G is called reduced if none of its elementary trees is useless. Throughout
this article we shall assume that the grammars that we deal with are reduced.
</bodyText>
<subsectionHeader confidence="0.987611">
2.2 Lexicalization
</subsectionHeader>
<bodyText confidence="0.999680136363637">
In a tree, a node labeled with a terminal symbol is called a lexical node. A TAG is
called lexicalized if each of its elementary trees has at least one lexical node. Observe
that a lexicalized grammar cannot generate the empty string, denoted by e, because
every derived tree yields at least one lexical element. Similarly, a lexicalized grammar
is always finitely ambiguous, because the length of the generated strings provides an
upper bound on the size of the associated derived trees. Let 9 and 9&apos; be two subclasses
of the class of all TAGs. We say that 9&apos; strongly lexicalizes 9, if, for every grammar
G E 9 that is finitely ambiguous and that satisfies e E� L(G), there exists a lexicalized
grammar G&apos; E 9&apos; such that T(G&apos;) = T(G). We also say that 9 is closed under strong
lexicalization if the class 9 strongly lexicalizes itself.
Using this terminology, we can now restate the two main results obtained by
Schabes (1990) about strong lexicalization for subclasses of TAGs, already mentioned in
the Introduction. The first result states that the class of CFGs is not closed under strong
lexicalization. Here we view a CFG as a special case of a TAG using only substitution
and elementary trees of depth one. Informally, this means that we cannot cast a CFG
G in a special form in which each rule has an overt lexical item in its right-hand side,
under the restriction that the new grammar generates exactly the same tree set as G. The
second result is that the class of TAGs strongly lexicalizes the class of tree substitution
grammars (TSGs). The latter class is defined as the class of all TAGs that use substitution
as the only tree combination operation, and thus includes all context-free grammars.
This means that, given a TSG or a CFG G, we can always construct a TAG that is
lexicalized and that generates exactly the same tree set as G.
</bodyText>
<listItem confidence="0.794219">
3. Tree Substitution Grammars Are Not Closed Under Strong Lexicalization
</listItem>
<bodyText confidence="0.984923285714286">
Before turning to our main result in Section 4, we find it useful to technically revisit the
related result for TSGs.
Theorem 1
Tree substitution grammars are not closed under strong lexicalization.
To prove this result, Schabes (1990) uses a proof by contradiction: The author considers a
specific TSG G1, reported in Figure 2. It is not difficult to see that G1 is finitely ambiguous
and that e E� L(G1). The author then assumes that G1 can be lexicalized by another TSG,
</bodyText>
<page confidence="0.978832">
620
</page>
<note confidence="0.675615">
Kuhlmann and Satta TAGs Are Not Closed Under Strong Lexicalization
</note>
<figureCaption confidence="0.964327">
Figure 2
</figureCaption>
<bodyText confidence="0.99040175">
The counterexample tree substitution grammar G1.
and derives a contradiction. We provide here an alternative, direct proof of Theorem 1.
This alternative proof will be generalized in Section 4 to obtain the main result of this
article.
We use the following notation. For a derived tree t and a terminal symbol a, we
write Nodes(a, t) to denote the set of all nodes in t that are labeled with a. Furthermore,
for a node u of t we write depth(u, t) to denote the length of the unique path from the
root node of t leading to u.
</bodyText>
<subsectionHeader confidence="0.957781">
3.1 Intuition
</subsectionHeader>
<bodyText confidence="0.9999795">
In order to convey the basic idea behind Schabes’s proof and our alternative version
herein, we first consider a specific candidate grammar for the lexicalization of G1. For
example, one might think that the following TSG Gi lexicalizes G1:
This grammar is obtained from G1 by taking the lexicalized tree α1, as well as every
elementary tree that can be obtained by substituting α1 into the non-lexicalized tree α2.
The grammar Gi only generates a subset of the trees generated by G1, however. The
following tree, for example, cannot be generated by Gi:
To see this, we reason as follows. Consider a lexical node v in an elementary tree -y
of Gi, and let t be a tree obtained by substituting some elementary tree into -y. Because
substitution takes place at the frontier of -y, depth(v, t) must be the same as depth(v,-y).
More generally, the depth of a lexical node in an elementary tree -y is the same in all trees
derived starting from -y. Because the maximal depth of a lexical node in an elementary
</bodyText>
<page confidence="0.985778">
621
</page>
<note confidence="0.464605">
Computational Linguistics Volume 38, Number 3
</note>
<bodyText confidence="0.942559">
tree of Gi is 2, we deduce that every tree generated by Gi contains a lexical node with
depth at most 2. In contrast, all lexical nodes in the tree t1 have depth 3. Therefore the
tree t1 is not generated by Gi.
</bodyText>
<subsectionHeader confidence="0.996886">
3.2 Main Part
</subsectionHeader>
<bodyText confidence="0.993111333333333">
We now generalize this argument to arbitrary candidate grammars. For this, we are
interested in the following class 91 of all (reduced) TSGs that derive a subset of the trees
derived by G1:
</bodyText>
<equation confidence="0.871517">
91 = { G  |G is a TSG, T(G) C T(G1) }
</equation>
<bodyText confidence="0.9996435">
For a grammar G G 91, we define the d-index of G as the maximum in N U {oo} of the
minimal depths of a-labeled nodes in trees derived by G:
</bodyText>
<equation confidence="0.9768905">
d-index(G) = max min depth(v, t)
t∈T(G) v∈Nodes(a,t)
</equation>
<bodyText confidence="0.953850809523809">
Note that, for two grammars G, G&apos; G 91, T(G) = T(G&apos;) implies that G and G&apos; have the
same d-index. This means that two grammars in 91 with different d-indices cannot gen-
erate the same tree language. Then Theorem 1 directly follows from the two statements
in the next lemma.
Lemma 1
The grammar G1 has infinite d-index. Every lexicalized grammar in 91 has finite
d-index.
Proof
The first statement is easy to verify: Using longer and longer derivations, the mini-
mal depth of an a-labeled node in the corresponding tree can be pushed beyond any
bound.
To prove the second statement, let G be a lexicalized grammar in 91, and let
t G T(G). The tree t is derived starting from some initial tree; call this tree α. Because G
is lexicalized, at least one of the a-labeled nodes in Nodes(a, t) is contributed by α. Let va
be any such node in t, and let ua be the node of α that corresponds to va. Remember
that the only tree combination operation allowed in a TSG derivation is substitution.
Because substitution can only take place at the frontier of a derived tree, we must
conclude that depth(va, t) = depth(ua, α). There are only finitely many initial trees in G,
therefore depth(ua, α) must be upper bounded by some constant depending only on G,
and the same must hold for depth(va, t). Lastly, because t has been arbitrarily chosen in
T(G), we must conclude that d-index(G) is finite. ■
</bodyText>
<subsectionHeader confidence="0.99915">
3.3 Lexicalization of Tree Substitution Grammars
</subsectionHeader>
<bodyText confidence="0.9979515">
What we have just seen is that lexicalized TSGs are unable to derive the tree structures
generated by the grammar G1 in Figure 2. This is essentially because tree substitution
cannot stretch the depth of a lexical node in an elementary tree. In contrast, tree adjunc-
tion allows the insertion of additional structure at internal nodes of elementary trees,
</bodyText>
<page confidence="0.976413">
622
</page>
<note confidence="0.555276">
Kuhlmann and Satta TAGs Are Not Closed Under Strong Lexicalization
</note>
<bodyText confidence="0.851618692307692">
and enables TAGs to provide a strong lexicalization of TSGs. For example, the following
TAG G1 lexicalizes G1.
Note that this grammar looks almost like Gi, except that adjunction now is allowed at
internal nodes, and substitution nodes have become foot nodes. The following deriva-
tion tree witnesses that the tree t1 can be derived in G&amp;quot; . We write 0 to denote the root
node of an elementary tree, and 1 to denote its leftmost child.
α6 →0 01 →0 01 →1 01
Schabes (1990) provides a general procedure for constructing a lexicalized TAG for a
given context-free grammar.
4. Tree-Adjoining Grammars Are Not Closed Under Strong Lexicalization
In this section we develop the proof of the main result of this article.
Theorem 2
Tree-adjoining grammars are not closed under strong lexicalization.
</bodyText>
<subsectionHeader confidence="0.974994">
4.1 Proof Idea
</subsectionHeader>
<bodyText confidence="0.999947333333333">
The basic idea underlying the proof of Theorem 2 is essentially the same as the one used
in the proof of Theorem 1 in Section 3. Some discussion of this issue is in order at this
point. In the previous section, we have seen that adjunction, in contrast to substitution,
allows the insertion of additional structure at internal nodes of elementary trees, and
enables TAGs to provide a strong lexicalization of TSGs. One might now be tempted to
believe that, because the depth-based argument that we used in the proof of Lemma 1
can no longer be applied to TAGs, they might be closed under strong lexicalization.
There is a perspective under which adjunction quite closely resembles substitution,
however. Let us first look at substitution as an operation on the yield of the derived
tree. Under this view, substitution is essentially context-free rewriting: It replaces a non-
terminal symbol in the yield of a derived tree with a new string consisting of terminals
and nonterminals, representing the yield of the tree that is substituted. Under the same
perspective, adjunction is more powerful than tree substitution, as is well known. But
just as substitution can be seen as context-free rewriting on tree yields, adjunction can
be seen as context-free rewriting on the paths of trees: It replaces a nonterminal symbol
in some path of a derived tree with a string representing the spine of the tree that is
adjoined—the unique path from the root node of the tree to the foot node.
This observation gives us the following idea for how to lift the proof of Theorem 1
to TAGs. We will specify a TAG G2 such that the paths of the derived trees of G2 encode
in a string form the derived trees of the counterexample grammar G1. This encoding
is exemplified in Figure 3. Each internal node of a derived tree of G1 is represented in
</bodyText>
<page confidence="0.995842">
623
</page>
<figure confidence="0.829251">
Computational Linguistics Volume 38, Number 3
</figure>
<figureCaption confidence="0.9769">
Figure 3
</figureCaption>
<bodyText confidence="0.999763583333333">
A derived tree of G1, and the corresponding encoding, drawn from left to right. Every
internal node of the original tree is represented by a pair of matching brackets [S (, ) S].
The correspondence is indicated by the numerical subscripts.
the spine of the corresponding derived tree of G2 as a pair of matching brackets. By
our encoding, any TAG generating trees from T(G2) will have to exploit adjunction at
nodes in the spine of its elementary trees, and will therefore be subject to essentially the
same restrictions as the grammar G1 which used substitution at nodes in the yield. This
will allow us to lift our argument from Lemma 1. The only difference is that instead of
working with the actual depth of a lexical node in a tree t ∈ T(G2), we will now need
to work with the depth of the node in the encoded tree. As will be explained later, this
measure can be recovered as the excess of left parentheses over right parentheses in the
spine above the lexical node.
</bodyText>
<subsectionHeader confidence="0.928197">
4.2 Preliminaries
</subsectionHeader>
<bodyText confidence="0.998612333333333">
As already mentioned, our proof of Theorem 2 follows the same structure as our proof of
Theorem 1. As our counterexample grammar, we use the grammar G2 given in Figure 4;
this grammar generates the encodings of the derived trees of G1 that we discussed
previously. Note that the left parenthesis symbol ‘(’ and the right parenthesis symbol
‘)’ are nonterminal symbols. As with the grammar G1 before, it is not difficult to see
that G2 is finitely ambiguous and that ε ∈/ L(G2).
</bodyText>
<figureCaption confidence="0.593344">
Figure 4
</figureCaption>
<bodyText confidence="0.824964">
The counterexample TAG G2.
</bodyText>
<page confidence="0.992053">
624
</page>
<note confidence="0.534234">
Kuhlmann and Satta TAGs Are Not Closed Under Strong Lexicalization
</note>
<bodyText confidence="0.995288428571429">
Grammar G2 derives trees that we call right spinal: Each node in such a tree has
at most two children, and the left child of every node with two children is always a
leaf node. The path from the root node of a right spinal tree t to the rightmost leaf
of t is called spine. To save some space, in the following we write right spinal trees
horizontally and from left to right, as already done in Figure 3. Thus the grammar G2
can alternatively be written as follows:
For a node u in a right spinal tree derived by G2, we define
</bodyText>
<equation confidence="0.999453333333333">
c(u) = { +1 if u is labeled with (
0 if u is labeled with S or a
−1 if u is labeled with )
</equation>
<bodyText confidence="0.9990105">
We exploit this function to compute the excess of left parentheses over right parentheses
in a sequence of nodes, and write:
</bodyText>
<equation confidence="0.995388666666667">
n
excess((u1,...,un)) = c(ui)
i=1
</equation>
<bodyText confidence="0.974429210526316">
Let t be some right spinal tree in T(G2), and let v be some node in t. Assume that
(u1, ... , un = v) is the top–down sequence of all the nodes in the path from t’s root u1
to v. We write excess(v,t) as a shorthand notation for excess((u1,...,un)). If (u1,...,un)
is the top–down sequence of all the nodes in the spine of t, we also write excess(t) as a
short hand notation for excess((u1, ... , un)).
It is easy to prove by induction that, for each tree t E T(G2), the excess of the
sequence of nodes in the spine of t is always zero. Thus, we omit the proof of the
following statement.
Lemma 2
Every derived tree t E T(G2) is a right spinal tree, and excess(t) = 0.
In order to get a better understanding of the construction used in the following
proofs, it is useful at this point to come back to our discussion of the relation between
that construction and the construction presented in Section 3. We observe that for each
tree t1 generated by G1 there is a tree t2 E T(G2) such that the sequence of labels in t2’s
spine encodes t1, following the scheme exemplified in Figure 3. Using such encoding,
we can establish a bijection between the a-labeled nodes in the frontier of t1 and the
a-labeled nodes in the frontier of t2. Furthermore, if v1 in t1 and v2 in t2 are two
nodes related by such a correspondence, then it is not difficult to see that depth(v1, t1) =
excess(v2,t2).
</bodyText>
<subsectionHeader confidence="0.968642">
4.3 Intuition
</subsectionHeader>
<bodyText confidence="0.996401">
Before we give the actual proof of Theorem 2, let us attempt to get some intuition
about why our counterexample grammar G2 cannot be strongly lexicalized by some
</bodyText>
<page confidence="0.995622">
625
</page>
<note confidence="0.592735">
Computational Linguistics Volume 38, Number 3
</note>
<bodyText confidence="0.999258764705882">
other TAG. One might think that the following TAG G�2 is a lexicalized version
of G2:
This grammar is obtained from G2 by taking the lexicalized tree β3 (repeated here
as β5), as well as all trees that can be obtained by adjoining β3 into some non-lexicalized
elementary tree. GZ does not generate all trees generated by G2, however. The following
tree t2 for example is not generated by GZ:
Note that this tree is the encoded version of the counterexample tree t1 from the previous
section (cf. Figure 3).
To see that t2 is not generated by GZ, we reason as follows. Consider a lexical node u
in an elementary tree γ of GZ, and let t be a tree obtained by adjoining some elementary
tree into γ. Although this adjunction increases the depth of u, it does not increase its
excess, as it adds a balanced sequence of parentheses into the spine of γ. More generally,
the excess of a lexical node in an elementary γ is constant in all trees derived starting
from γ. From this we conclude that every tree generated by GZ contains a lexical node
with excess at most 2; this is the maximal excess of a lexical node in an elementary tree
of GZ. In contrast, all lexical nodes in the tree t2 have excess 3. This shows that t2 is not
generated by GZ.
</bodyText>
<subsectionHeader confidence="0.997319">
4.4 Main Part
</subsectionHeader>
<bodyText confidence="0.99998">
In what follows, we consider the class 92 of (reduced) TAGs that generate subsets of the
trees derived by G2:
</bodyText>
<equation confidence="0.792581">
92 = { G  |G is a TAG, T(G) C T(G2) }
</equation>
<bodyText confidence="0.999621">
For a grammar G G 92, we define the e-index of G as the maximum in N U {oo} of the
minimal excess of a-labeled nodes in trees derived by G:
</bodyText>
<equation confidence="0.8647165">
e-index(G) = max min excess(v,t)
tET(G) vENodes(a,t)
</equation>
<bodyText confidence="0.998593">
As we will see, the notion of e-index plays exactly the same role as the notion of d-index
in Section 3.
</bodyText>
<page confidence="0.9937">
626
</page>
<note confidence="0.650501">
Kuhlmann and Satta TAGs Are Not Closed Under Strong Lexicalization
</note>
<bodyText confidence="0.995448458333333">
There is one last obstacle that we need to overcome. For TSGs we noted (in the proof
of Lemma 1) that the minimal depth of lexical nodes in a derived tree t is bounded by
the minimal depth of lexical nodes in the elementary tree γ from which t was derived.
For the TAGs in 92, the situation is not quite as simple, as an adjunction of an auxiliary
tree β into an elementary tree γ might affect the excess of a lexical node of γ. It turns
out, however, that this potential variation in the excess of a lexical node of γ is bounded
by a grammar-specific constant. This observation is expressed in the following lemma.
It is the correspondent of Lemma 4 in Knuth’s paper on parenthesis languages (Knuth
1967), and is proved in essentially the same way. Recall that a derivation tree d is of
type γ, γ some elementary tree, if d is derived starting from γ.
Lemma 3
Let G E 92. For each elementary tree γ of G, there exists a number e(γ) such that, for
every saturated derivation tree d of type γ, excess(t(d)) = e(γ).
Proof
Because γ is not useless, we can find at least one sentential and saturated derivation tree
of G that contains an occurrence of γ. Let d be any such derivation tree, and let v be any
node of d labeled with γ. Let d1 be the subtree of d rooted at v. Observe that t(d1) must
be a spinal tree. We then let e(γ) = excess(t(d1)).
If d1 is the only derivation tree of type γ available in G, then we are done. Otherwise,
let d2 =� d1 be some derivation tree of type γ occurring within some other sentential
and saturated derivation tree of G. We can replace d1 with d2 in d at v to obtain a new
sentential and saturated derivation tree d&apos; =� d. Every derived tree in T(G) must be a
right spinal tree: This follows from the assumption that G E 92 and from Lemma 2. We
can then write
</bodyText>
<equation confidence="0.993118">
excess(t(d&apos;)) = excess(t(d)) − excess(t(d1)) + excess(t(d2))
Because excess(t(d)) = 0 and excess(t(d&apos;)) = 0 (by Lemma 2), we conclude that
excess(t(d2)) = excess(t(d1)) = e(γ)
</equation>
<bodyText confidence="0.976895375">
Using Lemma 3, we can now prove the following result.
Lemma 4
The grammar G2 has infinite e-index. Every lexicalized grammar in 92 has finite e-index.
Proof
As in the case of Lemma 1, the first statement is easy to verify and we omit its proof. To
prove the second statement, let G E 92. Let Γ be the set of all elementary trees of G, and
let s be the maximal number of nodes in an elementary tree in Γ. We show that
e-index(G) &lt; k , where k = s + s · max |e(γ)|
</bodyText>
<page confidence="0.441181">
γEΓ
</page>
<bodyText confidence="0.966276">
Note that k is a constant that only depends on G.
</bodyText>
<page confidence="0.985551">
627
</page>
<note confidence="0.551992">
Computational Linguistics Volume 38, Number 3
</note>
<bodyText confidence="0.988061666666667">
Let d be a sentential and saturated derivation tree of G. It has the following shape:
Here α is some initial tree, m &gt; 0, each ui is a node of α at which a tree combination
operation takes place, each γi is an elementary tree, and each di is a derivation tree of
type γi that is a subtree of d. According to this derivation tree, the derived tree t(d) is
obtained by substituting or adjoining the derived trees t(di) at the respective nodes ui
of α.
Because G is lexicalized, at least one a-labeled node on the frontier of t(d) is con-
tributed by α. Let va be any such node, and let ua be the node of α that corresponds
to va. The quantity excess(va,t(d)), representing the excess of the path in t(d) from its
root to the node va, can be computed as follows. Let (ui, ... , un = ua) be the top–down
sequence of nodes in the path from the root node of α to ua. For each i with 1 &lt; i &lt; n
we define
</bodyText>
<equation confidence="0.979705888888889">
�ˆc(u� i) = excess(t(dj)) if ui = uj for some 1 &lt; j &lt; m
c(ui) otherwise
Because G E 92 and because t(d) is a right spinal tree (Lemma 2), we can write
n
excess(va,t(d)) = ˆc(ui)
i=1
By Lemma 3, we have excess(t(dj)) = e(γj), for each j with 1 &lt; j &lt; m. We can then write
excess(va,t(d)) &lt; n + m |e(γi) |&lt; s + s · max |e(γ) |= k
i=1 γEΓ
</equation>
<bodyText confidence="0.99143875">
Thus, every derived tree t in T(G) contains at least one node va in its frontier such that
excess(va, t) &lt; k. Therefore, e-index(G) &lt; k. ■
Two grammars in 92 that have a different e-index cannot generate the same tree lan-
guage, thus we have concluded the proof of Theorem 2.
</bodyText>
<sectionHeader confidence="0.913923" genericHeader="introduction">
5. Tree Insertion Grammars Are Not Closed Under Strong Lexicalization
</sectionHeader>
<bodyText confidence="0.9998472">
As mentioned earlier Schabes and Waters (1995) introduce a restricted variant of TAG
called TIG. The essential restriction in that formalism is the absence of wrapping trees,
which are trees derived starting from auxiliary trees with overt lexical material on both
sides of the foot node. Schabes and Waters (1995, Section 5.1.4) conjecture that the class
of all TIGs is closed under strong lexicalization.
</bodyText>
<page confidence="0.980324">
628
</page>
<bodyText confidence="0.92512825">
Kuhlmann and Satta TAGs Are Not Closed Under Strong Lexicalization
It is easy to see that the counterexample grammar G2 that we gave in Figure 4
does not derive wrapping trees; this means that G2 actually is a TIG. Using the proof
of Section 4, we then obtain the following result.
Theorem 3
Tree insertion grammars are not closed under strong lexicalization.
In fact, we have even proved the stronger result that the class of TAGs does not lexicalize
the class of TIGs.
</bodyText>
<sectionHeader confidence="0.99717" genericHeader="conclusions">
6. Conclusion
</sectionHeader>
<bodyText confidence="0.9999884">
We have shown that, in contrast to what has been claimed in the literature, TAGs are not
closed under strong lexicalization: The restriction to lexicalized TAGs involves a loss in
strong generative capacity.
In this article we have only considered TAGs with Null Adjunction and Obligatory
Adjunction constraints. A third kind of adjunction constraint that has been used in the
literature is Selective Adjunction, where a set of trees is provided that may be adjoined at
some node. It is not difficult to see that the proofs of Lemma 3, Lemma 4, and Theorem 3
still hold if Selective Adjunction constraints are used.
Our result triggers a number of follow-up questions. First, are TAGs closed under
weak lexicalization, defined in Section 1? We know that, in the case of CFGs, this ques-
tion can be answered affirmatively, because Greibach normal form is a special case of
lexicalized form, and for every CFG there is a weakly equivalent grammar in Greibach
normal form. But to our knowledge, no comparable result exists for TAG. Second, if
TAGs cannot strongly lexicalize themselves, what would a grammar formalism look
like that is capable of providing strong lexicalization for TAGs?
</bodyText>
<sectionHeader confidence="0.996508" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999959142857143">
We are grateful to Aravind Joshi for
discussion on previous versions of this
article and for helping us in shaping
the text in the Introduction of the
current version. We also acknowledge
three anonymous reviewers for their
helpful comments.
</bodyText>
<sectionHeader confidence="0.998391" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999347392857143">
Joshi, Aravind K., Leon S. Levy, and
Masako Takahashi. 1975. Tree Adjunct
Grammars. Journal of Computer and
System Sciences, 10(2):136–163.
Joshi, Aravind K. and Yves Schabes. 1992.
Tree-adjoining grammars and lexicalized
grammars. In Maurice Nivat and
Andreas Podelski, editors, Tree Automata
and Languages. North-Holland,
Amsterdam, pages 409–431.
Joshi, Aravind K. and Yves Schabes. 1997.
Tree-adjoining grammars. In Grzegorz
Rozenberg and Arto Salomaa, editors,
Handbook of Formal Languages, volume 3.
Springer, Berlin, pages 69–123.
Knuth, Donald E. 1967. A characterization
of parenthesis languages. Information
and Control, 11(3):269–289.
Schabes, Yves. 1990. Mathematical and
Computational Aspects of Lexicalized
Grammars. Ph.D. thesis, University of
Pennsylvania, Philadelphia.
Schabes, Yves and Richard C. Waters.
1995. Tree insertion grammar:
A cubic-time parsable formalism that
lexicalizes context-free grammars
without changing the trees produced.
Computational Linguistics, 21(4):479–513.
</reference>
<page confidence="0.998881">
629
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.454236">
<title confidence="0.977576">Tree-Adjoining Grammars Are Not</title>
<affiliation confidence="0.829039333333333">Closed Under Strong Lexicalization Uppsala University University of Padua</affiliation>
<abstract confidence="0.988172857142857">A lexicalized tree-adjoining grammar is a tree-adjoining grammar where each elementary tree contains some overt lexical item. Such grammars are being used to give lexical accounts of syntactic phenomena, where an elementary tree defines the domain of locality of the syntactic and semantic dependencies of its lexical items. It has been claimed in the literature that for every tree-adjoining grammar, one can construct a strongly equivalent lexicalized version. We show that such a procedure does not exist: Tree-adjoining grammars are not closed under strong lexicalization.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<note>Combination operations in TAG.</note>
<marker></marker>
<rawString>Combination operations in TAG.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Leon S Levy</author>
<author>Masako Takahashi</author>
</authors>
<title>Tree Adjunct Grammars.</title>
<date>1975</date>
<journal>Journal of Computer and System Sciences,</journal>
<volume>10</volume>
<issue>2</issue>
<marker>Joshi, Levy, Takahashi, 1975</marker>
<rawString>Joshi, Aravind K., Leon S. Levy, and Masako Takahashi. 1975. Tree Adjunct Grammars. Journal of Computer and System Sciences, 10(2):136–163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Yves Schabes</author>
</authors>
<title>Tree-adjoining grammars and lexicalized grammars.</title>
<date>1992</date>
<booktitle>In Maurice Nivat and Andreas Podelski, editors, Tree Automata and Languages.</booktitle>
<pages>409--431</pages>
<publisher>North-Holland,</publisher>
<location>Amsterdam,</location>
<contexts>
<context position="4953" citStr="Joshi and Schabes 1992" startWordPosition="759" endWordPosition="762">sk whether lexicalized TAGs can provide a strong lexicalization of CFGs. Schabes’ second result is that this is indeed the case. This means that, given a CFG G, one can always construct a lexicalized TAG generating the same set of parse trees as G, and consequently the same string language. Following from this result, there arose the possibility of establishing a third result, stating that TAGs are closed under strong lexicalization. Schabes (1990) states that this is the case, and provides an informal argument to justify the claim. The same claim still appears in two subsequent publications (Joshi and Schabes 1992, 1997), but no precise proof of it has appeared until now. We speculate that the claim could be due to the fact that adjunction is more powerful than substitution with respect to weak generative capacity. It turns out, however, that when it comes to strong generative capacity, adjunction also shares some of the restrictions of substitution. This observation leads to the main result of this article: TAGs are not closed under strong lexicalization. In other words, there are TAGs that lack a strongly equivalent lexicalized version. In the same line of investigation, Schabes and Waters (1995) int</context>
</contexts>
<marker>Joshi, Schabes, 1992</marker>
<rawString>Joshi, Aravind K. and Yves Schabes. 1992. Tree-adjoining grammars and lexicalized grammars. In Maurice Nivat and Andreas Podelski, editors, Tree Automata and Languages. North-Holland, Amsterdam, pages 409–431.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Yves Schabes</author>
</authors>
<title>Tree-adjoining grammars.</title>
<date>1997</date>
<booktitle>In Grzegorz Rozenberg and Arto Salomaa, editors, Handbook of Formal Languages,</booktitle>
<volume>3</volume>
<pages>69--123</pages>
<publisher>Springer,</publisher>
<location>Berlin,</location>
<contexts>
<context position="3612" citStr="Joshi and Schabes 1997" startWordPosition="538" endWordPosition="541">s will be discussed in detail in Section 3.) Informally, this means that we cannot cast a CFG G in a special form in which each rule has an overt lexical item in its right-hand side, under the restriction that the new grammar generates exactly the same set of parse trees as G. As a special case, this entails that no procedure can cast a CFG in Greibach normal form, under the additional condition that the generated parse trees are preserved. The second result obtained by Schabes concerns the relation between CFGs and the class of tree-adjoining grammars (TAGs) (Joshi, Levy, and Takahashi 1975; Joshi and Schabes 1997). A TAG consists of a finite set of elementary trees, which are phrase structure trees of unbounded depth, and allows for the combination of these trees by means of two operations called substitution and adjunction (described in more detail in the next section). A lexicalized TAG is one where each elementary tree contains at least one overt lexical item called the anchor of the tree; the elementary tree is intended to encapsulate the syntactic and semantic dependencies of its anchor. Because CFG rules can be viewed as elementary trees of depth one, and because context-free rewriting can be sim</context>
<context position="6113" citStr="Joshi and Schabes (1997)" startWordPosition="945" endWordPosition="948">In the same line of investigation, Schabes and Waters (1995) introduce a restricted variant of TAG called tree insertion grammars (TIGs). This formalism severely restricts the adjunction operation originally defined for TAGs, in such a way that the class of generated string languages, as well as the class of generated parse trees, are the same as those of CFGs. Schabes and Waters then conjecture that TIGs are closed under strong lexicalization. In this article we also disprove their conjecture. 2. Preliminaries We assume familiarity with the TAG formalism; for a survey, we refer the reader to Joshi and Schabes (1997). We briefly introduce here the basic terminology and notation for TAG that we use in this article. 2.1 Basic Definitions A TAG is a rewriting system that derives trees starting from a finite set of elementary trees. Elementary trees are trees of finite but arbitrary depth, with internal nodes labeled 618 Kuhlmann and Satta TAGs Are Not Closed Under Strong Lexicalization with nonterminal symbols and frontier nodes labeled with terminal and nonterminal symbols. Each elementary tree is either an initial tree or else an auxiliary tree. Initial trees serve as the starting point for derivations, an</context>
</contexts>
<marker>Joshi, Schabes, 1997</marker>
<rawString>Joshi, Aravind K. and Yves Schabes. 1997. Tree-adjoining grammars. In Grzegorz Rozenberg and Arto Salomaa, editors, Handbook of Formal Languages, volume 3. Springer, Berlin, pages 69–123.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Donald E Knuth</author>
</authors>
<title>A characterization of parenthesis languages.</title>
<date>1967</date>
<journal>Information and Control,</journal>
<volume>11</volume>
<issue>3</issue>
<marker>Knuth, 1967</marker>
<rawString>Knuth, Donald E. 1967. A characterization of parenthesis languages. Information and Control, 11(3):269–289.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
</authors>
<title>Mathematical and Computational Aspects of Lexicalized Grammars.</title>
<date>1990</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania,</institution>
<location>Philadelphia.</location>
<contexts>
<context position="2811" citStr="Schabes (1990)" startWordPosition="406" endWordPosition="407">her modules such as semantic interpretation or translation. In this article, we investigate the problem of strong lexicalization. * Department of Linguistics and Philology, Box 635, 75126 Uppsala, Sweden. E-mail: marco.kuhlmann@lingfil.uu.se. ** Department of Information Engineering, via Gradenigo 6/A, 35131 Padova, Italy. E-mail: satta@dei.unipd.it. Submission received: 16 July 2011; accepted for publication: 10 September 2011. © 2012 Association for Computational Linguistics Computational Linguistics Volume 38, Number 3 Two important results about strong lexicalization have been obtained by Schabes (1990). The first result is that CFGs are not closed under strong lexicalization. (The author actually shows a stronger result involving a formalism called tree substitution grammar, as will be discussed in detail in Section 3.) Informally, this means that we cannot cast a CFG G in a special form in which each rule has an overt lexical item in its right-hand side, under the restriction that the new grammar generates exactly the same set of parse trees as G. As a special case, this entails that no procedure can cast a CFG in Greibach normal form, under the additional condition that the generated pars</context>
<context position="4783" citStr="Schabes (1990)" startWordPosition="733" endWordPosition="734">d because context-free rewriting can be simulated by the substitution operation defined for TAGs, we can view any CFG as a special TAG. Under this view, one can ask whether lexicalized TAGs can provide a strong lexicalization of CFGs. Schabes’ second result is that this is indeed the case. This means that, given a CFG G, one can always construct a lexicalized TAG generating the same set of parse trees as G, and consequently the same string language. Following from this result, there arose the possibility of establishing a third result, stating that TAGs are closed under strong lexicalization. Schabes (1990) states that this is the case, and provides an informal argument to justify the claim. The same claim still appears in two subsequent publications (Joshi and Schabes 1992, 1997), but no precise proof of it has appeared until now. We speculate that the claim could be due to the fact that adjunction is more powerful than substitution with respect to weak generative capacity. It turns out, however, that when it comes to strong generative capacity, adjunction also shares some of the restrictions of substitution. This observation leads to the main result of this article: TAGs are not closed under s</context>
</contexts>
<marker>Schabes, 1990</marker>
<rawString>Schabes, Yves. 1990. Mathematical and Computational Aspects of Lexicalized Grammars. Ph.D. thesis, University of Pennsylvania, Philadelphia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Richard C Waters</author>
</authors>
<title>Tree insertion grammar: A cubic-time parsable formalism that lexicalizes context-free grammars without changing the trees produced.</title>
<date>1995</date>
<journal>Computational Linguistics,</journal>
<volume>21</volume>
<issue>4</issue>
<contexts>
<context position="5549" citStr="Schabes and Waters (1995)" startWordPosition="855" endWordPosition="858">tions (Joshi and Schabes 1992, 1997), but no precise proof of it has appeared until now. We speculate that the claim could be due to the fact that adjunction is more powerful than substitution with respect to weak generative capacity. It turns out, however, that when it comes to strong generative capacity, adjunction also shares some of the restrictions of substitution. This observation leads to the main result of this article: TAGs are not closed under strong lexicalization. In other words, there are TAGs that lack a strongly equivalent lexicalized version. In the same line of investigation, Schabes and Waters (1995) introduce a restricted variant of TAG called tree insertion grammars (TIGs). This formalism severely restricts the adjunction operation originally defined for TAGs, in such a way that the class of generated string languages, as well as the class of generated parse trees, are the same as those of CFGs. Schabes and Waters then conjecture that TIGs are closed under strong lexicalization. In this article we also disprove their conjecture. 2. Preliminaries We assume familiarity with the TAG formalism; for a survey, we refer the reader to Joshi and Schabes (1997). We briefly introduce here the basi</context>
</contexts>
<marker>Schabes, Waters, 1995</marker>
<rawString>Schabes, Yves and Richard C. Waters. 1995. Tree insertion grammar: A cubic-time parsable formalism that lexicalizes context-free grammars without changing the trees produced. Computational Linguistics, 21(4):479–513.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>