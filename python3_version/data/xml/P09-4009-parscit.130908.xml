<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001196">
<title confidence="0.891257">
System for Querying Syntactically Annotated Corpora
</title>
<author confidence="0.585791">
Petr Pajas
</author>
<note confidence="0.857534666666667">
Charles Univ. in Prague, MFF ´UFAL
Malostransk´e n´am. 25
118 00 Prague 1 – Czech Rep.
</note>
<email confidence="0.988207">
pajas@ufal.mff.cuni.cz
</email>
<sectionHeader confidence="0.993627" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999966333333334">
This paper presents a system for querying
treebanks. The system consists of a pow-
erful query language with natural support
for cross-layer queries, a client interface
with a graphical query builder and visual-
izer of the results, a command-line client
interface, and two substitutable query en-
gines: a very efficient engine using a re-
lational database (suitable for large static
data), and a slower, but paralel-computing
enabled, engine operating on treebank files
(suitable for “live” data).
</bodyText>
<sectionHeader confidence="0.998799" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9995476">
Syntactically annotated treebanks are a great re-
source of linguistic information that is available
hardly or not at all in flat text corpora. Retrieving
this information requires specialized tools. Some
of the best-known tools for querying treebanks
include TigerSEARCH (Lezius, 2002), TGrep2
(Rohde, 2001), MonaSearch (Maryns and Kepser,
2009), and NetGraph (Mirovsk´y, 2006). All these
tools dispose of great power when querying a sin-
gle annotation layer with nodes labeled by “flat”
feature records.
However, most of the existing systems are little
equipped for applications on structurally complex
treebanks, involving for example multiple inter-
connected annotation layers, multi-lingual par-
allel annotations with node-to-node alignments,
or annotations where nodes are labeled by at-
tributes with complex values such as lists or nested
attribute-value structures. The Prague Depen-
dency Treebank 2.0 (Hajiˇc and others, 2006), PDT
2.0 for short, is a good example of a treebank with
multiple annotation layers and richly-structured
attribute values. NetGraph was a tool tradition-
ally used for querying over PDT, but still it does
not directly support cross-layer queries, unless the
</bodyText>
<note confidence="0.952615">
Jan Stˇep´anek
Charles Univ. in Prague, MFF ´UFAL
Malostransk´e n´am. 25
118 00 Prague 1 – Czech Rep.
</note>
<email confidence="0.885684">
stepanek@ufal.mff.cuni.cz
</email>
<bodyText confidence="0.99841825">
layers are merged together at the cost of loosing
some structural information.
The presented system attempts to combine and
extend features of the existing query tools and re-
solve the limitations mentioned above. We are
grateful to an anonymous referee for pointing us
to ANNIS2 (Zeldes and others, 2009) – another
system that targets annotation on multiple levels.
</bodyText>
<sectionHeader confidence="0.970859" genericHeader="method">
2 System Overview
</sectionHeader>
<bodyText confidence="0.998300666666667">
Our system, named PML Tree Query (PML-TQ),
consists of three main components (discussed fur-
ther in the following sections):
</bodyText>
<listItem confidence="0.998781692307692">
• an expressive query language supporting
cross-layer queries, arbitrary boolean com-
binations of statements, able to query com-
plex data structures. It also includes a sub-
language for generating listings and non-
trivial statistical reports, which goes far be-
yond statistical features of e.g. TigerSearch.
• client interfaces: a graphical user inter-
face with a graphical query builder, a cus-
tomizable visualization of the results and a
command-line interface.
• two interchangeable engines that evaluate
queries: a very efficient engine that requires
</listItem>
<bodyText confidence="0.878899833333333">
the treebank to be converted into a rela-
tional database, and a somewhat slower en-
gine which operates directly on treebank files
and is useful especially for data in the process
of annotation and experimental data.
The query language applies to a generic data
model associated with an XML-based data format
called Prague Markup Language or PML (Pajas
and ˇStˇep´anek, 2006). Although PML was devel-
oped in connection with PDT 2.0, it was designed
as a universally applicable data format based on
abstract data types, completely independent of a
</bodyText>
<page confidence="0.993764">
33
</page>
<note confidence="0.9414905">
Proceedings of the ACL-IJCNLP 2009 Software Demonstrations, pages 33–36,
Suntec, Singapore, 3 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.999865592592593">
particular annotation schema. It can capture sim-
ple linear annotations as well as annotations with
one or more richly structured interconnected an-
notation layers. A concrete PML-based format for
a specific annotation is defined by describing the
data layout and XML vocabulary in a special file
called PML Schema and referring to this schema
file from individual data files.
It is relatively easy to convert data from other
formats to PML without loss of information. In
fact, PML-TQ is implemented within the TrEd
framework (Pajas and ˇStˇep´anek, 2008), which
uses PML as its native data format and already of-
fers all kinds of tools for work with treebanks in
several formats using on-the-fly transformation to
PML (for XML input via XSLT).
The whole framework is covered by an open-
source license and runs on most current platforms.
It is also language and script independent (operat-
ing internally with Unicode).
The graphical client for PML-TQ is an exten-
sion to the tree editor TrEd that already serves as
the main annotation tool for treebank projects (in-
cluding PDT 2.0) in various countries. The client
and server communicate over the HTTP protocol,
which makes it possible to easily use PML-TQ en-
gine as a service for other applications.
</bodyText>
<sectionHeader confidence="0.971392" genericHeader="method">
3 Query Language
</sectionHeader>
<bodyText confidence="0.994666666666666">
A PML-TQ query consists of a part that selects
nodes in the treebank, and an optional part that
generates a report from the selected occurrences.
The selective part of the query specifies condi-
tions that a group of nodes must satisfy to match
the query. The conditions can be formulated as
arbitrary boolean combinations of subqueries and
simple statements that can express all kinds of re-
lations between nodes and/or attribute values. This
part of the query can be visualized as a graph with
vertices representing the matching nodes, con-
nected by various types of edges. The edges (vi-
sualized by arrows of different colors and styles)
represent various types of relations between the
nodes. There are four kinds of these relations:
</bodyText>
<listItem confidence="0.997327642857143">
• topological relations (child, descendant
depth-first-precedes, order-precedes, same-
tree-as, same-document-as) and their
reversed counterparts (parent, ancestor,
depth-first-follows, order-follows)
• inter- or cross-layer ID-based references
• user-implemented relations, i.e. relations
whose low-level implementation is provided
by the user as an extension to PML-TQ1
(for example, we define relations eparent and
echild for PDT 2.0 to distinguish effective de-
pendency from technical dependency).
• transitive closures of the preceding two types
of relations (e.g. if coref text.rf is are-
</listItem>
<bodyText confidence="0.866192538461538">
lation representing textual coreference, then
coref text.rf{4,} is a relation rep-
resenting chains of textual coreference of
length at least 4).
The query can be accompanied by an optional
part consisting of a chain of output filters that can
be used to extract data from the matching nodes,
compute statistics, and/or format and post-process
the results of a query.
Let us examine these features on an example
of a query over PDT 2.0, which looks for Czech
words that have a patient or effect argument in in-
finitive form:
</bodyText>
<figure confidence="0.530161142857143">
t-node $t := [
child t-node $s := [
functor in { &amp;quot;PAT&amp;quot;, &amp;quot;EFF&amp;quot; },
a/lex.rf $a ] ];
a-node $a := [
m/tag  ’Vf’,
0x child a-node [ afun = ’AuxV’ ] ];
</figure>
<figureCaption confidence="0.413641666666667">
&gt;&gt; for $s.functor,$t.t_lemma
give $1, $2, count()
sort by $3 desc
</figureCaption>
<bodyText confidence="0.999819">
The square brackets enclose conditions regarding
one node, so t-node $t := [...] is read
‘t-node $t with... ’. Comma is synonymous with
logical and. See Fig. 3 for the graphical represen-
tation of the query and one match.
This particular query selects occurrences of a
group of three nodes, $t, $s, and $a with the
following properties: $t and $s are both of type
t-node, i.e. nodes from a tectogrammatical tree
(the types are defined in the PML Schema for the
PDT 2.0); $s is a child of $t; the functor at-
tribute of $s has either the value PAT or EFF; the
node $s points to a node of type a-node, named
$a, via an ID-based reference a/lex.rf (this
expression in fact retrieves value of an attribute
lex.rf from an attribute-value structure stored
in the attribute a of $s); $a has an attribute m car-
rying an attribute-value structure with the attribute
</bodyText>
<footnote confidence="0.9947745">
1In some future version, the users will also be able to de-
fine new relations as separate PML-TQ queries.
</footnote>
<page confidence="0.994402">
34
</page>
<figure confidence="0.9995869375">
a/lex.rf
child
zapomenout.enunc
PRED
v
#PersPron
ACT
n.pron.def.pers
#Cor
ACT
qcomplex
a-lnd94103-087-p1s3
AuxS
Zapomněli
Pred
jsme dýchat
AuxV Obj
dýchat
PAT
v
AuxK
Zapomneli jsme dychat. [We-forgot (aux) to-breathe.]
Output filters:
&gt;&gt; for $s.functor,$t.t_lemma
give $1,$2,count()
sort by $3 desc
a-node $a
m/tag ~ &apos;^Vf&apos;
t-node $t
0x
t-node $s a-node
functor in { &amp;quot;PAT&amp;quot;, &amp;quot;EFF&amp;quot; } afun = &apos;AuxV&apos;
</figure>
<figureCaption confidence="0.999978">
Figure 1: Graphical representation of a query (left) and a result spanning two annotation layers
</figureCaption>
<bodyText confidence="0.999934615384615">
tag matching regular expression Vf (in PDT 2.0
tag set this indicates that $a is an infinitive); $a
has no child node that is an auxiliary verb (afun
= ’AuxV’). This last condition is expressed as a
sub-query with zero occurrences (0x).
The selective part of the query is followed by
one output filter (starting with &gt;&gt;). It returns three
values for each match: the functor of $s, the tec-
togrammatical lemma of $t, and for each distinct
pair of these two values the number of occurrences
of this pair counted over the whole matching set.
The output is ordered by the 3rd column in the de-
scending order. It may look like this:
</bodyText>
<figure confidence="0.5790654">
PAT moznost 115
PAT schopny 110
EFF a 85
PAT #Comma 83
PAT rozhodnout_se 75
</figure>
<bodyText confidence="0.9991295">
In the PML data model, attributes (like a of
$t, m of $a in our example) can carry com-
plex values: attribute-value structures, lists, se-
quences of named elements, which in turn may
contain other complex values. PML-TQ addresses
values nested within complex data types by at-
tribute paths whose notation is somewhat similar
to XPath (e.g. m/tag or a/[2]/aux.rf). An
attribute path evaluated on a given node may re-
turn more than one value. This happens for ex-
ample when there is a list value on the attribute
path: the expression m/w/token=’a’ where m
is a list of attribute-value structures reads as some
one value returned by m/w/token equals ’a’.
By prefixing the path with a *, we may write
all values returned by m/w/token equal ’a’ as
*m/w/token=’a’.
We can also fix one value returned by an at-
tribute path using the member keyword and query
it the same way we query a node in the treebank:
</bodyText>
<equation confidence="0.96406">
t-node $n:= [
member bridging [
type = &amp;quot;CONTRAST&amp;quot;,
target.rf t-node [ functor=&amp;quot;PAT&amp;quot; ]]]
</equation>
<bodyText confidence="0.9998545">
where bridging is an attribute of t-node con-
taining a list of labeled graph edges (attribute-
value structures). We select one that has type
CONTRAST and points to anode with functor PAT.
</bodyText>
<sectionHeader confidence="0.556517" genericHeader="method">
4 Query Editor and Client
</sectionHeader>
<figureCaption confidence="0.998385">
Figure 2: The PML-TQ graphical client in TrEd
</figureCaption>
<bodyText confidence="0.994785">
The graphical user interface lets the user to
build the query graphically or in the text form; in
both cases it assists the user by offering available
node-types, applicable relations, attribute paths,
and values for enumerated data types. It commu-
nicates with the query engine and displays the re-
sults (matches, reports, number of occurrences).
</bodyText>
<page confidence="0.998311">
35
</page>
<bodyText confidence="0.9998433">
Colors are used to indicate which node in the
query graph corresponds to which node in the re-
sult. Matches from different annotation layers are
displayed in parallel windows. For each result, the
user can browse the complete document for con-
text. Individual results can be saved in the PML
format or printed to PostScript, PDF, or SVG. The
user can also bookmark any tree from the result
set, using the bookmarking features of TrEd. The
queries are stored in a local file.2
</bodyText>
<sectionHeader confidence="0.999098" genericHeader="evaluation">
5 Engines
</sectionHeader>
<bodyText confidence="0.999940967741936">
For practical reasons, we have developed two en-
gines that evaluate PML-TQ queries:
The first one is based on a translator of PML-
TQ to SQL. It utilizes the power of modern re-
lational databases3 and provides excellent perfor-
mance and scalability (answering typical queries
over a 1-million-word treebank in a few seconds).
To use this engine, the treebank must be, simi-
larly to (Bird and others, 2006), converted into
read-only database tables, which makes this en-
gine more suitable for data that do not change too
often (e.g. final versions of treebanks).
For querying over working data or data not
likely to be queried repeatedly, we have devel-
oped an index-less query evaluator written in Perl,
which performs searches over arbitrary data files
sequentially. Although generally slower than the
database implementation (partly due to the cost
of parsing the input PML data format), its perfor-
mance can be boosted up using a built-in support
for parallel execution on a computer cluster.
Both engines are accessible through the identi-
cal client interface. Thus, users can run the same
query over a treebank stored in a database as well
as their local files of the same type.
When implementing the system, we periodi-
cally verify that both engines produce the same
results on a large set of test queries. This testing
proved invaluable not only for maintaining con-
sistency, but also for discovering bugs in the two
implementations and also for performance tuning.
</bodyText>
<sectionHeader confidence="0.999486" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999747">
We have presented a powerful open-source sys-
tem for querying treebanks extending an estab-
</bodyText>
<footnote confidence="0.8535948">
2The possibility of storing the queries in a user account
on the server is planned.
3The system supports Oracle Database (version 10g or
newer, the free XE edition is sufficient) and PostgreSQL (ver-
sion at least 8.4 is required for complete functionality).
</footnote>
<bodyText confidence="0.973488">
lished framework. The current version of the sys-
tem is available at http://ufal.mff.cuni.
cz/-pajas/pmltq.
</bodyText>
<sectionHeader confidence="0.995451" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.99993375">
This paper as well as the development of the sys-
tem is supported by the grant Information Society
of GA AV ˇCR under contract 1ET101120503 and
by the grant GAUK No. 22908.
</bodyText>
<sectionHeader confidence="0.999145" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999507511627907">
Steven Bird et al. 2006. Designing and evaluating an
XPath dialect for linguistic queries. In ICDE ’06:
Proceedings of the 22nd International Conference
on Data Engineering, page 52. IEEE Computer So-
ciety.
Jan Hajiˇc et al. 2006. The Prague Dependency Tree-
bank 2.0. CD-ROM. Linguistic Data Consortium
(CAT: LDC2006T01).
Wolfgang Lezius. 2002. Ein Suchwerkzeug f¨ur syn-
taktisch annotierte Textkorpora. Ph.D. thesis, IMS,
University of Stuttgart, December. Arbeitspapiere
des Instituts f¨ur Maschinelle Sprachverarbeitung
(AIMS), volume 8, number 4.
Hendrik Maryns and Stephan Kepser. 2009.
Monasearch – querying linguistic treebanks with
monadic second-order logic. In Proceedings of the
7th International Workshop on Treebanks and Lin-
guistic Theories (TLT 2009).
Jiˇr´ı M´ırovsk´y. 2006. Netgraph: A tool for searching
in Prague Dependency Treebank 2.0. In Proceed-
ings of the 5th Workshop on Treebanks and Linguis-
tic Theories (TLT 2006), pages 211–222.
Petr Pajas and Jan ˇStˇep´anek. 2008. Recent advances
in a feature-rich framework for treebank annotation.
In The 22nd International Conference on Computa-
tional Linguistics - Proceedings of the Conference,
volume 2, pages 673–680. The Coling 2008 Orga-
nizing Committee.
Petr Pajas and Jan ˇStˇep´anek. 2006. XML-based repre-
sentation of multi-layered annotation in the PDT 2.0.
In Proceedings of the LREC Workshop on Merging
and Layering Linguistic Information (LREC 2006),
pages 40–47.
Douglas L.T. Rohde. 2001. TGrep2 the
next-generation search engine for parse trees.
http://tedlab.mit.edu/-dr/Tgrep2/.
Amir Zeldes et al. 2009. Information structure in
african languages: Corpora and tools. In Proceed-
ings of the Workshop on Language Technologies for
African Languages (AFLAT), 12th Conference of the
European Chapter of the Association for Computa-
tional Linguistics (EACL-09), Athens, Greece, pages
17–24.
</reference>
<page confidence="0.998933">
36
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.422634">
<title confidence="0.998215">System for Querying Syntactically Annotated Corpora</title>
<author confidence="0.94132">Petr Pajas</author>
<affiliation confidence="0.466868">Charles Univ. in Prague, MFF ´UFAL</affiliation>
<address confidence="0.80538">Malostransk´e n´am. 25 118 00 Prague 1 – Czech Rep.</address>
<email confidence="0.957895">pajas@ufal.mff.cuni.cz</email>
<abstract confidence="0.998141538461538">This paper presents a system for querying treebanks. The system consists of a powerful query language with natural support for cross-layer queries, a client interface with a graphical query builder and visualizer of the results, a command-line client interface, and two substitutable query engines: a very efficient engine using a relational database (suitable for large static data), and a slower, but paralel-computing enabled, engine operating on treebank files (suitable for “live” data).</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Steven Bird</author>
</authors>
<title>Designing and evaluating an XPath dialect for linguistic queries.</title>
<date>2006</date>
<booktitle>In ICDE ’06: Proceedings of the 22nd International Conference on Data Engineering,</booktitle>
<pages>52</pages>
<publisher>IEEE Computer Society.</publisher>
<marker>Bird, 2006</marker>
<rawString>Steven Bird et al. 2006. Designing and evaluating an XPath dialect for linguistic queries. In ICDE ’06: Proceedings of the 22nd International Conference on Data Engineering, page 52. IEEE Computer Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Hajiˇc</author>
</authors>
<date>2006</date>
<booktitle>The Prague Dependency Treebank 2.0. CD-ROM. Linguistic Data Consortium (CAT: LDC2006T01).</booktitle>
<marker>Hajiˇc, 2006</marker>
<rawString>Jan Hajiˇc et al. 2006. The Prague Dependency Treebank 2.0. CD-ROM. Linguistic Data Consortium (CAT: LDC2006T01).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wolfgang Lezius</author>
</authors>
<title>Ein Suchwerkzeug f¨ur syntaktisch annotierte Textkorpora.</title>
<date>2002</date>
<booktitle>Arbeitspapiere des Instituts f¨ur Maschinelle Sprachverarbeitung (AIMS),</booktitle>
<tech>Ph.D. thesis,</tech>
<volume>8</volume>
<institution>IMS, University of Stuttgart,</institution>
<contexts>
<context position="974" citStr="Lezius, 2002" startWordPosition="143" endWordPosition="144">ical query builder and visualizer of the results, a command-line client interface, and two substitutable query engines: a very efficient engine using a relational database (suitable for large static data), and a slower, but paralel-computing enabled, engine operating on treebank files (suitable for “live” data). 1 Introduction Syntactically annotated treebanks are a great resource of linguistic information that is available hardly or not at all in flat text corpora. Retrieving this information requires specialized tools. Some of the best-known tools for querying treebanks include TigerSEARCH (Lezius, 2002), TGrep2 (Rohde, 2001), MonaSearch (Maryns and Kepser, 2009), and NetGraph (Mirovsk´y, 2006). All these tools dispose of great power when querying a single annotation layer with nodes labeled by “flat” feature records. However, most of the existing systems are little equipped for applications on structurally complex treebanks, involving for example multiple interconnected annotation layers, multi-lingual parallel annotations with node-to-node alignments, or annotations where nodes are labeled by attributes with complex values such as lists or nested attribute-value structures. The Prague Depen</context>
</contexts>
<marker>Lezius, 2002</marker>
<rawString>Wolfgang Lezius. 2002. Ein Suchwerkzeug f¨ur syntaktisch annotierte Textkorpora. Ph.D. thesis, IMS, University of Stuttgart, December. Arbeitspapiere des Instituts f¨ur Maschinelle Sprachverarbeitung (AIMS), volume 8, number 4.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hendrik Maryns</author>
<author>Stephan Kepser</author>
</authors>
<title>Monasearch – querying linguistic treebanks with monadic second-order logic.</title>
<date>2009</date>
<booktitle>In Proceedings of the 7th International Workshop on Treebanks and Linguistic Theories (TLT</booktitle>
<contexts>
<context position="1034" citStr="Maryns and Kepser, 2009" startWordPosition="149" endWordPosition="152"> a command-line client interface, and two substitutable query engines: a very efficient engine using a relational database (suitable for large static data), and a slower, but paralel-computing enabled, engine operating on treebank files (suitable for “live” data). 1 Introduction Syntactically annotated treebanks are a great resource of linguistic information that is available hardly or not at all in flat text corpora. Retrieving this information requires specialized tools. Some of the best-known tools for querying treebanks include TigerSEARCH (Lezius, 2002), TGrep2 (Rohde, 2001), MonaSearch (Maryns and Kepser, 2009), and NetGraph (Mirovsk´y, 2006). All these tools dispose of great power when querying a single annotation layer with nodes labeled by “flat” feature records. However, most of the existing systems are little equipped for applications on structurally complex treebanks, involving for example multiple interconnected annotation layers, multi-lingual parallel annotations with node-to-node alignments, or annotations where nodes are labeled by attributes with complex values such as lists or nested attribute-value structures. The Prague Dependency Treebank 2.0 (Hajiˇc and others, 2006), PDT 2.0 for sh</context>
</contexts>
<marker>Maryns, Kepser, 2009</marker>
<rawString>Hendrik Maryns and Stephan Kepser. 2009. Monasearch – querying linguistic treebanks with monadic second-order logic. In Proceedings of the 7th International Workshop on Treebanks and Linguistic Theories (TLT 2009).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jiˇr´ı M´ırovsk´y</author>
</authors>
<title>Netgraph: A tool for searching in Prague Dependency Treebank 2.0.</title>
<date>2006</date>
<booktitle>In Proceedings of the 5th Workshop on Treebanks and Linguistic Theories (TLT</booktitle>
<pages>211--222</pages>
<marker>M´ırovsk´y, 2006</marker>
<rawString>Jiˇr´ı M´ırovsk´y. 2006. Netgraph: A tool for searching in Prague Dependency Treebank 2.0. In Proceedings of the 5th Workshop on Treebanks and Linguistic Theories (TLT 2006), pages 211–222.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Petr Pajas</author>
<author>Jan ˇStˇep´anek</author>
</authors>
<title>Recent advances in a feature-rich framework for treebank annotation.</title>
<date>2008</date>
<journal>Organizing Committee.</journal>
<booktitle>In The 22nd International Conference on Computational Linguistics - Proceedings of the Conference,</booktitle>
<volume>2</volume>
<pages>673--680</pages>
<marker>Pajas, ˇStˇep´anek, 2008</marker>
<rawString>Petr Pajas and Jan ˇStˇep´anek. 2008. Recent advances in a feature-rich framework for treebank annotation. In The 22nd International Conference on Computational Linguistics - Proceedings of the Conference, volume 2, pages 673–680. The Coling 2008 Organizing Committee.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Petr Pajas</author>
<author>Jan ˇStˇep´anek</author>
</authors>
<title>XML-based representation of multi-layered annotation in the PDT 2.0.</title>
<date>2006</date>
<booktitle>In Proceedings of the LREC Workshop on Merging and Layering Linguistic Information (LREC</booktitle>
<pages>40--47</pages>
<marker>Pajas, ˇStˇep´anek, 2006</marker>
<rawString>Petr Pajas and Jan ˇStˇep´anek. 2006. XML-based representation of multi-layered annotation in the PDT 2.0. In Proceedings of the LREC Workshop on Merging and Layering Linguistic Information (LREC 2006), pages 40–47.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Douglas L T Rohde</author>
</authors>
<title>TGrep2 the next-generation search engine for parse trees.</title>
<date>2001</date>
<note>http://tedlab.mit.edu/-dr/Tgrep2/.</note>
<contexts>
<context position="996" citStr="Rohde, 2001" startWordPosition="146" endWordPosition="147">visualizer of the results, a command-line client interface, and two substitutable query engines: a very efficient engine using a relational database (suitable for large static data), and a slower, but paralel-computing enabled, engine operating on treebank files (suitable for “live” data). 1 Introduction Syntactically annotated treebanks are a great resource of linguistic information that is available hardly or not at all in flat text corpora. Retrieving this information requires specialized tools. Some of the best-known tools for querying treebanks include TigerSEARCH (Lezius, 2002), TGrep2 (Rohde, 2001), MonaSearch (Maryns and Kepser, 2009), and NetGraph (Mirovsk´y, 2006). All these tools dispose of great power when querying a single annotation layer with nodes labeled by “flat” feature records. However, most of the existing systems are little equipped for applications on structurally complex treebanks, involving for example multiple interconnected annotation layers, multi-lingual parallel annotations with node-to-node alignments, or annotations where nodes are labeled by attributes with complex values such as lists or nested attribute-value structures. The Prague Dependency Treebank 2.0 (Ha</context>
</contexts>
<marker>Rohde, 2001</marker>
<rawString>Douglas L.T. Rohde. 2001. TGrep2 the next-generation search engine for parse trees. http://tedlab.mit.edu/-dr/Tgrep2/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Amir Zeldes</author>
</authors>
<title>Information structure in african languages: Corpora and tools.</title>
<date>2009</date>
<booktitle>In Proceedings of the Workshop on Language Technologies for African Languages (AFLAT), 12th Conference of the European Chapter of the Association for Computational Linguistics (EACL-09),</booktitle>
<pages>17--24</pages>
<location>Athens, Greece,</location>
<marker>Zeldes, 2009</marker>
<rawString>Amir Zeldes et al. 2009. Information structure in african languages: Corpora and tools. In Proceedings of the Workshop on Language Technologies for African Languages (AFLAT), 12th Conference of the European Chapter of the Association for Computational Linguistics (EACL-09), Athens, Greece, pages 17–24.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>