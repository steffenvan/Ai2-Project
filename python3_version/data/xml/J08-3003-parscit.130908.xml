<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.991696">
Dependency Parsing of Turkish
</title>
<author confidence="0.998294">
G¨uls¸en Eryi˘git*
</author>
<affiliation confidence="0.993859">
Istanbul Technical University
</affiliation>
<author confidence="0.988677">
Joakim Nivre** t
</author>
<affiliation confidence="0.994809">
V¨axj¨o University, Uppsala University
</affiliation>
<author confidence="0.826635">
Kemal Oflazerl
</author>
<affiliation confidence="0.799948">
Sabancı University
</affiliation>
<bodyText confidence="0.959576133333333">
The suitability of different parsing methods for different languages is an important topic in
syntactic parsing. Especially lesser-studied languages, typologically different from the languages
for which methods have originally been developed, pose interesting challenges in this respect. This
article presents an investigation of data-driven dependency parsing of Turkish, an agglutinative,
free constituent order language that can be seen as the representative of a wider class of languages
of similar type. Our investigations show that morphological structure plays an essential role in
finding syntactic relations in such a language. In particular, we show that employing sublexical
units called inflectional groups, rather than word forms, as the basic parsing units improves
parsing accuracy. We test our claim on two different parsing methods, one based on a probabilis-
tic model with beam search and the other based on discriminative classifiers and a deterministic
parsing strategy, and show that the usefulness of sublexical units holds regardless of the parsing
method. We examine the impact of morphological and lexical information in detail and show that,
properly used, this kind of information can improve parsing accuracy substantially. Applying
the techniques presented in this article, we achieve the highest reported accuracy for parsing the
Turkish Treebank.
</bodyText>
<sectionHeader confidence="0.996926" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.998452333333333">
Robust syntactic parsing of natural language is an area in which we have seen tremen-
dous development during the last 10 to 15 years, mainly on the basis of data-driven
methods but sometimes in combination with grammar-based approaches. Despite this,
most of the approaches in this field have only been tested on a relatively small set
of languages, mostly English but to some extent also languages like Chinese, Czech,
Japanese, and German.
</bodyText>
<affiliation confidence="0.626391">
* Department of Computer Engineering, Istanbul Technical University, 34469 Istanbul, Turkey.
</affiliation>
<email confidence="0.986509">
E-mail: gulsen.cebiroglu@itu.edu.tr.
</email>
<note confidence="0.880277">
** School of Mathematics and Systems Engineering, V¨axj¨o University, 35260 V¨axj¨o, Sweden.
</note>
<email confidence="0.986071">
E-mail: joakim.nivre@msi.vxu.se.
</email>
<affiliation confidence="0.9818165">
t Department of Linguistics and Philology, Uppsala University, Box 635, 75126 Uppsala, Sweden.
t Faculty of Engineering and Natural Sciences, Sabancı University, 34956 Istanbul, Turkey.
</affiliation>
<email confidence="0.99458">
E-mail: oflazer@sabanciuniv.edu.
</email>
<note confidence="0.94897375">
Submission received: 5 October 2006; revised submission received: 3 April 2007; accepted for publication:
16 May 2007.
© 2008 Association for Computational Linguistics
Computational Linguistics Volume 34, Number 3
</note>
<bodyText confidence="0.997334947368421">
An important issue in this context is to what extent our models and algorithms
are tailored to properties of specific languages or language groups. This issue is es-
pecially pertinent for data-driven approaches, where one of the claimed advantages
is portability to new languages. The results so far mainly come from studies where a
parser originally developed for English, such as the Collins parser (Collins 1997, 1999),
is applied to a new language, which often leads to a significant decrease in the measured
accuracy (Collins et al. 1999; Bikel and Chiang 2000; Dubey and Keller 2003; Levy and
Manning 2003; Corazza et al. 2004). However, it is often quite difficult to tease apart the
influence of different features of the parsing methodology in the observed degradation
of performance.
A related issue concerns the suitability of different kinds of syntactic representation
for different types of languages. Whereas most of the work on English has been based
on constituency-based representations, partly influenced by the availability of data
resources such as the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993), it
has been argued that free constituent order languages can be analyzed more adequately
using dependency-based representations, which is also the kind of annotation found,
for example, in the Prague Dependency Treebank of Czech (Hajiˇc et al. 2001). Recently,
dependency-based parsing has been applied to 13 different languages in the shared
task of the 2006 Conference on Computational Natural Language Learning (CoNLL)
(Buchholz and Marsi 2006).
In this article, we focus on dependency-based parsing of Turkish, a language that
is characterized by rich agglutinative morphology, free constituent order, and predom-
inantly head-final syntactic constructions. Thus, Turkish can be viewed as the repre-
sentative of a class of languages that are very different from English and most other
languages that have been studied in the parsing literature. Using data from the recently
released Turkish Treebank (Oflazer et al. 2003), we investigate the impact of different
design choices in developing data-driven parsers. There are essentially three sets of
issues that are addressed in these experiments.
• The first set includes issues relating to the treatment of morphology in
syntactic parsing, which becomes crucial when dealing with languages
where the most important clues to syntactic functions are often found in
the morphology rather than in word order patterns. Thus, for Turkish, it
has previously been shown that parsing accuracy can be improved by
taking morphologically defined units rather than word forms as the basic
units of syntactic structure (Eryi˘git and Oflazer 2006). In this article, we
corroborate this claim showing that it holds in both approaches we
explore. We also study the impact of different morphological feature
representations on parsing accuracy.
</bodyText>
<listItem confidence="0.896421333333333">
• The second set of issues concerns lexicalization, a topic that has been very
prominent in the parsing literature lately. Whereas the best performing
parsers for English all make use of lexical information, the real benefits of
lexicalization for English as well as other languages remains controversial
(Dubey and Keller, 2003; Klein and Manning 2003; Arun and Keller 2005).
• The third set concerns the basic parsing methodology, including both
parsing algorithms and learning algorithms. We first introduce a statistical
parser using a conditional probabilistic model which is very sensitive to
the selected representational features and thus clearly exposes the ones
</listItem>
<page confidence="0.994732">
358
</page>
<note confidence="0.810775">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<bodyText confidence="0.9978726">
with crucial importance for parsing Turkish. We then implement our
models on a deterministic classifier-based parser using discriminative
learning, which is one of the best performing dependency parsers
evaluated on a wide range of different languages.
Additionally we address the following issues:
</bodyText>
<listItem confidence="0.996537666666667">
• We investigate learning curves and provide an error analysis for the best
performing parser.
• For most of our experiments we use as input the gold-standard tags from
the treebank. However, in our last experiments we evaluate the impact of
automatic statistical morphological disambiguation on the performance of
our best performing parser.
</listItem>
<bodyText confidence="0.999908166666667">
The rest of the article is structured as follows. Section 2 gives a very brief introduc-
tion to Turkish morphology and syntax and discusses the representation of morpholog-
ical information and syntactic dependency relations in the Turkish Treebank. Section 3
is devoted to methodological issues, in particular the data sets and evaluation metrics
used in experiments. The following two sections present two different dependency
parsers trained and evaluated on the Turkish Treebank: a probabilistic parser (Section 4)
and a classifier-based parser (Section 5). Section 6 investigates the impact of lexicaliza-
tion and morphological information on the two parsers, and Section 7 examines their
learning curves. Section 8 presents an error analysis for the best performing parser,
and Section 9 analyzes the degradation in parsing performance when using automatic
morphological disambiguation. Section 10 discusses related work, and Section 11 sum-
marizes the main conclusions from our study.
</bodyText>
<sectionHeader confidence="0.633529" genericHeader="keywords">
2. Turkish: Morphology and Dependency Relations
</sectionHeader>
<bodyText confidence="0.9999289375">
Turkish displays rather different characteristics compared to the more well-studied
languages in the parsing literature. Most of these characteristics are also found in
many agglutinative languages such as Basque, Estonian, Finnish, Hungarian, Japanese,
and Korean.1 Turkish is a flexible constituent order language. Even though in written
texts the constituent order predominantly conforms to the SOV order, constituents may
freely change their position depending on the requirements of the discourse context
(Erguvanlı 1979; Hoffman 1994). However, from a dependency structure point of view,
Turkish is predominantly (but not exclusively) head final.
Turkish has a very rich agglutinative morphological structure. Nouns can give rise
to about 100 inflected forms and verbs to many more. Furthermore, Turkish words may
be formed through very productive derivations, increasing substantially the number of
possible word forms that can be generated from a root word. It is not uncommon to find
up to four or five derivations in a single word. Previous work on Turkish (Hakkani-
T¨ur, Oflazer, and T¨ur 2002; Oflazer 2003; Oflazer et al. 2003; Eryi˘git and Oflazer 2006)
has represented the morphological structure of Turkish words by splitting them into
inflectional groups (IGs). The root and derivational elements of a word are represented
</bodyText>
<footnote confidence="0.9537105">
1 We, however, do not necessarily suggest that the morphological sublexical representation that we use for
Turkish later in this article is applicable to these languages.
</footnote>
<page confidence="0.991183">
359
</page>
<note confidence="0.800226">
Computational Linguistics Volume 34, Number 3
</note>
<bodyText confidence="0.998768">
by different IGs, separated from each other by derivational boundaries (DB). Each IG is
then annotated with its own part of speech and any inflectional features as illustrated
in the following example:2
</bodyText>
<equation confidence="0.9153044">
arabanazdayda
(‘it was in your car’)
arabanazda DB yda
araba+Noun+A3sg+P2pl+Loc
~ V •
IG1
DB +Verb+Zero+Past+A3sg
� Y �
IG2
‘in your car’ ‘it was’
</equation>
<bodyText confidence="0.9999692">
In this example, the root of the word arabanazdayda is araba (‘car’) and its part of speech is
noun. From this, a verb is derived in a separate IG. So, the word is composed of two IGs
where the first one, arabanazda (‘in your car’), is a noun in locative case and in second
plural possessive form, and the second one is a verbal derivation from this noun in past
tense and third person singular form.
</bodyText>
<subsectionHeader confidence="0.983099">
2.1 Dependency Relations in Turkish
</subsectionHeader>
<bodyText confidence="0.9998985">
Because most syntactic information is mediated by morphology, it is not sufficient
for the parser to only find dependency relations between orthographic words;3 the
correct IGs involved in the relations should also be identified. We can motivate this
with the following very simple example: In the phrase spor arabanazdayda (‘it was in
your sports car’), the adjective spor (‘sports’) should be connected to the first IG of
the second word. It is the word araba (‘car’) which is modified by the adjective, not
the derived verb form arabanazdayda (‘it was in your car’). So a parser should not just
say that the first word is a dependent of the second but also state that the syntactic
relation is between the last IG of the first word and the first IG of the second word, as
shown:
</bodyText>
<equation confidence="0.684999">
Mod
��
arabanazda DB yda
</equation>
<bodyText confidence="0.999976571428571">
In Figure 1 we see a complete dependency tree for a Turkish sentence laid on top of the
words segmented along IG boundaries. The rounded rectangles show the words and
IGs within words are marked with dashed rounded rectangles. The first thing to note
in this figure is that the dependency links always emanate from the last IG of a word,
because that IG determines the role of that word as a dependent. The dependency links
land on one of the IGs of a (head) word (almost always to the right). The non-final IGs
(e.g., the first IG of the word okuldaki in Figure 1) may only have incoming dependency
</bodyText>
<footnote confidence="0.6078576">
2 +A3sg = 3sg number agreement, +P2pl = 2pl possessive agreement, +Loc = Locative Case.
3 For the same reason, Bozsahin (2002) uses morphemes as sublexical constituents in a CCG framework.
Because the lexicon was organized in terms of morphemes each with its own CCG functor, the grammar
had to account for both the morphotactics and the syntax at the same time.
spor
</footnote>
<page confidence="0.986268">
360
</page>
<note confidence="0.951928">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<figureCaption confidence="0.985588">
Figure 1
</figureCaption>
<bodyText confidence="0.985386588235294">
Dependency links in an example Turkish sentence.
’+’s indicate morpheme boundaries. The rounded rectangles show words, and IGs within words
that have more than one IG are indicated by the dashed rounded rectangles. The inflectional
features of each IG as produced by the morphological analyzer are listed below the IG.
links and are assumed to be morphologically linked to the next IG to the right (but we
do not explicitly show these links).4
The noun phrase formed by the three words ¨oˇgrencilerin en akallasa in this example
highlights the importance of the IG-based representation of syntactic relations. Here
in the word akallasa, we have three IGs: The first contains the singular noun akal (‘intelli-
gence’), the second IG indicates the derivation into an adjective akalla (‘intelligence-with’
→ ’intelligent‘). The preceding word en (‘most’), an intensifier adverb, is linked to this IG
as a modifier (thus forming ’most intelligent‘). The third IG indicates another derivation
into a noun (‘a singular entity that is most intelligent’). This last IG is the head of a
dependency link emanating from the word ¨oˇgrencilerin with genitive case-marking (‘of
the students’ or ‘students’ ’) which acts as the possessor of the last noun IG of the third
word akallasa. Finally, this word is the subject of the verb IG of the last word, through its
last IG.
</bodyText>
<subsectionHeader confidence="0.999317">
2.2 The Turkish Treebank
</subsectionHeader>
<bodyText confidence="0.998682555555556">
We have used the Turkish Treebank (Oflazer et al. 2003), created by the Middle East
Technical University and Sabancı University, in the experiments we report in this ar-
ticle. The Turkish Treebank is based on a small subset of the Metu Turkish Corpus
(www.ii.metu.edu.tr/∼corpus/corpus.html), a balanced collection of post-1990 Turk-
ish text from 10 genres. The version that has been used in this article is the version used
in the CoNLL-X shared task publicly available from www.ii.metu.edu.tr/∼corpus/
treebank.html.
This treebank comprises 5,635 sentences in which words are represented with IG-
based gold-standard morphological representation and dependency links between IGs.
</bodyText>
<footnote confidence="0.998267">
4 It is worth pointing out that arrows in this representation point from dependents to heads, because
representations with arrows in the opposite direction also exist in the literature.
</footnote>
<page confidence="0.989517">
361
</page>
<note confidence="0.296455">
Computational Linguistics Volume 34, Number 3
</note>
<bodyText confidence="0.999904363636364">
The average number of IGs per word is 1.26 in running text, but the figure is higher for
open class words and 1 for high frequency function words which do not inflect. Of all
the dependencies in the treebank, 95% are head-final5 and 97.5% are projective.6
Even though the number of sentences in the Turkish Treebank is in the same range
as for many other available treebanks for languages such as Danish (Kromann 2003),
Swedish (Nivre, Nilsson, and Hall 2006), and Bulgarian (Simov, Popova, and Osenova
2002), the number of words is considerably smaller (54K as opposed to 70–100K for the
other treebanks). This corresponds to a relatively short average sentence length in the
treebank of about 8.6 words, which is mainly due to the richness of the morphological
structure, because often one word in Turkish may correspond to a whole sentence in
another language.
</bodyText>
<sectionHeader confidence="0.968853" genericHeader="introduction">
3. Dependency Parsing of Turkish
</sectionHeader>
<bodyText confidence="0.999983777777778">
In the following sections, we investigate different approaches to dependency parsing
of Turkish and show that using parsing units smaller than words improves the parsing
accuracy. We start by describing our evaluation metrics and the data sets used, and
continue by presenting our baseline parsers: two naive parsers, which link a dependent
to an IG in the next word, and one rule-based parser. We then present our data-driven
parsers in the subsequent sections: a statistical parser using a conditional probabilistic
model (from now on referred to as the probabilistic parser) in Section 4 and a deter-
ministic classifier-based parser using discriminative learning (from now on referred to
as the classifier-based parser) in Section 5.
</bodyText>
<subsectionHeader confidence="0.999929">
3.1 Data Sets and Evaluation Metrics
</subsectionHeader>
<bodyText confidence="0.998423375">
Our experiments are carried out on the entire treebank and all our results are reported
for this data set. We use ten-fold cross-validation for the evaluation of the parsers, except
for the baseline parsers which do not need to be trained. We divide the treebank data
into ten equal parts and in each iteration use nine parts as training data and test the
parser on the remaining part.
We report the results as mean scores of the ten-fold cross-validation, with standard
error. The main evaluation metrics that we use are the unlabeled attachment score
(ASU) and labeled attachment score (ASL), namely, the proportion of IGs that are
attached to the correct head (with the correct label for ASL). A correct attachment is
one in which the dependent IG (the last IG in the dependent word) is not only attached
to the correct head word but also to the correct IG within the head word. Where relevant, we
also report the (unlabeled) word-to-word score (WWU), which only measures whether
a dependent word is connected to (some IG in) the correct head word. It should be
clear from the discussion in Section 2.1 and from Figure 1 that the IG-to-IG evaluation
is the right one to use for Turkish even though it is more stringent than word-to-
word evaluation. Dependency links emanating from punctuation are excluded in all
</bodyText>
<footnote confidence="0.997015666666667">
5 Half of the head-initial dependencies are actually not real head-initial structures; these are caused by
some enclitics (addressed in detail in the following sections) which can easily be recovered with some
predefined rules.
6 A dependency between a dependent i and a head j is projective if and only if all the words or IGs that
occur between i and j in the linear order of the sentence are dominated by j. A dependency analysis with
only projective dependencies corresponds to a constituent analysis with only continuous constituents.
</footnote>
<page confidence="0.994394">
362
</page>
<bodyText confidence="0.873648">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
evaluation scores. Non-final IGs of a word are assumed to link to the next IG within the
word, but these links, referred to as InnerWord links, are not considered as dependency
relations and are excluded in evaluation scoring.
</bodyText>
<subsectionHeader confidence="0.999086">
3.2 Baseline Parsers
</subsectionHeader>
<bodyText confidence="0.9999823">
We implemented three baseline parsers to assess the performance of our probabilistic
and classifier-based parsers. The first baseline parser attaches each word (from the last
IG) to the first IG of the next word while the second parser attaches each word to the
final IG of the next word. Obviously these two baseline parsers behave the same when
the head word has only one IG. The final punctuation of each sentence is assumed to
be the root of the sentence and it is not connected to any head. The first two lines of Ta-
ble 1 give the unlabeled attachment scores of these parsers. We observe that attaching
the link to the first IG instead of the last one gives better results.
The third baseline parser is a rule-based parser that uses a modified version of the
deterministic parsing algorithm by Nivre (2006). This parsing algorithm, which will be
explained in detail in Section 5, is a linear-time algorithm that derives a dependency
graph in one left-to-right pass over the input, using a stack to store partially processed
tokens and a list to store remaining input tokens in a way similar to a shift-reduce
parser. In the rule-based baseline parser, the next parsing action is determined according
to 31 predefined hand-written rules (Eryi˘git 2006; Eryi˘git, Adalı, and Oflazer 2006).
The rules determine whether or not to connect the units (words or IGs) on top of the
stack and at the head of the input list (regardless of dependency labels). It can be
seen that the rule-based parser provides an improvement of about 15 percentage points
compared to the relatively naive simpler baseline parsers which cannot recover head-
initial dependencies.
</bodyText>
<sectionHeader confidence="0.871216" genericHeader="method">
4. Probabilistic Dependency Parser
</sectionHeader>
<bodyText confidence="0.9994225">
A well-studied approach to dependency parsing is a statistical approach where the
parser takes a morphologically tagged and disambiguated sentence as input, and
outputs the most probable dependency tree by using probabilities induced from the
training data. Such an approach comprises three components:
</bodyText>
<listItem confidence="0.999751666666667">
1. A parsing algorithm for building the dependency analyses (Eisner 1996;
Sekine, Uchimoto, and Isahara 2000)
2. A conditional probability model to score the analyses (Collins 1996)
</listItem>
<tableCaption confidence="0.998082">
Table 1
</tableCaption>
<table confidence="0.9356952">
Unlabeled attachment scores and unlabeled word-to-word scores for the baseline parsers.
Parsing Model ASU WWU
Attach-to-next (first IG) 56.0 63.3
Attach-to-next (last IG) 54.1 63.3
Rule-based 70.5 79.3
</table>
<page confidence="0.938164">
363
</page>
<figure confidence="0.300094333333333">
Computational Linguistics Volume 34, Number 3
3. Maximum likelihood estimation to make inferences about the underlying
probability models (Collins 1996; Chung and Rim 2004)
</figure>
<subsectionHeader confidence="0.985362">
4.1 Methodology
</subsectionHeader>
<bodyText confidence="0.9998565">
The aim of our probabilistic model is to assign a probability to each candidate depen-
dency link by using the frequencies of similar dependencies computed from a training
set. The aim of the parsing algorithm is then to explore the search space in order to find
the most probable dependency tree. This can be formulated with Equation (1) where S
is a sequence of n units (words or IGs) and T ranges over possible dependency trees
consisting of dependency links dep(ui, uH(i)), with uH(i) denoting the head unit to which
the dependent unit ui is linked and the probability of a given tree is the product of the
dependency links that it comprises.
</bodyText>
<equation confidence="0.999687333333333">
T∗ = argmax P(T|S) = argmax n��-771 P(dep (ui,uH(i))  |S) (1)
T T 11
i=1
</equation>
<bodyText confidence="0.99915494117647">
The observation that 95% of the dependencies in the Turkish treebank are head-
final dependencies motivated us to employ the backward beam search dependency
parsing algorithm by Sekine, Uchimoto, and Isahara (2000) (originally designed for
Japanese, another head-final language), adapted to our morphological representation
with IGs. This algorithm parses a sentence starting from the end moving towards the
beginning, trying at each step to link the dependents to a unit to the right. It uses a
beam which keeps track of the most probable dependency structures for the partially
processed sentence. However, in order to handle head-initial dependencies, it employs
three predefined lexicalized rules7 (also used in our rule-based baseline parser). For
every new word, the parser starts by checking if any of the rules apply. If so, it constructs
a right-to-left link where H(i) &lt; i and directly assigns 1.0 as the dependency probability
(P(dep (ui, uH(i))  |S) = 1.0). If none of the rules apply, it instead uses probabilities for
head-final dependencies.
For the probability model, we adopt the approach by Chung and Rim (2004), which
itself is a modified version of the statistical model used in Collins (1996).8 In this model
in Equation (2), the probability of a dependency link P(dep (ui, uH(i))  |S) linking ui to a
head uH(i) is approximated with the product of two probabilities:
</bodyText>
<equation confidence="0.960747">
P(dep (ui,uH(i))  |S) ≈ P(link(ui,uH(i))  |(Di (DH(i)) (2)
</equation>
<footnote confidence="0.933341444444444">
P(ui links to some head dist(i,H(i)) away  |(Di)
7 The rules check for enclitics such as de, ki, mi, written on the right side of and separately from the word
they attach to, for the verb de˘gil, which gives a negative meaning to the word coming before it and for
nominals which do not have any verbs on their right side.
8 The statistical model in Collins (1996) is actually used in a phrase-structure-based parsing approach, but
it uses the same idea of computing probabilities between dependents and head units. We also tried to
employ the statistical model of Collins, where the distance measure Di,H(i) is included in the link
probability formula (P(dep (ui, uH(i))  |S) ≈ P(link(ui, uH(i))  |Di,H(i))) , but we obtained worse results
with this.
</footnote>
<page confidence="0.995837">
364
</page>
<bodyText confidence="0.703085">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
In this equation,
</bodyText>
<listItem confidence="0.995781">
• P(link(ui, un(i))  |(Di (Dn(i)) is the probability of seeing the same dependency
within a similar context where (Di represents the context around the
dependent ui and (Dn(i) represents the context around the head uH(i), and
• P(ui links to some head dist(i,H(i)) away  |(Di) is the probability of seeing
the dependent linking to some head a distance dist(i,H(i)) away, in the
context (Di.
</listItem>
<bodyText confidence="0.9981545">
In all of the following models, dist(i,H(i)) is taken as the number of actual word
boundaries between the dependent and the head unit regardless of whether full words
or IGs were used as units of parsing.9
To alleviate the data sparseness, we use the interpolation of other estimates while
calculating the probabilities in Equation (2).10 We use a strategy similar to Collins (1996)
and we interpolate with estimates based on less context:
</bodyText>
<equation confidence="0.880563">
P(x|J) &apos;Zz� A · P1(x|J) + (1 − A) · P2(x) (3)
</equation>
<bodyText confidence="0.997859444444445">
where A = b/(b + 1) and b is the count of the x occurrences
During the actual runs, the smoothed probability P(link(ui,un(i))  |(Di (Dn(i)) is estimated
by interpolating two unsmoothed empirical estimates extracted from the treebank:
P1(link(ui,un(i))  |(Di (Dn(i)) and P2(link(ui,un(i))). A similar approach was employed for
P(ui links to some head dist(i,H(i)) away  |(Di) and it is estimated by interpolating
P1(ui links to some head dist(i,H(i)) away  |(Di) and P2(ui links to some head dist(i,H(i))
away). If even after interpolation, the probability is 0, then a very small value is
used. Further, distances larger than a certain threshold value were assigned the same
probability, as explained later.
</bodyText>
<subsectionHeader confidence="0.996229">
4.2 The Choice of Parsing Units
</subsectionHeader>
<bodyText confidence="0.994417285714286">
In the probabilistic dependency parsing experiments, we experimented with three dif-
ferent ways of choosing and representing the units for parsing:11
1. Word-based model #1: In this model, the units of parsing are the actual words
and each word is represented by a combination of the representations of all the IGs
that make it up. Note that although all IGs are used in representing a word, not all the
information provided by an IG has to be used, as we will see shortly. This representation,
however, raises the following question: If we use the words as the parsing units and
</bodyText>
<footnote confidence="0.9975414">
9 We also tried other distance functions, for example, the number of IGs between dependent and head
units, but this choice fared better than the alternatives.
10 We tried many other different interpolation and backoff models where we tried to remove the neighbors
one by one or the inflectional features. But we obtained the best results with a two-level interpolation by
removing the contextual information all at once.
</footnote>
<page confidence="0.7890215">
11 Clarifying examples of these representations will be provided in the immediately following section.
365
</page>
<note confidence="0.297207">
Computational Linguistics Volume 34, Number 3
</note>
<bodyText confidence="0.976160264705882">
find the dependencies between these, how can we translate these to the dependencies
between the IGs, since our goal is to find dependencies between IGs? The selection
of the IG of the dependent word is an easy decision, as it is the last IG in the word.
The selection of the head IG is obviously more difficult. Because such a word-based
model will not provide much information about the underlying IGs structure, we will
have to make some assumptions about the head IG. The observation that 85.6% of the
dependency links in the treebank land on the first (and possibly the only) IG of the
head word and the fact that our first baseline model (attaching to the first IG) gives
better performance than our second baseline model (attaching to the last IG), suggest
that after identifying the correct word, choosing the first IG as the head IG may be a
reasonable heuristic. Another approach to determining the correct IG in the head word
could be to develop a post-processor which selects this IG using additional rules. Such
a post-processor could be worth developing if the WWU accuracy obtained with this
model proves to be higher than all of the other models, that is, if this is the best way
of finding the correct dependencies between words without considering which IGs are
connected. However, as we will see in Section 4.4, this model does not give the best
WWU.
2. Word-based model #2: This model is just like the previous model but we rep-
resent a word using its final IGs rather than the concatenation of all their IGs when it
is used as a dependent. The representation is the same as in Word-based model #1 when
the word is a head. This results in a dynamic selection of the representation during
parsing as the representation of a word will be determined according to its role at that
moment. The representation of the neighboring units in context will again be selected
with respect to the word in question: any context unit on the left will be represented
with its dependent representation (just the last IG) and any neighbor on the right will
be represented with its representation as a head. The selection of the IG in the head
word is the same as in the first model.
3. IG-based model: In this model, we use IGs as units in parsing. We split the IG-
based representation of each word and reindex these IGs in order to use them as single
units in parsing. Figure 2 shows this transfer to the IG-based model. We still, however,
need to know which IGs are word-final as they will be the dependent IGs (shown in
the figure by asterisks). The contextual elements that are used in this model are the
IGs to the left (starting with the last IG of the preceding word) and to the right of the
dependent and the head IG.
</bodyText>
<figureCaption confidence="0.771992">
Figure 2
</figureCaption>
<bodyText confidence="0.824466">
Mapping from word-based to IG-based representation of a sentence.
</bodyText>
<page confidence="0.978828">
366
</page>
<bodyText confidence="0.468749">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</bodyText>
<subsectionHeader confidence="0.996853">
4.3 Reduced Dynamic Representations for IGs
</subsectionHeader>
<bodyText confidence="0.999906785714286">
In all three models, it is certainly possible to use all the information supplied by the
full morphological analysis in representing the IGs.12 This includes the root words
themselves, major and minor parts of speech,13 number and person agreement markers,
possessive agreement markers, case markers, tense, aspect, mood markers, and other
miscellaneous inflectional and semantic markers especially for derivations. Not all of
these features may be relevant to the parsing task, and further, different features may
be relevant depending on whether the IG is being used as a dependent or a head. Also,
in order to alleviate the data sparseness problem that may result from the relatively
modest size of the treebank, an “unlexicalized” representation that does not contain the
root word needs to be considered so that statistics from IGs that are otherwise the same
except for the root word (if any) can be conflated.14 After some preliminary experimen-
tation, we decided that a reduced representation for IGs that is dynamically selected
depending on head or dependent status would give us the best performance. We explain
the representation of the IGs and the parameters that we used in the three models.
</bodyText>
<listItem confidence="0.8792875">
• When used as a dependent (or part of a dependent word in models 1
and 2) during parsing;
</listItem>
<bodyText confidence="0.8277146">
– Nominal IGs (nouns, pronouns, and other derived forms that
inflect with the same paradigm as nouns, including infinitives, past
and future participles) are represented only with the case marker,
because that essentially determines the syntactic function of that IG
as a dependent, and only nominals have cases.
</bodyText>
<listItem confidence="0.923177833333333">
– Any other IG is just represented with its minor part of speech.
• When used as a head (or part of a head word in models 1 and 2);
– Nominal IGs and adjective IGs with participle minor part of
speech15 are represented with the minor part of speech and the
possessive agreement marker.
– Any other IG is just represented with its minor part of speech.
</listItem>
<bodyText confidence="0.934481692307692">
Figures 3–5 show, for the first three words in Figure 1, the unlexicalized reduced
representations that are used in the three models when units are used as dependents
and heads during parsing.
12 See Figure 1 for a sample of such information.
13 A minor part-of-speech category is available for some major part-of-speech categories: pronouns are
further divided into personal pronouns, demonstrative pronouns, interrogative pronouns, and so on. The
minor part-of-speech category always implies the major part of speech. For derived IGs, the minor part of
speech mostly indicates a finer syntactic or semantic characterization of the derived word. When no
minor part of speech is available the major part of speech is used.
14 Remember that only the first IG in a word has the root word.
15 These are modifiers derived from verbs. They have adjective as their major part of speech and
past/future participle as their minor part of speech. They are the only types of IGs that have possessive
agreement markers other than nominals.
</bodyText>
<page confidence="0.966586">
367
</page>
<figure confidence="0.880272333333333">
Computational Linguistics Volume 34, Number 3
Figure 3
Reduced IG representation for Word-based model #1.
</figure>
<figureCaption confidence="0.985315">
Figure 4
</figureCaption>
<bodyText confidence="0.533664">
Reduced IG representation for Word-based model #2.
</bodyText>
<subsectionHeader confidence="0.996078">
4.4 Experimental Results
</subsectionHeader>
<bodyText confidence="0.9995105">
In this section, we first evaluate the performance of the models described in Section 4.2.
We then investigate the impact of different choices of morphological features on the best
performing IG-based model. In addition to the parsing model, the parser is given the
following parameters:
</bodyText>
<listItem confidence="0.9982154">
• the number of left and right neighbors of the dependent (Dl, Dr) to define
the dependent context Φi,16
• the number of left and right neighbors of the head (Hl, Hr) to define the
head context ΦH(i),
• the size of the beam (beamsize), and
</listItem>
<footnote confidence="0.617449">
16 In terms of parsing units, the number of words for word-based models and the number of IGs for
IG-based models.
</footnote>
<page confidence="0.992198">
368
</page>
<note confidence="0.740722">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<figureCaption confidence="0.88771">
Figure 5
</figureCaption>
<bodyText confidence="0.457945">
Reduced IG representation for IG-based model.
</bodyText>
<listItem confidence="0.9967135">
• the distance threshold value beyond which P(ui links to some head
dist(i,H(i)) away I Φi) is assigned the same probability.
</listItem>
<bodyText confidence="0.942990148148148">
Table 2 gives the ASU scores for the word-based and IG-based models for the
best combinations of contexts used for each case. We also provide WWU scores for
comparison, but again stress that the main evaluation criterion is the ASU score. For
all three models, the beamsize value is selected as 3 and distance threshold is selected
as 6.17 It can be seen that the performance of the word-based models is lower than
our rule-based baseline parser (Table 1) with ASU = 70.5, even though it is better than
the first two rather naive baselines. On the other hand, the IG-based model outper-
forms all of the baseline parsers and word-based models. It should also be noted that
the IG-based model improves not only the ASU accuracy but also the word-to-word
accuracy compared, to the word-based models. Thus, the IG-based model not only
helps to recover the relations between correct IGs but also to find the correct head
word.
In Table 3, we also present results from experiments employing different represen-
tations for the IGs. A more detailed investigation about the use of limited lexicalization
and inflectional features will be presented later in Section 6. Here, we will see what
would have happened if we had used alternative reduced IG representations compared
to the representation described earlier, which is used in the best performing IG-based
model.
Table 3 gives the results for each change to the representational model. One can
see that none of these representational changes improves the performance of the best
performing model. Only employing major part-of-speech tags (#1) actually comes close,
and the difference is not statistically significant. Lexicalization of the model results in
a drastic decrease in performance: Using the surface form (#6) gives somewhat better
17 As stated earlier in Section 4.1, our distance function is calculated according to the word boundaries
between the dependent and the head units. In the treebank, 95% of the dependency links link to a word
that is less than six words away. Thus all the distances larger than or equal to six are conflated into the
same small probability.
</bodyText>
<page confidence="0.994845">
369
</page>
<table confidence="0.429242">
Computational Linguistics Volume 34, Number 3
</table>
<tableCaption confidence="0.965075">
Table 2
</tableCaption>
<table confidence="0.861505">
Unlabeled attachment scores and unlabeled word-to-word scores for the probabilistic parser.
Parsing Model (parameters) ASU WWU
Word-based model #1 (Dl=1, Dr=1, Hl=1, Hr=1) 68.1±0.4 77.1±0.7
Word-based model #2 (Dl=1, Dr=1, Hl=1, Hr=1) 68.3±0.3 77.6±0.5
IG-based model (Dl=1, Dr=1, Hl=0, Hr=1) 72.1±0.3 79.0±0.7
</table>
<bodyText confidence="0.994805333333333">
results than using root information (#5). Also, dynamic selection of tags seems to help
performance (#3) but using all available inflectional information performs significantly
worse possibly due to data sparseness.
</bodyText>
<sectionHeader confidence="0.908001" genericHeader="method">
5. Classifier-Based Dependency Parser
</sectionHeader>
<bodyText confidence="0.997964333333333">
Our second data-driven parser is based on a parsing strategy that has achieved a high
parsing accuracy across a variety of different languages (Nivre et al. 2006, 2007). This
strategy consists of the combination of the following three techniques:
</bodyText>
<listItem confidence="0.9927395">
1. Deterministic parsing algorithms for building dependency graphs (Kudo
and Matsumoto 2002; Nivre 2003; Yamada and Matsumoto 2003)
</listItem>
<tableCaption confidence="0.990524">
Table 3
</tableCaption>
<table confidence="0.507929375">
Unlabeled attachment scores for different choices for morphological features.
Model ASU
IG-based model
# (Dl=1, Dr=1, Hl=0, Hr=1) 72.1±0.3
1 Using major part of speech 71.2±0.2
instead of minor part of speech
2 Using only minor part of speech and 68.3±0.2
no other inflectional features
</table>
<footnote confidence="0.639159181818182">
3 Using minor part of speech for all 71.0±0.3
types of IGs together with case and
possessive markers for nominals
and possessive marker for adjectives
(but no dynamic selection)
4 Using all inflectional features in 46.5±0.4
addition to minor part of speech
5 Adding root information to the best 53.7±0.2
performing IG-based model
6 Adding surface form information to the best 54.4±0.2
performing IG-based model
</footnote>
<page confidence="0.994519">
370
</page>
<bodyText confidence="0.716035">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</bodyText>
<listItem confidence="0.994994">
2. History-based models for predicting the next parser action (Black et al.
1992; Magerman 1995; Ratnaparkhi 1997; Collins 1999)
3. Discriminative classifiers to map histories to parser actions (Kudo and
Matsumoto 2002; Yamada and Matsumoto 2003; Nivre, Hall, and Nilsson
2004)
</listItem>
<bodyText confidence="0.9994406">
A system of this kind employs no grammar but relies completely on inductive learning
from treebank data for the analysis of new sentences, and on deterministic parsing
for disambiguation. This combination of methods guarantees that the parser is robust,
never failing to produce an analysis for an input sentence, and efficient, typically
deriving this analysis in time that is linear in the length of the sentence.
In the following sections, we will first present the parsing methodology and then
results that show that the IG-based model again outperforms the word-based model. We
will then explore how we can further improve the accuracy by exploiting the advantages
of this parser. All experiments are performed using the freely available implementation
MaltParser.18
</bodyText>
<subsectionHeader confidence="0.9705">
5.1 Methodology
</subsectionHeader>
<bodyText confidence="0.999812941176471">
For the experiments in this article, we use a variant of the parsing algorithm proposed
by Nivre (2003, 2006), a linear-time algorithm that derives a labeled dependency graph
in one left-to-right pass over the input, using a stack to store partially processed tokens
and a list to store remaining input tokens. However, in contrast to the original arc-eager
parsing strategy, we use an arc-standard bottom-up algorithm, as described in Nivre
(2004). Like many algorithms used for dependency parsing, this algorithm is restricted
to projective dependency graphs.
The parser uses two elementary data structures, a stack σ of partially analyzed
tokens and an input list τ of remaining input tokens. The parser is initialized with an
empty stack and with all the tokens of a sentence in the input list; it terminates as soon
as the input list is empty. In the following, we use subscripted indices, starting from 0,
to refer to particular tokens in σ and τ. Thus, σ0 is the token on top of the stack σ (the
top token) and τ0 is the first token in the input list τ (the next token); σ0 and τ0 are
collectively referred to as the target tokens, because they are the tokens considered as
candidates for a dependency relation by the parsing algorithm.
There are three different parsing actions, or transitions, that can be performed in
any non-terminal configuration of the parser:
</bodyText>
<listItem confidence="0.995842">
• Shift: Push the next token onto the stack.
• Left-Arcr: Add a dependency arc from the next token to the top token,
labeled r, then pop the stack.
• Right-Arcr: Add a dependency arc from the top token to the next token,
labeled r, then replace the next token by the top token at the head of the
input list.
</listItem>
<page confidence="0.7048155">
18 http://w3.msi.vxu.se/users/nivre/research/MaltParser.html.
371
</page>
<note confidence="0.48222">
Computational Linguistics Volume 34, Number 3
</note>
<bodyText confidence="0.999620666666667">
In order to perform deterministic parsing in linear time, we need to be able to predict
the correct parsing action (including the choice of a dependency type r for Left-Arcr
and Right-Arcr) at any point during the parsing of a sentence. This is what we use a
history-based classifier for.
The features of the history-based model can be defined in terms of different linguis-
tic features of tokens, in particular the target tokens. In addition to the target tokens,
features can be based on neighboring tokens, both on the stack and in the remaining
input, as well as dependents or heads of these tokens in the partially built dependency
graph. The linguistic attributes available for a given token are the following:
</bodyText>
<listItem confidence="0.99991175">
• Lexical form (root) (LEX)
• Part-of-speech category (POS)
• Inflectional features (INF)
• Dependency type to the head if available (DEP)
</listItem>
<bodyText confidence="0.9983651">
To predict parser actions from histories, represented as feature vectors, we use sup-
port vector machines (SVMs), which combine the maximum margin strategy introduced
by Vapnik (1995) with the use of kernel functions to map the original feature space
to a higher-dimensional space. This type of classifier has been used successfully in
deterministic parsing by Kudo and Matsumoto (2002), Yamada and Matsumoto (2003),
and Sagae and Lavie (2005), among others. To be more specific, we use the LIBSVM
library for SVM learning (Chang and Lin 2001), with a polynomial kernel of degree 2,
with binarization of symbolic features, and with the one-versus-one strategy for multi-
class classification.19
This approach has some advantages over the probabilistic parser, in that
</bodyText>
<listItem confidence="0.994436">
• it can process both left-to-right and right-to-left dependencies due to its
parsing algorithm,
• it assigns dependency labels simultaneously with dependencies and can
use these as features in the history-based model, and
• it does not necessarily require expert knowledge about the choice of
linguistically relevant features to use in the representations because SVM
training involves implicit feature selection.
</listItem>
<bodyText confidence="0.9740842">
However, we still exclude sentences with non-projective dependencies during train-
ing.20 Because the classifier-based parser not only builds dependency structures but also
assigns dependency labels, we give ASL scores as well as ASU scores.
19 Experiments have also been performed using memory-based learning (Daelemans and Bosch 2005). They
were found to give lower parsing accuracy.
20 Because the frequency of non-projective dependencies in the Turkish Treebank is not high enough to
learn such dependencies and mostly due to the unconnected punctuations with which we are dealing by
adding an extra dependency label, we did not observe any improvement when applying the
pseudo-projective processing of Nivre and Nilsson (2005), which is reported to improve accuracy for
other languages.
</bodyText>
<page confidence="0.980437">
372
</page>
<note confidence="0.710775">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<subsectionHeader confidence="0.990996">
5.2 Experimental Results
</subsectionHeader>
<bodyText confidence="0.9763607">
In this section, our first aim is to confirm the claim that using IGs as the units in parsing
improves performance. For this purpose, we start by using models similar to those
described in the previous section. We use an unlexicalized feature model where the
parser uses only the minor POS and the DEP of tokens and compare the results with the
probabilistic parser. We then show in the second part how we can improve accuracy by
exploiting the morphological structure of Turkish and taking advantage of the special
features of this parser.
5.2.1 Comparison with the Probabilistic Parser. In order to compare with the results of the
previous section, we adopt the same strategy that we used earlier in order to present
inflectional groups. We employ two representation models:
</bodyText>
<listItem confidence="0.999786666666667">
• Word-based model, where each word is represented by the concatenation
of its IGs,
• IG-based model, where the units are inflectional groups.
</listItem>
<bodyText confidence="0.974646387096774">
We take the minor POS category plus the case and possessive agreement markers for
nominals and participle adjectives to make up the POS feature of each IG.21 However,
we do not employ dynamic selection of these features and just use the same strategy
for both dependents and the heads. The reason is that, in this parser, we do not make
the assumption that the head is always on the right side of the dependent, but also
try to find head-initial dependencies, and the parser does not know at a given stage
if a unit is a candidate head or dependent. In the IG-based model, InnerWord relations
(Figure 5), which are actually determined by the morphological analyzer, are processed
deterministically without consulting the SVM classifiers.22
The feature model (Feature Model #1) to be used in these experiments is shown
in Figure 6. This feature model uses five POS features, defined by the POS of the two
topmost stack tokens (σ0, σ1), the first two tokens of the remaining input (τ0, τ1), and
the token which comes just after the topmost stack token in the actual sentence (σ0 + 1).
The dependency type features involve the top token on the stack (σ0), its leftmost and
rightmost dependent (l(σ0), r(σ0)), and the leftmost dependent of the next input token
(l(τ0)).
The results for this feature model and the two representation models can be seen
in Table 4. We again see that the IG-based model outperforms the word-based model.
When we compare the unlabeled (ASU) scores with the results of the probabilistic parser
(from Table 2), we see that we do not obtain any improvements neither for the IG-based
model nor for the word-based model. This is probably the combined effect of not using
21 Thus, we are actually combining some inflectional features with the part-of-speech category and use
them together in the POS feature.
22 Because only the first IG of a word carries the stem information (and the remaining IGs has null “ ”
values for this field), a lexicalized model can easily determine the InnerWord links without need for a
deterministic model. For the unlexicalized models, it is necessary to process InnerWord relations
deterministically in order to get the full benefit of IG-based parsing, because the classifiers cannot
correctly predict these relations without lexical information (Eryi˘git, Nivre, and Oflazer 2006). However,
for the lexicalized models, adding deterministic InnerWord processing has no impact at all on parsing
accuracy, but it reduces training and parsing time by reducing the number of training instances for the
SVM classifiers.
</bodyText>
<page confidence="0.992725">
373
</page>
<figure confidence="0.78913">
Computational Linguistics Volume 34, Number 3
</figure>
<figureCaption confidence="0.924539">
Figure 6
</figureCaption>
<bodyText confidence="0.673269">
Feature models for the classifier-based parser.
</bodyText>
<tableCaption confidence="0.786212">
Table 4
Unlabeled and labeled attachment scores for the unlexicalized classifier-based parser.
</tableCaption>
<table confidence="0.560968333333333">
Parsing Model ASU ASL
Word-based model 67.1±0.3 57.8±0.3
IG-based model 70.6±0.2 60.9±0.3
</table>
<bodyText confidence="0.977138423076923">
the lexical information for head-initial dependencies that we use in our rules in the
probabilistic parser, and of not using dynamic selection.23
5.2.2 Exploiting the Advantages of the Classifier-Based Parser. To exploit the advantages
of the classifier-based parser, we now describe a setting which does not rely on any
linguistic knowledge on the selection of inflectional features and lets the classifier of the
parser select the useful combinations of the features. As SVMs can perform such tasks
successfully, we now explore different representations of the morphological data in the
IG-based model to see if the performance can be improved.
As shown in earlier examples, the inflectional information available for a given
token normally consists of a complex combination of atomic features such as +A3sg,
+Pnon, and +Loc. Eryi˘git, Nivre, and Oflazer (2006) showed that adding inflectional
features as atomic values to the feature models was better than taking certain subsets
with linguistic intuition and trying to improve on them. Thus we now present results
with the feature model where the POS component only comprises the minor part of
speech and the INF comprises all the other inflectional features provided by the tree-
bank without any reduction. We investigate the impact of this approach first with an
unlexicalized model (Feature Model #2 in Figure 6) and then with a lexicalized model
(Feature Model #3 in Figure 6) where we investigate two different kinds of lexicalization:
one using just the root information and one using the complete surface form as lexical
features.
Table 5 gives the results for both unlexicalized and lexicalized models with INF
features included in the feature model. We can see the benefit of using inflectional
features separately and split into atomic components, by comparing the first line of
the table with the best results for the IG-based model in Table 4. We can also note
23 Actually, the equivalent of this IG-based model is the probabilistic model #3 in Table 3 (with no dynamic
selection), which does not do significantly better than this classifier-based model.
</bodyText>
<page confidence="0.994279">
374
</page>
<note confidence="0.87307">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<tableCaption confidence="0.998755">
Table 5
</tableCaption>
<table confidence="0.904227">
Unlabeled and labeled attachment scores for enhancements of the IG-based model.
Feature Model ASU ASL
Feature Model #2 (no lexicalization) 72.4±0.2 63.1±0.3
Feature Model #3 (lex. with surface forms) 75.7±0.2 66.6±0.3
Feature Model #3 (lex. with roots) 76.0±0.2 67.0±0.3
</table>
<bodyText confidence="0.99208725">
the improvement that lexicalized models bring:24 In contrast to the probabilistic parser,
lexicalization using root information rather than surface form gives better performance,
even though the difference is not statistically significant. The improvement in ASU
score is 3.9 percentage points for the lexicalized model (with root) over the IG-based
model of the probabilistic parser with ASU=72.1±0.3. A similar case can be observed for
WWU accuracies: Including INF and lexicalization with roots gives WWU=82.7±0.5 on
the entire treebank, which provides an improvement of 3.3 percentage points over the
IG-based model of the probabilistic parser (with WWU=79.0±0.7).
</bodyText>
<sectionHeader confidence="0.988989" genericHeader="method">
6. The Impact of Inflectional Features and Lexicalization
</sectionHeader>
<bodyText confidence="0.999995833333334">
In the previous sections, we presented our parsers using optimized parameters and
feature representations. We have observed that using complete inflectional features and
lexicalized models improves the accuracy of the classifier-based parser significantly,
whereas for the probabilistic parser adding these features has a negative impact on
accuracy. In this section, we investigate the influence of different inflectional features
and lexical information on both parsers using the best performing IG-based models,
in order to get a more fine-grained picture. The results of the experiments with the
classifier-based parser are not strictly comparable to those of other experiments, because
the training data have here been divided into smaller sets (based on the major part of
speech category of the next token) as a way of reducing SVM training times without a
significant decrease in accuracy. For the probabilistic parser, we have not used dynamic
selection while investigating the impact of inflectional features.
</bodyText>
<subsectionHeader confidence="0.964926">
6.1 Inflectional Features
</subsectionHeader>
<bodyText confidence="0.99924725">
In order to see the influence of inflectional features, we tested six different sets, where
each set includes the previous one and adds some more inflectional features. The
following list describes each set in relation to the previous one:
Set 1 No inflectional features except for minor part of speech
Set 2 Set 1 + case and possessive markers for nominals, possessive markers for partici-
ple adjectives
Set 3 Set 2 + person/number agreement features for nominals and verbs
Set 4 Set 3 + all inflectional features for nominals
</bodyText>
<footnote confidence="0.930214666666667">
24 The unlabeled exact match score (that is, the percentage of sentences for which all dependencies are
correctly determined) for this best performing model is 37.5% upon IG-based evaluation and 46.5% upon
word-based evaluation.
</footnote>
<page confidence="0.988618">
375
</page>
<note confidence="0.46589">
Computational Linguistics Volume 34, Number 3
</note>
<bodyText confidence="0.976055578947368">
Set 5 Set 4 + all inflectional features for verbs
Set 6 Set 5 + all inflectional features
Figure 7 shows the results for both the probabilistic and the classifier-based parser.
The results shown in Figures 7b confirm the importance of case and possessive features,
which was presupposed in the manual selection of features in Section 4. Besides these,
the number/person agreement features available for nominals and verbs are also impor-
tant inflectional features even though they do not provide any statistically significant
increase in accuracy (except for ASU in Figure 7b [Set 3]). Another point that merits
attention is the fact that the labeled accuracy is affected more by the usage of inflectional
features compared to unlabeled accuracy. The difference between Set 1 and Set 2 (in
Figure 7b) is nearly 4 percentage points for ASU and 10 percentage points for ASL. It
thus appears that inflectional features are especially important in order to determine the
type of the relationship between the dependent and head units. This is logical because
in Turkish it is usually not the word order that determines the roles of the constituents
in a sentence, but the inflectional features (especially the case markers). We again see
from these figures that the classifier-based parser does not suffer from sparse data even
if we use the full set of inflectional features (Set 6) provided by the treebank, whereas the
probabilistic parser starts having this problem even with Set 3 (Figure 7a). The problem
gets worse when we add the complete set of inflectional features.
</bodyText>
<subsectionHeader confidence="0.997823">
6.2 Lexicalization
</subsectionHeader>
<bodyText confidence="0.9998966">
In order to get a more fine-grained view of the role of lexicalization, we have investi-
gated the effect of lexicalizing IGs from different major part-of-speech categories. We
expand this analysis into POS categories where relevant. The results are shown in Ta-
ble 6, where the first column gives the part-of-speech tag of the lexicalized units, and
the second and third columns give the total frequency and the frequency of distinct roots
for that part-of-speech tag. We again see that the probabilistic parser suffers from sparse
data especially for part-of-speech tags that appear with a high number of distinct roots.
We cannot observe any increase with the lexicalization of any category. The situation is
different for the classifier-based parser. None of the individual lexicalizations causes a
decrease. We see that the lexicalization of nouns causes a significant increase in accuracy.
</bodyText>
<figureCaption confidence="0.991517">
Figure 7
</figureCaption>
<table confidence="0.250695">
Accuracy for feature sets 1–6:
</table>
<page confidence="0.746189666666667">
a) Unlabeled accuracy for probabilistic parser
b) Unlabeled and labeled accuracy for classifier-based parser
376
</page>
<note confidence="0.878991">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<tableCaption confidence="0.745958">
Table 6
Unlabeled and labeled attachment scores for limited lexicalization (n = count, d = number of
distinct roots).
</tableCaption>
<table confidence="0.9992278125">
Probabilistic Classifier-based
n d ASU ASU ASL
None - - 72.1±0.3 72.8±0.2 63.2±0.3
Adjectives 6446 735 68.7±0.2 72.9±0.2 63.2±0.3
Adverbs 3033 221 69.8±0.3 73.1±0.2 63.4±0.3
Conjunctions 2200 44 67.8±0.4 74.1±0.2 64.2±0.3
Determiners 1998 13 71.8±0.3 72.8±0.2 63.3±0.3
Duplications 11 9 72.0±0.3 72.8±0.2 63.2±0.3
Interjections 100 34 72.0±0.3 72.8±0.2 63.2±0.3
Nouns 21860 3935 53.7±0.3 73.9±0.2 64.6±0.3
Numbers 850 226 71.4±0.3 72.9±0.2 63.3±0.3
Post-positions 1250 46 70.9±0.3 72.9±0.2 63.2±0.3
Pronouns 2145 28 72.0±0.2 72.8±0.2 63.2±0.3
Punctuations 10420 16 72.1±0.3 73.4±0.2 63.7±0.3
Questions 228 6 71.9±0.2 72.8±0.2 63.2±0.3
Verbs 14641 1256 59.9±0.4 72.9±0.2 63.8±0.3
</table>
<bodyText confidence="0.997892538461539">
Lexicalization of verbs also gives a noticeable increase in the labeled accuracy even
though this is not statistically significant. A further investigation on the minor parts of
speech of nouns25 shows that only common nouns have this positive effect, whereas the
lexicalization of proper nouns does not improve accuracy. We see that the lexicalization
of conjunctions also improves the accuracy significantly. This improvement can be at-
tributed to the enclitics (such as de, ki, mi, written on the right side of and separately from
the word they attach to), which give rise to head-initial dependencies. These enclitics,
which are annotated as conjunctions in the treebank, can be differentiated from other
conjunctions by lexicalization which makes it very easy to connect them to their head
on the left.
Because we did not observe any improvement in the probabilistic parser, we con-
tinued further experimentation only with the classifier-based parser. We tried partially
lexicalized models by lexicalizing various combinations of certain POS categories (see
Figure 8). The results show that, whereas lexicalization certainly improves parsing
accuracy for Turkish, only the lexicalization of conjunctions and nouns together has
an impact on accuracy. Similarly to the experiments on inflectional features, we again
see that the classifier-based parser has no sparse data problem even if we use a totally
lexicalized model.
Although the effect of lexicalization has been discussed in several studies recently
(Dubey and Keller 2003; Klein and Manning 2003; Arun and Keller 2005), it is often
investigated as an all-or-nothing affair, except for a few studies that analyze the distri-
butions of lexical items, for example, Bikel (2004) and Gildea (2001). The results for
25 IGs with a noun part-of-speech tag other than common nouns are marked with an additional minor part
of speech that indicates whether the nominal is a proper noun or a derived form—one of future
participle, past participle, infinitive, or a form involving a zero-morpheme derivation. These latter four
do not contain any root information.
</bodyText>
<page confidence="0.982455">
377
</page>
<figure confidence="0.833092">
Computational Linguistics Volume 34, Number 3
</figure>
<figureCaption confidence="0.918426333333333">
Figure 8
Unlabeled and labeled attachment scores for incrementally extended lexicalization for the
classifier-based parser.
</figureCaption>
<bodyText confidence="0.985609785714286">
Turkish clearly show that the effect of lexicalization is not uniform across syntactic
categories, and that a more fine-grained analysis is necessary to determine in what
respects lexicalization may have a positive or negative influence. For some models
(especially those suffering from sparse data), it may even be a better choice to use some
kind of limited lexicalization instead of full lexicalization, although the experiments
in this article do not show any example of that. The results from the previous section
suggests that the same is true for morphological information, but this time showing that
limited addition of inflectional features (instead of using them fully) helps to improve
the accuracy of the probabilistic parser.
7. The Impact of Training Set Size
In order to see the influence of the training set size on the performance of our parsers,
we designed the experiments shown in Figure 9, where the x-axis shows the number
of cross validation subsets that we used for training in each step. Figure 9 gives the
ASU scores for the probabilistic parser (unlexicalized except for head-initial rules) and
the classifier-based parser (unlexicalized and lexicalized). We observe that the relative
improvement with growing training set size is largest for the classifier-based lexicalized
model with a relative difference of 5.2±0.2 between using nine training subsets and one
training subset, whereas this number is 4.6±0.3 for the unlexicalized classifier-based
model and 2.5±0.2 for the unlexicalized probabilistic model. We can state that despite its
lower accuracy, the probabilistic model is less affected by the size of the training data.
We can see from this chart that the relative ranking of the models remain the same,
except for sizes 1–3, where the probabilistic parser does better (or no worse than) the
unlexicalized classifier-based models. Another conclusion may be that classifier-based
models are better at extracting information with the increasing size of the data in hand,
whereas the probabilistic model cannot be improved very much with the increasing size
of the data. We can observe this situation especially in the lexicalized model which is
improved significantly between size = 6 subsets and size = 9 subsets, whereas there is
no significant improvement on the unlexicalized models within this interval.
</bodyText>
<page confidence="0.989456">
378
</page>
<figure confidence="0.967218846153846">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
69
68
77
76
75
74
73
72
71
70
1 2 3 4 5 6 7 8 9
# cross validation sets used in training
</figure>
<figureCaption confidence="0.925843">
probabilistic unlex.
classifier-based unlex.
classifier-based lex.
Figure 9
</figureCaption>
<bodyText confidence="0.678386">
Unlabeled attachment score for different training set sizes.
</bodyText>
<sectionHeader confidence="0.948735" genericHeader="method">
8. Error Analysis
</sectionHeader>
<bodyText confidence="0.9999695">
In this section, we present a detailed error analysis on the results of our best per-
forming parser. We first evaluate our results on different dependency types. We then
investigate the error distribution in terms of distance between the head assigned by
the parser and the actual head. Finally, we look at the error distribution in relation
to sentence length. In the analysis, the results are aggregated over all ten folds of the
cross-validation.
</bodyText>
<subsectionHeader confidence="0.990968">
8.1 Accuracy per Dependency Type
</subsectionHeader>
<bodyText confidence="0.996420611111111">
Table 7 gives the ASU, labeled precision, labeled recall and labeled F-score for individual
dependency types. The table is sorted according to the ASU results, and the average
distance between head and dependent is given for each type.
We see that the parser cannot find labeled dependencies for the types that have
fewer than 100 occurrences in the treebank, with the single exception of RELATIVIZER,
the enclitic ki (conjunction), written separately from the word it attaches to. Because this
dependency type always occurs with the same particle, there is no sparse data problem.
If we exclude the low-frequency types, we can divide the results into three main
groups. The first group consists of determiners, particles, and nominals that have an
ASU score over 79% and link to nearby heads. The second group mainly contains
subjects, objects, and different kinds of adjuncts, with a score in the range 55–79% and
a distance of 1.8–4.6 IGs to their head. This is the group where inflectional features are
most important for finding the correct dependency. The third group contains distant
dependencies with a much lower accuracy. These are generally relations like sentence
modifier, vocative, and apposition, which are hard to find for the parser because they
cannot be differentiated from other nominals used as subjects, objects, or normal mod-
ifiers. Another construction that is hard to parse correctly is coordination, which may
require a special treatment.
</bodyText>
<page confidence="0.997642">
379
</page>
<table confidence="0.426271">
Computational Linguistics Volume 34, Number 3
</table>
<tableCaption confidence="0.99351">
Table 7
</tableCaption>
<table confidence="0.998550310344828">
Attachment score (ASU), labeled precision (P), labeled recall (R) and labeled F-score for each
dependency type in the treebank (n = count, dist = dependency length).
Label n dist ASU P R F
SENTENCE 7,252 1.5 90.5 87.4 89.2 88.3
DETERMINER 1,952 1.3 90.0 84.6 85.3 85.0
QUESTION.PARTICLE 288 1.3 86.1 80.0 76.4 78.2
INTENSIFIER 903 1.2 85.9 80.7 80.3 80.5
RELATIVIZER 85 1.2 84.7 56.6 50.6 53.4
CLASSIFIER 2,048 1.2 83.7 74.6 71.7 73.1
POSSESSOR 1,516 1.9 79.4 81.6 73.6 77.4
NEGATIVE.PARTICLE 160 1.4 79.4 76.4 68.8 72.4
OBJECT 7,956 1.8 75.9 63.3 62.5 62.9
MODIFIER 11,685 2.6 71.9 66.5 64.8 65.7
DATIVE.ADJUNCT 1,360 2.4 70.8 46.4 50.2 48.2
FOCUS.PARTICLE 23 1.1 69.6 0.0 0.0 0.0
SUBJECT 4,479 4.6 68.6 50.9 56.2 53.4
ABLATIVE.ADJUNCT 523 2.5 68.1 44.0 54.5 48.7
INSTRUMENTAL.ADJUNCT 271 3.0 62.7 29.8 21.8 25.2
ETOL 10 4.2 60.0 0.0 0.0 0.0
LOCATIVE.ADJUNCT 1,142 4.2 56.9 43.3 48.4 45.7
COORDINATION 814 3.4 54.1 53.1 49.8 51.4
S.MODIFIER 594 9.6 50.8 42.2 45.8 43.9
EQU.ADJUNCT 16 3.7 50.0 0.0 0.0 0.0
APPOSITION 187 6.4 49.2 49.2 16.6 24.8
VOCATIVE 241 3.4 42.3 27.2 18.3 21.8
COLLOCATION 51 3.3 41.2 0.0 0.0 0.0
ROOT 16 - 0.0 0.0 0.0 0.0
Total 43,572 2.5 76.0 67.0 67.0 67.0
8.2 Error Distance
</table>
<bodyText confidence="0.999555230769231">
When we evaluate our parser based on the dependency direction, we obtain an ASU
of 72.2 for head-initial dependencies and 76.2 for head-final ones. Figure 10a and
Figure 10b give the error distance distributions for head-initial and head-final depen-
dencies based on the unlabeled performance of the parser. The x-axis in the figures gives
the difference between indexes of the assigned head IG and the real head IG.
As stated previously, the head-initial dependencies constitute 5% of the entire de-
pendencies in the treebank. Figure 10a shows that for head-initial dependencies the
parser has a tendency to connect the dependents to a head closer than the real head
or in the wrong direction. When we investigate these dependencies, we see that 70%
of them are connected to a head adjacent to the dependent and the parser finds 90% of
these dependencies correctly. Thus, we can say that the parser has no problem in finding
adjacent head-initial dependencies. Moreover, 87% of the errors where the error distance
is equal to 1 (Figure 10a)26 are due to the dependents being connected to the wrong IG
</bodyText>
<page confidence="0.844895">
26 Meaning that the actual head and assigned head are adjacent.
380
</page>
<note confidence="0.907166">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<figureCaption confidence="0.881011">
Figure 10
</figureCaption>
<bodyText confidence="0.987865333333333">
Error distance distributions a) for head-initial dependencies b) for head-final dependencies.
of the correct head word. When we investigate the ability of the parser in finding the
dependency direction, we see that our parser has a high precision value (91%) and a
relatively lower recall value (80%).
The parser is 100% successful in finding the direction of head-final dependencies.
Furthermore, the errors that it makes while determining the correct head have a roughly
normal distance distribution, as can be seen from Figure 10b.27 We can see from the same
figure that 57% of the errors fall within the interval of ±2 IGs away from the actual
head.
</bodyText>
<subsectionHeader confidence="0.999566">
8.3 Sentence Length
</subsectionHeader>
<bodyText confidence="0.999564166666667">
Figure 11 shows the distribution of errors over sentences of different lengths. The
x-axis shows the sentence length (measured in number of dependencies), the y-axis
shows the error count, and the z-axis shows the number of sentences. As expected,
the distribution is dominated by short sentences with few errors (especially sentences
of up to seven dependencies with one error). The mean number of errors appears to
be a linear function of sentence length, which would imply that the error probability
</bodyText>
<page confidence="0.7252835">
27 Error distances with less than 40 occurrences are excluded from the figure.
381
</page>
<figure confidence="0.708133">
Computational Linguistics Volume 34, Number 3
</figure>
<figureCaption confidence="0.943101">
Figure 11
</figureCaption>
<bodyText confidence="0.9088435">
Error distribution versus sentence length.
per word does not increase with sentence length. This is interesting in that it seems to
indicate that the classifier-based parser does not suffer from error propagation despite
its greedy, deterministic parsing strategy.
</bodyText>
<sectionHeader confidence="0.82185" genericHeader="method">
9. The Impact of Morphological Disambiguation
</sectionHeader>
<bodyText confidence="0.999844375">
In all of the experiments reported herein, we have used the gold-standard tags provided
by the treebank. Another point that deserves investigation is therefore the impact of
using tags automatically assigned by a morphological disambiguator, in other words
the accuracy of the parser on raw text. The role of morphological disambiguators for
highly inflectional languages is far more complex than assigning a single main POS
category (e.g., Noun, Verb, Adj) to a word, and also involves assigning the correct mor-
phological information which is crucial for higher level applications. The complexity of
morphological disambiguation in an agglutinative language like Turkish is due to the
large number of morphological feature tag combinations that can be assigned to words.
The number of potential morphological tag combinations in Turkish for all practical
purposes is very large due to productively derived forms.28
The two subsequent examples, for the words kalemi and asmadan, expose the two
phenomena that a Turkish morphological disambiguator should deal with. The outputs
of the morphological analyzer are listed below the words. The first example shows that
all three possible analyses of the word kalemi have “Noun” as the POS category but they
differ in that they have different stems and inflectional features. In the second example
</bodyText>
<footnote confidence="0.5299875">
28 For the treebank data, the number of distinct combinations of morphological features is 718 for the
word-based model of the classifier-based parser and 108 for the IG-based model.
</footnote>
<page confidence="0.986982">
382
</page>
<note confidence="0.653023">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<bodyText confidence="0.940383487179487">
we see that the possible analyses also have different IG segmentations; the first two
analyses of the word asmadan consists of two IGs whereas the last one has one IG.
kalemi
kale +Noun+A3sg+P1sg+Acc (‘my castle’ in accusative form)
kalem +Noun+A3sg+P3sg+Nom (‘his pencil’)
kalem +Noun+A3sg+Pnon+Acc (‘the pencil’ in accusative form)
asmadan
as +Verb+Pos DB +Adverb+WithoutHavingDoneSo (‘without having hanged (it)’)
as +Verb+Pos DB +Noun+Inf2+A3sg+Pnon+Abl (‘from hanging (it)’)
asma +Noun+A3sg+Pnon+Abl (‘from the vine’)
The task of the morphological disambiguator is to choose one of the possible mor-
phological analyses and thus to find the correct inflectional features including parts
of speech, and the IG structure. We first used the two-level morphological analyzer of
Oflazer (1994) to analyze all the words in the treebank.29 This morphological analyzer
simultaneously produces the IG segmentation and the relevant features encoded in all
analyses of a word form. We then used the morphological disambiguator of Y¨uret and
T¨ure (2006), which has a reported accuracy of 96% for Turkish.
When tested on our treebank data, the accuracy of the morphological disambiguator
is 88.4%, including punctuation (which is unambiguous) and using a lookup table for
the words that are not recognized by the morphological analyzer.30 The lower accuracy
of the morphological disambiguator on the treebank can be due to different selections
in the annotation process of the morphological disambiguator training data (Y¨uret and
T¨ure 2006), which is totally different from the treebank data.
In order to investigate the impact of morphological disambiguation errors, we used
our best IG-based model and a lexicalized word-based model with our classifier-based
parser.31 We again evaluated our parsing models with ASU, ASL, and WWU scores.
There is no problem when evaluating with WWU scores because this metric only takes
into account whether the head word assigned to a dependent is correct or not, which
means that any errors of the morphological disambiguator can be ignored. Similarly, in
calculating ASU and ASL scores for the word-based model, dependencies are assumed
to be connected to the first IG of the head word without taking into consideration any
errors in tags caused by the morphological disambiguator. But when evaluating with
the ASU and ASL scores for the IG-based model, one problem that may appear is that
the disambiguator may have assigned a totally different IG structure to the head word,
compared to the gold standard (cf. the three analyses of the word asmadan). In this case,
we accept a dependency link to be correct if the dependent is connected to the correct
head word and the head IG has the same POS category as the gold-standard. This is
reasonable because we know that some of the errors in inflectional features do not affect
the type of dependency very much. For example, if we put the adjective k¨u¸c¨uk (‘small’)
</bodyText>
<footnote confidence="0.7990132">
29 We noted that 39% of the words were ambiguous and 17% had more than two distinct morphological
analyses.
30 The words not recognized by the morphological analyzer are generally proper nouns, numbers, and
some combined words that are created in the development stage of the treebank and constitute 6.2% of
the whole treebank. If these words are excluded, the accuracy of the tagger is 84.6%.
</footnote>
<page confidence="0.795983">
31 For this model, we added LEX features for σ0, -r0, -r1 to the feature model of our word-based model in
</page>
<tableCaption confidence="0.99442">
Table 4.
</tableCaption>
<page confidence="0.985766">
383
</page>
<note confidence="0.4415">
Computational Linguistics Volume 34, Number 3
</note>
<tableCaption confidence="0.993712">
Table 8
</tableCaption>
<table confidence="0.988735571428571">
Impact of morphological disambiguation on unlabeled and labeled attachment scores and
word-to-word scores.
ASU ASL WWU
Word-based Gold standard 71.2±0.3 62.3±0.3 82.1±0.9
Tagged 69.5±0.3 59.3±0.3 80.2±0.9
IG-based Gold standard 76.0±0.2 67.0±0.3 82.7±0.5
Tagged 73.3±0.3 63.2±0.3 80.6±0.7
</table>
<bodyText confidence="0.999783416666667">
in front of the example given previously (k¨u¸c¨uk kalemi), then the choice of morphological
analysis of the noun has no impact on the fact that the adjective should be connected
to the noun with dependency type “MODIFIER”. Moreover, most of the errors in POS
categories will actually prevent the parser from finding the correct head word, which
can be observed from the drop in WWU accuracy.
Table 8 shows that the IG-based model and the word-based model are equally
affected by the tagging errors and have a drop in accuracy within similar ranges. (It
can also be seen that, even with automatically tagged data, the IG-based model gives
better accuracy than the word-based model.) We can say that the use of an automatic
morphological analyzer and disambiguator causes a drop in the range of 3 percentage
points for unlabeled accuracy and 4 percentage points for labeled accuracy (for both
word-based and IG-based models).
</bodyText>
<sectionHeader confidence="0.992821" genericHeader="related work">
10. Related Work
</sectionHeader>
<bodyText confidence="0.937374">
The first results on the Turkish Treebank come from Eryi˘git and Oflazer (2006) where the
authors used only a subset of the treebank sentences containing exclusively head-final
and projective dependencies. The parser used in that paper is a preliminary version of
the probabilistic parser used in this article. The first results on the entire treebank appear
in Nivre et al. (2007), where the authors use memory-based learning to predict parser
actions, and in Eryi˘git, Adalı, and Oflazer (2006), which introduces the rule-based parser
used in this article.
The Turkish Treebank has recently been parsed by 17 research groups in the CoNLL-
X shared task on multilingual dependency parsing (Buchholz and Marsi 2006), where it
was seen as the most difficult language by the organizers and most of the groups.32 The
following quote is taken from Buchholz and Marsi (page 161): “The most difficult data
set is clearly the Turkish one. It is rather small, and in contrast to Arabic and Slovene,
which are equally small or smaller, it covers 8 genres, which results in a high percentage
of new FORM and LEMMA values in the test set.”
The results for Turkish are given in Table 9. Our classifier-based parser obtained
the best results for Turkish (with ASU=75.8 and ASL=65.7) and also for Japanese, which
is the only agglutinative and head-final language in the shared task other than Turkish
(Nivre et al. 2006). The groups were asked to find the correct IG-to-IG dependency links.
When we look at the results, we observe that most of the best performing parsers use
32 The Turkish data used in the shared task is actually a modified version of the treebank used in this article;
some conversions are made on punctuation structures in order to keep consistency between all languages.
</bodyText>
<page confidence="0.995951">
384
</page>
<note confidence="0.913985">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<tableCaption confidence="0.998009">
Table 9
</tableCaption>
<table confidence="0.996457263157895">
CoNLL-X shared task results on Turkish (taken from Table 5 in Buchholz and Marsi [2006]).
Teams ASU ASL
Nivre et al. (2006) 75.8 65.7
Johansson and Nugues (2006) 73.6 63.4
McDonald, Lerman, and Pereira (2006) 74.7 63.2
Corston-Oliver and Aue (2006) 73.1 61.7
Cheng, Asahara, and Matsumoto (2006) 74.5 61.2
Chang, Do, and Roth (2006) 73.2 60.5
Y¨uret (2006) 71.5 60.3
Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6
Carreras, Surdeanu, and Marquez (2006) 70.1 58.1
Wu, Lee, and Yang (2006) 69.3 55.1
Shimizu (2006) 68.8 54.2
Bick (2006) 65.5 53.9
Canisius et al. (2006) 64.2 51.1
Schiehlen and Spranger (2006) 61.6 49.8
Dreyer, Smith, and Smith (2006) 60.5 46.1
Liu et al. (2006) 56.9 41.7
Attardi (2006) 65.3 37.8
</table>
<bodyText confidence="0.84198925">
one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto
(2003) together with a learning method based on the maximum margin strategy. We
can also see that a common property of the parsers which fall below the average
(ASL=55.4) is that they do not make use of inflectional features, which is crucial for
</bodyText>
<page confidence="0.659007">
33
</page>
<bodyText confidence="0.95556855">
Turkish.
Another recent study that has promising results is C¸ akıcı and Baldridge (2006),
where the authors use the MSTParser (McDonald, Lerman, and Pereira 2006), also used
in the CoNLL-X shared task (line 3 in Table 9). Following the work of Eryi˘git and Oflazer
(2006) and Nivre et al. (2006), they use the stem information and the case information
for nominals and they also report an increase in performance by using these features.
Similar to one of the models (“INF as a single feature”) in Eryi˘git, Nivre, and Oflazer
(2006), where the feature names of the suffixes provided by the morphological analyzer
are concatenated and used as a feature to the classifier, they use the surface forms of
the suffixes as a whole. We can say that the models in this article cover this approach in
that each suffix is used as a single feature name (which is shown to perform better than
using them concatenated to each other in Eryi˘git, Nivre, and Oflazer [2006]). Because in
Turkish, the same suffixes take different forms under vowel harmony34 and the surface
forms of some different suffixes are structurally ambiguous,35 using them with their
feature names is actually more meaningful. C¸ akıcı and Baldridge (2006) report a word-
to-word accuracy of 84.9%, which seems competitive, but unfortunately from this we
33 Actually, there are two parsers (Bick 2006 and Attardi 2006 in Table 9) in this group which try to use parts
of the inflectional features under special circumstances.
34 For example, in the words ev+de (‘at home’) and okul+da (‘at school’), the suffixes -de and -da are the same
locative case suffixes (+Loc) but they take different forms due to vowel harmony.
</bodyText>
<footnote confidence="0.647845">
35 For example, in the word ev+in, the surface morpheme -in may indicate both a second singular possessive
suffix (+P2sg) which will give the word the meaning of ‘your house’ and a genitive case (+Gen) which
will give the word the meaning of ‘of the house’, as the underlying lexical morphemes are different.
</footnote>
<page confidence="0.992502">
385
</page>
<note confidence="0.565963">
Computational Linguistics Volume 34, Number 3
</note>
<bodyText confidence="0.999801833333333">
are not able to gauge the IG-to-IG accuracy which we have argued is the right metric
to use for Turkish, and their results are not comparable to any of the results in the
literature, because they have not based their experiments on any of the official releases
of the treebank. In addition, they use an evaluation metric different from the ones in
the literature in that they only excluded some of the punctuations from the evaluation
score.
</bodyText>
<sectionHeader confidence="0.94504" genericHeader="conclusions">
11. Conclusions
</sectionHeader>
<bodyText confidence="0.9999746875">
In this article, we have investigated a number of issues in data-driven dependency pars-
ing of Turkish. One of the main results is that IG-based models consistently outperform
word-based models. This result holds regardless of whether we evaluate accuracy on
the word level or on the IG level; it holds regardless of whether we use the probabilistic
parser or the classifier-based parser; and it holds even if we take into account the
problem caused by errors in automatic morphological analysis and disambiguation.
Another important conclusion is that the use of morphological information can
increase parsing accuracy substantially. Again, this result has been obtained both for the
probabilistic and the classifier-based parser, although the probabilistic parser requires
careful manual selection of relevant features to counter the effect of data sparseness.
A similar result has been obtained with respect to lexicalization, although in this case
an improvement has only been demonstrated for the classifier-based parser, which is
probably due to its greater resilience to data sparseness.
By combining the deterministic classifier-based parsing approach with an adequate
use of IG-based representations, morphological information, and lexicalization, we have
been able to achieve the highest reported accuracy for parsing the Turkish Treebank.
</bodyText>
<sectionHeader confidence="0.997297" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999822">
We are grateful for the financial support
from TUBITAK (The Scientific and Technical
Research Council of Turkey) and Istanbul
Technical University. We want to thank Johan
Hall and Jens Nilsson in the language
technology group at V¨axj¨o University for
their contributions to the classifier-based
parser framework (MaltParser) within which
we developed the classifier-based parser for
Turkish. We also want to thank Deniz Y¨uret
for providing us with his morphological
disambiguator, and Es¸ref Adalı for his
valuable comments. Finally, we want to
thank our three anonymous reviewers for
insightful comments and suggestions
that helped us improve the final version of
the article.
</bodyText>
<sectionHeader confidence="0.999141" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99890903125">
Arun, Abhishek and Frank Keller. 2005.
Lexicalization in crosslinguistic
probabilistic parsing: The case of French.
In Proceedings of ACL’05, pages 302–313,
Ann Arbor, MI.
Attardi, Giuseppe. 2006. Experiments with a
multilanguage non-projective dependency
parser. In Proceedings of CONLL-X,
pages 166–170, New York, NY.
Bick, Eckhard. 2006. Lingpars, a linguistically
inspired, language-independent machine
learner for dependency treebanks. In
Proceedings of CONLL-X, pages 171–175,
New York, NY.
Bikel, Daniel M. 2004. A distributional
analysis of a lexicalized statistical parsing
model. In Proceedings of the Conference on
Empirical Methods in Natural Language
Processing, pages 182–189, Barcelona.
Bikel, Daniel M. and David Chiang. 2000.
Two statistical parsing models applied to
the Chinese treebank. In Proceedings of the
2nd Chinese Language Processing Workshop,
pages 1–6, Hong Kong.
Black, Ezra, Frederick Jelinek, John D.
Lafferty, David M. Magerman, Robert L.
Mercer, and Salim Roukos.1992. Towards
history-based grammars: Using richer
models for probabilistic parsing. In
Proceedings of the 5th DARPA Speech and
Natural Language Workshop, pages 31–37,
New York, NY.
</reference>
<page confidence="0.996751">
386
</page>
<note confidence="0.867487">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<reference confidence="0.998891957627119">
Bozs¸ahin, Cem. 2002. The combinatory
morphemic lexicon. Computational
Linguistics, 28(2):145–186.
Buchholz, Sabine and Erwin Marsi.
2006. CONLL-X shared task on
multilingual dependency parsing. In
Proceedings of CONLL-X, pages 149–164,
New York, NY.
C¸ akıcı, Ruket and Jason Baldridge. 2006.
Projective and non-projective Turkish
parsing. In Proceedings of the 5th
International Treebanks and Linguistic
Theories Conference, pages 43–54, Prague.
Canisius, Sander, Toine Bogers, Antal
van den Bosch, Jeroen Geertzen, and Erik
Tjong Kim Sang. 2006. Dependency
parsing by inference over high-recall
dependency predictions. In Proceedings of
CONLL-X, pages 176–180, New York, NY.
Carreras, Xavier, Mihai Surdeanu, and Lluis
Marquez. 2006. Projective dependency
parsing with perceptron. In Proceedings of
CONLL-X, pages 181–185, New York, NY.
Chang, Chih-Chung and Chih-Jen Lin, 2001.
LIBSVM: A Library for Support Vector
Machines. Software available at
www.csie.ntu.edu.tw/∼cjlin/libsvm.
Chang, Ming-Wei, Quang Do, and Dan Roth.
2006. A pipeline model for bottom-up
dependency parsing. In Proceedings of
CONLL-X, pages 186–190, New York, NY.
Cheng, Yuchang, Masayuki Asahara, and
Yuji Matsumoto. 2006. Multi-lingual
dependency parsing at NAIST. In
Proceedings of CONLL-X, pages 191–195,
New York, NY.
Chung, Hoojung and Hae-Chang Rim. 2004.
Unlexicalized dependency parser for
variable word order languages based on
local contextual pattern. In Proceedings of
the 5th International Conference on Intelligent
Text Processing and Computational
Linguistics, pages 109–120, Seoul.
Collins, Michael. 1996. A new statistical
parser based on bigram lexical
dependencies. In Proceedings of ACL’96,
pages 184–191, Santa Cruz, CA.
Collins, Michael. 1997. Three generative,
lexicalised models for statistical parsing.
In Proceedings of ACL’97, pages 16–23,
Madrid.
Collins, Michael. 1999. Head-Driven Statistical
Models for Natural Language Parsing. Ph.D.
thesis, University of Pennsylvania,
Philadelphia.
Collins, Michael, Jan Hajic, Lance Ramshaw,
and Christoph Tillmann. 1999. A statistical
parser for Czech. In Proceedings of ACL’99,
pages 505–518, College Park, MD.
Corazza, Anna, Alberto Lavelli, Giorgio
Satta, and Roberto Zanoli. 2004. Analyzing
an Italian treebank with state-of-the-art
statistical parsers. In Proceedings of the 3rd
Workshop on Treebanks and Linguistic
Theories, pages 39–50, T¨ubingen.
Corston-Oliver, Simon and Anthony Aue.
2006. Dependency parsing with reference
to Slovene, Spanish and Swedish. In
Proceedings of CONLL-X, pages 196–200,
New York, NY.
Daelemans, Walter and Antal Vanden
Bosch. 2005. Memory-Based Language
Processing. Cambridge University Press,
Cambridge.
Dreyer, Markus, David A. Smith, and
Noah A. Smith. 2006. Vine parsing and
minimum risk reranking for speed and
precision. In Proceedings of CONLL-X,
pages 201–205, New York, NY.
Dubey, Amit and Frank Keller. 2003.
Probabilistic parsing for German using
sister-head dependencies. In Proceedings
of ACL’03, pages 96–103, Sapporo.
Eisner, Jason. 1996. Three new probabilistic
models for dependency parsing: An
exploration. In Proceedings of the 16th
International Conference on Computational
Linguistics, pages 340–345, Copenhagen.
Erguvanlı, Eser Emine. 1979. The Function
of Word Order in Turkish Grammar.
Ph.D. thesis, UCLA.
Eryi˘git, G¨uls¸en. 2006. T¨urk¸cenin Ba˘glılık
Ayrı¸stırması (Dependency Parsing of Turkish).
Ph.D. thesis, Istanbul Technical University.
Eryi˘git, G¨uls¸en, Es¸ref Adalı, and Kemal
Oflazer. 2006. T¨urkc¸e c¨umlelerin kural
tabanlı ba˘glılık analizi [Rule-based
dependency parsing of Turkish sentences].
In Proceedings of the 15th Turkish Symposium
on Artificial Intelligence and Neural
Networks, pages 17–24, Mu˘gla.
Eryi˘git, G¨uls¸en, Joakim Nivre, and Kemal
Oflazer. 2006. The incremental use of
morphological information and
lexicalization in data-driven dependency
parsing. In Computer Processing of Oriental
Languages, Beyond the Orient: The Research
Challenges Ahead, pages 498–507,
Singapore.
Eryi˘git, G¨uls¸en and Kemal Oflazer. 2006.
Statistical dependency parsing of Turkish.
In Proceedings of EACL’06, pages 89–96,
Trento.
Gildea, Daniel. 2001. Corpus variation and
parser performance. In Proceedings of the
Conference on Empirical Methods in Natural
Language Processing, pages 167–202,
Pittsburgh, PA.
</reference>
<page confidence="0.94933">
387
</page>
<reference confidence="0.994888831932773">
Computational Linguistics Volume 34, Number 3
Hajiˇc, Jan, Eva Hajiˇcov´a, Petr Pajas, Jarmila
Panevov´a, Petr Sgall, and Barbora Hladk´a.
2001. Prague dependency treebank 1.0
(final production label). CDROM CAT:
LDC2001T10., ISBN 1-58563-212-0.
Hakkani-T¨ur, Dilek, Kemal Oflazer, and
G¨okhan T¨ur. 2002. Statistical
morphological disambiguation for
agglutinative languages. Journal of
Computers and Humanities, 36(4):381–410.
Hoffman, Beryl. 1994. Generating context
appropriate word orders in Turkish. In
Proceedings of the Seventh International
Workshop on Natural Language Generation,
pages 117–126, Kennebunkport, ME.
Johansson, Richard and Pierre Nugues. 2006.
Investigating multilingual dependency
parsing. In Proceedings of CONLL-X,
pages 206–210, New York, NY.
Klein, Dan and Christopher D. Manning.
2003. Accurate unlexicalized parsing. In
Proceedings of ACL’03, pages 423–430,
Sapporo.
Kromann, Matthias T. 2003. The Danish
dependency treebank and the underlying
linguistic theory. In Proceedings of the 2nd
Workshop on Treebanks and Linguistic
Theories, pages 217–220, V¨axj¨o.
Kudo, Taku and Yuji Matsumoto. 2002.
Japanese dependency analysis using
cascaded chunking. In Proceedings of the
Conference on Computational Natural
Language Learning, pages 63–69, Taipei.
Levy, Roger and Christopher Manning. 2003.
Is it harder to parse Chinese, or the
Chinese treebank? In Proceedings of ACL’03,
pages 439–446, Sapporo.
Liu, Ting, Jinshan Ma, Huijia Zhu, and
Sheng Li. 2006. Dependency parsing based
on dynamic local optimization. In
Proceedings of CONLL-X, pages 211–215,
New York, NY.
Magerman, David M. 1995. Statistical
decision-tree models for parsing. In
Proceedings of ACL’95, pages 276–283,
Cambridge, MA.
Marcus, Mitchell P., Beatrice Santorini, and
Mary Ann Marcinkiewicz. 1993. Building a
large annotated corpus of English: The
Penn treebank. Computational Linguistics,
19(2):313–330.
McDonald, Ryan, Kevin Lerman, and
Fernando Pereira. 2006. Multilingual
dependency analysis with a two-stage
discriminative parser. In Proceedings of
CONLL-X, pages 216–220, New York, NY.
Nivre, Joakim. 2003. An efficient algorithm
for projective dependency parsing. In
Proceedings of the 8th International Workshop
on Parsing Technologies, pages 149–160,
Nancy.
Nivre, Joakim. 2004. Incrementality in
deterministic dependency parsing. In
Proceedings of the Workshop on Incremental
Parsing: Bringing Engineering and Cognition
Together, pages 50–57, Barcelona.
Nivre, Joakim. 2006. Inductive Dependency
Parsing. Springer, Dordrecht.
Nivre, Joakim, Johan Hall, and Jens Nilsson.
2004. Memory-based dependency parsing.
In Proceedings of the Conference on
Computational Natural Language Learning,
pages 49–56, Boston, MA.
Nivre, Joakim, Johan Hall, Jens Nilsson,
Atanas Chanev, G¨uls¸en Eryi˘git, Sandra
K¨ubler, Stetoslav Marinov, and Erwin
Marsi. 2007. Maltparser: A
language-independent system for
data-driven dependency parsing. Natural
Language Engineering Journal, 13(2):95–135.
Nivre, Joakim, Johan Hall, Jens Nilsson,
G¨uls¸en Eryi˘git, and Stetoslav Marinov.
2006. Labeled pseudo-projective
dependency parsing with support vector
machines. In Proceedings of CONLL-X,
pages 221–225, New York, NY.
Nivre, Joakim and Jens Nilsson. 2005.
Pseudo-projective dependency parsing. In
Proceedings of ACL’05, pages 99–106, Ann
Arbor, MI.
Nivre, Joakim, Jens Nilsson, and Johan Hall.
2006. Talbanken05: A Swedish treebank
with phrase structure and dependency
annotation. In Proceedings of LREC,
pages 1392–1395, Genoa.
Oflazer, Kemal. 1994. Two-level description
of Turkish morphology. Literary and
Linguistic Computing, 9(2):137–148.
Oflazer, Kemal. 2003. Dependency parsing
with an extended finite-state approach.
Computational Linguistics, 29(4):515–544.
Oflazer, Kemal, Bilge Say, Dilek Z.
Hakkani-T¨ur, and G¨okhan T¨ur. 2003.
Building a Turkish treebank. In A. Abeill´e,
editor, Treebanks: Building and Using Parsed
Corpora. Kluwer, London, pages 261–277.
Ratnaparkhi, Adwait. 1997. A linear
observed time statistical parser based on
maximum entropy models. In Proceedings
of the Conference on Empirical Methods in
Natural Language Processing, pages 1–10,
Providence, RI.
Riedel, Sebastian, Ruket C¸ akıcı, and
Ivan Meza-Ruiz. 2006. Multi-lingual
dependency parsing with incremental
integer linear programming. In
Proceedings of CONLL-X, pages 226–230,
New York, NY.
</reference>
<page confidence="0.972774">
388
</page>
<note confidence="0.574684">
Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish
</note>
<reference confidence="0.99976738">
Sagae, Kenji and Alon Lavie. 2005. A
classifier-based parser with linear run-time
complexity. In Proceedings of the 9th
International Workshop on Parsing
Technologies, pages 125–132, Vancouver.
Schiehlen, Michael and Kristina Spranger.
2006. Language independent probabilistic
context-free parsing bolstered by machine
learning. In Proceedings of CONLL-X,
pages 231–235, New York, NY.
Sekine, Satoshi, Kiyotaka Uchimoto, and
Hitoshi Isahara. 2000. Backward beam
search algorithm for dependency analysis
of Japanese. In Proceedings of the 17th
International Conference on Computational
Linguistics, pages 754–760, Saarbr¨ucken.
Shimizu, Nobuyuki. 2006. Maximum
spanning tree algorithm for non-projective
labeled dependency parsing. In
Proceedings of CONLL-X, pages 236–240,
New York, NY.
Simov, Kiril, Gergana Popova, and Petya
Osenova. 2002. HPSG-based syntactic
treebank of Bulgarian (BulTreeBank). In
Andrew Wilson, Paul Rayson, and Tony
McEnery, editors, A Rainbow of Corpora:
Corpus Linguistics and the Languages of
the World. Lincom-Europa, Munich,
pages 135–142.
Vapnik, Vladimir N. 1995. The Nature of
Statistical Learning Theory. Springer, New
York, NY.
Wu, Yu-Chieh, Yue-Shi Lee, and Jie-Chi
Yang. 2006. The exploration of
deterministic and efficient dependency
parsing. In Proceedings of CONLL-X,
pages 241–245, New York, NY.
Yamada, Hiroyasu and Yuji Matsumoto.
2003. Statistical dependency analysis with
support vector machines. In Proceedings of
the 8th International Workshop on Parsing
Technologies, pages 195–206, Nancy.
Y¨uret, Deniz. 2006. Dependency parsing as a
classification problem. In Proceedings of
CONLL-X, pages 246–250, New York, NY.
Y¨uret, Deniz and Ferhan T¨ure. 2006.
Learning morphological disambiguation
rules for Turkish. In Proceedings of
HLT/NAACL’06, pages 328–334,
New York, NY.
</reference>
<page confidence="0.998461">
389
</page>
<note confidence="0.657445">
This article has been cited by:
</note>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.252029">
<affiliation confidence="0.754448">Dependency Parsing of Turkish Istanbul Technical University</affiliation>
<email confidence="0.920296">t</email>
<affiliation confidence="0.9993975">V¨axj¨o University, Uppsala University Sabancı University</affiliation>
<abstract confidence="0.9647084">The suitability of different parsing methods for different languages is an important topic in syntactic parsing. Especially lesser-studied languages, typologically different from the languages for which methods have originally been developed, pose interesting challenges in this respect. This article presents an investigation of data-driven dependency parsing of Turkish, an agglutinative, free constituent order language that can be seen as the representative of a wider class of languages of similar type. Our investigations show that morphological structure plays an essential role in finding syntactic relations in such a language. In particular, we show that employing sublexical called rather than word forms, as the basic parsing units improves parsing accuracy. We test our claim on two different parsing methods, one based on a probabilistic model with beam search and the other based on discriminative classifiers and a deterministic parsing strategy, and show that the usefulness of sublexical units holds regardless of the parsing method. We examine the impact of morphological and lexical information in detail and show that, properly used, this kind of information can improve parsing accuracy substantially. Applying the techniques presented in this article, we achieve the highest reported accuracy for parsing the Turkish Treebank.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Abhishek Arun</author>
<author>Frank Keller</author>
</authors>
<title>Lexicalization in crosslinguistic probabilistic parsing: The case of French.</title>
<date>2005</date>
<booktitle>In Proceedings of ACL’05,</booktitle>
<pages>302--313</pages>
<location>Ann Arbor, MI.</location>
<contexts>
<context position="5977" citStr="Arun and Keller 2005" startWordPosition="875" endWordPosition="878"> of syntactic structure (Eryi˘git and Oflazer 2006). In this article, we corroborate this claim showing that it holds in both approaches we explore. We also study the impact of different morphological feature representations on parsing accuracy. • The second set of issues concerns lexicalization, a topic that has been very prominent in the parsing literature lately. Whereas the best performing parsers for English all make use of lexical information, the real benefits of lexicalization for English as well as other languages remains controversial (Dubey and Keller, 2003; Klein and Manning 2003; Arun and Keller 2005). • The third set concerns the basic parsing methodology, including both parsing algorithms and learning algorithms. We first introduce a statistical parser using a conditional probabilistic model which is very sensitive to the selected representational features and thus clearly exposes the ones 358 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish with crucial importance for parsing Turkish. We then implement our models on a deterministic classifier-based parser using discriminative learning, which is one of the best performing dependency parsers evaluated on a wide range of differen</context>
<context position="57209" citStr="Arun and Keller 2005" startWordPosition="9106" endWordPosition="9109">tried partially lexicalized models by lexicalizing various combinations of certain POS categories (see Figure 8). The results show that, whereas lexicalization certainly improves parsing accuracy for Turkish, only the lexicalization of conjunctions and nouns together has an impact on accuracy. Similarly to the experiments on inflectional features, we again see that the classifier-based parser has no sparse data problem even if we use a totally lexicalized model. Although the effect of lexicalization has been discussed in several studies recently (Dubey and Keller 2003; Klein and Manning 2003; Arun and Keller 2005), it is often investigated as an all-or-nothing affair, except for a few studies that analyze the distributions of lexical items, for example, Bikel (2004) and Gildea (2001). The results for 25 IGs with a noun part-of-speech tag other than common nouns are marked with an additional minor part of speech that indicates whether the nominal is a proper noun or a derived form—one of future participle, past participle, infinitive, or a form involving a zero-morpheme derivation. These latter four do not contain any root information. 377 Computational Linguistics Volume 34, Number 3 Figure 8 Unlabeled</context>
</contexts>
<marker>Arun, Keller, 2005</marker>
<rawString>Arun, Abhishek and Frank Keller. 2005. Lexicalization in crosslinguistic probabilistic parsing: The case of French. In Proceedings of ACL’05, pages 302–313, Ann Arbor, MI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Giuseppe Attardi</author>
</authors>
<title>Experiments with a multilanguage non-projective dependency parser.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>166--170</pages>
<location>New York, NY.</location>
<contexts>
<context position="75524" citStr="Attardi (2006)" startWordPosition="12046" endWordPosition="12047">Teams ASU ASL Nivre et al. (2006) 75.8 65.7 Johansson and Nugues (2006) 73.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ akıcı and Baldridge (2006), where the authors use the MSTParser (McDonald, Lerman, and Pereira 2006), also used in the CoNLL-X shared task (line 3 in Table 9). Following the work of Eryi˘git</context>
<context position="77246" citStr="Attardi 2006" startWordPosition="12335" endWordPosition="12336">article cover this approach in that each suffix is used as a single feature name (which is shown to perform better than using them concatenated to each other in Eryi˘git, Nivre, and Oflazer [2006]). Because in Turkish, the same suffixes take different forms under vowel harmony34 and the surface forms of some different suffixes are structurally ambiguous,35 using them with their feature names is actually more meaningful. C¸ akıcı and Baldridge (2006) report a wordto-word accuracy of 84.9%, which seems competitive, but unfortunately from this we 33 Actually, there are two parsers (Bick 2006 and Attardi 2006 in Table 9) in this group which try to use parts of the inflectional features under special circumstances. 34 For example, in the words ev+de (‘at home’) and okul+da (‘at school’), the suffixes -de and -da are the same locative case suffixes (+Loc) but they take different forms due to vowel harmony. 35 For example, in the word ev+in, the surface morpheme -in may indicate both a second singular possessive suffix (+P2sg) which will give the word the meaning of ‘your house’ and a genitive case (+Gen) which will give the word the meaning of ‘of the house’, as the underlying lexical morphemes are </context>
</contexts>
<marker>Attardi, 2006</marker>
<rawString>Attardi, Giuseppe. 2006. Experiments with a multilanguage non-projective dependency parser. In Proceedings of CONLL-X, pages 166–170, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eckhard Bick</author>
</authors>
<title>Lingpars, a linguistically inspired, language-independent machine learner for dependency treebanks.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>171--175</pages>
<location>New York, NY.</location>
<contexts>
<context position="75356" citStr="Bick (2006)" startWordPosition="12017" endWordPosition="12018">es. 384 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish Table 9 CoNLL-X shared task results on Turkish (taken from Table 5 in Buchholz and Marsi [2006]). Teams ASU ASL Nivre et al. (2006) 75.8 65.7 Johansson and Nugues (2006) 73.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ akıcı and Baldridge (2</context>
<context position="77229" citStr="Bick 2006" startWordPosition="12332" endWordPosition="12333">odels in this article cover this approach in that each suffix is used as a single feature name (which is shown to perform better than using them concatenated to each other in Eryi˘git, Nivre, and Oflazer [2006]). Because in Turkish, the same suffixes take different forms under vowel harmony34 and the surface forms of some different suffixes are structurally ambiguous,35 using them with their feature names is actually more meaningful. C¸ akıcı and Baldridge (2006) report a wordto-word accuracy of 84.9%, which seems competitive, but unfortunately from this we 33 Actually, there are two parsers (Bick 2006 and Attardi 2006 in Table 9) in this group which try to use parts of the inflectional features under special circumstances. 34 For example, in the words ev+de (‘at home’) and okul+da (‘at school’), the suffixes -de and -da are the same locative case suffixes (+Loc) but they take different forms due to vowel harmony. 35 For example, in the word ev+in, the surface morpheme -in may indicate both a second singular possessive suffix (+P2sg) which will give the word the meaning of ‘your house’ and a genitive case (+Gen) which will give the word the meaning of ‘of the house’, as the underlying lexic</context>
</contexts>
<marker>Bick, 2006</marker>
<rawString>Bick, Eckhard. 2006. Lingpars, a linguistically inspired, language-independent machine learner for dependency treebanks. In Proceedings of CONLL-X, pages 171–175, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel M Bikel</author>
</authors>
<title>A distributional analysis of a lexicalized statistical parsing model.</title>
<date>2004</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>182--189</pages>
<location>Barcelona.</location>
<contexts>
<context position="57364" citStr="Bikel (2004)" startWordPosition="9133" endWordPosition="9134">ainly improves parsing accuracy for Turkish, only the lexicalization of conjunctions and nouns together has an impact on accuracy. Similarly to the experiments on inflectional features, we again see that the classifier-based parser has no sparse data problem even if we use a totally lexicalized model. Although the effect of lexicalization has been discussed in several studies recently (Dubey and Keller 2003; Klein and Manning 2003; Arun and Keller 2005), it is often investigated as an all-or-nothing affair, except for a few studies that analyze the distributions of lexical items, for example, Bikel (2004) and Gildea (2001). The results for 25 IGs with a noun part-of-speech tag other than common nouns are marked with an additional minor part of speech that indicates whether the nominal is a proper noun or a derived form—one of future participle, past participle, infinitive, or a form involving a zero-morpheme derivation. These latter four do not contain any root information. 377 Computational Linguistics Volume 34, Number 3 Figure 8 Unlabeled and labeled attachment scores for incrementally extended lexicalization for the classifier-based parser. Turkish clearly show that the effect of lexicaliz</context>
</contexts>
<marker>Bikel, 2004</marker>
<rawString>Bikel, Daniel M. 2004. A distributional analysis of a lexicalized statistical parsing model. In Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 182–189, Barcelona.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel M Bikel</author>
<author>David Chiang</author>
</authors>
<title>Two statistical parsing models applied to the Chinese treebank.</title>
<date>2000</date>
<booktitle>In Proceedings of the 2nd Chinese Language Processing Workshop,</booktitle>
<pages>1--6</pages>
<location>Hong Kong.</location>
<contexts>
<context position="3256" citStr="Bikel and Chiang 2000" startWordPosition="464" endWordPosition="467">inguistics Computational Linguistics Volume 34, Number 3 An important issue in this context is to what extent our models and algorithms are tailored to properties of specific languages or language groups. This issue is especially pertinent for data-driven approaches, where one of the claimed advantages is portability to new languages. The results so far mainly come from studies where a parser originally developed for English, such as the Collins parser (Collins 1997, 1999), is applied to a new language, which often leads to a significant decrease in the measured accuracy (Collins et al. 1999; Bikel and Chiang 2000; Dubey and Keller 2003; Levy and Manning 2003; Corazza et al. 2004). However, it is often quite difficult to tease apart the influence of different features of the parsing methodology in the observed degradation of performance. A related issue concerns the suitability of different kinds of syntactic representation for different types of languages. Whereas most of the work on English has been based on constituency-based representations, partly influenced by the availability of data resources such as the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993), it has been argued that free con</context>
</contexts>
<marker>Bikel, Chiang, 2000</marker>
<rawString>Bikel, Daniel M. and David Chiang. 2000. Two statistical parsing models applied to the Chinese treebank. In Proceedings of the 2nd Chinese Language Processing Workshop, pages 1–6, Hong Kong.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Ezra Black</author>
<author>Frederick Jelinek</author>
<author>John D Lafferty</author>
<author>David M Magerman</author>
<author>Robert L Mercer</author>
<author>Salim Roukos 1992</author>
</authors>
<title>Towards history-based grammars: Using richer models for probabilistic parsing.</title>
<booktitle>In Proceedings of the 5th DARPA Speech and Natural Language Workshop,</booktitle>
<pages>31--37</pages>
<location>New York, NY.</location>
<contexts>
<context position="37625" citStr="Black et al. 1992" startWordPosition="6037" endWordPosition="6040">nor part of speech and 68.3±0.2 no other inflectional features 3 Using minor part of speech for all 71.0±0.3 types of IGs together with case and possessive markers for nominals and possessive marker for adjectives (but no dynamic selection) 4 Using all inflectional features in 46.5±0.4 addition to minor part of speech 5 Adding root information to the best 53.7±0.2 performing IG-based model 6 Adding surface form information to the best 54.4±0.2 performing IG-based model 370 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish 2. History-based models for predicting the next parser action (Black et al. 1992; Magerman 1995; Ratnaparkhi 1997; Collins 1999) 3. Discriminative classifiers to map histories to parser actions (Kudo and Matsumoto 2002; Yamada and Matsumoto 2003; Nivre, Hall, and Nilsson 2004) A system of this kind employs no grammar but relies completely on inductive learning from treebank data for the analysis of new sentences, and on deterministic parsing for disambiguation. This combination of methods guarantees that the parser is robust, never failing to produce an analysis for an input sentence, and efficient, typically deriving this analysis in time that is linear in the length of </context>
</contexts>
<marker>Black, Jelinek, Lafferty, Magerman, Mercer, 1992, </marker>
<rawString>Black, Ezra, Frederick Jelinek, John D. Lafferty, David M. Magerman, Robert L. Mercer, and Salim Roukos.1992. Towards history-based grammars: Using richer models for probabilistic parsing. In Proceedings of the 5th DARPA Speech and Natural Language Workshop, pages 31–37, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cem Bozs¸ahin</author>
</authors>
<title>The combinatory morphemic lexicon.</title>
<date>2002</date>
<journal>Computational Linguistics,</journal>
<volume>28</volume>
<issue>2</issue>
<marker>Bozs¸ahin, 2002</marker>
<rawString>Bozs¸ahin, Cem. 2002. The combinatory morphemic lexicon. Computational Linguistics, 28(2):145–186.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sabine Buchholz</author>
<author>Erwin Marsi</author>
</authors>
<title>CONLL-X shared task on multilingual dependency parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>149--164</pages>
<location>New York, NY.</location>
<contexts>
<context position="4271" citStr="Buchholz and Marsi 2006" startWordPosition="614" endWordPosition="617">been based on constituency-based representations, partly influenced by the availability of data resources such as the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993), it has been argued that free constituent order languages can be analyzed more adequately using dependency-based representations, which is also the kind of annotation found, for example, in the Prague Dependency Treebank of Czech (Hajiˇc et al. 2001). Recently, dependency-based parsing has been applied to 13 different languages in the shared task of the 2006 Conference on Computational Natural Language Learning (CoNLL) (Buchholz and Marsi 2006). In this article, we focus on dependency-based parsing of Turkish, a language that is characterized by rich agglutinative morphology, free constituent order, and predominantly head-final syntactic constructions. Thus, Turkish can be viewed as the representative of a class of languages that are very different from English and most other languages that have been studied in the parsing literature. Using data from the recently released Turkish Treebank (Oflazer et al. 2003), we investigate the impact of different design choices in developing data-driven parsers. There are essentially three sets o</context>
<context position="73685" citStr="Buchholz and Marsi 2006" startWordPosition="11732" endWordPosition="11735"> authors used only a subset of the treebank sentences containing exclusively head-final and projective dependencies. The parser used in that paper is a preliminary version of the probabilistic parser used in this article. The first results on the entire treebank appear in Nivre et al. (2007), where the authors use memory-based learning to predict parser actions, and in Eryi˘git, Adalı, and Oflazer (2006), which introduces the rule-based parser used in this article. The Turkish Treebank has recently been parsed by 17 research groups in the CoNLLX shared task on multilingual dependency parsing (Buchholz and Marsi 2006), where it was seen as the most difficult language by the organizers and most of the groups.32 The following quote is taken from Buchholz and Marsi (page 161): “The most difficult data set is clearly the Turkish one. It is rather small, and in contrast to Arabic and Slovene, which are equally small or smaller, it covers 8 genres, which results in a high percentage of new FORM and LEMMA values in the test set.” The results for Turkish are given in Table 9. Our classifier-based parser obtained the best results for Turkish (with ASU=75.8 and ASL=65.7) and also for Japanese, which is the only aggl</context>
</contexts>
<marker>Buchholz, Marsi, 2006</marker>
<rawString>Buchholz, Sabine and Erwin Marsi. 2006. CONLL-X shared task on multilingual dependency parsing. In Proceedings of CONLL-X, pages 149–164, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C¸ akıcı</author>
<author>Ruket</author>
<author>Jason Baldridge</author>
</authors>
<title>Projective and non-projective Turkish parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of the 5th International Treebanks and Linguistic Theories Conference,</booktitle>
<pages>43--54</pages>
<location>Prague.</location>
<marker>akıcı, Ruket, Baldridge, 2006</marker>
<rawString>C¸ akıcı, Ruket and Jason Baldridge. 2006. Projective and non-projective Turkish parsing. In Proceedings of the 5th International Treebanks and Linguistic Theories Conference, pages 43–54, Prague.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sander Canisius</author>
</authors>
<title>Toine Bogers, Antal van den Bosch, Jeroen Geertzen, and Erik Tjong Kim Sang.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>176--180</pages>
<location>New York, NY.</location>
<marker>Canisius, 2006</marker>
<rawString>Canisius, Sander, Toine Bogers, Antal van den Bosch, Jeroen Geertzen, and Erik Tjong Kim Sang. 2006. Dependency parsing by inference over high-recall dependency predictions. In Proceedings of CONLL-X, pages 176–180, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xavier Carreras</author>
<author>Mihai Surdeanu</author>
<author>Lluis Marquez</author>
</authors>
<title>Projective dependency parsing with perceptron.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>181--185</pages>
<location>New York, NY.</location>
<marker>Carreras, Surdeanu, Marquez, 2006</marker>
<rawString>Carreras, Xavier, Mihai Surdeanu, and Lluis Marquez. 2006. Projective dependency parsing with perceptron. In Proceedings of CONLL-X, pages 181–185, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chih-Chung Chang</author>
<author>Chih-Jen Lin</author>
</authors>
<title>LIBSVM: A Library for Support Vector Machines. Software available at www.csie.ntu.edu.tw/∼cjlin/libsvm.</title>
<date>2001</date>
<contexts>
<context position="41802" citStr="Chang and Lin 2001" startWordPosition="6717" endWordPosition="6720">Inflectional features (INF) • Dependency type to the head if available (DEP) To predict parser actions from histories, represented as feature vectors, we use support vector machines (SVMs), which combine the maximum margin strategy introduced by Vapnik (1995) with the use of kernel functions to map the original feature space to a higher-dimensional space. This type of classifier has been used successfully in deterministic parsing by Kudo and Matsumoto (2002), Yamada and Matsumoto (2003), and Sagae and Lavie (2005), among others. To be more specific, we use the LIBSVM library for SVM learning (Chang and Lin 2001), with a polynomial kernel of degree 2, with binarization of symbolic features, and with the one-versus-one strategy for multiclass classification.19 This approach has some advantages over the probabilistic parser, in that • it can process both left-to-right and right-to-left dependencies due to its parsing algorithm, • it assigns dependency labels simultaneously with dependencies and can use these as features in the history-based model, and • it does not necessarily require expert knowledge about the choice of linguistically relevant features to use in the representations because SVM training</context>
</contexts>
<marker>Chang, Lin, 2001</marker>
<rawString>Chang, Chih-Chung and Chih-Jen Lin, 2001. LIBSVM: A Library for Support Vector Machines. Software available at www.csie.ntu.edu.tw/∼cjlin/libsvm.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ming-Wei Chang</author>
<author>Quang Do</author>
<author>Dan Roth</author>
</authors>
<title>A pipeline model for bottom-up dependency parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>186--190</pages>
<location>New York, NY.</location>
<marker>Chang, Do, Roth, 2006</marker>
<rawString>Chang, Ming-Wei, Quang Do, and Dan Roth. 2006. A pipeline model for bottom-up dependency parsing. In Proceedings of CONLL-X, pages 186–190, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yuchang Cheng</author>
<author>Masayuki Asahara</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Multi-lingual dependency parsing at NAIST.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>191--195</pages>
<location>New York, NY.</location>
<marker>Cheng, Asahara, Matsumoto, 2006</marker>
<rawString>Cheng, Yuchang, Masayuki Asahara, and Yuji Matsumoto. 2006. Multi-lingual dependency parsing at NAIST. In Proceedings of CONLL-X, pages 191–195, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hoojung Chung</author>
<author>Hae-Chang Rim</author>
</authors>
<title>Unlexicalized dependency parser for variable word order languages based on local contextual pattern.</title>
<date>2004</date>
<booktitle>In Proceedings of the 5th International Conference on Intelligent Text Processing and Computational Linguistics,</booktitle>
<pages>109--120</pages>
<contexts>
<context position="20901" citStr="Chung and Rim 2004" startWordPosition="3271" endWordPosition="3274">data. Such an approach comprises three components: 1. A parsing algorithm for building the dependency analyses (Eisner 1996; Sekine, Uchimoto, and Isahara 2000) 2. A conditional probability model to score the analyses (Collins 1996) Table 1 Unlabeled attachment scores and unlabeled word-to-word scores for the baseline parsers. Parsing Model ASU WWU Attach-to-next (first IG) 56.0 63.3 Attach-to-next (last IG) 54.1 63.3 Rule-based 70.5 79.3 363 Computational Linguistics Volume 34, Number 3 3. Maximum likelihood estimation to make inferences about the underlying probability models (Collins 1996; Chung and Rim 2004) 4.1 Methodology The aim of our probabilistic model is to assign a probability to each candidate dependency link by using the frequencies of similar dependencies computed from a training set. The aim of the parsing algorithm is then to explore the search space in order to find the most probable dependency tree. This can be formulated with Equation (1) where S is a sequence of n units (words or IGs) and T ranges over possible dependency trees consisting of dependency links dep(ui, uH(i)), with uH(i) denoting the head unit to which the dependent unit ui is linked and the probability of a given t</context>
<context position="22761" citStr="Chung and Rim (2004)" startWordPosition="3578" endWordPosition="3581">eeps track of the most probable dependency structures for the partially processed sentence. However, in order to handle head-initial dependencies, it employs three predefined lexicalized rules7 (also used in our rule-based baseline parser). For every new word, the parser starts by checking if any of the rules apply. If so, it constructs a right-to-left link where H(i) &lt; i and directly assigns 1.0 as the dependency probability (P(dep (ui, uH(i)) |S) = 1.0). If none of the rules apply, it instead uses probabilities for head-final dependencies. For the probability model, we adopt the approach by Chung and Rim (2004), which itself is a modified version of the statistical model used in Collins (1996).8 In this model in Equation (2), the probability of a dependency link P(dep (ui, uH(i)) |S) linking ui to a head uH(i) is approximated with the product of two probabilities: P(dep (ui,uH(i)) |S) ≈ P(link(ui,uH(i)) |(Di (DH(i)) (2) P(ui links to some head dist(i,H(i)) away |(Di) 7 The rules check for enclitics such as de, ki, mi, written on the right side of and separately from the word they attach to, for the verb de˘gil, which gives a negative meaning to the word coming before it and for nominals which do not</context>
</contexts>
<marker>Chung, Rim, 2004</marker>
<rawString>Chung, Hoojung and Hae-Chang Rim. 2004. Unlexicalized dependency parser for variable word order languages based on local contextual pattern. In Proceedings of the 5th International Conference on Intelligent Text Processing and Computational Linguistics, pages 109–120, Seoul.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>A new statistical parser based on bigram lexical dependencies.</title>
<date>1996</date>
<booktitle>In Proceedings of ACL’96,</booktitle>
<pages>184--191</pages>
<location>Santa Cruz, CA.</location>
<contexts>
<context position="20514" citStr="Collins 1996" startWordPosition="3218" endWordPosition="3219"> the relatively naive simpler baseline parsers which cannot recover headinitial dependencies. 4. Probabilistic Dependency Parser A well-studied approach to dependency parsing is a statistical approach where the parser takes a morphologically tagged and disambiguated sentence as input, and outputs the most probable dependency tree by using probabilities induced from the training data. Such an approach comprises three components: 1. A parsing algorithm for building the dependency analyses (Eisner 1996; Sekine, Uchimoto, and Isahara 2000) 2. A conditional probability model to score the analyses (Collins 1996) Table 1 Unlabeled attachment scores and unlabeled word-to-word scores for the baseline parsers. Parsing Model ASU WWU Attach-to-next (first IG) 56.0 63.3 Attach-to-next (last IG) 54.1 63.3 Rule-based 70.5 79.3 363 Computational Linguistics Volume 34, Number 3 3. Maximum likelihood estimation to make inferences about the underlying probability models (Collins 1996; Chung and Rim 2004) 4.1 Methodology The aim of our probabilistic model is to assign a probability to each candidate dependency link by using the frequencies of similar dependencies computed from a training set. The aim of the parsin</context>
<context position="22845" citStr="Collins (1996)" startWordPosition="3594" endWordPosition="3595">. However, in order to handle head-initial dependencies, it employs three predefined lexicalized rules7 (also used in our rule-based baseline parser). For every new word, the parser starts by checking if any of the rules apply. If so, it constructs a right-to-left link where H(i) &lt; i and directly assigns 1.0 as the dependency probability (P(dep (ui, uH(i)) |S) = 1.0). If none of the rules apply, it instead uses probabilities for head-final dependencies. For the probability model, we adopt the approach by Chung and Rim (2004), which itself is a modified version of the statistical model used in Collins (1996).8 In this model in Equation (2), the probability of a dependency link P(dep (ui, uH(i)) |S) linking ui to a head uH(i) is approximated with the product of two probabilities: P(dep (ui,uH(i)) |S) ≈ P(link(ui,uH(i)) |(Di (DH(i)) (2) P(ui links to some head dist(i,H(i)) away |(Di) 7 The rules check for enclitics such as de, ki, mi, written on the right side of and separately from the word they attach to, for the verb de˘gil, which gives a negative meaning to the word coming before it and for nominals which do not have any verbs on their right side. 8 The statistical model in Collins (1996) is ac</context>
<context position="24677" citStr="Collins (1996)" startWordPosition="3899" endWordPosition="3900">ent ui and (Dn(i) represents the context around the head uH(i), and • P(ui links to some head dist(i,H(i)) away |(Di) is the probability of seeing the dependent linking to some head a distance dist(i,H(i)) away, in the context (Di. In all of the following models, dist(i,H(i)) is taken as the number of actual word boundaries between the dependent and the head unit regardless of whether full words or IGs were used as units of parsing.9 To alleviate the data sparseness, we use the interpolation of other estimates while calculating the probabilities in Equation (2).10 We use a strategy similar to Collins (1996) and we interpolate with estimates based on less context: P(x|J) &apos;Zz� A · P1(x|J) + (1 − A) · P2(x) (3) where A = b/(b + 1) and b is the count of the x occurrences During the actual runs, the smoothed probability P(link(ui,un(i)) |(Di (Dn(i)) is estimated by interpolating two unsmoothed empirical estimates extracted from the treebank: P1(link(ui,un(i)) |(Di (Dn(i)) and P2(link(ui,un(i))). A similar approach was employed for P(ui links to some head dist(i,H(i)) away |(Di) and it is estimated by interpolating P1(ui links to some head dist(i,H(i)) away |(Di) and P2(ui links to some head dist(i,H(</context>
</contexts>
<marker>Collins, 1996</marker>
<rawString>Collins, Michael. 1996. A new statistical parser based on bigram lexical dependencies. In Proceedings of ACL’96, pages 184–191, Santa Cruz, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>Three generative, lexicalised models for statistical parsing.</title>
<date>1997</date>
<booktitle>In Proceedings of ACL’97,</booktitle>
<pages>16--23</pages>
<location>Madrid.</location>
<contexts>
<context position="3105" citStr="Collins 1997" startWordPosition="440" endWordPosition="441">ived: 5 October 2006; revised submission received: 3 April 2007; accepted for publication: 16 May 2007. © 2008 Association for Computational Linguistics Computational Linguistics Volume 34, Number 3 An important issue in this context is to what extent our models and algorithms are tailored to properties of specific languages or language groups. This issue is especially pertinent for data-driven approaches, where one of the claimed advantages is portability to new languages. The results so far mainly come from studies where a parser originally developed for English, such as the Collins parser (Collins 1997, 1999), is applied to a new language, which often leads to a significant decrease in the measured accuracy (Collins et al. 1999; Bikel and Chiang 2000; Dubey and Keller 2003; Levy and Manning 2003; Corazza et al. 2004). However, it is often quite difficult to tease apart the influence of different features of the parsing methodology in the observed degradation of performance. A related issue concerns the suitability of different kinds of syntactic representation for different types of languages. Whereas most of the work on English has been based on constituency-based representations, partly i</context>
</contexts>
<marker>Collins, 1997</marker>
<rawString>Collins, Michael. 1997. Three generative, lexicalised models for statistical parsing. In Proceedings of ACL’97, pages 16–23, Madrid.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>Head-Driven Statistical Models for Natural Language Parsing.</title>
<date>1999</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania,</institution>
<location>Philadelphia.</location>
<contexts>
<context position="37673" citStr="Collins 1999" startWordPosition="6045" endWordPosition="6046">l features 3 Using minor part of speech for all 71.0±0.3 types of IGs together with case and possessive markers for nominals and possessive marker for adjectives (but no dynamic selection) 4 Using all inflectional features in 46.5±0.4 addition to minor part of speech 5 Adding root information to the best 53.7±0.2 performing IG-based model 6 Adding surface form information to the best 54.4±0.2 performing IG-based model 370 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish 2. History-based models for predicting the next parser action (Black et al. 1992; Magerman 1995; Ratnaparkhi 1997; Collins 1999) 3. Discriminative classifiers to map histories to parser actions (Kudo and Matsumoto 2002; Yamada and Matsumoto 2003; Nivre, Hall, and Nilsson 2004) A system of this kind employs no grammar but relies completely on inductive learning from treebank data for the analysis of new sentences, and on deterministic parsing for disambiguation. This combination of methods guarantees that the parser is robust, never failing to produce an analysis for an input sentence, and efficient, typically deriving this analysis in time that is linear in the length of the sentence. In the following sections, we will</context>
</contexts>
<marker>Collins, 1999</marker>
<rawString>Collins, Michael. 1999. Head-Driven Statistical Models for Natural Language Parsing. Ph.D. thesis, University of Pennsylvania, Philadelphia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
<author>Jan Hajic</author>
<author>Lance Ramshaw</author>
<author>Christoph Tillmann</author>
</authors>
<title>A statistical parser for Czech.</title>
<date>1999</date>
<booktitle>In Proceedings of ACL’99,</booktitle>
<pages>505--518</pages>
<location>College Park, MD.</location>
<contexts>
<context position="3233" citStr="Collins et al. 1999" startWordPosition="460" endWordPosition="463">n for Computational Linguistics Computational Linguistics Volume 34, Number 3 An important issue in this context is to what extent our models and algorithms are tailored to properties of specific languages or language groups. This issue is especially pertinent for data-driven approaches, where one of the claimed advantages is portability to new languages. The results so far mainly come from studies where a parser originally developed for English, such as the Collins parser (Collins 1997, 1999), is applied to a new language, which often leads to a significant decrease in the measured accuracy (Collins et al. 1999; Bikel and Chiang 2000; Dubey and Keller 2003; Levy and Manning 2003; Corazza et al. 2004). However, it is often quite difficult to tease apart the influence of different features of the parsing methodology in the observed degradation of performance. A related issue concerns the suitability of different kinds of syntactic representation for different types of languages. Whereas most of the work on English has been based on constituency-based representations, partly influenced by the availability of data resources such as the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993), it has be</context>
</contexts>
<marker>Collins, Hajic, Ramshaw, Tillmann, 1999</marker>
<rawString>Collins, Michael, Jan Hajic, Lance Ramshaw, and Christoph Tillmann. 1999. A statistical parser for Czech. In Proceedings of ACL’99, pages 505–518, College Park, MD.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anna Corazza</author>
<author>Alberto Lavelli</author>
<author>Giorgio Satta</author>
<author>Roberto Zanoli</author>
</authors>
<title>Analyzing an Italian treebank with state-of-the-art statistical parsers.</title>
<date>2004</date>
<booktitle>In Proceedings of the 3rd Workshop on Treebanks and Linguistic Theories,</booktitle>
<pages>39--50</pages>
<contexts>
<context position="3324" citStr="Corazza et al. 2004" startWordPosition="476" endWordPosition="479"> issue in this context is to what extent our models and algorithms are tailored to properties of specific languages or language groups. This issue is especially pertinent for data-driven approaches, where one of the claimed advantages is portability to new languages. The results so far mainly come from studies where a parser originally developed for English, such as the Collins parser (Collins 1997, 1999), is applied to a new language, which often leads to a significant decrease in the measured accuracy (Collins et al. 1999; Bikel and Chiang 2000; Dubey and Keller 2003; Levy and Manning 2003; Corazza et al. 2004). However, it is often quite difficult to tease apart the influence of different features of the parsing methodology in the observed degradation of performance. A related issue concerns the suitability of different kinds of syntactic representation for different types of languages. Whereas most of the work on English has been based on constituency-based representations, partly influenced by the availability of data resources such as the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993), it has been argued that free constituent order languages can be analyzed more adequately using depen</context>
</contexts>
<marker>Corazza, Lavelli, Satta, Zanoli, 2004</marker>
<rawString>Corazza, Anna, Alberto Lavelli, Giorgio Satta, and Roberto Zanoli. 2004. Analyzing an Italian treebank with state-of-the-art statistical parsers. In Proceedings of the 3rd Workshop on Treebanks and Linguistic Theories, pages 39–50, T¨ubingen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Simon Corston-Oliver</author>
<author>Anthony Aue</author>
</authors>
<title>Dependency parsing with reference to Slovene, Spanish and Swedish.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>196--200</pages>
<location>New York, NY.</location>
<contexts>
<context position="75068" citStr="Corston-Oliver and Aue (2006)" startWordPosition="11967" endWordPosition="11970"> links. When we look at the results, we observe that most of the best performing parsers use 32 The Turkish data used in the shared task is actually a modified version of the treebank used in this article; some conversions are made on punctuation structures in order to keep consistency between all languages. 384 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish Table 9 CoNLL-X shared task results on Turkish (taken from Table 5 in Buchholz and Marsi [2006]). Teams ASU ASL Nivre et al. (2006) 75.8 65.7 Johansson and Nugues (2006) 73.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on</context>
</contexts>
<marker>Corston-Oliver, Aue, 2006</marker>
<rawString>Corston-Oliver, Simon and Anthony Aue. 2006. Dependency parsing with reference to Slovene, Spanish and Swedish. In Proceedings of CONLL-X, pages 196–200, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Walter Daelemans</author>
<author>Antal Vanden Bosch</author>
</authors>
<title>Memory-Based Language Processing.</title>
<date>2005</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge.</location>
<contexts>
<context position="42774" citStr="Daelemans and Bosch 2005" startWordPosition="6856" endWordPosition="6859">els simultaneously with dependencies and can use these as features in the history-based model, and • it does not necessarily require expert knowledge about the choice of linguistically relevant features to use in the representations because SVM training involves implicit feature selection. However, we still exclude sentences with non-projective dependencies during training.20 Because the classifier-based parser not only builds dependency structures but also assigns dependency labels, we give ASL scores as well as ASU scores. 19 Experiments have also been performed using memory-based learning (Daelemans and Bosch 2005). They were found to give lower parsing accuracy. 20 Because the frequency of non-projective dependencies in the Turkish Treebank is not high enough to learn such dependencies and mostly due to the unconnected punctuations with which we are dealing by adding an extra dependency label, we did not observe any improvement when applying the pseudo-projective processing of Nivre and Nilsson (2005), which is reported to improve accuracy for other languages. 372 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish 5.2 Experimental Results In this section, our first aim is to confirm the claim t</context>
</contexts>
<marker>Daelemans, Bosch, 2005</marker>
<rawString>Daelemans, Walter and Antal Vanden Bosch. 2005. Memory-Based Language Processing. Cambridge University Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Markus Dreyer</author>
<author>David A Smith</author>
<author>Noah A Smith</author>
</authors>
<title>Vine parsing and minimum risk reranking for speed and precision.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>201--205</pages>
<location>New York, NY.</location>
<marker>Dreyer, Smith, Smith, 2006</marker>
<rawString>Dreyer, Markus, David A. Smith, and Noah A. Smith. 2006. Vine parsing and minimum risk reranking for speed and precision. In Proceedings of CONLL-X, pages 201–205, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Amit Dubey</author>
<author>Frank Keller</author>
</authors>
<title>Probabilistic parsing for German using sister-head dependencies.</title>
<date>2003</date>
<booktitle>In Proceedings of ACL’03,</booktitle>
<pages>96--103</pages>
<location>Sapporo.</location>
<contexts>
<context position="3279" citStr="Dubey and Keller 2003" startWordPosition="468" endWordPosition="471">l Linguistics Volume 34, Number 3 An important issue in this context is to what extent our models and algorithms are tailored to properties of specific languages or language groups. This issue is especially pertinent for data-driven approaches, where one of the claimed advantages is portability to new languages. The results so far mainly come from studies where a parser originally developed for English, such as the Collins parser (Collins 1997, 1999), is applied to a new language, which often leads to a significant decrease in the measured accuracy (Collins et al. 1999; Bikel and Chiang 2000; Dubey and Keller 2003; Levy and Manning 2003; Corazza et al. 2004). However, it is often quite difficult to tease apart the influence of different features of the parsing methodology in the observed degradation of performance. A related issue concerns the suitability of different kinds of syntactic representation for different types of languages. Whereas most of the work on English has been based on constituency-based representations, partly influenced by the availability of data resources such as the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993), it has been argued that free constituent order language</context>
<context position="5930" citStr="Dubey and Keller, 2003" startWordPosition="867" endWordPosition="870"> units rather than word forms as the basic units of syntactic structure (Eryi˘git and Oflazer 2006). In this article, we corroborate this claim showing that it holds in both approaches we explore. We also study the impact of different morphological feature representations on parsing accuracy. • The second set of issues concerns lexicalization, a topic that has been very prominent in the parsing literature lately. Whereas the best performing parsers for English all make use of lexical information, the real benefits of lexicalization for English as well as other languages remains controversial (Dubey and Keller, 2003; Klein and Manning 2003; Arun and Keller 2005). • The third set concerns the basic parsing methodology, including both parsing algorithms and learning algorithms. We first introduce a statistical parser using a conditional probabilistic model which is very sensitive to the selected representational features and thus clearly exposes the ones 358 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish with crucial importance for parsing Turkish. We then implement our models on a deterministic classifier-based parser using discriminative learning, which is one of the best performing dependenc</context>
<context position="57162" citStr="Dubey and Keller 2003" startWordPosition="9098" endWordPosition="9101">tion only with the classifier-based parser. We tried partially lexicalized models by lexicalizing various combinations of certain POS categories (see Figure 8). The results show that, whereas lexicalization certainly improves parsing accuracy for Turkish, only the lexicalization of conjunctions and nouns together has an impact on accuracy. Similarly to the experiments on inflectional features, we again see that the classifier-based parser has no sparse data problem even if we use a totally lexicalized model. Although the effect of lexicalization has been discussed in several studies recently (Dubey and Keller 2003; Klein and Manning 2003; Arun and Keller 2005), it is often investigated as an all-or-nothing affair, except for a few studies that analyze the distributions of lexical items, for example, Bikel (2004) and Gildea (2001). The results for 25 IGs with a noun part-of-speech tag other than common nouns are marked with an additional minor part of speech that indicates whether the nominal is a proper noun or a derived form—one of future participle, past participle, infinitive, or a form involving a zero-morpheme derivation. These latter four do not contain any root information. 377 Computational Lin</context>
</contexts>
<marker>Dubey, Keller, 2003</marker>
<rawString>Dubey, Amit and Frank Keller. 2003. Probabilistic parsing for German using sister-head dependencies. In Proceedings of ACL’03, pages 96–103, Sapporo.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jason Eisner</author>
</authors>
<title>Three new probabilistic models for dependency parsing: An exploration.</title>
<date>1996</date>
<booktitle>In Proceedings of the 16th International Conference on Computational Linguistics,</booktitle>
<pages>340--345</pages>
<location>Copenhagen.</location>
<contexts>
<context position="20405" citStr="Eisner 1996" startWordPosition="3202" endWordPosition="3203">It can be seen that the rule-based parser provides an improvement of about 15 percentage points compared to the relatively naive simpler baseline parsers which cannot recover headinitial dependencies. 4. Probabilistic Dependency Parser A well-studied approach to dependency parsing is a statistical approach where the parser takes a morphologically tagged and disambiguated sentence as input, and outputs the most probable dependency tree by using probabilities induced from the training data. Such an approach comprises three components: 1. A parsing algorithm for building the dependency analyses (Eisner 1996; Sekine, Uchimoto, and Isahara 2000) 2. A conditional probability model to score the analyses (Collins 1996) Table 1 Unlabeled attachment scores and unlabeled word-to-word scores for the baseline parsers. Parsing Model ASU WWU Attach-to-next (first IG) 56.0 63.3 Attach-to-next (last IG) 54.1 63.3 Rule-based 70.5 79.3 363 Computational Linguistics Volume 34, Number 3 3. Maximum likelihood estimation to make inferences about the underlying probability models (Collins 1996; Chung and Rim 2004) 4.1 Methodology The aim of our probabilistic model is to assign a probability to each candidate depende</context>
<context position="75581" citStr="Eisner (1996)" startWordPosition="12056" endWordPosition="12057">Nugues (2006) 73.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ akıcı and Baldridge (2006), where the authors use the MSTParser (McDonald, Lerman, and Pereira 2006), also used in the CoNLL-X shared task (line 3 in Table 9). Following the work of Eryi˘git and Oflazer (2006) and Nivre et al. (2006), they use the</context>
</contexts>
<marker>Eisner, 1996</marker>
<rawString>Eisner, Jason. 1996. Three new probabilistic models for dependency parsing: An exploration. In Proceedings of the 16th International Conference on Computational Linguistics, pages 340–345, Copenhagen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eser Emine Erguvanlı</author>
</authors>
<title>The Function of Word Order in Turkish Grammar.</title>
<date>1979</date>
<tech>Ph.D. thesis, UCLA.</tech>
<contexts>
<context position="8539" citStr="Erguvanlı 1979" startWordPosition="1247" endWordPosition="1248">zes the main conclusions from our study. 2. Turkish: Morphology and Dependency Relations Turkish displays rather different characteristics compared to the more well-studied languages in the parsing literature. Most of these characteristics are also found in many agglutinative languages such as Basque, Estonian, Finnish, Hungarian, Japanese, and Korean.1 Turkish is a flexible constituent order language. Even though in written texts the constituent order predominantly conforms to the SOV order, constituents may freely change their position depending on the requirements of the discourse context (Erguvanlı 1979; Hoffman 1994). However, from a dependency structure point of view, Turkish is predominantly (but not exclusively) head final. Turkish has a very rich agglutinative morphological structure. Nouns can give rise to about 100 inflected forms and verbs to many more. Furthermore, Turkish words may be formed through very productive derivations, increasing substantially the number of possible word forms that can be generated from a root word. It is not uncommon to find up to four or five derivations in a single word. Previous work on Turkish (HakkaniT¨ur, Oflazer, and T¨ur 2002; Oflazer 2003; Oflaze</context>
</contexts>
<marker>Erguvanlı, 1979</marker>
<rawString>Erguvanlı, Eser Emine. 1979. The Function of Word Order in Turkish Grammar. Ph.D. thesis, UCLA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G¨uls¸en Eryi˘git</author>
</authors>
<title>T¨urk¸cenin Ba˘glılık Ayrı¸stırması (Dependency Parsing of Turkish).</title>
<date>2006</date>
<tech>Ph.D. thesis,</tech>
<institution>Istanbul Technical University.</institution>
<marker>Eryi˘git, 2006</marker>
<rawString>Eryi˘git, G¨uls¸en. 2006. T¨urk¸cenin Ba˘glılık Ayrı¸stırması (Dependency Parsing of Turkish). Ph.D. thesis, Istanbul Technical University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G¨uls¸en Eryi˘git</author>
<author>Es¸ref Adalı</author>
<author>Kemal Oflazer</author>
</authors>
<title>T¨urkc¸e c¨umlelerin kural tabanlı ba˘glılık analizi [Rule-based dependency parsing of Turkish sentences].</title>
<date>2006</date>
<booktitle>In Proceedings of the 15th Turkish Symposium on Artificial Intelligence and Neural Networks,</booktitle>
<pages>17--24</pages>
<marker>Eryi˘git, Adalı, Oflazer, 2006</marker>
<rawString>Eryi˘git, G¨uls¸en, Es¸ref Adalı, and Kemal Oflazer. 2006. T¨urkc¸e c¨umlelerin kural tabanlı ba˘glılık analizi [Rule-based dependency parsing of Turkish sentences]. In Proceedings of the 15th Turkish Symposium on Artificial Intelligence and Neural Networks, pages 17–24, Mu˘gla.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G¨uls¸en Eryi˘git</author>
<author>Joakim Nivre</author>
<author>Kemal Oflazer</author>
</authors>
<title>The incremental use of morphological information and lexicalization in data-driven dependency parsing.</title>
<date>2006</date>
<booktitle>In Computer Processing of Oriental Languages, Beyond the Orient: The Research Challenges Ahead,</booktitle>
<pages>498--507</pages>
<marker>Eryi˘git, Nivre, Oflazer, 2006</marker>
<rawString>Eryi˘git, G¨uls¸en, Joakim Nivre, and Kemal Oflazer. 2006. The incremental use of morphological information and lexicalization in data-driven dependency parsing. In Computer Processing of Oriental Languages, Beyond the Orient: The Research Challenges Ahead, pages 498–507, Singapore.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G¨uls¸en Eryi˘git</author>
<author>Kemal Oflazer</author>
</authors>
<title>Statistical dependency parsing of Turkish.</title>
<date>2006</date>
<booktitle>In Proceedings of EACL’06,</booktitle>
<pages>89--96</pages>
<location>Trento.</location>
<marker>Eryi˘git, Oflazer, 2006</marker>
<rawString>Eryi˘git, G¨uls¸en and Kemal Oflazer. 2006. Statistical dependency parsing of Turkish. In Proceedings of EACL’06, pages 89–96, Trento.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Gildea</author>
</authors>
<title>Corpus variation and parser performance.</title>
<date>2001</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>167--202</pages>
<location>Pittsburgh, PA.</location>
<contexts>
<context position="57382" citStr="Gildea (2001)" startWordPosition="9136" endWordPosition="9137">rsing accuracy for Turkish, only the lexicalization of conjunctions and nouns together has an impact on accuracy. Similarly to the experiments on inflectional features, we again see that the classifier-based parser has no sparse data problem even if we use a totally lexicalized model. Although the effect of lexicalization has been discussed in several studies recently (Dubey and Keller 2003; Klein and Manning 2003; Arun and Keller 2005), it is often investigated as an all-or-nothing affair, except for a few studies that analyze the distributions of lexical items, for example, Bikel (2004) and Gildea (2001). The results for 25 IGs with a noun part-of-speech tag other than common nouns are marked with an additional minor part of speech that indicates whether the nominal is a proper noun or a derived form—one of future participle, past participle, infinitive, or a form involving a zero-morpheme derivation. These latter four do not contain any root information. 377 Computational Linguistics Volume 34, Number 3 Figure 8 Unlabeled and labeled attachment scores for incrementally extended lexicalization for the classifier-based parser. Turkish clearly show that the effect of lexicalization is not unifo</context>
</contexts>
<marker>Gildea, 2001</marker>
<rawString>Gildea, Daniel. 2001. Corpus variation and parser performance. In Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 167–202, Pittsburgh, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan Hajiˇc</author>
<author>Eva Hajiˇcov´a</author>
<author>Petr Pajas</author>
<author>Jarmila Panevov´a</author>
<author>Petr Sgall</author>
<author>Barbora Hladk´a</author>
</authors>
<date>2001</date>
<booktitle>Prague dependency treebank 1.0 (final production label). CDROM CAT: LDC2001T10., ISBN</booktitle>
<pages>1--58563</pages>
<marker>Hajiˇc, Hajiˇcov´a, Pajas, Panevov´a, Sgall, Hladk´a, 2001</marker>
<rawString>Hajiˇc, Jan, Eva Hajiˇcov´a, Petr Pajas, Jarmila Panevov´a, Petr Sgall, and Barbora Hladk´a. 2001. Prague dependency treebank 1.0 (final production label). CDROM CAT: LDC2001T10., ISBN 1-58563-212-0.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dilek Hakkani-T¨ur</author>
<author>Kemal Oflazer</author>
<author>G¨okhan T¨ur</author>
</authors>
<title>Statistical morphological disambiguation for agglutinative languages.</title>
<date>2002</date>
<journal>Journal of Computers and Humanities,</journal>
<volume>36</volume>
<issue>4</issue>
<marker>Hakkani-T¨ur, Oflazer, T¨ur, 2002</marker>
<rawString>Hakkani-T¨ur, Dilek, Kemal Oflazer, and G¨okhan T¨ur. 2002. Statistical morphological disambiguation for agglutinative languages. Journal of Computers and Humanities, 36(4):381–410.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Beryl Hoffman</author>
</authors>
<title>Generating context appropriate word orders in Turkish.</title>
<date>1994</date>
<booktitle>In Proceedings of the Seventh International Workshop on Natural Language Generation,</booktitle>
<pages>117--126</pages>
<location>Kennebunkport, ME.</location>
<contexts>
<context position="8554" citStr="Hoffman 1994" startWordPosition="1249" endWordPosition="1250">clusions from our study. 2. Turkish: Morphology and Dependency Relations Turkish displays rather different characteristics compared to the more well-studied languages in the parsing literature. Most of these characteristics are also found in many agglutinative languages such as Basque, Estonian, Finnish, Hungarian, Japanese, and Korean.1 Turkish is a flexible constituent order language. Even though in written texts the constituent order predominantly conforms to the SOV order, constituents may freely change their position depending on the requirements of the discourse context (Erguvanlı 1979; Hoffman 1994). However, from a dependency structure point of view, Turkish is predominantly (but not exclusively) head final. Turkish has a very rich agglutinative morphological structure. Nouns can give rise to about 100 inflected forms and verbs to many more. Furthermore, Turkish words may be formed through very productive derivations, increasing substantially the number of possible word forms that can be generated from a root word. It is not uncommon to find up to four or five derivations in a single word. Previous work on Turkish (HakkaniT¨ur, Oflazer, and T¨ur 2002; Oflazer 2003; Oflazer et al. 2003; </context>
</contexts>
<marker>Hoffman, 1994</marker>
<rawString>Hoffman, Beryl. 1994. Generating context appropriate word orders in Turkish. In Proceedings of the Seventh International Workshop on Natural Language Generation, pages 117–126, Kennebunkport, ME.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Johansson</author>
<author>Pierre Nugues</author>
</authors>
<title>Investigating multilingual dependency parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>206--210</pages>
<location>New York, NY.</location>
<contexts>
<context position="74981" citStr="Johansson and Nugues (2006)" startWordPosition="11954" endWordPosition="11957">sh (Nivre et al. 2006). The groups were asked to find the correct IG-to-IG dependency links. When we look at the results, we observe that most of the best performing parsers use 32 The Turkish data used in the shared task is actually a modified version of the treebank used in this article; some conversions are made on punctuation structures in order to keep consistency between all languages. 384 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish Table 9 CoNLL-X shared task results on Turkish (taken from Table 5 in Buchholz and Marsi [2006]). Teams ASU ASL Nivre et al. (2006) 75.8 65.7 Johansson and Nugues (2006) 73.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996)</context>
</contexts>
<marker>Johansson, Nugues, 2006</marker>
<rawString>Johansson, Richard and Pierre Nugues. 2006. Investigating multilingual dependency parsing. In Proceedings of CONLL-X, pages 206–210, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Klein</author>
<author>Christopher D Manning</author>
</authors>
<title>Accurate unlexicalized parsing.</title>
<date>2003</date>
<booktitle>In Proceedings of ACL’03,</booktitle>
<pages>423--430</pages>
<location>Sapporo.</location>
<contexts>
<context position="5954" citStr="Klein and Manning 2003" startWordPosition="871" endWordPosition="874">forms as the basic units of syntactic structure (Eryi˘git and Oflazer 2006). In this article, we corroborate this claim showing that it holds in both approaches we explore. We also study the impact of different morphological feature representations on parsing accuracy. • The second set of issues concerns lexicalization, a topic that has been very prominent in the parsing literature lately. Whereas the best performing parsers for English all make use of lexical information, the real benefits of lexicalization for English as well as other languages remains controversial (Dubey and Keller, 2003; Klein and Manning 2003; Arun and Keller 2005). • The third set concerns the basic parsing methodology, including both parsing algorithms and learning algorithms. We first introduce a statistical parser using a conditional probabilistic model which is very sensitive to the selected representational features and thus clearly exposes the ones 358 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish with crucial importance for parsing Turkish. We then implement our models on a deterministic classifier-based parser using discriminative learning, which is one of the best performing dependency parsers evaluated on a</context>
<context position="57186" citStr="Klein and Manning 2003" startWordPosition="9102" endWordPosition="9105">sifier-based parser. We tried partially lexicalized models by lexicalizing various combinations of certain POS categories (see Figure 8). The results show that, whereas lexicalization certainly improves parsing accuracy for Turkish, only the lexicalization of conjunctions and nouns together has an impact on accuracy. Similarly to the experiments on inflectional features, we again see that the classifier-based parser has no sparse data problem even if we use a totally lexicalized model. Although the effect of lexicalization has been discussed in several studies recently (Dubey and Keller 2003; Klein and Manning 2003; Arun and Keller 2005), it is often investigated as an all-or-nothing affair, except for a few studies that analyze the distributions of lexical items, for example, Bikel (2004) and Gildea (2001). The results for 25 IGs with a noun part-of-speech tag other than common nouns are marked with an additional minor part of speech that indicates whether the nominal is a proper noun or a derived form—one of future participle, past participle, infinitive, or a form involving a zero-morpheme derivation. These latter four do not contain any root information. 377 Computational Linguistics Volume 34, Numb</context>
</contexts>
<marker>Klein, Manning, 2003</marker>
<rawString>Klein, Dan and Christopher D. Manning. 2003. Accurate unlexicalized parsing. In Proceedings of ACL’03, pages 423–430, Sapporo.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matthias T Kromann</author>
</authors>
<title>The Danish dependency treebank and the underlying linguistic theory.</title>
<date>2003</date>
<booktitle>In Proceedings of the 2nd Workshop on Treebanks and Linguistic Theories,</booktitle>
<pages>217--220</pages>
<contexts>
<context position="14923" citStr="Kromann 2003" startWordPosition="2304" endWordPosition="2305"> this representation point from dependents to heads, because representations with arrows in the opposite direction also exist in the literature. 361 Computational Linguistics Volume 34, Number 3 The average number of IGs per word is 1.26 in running text, but the figure is higher for open class words and 1 for high frequency function words which do not inflect. Of all the dependencies in the treebank, 95% are head-final5 and 97.5% are projective.6 Even though the number of sentences in the Turkish Treebank is in the same range as for many other available treebanks for languages such as Danish (Kromann 2003), Swedish (Nivre, Nilsson, and Hall 2006), and Bulgarian (Simov, Popova, and Osenova 2002), the number of words is considerably smaller (54K as opposed to 70–100K for the other treebanks). This corresponds to a relatively short average sentence length in the treebank of about 8.6 words, which is mainly due to the richness of the morphological structure, because often one word in Turkish may correspond to a whole sentence in another language. 3. Dependency Parsing of Turkish In the following sections, we investigate different approaches to dependency parsing of Turkish and show that using parsi</context>
</contexts>
<marker>Kromann, 2003</marker>
<rawString>Kromann, Matthias T. 2003. The Danish dependency treebank and the underlying linguistic theory. In Proceedings of the 2nd Workshop on Treebanks and Linguistic Theories, pages 217–220, V¨axj¨o.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Taku Kudo</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Japanese dependency analysis using cascaded chunking.</title>
<date>2002</date>
<booktitle>In Proceedings of the Conference on Computational Natural Language Learning,</booktitle>
<pages>63--69</pages>
<location>Taipei.</location>
<contexts>
<context position="36735" citStr="Kudo and Matsumoto 2002" startWordPosition="5897" endWordPosition="5900"> Hl=0, Hr=1) 72.1±0.3 79.0±0.7 results than using root information (#5). Also, dynamic selection of tags seems to help performance (#3) but using all available inflectional information performs significantly worse possibly due to data sparseness. 5. Classifier-Based Dependency Parser Our second data-driven parser is based on a parsing strategy that has achieved a high parsing accuracy across a variety of different languages (Nivre et al. 2006, 2007). This strategy consists of the combination of the following three techniques: 1. Deterministic parsing algorithms for building dependency graphs (Kudo and Matsumoto 2002; Nivre 2003; Yamada and Matsumoto 2003) Table 3 Unlabeled attachment scores for different choices for morphological features. Model ASU IG-based model # (Dl=1, Dr=1, Hl=0, Hr=1) 72.1±0.3 1 Using major part of speech 71.2±0.2 instead of minor part of speech 2 Using only minor part of speech and 68.3±0.2 no other inflectional features 3 Using minor part of speech for all 71.0±0.3 types of IGs together with case and possessive markers for nominals and possessive marker for adjectives (but no dynamic selection) 4 Using all inflectional features in 46.5±0.4 addition to minor part of speech 5 Addin</context>
<context position="41645" citStr="Kudo and Matsumoto (2002)" startWordPosition="6690" endWordPosition="6693">lly built dependency graph. The linguistic attributes available for a given token are the following: • Lexical form (root) (LEX) • Part-of-speech category (POS) • Inflectional features (INF) • Dependency type to the head if available (DEP) To predict parser actions from histories, represented as feature vectors, we use support vector machines (SVMs), which combine the maximum margin strategy introduced by Vapnik (1995) with the use of kernel functions to map the original feature space to a higher-dimensional space. This type of classifier has been used successfully in deterministic parsing by Kudo and Matsumoto (2002), Yamada and Matsumoto (2003), and Sagae and Lavie (2005), among others. To be more specific, we use the LIBSVM library for SVM learning (Chang and Lin 2001), with a polynomial kernel of degree 2, with binarization of symbolic features, and with the one-versus-one strategy for multiclass classification.19 This approach has some advantages over the probabilistic parser, in that • it can process both left-to-right and right-to-left dependencies due to its parsing algorithm, • it assigns dependency labels simultaneously with dependencies and can use these as features in the history-based model, a</context>
</contexts>
<marker>Kudo, Matsumoto, 2002</marker>
<rawString>Kudo, Taku and Yuji Matsumoto. 2002. Japanese dependency analysis using cascaded chunking. In Proceedings of the Conference on Computational Natural Language Learning, pages 63–69, Taipei.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Roger Levy</author>
<author>Christopher Manning</author>
</authors>
<title>Is it harder to parse Chinese, or the Chinese treebank?</title>
<date>2003</date>
<booktitle>In Proceedings of ACL’03,</booktitle>
<pages>439--446</pages>
<location>Sapporo.</location>
<contexts>
<context position="3302" citStr="Levy and Manning 2003" startWordPosition="472" endWordPosition="475">, Number 3 An important issue in this context is to what extent our models and algorithms are tailored to properties of specific languages or language groups. This issue is especially pertinent for data-driven approaches, where one of the claimed advantages is portability to new languages. The results so far mainly come from studies where a parser originally developed for English, such as the Collins parser (Collins 1997, 1999), is applied to a new language, which often leads to a significant decrease in the measured accuracy (Collins et al. 1999; Bikel and Chiang 2000; Dubey and Keller 2003; Levy and Manning 2003; Corazza et al. 2004). However, it is often quite difficult to tease apart the influence of different features of the parsing methodology in the observed degradation of performance. A related issue concerns the suitability of different kinds of syntactic representation for different types of languages. Whereas most of the work on English has been based on constituency-based representations, partly influenced by the availability of data resources such as the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993), it has been argued that free constituent order languages can be analyzed more </context>
</contexts>
<marker>Levy, Manning, 2003</marker>
<rawString>Levy, Roger and Christopher Manning. 2003. Is it harder to parse Chinese, or the Chinese treebank? In Proceedings of ACL’03, pages 439–446, Sapporo.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ting Liu</author>
<author>Jinshan Ma</author>
<author>Huijia Zhu</author>
<author>Sheng Li</author>
</authors>
<title>Dependency parsing based on dynamic local optimization.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>211--215</pages>
<location>New York, NY.</location>
<contexts>
<context position="75499" citStr="Liu et al. (2006)" startWordPosition="12040" endWordPosition="12043">Buchholz and Marsi [2006]). Teams ASU ASL Nivre et al. (2006) 75.8 65.7 Johansson and Nugues (2006) 73.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ akıcı and Baldridge (2006), where the authors use the MSTParser (McDonald, Lerman, and Pereira 2006), also used in the CoNLL-X shared task (line 3 in Table 9). Follo</context>
</contexts>
<marker>Liu, Ma, Zhu, Li, 2006</marker>
<rawString>Liu, Ting, Jinshan Ma, Huijia Zhu, and Sheng Li. 2006. Dependency parsing based on dynamic local optimization. In Proceedings of CONLL-X, pages 211–215, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David M Magerman</author>
</authors>
<title>Statistical decision-tree models for parsing.</title>
<date>1995</date>
<booktitle>In Proceedings of ACL’95,</booktitle>
<pages>276--283</pages>
<location>Cambridge, MA.</location>
<contexts>
<context position="37640" citStr="Magerman 1995" startWordPosition="6041" endWordPosition="6042">and 68.3±0.2 no other inflectional features 3 Using minor part of speech for all 71.0±0.3 types of IGs together with case and possessive markers for nominals and possessive marker for adjectives (but no dynamic selection) 4 Using all inflectional features in 46.5±0.4 addition to minor part of speech 5 Adding root information to the best 53.7±0.2 performing IG-based model 6 Adding surface form information to the best 54.4±0.2 performing IG-based model 370 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish 2. History-based models for predicting the next parser action (Black et al. 1992; Magerman 1995; Ratnaparkhi 1997; Collins 1999) 3. Discriminative classifiers to map histories to parser actions (Kudo and Matsumoto 2002; Yamada and Matsumoto 2003; Nivre, Hall, and Nilsson 2004) A system of this kind employs no grammar but relies completely on inductive learning from treebank data for the analysis of new sentences, and on deterministic parsing for disambiguation. This combination of methods guarantees that the parser is robust, never failing to produce an analysis for an input sentence, and efficient, typically deriving this analysis in time that is linear in the length of the sentence. I</context>
</contexts>
<marker>Magerman, 1995</marker>
<rawString>Magerman, David M. 1995. Statistical decision-tree models for parsing. In Proceedings of ACL’95, pages 276–283, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell P Marcus</author>
<author>Beatrice Santorini</author>
<author>Mary Ann Marcinkiewicz</author>
</authors>
<title>Building a large annotated corpus of English: The Penn treebank.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<volume>19</volume>
<issue>2</issue>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>Marcus, Mitchell P., Beatrice Santorini, and Mary Ann Marcinkiewicz. 1993. Building a large annotated corpus of English: The Penn treebank. Computational Linguistics, 19(2):313–330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryan McDonald</author>
<author>Kevin Lerman</author>
<author>Fernando Pereira</author>
</authors>
<title>Multilingual dependency analysis with a two-stage discriminative parser.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>216--220</pages>
<location>New York, NY.</location>
<marker>McDonald, Lerman, Pereira, 2006</marker>
<rawString>McDonald, Ryan, Kevin Lerman, and Fernando Pereira. 2006. Multilingual dependency analysis with a two-stage discriminative parser. In Proceedings of CONLL-X, pages 216–220, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
</authors>
<title>An efficient algorithm for projective dependency parsing.</title>
<date>2003</date>
<booktitle>In Proceedings of the 8th International Workshop on Parsing Technologies,</booktitle>
<pages>149--160</pages>
<location>Nancy.</location>
<contexts>
<context position="36747" citStr="Nivre 2003" startWordPosition="5901" endWordPosition="5902">0±0.7 results than using root information (#5). Also, dynamic selection of tags seems to help performance (#3) but using all available inflectional information performs significantly worse possibly due to data sparseness. 5. Classifier-Based Dependency Parser Our second data-driven parser is based on a parsing strategy that has achieved a high parsing accuracy across a variety of different languages (Nivre et al. 2006, 2007). This strategy consists of the combination of the following three techniques: 1. Deterministic parsing algorithms for building dependency graphs (Kudo and Matsumoto 2002; Nivre 2003; Yamada and Matsumoto 2003) Table 3 Unlabeled attachment scores for different choices for morphological features. Model ASU IG-based model # (Dl=1, Dr=1, Hl=0, Hr=1) 72.1±0.3 1 Using major part of speech 71.2±0.2 instead of minor part of speech 2 Using only minor part of speech and 68.3±0.2 no other inflectional features 3 Using minor part of speech for all 71.0±0.3 types of IGs together with case and possessive markers for nominals and possessive marker for adjectives (but no dynamic selection) 4 Using all inflectional features in 46.5±0.4 addition to minor part of speech 5 Adding root infor</context>
<context position="38713" citStr="Nivre (2003" startWordPosition="6206" endWordPosition="6207">an analysis for an input sentence, and efficient, typically deriving this analysis in time that is linear in the length of the sentence. In the following sections, we will first present the parsing methodology and then results that show that the IG-based model again outperforms the word-based model. We will then explore how we can further improve the accuracy by exploiting the advantages of this parser. All experiments are performed using the freely available implementation MaltParser.18 5.1 Methodology For the experiments in this article, we use a variant of the parsing algorithm proposed by Nivre (2003, 2006), a linear-time algorithm that derives a labeled dependency graph in one left-to-right pass over the input, using a stack to store partially processed tokens and a list to store remaining input tokens. However, in contrast to the original arc-eager parsing strategy, we use an arc-standard bottom-up algorithm, as described in Nivre (2004). Like many algorithms used for dependency parsing, this algorithm is restricted to projective dependency graphs. The parser uses two elementary data structures, a stack σ of partially analyzed tokens and an input list τ of remaining input tokens. The pa</context>
<context position="75595" citStr="Nivre (2003)" startWordPosition="12058" endWordPosition="12059">3.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ akıcı and Baldridge (2006), where the authors use the MSTParser (McDonald, Lerman, and Pereira 2006), also used in the CoNLL-X shared task (line 3 in Table 9). Following the work of Eryi˘git and Oflazer (2006) and Nivre et al. (2006), they use the stem informat</context>
</contexts>
<marker>Nivre, 2003</marker>
<rawString>Nivre, Joakim. 2003. An efficient algorithm for projective dependency parsing. In Proceedings of the 8th International Workshop on Parsing Technologies, pages 149–160, Nancy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
</authors>
<title>Incrementality in deterministic dependency parsing.</title>
<date>2004</date>
<booktitle>In Proceedings of the Workshop on Incremental Parsing: Bringing Engineering and Cognition Together,</booktitle>
<pages>50--57</pages>
<location>Barcelona.</location>
<contexts>
<context position="39059" citStr="Nivre (2004)" startWordPosition="6259" endWordPosition="6260">ove the accuracy by exploiting the advantages of this parser. All experiments are performed using the freely available implementation MaltParser.18 5.1 Methodology For the experiments in this article, we use a variant of the parsing algorithm proposed by Nivre (2003, 2006), a linear-time algorithm that derives a labeled dependency graph in one left-to-right pass over the input, using a stack to store partially processed tokens and a list to store remaining input tokens. However, in contrast to the original arc-eager parsing strategy, we use an arc-standard bottom-up algorithm, as described in Nivre (2004). Like many algorithms used for dependency parsing, this algorithm is restricted to projective dependency graphs. The parser uses two elementary data structures, a stack σ of partially analyzed tokens and an input list τ of remaining input tokens. The parser is initialized with an empty stack and with all the tokens of a sentence in the input list; it terminates as soon as the input list is empty. In the following, we use subscripted indices, starting from 0, to refer to particular tokens in σ and τ. Thus, σ0 is the token on top of the stack σ (the top token) and τ0 is the first token in the i</context>
</contexts>
<marker>Nivre, 2004</marker>
<rawString>Nivre, Joakim. 2004. Incrementality in deterministic dependency parsing. In Proceedings of the Workshop on Incremental Parsing: Bringing Engineering and Cognition Together, pages 50–57, Barcelona.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
</authors>
<title>Inductive Dependency Parsing.</title>
<date>2006</date>
<publisher>Springer,</publisher>
<location>Dordrecht.</location>
<contexts>
<context position="19152" citStr="Nivre (2006)" startWordPosition="3008" endWordPosition="3009">he next word while the second parser attaches each word to the final IG of the next word. Obviously these two baseline parsers behave the same when the head word has only one IG. The final punctuation of each sentence is assumed to be the root of the sentence and it is not connected to any head. The first two lines of Table 1 give the unlabeled attachment scores of these parsers. We observe that attaching the link to the first IG instead of the last one gives better results. The third baseline parser is a rule-based parser that uses a modified version of the deterministic parsing algorithm by Nivre (2006). This parsing algorithm, which will be explained in detail in Section 5, is a linear-time algorithm that derives a dependency graph in one left-to-right pass over the input, using a stack to store partially processed tokens and a list to store remaining input tokens in a way similar to a shift-reduce parser. In the rule-based baseline parser, the next parsing action is determined according to 31 predefined hand-written rules (Eryi˘git 2006; Eryi˘git, Adalı, and Oflazer 2006). The rules determine whether or not to connect the units (words or IGs) on top of the stack and at the head of the inpu</context>
</contexts>
<marker>Nivre, 2006</marker>
<rawString>Nivre, Joakim. 2006. Inductive Dependency Parsing. Springer, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
</authors>
<title>Memory-based dependency parsing.</title>
<date>2004</date>
<booktitle>In Proceedings of the Conference on Computational Natural Language Learning,</booktitle>
<pages>49--56</pages>
<location>Boston, MA.</location>
<marker>Nivre, Hall, Nilsson, 2004</marker>
<rawString>Nivre, Joakim, Johan Hall, and Jens Nilsson. 2004. Memory-based dependency parsing. In Proceedings of the Conference on Computational Natural Language Learning, pages 49–56, Boston, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
</authors>
<title>Atanas Chanev, G¨uls¸en Eryi˘git, Sandra K¨ubler, Stetoslav Marinov, and Erwin Marsi.</title>
<date>2007</date>
<journal>Natural Language Engineering Journal,</journal>
<volume>13</volume>
<issue>2</issue>
<contexts>
<context position="73353" citStr="Nivre et al. (2007)" startWordPosition="11681" endWordPosition="11684">se of an automatic morphological analyzer and disambiguator causes a drop in the range of 3 percentage points for unlabeled accuracy and 4 percentage points for labeled accuracy (for both word-based and IG-based models). 10. Related Work The first results on the Turkish Treebank come from Eryi˘git and Oflazer (2006) where the authors used only a subset of the treebank sentences containing exclusively head-final and projective dependencies. The parser used in that paper is a preliminary version of the probabilistic parser used in this article. The first results on the entire treebank appear in Nivre et al. (2007), where the authors use memory-based learning to predict parser actions, and in Eryi˘git, Adalı, and Oflazer (2006), which introduces the rule-based parser used in this article. The Turkish Treebank has recently been parsed by 17 research groups in the CoNLLX shared task on multilingual dependency parsing (Buchholz and Marsi 2006), where it was seen as the most difficult language by the organizers and most of the groups.32 The following quote is taken from Buchholz and Marsi (page 161): “The most difficult data set is clearly the Turkish one. It is rather small, and in contrast to Arabic and S</context>
</contexts>
<marker>Nivre, Hall, Nilsson, 2007</marker>
<rawString>Nivre, Joakim, Johan Hall, Jens Nilsson, Atanas Chanev, G¨uls¸en Eryi˘git, Sandra K¨ubler, Stetoslav Marinov, and Erwin Marsi. 2007. Maltparser: A language-independent system for data-driven dependency parsing. Natural Language Engineering Journal, 13(2):95–135.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
<author>G¨uls¸en Eryi˘git</author>
<author>Stetoslav Marinov</author>
</authors>
<title>Labeled pseudo-projective dependency parsing with support vector machines.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>221--225</pages>
<location>New York, NY.</location>
<marker>Nivre, Hall, Nilsson, Eryi˘git, Marinov, 2006</marker>
<rawString>Nivre, Joakim, Johan Hall, Jens Nilsson, G¨uls¸en Eryi˘git, and Stetoslav Marinov. 2006. Labeled pseudo-projective dependency parsing with support vector machines. In Proceedings of CONLL-X, pages 221–225, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Jens Nilsson</author>
</authors>
<title>Pseudo-projective dependency parsing.</title>
<date>2005</date>
<booktitle>In Proceedings of ACL’05,</booktitle>
<pages>99--106</pages>
<location>Ann Arbor, MI.</location>
<contexts>
<context position="43169" citStr="Nivre and Nilsson (2005)" startWordPosition="6917" endWordPosition="6920">ifier-based parser not only builds dependency structures but also assigns dependency labels, we give ASL scores as well as ASU scores. 19 Experiments have also been performed using memory-based learning (Daelemans and Bosch 2005). They were found to give lower parsing accuracy. 20 Because the frequency of non-projective dependencies in the Turkish Treebank is not high enough to learn such dependencies and mostly due to the unconnected punctuations with which we are dealing by adding an extra dependency label, we did not observe any improvement when applying the pseudo-projective processing of Nivre and Nilsson (2005), which is reported to improve accuracy for other languages. 372 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish 5.2 Experimental Results In this section, our first aim is to confirm the claim that using IGs as the units in parsing improves performance. For this purpose, we start by using models similar to those described in the previous section. We use an unlexicalized feature model where the parser uses only the minor POS and the DEP of tokens and compare the results with the probabilistic parser. We then show in the second part how we can improve accuracy by exploiting the morpho</context>
</contexts>
<marker>Nivre, Nilsson, 2005</marker>
<rawString>Nivre, Joakim and Jens Nilsson. 2005. Pseudo-projective dependency parsing. In Proceedings of ACL’05, pages 99–106, Ann Arbor, MI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Jens Nilsson</author>
<author>Johan Hall</author>
</authors>
<title>Talbanken05: A Swedish treebank with phrase structure and dependency annotation.</title>
<date>2006</date>
<booktitle>In Proceedings of LREC,</booktitle>
<pages>1392--1395</pages>
<location>Genoa.</location>
<contexts>
<context position="36558" citStr="Nivre et al. 2006" startWordPosition="5873" endWordPosition="5876">rameters) ASU WWU Word-based model #1 (Dl=1, Dr=1, Hl=1, Hr=1) 68.1±0.4 77.1±0.7 Word-based model #2 (Dl=1, Dr=1, Hl=1, Hr=1) 68.3±0.3 77.6±0.5 IG-based model (Dl=1, Dr=1, Hl=0, Hr=1) 72.1±0.3 79.0±0.7 results than using root information (#5). Also, dynamic selection of tags seems to help performance (#3) but using all available inflectional information performs significantly worse possibly due to data sparseness. 5. Classifier-Based Dependency Parser Our second data-driven parser is based on a parsing strategy that has achieved a high parsing accuracy across a variety of different languages (Nivre et al. 2006, 2007). This strategy consists of the combination of the following three techniques: 1. Deterministic parsing algorithms for building dependency graphs (Kudo and Matsumoto 2002; Nivre 2003; Yamada and Matsumoto 2003) Table 3 Unlabeled attachment scores for different choices for morphological features. Model ASU IG-based model # (Dl=1, Dr=1, Hl=0, Hr=1) 72.1±0.3 1 Using major part of speech 71.2±0.2 instead of minor part of speech 2 Using only minor part of speech and 68.3±0.2 no other inflectional features 3 Using minor part of speech for all 71.0±0.3 types of IGs together with case and posse</context>
<context position="74376" citStr="Nivre et al. 2006" startWordPosition="11852" endWordPosition="11855">most of the groups.32 The following quote is taken from Buchholz and Marsi (page 161): “The most difficult data set is clearly the Turkish one. It is rather small, and in contrast to Arabic and Slovene, which are equally small or smaller, it covers 8 genres, which results in a high percentage of new FORM and LEMMA values in the test set.” The results for Turkish are given in Table 9. Our classifier-based parser obtained the best results for Turkish (with ASU=75.8 and ASL=65.7) and also for Japanese, which is the only agglutinative and head-final language in the shared task other than Turkish (Nivre et al. 2006). The groups were asked to find the correct IG-to-IG dependency links. When we look at the results, we observe that most of the best performing parsers use 32 The Turkish data used in the shared task is actually a modified version of the treebank used in this article; some conversions are made on punctuation structures in order to keep consistency between all languages. 384 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish Table 9 CoNLL-X shared task results on Turkish (taken from Table 5 in Buchholz and Marsi [2006]). Teams ASU ASL Nivre et al. (2006) 75.8 65.7 Johansson and Nugues (</context>
<context position="76167" citStr="Nivre et al. (2006)" startWordPosition="12154" endWordPosition="12157">rsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ akıcı and Baldridge (2006), where the authors use the MSTParser (McDonald, Lerman, and Pereira 2006), also used in the CoNLL-X shared task (line 3 in Table 9). Following the work of Eryi˘git and Oflazer (2006) and Nivre et al. (2006), they use the stem information and the case information for nominals and they also report an increase in performance by using these features. Similar to one of the models (“INF as a single feature”) in Eryi˘git, Nivre, and Oflazer (2006), where the feature names of the suffixes provided by the morphological analyzer are concatenated and used as a feature to the classifier, they use the surface forms of the suffixes as a whole. We can say that the models in this article cover this approach in that each suffix is used as a single feature name (which is shown to perform better than using them co</context>
</contexts>
<marker>Nivre, Nilsson, Hall, 2006</marker>
<rawString>Nivre, Joakim, Jens Nilsson, and Johan Hall. 2006. Talbanken05: A Swedish treebank with phrase structure and dependency annotation. In Proceedings of LREC, pages 1392–1395, Genoa.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kemal Oflazer</author>
</authors>
<title>Two-level description of Turkish morphology.</title>
<date>1994</date>
<journal>Literary and Linguistic Computing,</journal>
<volume>9</volume>
<issue>2</issue>
<contexts>
<context position="69017" citStr="Oflazer (1994)" startWordPosition="10984" endWordPosition="10985">le +Noun+A3sg+P1sg+Acc (‘my castle’ in accusative form) kalem +Noun+A3sg+P3sg+Nom (‘his pencil’) kalem +Noun+A3sg+Pnon+Acc (‘the pencil’ in accusative form) asmadan as +Verb+Pos DB +Adverb+WithoutHavingDoneSo (‘without having hanged (it)’) as +Verb+Pos DB +Noun+Inf2+A3sg+Pnon+Abl (‘from hanging (it)’) asma +Noun+A3sg+Pnon+Abl (‘from the vine’) The task of the morphological disambiguator is to choose one of the possible morphological analyses and thus to find the correct inflectional features including parts of speech, and the IG structure. We first used the two-level morphological analyzer of Oflazer (1994) to analyze all the words in the treebank.29 This morphological analyzer simultaneously produces the IG segmentation and the relevant features encoded in all analyses of a word form. We then used the morphological disambiguator of Y¨uret and T¨ure (2006), which has a reported accuracy of 96% for Turkish. When tested on our treebank data, the accuracy of the morphological disambiguator is 88.4%, including punctuation (which is unambiguous) and using a lookup table for the words that are not recognized by the morphological analyzer.30 The lower accuracy of the morphological disambiguator on the </context>
</contexts>
<marker>Oflazer, 1994</marker>
<rawString>Oflazer, Kemal. 1994. Two-level description of Turkish morphology. Literary and Linguistic Computing, 9(2):137–148.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kemal Oflazer</author>
</authors>
<title>Dependency parsing with an extended finite-state approach.</title>
<date>2003</date>
<journal>Computational Linguistics,</journal>
<volume>29</volume>
<issue>4</issue>
<contexts>
<context position="9131" citStr="Oflazer 2003" startWordPosition="1341" endWordPosition="1342">text (Erguvanlı 1979; Hoffman 1994). However, from a dependency structure point of view, Turkish is predominantly (but not exclusively) head final. Turkish has a very rich agglutinative morphological structure. Nouns can give rise to about 100 inflected forms and verbs to many more. Furthermore, Turkish words may be formed through very productive derivations, increasing substantially the number of possible word forms that can be generated from a root word. It is not uncommon to find up to four or five derivations in a single word. Previous work on Turkish (HakkaniT¨ur, Oflazer, and T¨ur 2002; Oflazer 2003; Oflazer et al. 2003; Eryi˘git and Oflazer 2006) has represented the morphological structure of Turkish words by splitting them into inflectional groups (IGs). The root and derivational elements of a word are represented 1 We, however, do not necessarily suggest that the morphological sublexical representation that we use for Turkish later in this article is applicable to these languages. 359 Computational Linguistics Volume 34, Number 3 by different IGs, separated from each other by derivational boundaries (DB). Each IG is then annotated with its own part of speech and any inflectional featu</context>
</contexts>
<marker>Oflazer, 2003</marker>
<rawString>Oflazer, Kemal. 2003. Dependency parsing with an extended finite-state approach. Computational Linguistics, 29(4):515–544.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kemal Oflazer</author>
<author>Bilge Say</author>
<author>Dilek Z Hakkani-T¨ur</author>
<author>G¨okhan T¨ur</author>
</authors>
<title>Building a Turkish treebank.</title>
<date>2003</date>
<booktitle>Treebanks: Building and Using Parsed Corpora.</booktitle>
<pages>261--277</pages>
<editor>In A. Abeill´e, editor,</editor>
<publisher>Kluwer,</publisher>
<location>London,</location>
<marker>Oflazer, Say, Hakkani-T¨ur, T¨ur, 2003</marker>
<rawString>Oflazer, Kemal, Bilge Say, Dilek Z. Hakkani-T¨ur, and G¨okhan T¨ur. 2003. Building a Turkish treebank. In A. Abeill´e, editor, Treebanks: Building and Using Parsed Corpora. Kluwer, London, pages 261–277.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Adwait Ratnaparkhi</author>
</authors>
<title>A linear observed time statistical parser based on maximum entropy models.</title>
<date>1997</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>1--10</pages>
<location>Providence, RI.</location>
<contexts>
<context position="37658" citStr="Ratnaparkhi 1997" startWordPosition="6043" endWordPosition="6044"> other inflectional features 3 Using minor part of speech for all 71.0±0.3 types of IGs together with case and possessive markers for nominals and possessive marker for adjectives (but no dynamic selection) 4 Using all inflectional features in 46.5±0.4 addition to minor part of speech 5 Adding root information to the best 53.7±0.2 performing IG-based model 6 Adding surface form information to the best 54.4±0.2 performing IG-based model 370 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish 2. History-based models for predicting the next parser action (Black et al. 1992; Magerman 1995; Ratnaparkhi 1997; Collins 1999) 3. Discriminative classifiers to map histories to parser actions (Kudo and Matsumoto 2002; Yamada and Matsumoto 2003; Nivre, Hall, and Nilsson 2004) A system of this kind employs no grammar but relies completely on inductive learning from treebank data for the analysis of new sentences, and on deterministic parsing for disambiguation. This combination of methods guarantees that the parser is robust, never failing to produce an analysis for an input sentence, and efficient, typically deriving this analysis in time that is linear in the length of the sentence. In the following se</context>
</contexts>
<marker>Ratnaparkhi, 1997</marker>
<rawString>Ratnaparkhi, Adwait. 1997. A linear observed time statistical parser based on maximum entropy models. In Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 1–10, Providence, RI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sebastian Riedel</author>
<author>Ruket C¸ akıcı</author>
<author>Ivan Meza-Ruiz</author>
</authors>
<title>Multi-lingual dependency parsing with incremental integer linear programming.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>226--230</pages>
<location>New York, NY.</location>
<marker>Riedel, akıcı, Meza-Ruiz, 2006</marker>
<rawString>Riedel, Sebastian, Ruket C¸ akıcı, and Ivan Meza-Ruiz. 2006. Multi-lingual dependency parsing with incremental integer linear programming. In Proceedings of CONLL-X, pages 226–230, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenji Sagae</author>
<author>Alon Lavie</author>
</authors>
<title>A classifier-based parser with linear run-time complexity.</title>
<date>2005</date>
<booktitle>In Proceedings of the 9th International Workshop on Parsing Technologies,</booktitle>
<pages>125--132</pages>
<location>Vancouver.</location>
<contexts>
<context position="41702" citStr="Sagae and Lavie (2005)" startWordPosition="6699" endWordPosition="6702">ble for a given token are the following: • Lexical form (root) (LEX) • Part-of-speech category (POS) • Inflectional features (INF) • Dependency type to the head if available (DEP) To predict parser actions from histories, represented as feature vectors, we use support vector machines (SVMs), which combine the maximum margin strategy introduced by Vapnik (1995) with the use of kernel functions to map the original feature space to a higher-dimensional space. This type of classifier has been used successfully in deterministic parsing by Kudo and Matsumoto (2002), Yamada and Matsumoto (2003), and Sagae and Lavie (2005), among others. To be more specific, we use the LIBSVM library for SVM learning (Chang and Lin 2001), with a polynomial kernel of degree 2, with binarization of symbolic features, and with the one-versus-one strategy for multiclass classification.19 This approach has some advantages over the probabilistic parser, in that • it can process both left-to-right and right-to-left dependencies due to its parsing algorithm, • it assigns dependency labels simultaneously with dependencies and can use these as features in the history-based model, and • it does not necessarily require expert knowledge abo</context>
</contexts>
<marker>Sagae, Lavie, 2005</marker>
<rawString>Sagae, Kenji and Alon Lavie. 2005. A classifier-based parser with linear run-time complexity. In Proceedings of the 9th International Workshop on Parsing Technologies, pages 125–132, Vancouver.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Schiehlen</author>
<author>Kristina Spranger</author>
</authors>
<title>Language independent probabilistic context-free parsing bolstered by machine learning.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>231--235</pages>
<location>New York, NY.</location>
<contexts>
<context position="75429" citStr="Schiehlen and Spranger (2006)" startWordPosition="12027" endWordPosition="12030"> of Turkish Table 9 CoNLL-X shared task results on Turkish (taken from Table 5 in Buchholz and Marsi [2006]). Teams ASU ASL Nivre et al. (2006) 75.8 65.7 Johansson and Nugues (2006) 73.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ akıcı and Baldridge (2006), where the authors use the MSTParser (McDonald, Lerman, and Pereira </context>
</contexts>
<marker>Schiehlen, Spranger, 2006</marker>
<rawString>Schiehlen, Michael and Kristina Spranger. 2006. Language independent probabilistic context-free parsing bolstered by machine learning. In Proceedings of CONLL-X, pages 231–235, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Satoshi Sekine</author>
<author>Kiyotaka Uchimoto</author>
<author>Hitoshi Isahara</author>
</authors>
<title>Backward beam search algorithm for dependency analysis of Japanese.</title>
<date>2000</date>
<booktitle>In Proceedings of the 17th International Conference on Computational Linguistics,</booktitle>
<pages>754--760</pages>
<marker>Sekine, Uchimoto, Isahara, 2000</marker>
<rawString>Sekine, Satoshi, Kiyotaka Uchimoto, and Hitoshi Isahara. 2000. Backward beam search algorithm for dependency analysis of Japanese. In Proceedings of the 17th International Conference on Computational Linguistics, pages 754–760, Saarbr¨ucken.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nobuyuki Shimizu</author>
</authors>
<title>Maximum spanning tree algorithm for non-projective labeled dependency parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>236--240</pages>
<location>New York, NY.</location>
<contexts>
<context position="75334" citStr="Shimizu (2006)" startWordPosition="12013" endWordPosition="12014">tency between all languages. 384 Eryi˘git, Nivre, and Oflazer Dependency Parsing of Turkish Table 9 CoNLL-X shared task results on Turkish (taken from Table 5 in Buchholz and Marsi [2006]). Teams ASU ASL Nivre et al. (2006) 75.8 65.7 Johansson and Nugues (2006) 73.6 63.4 McDonald, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ </context>
</contexts>
<marker>Shimizu, 2006</marker>
<rawString>Shimizu, Nobuyuki. 2006. Maximum spanning tree algorithm for non-projective labeled dependency parsing. In Proceedings of CONLL-X, pages 236–240, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kiril Simov</author>
<author>Gergana Popova</author>
<author>Petya Osenova</author>
</authors>
<title>HPSG-based syntactic treebank of Bulgarian (BulTreeBank).</title>
<date>2002</date>
<booktitle>A Rainbow of Corpora: Corpus Linguistics and the Languages of the World. Lincom-Europa,</booktitle>
<pages>135--142</pages>
<editor>In Andrew Wilson, Paul Rayson, and Tony McEnery, editors,</editor>
<location>Munich,</location>
<marker>Simov, Popova, Osenova, 2002</marker>
<rawString>Simov, Kiril, Gergana Popova, and Petya Osenova. 2002. HPSG-based syntactic treebank of Bulgarian (BulTreeBank). In Andrew Wilson, Paul Rayson, and Tony McEnery, editors, A Rainbow of Corpora: Corpus Linguistics and the Languages of the World. Lincom-Europa, Munich, pages 135–142.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Vladimir N Vapnik</author>
</authors>
<title>The Nature of Statistical Learning Theory.</title>
<date>1995</date>
<publisher>Springer,</publisher>
<location>New York, NY.</location>
<contexts>
<context position="41442" citStr="Vapnik (1995)" startWordPosition="6660" endWordPosition="6661">kens. In addition to the target tokens, features can be based on neighboring tokens, both on the stack and in the remaining input, as well as dependents or heads of these tokens in the partially built dependency graph. The linguistic attributes available for a given token are the following: • Lexical form (root) (LEX) • Part-of-speech category (POS) • Inflectional features (INF) • Dependency type to the head if available (DEP) To predict parser actions from histories, represented as feature vectors, we use support vector machines (SVMs), which combine the maximum margin strategy introduced by Vapnik (1995) with the use of kernel functions to map the original feature space to a higher-dimensional space. This type of classifier has been used successfully in deterministic parsing by Kudo and Matsumoto (2002), Yamada and Matsumoto (2003), and Sagae and Lavie (2005), among others. To be more specific, we use the LIBSVM library for SVM learning (Chang and Lin 2001), with a polynomial kernel of degree 2, with binarization of symbolic features, and with the one-versus-one strategy for multiclass classification.19 This approach has some advantages over the probabilistic parser, in that • it can process </context>
</contexts>
<marker>Vapnik, 1995</marker>
<rawString>Vapnik, Vladimir N. 1995. The Nature of Statistical Learning Theory. Springer, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yu-Chieh Wu</author>
<author>Yue-Shi Lee</author>
<author>Jie-Chi Yang</author>
</authors>
<title>The exploration of deterministic and efficient dependency parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>241--245</pages>
<location>New York, NY.</location>
<marker>Wu, Lee, Yang, 2006</marker>
<rawString>Wu, Yu-Chieh, Yue-Shi Lee, and Jie-Chi Yang. 2006. The exploration of deterministic and efficient dependency parsing. In Proceedings of CONLL-X, pages 241–245, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hiroyasu Yamada</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Statistical dependency analysis with support vector machines.</title>
<date>2003</date>
<booktitle>In Proceedings of the 8th International Workshop on Parsing Technologies,</booktitle>
<pages>195--206</pages>
<location>Nancy.</location>
<contexts>
<context position="36775" citStr="Yamada and Matsumoto 2003" startWordPosition="5903" endWordPosition="5906">s than using root information (#5). Also, dynamic selection of tags seems to help performance (#3) but using all available inflectional information performs significantly worse possibly due to data sparseness. 5. Classifier-Based Dependency Parser Our second data-driven parser is based on a parsing strategy that has achieved a high parsing accuracy across a variety of different languages (Nivre et al. 2006, 2007). This strategy consists of the combination of the following three techniques: 1. Deterministic parsing algorithms for building dependency graphs (Kudo and Matsumoto 2002; Nivre 2003; Yamada and Matsumoto 2003) Table 3 Unlabeled attachment scores for different choices for morphological features. Model ASU IG-based model # (Dl=1, Dr=1, Hl=0, Hr=1) 72.1±0.3 1 Using major part of speech 71.2±0.2 instead of minor part of speech 2 Using only minor part of speech and 68.3±0.2 no other inflectional features 3 Using minor part of speech for all 71.0±0.3 types of IGs together with case and possessive markers for nominals and possessive marker for adjectives (but no dynamic selection) 4 Using all inflectional features in 46.5±0.4 addition to minor part of speech 5 Adding root information to the best 53.7±0.2 </context>
<context position="41674" citStr="Yamada and Matsumoto (2003)" startWordPosition="6694" endWordPosition="6697"> The linguistic attributes available for a given token are the following: • Lexical form (root) (LEX) • Part-of-speech category (POS) • Inflectional features (INF) • Dependency type to the head if available (DEP) To predict parser actions from histories, represented as feature vectors, we use support vector machines (SVMs), which combine the maximum margin strategy introduced by Vapnik (1995) with the use of kernel functions to map the original feature space to a higher-dimensional space. This type of classifier has been used successfully in deterministic parsing by Kudo and Matsumoto (2002), Yamada and Matsumoto (2003), and Sagae and Lavie (2005), among others. To be more specific, we use the LIBSVM library for SVM learning (Chang and Lin 2001), with a polynomial kernel of degree 2, with binarization of symbolic features, and with the one-versus-one strategy for multiclass classification.19 This approach has some advantages over the probabilistic parser, in that • it can process both left-to-right and right-to-left dependencies due to its parsing algorithm, • it assigns dependency labels simultaneously with dependencies and can use these as features in the history-based model, and • it does not necessarily </context>
<context position="75627" citStr="Yamada and Matsumoto (2003)" startWordPosition="12061" endWordPosition="12064">, Lerman, and Pereira (2006) 74.7 63.2 Corston-Oliver and Aue (2006) 73.1 61.7 Cheng, Asahara, and Matsumoto (2006) 74.5 61.2 Chang, Do, and Roth (2006) 73.2 60.5 Y¨uret (2006) 71.5 60.3 Riedel, C¸ akıcı, and Meza-Ruiz (2006) 74.1 58.6 Carreras, Surdeanu, and Marquez (2006) 70.1 58.1 Wu, Lee, and Yang (2006) 69.3 55.1 Shimizu (2006) 68.8 54.2 Bick (2006) 65.5 53.9 Canisius et al. (2006) 64.2 51.1 Schiehlen and Spranger (2006) 61.6 49.8 Dreyer, Smith, and Smith (2006) 60.5 46.1 Liu et al. (2006) 56.9 41.7 Attardi (2006) 65.3 37.8 one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto (2003) together with a learning method based on the maximum margin strategy. We can also see that a common property of the parsers which fall below the average (ASL=55.4) is that they do not make use of inflectional features, which is crucial for 33 Turkish. Another recent study that has promising results is C¸ akıcı and Baldridge (2006), where the authors use the MSTParser (McDonald, Lerman, and Pereira 2006), also used in the CoNLL-X shared task (line 3 in Table 9). Following the work of Eryi˘git and Oflazer (2006) and Nivre et al. (2006), they use the stem information and the case information for</context>
</contexts>
<marker>Yamada, Matsumoto, 2003</marker>
<rawString>Yamada, Hiroyasu and Yuji Matsumoto. 2003. Statistical dependency analysis with support vector machines. In Proceedings of the 8th International Workshop on Parsing Technologies, pages 195–206, Nancy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Deniz Y¨uret</author>
</authors>
<title>Dependency parsing as a classification problem.</title>
<date>2006</date>
<booktitle>In Proceedings of CONLL-X,</booktitle>
<pages>246--250</pages>
<location>New York, NY.</location>
<marker>Y¨uret, 2006</marker>
<rawString>Y¨uret, Deniz. 2006. Dependency parsing as a classification problem. In Proceedings of CONLL-X, pages 246–250, New York, NY.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Deniz Y¨uret</author>
<author>Ferhan T¨ure</author>
</authors>
<title>Learning morphological disambiguation rules for Turkish.</title>
<date>2006</date>
<booktitle>In Proceedings of HLT/NAACL’06,</booktitle>
<pages>328--334</pages>
<location>New York, NY.</location>
<marker>Y¨uret, T¨ure, 2006</marker>
<rawString>Y¨uret, Deniz and Ferhan T¨ure. 2006. Learning morphological disambiguation rules for Turkish. In Proceedings of HLT/NAACL’06, pages 328–334, New York, NY.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>