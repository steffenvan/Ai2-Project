<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.007199">
<title confidence="0.980469">
Computational properties of environment-based disambiguation
</title>
<author confidence="0.998553">
William Schuler
</author>
<affiliation confidence="0.998357">
Department of Computer and Information Science
University of Pennsylvania
</affiliation>
<address confidence="0.792326">
Philadelphia, PA 19103
</address>
<email confidence="0.999118">
schuler@linc.cis.upenn.edu
</email>
<sectionHeader confidence="0.993902" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99988235">
The standard pipeline approach to se-
mantic processing, in which sentences
are morphologically and syntactically
resolved to a single tree before they
are interpreted, is a poor fit for ap-
plications such as natural language in-
terfaces. This is because the environ-
ment information, in the form of the ob-
jects and events in the application’s run-
time environment, cannot be used to in-
form parsing decisions unless the in-
put sentence is semantically analyzed,
but this does not occur until after pars-
ing in the single-tree semantic architec-
ture. This paper describes the compu-
tational properties of an alternative ar-
chitecture, in which semantic analysis
is performed on all possible interpre-
tations during parsing, in polynomial
time.
</bodyText>
<sectionHeader confidence="0.999134" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.995527567307693">
Shallow semantic processing applications, com-
paring argument structures to search patterns
or filling in simple templates, can achieve re-
spectable results using the standard ‘pipeline’ ap-
proach to semantics, in which sentences are mor-
phologically and syntactically resolved to a single
tree before being interpreted. Putting disambigua-
tion ahead of semantic evaluation is reasonable in
these applications because they are primarily run
on content like newspaper text or dictated speech,
where no machine-readable contextual informa-
tion is readily available to provide semantic guid-
ance for disambiguation.
This single-tree semantic architecture is a poor
fit for applications such as natural language inter-
faces however, in which a large amount of contex-
tual information is available in the form of the ob-
jects and events in the application’s run-time en-
vironment. This is because the environment infor-
mation cannot be used to inform parsing and dis-
ambiguation decisions unless the input sentence
is semantically analyzed, but this does not occur
until after parsing in the single-tree architecture.
Assuming that no current statistical disambigua-
tion technique is so accurate that it could not ben-
efit from this kind of environment-based informa-
tion (if available), then it is important that the se-
mantic analysis in an interface architecture be ef-
ficiently performed during parsing.
This paper describes the computational prop-
erties of one such architecture, embedded within
a system for giving various kinds of conditional
instructions and behavioral constraints to virtual
human agents in a 3-D simulated environment
(Bindiganavale et al., 2000). In one application
of this system, users direct simulated maintenance
personnel to repair a jet engine, in order to ensure
that the maintenance procedures do not risk the
safety of the people performing them. Since it is
expected to process a broad range of maintenance
instructions, the parser is run on a large subset
of the Xtag English grammar (XTAG Research
Group, 1998), which has been annotated with lex-
ical semantic classes (Kipper et al., 2000) associ-
ated with the objects, states, and processes in the
maintenance simulation. Since the grammar has
several thousand lexical entries, the parser is ex-
posed to considerable lexical and structural ambi-
guity as a matter of course.
The environment-based disambiguation archi-
tecture described in this paper has much in
common with very early environment-based ap-
proaches, such as those described by Winograd
(Winograd, 1972), in that it uses the actual en-
tities in an environment database to resolve am-
biguity in the input. This research explores two
extensions to the basic approach however:
1. It incorporates ideas from type theory to rep-
resent a broad range of linguistic phenomena
in a manner for which their extensions or po-
tential referents in the environment are well-
defined in every case. This is elaborated in
Section 2.
2. It adapts the concept of structure sharing,
taken from the study of parsing, not only to
translate the many possible interpretations of
ambiguous sentences into shared logical ex-
pressions, but also to evaluate these sets of
potential referents, over all possible interpre-
tations, in polynomial time. This is elabo-
rated in Section 3.
Taken together, these extensions allow interfaced
systems to evaluate a broad range of natural lan-
guage inputs – including those containing NP/VP
attachment ambiguity and verb sense ambiguity
– in a principled way, simply based on the ob-
jects and events in the systems’ environments.
For example, such a system would be able to cor-
rectly answer ‘Did someone stop the test at 3:00?’
and resolve the ambiguity in the attachment of ‘at
3:00’ just from the fact that there aren’t any 3:00
tests in the environment, only an event where one
stops at 3:00.1 Because it evaluates instructions
before attempting to choose a single interpreta-
tion, the interpreter can avoid getting ‘stranded’
by disambiguation errors in earlier phases of anal-
ysis.
The main challenge of this approach is that it
requires the efficient calculation of the set of ob-
jects, states, or processes in the environment that
each possible sub-derivation of an input sentence
could refer to. A semantic interpreter could al-
ways be run on an (exponential) enumerated set
of possible parse trees as a post-process, to fil-
ter out those interpretations which have no en-
vironment referents, but recomputing the poten-
tial environment referents for every tree would re-
quire an enormous amount of time (particularly
for broad coverage grammars such as the one em-
ployed here). The primary result of this paper is
therefore a method of containing the time com-
plexity of these calculations to lie within the com-
plexity of parsing (i.e. within for a context-
free grammar, where is the number of words
</bodyText>
<footnote confidence="0.96102875">
1It is important to make a distinction between this envi-
ronment information, which just describes the set of objects
and events that exist in the interfaced application, and what
is often called domain information, which describes (usually
via hand-written rules) the kinds of objects and events can
exist in the interfaced application. The former comes for free
with the application, while the latter can be very expensive
to create and port between domains.
</footnote>
<bodyText confidence="0.996559">
in the input sentence), without sacrificing logi-
cal correctness, in order to make environment-
based interpretation tractable for interactive appli-
cations.
</bodyText>
<sectionHeader confidence="0.501456" genericHeader="method">
2 Representation of referents
</sectionHeader>
<bodyText confidence="0.993262454545454">
Existing environment-based methods (such as
those proposed by Winograd) only calculate the
referents of noun phrases, so they only consult the
objects in an environment database when inter-
preting input sentences. But the evaluation of am-
biguous sentences will be incomplete if the refer-
ents for verb phrases and other predicates are not
calculated. In order to evaluate the possible inter-
pretations of a sentence, as described in the previ-
ous section, an interface needs to define referent
sets for every possible constituent.2
The proposed solution draws on a theory of
constituent types from formal linguistic seman-
tics, in which constituents such as nouns and verb
phrases are represented as composeable functions
that take entitiess or situations as inputs and ulti-
mately return a truth value for the sentence. Fol-
lowing a straightforward adaptation of standard
type theory, common nouns (functions from en-
tities to truth values) define potential referent sets
of simple environment entities: ,
and sentences (functions from situations or world
states to truth values) define potential referent sets
of situations in which those sentences hold true:
. Depending on the needs of the
application, these situations can be represented
as intervals along a time line (Allen and Fergu-
son, 1994), or as regions in a three-dimensional
space (Xu and Badler, 2000), or as some com-
bination of the two, so that they can be con-
strained by modifiers that specify the situations’
times and locations. Referents for other types
of phrases may be expressed as tuples of enti-
ties and situations: one for each argument of the
corresponding logical function’s input (with the
presence or absence of the tuple representing the
boolean output). For example, adjectives, prepo-
sitional phrases, and relative clauses, which are
typically represented as situationally-dependent
properties (functions from situations and entities
2This is not strictly true, as referent sets for constituents
like determiners are difficult to define, and others (particu-
larly those of quantifiers) will be extremely large until com-
posed with modifiers and arguments. Fortunately, as long
as there is a bound on the height in the tree to which the
evaluation of referent sets can be deferred (e.g. after the first
composition), the claimed polynomial complexity of refer-
ent annotation will not be lost.
to truth values) define potential referent sets of tu-
ples that consist of one entity and one situation:
. This represen-
tation can be extended to treat common nouns
as situationally-dependent properties as well, in
order to handle sets like ‘bachelors’ that change
their membership over time.
</bodyText>
<sectionHeader confidence="0.9506295" genericHeader="method">
3 Sharing referents across
interpretations
</sectionHeader>
<bodyText confidence="0.999867880434783">
Any method for using the environment to guide
the interpretation of natural language sentences
requires a tractable representation of the many
possible interpretations of each input. The
representation described here is based on the
polynomial-sized chart produced by any dynamic
programming recognition algorithm.
A record of the derivation paths in any dy-
namic programming recognition algorithm (such
as CKY (Cocke and Schwartz, 1970; Kasami,
1965; Younger, 1967) or Earley (Earley, 1970))
can be interpreted as a polynomial sized and-
or graph with space complexity equal to the
time complexity of recognition, whose disjunc-
tive nodes represent possible constituents in the
analysis, and whose conjunctive nodes represent
binary applications of rules in the grammar. This
is called a shared forest of parse trees, because it
can represent an exponential number of possible
parses using a polynomial number of nodes which
are shared between alternative analyses (Tomita,
1985; Billot and Lang, 1989), and can be con-
structed and traversed in time of the same com-
plexity (e.g. for context free grammars).
For example, the two parse trees for the noun
phrase ‘button on handle beside adapter’ shown
in Figure 1 can be merged into the single shared
forest in Figure 2 without any loss of information.
These shared syntactic structures can further
be associated with compositional semantic func-
tions that correspond to the syntactic elements
in the forest, to create a shared forest of trees
each representing a complete expression in some
logical form. This extended sharing is similar
to the ‘packing’ approach employed in the Core
Language Engine (Alshawi, 1992), except that
the CLE relies on a quasi-logical form to under-
specify semantic information such as quantifier
scope (the calculation of which is deferred un-
til syntactic ambiguities have been at least par-
tially resolved by other means); whereas the ap-
proach described here extends structure sharing to
incorporate a certain amount of quantifier scope
ambiguity in order to allow a complete eval-
uation of all subderivations in a shared forest
before making any disambiguation decisions in
syntax.3 Various synchronous formalisms have
been introduced for associating syntactic repre-
sentations with logical functions in isomorphic
or locally non-isomorphic derivations, includ-
ing Categorial Grammars (CGs) (Wood, 1993),
Synchronous Tree Adjoining Grammars (TAGs)
(Joshi, 1985; Shieber and Schabes, 1990; Shieber,
1994), and Synchronous Description Tree Gram-
mars (DTGs) (Rambow et al., 1995; Rambow and
Satta, 1996). Most of these formalisms can be ex-
tended to define semantic associations over entire
shared forests, rather than merely over individual
parse trees, in a straightforward manner, preserv-
ing the ambiguity of the syntactic forest without
exceeding its polynomial size, or the polynomial
time complexity of creating or traversing it.
Since one of the goals of this architecture is
to use the system’s representation of its environ-
ment to resolve ambiguity in its instructions, a
space-efficient shared forest of logical functions
will not be enough. The system must also be able
to efficiently calculate the sets of potential refer-
ents in the environment for every subexpression in
this forest. Fortunately, since the logical function
forest shares structure between alternative anal-
yses, many of the sets of potential referents can
be shared between analyses during evaluation as
well. This has the effect of building a third shared
forest of potential referent sets (another and-or
graph, isomorphic to the logical function forest
and with the same polynomial complexity), where
every conjunctive node represents the results of
applying a logical function to the elements in that
node’s child sets, and every disjunctive node rep-
resents the union of all the potential referents in
that node’s child sets. The presence or absence
of these environment referents at various nodes
in the shared forest can be used to choose a vi-
able parse tree from the forest, or to evaluate the
truth or falsity of the input sentence without dis-
ambiguating it (by checking the presence or lack
of referents at the root of the forest).
For example, the noun phrase ‘button on han-
dle beside adapter’ has at least two possible in-
terpretations, represented by the two trees in Fig-
ure 1: one in which a button is on a handle and
</bodyText>
<footnote confidence="0.85929825">
3A similar basis on (at least partially) disambiguated syn-
tactic representations makes similar underspecified semantic
representations such as hole semantics (Bos, 1995) ill-suited
for environment-based syntactic disambiguation.
</footnote>
<figure confidence="0.999002470588235">
NP[button]
PP[on]
NP[handle]
PP[beside]
NP[button]
P[on]
NP[handle]
P[beside] NP[adapter]
NP[button]
NP[button]
P[beside]
NP[adapter]
NP[button]
NP[handle]
P[on]
PP[on]
PP[beside]
</figure>
<figureCaption confidence="0.999057">
Figure 1: Example parse trees for ‘button on handle beside adapter’
</figureCaption>
<figure confidence="0.999542545454545">
NP[button]
NP[button]
NP[button]
P[on]
PP[on]
NP[handle]
PP[on]
NP[handle]
P[beside]
PP[beside]
NP[adapter]
</figure>
<figureCaption confidence="0.999824">
Figure 2: Example shared forest for “button on handle beside adapter”
</figureCaption>
<bodyText confidence="0.999965612244898">
the handle (but not necessarily the button) is be-
side an adapter, and the other in which a button is
on a handle and the button (but not necessarily the
handle) is beside an adapter. The semantic func-
tions are annotated just below the syntactic cat-
egories, and the potential environment referents
are annotated just below the semantic functions
in the figure. Because there are no handles next
to adapters in the environment (only buttons next
to adapters), the first interpretation has no envi-
ronment referents at its root, so this analysis is
dispreferred if it occurs within the analysis of a
larger sentence. The second interpretation does
have potential environment referents all the way
up to the root (there is a button on a handle which
is also beside an adapter), so this analysis is pre-
ferred if it occurs within the analysis of a larger
sentence.
The shared forest representation effectively
merges the enumerated set of parse trees into a
single data structure, and unions the referent sets
of the nodes in these trees that have the same la-
bel and cover the same span in the string yield
(such as the root node, leaves, and the PP cover-
ing ‘beside adapter’ in the examples above). The
referent-annotated forest for this sentence there-
fore looks like the forest in Figure 2, in which the
sets of buttons, handles, and adapters, as well as
the set of things beside adapters, are shared be-
tween the two alternative interpretations. If there
is a button next to an adapter, but no handle next
to an adapter, the tree representing ‘handle beside
adapter’ as a constituent may be dispreferred in
disambiguation, but the NP constituent at the root
is still preferred because it has potential referents
in the environment due to the other interpretation.
The logical function at each node is defined
over the referent sets of that node’s immediate
children. Nodes that represent the attachment of
a modifier with referent set to a relation with
referent set produce referent sets of the form:
Nodes in a logical function forest that represent
the attachment of an argument with referent set
to a relation with referent set produce referent
sets of the form:
effectively stripping off one of the objects in each
tuple if the object is also found in the set of refer-
ents for the argument.4 This is a direct application
of standard type theory to the calculation of ref-
</bodyText>
<footnote confidence="0.576802428571429">
4In order to show where the referents came from, the tu-
ple objects are not stripped off in Figures 1 and 2. Instead,
an additional bar is added to the function name to designate
the effective last object in each tuple: the tuple ref-
erenced by has as the last element, but the tuple
referenced by actually has as the last element
since the complement has been already been attached.
</footnote>
<figure confidence="0.997248571428571">
VP[drained]
VP[drained]
VP[drained]
P[after]
. . .
PP[after]
NP[test]
PP[after]
NP[test]
P[at]
. . .
PP[at]
NP[3:00]
constant
</figure>
<figureCaption confidence="0.999949">
Figure 3: Example shared forest for verb phrase “drained after test at 3:00”
</figureCaption>
<bodyText confidence="0.998799277777777">
erent sets: modifiers take and return functions of
the same type, and arguments must satisfy one of
the input types of an applied function.
Since both of these ‘referent set composition’
operations at the conjunctive nodes – as well as
the union operation at the disjunctive nodes – are
linear in space and time on the number of ele-
ments in each of the composed sets (assuming the
sets are sorted in advance and remain so), the cal-
culation of referent sets only adds a factor of
to the size complexity of the forest and the time
complexity of processing it, where is the num-
ber of objects and events in the run-time environ-
ment. Thus, the total space and time complexity
of the above algorithm (on a context-free forest) is
. If other operations are added, the com-
plexity of referent set composition will be limited
by the least efficient operation.
</bodyText>
<subsectionHeader confidence="0.999411">
3.1 Temporal referents
</subsectionHeader>
<bodyText confidence="0.999980304347826">
Since the referent sets for situations are also well
defined under type theory, this environment-based
approach can also resolve attachment ambigui-
ties involving verbs and verb phrases in addition
to those involving only nominal referents. For
example, if the interpreter is given the sentence
“Coolant drained after test at 3:00,” which could
mean the draining was at 3:00 or the test was at
3:00, the referents for the draining process and
the testing process can be treated as time intervals
in the environment history.5 First, a forest is con-
structed which shares the subtrees for “the test”
and “after 3:00,” and the corresponding sets of
referents. Each node in this forest (shown in Fig-
ure 3) is then annotated with the set of objects and
intervals that it could refer to in the environment.
Since there were no testing intervals at 3:00 in the
environment, the referent set for the NP ‘test after
3:00’ is evaluated to the null set. But since there
is an interval corresponding to a draining process
( ) at the root, the whole VP will still be pre-
ferred as constituent due to the other interpreta-
tion.
</bodyText>
<subsectionHeader confidence="0.9999">
3.2 Quantifier scoping
</subsectionHeader>
<bodyText confidence="0.991642914893617">
The evaluation of referents for quantifiers also
presents a tractability problem, because the func-
tions they correspond to in the Montague analy-
sis map two sets of entities to a truth value. This
means that a straightforward representation of the
potential referents of a quantifier such as ‘at least
one’ would contain every pair of non-empty sub-
sets of the set of all entities, with a cardinal-
ity on the order of . If the evaluation of ref-
erents is deferred until quantifiers are composed
with the common nouns they quantify over, the
&apos;The composition of time intervals, as well as spatial re-
gions and other types of situational referents, is more com-
plex than that outlined for objects, but space does not permit
a complete explanation.
input sets would still be as large as the power sets
of the nouns’ potential referents. Only if the eval-
uation of referents is deferred until complete NPs
are composed as arguments (as subjects or objects
of verbs, for example) can the output sets be re-
stricted to a tractable size.
This provision only covers in situ quantifier
scopings, however. In order to model raised scop-
ings, arbitrarily long chains of raised quantifiers
(if there are more than one) would have to be eval-
uated before they are attached to the verb, as they
are in a CCG-style function composition analy-
sis of raising (Park, 1996).6 Fortunately, univer-
sal quantifiers like ‘each’ and ‘every’ only choose
the one maximal set of referents out of all the pos-
sible subsets in the power set, so any number of
raised universal quantifier functions can be com-
posed into a single function whose referent set
would be no larger than the set of all possible en-
tities.
It may not be possible to evaluate the poten-
tial referents of non-universal raised quantifiers
in polynomial time, because the number of po-
tential subsets they take as input is on the or-
der of the power set of the noun’s potential ref-
erents. This apparent failure may hold some ex-
planatory power, however, since raised quantifiers
other than ‘each’ and ‘every’ seem to be exceed-
ingly rare in the data. This scarcity may be a re-
sult of the significant computational complexity
of evaluating them in isolation (before they are
composed with a verb).
</bodyText>
<sectionHeader confidence="0.996728" genericHeader="evaluation">
4 Evaluation
</sectionHeader>
<bodyText confidence="0.996417951612903">
An implemented system incorporating this
environment-based approach to disambiguation
has been tested on a set of manufacturer-
supplied aircraft maintenance instructions, using
a computer-aided design (CAD) model of a
portion of the aircraft as the environment. It
contains several hundred three dimensional
objects (buttons, handles, sliding couplings, etc),
labeled with object type keywords and connected
to other objects through joints with varying
degrees of freedom (indicating how each object
can be rotated and translated with respect to other
objects in the environment).
The test sentences were the manufacturer’s in-
&apos;This approach is in some sense wedded to a CCG-style
syntacto-semantic analysis of quantifier raising, inasmuch as
its syntactic and semantic structures must be isomorphic in
order to preserve the polynomial complexity of the shared
forest.
structions for replacing a piece of equipment in
this environment. The baseline grammar was not
altered to fit the test sentences or the environment,
but the labeled objects in the CAD model were
automatically added to the lexicon as common
nouns.
In this preliminary accuracy test, forest nodes
that correspond to noun phrase or modifier cate-
gories are dispreferred if they have no potential
entity referents, and forest nodes corresponding
to other categories are dispreferred if their argu-
ments have no potential entity referents. Many
of the nodes in the forest correspond to noun-
noun modifications, which cannot be ruled out by
the grammar because the composition operation
that generates them seems to be productive (vir-
tually any ‘N2’ that is attached to or contained in
an ‘N1’ can be an ‘N1 N2’). Potential referents
for noun-noun modifications are calculated by a
rudimentary spatial proximity threshold, such that
any potential referent of the modified noun lying
within the threshold distance of a potential ref-
erent of the modifier noun in the environment is
added to the composed set.
The results are shown below. The average num-
ber of parse trees per sentence in this set was
before disambiguation. The average ratio of
nodes in enumerated tree sets to nodes in shared
forests for the instructions in this test set was
, a nearly tenfold reduction due to sharing.
Gold standard ‘correct’ trees were annotated
by hand using the same grammar that the parser
uses. The success rate of the parser in this do-
main (the rate at which the correct tree could be
found in the parse forest) was . The reten-
tion rate of the environment-based filtering mech-
anism described above (the rate at which the cor-
rect tree was retained in parse forest) was
of successfully parsed sentences. The average
reduction in number of possible parse trees due
to the environment-based filtering mechanism de-
scribed above was for successfully parsed
and filtered forests.7
</bodyText>
<footnote confidence="0.505680666666667">
Sample parse forests and other details of
this application and environment are available at
http://www.cis.upenn.edu/ schuler/ebd.html.
</footnote>
<table confidence="0.94420105">
sent # trees nodes in nodes in # trees
no. (before unshared shared (after
filter) tree set forest filter)
1 39 600 55 6
2 2 22 14 2
3 14 233 32 14
4 16 206 40 1
5 36* 885 45 3**
6 10 136 35 1
7 17 378 49 4
8 23 260 35 3
9 32 473 35 0**
10 12 174 34 2
11 36* 885 45 3**
12 19 259 37 2
13 2 22 14 2
14 14 233 32 14
15 39 600 55 6
* indicates correct tree not in parse forest
** indicates correct tree not in filtered forest
</table>
<sectionHeader confidence="0.997684" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999974076923077">
This paper has described a method by which the
potential environment referents for all possible in-
terpretations of of an input sentence can be evalu-
ated during parsing, in polynomial time. The ar-
chitecture described in this paper has been imple-
mented with a large coverage grammar as a run-
time interface to a virtual human simulation. It
demonstrates that a natural language interface ar-
chitecture that uses the objects and events in an
application’s run-time environment to inform dis-
ambiguation decisions (by performing semantic
evaluation during parsing) is feasible for interac-
tive applications.
</bodyText>
<sectionHeader confidence="0.999271" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999864152777778">
James Allen and George Ferguson. 1994. Actions and
events in interval temporal logic. Journal of Logic and
Computation, 4.
Hiyan Alshawi, editor. 1992. The core language engine.
MIT Press, Cambridge, MA.
S. Billot and B. Lang. 1989. The structure of shared forests
in ambiguous parsing. In Proceedings of the 27 Annual
Meeting of the Association for Computational Linguistics
(ACL ’89), pages 143–151.
Rama Bindiganavale, William Schuler, Jan M. Allbeck, Nor-
man I. Badler, Aravind K. Joshi, and Martha Palmer.
2000. Dynamically altering agent behaviors using nat-
ural language instructions. Fourth International Confer-
ence on Autonomous Agents (Agents 2000), June.
Johan Bos. 1995. Predicate logic unplugged. In Tenth Ams-
terdam Colloquium.
J. Cocke and J. I. Schwartz. 1970. Programming languages
and their compilers. Technical report, Courant Institute
of Mathematical Sciences, New York University.
Jay Earley. 1970. An efficient context-free parsing algo-
rithm. CACM, 13(2):94–102.
Aravind K. Joshi. 1985. How much context sensitiv-
ity is necessary for characterizing structural descriptions:
Tree adjoining grammars. In L. Karttunen D. Dowty
and A. Zwicky, editors, Natural language parsing: Psy-
chological, computational and theoretical perspectives,
pages 206–250. Cambridge University Press, Cambridge,
U.K.
T. Kasami. 1965. An efficient recognition and syntax
analysis algorithm for context free languages. Technical
Report AFCRL-65-758, Air Force Cambridge Research
Laboratory, Bedford, MA.
Karin Kipper, Hoa Trang Dang, and Martha Palmer. 2000.
Class-based construction of a verb lexicon. In Proceed-
ings of the Seventh National Conference on Artificial In-
telligence (AAAI-2000), Austin, TX, July-August.
Jong C. Park. 1996. A lexical theory of quantification in
ambiguous query interpretation. Ph.D. thesis, Computer
Science Department, University of Pennsylvania.
Owen Rambow and Giorgio Satta. 1996. Synchronous
Models of Language. In Proceedings of the 34th Annual
Meeting of the Association for Computational Linguistics
(ACL ’96).
Owen Rambow, David Weir, and K. Vijay-Shanker. 1995.
D-tree grammars. In Proceedings of the 33rd Annual
Meeting of the Association for Computational Linguistics
(ACL ’95).
Stuart M. Shieber and Yves Schabes. 1990. Synchronous
tree adjoining grammars. In Proceedings of the 13th
International Conference on Computational Linguistics
(COLING ’90), Helsinki, Finland, August.
Stuart M. Shieber. 1994. Restricting the weak-generative
capability of synchronous tree adjoining grammars.
Computational Intelligence, 10(4).
M. Tomita. 1985. An efficient context-free parsing algorith
for natural languages. In Proceedings of the Ninth In-
ternational Annual Conference on Artificial Intelligence,
pages 756–764, Los Angeles, CA.
Terry Winograd. 1972. Understanding natural language.
Academic Press, New York.
Mary McGee Wood. 1993. Categorial grammars. Rout-
ledge.
XTAG Research Group. 1998. A lexicalized tree adjoin-
ing grammar for english. Technical report, University of
Pennsylvania.
Y. Xu and N. Badler. 2000. Algorithms for generating mo-
tion trajectories described by prepositions. In Proceed-
ings of the Computer Animation 2000 Conference, pages
33–39, Philadelphia, PA.
D.H. Younger. 1967. Recognition and parsing of context-
free languages in time n cubed. Information and Control,
10(2):189–208.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.967912">
<title confidence="0.996648">Computational properties of environment-based disambiguation</title>
<author confidence="0.999975">William Schuler</author>
<affiliation confidence="0.999908">Department of Computer and Information Science University of Pennsylvania</affiliation>
<address confidence="0.999284">Philadelphia, PA 19103</address>
<email confidence="0.999512">schuler@linc.cis.upenn.edu</email>
<abstract confidence="0.998644380952381">The standard pipeline approach to semantic processing, in which sentences are morphologically and syntactically resolved to a single tree before they are interpreted, is a poor fit for applications such as natural language interfaces. This is because the environment information, in the form of the objects and events in the application’s runtime environment, cannot be used to inform parsing decisions unless the input sentence is semantically analyzed, but this does not occur until after parsing in the single-tree semantic architecture. This paper describes the computational properties of an alternative architecture, in which semantic analysis is performed on all possible interprein polynomial time.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>James Allen</author>
<author>George Ferguson</author>
</authors>
<title>Actions and events in interval temporal logic.</title>
<date>1994</date>
<journal>Journal of Logic and Computation,</journal>
<volume>4</volume>
<contexts>
<context position="7714" citStr="Allen and Ferguson, 1994" startWordPosition="1210" endWordPosition="1214"> phrases are represented as composeable functions that take entitiess or situations as inputs and ultimately return a truth value for the sentence. Following a straightforward adaptation of standard type theory, common nouns (functions from entities to truth values) define potential referent sets of simple environment entities: , and sentences (functions from situations or world states to truth values) define potential referent sets of situations in which those sentences hold true: . Depending on the needs of the application, these situations can be represented as intervals along a time line (Allen and Ferguson, 1994), or as regions in a three-dimensional space (Xu and Badler, 2000), or as some combination of the two, so that they can be constrained by modifiers that specify the situations’ times and locations. Referents for other types of phrases may be expressed as tuples of entities and situations: one for each argument of the corresponding logical function’s input (with the presence or absence of the tuple representing the boolean output). For example, adjectives, prepositional phrases, and relative clauses, which are typically represented as situationally-dependent properties (functions from situation</context>
</contexts>
<marker>Allen, Ferguson, 1994</marker>
<rawString>James Allen and George Ferguson. 1994. Actions and events in interval temporal logic. Journal of Logic and Computation, 4.</rawString>
</citation>
<citation valid="true">
<title>The core language engine.</title>
<date>1992</date>
<editor>Hiyan Alshawi, editor.</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<marker>1992</marker>
<rawString>Hiyan Alshawi, editor. 1992. The core language engine. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Billot</author>
<author>B Lang</author>
</authors>
<title>The structure of shared forests in ambiguous parsing.</title>
<date>1989</date>
<booktitle>In Proceedings of the 27 Annual Meeting of the Association for Computational Linguistics (ACL ’89),</booktitle>
<pages>143--151</pages>
<contexts>
<context position="10118" citStr="Billot and Lang, 1989" startWordPosition="1582" endWordPosition="1585">cognition algorithm (such as CKY (Cocke and Schwartz, 1970; Kasami, 1965; Younger, 1967) or Earley (Earley, 1970)) can be interpreted as a polynomial sized andor graph with space complexity equal to the time complexity of recognition, whose disjunctive nodes represent possible constituents in the analysis, and whose conjunctive nodes represent binary applications of rules in the grammar. This is called a shared forest of parse trees, because it can represent an exponential number of possible parses using a polynomial number of nodes which are shared between alternative analyses (Tomita, 1985; Billot and Lang, 1989), and can be constructed and traversed in time of the same complexity (e.g. for context free grammars). For example, the two parse trees for the noun phrase ‘button on handle beside adapter’ shown in Figure 1 can be merged into the single shared forest in Figure 2 without any loss of information. These shared syntactic structures can further be associated with compositional semantic functions that correspond to the syntactic elements in the forest, to create a shared forest of trees each representing a complete expression in some logical form. This extended sharing is similar to the ‘packing’ </context>
</contexts>
<marker>Billot, Lang, 1989</marker>
<rawString>S. Billot and B. Lang. 1989. The structure of shared forests in ambiguous parsing. In Proceedings of the 27 Annual Meeting of the Association for Computational Linguistics (ACL ’89), pages 143–151.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rama Bindiganavale</author>
<author>William Schuler</author>
<author>Jan M Allbeck</author>
<author>Norman I Badler</author>
<author>Aravind K Joshi</author>
<author>Martha Palmer</author>
</authors>
<title>Dynamically altering agent behaviors using natural language instructions.</title>
<date>2000</date>
<booktitle>Fourth International Conference on Autonomous Agents (Agents</booktitle>
<contexts>
<context position="2605" citStr="Bindiganavale et al., 2000" startWordPosition="385" endWordPosition="388"> but this does not occur until after parsing in the single-tree architecture. Assuming that no current statistical disambiguation technique is so accurate that it could not benefit from this kind of environment-based information (if available), then it is important that the semantic analysis in an interface architecture be efficiently performed during parsing. This paper describes the computational properties of one such architecture, embedded within a system for giving various kinds of conditional instructions and behavioral constraints to virtual human agents in a 3-D simulated environment (Bindiganavale et al., 2000). In one application of this system, users direct simulated maintenance personnel to repair a jet engine, in order to ensure that the maintenance procedures do not risk the safety of the people performing them. Since it is expected to process a broad range of maintenance instructions, the parser is run on a large subset of the Xtag English grammar (XTAG Research Group, 1998), which has been annotated with lexical semantic classes (Kipper et al., 2000) associated with the objects, states, and processes in the maintenance simulation. Since the grammar has several thousand lexical entries, the pa</context>
</contexts>
<marker>Bindiganavale, Schuler, Allbeck, Badler, Joshi, Palmer, 2000</marker>
<rawString>Rama Bindiganavale, William Schuler, Jan M. Allbeck, Norman I. Badler, Aravind K. Joshi, and Martha Palmer. 2000. Dynamically altering agent behaviors using natural language instructions. Fourth International Conference on Autonomous Agents (Agents 2000), June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan Bos</author>
</authors>
<title>Predicate logic unplugged.</title>
<date>1995</date>
<booktitle>In Tenth Amsterdam Colloquium.</booktitle>
<contexts>
<context position="13663" citStr="Bos, 1995" startWordPosition="2146" endWordPosition="2147">arious nodes in the shared forest can be used to choose a viable parse tree from the forest, or to evaluate the truth or falsity of the input sentence without disambiguating it (by checking the presence or lack of referents at the root of the forest). For example, the noun phrase ‘button on handle beside adapter’ has at least two possible interpretations, represented by the two trees in Figure 1: one in which a button is on a handle and 3A similar basis on (at least partially) disambiguated syntactic representations makes similar underspecified semantic representations such as hole semantics (Bos, 1995) ill-suited for environment-based syntactic disambiguation. NP[button] PP[on] NP[handle] PP[beside] NP[button] P[on] NP[handle] P[beside] NP[adapter] NP[button] NP[button] P[beside] NP[adapter] NP[button] NP[handle] P[on] PP[on] PP[beside] Figure 1: Example parse trees for ‘button on handle beside adapter’ NP[button] NP[button] NP[button] P[on] PP[on] NP[handle] PP[on] NP[handle] P[beside] PP[beside] NP[adapter] Figure 2: Example shared forest for “button on handle beside adapter” the handle (but not necessarily the button) is beside an adapter, and the other in which a button is on a handle a</context>
</contexts>
<marker>Bos, 1995</marker>
<rawString>Johan Bos. 1995. Predicate logic unplugged. In Tenth Amsterdam Colloquium.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Cocke</author>
<author>J I Schwartz</author>
</authors>
<title>Programming languages and their compilers.</title>
<date>1970</date>
<tech>Technical report,</tech>
<institution>Courant Institute of Mathematical Sciences, New York University.</institution>
<contexts>
<context position="9554" citStr="Cocke and Schwartz, 1970" startWordPosition="1495" endWordPosition="1498">reat common nouns as situationally-dependent properties as well, in order to handle sets like ‘bachelors’ that change their membership over time. 3 Sharing referents across interpretations Any method for using the environment to guide the interpretation of natural language sentences requires a tractable representation of the many possible interpretations of each input. The representation described here is based on the polynomial-sized chart produced by any dynamic programming recognition algorithm. A record of the derivation paths in any dynamic programming recognition algorithm (such as CKY (Cocke and Schwartz, 1970; Kasami, 1965; Younger, 1967) or Earley (Earley, 1970)) can be interpreted as a polynomial sized andor graph with space complexity equal to the time complexity of recognition, whose disjunctive nodes represent possible constituents in the analysis, and whose conjunctive nodes represent binary applications of rules in the grammar. This is called a shared forest of parse trees, because it can represent an exponential number of possible parses using a polynomial number of nodes which are shared between alternative analyses (Tomita, 1985; Billot and Lang, 1989), and can be constructed and travers</context>
</contexts>
<marker>Cocke, Schwartz, 1970</marker>
<rawString>J. Cocke and J. I. Schwartz. 1970. Programming languages and their compilers. Technical report, Courant Institute of Mathematical Sciences, New York University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jay Earley</author>
</authors>
<title>An efficient context-free parsing algorithm.</title>
<date>1970</date>
<journal>CACM,</journal>
<volume>13</volume>
<issue>2</issue>
<contexts>
<context position="9609" citStr="Earley, 1970" startWordPosition="1505" endWordPosition="1506">n order to handle sets like ‘bachelors’ that change their membership over time. 3 Sharing referents across interpretations Any method for using the environment to guide the interpretation of natural language sentences requires a tractable representation of the many possible interpretations of each input. The representation described here is based on the polynomial-sized chart produced by any dynamic programming recognition algorithm. A record of the derivation paths in any dynamic programming recognition algorithm (such as CKY (Cocke and Schwartz, 1970; Kasami, 1965; Younger, 1967) or Earley (Earley, 1970)) can be interpreted as a polynomial sized andor graph with space complexity equal to the time complexity of recognition, whose disjunctive nodes represent possible constituents in the analysis, and whose conjunctive nodes represent binary applications of rules in the grammar. This is called a shared forest of parse trees, because it can represent an exponential number of possible parses using a polynomial number of nodes which are shared between alternative analyses (Tomita, 1985; Billot and Lang, 1989), and can be constructed and traversed in time of the same complexity (e.g. for context fre</context>
</contexts>
<marker>Earley, 1970</marker>
<rawString>Jay Earley. 1970. An efficient context-free parsing algorithm. CACM, 13(2):94–102.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
</authors>
<title>How much context sensitivity is necessary for characterizing structural descriptions: Tree adjoining grammars.</title>
<date>1985</date>
<booktitle>Natural language parsing: Psychological, computational and theoretical perspectives,</booktitle>
<pages>206--250</pages>
<editor>In L. Karttunen D. Dowty and A. Zwicky, editors,</editor>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge, U.K.</location>
<contexts>
<context position="11550" citStr="Joshi, 1985" startWordPosition="1805" endWordPosition="1806">yntactic ambiguities have been at least partially resolved by other means); whereas the approach described here extends structure sharing to incorporate a certain amount of quantifier scope ambiguity in order to allow a complete evaluation of all subderivations in a shared forest before making any disambiguation decisions in syntax.3 Various synchronous formalisms have been introduced for associating syntactic representations with logical functions in isomorphic or locally non-isomorphic derivations, including Categorial Grammars (CGs) (Wood, 1993), Synchronous Tree Adjoining Grammars (TAGs) (Joshi, 1985; Shieber and Schabes, 1990; Shieber, 1994), and Synchronous Description Tree Grammars (DTGs) (Rambow et al., 1995; Rambow and Satta, 1996). Most of these formalisms can be extended to define semantic associations over entire shared forests, rather than merely over individual parse trees, in a straightforward manner, preserving the ambiguity of the syntactic forest without exceeding its polynomial size, or the polynomial time complexity of creating or traversing it. Since one of the goals of this architecture is to use the system’s representation of its environment to resolve ambiguity in its </context>
</contexts>
<marker>Joshi, 1985</marker>
<rawString>Aravind K. Joshi. 1985. How much context sensitivity is necessary for characterizing structural descriptions: Tree adjoining grammars. In L. Karttunen D. Dowty and A. Zwicky, editors, Natural language parsing: Psychological, computational and theoretical perspectives, pages 206–250. Cambridge University Press, Cambridge, U.K.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Kasami</author>
</authors>
<title>An efficient recognition and syntax analysis algorithm for context free languages.</title>
<date>1965</date>
<tech>Technical Report AFCRL-65-758,</tech>
<institution>Air Force Cambridge Research Laboratory,</institution>
<location>Bedford, MA.</location>
<contexts>
<context position="9568" citStr="Kasami, 1965" startWordPosition="1499" endWordPosition="1500">tionally-dependent properties as well, in order to handle sets like ‘bachelors’ that change their membership over time. 3 Sharing referents across interpretations Any method for using the environment to guide the interpretation of natural language sentences requires a tractable representation of the many possible interpretations of each input. The representation described here is based on the polynomial-sized chart produced by any dynamic programming recognition algorithm. A record of the derivation paths in any dynamic programming recognition algorithm (such as CKY (Cocke and Schwartz, 1970; Kasami, 1965; Younger, 1967) or Earley (Earley, 1970)) can be interpreted as a polynomial sized andor graph with space complexity equal to the time complexity of recognition, whose disjunctive nodes represent possible constituents in the analysis, and whose conjunctive nodes represent binary applications of rules in the grammar. This is called a shared forest of parse trees, because it can represent an exponential number of possible parses using a polynomial number of nodes which are shared between alternative analyses (Tomita, 1985; Billot and Lang, 1989), and can be constructed and traversed in time of </context>
</contexts>
<marker>Kasami, 1965</marker>
<rawString>T. Kasami. 1965. An efficient recognition and syntax analysis algorithm for context free languages. Technical Report AFCRL-65-758, Air Force Cambridge Research Laboratory, Bedford, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Karin Kipper</author>
<author>Hoa Trang Dang</author>
<author>Martha Palmer</author>
</authors>
<title>Class-based construction of a verb lexicon.</title>
<date>2000</date>
<booktitle>In Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI-2000),</booktitle>
<location>Austin, TX, July-August.</location>
<contexts>
<context position="3060" citStr="Kipper et al., 2000" startWordPosition="461" endWordPosition="464">m for giving various kinds of conditional instructions and behavioral constraints to virtual human agents in a 3-D simulated environment (Bindiganavale et al., 2000). In one application of this system, users direct simulated maintenance personnel to repair a jet engine, in order to ensure that the maintenance procedures do not risk the safety of the people performing them. Since it is expected to process a broad range of maintenance instructions, the parser is run on a large subset of the Xtag English grammar (XTAG Research Group, 1998), which has been annotated with lexical semantic classes (Kipper et al., 2000) associated with the objects, states, and processes in the maintenance simulation. Since the grammar has several thousand lexical entries, the parser is exposed to considerable lexical and structural ambiguity as a matter of course. The environment-based disambiguation architecture described in this paper has much in common with very early environment-based approaches, such as those described by Winograd (Winograd, 1972), in that it uses the actual entities in an environment database to resolve ambiguity in the input. This research explores two extensions to the basic approach however: 1. It i</context>
</contexts>
<marker>Kipper, Dang, Palmer, 2000</marker>
<rawString>Karin Kipper, Hoa Trang Dang, and Martha Palmer. 2000. Class-based construction of a verb lexicon. In Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI-2000), Austin, TX, July-August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jong C Park</author>
</authors>
<title>A lexical theory of quantification in ambiguous query interpretation.</title>
<date>1996</date>
<tech>Ph.D. thesis,</tech>
<institution>Computer Science Department, University of Pennsylvania.</institution>
<contexts>
<context position="20453" citStr="Park, 1996" startWordPosition="3295" endWordPosition="3296">nation. input sets would still be as large as the power sets of the nouns’ potential referents. Only if the evaluation of referents is deferred until complete NPs are composed as arguments (as subjects or objects of verbs, for example) can the output sets be restricted to a tractable size. This provision only covers in situ quantifier scopings, however. In order to model raised scopings, arbitrarily long chains of raised quantifiers (if there are more than one) would have to be evaluated before they are attached to the verb, as they are in a CCG-style function composition analysis of raising (Park, 1996).6 Fortunately, universal quantifiers like ‘each’ and ‘every’ only choose the one maximal set of referents out of all the possible subsets in the power set, so any number of raised universal quantifier functions can be composed into a single function whose referent set would be no larger than the set of all possible entities. It may not be possible to evaluate the potential referents of non-universal raised quantifiers in polynomial time, because the number of potential subsets they take as input is on the order of the power set of the noun’s potential referents. This apparent failure may hold</context>
</contexts>
<marker>Park, 1996</marker>
<rawString>Jong C. Park. 1996. A lexical theory of quantification in ambiguous query interpretation. Ph.D. thesis, Computer Science Department, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
<author>Giorgio Satta</author>
</authors>
<title>Synchronous Models of Language.</title>
<date>1996</date>
<booktitle>In Proceedings of the 34th Annual Meeting of the Association for Computational Linguistics (ACL ’96).</booktitle>
<contexts>
<context position="11689" citStr="Rambow and Satta, 1996" startWordPosition="1824" endWordPosition="1827">re sharing to incorporate a certain amount of quantifier scope ambiguity in order to allow a complete evaluation of all subderivations in a shared forest before making any disambiguation decisions in syntax.3 Various synchronous formalisms have been introduced for associating syntactic representations with logical functions in isomorphic or locally non-isomorphic derivations, including Categorial Grammars (CGs) (Wood, 1993), Synchronous Tree Adjoining Grammars (TAGs) (Joshi, 1985; Shieber and Schabes, 1990; Shieber, 1994), and Synchronous Description Tree Grammars (DTGs) (Rambow et al., 1995; Rambow and Satta, 1996). Most of these formalisms can be extended to define semantic associations over entire shared forests, rather than merely over individual parse trees, in a straightforward manner, preserving the ambiguity of the syntactic forest without exceeding its polynomial size, or the polynomial time complexity of creating or traversing it. Since one of the goals of this architecture is to use the system’s representation of its environment to resolve ambiguity in its instructions, a space-efficient shared forest of logical functions will not be enough. The system must also be able to efficiently calculat</context>
</contexts>
<marker>Rambow, Satta, 1996</marker>
<rawString>Owen Rambow and Giorgio Satta. 1996. Synchronous Models of Language. In Proceedings of the 34th Annual Meeting of the Association for Computational Linguistics (ACL ’96).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Owen Rambow</author>
<author>David Weir</author>
<author>K Vijay-Shanker</author>
</authors>
<title>D-tree grammars.</title>
<date>1995</date>
<booktitle>In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics (ACL ’95).</booktitle>
<contexts>
<context position="11664" citStr="Rambow et al., 1995" startWordPosition="1820" endWordPosition="1823"> here extends structure sharing to incorporate a certain amount of quantifier scope ambiguity in order to allow a complete evaluation of all subderivations in a shared forest before making any disambiguation decisions in syntax.3 Various synchronous formalisms have been introduced for associating syntactic representations with logical functions in isomorphic or locally non-isomorphic derivations, including Categorial Grammars (CGs) (Wood, 1993), Synchronous Tree Adjoining Grammars (TAGs) (Joshi, 1985; Shieber and Schabes, 1990; Shieber, 1994), and Synchronous Description Tree Grammars (DTGs) (Rambow et al., 1995; Rambow and Satta, 1996). Most of these formalisms can be extended to define semantic associations over entire shared forests, rather than merely over individual parse trees, in a straightforward manner, preserving the ambiguity of the syntactic forest without exceeding its polynomial size, or the polynomial time complexity of creating or traversing it. Since one of the goals of this architecture is to use the system’s representation of its environment to resolve ambiguity in its instructions, a space-efficient shared forest of logical functions will not be enough. The system must also be abl</context>
</contexts>
<marker>Rambow, Weir, Vijay-Shanker, 1995</marker>
<rawString>Owen Rambow, David Weir, and K. Vijay-Shanker. 1995. D-tree grammars. In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics (ACL ’95).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
<author>Yves Schabes</author>
</authors>
<title>Synchronous tree adjoining grammars.</title>
<date>1990</date>
<booktitle>In Proceedings of the 13th International Conference on Computational Linguistics (COLING ’90),</booktitle>
<location>Helsinki, Finland,</location>
<contexts>
<context position="11577" citStr="Shieber and Schabes, 1990" startWordPosition="1807" endWordPosition="1810">guities have been at least partially resolved by other means); whereas the approach described here extends structure sharing to incorporate a certain amount of quantifier scope ambiguity in order to allow a complete evaluation of all subderivations in a shared forest before making any disambiguation decisions in syntax.3 Various synchronous formalisms have been introduced for associating syntactic representations with logical functions in isomorphic or locally non-isomorphic derivations, including Categorial Grammars (CGs) (Wood, 1993), Synchronous Tree Adjoining Grammars (TAGs) (Joshi, 1985; Shieber and Schabes, 1990; Shieber, 1994), and Synchronous Description Tree Grammars (DTGs) (Rambow et al., 1995; Rambow and Satta, 1996). Most of these formalisms can be extended to define semantic associations over entire shared forests, rather than merely over individual parse trees, in a straightforward manner, preserving the ambiguity of the syntactic forest without exceeding its polynomial size, or the polynomial time complexity of creating or traversing it. Since one of the goals of this architecture is to use the system’s representation of its environment to resolve ambiguity in its instructions, a space-effic</context>
</contexts>
<marker>Shieber, Schabes, 1990</marker>
<rawString>Stuart M. Shieber and Yves Schabes. 1990. Synchronous tree adjoining grammars. In Proceedings of the 13th International Conference on Computational Linguistics (COLING ’90), Helsinki, Finland, August.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
</authors>
<title>Restricting the weak-generative capability of synchronous tree adjoining grammars.</title>
<date>1994</date>
<journal>Computational Intelligence,</journal>
<volume>10</volume>
<issue>4</issue>
<contexts>
<context position="11593" citStr="Shieber, 1994" startWordPosition="1811" endWordPosition="1812">partially resolved by other means); whereas the approach described here extends structure sharing to incorporate a certain amount of quantifier scope ambiguity in order to allow a complete evaluation of all subderivations in a shared forest before making any disambiguation decisions in syntax.3 Various synchronous formalisms have been introduced for associating syntactic representations with logical functions in isomorphic or locally non-isomorphic derivations, including Categorial Grammars (CGs) (Wood, 1993), Synchronous Tree Adjoining Grammars (TAGs) (Joshi, 1985; Shieber and Schabes, 1990; Shieber, 1994), and Synchronous Description Tree Grammars (DTGs) (Rambow et al., 1995; Rambow and Satta, 1996). Most of these formalisms can be extended to define semantic associations over entire shared forests, rather than merely over individual parse trees, in a straightforward manner, preserving the ambiguity of the syntactic forest without exceeding its polynomial size, or the polynomial time complexity of creating or traversing it. Since one of the goals of this architecture is to use the system’s representation of its environment to resolve ambiguity in its instructions, a space-efficient shared fore</context>
</contexts>
<marker>Shieber, 1994</marker>
<rawString>Stuart M. Shieber. 1994. Restricting the weak-generative capability of synchronous tree adjoining grammars. Computational Intelligence, 10(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Tomita</author>
</authors>
<title>An efficient context-free parsing algorith for natural languages.</title>
<date>1985</date>
<booktitle>In Proceedings of the Ninth International Annual Conference on Artificial Intelligence,</booktitle>
<pages>756--764</pages>
<location>Los Angeles, CA.</location>
<contexts>
<context position="10094" citStr="Tomita, 1985" startWordPosition="1580" endWordPosition="1581">programming recognition algorithm (such as CKY (Cocke and Schwartz, 1970; Kasami, 1965; Younger, 1967) or Earley (Earley, 1970)) can be interpreted as a polynomial sized andor graph with space complexity equal to the time complexity of recognition, whose disjunctive nodes represent possible constituents in the analysis, and whose conjunctive nodes represent binary applications of rules in the grammar. This is called a shared forest of parse trees, because it can represent an exponential number of possible parses using a polynomial number of nodes which are shared between alternative analyses (Tomita, 1985; Billot and Lang, 1989), and can be constructed and traversed in time of the same complexity (e.g. for context free grammars). For example, the two parse trees for the noun phrase ‘button on handle beside adapter’ shown in Figure 1 can be merged into the single shared forest in Figure 2 without any loss of information. These shared syntactic structures can further be associated with compositional semantic functions that correspond to the syntactic elements in the forest, to create a shared forest of trees each representing a complete expression in some logical form. This extended sharing is s</context>
</contexts>
<marker>Tomita, 1985</marker>
<rawString>M. Tomita. 1985. An efficient context-free parsing algorith for natural languages. In Proceedings of the Ninth International Annual Conference on Artificial Intelligence, pages 756–764, Los Angeles, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Terry Winograd</author>
</authors>
<title>Understanding natural language.</title>
<date>1972</date>
<publisher>Academic Press,</publisher>
<location>New York.</location>
<contexts>
<context position="3484" citStr="Winograd, 1972" startWordPosition="527" endWordPosition="528">tenance instructions, the parser is run on a large subset of the Xtag English grammar (XTAG Research Group, 1998), which has been annotated with lexical semantic classes (Kipper et al., 2000) associated with the objects, states, and processes in the maintenance simulation. Since the grammar has several thousand lexical entries, the parser is exposed to considerable lexical and structural ambiguity as a matter of course. The environment-based disambiguation architecture described in this paper has much in common with very early environment-based approaches, such as those described by Winograd (Winograd, 1972), in that it uses the actual entities in an environment database to resolve ambiguity in the input. This research explores two extensions to the basic approach however: 1. It incorporates ideas from type theory to represent a broad range of linguistic phenomena in a manner for which their extensions or potential referents in the environment are welldefined in every case. This is elaborated in Section 2. 2. It adapts the concept of structure sharing, taken from the study of parsing, not only to translate the many possible interpretations of ambiguous sentences into shared logical expressions, b</context>
</contexts>
<marker>Winograd, 1972</marker>
<rawString>Terry Winograd. 1972. Understanding natural language. Academic Press, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary McGee Wood</author>
</authors>
<title>Categorial grammars.</title>
<date>1993</date>
<publisher>Routledge.</publisher>
<contexts>
<context position="11493" citStr="Wood, 1993" startWordPosition="1798" endWordPosition="1799">ifier scope (the calculation of which is deferred until syntactic ambiguities have been at least partially resolved by other means); whereas the approach described here extends structure sharing to incorporate a certain amount of quantifier scope ambiguity in order to allow a complete evaluation of all subderivations in a shared forest before making any disambiguation decisions in syntax.3 Various synchronous formalisms have been introduced for associating syntactic representations with logical functions in isomorphic or locally non-isomorphic derivations, including Categorial Grammars (CGs) (Wood, 1993), Synchronous Tree Adjoining Grammars (TAGs) (Joshi, 1985; Shieber and Schabes, 1990; Shieber, 1994), and Synchronous Description Tree Grammars (DTGs) (Rambow et al., 1995; Rambow and Satta, 1996). Most of these formalisms can be extended to define semantic associations over entire shared forests, rather than merely over individual parse trees, in a straightforward manner, preserving the ambiguity of the syntactic forest without exceeding its polynomial size, or the polynomial time complexity of creating or traversing it. Since one of the goals of this architecture is to use the system’s repre</context>
</contexts>
<marker>Wood, 1993</marker>
<rawString>Mary McGee Wood. 1993. Categorial grammars. Routledge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>XTAG Research Group</author>
</authors>
<title>A lexicalized tree adjoining grammar for english.</title>
<date>1998</date>
<tech>Technical report,</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="2982" citStr="Group, 1998" startWordPosition="450" endWordPosition="451">utational properties of one such architecture, embedded within a system for giving various kinds of conditional instructions and behavioral constraints to virtual human agents in a 3-D simulated environment (Bindiganavale et al., 2000). In one application of this system, users direct simulated maintenance personnel to repair a jet engine, in order to ensure that the maintenance procedures do not risk the safety of the people performing them. Since it is expected to process a broad range of maintenance instructions, the parser is run on a large subset of the Xtag English grammar (XTAG Research Group, 1998), which has been annotated with lexical semantic classes (Kipper et al., 2000) associated with the objects, states, and processes in the maintenance simulation. Since the grammar has several thousand lexical entries, the parser is exposed to considerable lexical and structural ambiguity as a matter of course. The environment-based disambiguation architecture described in this paper has much in common with very early environment-based approaches, such as those described by Winograd (Winograd, 1972), in that it uses the actual entities in an environment database to resolve ambiguity in the input</context>
</contexts>
<marker>Group, 1998</marker>
<rawString>XTAG Research Group. 1998. A lexicalized tree adjoining grammar for english. Technical report, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Xu</author>
<author>N Badler</author>
</authors>
<title>Algorithms for generating motion trajectories described by prepositions.</title>
<date>2000</date>
<booktitle>In Proceedings of the Computer Animation 2000 Conference,</booktitle>
<pages>33--39</pages>
<location>Philadelphia, PA.</location>
<contexts>
<context position="7780" citStr="Xu and Badler, 2000" startWordPosition="1222" endWordPosition="1225">r situations as inputs and ultimately return a truth value for the sentence. Following a straightforward adaptation of standard type theory, common nouns (functions from entities to truth values) define potential referent sets of simple environment entities: , and sentences (functions from situations or world states to truth values) define potential referent sets of situations in which those sentences hold true: . Depending on the needs of the application, these situations can be represented as intervals along a time line (Allen and Ferguson, 1994), or as regions in a three-dimensional space (Xu and Badler, 2000), or as some combination of the two, so that they can be constrained by modifiers that specify the situations’ times and locations. Referents for other types of phrases may be expressed as tuples of entities and situations: one for each argument of the corresponding logical function’s input (with the presence or absence of the tuple representing the boolean output). For example, adjectives, prepositional phrases, and relative clauses, which are typically represented as situationally-dependent properties (functions from situations and entities 2This is not strictly true, as referent sets for co</context>
</contexts>
<marker>Xu, Badler, 2000</marker>
<rawString>Y. Xu and N. Badler. 2000. Algorithms for generating motion trajectories described by prepositions. In Proceedings of the Computer Animation 2000 Conference, pages 33–39, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D H Younger</author>
</authors>
<title>Recognition and parsing of contextfree languages in time n cubed.</title>
<date>1967</date>
<journal>Information and Control,</journal>
<volume>10</volume>
<issue>2</issue>
<contexts>
<context position="9584" citStr="Younger, 1967" startWordPosition="1501" endWordPosition="1502">dent properties as well, in order to handle sets like ‘bachelors’ that change their membership over time. 3 Sharing referents across interpretations Any method for using the environment to guide the interpretation of natural language sentences requires a tractable representation of the many possible interpretations of each input. The representation described here is based on the polynomial-sized chart produced by any dynamic programming recognition algorithm. A record of the derivation paths in any dynamic programming recognition algorithm (such as CKY (Cocke and Schwartz, 1970; Kasami, 1965; Younger, 1967) or Earley (Earley, 1970)) can be interpreted as a polynomial sized andor graph with space complexity equal to the time complexity of recognition, whose disjunctive nodes represent possible constituents in the analysis, and whose conjunctive nodes represent binary applications of rules in the grammar. This is called a shared forest of parse trees, because it can represent an exponential number of possible parses using a polynomial number of nodes which are shared between alternative analyses (Tomita, 1985; Billot and Lang, 1989), and can be constructed and traversed in time of the same complex</context>
</contexts>
<marker>Younger, 1967</marker>
<rawString>D.H. Younger. 1967. Recognition and parsing of contextfree languages in time n cubed. Information and Control, 10(2):189–208.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>