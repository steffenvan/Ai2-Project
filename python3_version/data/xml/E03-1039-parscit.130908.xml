<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.002552">
<title confidence="0.93676">
Topological Parsing
</title>
<author confidence="0.995498">
Gerald Penn
</author>
<affiliation confidence="0.9993495">
Department of Computer Science
University of Toronto
</affiliation>
<email confidence="0.992223">
gpenn@cs.toronto.edu
</email>
<author confidence="0.979313">
Mohammad Haji-Abdolhosseini
</author>
<affiliation confidence="0.998643">
Department of Linguistics
University of Toronto
</affiliation>
<email confidence="0.989081">
mhaji@chass.utoronto.ca
</email>
<sectionHeader confidence="0.998559" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.995767533333333">
We present a new grammar formalism
for parsing with freer word-order lan-
guages, motivated by recent linguistic
research in German and the Slavic lan-
guages. Unlike CFGs, these grammars
contain two primitive notions of con-
stituency that are used to preserve the
semantic or interpretational aspects of
phrase structure, while at the same time
providing a more efficient backbone for
parsing based on word-order and conti-
guity constraints. A simple parsing al-
gorithm is presented, and compilation
of grammars into Constraint Handling
Rules is also discussed.
</bodyText>
<sectionHeader confidence="0.993217" genericHeader="keywords">
1 Motivation
</sectionHeader>
<bodyText confidence="0.999987854166667">
There is a growing awareness among computa-
tional linguists that, in order for the functional-
ity of current real-world natural language applica-
tions to progress to the next level, access to the-
matic roles and grammatical function assignment,
i.e., &amp;quot;who did what to whom,&amp;quot; will be just as im-
portant as a probabilistic model&apos;s ability to predict
the next word in a string. In striving to represent
useful meaning relations, we, and the annotated
corpora we use, have dutifully followed the com-
mon assumption in linguistics that the assignment
of relations are artifacts of configurational ones —
primitive relationships between nodes in phrase-
structure trees licensed by a grammar.
In the case of parsing with English, there have
been some remarkable successes in the last five
years, most notably that of Collins (1999) and sev-
eral successive improvements, who use knowl-
edge about headedness and subcategorisation, tra-
ditional n-grams and some information about un-
bounded dependencies to dramatically improve
on our ability to predict the most likely phrase-
structure tree given a string of words — with the
tacit assumption that this tree has something to do
with interpretation. While there have also been
more modest successes with purely dependency-
based grammars in the realm of freer word-order
(FWO) languages, these often map dependency
trees to phrase structure trees, and even agreeing
on what the best phrase-structure tree should be
in these languages is not easy. Predicting the tree
from data, moreover, seems utterly intractable,
given the number of movement operations and
empty projections that would be involved in the
standard approach.
While dependency-based grammar seems like a
very appealing alternative in that context, phrases
are a fact of life. No FWO language is com-
pletely free, and while the subunits like NPs that
seem semantically intuitive to us may not always
be realized as contiguous substrings in the strings
of a language, there are often other contiguous
substrings defined on the basis of prosodic ef-
fects, discourse relationships and/or purely for-
mal syntactic rules that are adhered to. Invari-
ably, dependency-based approaches must use var-
ious ad hoc devices under names such as &amp;quot;eman-
cipation&amp;quot; to make exceptions where these notions
</bodyText>
<page confidence="0.996844">
283
</page>
<bodyText confidence="0.999346375">
of contiguity do not agree. The constraints from
these levels of linguistic structure interact, and
phrases — of some variety — are the basic units
for defining this interaction. For computational
purposes, these constraints are interesting because
they can be used to restrict search and, in the con-
text of statistical parsing, to militate against less
likely interpretations.
</bodyText>
<sectionHeader confidence="0.699217" genericHeader="introduction">
2 Kinds of Constituency
</sectionHeader>
<bodyText confidence="0.999974337209302">
There has, in fact, been a considerable under-
current of linguistics research, beginning as early
as Curry (1961), that challenges the Chomskyan
assumption that one flavour of constituency ex-
ists on which constraints from all of these lev-
els of linguistic structure can happily agree.
Curry (1961) distinguished what he called tec-
togrammatical structure, on which semantic inter-
pretation takes place, from a pheno grammatical
structure, which deals with word order, morphol-
ogy and (dis)contiguities. Much of this work, in-
cluding Curry&apos;s, has not been very formal. The
purpose of this paper is to present one possible
formalisation of it, and in a manner particularly
consistent with how Curry&apos;s work has developed
within HPSG (Kathol, 2000).
The one exception to this informality, Lexical-
Functional Grammar (Kaplan and Bresnan, 1982),
is worth noting, since it is also widely used by
computational linguists. LFG, to its credit, had
the foresight to distinguish two different kinds
of structure very early on. One of them, func-
tional or f-structure, is represented using a feature
structure that directly indicates thematic role and
grammatical function assignment, among other
things, without any appeal to a primitive &amp;quot;f-
constituent.&amp;quot; While a more conservative represen-
tation (a phrase structure tree) will be used here for
tectogrammatical structure, it would be entirely
consistent with the spirit of the present work to
use feature structures or even dependency trees in
the context of this level of phrase structure. In
LFG, the other, constituent or c-structure, which
corresponds roughly to phenogrammatical struc-
ture, uses a phrase structure tree labelled with very
tectogrammatical-looking categories: nouns, PPs,
on occasion NPs, etc. Where these are not realised
as contiguous substrings, c-structure trees are gen-
erally just flatter and wider-branching, in order to
match the daughters of these discontiguous con-
stituents directly, contiguously, and in the accept-
able orders.
What is missing here is a primitive in the for-
malism for talking about contiguous substrings
that may not have a semantic, tectogrammatical
significance, and a primitive for talking about non-
tectogrammatical regions over which word order
constraints are expressed. Examples of the former
are quite evident in the Slavic languages, such as
with second-position clitics. As their name sug-
gests, these clitics occur after something in first
position. That something can be a normal tec-
togrammatical constituent, like an NP, or it can be
a prosodic word, such as a preposition and first
adjective of an NP (Browne, 1974), or, in certain
circumstances, it can be a sequence of discourse-
linked NPs (Penn, 1997). Of the latter, proba-
bly the best-known example is the German Mit-
telfeld. Within this field, pronouns generally pre-
cede prosodically heavier NPs (and with a partic-
ular order prescribed among multiple pronouns),
and temporal adjuncts generally precede locatival
adjuncts. It is false to claim that these ordering
constraints holds only within a VP or over an en-
tire clause. The Mittelfeld is, in fact, defined in
linear terms, as the substring bounded on the left
by either a complementizer or a finite verb, and on
the right by a periphrastic verbal complex.
Linear fields like the Mittelfeld, usually called
topological fields in the HPSG literature, are de-
fined relative to some region, in this case Ger-
man clauses, in which other fields may also be
defined. These fields are linearly ordered with
respect to one another, and sometimes have con-
straints on how many words or tectogrammatical
constituents they can contain. Regions may also
occur inside fields of larger regions, such as with
embedded clauses in German. What emerges from
this characterisation is an extended context-free
formalism in which right-hand-sides of rules can
use the Kleene star (as in LFG c-structures). What
is different about these extended CFGs is that they
do not provide interpretations — only a parse into
linearly defined fields and regions. The present
formalism consists of two parallel representational
devices, one being this extended CFG and the
</bodyText>
<page confidence="0.995939">
284
</page>
<bodyText confidence="0.999912473684211">
other, an interpretive tectogrammatical tree struc-
ture with potentially crossing links. Along with
these come constraints that associate substructures
from the two representations, in a very similar
spirit to LFG structural correspondence functions.
The idea of using topological fields as a guide
for general parsing appears to have originated
with Oliva (1992); more recent work primarily
folds in parochial facts from German, includ-
ing Duchier (2001), which presents German topo-
logical parsing as a constraint satisfaction prob-
lem. The present approach actually received its
inspiration initially from Slavic language word-
order data, but can be applied equally well to
German. Synchronous tree-adjoining grammars
(Shieber and Schabes, 1990) bear some resem-
blance to the parallel derivations used here, al-
though the same constituents are used there in
both.
</bodyText>
<sectionHeader confidence="0.998991" genericHeader="method">
3 Formalism
</sectionHeader>
<bodyText confidence="0.997267">
We can state three characterizing assumptions that
restrict the expressive power of this formalism:
</bodyText>
<listItem confidence="0.984439">
• Topological Linearity: all word-order con-
straints can be witnessed by a topology de-
fined on some linear region.
• Topological Locality: discontiguities may
exist due to scrambling, but they are not
unbounded.1 Hence all discontiguities can
be characterized in some local region of
bounded topological size.
• Qualified Isomorphy: While linear and lo-
cal regions are not always the same as tra-
ditional (tectogrammatical) constituents, they
</listItem>
<bodyText confidence="0.962349135135135">
themselves are the same. Furthermore, prin-
ciples governing linear order and discontigu-
ity are stated relative to the smallest common
region that witnesses the substrings being or-
dered or dislocated.
Topological Linearity agrees with the assumption
made in traditional ID/LP grammars that linear
1While we do not deny the existence of unbounded depen-
dencies, we believe they deserve a much different treatment.
Our current approach has been to handle them within the tec-
togrammatical categories themselves, such as in the SLASH
feature of an HPSG feature structure. These will not be dis-
cussed further here.
precedence constraints apply within some region,
although with ID/LP, that region is a tectogram-
matically defined subtree. Linearity can be en-
forced by assigning substrings to different topo-
logical fields. Compared to relative statements of
linear order, e.g., NP &lt; VP, topological fields al-
low one to make more absolute statements about
linear position that are crucial for thinking about
FWO syntax in a more modular fashion. Qualified
Isomorphy refines an assumption made in earlier
work on topological fields that every word sim-
ply bears a unique topological field. Topological
structure is nested because the tectogrammatical
structures it constrains are. Using phenogrammat-
ical trees of nested regions allows us to order the
words of an embedded clause, for example, with-
out contradicting their placement relative to the
words of a matrix clause because which field a
word bears is relative to the region being consid-
ered.
We begin with the basic primitives from which
grammars are constructed:
Definition 1 A topological signature is a quintu-
ple, (,C, Field, Region, E, Phon), such that:
</bodyText>
<listItem confidence="0.974728833333333">
• ,C is a constraint language for describing tec-
togrammatical categories, with a countable
set of variables,
• Field is a set of topological fields, such as
the German Mittelfeld,
• Region is a set of regions, such as clauses,
relative to which topological fields are de-
fined,
• E is a lexicon, and
• Phon : E* is a function that maps el-
ements in an interpretation, I, of ,C to phono-
logical strings.
</listItem>
<bodyText confidence="0.901534">
G could be as simple as variables and constants
representing atomic categories like NP, or a de-
scription logic for feature structures, for example.
It can be a language with disjunction, although
there is obviously a computational cost to be paid
for this.
Definition 2 A set of topological fields, Field,
induces a unique set of field descriptors,
Desc(Field), such that for every f E Field:
</bodyText>
<page confidence="0.983115">
285
</page>
<listItem confidence="0.99989">
• f E Desc(Field) (unique field),
• {f} E Desc(Field) (optional field),
• f* E Desc(Field) (0 or more fields),
• f+ E Desc(Field) (1 or more fields).
</listItem>
<bodyText confidence="0.999865333333333">
We can now define our phenogrammatical
structures. These are the extended CFG rules that
divide regions topologically into fields:
</bodyText>
<equation confidence="0.8926455">
Definition 3 Given a topological signature, a
P &gt;
</equation>
<bodyText confidence="0.978185545454546">
phenogrammatical rule is of the form r
d1... 04,, where r E Region, the di
Desc(Field), and n &gt; 0.
When we look at the parse tree that corresponds
to a derivation with a set of pheno-rules over some
string, we see that every field and region can ac-
count for some contiguous substring that its sub-
tree dominates. This is called the yield of that
field or region. We can extend this notion of
yield to tectogrammatical categories, although the
substrings that correspond to these may not be
contiguous. We could, following Johnson (1985),
think of yields as bit vectors defined over a fixed
length corresponding to the length of the input, for
example.
Structural constraints constrain pheno-yields in
terms of tecto-yields and vice versa. We look at
them in terms of whether one covers another, i.e.,
substring inclusion.
Definition 4 Given a topological signature, the
structural constraints, C, over that signature are,
for every 0 E L, f E Field, and r E Region:
</bodyText>
<listItem confidence="0.998546833333333">
• covering: 0 covers f, covers r,
f covered_by 0, r covered_by 0,
• matching: 0 matches f, 0 matches r,
f matched_by 0, r matched_by 0,
• linkage: rkf,f ,ri,
• compaction: (0).
</listItem>
<bodyText confidence="0.998950840909091">
Structural constraints are interpreted with univer-
sal quantification on their left-hand sides and exis-
tential quantification on their right hand sides, so
REL f is not equivalent to its dual f REL _by 0.
Covering constraints specify that the phonological
yield of every/some tectogrammatical category de-
noted by 0 consumes, or includes, the phonolog-
ical yield of some/every field or region f/r, al-
though the yield of 0 may also extend into other
phenogrammatical constituents. A special case of
covering is matching, e.g., 0 matches f. This
is when the phonological yield of every/some tec-
togrammatical category denoted by 0 is exactly
the same as the phonological yield of some/every
field or region f/r. As shorthand, we also allow
&lt; &gt; f/r for 0 covers f f/r covered_by 0.
Similarly, matching constraints with universal
quantification on both sides are written as 0
f/r.
Linkage constraints are essentially the converse
of phenogrammatical structural rules: they license
the links in a phenogrammatical tree with field
mothers and region daughters. Linkage rules are
always unary-branching. A field contains at most
one region, with the alternative being one lexical
item, i.e., a pre-terminal field.
Compaction constraints indicate that a tec-
togrammatical constituent has a phonological
yield with no discontiguities. To these, we can
also add universally quantified implication con-
straints, 0 0, which are the usual ones from
constraint-based grammar — any tectogrammati-
cal constituent in the denotation of 0 is also in the
denotation of &apos;0.
We are now in a position to introduce the tec-
togrammatical rules, which tell us how to build
tectogrammatical structures. These are subject to
the universally quantified constraints above, but
can also specify constraints on a particular daugh-
ter:
Definition 5 Given a topological signature and
n E N, the indexed structural constraints, C„,
over that signature are, for every 1 &lt; i,j &lt; n,
0 &lt; k &lt;n, f E Field, and r E Region:
</bodyText>
<listItem confidence="0.9999896">
• covering: i covers f, i covers r,
• matching: i matches f/r, f/r matched_by
• precedence: i &lt;j,
• immediate precedence: i &lt; &lt; j,
• compaction: ( k).
</listItem>
<footnote confidence="0.495706">
Definition 6 Given a topological signature, a
</footnote>
<page confidence="0.993909">
286
</page>
<bodyText confidence="0.999885">
tectogrammatical rule is of the form 00 T&gt;
01 ... 0n; p, where the 0, E ,C, n &gt; 1, and p E
The indices in indexed constraints refer to the
mother or daughter constituents in a tectogram-
matical rule. In the absence of any indexed con-
straints, a tecto-rule makes no assumptions about
the linear relationships among its daughters. Rel-
ative precedence and immediate precedence can
be used to describe traditional phrase structure,
where it exists, which can also be provided as
an idiom: cbo &gt; 01 ... On. Note that, as with
traditional ID/LP, compaction can be specified in
the absence of precedence, which serves to spec-
ify contiguity separately from linear order; un-
like ID/LP, precedence can be specified in the ab-
sence of contiguity (Goetz and Penn, 1997; Suhre,
1999). Manandhar (1995) has a similar approach
to linear precedence.
</bodyText>
<sectionHeader confidence="0.997075" genericHeader="method">
4 Parsing
</sectionHeader>
<bodyText confidence="0.999038733333333">
Just as with CFGs, there are a number of different
control strategies that could be imagined for pars-
ing with this topological formalism. The one pre-
sented here incorporates elements that are reminis-
cent of naive bottom-up, top-down and left-corner
parsing. Information about headedness or statisti-
cally estimated parameters would be incorporated
into a more sophisticated large-scale parser. For
simplicity, the exposition here assumes that for
every field or region, f I r, there is at most one
structural constraint of each variety that univer-
sally quantifies over f/r.
The flow of the parsing algorithm is shown
schematically running on a German example in
Figure 1. Parsing begins after consulting a lex-
icon to find the tecto-categories associated with
each word of input. These categories are then
mapped by structural constraints to topological
fields or regions (leftward arrows). From there,
pheno-structure is built bottom-up using pheno-
rules, much as in a bottom-up CFG parser. In Ger-
man, it is often assumed that clauses have the fol-
lowing topology defined on them:
clause vf, cf,mf*, {vc}, Infl.
where mf marks the Mittelfeld mentioned above.
It is listed as mf* because the Mittelfeld can con-
tain a sequence of regions. At fields or regions f ir
where there are structural constraints universally
quantified on f I r, we then predict some tecto-
category (rightward arrows). In the figure above,
for example, it is assumed that there is a constraint
in German that:
clause matched_by (s V rp V cp).
which encodes our knowledge about the contigu-
ity and position of these three categories&apos; yields.
Parsing proceeds in tectogrammar top-down in a
manner restricted so that only what is topologi-
cally accessible to f /r can be matched, as ex-
plained below. During top-down parsing, deriva-
tions are checked against structural constraints
universally quantified on descriptions that are
consistent with the current category. Further
bottom-up pheno-parsing can in principle be inter-
leaved with top-down tecto-prediction in any man-
ner.
</bodyText>
<subsectionHeader confidence="0.943">
4.1 Edges
</subsectionHeader>
<bodyText confidence="0.998869">
Specifically, in a chart-parser implementation, we
require four kinds of edges:
</bodyText>
<listItem confidence="0.968462541666667">
• pheno-edges: by parsing right-to-left and in-
terpreting pheno-rules left-to-right, we need only
passive (inactive) edges for bottom-up pheno-
parsing. These record the field/region recognised
and the interval spanned by the edge.
• active tecto-edges: these are the edges predicted
during pheno-parsing. They record the category
predicted, the field/region that predicted them,
called the sponsor, and two bit vectors: one de-
noting the substring that can be used (can-BV),
and one denoting the substring that can optionally
be used (opt-BV). Their difference is what must
be consumed by the category being sought. They
also carry a set of keys for topological accessibil-
ity (explained below).
• passive tecto-edges: They record the category
found, the sponsor that predicted them, a bit vec-
tor denoting the substring used (used-BV), and a
set of keys that they confer.
• frozen tecto-edges: These are essentially active
tecto-edges that are waiting for their can-BV. They
record the category predicted, their sponsor, and
a bit vector that must be consumed (req-BV).
Every edge also has a unique ID.
</listItem>
<page confidence="0.996279">
287
</page>
<figureCaption confidence="0.999883">
Figure 1: Flow of control in the topological parsing algorithm.
</figureCaption>
<figure confidence="0.998758409090909">
clause
vf of mf VC nf np
/,&apos; habe
np vt
&apos; ----------------------
nbar gesehen tP -
den
det
clause
vf mf
rel vp
vc V-,
„------ der Z\
k „ , , , , , , ,
- - _ _ adv ,---. vi
\
-.. ---- 1
, &apos;&lt;-----_- __-
___-- --------- ,
- -,_ schon 1 singt
_ -----
Mann
</figure>
<subsectionHeader confidence="0.874786">
4.2 Rule Operation
</subsectionHeader>
<bodyText confidence="0.99978">
There are four main combinations we must then
implement once the input has been scanned:
</bodyText>
<listItem confidence="0.975125333333333">
• pheno-completion: given pheno rule r
d1 dr, and pheno-edges for d1 dr,, add a
pheno-edge for r with the union of their intervals
(likewise for linking)
• tecto-prediction: given an active tecto-edge
with category consistent with 00, and tecto-rule
</listItem>
<bodyText confidence="0.93315875">
T&gt; 01 071, predict 01 with the same spon-
sor, can-BV, and keys, but with an opt-BV equal to
its can-B V — everything is optional because an-
other daughter may consume the rest.
</bodyText>
<listItem confidence="0.8786735">
• tecto-completion: given an active tecto-edge
with category consistent with 00, tecto-rule
</listItem>
<equation confidence="0.9270175">
T
00 &gt; 071; p, passive tecto-edges consis-
</equation>
<bodyText confidence="0.935855076923077">
tent with 01. 03. Then:
- non-final if j &lt; n — 1, predict an active
tecto-edge for 03+1, with can-BV and opt-
BV equal to the can-BV of 00 less the used-
BVs of the passive edges, the keys of the pas-
sive edge for 0j, and the same sponsor.
penultimate: If j = n — 1, then predict the
same for 0n, but set its opt-BV to the opt-BV
of 00 less the used-B Vs of the passive edges
— this is the last daughter and must consume
the remainder of what is required.
- ultimate: If j = n, then check that what the
union of the used-BVs does not cover in the
can-BV of 00 is in opt-BV, and create a pas-
sive tecto-edge for 0/), with the unions of the
keys and used-B Vs of the passive daughters.
If the active edge was an initial prediction
from pheno-structure, add the sponsor to the
set of keys too. This can be interpreted as an
exchange in which some higher active edge
will be given access to this sponsor&apos;s yield in
exchange for using this passive edge.
If a passive edge is lexical (produced by the in-
put scan), we must ensure that its bit is topologi-
cally accessible to the sponsor of the active edge.
If a tecto-rule has indexed constraints, then these
constraints must be checked in addition (with bit-
vector arithmetic, mainly).
• tecto-unfreezing: given an active tecto-edge
and a frozen tecto-edge with consistent categories
and accessible sponsors, if the req-By of the
frozen edge is contained in the can-BV of the ac-
tive edge, then create a new active tecto-edge, with
the same sponsor and can-BV, with an opt-BV less
the req-BV, and a set of keys augmented by the
sponsor of the frozen edge. This can be interpreted
as an exchange in which the active edge promises
to consume req-B V, and in turn receives a key to
access some topological field/region.
</bodyText>
<subsectionHeader confidence="0.988707">
4.3 Structural Constraint Operation
</subsectionHeader>
<bodyText confidence="0.995797">
The first three of these are a variation on context-
free parsing, in which bit-vectors are main-
tained instead of intervals. Active tecto-edges
are initially predicted from pheno-structure by
f I r matched_by ç constraints. Once we know that
the yield of some f/r in a particular interval is
matched by a 0, we can predict 0 with the can-
</bodyText>
<page confidence="0.993717">
288
</page>
<bodyText confidence="0.999951538461538">
BV of that interval without necessarily finishing
pheno-parsing. Once we have built the 0, we will
refuse admission to this f Ir to higher active edges
unless they agree to use 0. In this way, we can en-
sure that every f Ir contains a 0 in the final tecto-
structure for the input.
Frozen edges are added to the chart by
f Ir covered_by 0 constraints. We know that f Ir
should be consumed by a 0 in tectogrammar, but
0 may be larger. Frozen edges refuse admission
to f/r to every active edge except those trying to
build a 0.
Constraints of the form 0 matches f Ir restrict
the can-BVs of active edges for 0 to the maximal
topologically accessible f /rs they cover, and en-
force the requirement that the passive edges of 0
match some f Ir interval. Constraints of the form
0 covers f Ir enforce their interpretation on pas-
sive 0 edges, and eliminate active edges in which
can-BV covers no f Ir.
Clearly, the idioms introduced above can be
compiled specially to exploit the combination of
constraints they provide. Input is accepted as
grammatical if it is possible to build both a span-
ning pheno-edge of a distinguished region and a
spanning tecto-edge of a distinguished category.
</bodyText>
<subsectionHeader confidence="0.993822">
4.4 Topological Accessibility
</subsectionHeader>
<bodyText confidence="0.999986969696969">
Not all subconstituents in tectogrammar are com-
patible with each other just because their cate-
gories combine in a tecto-rule. The reason for this
is that multiple pheno-structures are being built si-
multaneously in the chart. These pheno-structures
can have different fields and thus, unlike CFGs,
different structural constraints. As a result, we
need some means of ensuring that passive edges
from one pheno-tree are not being used by ac-
tive edges predicted by another pheno-tree with
incompatible structural constraints.
In order for a lexical passive edge to be incor-
porated into a tecto-structure, there must be an ac-
cessible path in the corresponding pheno-structure
from the sponsor of the active edge at the root of
the tecto-structure down to the lexical item. Every
daughter field/region is accessible to its mother in
a pheno-structure, but transitive closure of this re-
lation is blocked by fields/regions that appear on
the left-hand-sides of structural constraints, i.e.,
the fields/regions that predict tecto-edges. The
sponsor of an active edge only has access through
a blocking field/region if it possesses the key is-
sued by that field/region. This key is given to the
predicting edge only if it agrees to use up all the
daughters under the blocking node.
Topological inaccessibility makes parsing of
scrambling-related constructions more efficient.
In a typical grammar, active tecto-edges are ei-
ther prevented outright from using large portions
of inaccessible input, or required to use an exist-
ing passive edge as the only means of access. Fig-
ure 2 shows a well-formed pheno-tree for German
</bodyText>
<figureCaption confidence="0.998929">
Figure 2: A well-formed pheno-tree for German.
</figureCaption>
<bodyText confidence="0.992330666666667">
with not only clauses but NP regions and PP re-
gions that define those categories&apos; internal struc-
tures. Figure 3 shows its corresponding tecto-
</bodyText>
<figure confidence="0.953642">
NP VP
/N
Pro V CP
us
</figure>
<figureCaption confidence="0.999914">
Figure 3: The well-formed tecto-tree for Figure 2.
</figureCaption>
<bodyText confidence="0.7758655">
tree. When the embedded VP dominating gesehen
seeks an NP daughter, it must simply match the
</bodyText>
<figure confidence="0.998872766666667">
NP AuxP
I VN
Pro VP Aux
er NP
I / V hat
I
npr\ I
TV
I I
1\ 11 gesehen
N
I
den Mann
Ich sa te dali
/PP
mit NP
dem Teleskop
clause2
vi ciN&apos;N&apos;nf
Ich sagte clausei
vc nf
daf3 npri
cf mf
sprf nof
mf gesehen hat ppr n
INI
objfpr2
pf sprf nof
den Mann
mit dem Teleskop
</figure>
<page confidence="0.994485">
289
</page>
<bodyText confidence="0.999696">
NP edge for npri. The other embedded NP is in-
side a blocking ppr, and the subject NP is not in the
yield of the clausej that sponsored this VP. Notice
that the internals of clausej are inaccessible to the
VP dominating sagte apart from the CP it offers
because of a matched_by constraint. The result is
that clauses are parsed largely independently.
</bodyText>
<sectionHeader confidence="0.999375" genericHeader="conclusions">
5 Future Work
</sectionHeader>
<bodyText confidence="0.999994888888889">
We are currently implementing a compiler based
on this formalism in SICStus Prolog. The input
to the compiler is a topological grammar and the
output is a Prolog parser for that grammar. While
there are no corpora sufficiently annotated for this
model, the topologically annotated Verbmobil II
corpus of German comes the closest. Based on a
grammar with 74 phenogrammatical rules and 72
tectogrammatical rules extracted from 87 reanno-
tated sentences of this corpus, our parser takes an
average of 8.26 seconds per sentence to parse a
larger set of 125 sentences from the same corpus
on a Celeron 600 MHz computer running Win-
dows XP. Much of the VM-II corpus consists of
relatively simple utterances, and there were no re-
cursive tectogrammatical rules, a significant ob-
stacle for any purely top-down parser. The next
step in implementation is to integrate bottom-up
or mixed control into tectogrammatical parsing to
more closely constrain the number of active edges
predicted. A great deal more static analysis of
parsing rule interaction and morphological anal-
ysis must also be performed for tractable parsing.
The space of parsing algorithms that this for-
malism supports needs to be mapped out to match
syntactic properties of grammars with optimal al-
gorithms for them. A significant amount of ex-
perimentation also needs to be done on provid-
ing the right higher-level constructs to grammar-
writers that will reduce the complexity that comes
with using this more flexible formalism. This
may also lead to simplifications that could even-
tually be parametrised and statistically estimated
to produce efficient large-scale language models
for FWO languages that can capture more seman-
tic information.
</bodyText>
<sectionHeader confidence="0.992308" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999901510204082">
W. Browne. 1974. On the problem of enclitic
placement in Serbo-Croatian. In R. D. Brecht and
C. V. Chvany, editors, Slavic Transformational Syn-
tax, volume 10 of Michigan Slavic Materials. Dept.
of Slavic Languages and Literatures, University of
Michigan.
. Collins. 1999. Head-Driven Statistical Models for
Natural Language Parsing. Ph.D. thesis, University
of Pennsylvania.
H. Curry. 1961. Some logical aspects of grammati-
cal structure. In Jacobson, editor, Structure of Lan-
guage and its Mathematical Aspects: Proceedings
of the Twelfth Symposium in Applied Mathematics,
pages 56-68. American Mathematical Society.
D. Duchier. 2001. Lexicalized syntax and topology for
non-projective dependency grammar. In G.-J. Krui-
jff, editor, Proceedings of the Joint Formal Gram-
mar Conference /Seventh Meeting on the Mathemat-
ics of Language.
T. Goetz and G. Penn. 1997. A proposed linear spec-
ification language. Arbeitspapier des SFB 340 134,
Ebarhard-Karls-Unviersitat Tubingen.
. Johnson. 1985. Parsing discontinuous constituents.
In Proceedings of the 23rd Annual Meeting of the
Association for Computational Linguistics.
R. Kaplan and J. Bresnan. 1982. Lexical-functional
grammar: A formal system for grammatical repre-
sentation. In J. Bresnan, editor, The Mental Repre-
sentation of Grammatical Relations. MIT Press.
A. Kathol. 2000. Linear Syntax. Oxford Univ. Press.
S. Manandhar. 1995. Deterministic consistency check-
ing of LP constraints. In Proceedings of the 7th
Conference of the EACL, pages 165-172.
K. Oliva. 1992. The proper treatment of word or-
der in HPSG. In Proceedings of the 14th Inter-
national Conference on Computational Linguistics,
volume 1, pages 184-190.
G. Penn. 1997. On the plausibility of purely structural
multiple wh-fronting. In Proceedings of the Sec-
ond European Conference on Formal Description of
Slavic Languages.
S. Shieber and Y. Schabes. 1990. Synchronous tree ad-
joining grammars. In Proceedings of the 13th Inter-
national Conference on Computational Linguistics,
volume 3, pages 1-6.
0. Suhre. 1999. Computational aspects of a gram-
mar formalism for languages with freer word or-
der. Master&apos;s thesis, Eberh ard-K arl s-Universi tat
Ttibingen.
</reference>
<page confidence="0.997128">
290
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000522">
<title confidence="0.999391">Topological Parsing</title>
<author confidence="0.999773">Gerald Penn</author>
<affiliation confidence="0.9999655">Department of Computer Science University of Toronto</affiliation>
<email confidence="0.999356">gpenn@cs.toronto.edu</email>
<author confidence="0.999705">Mohammad Haji-Abdolhosseini</author>
<affiliation confidence="0.9999275">Department of Linguistics University of Toronto</affiliation>
<email confidence="0.99155">mhaji@chass.utoronto.ca</email>
<abstract confidence="0.992210558573856">We present a new grammar formalism for parsing with freer word-order languages, motivated by recent linguistic research in German and the Slavic languages. Unlike CFGs, these grammars contain two primitive notions of constituency that are used to preserve the semantic or interpretational aspects of phrase structure, while at the same time providing a more efficient backbone for parsing based on word-order and contiguity constraints. A simple parsing algorithm is presented, and compilation of grammars into Constraint Handling Rules is also discussed. 1 Motivation There is a growing awareness among computational linguists that, in order for the functionality of current real-world natural language applications to progress to the next level, access to thematic roles and grammatical function assignment, i.e., &amp;quot;who did what to whom,&amp;quot; will be just as important as a probabilistic model&apos;s ability to predict the next word in a string. In striving to represent useful meaning relations, we, and the annotated corpora we use, have dutifully followed the common assumption in linguistics that the assignment of relations are artifacts of configurational ones — primitive relationships between nodes in phrasestructure trees licensed by a grammar. In the case of parsing with English, there have been some remarkable successes in the last five years, most notably that of Collins (1999) and several successive improvements, who use knowledge about headedness and subcategorisation, traditional n-grams and some information about unbounded dependencies to dramatically improve on our ability to predict the most likely phrasestructure tree given a string of words — with the tacit assumption that this tree has something to do with interpretation. While there have also been more modest successes with purely dependencybased grammars in the realm of freer word-order (FWO) languages, these often map dependency trees to phrase structure trees, and even agreeing on what the best phrase-structure tree should be in these languages is not easy. Predicting the tree from data, moreover, seems utterly intractable, given the number of movement operations and empty projections that would be involved in the standard approach. While dependency-based grammar seems like a very appealing alternative in that context, phrases are a fact of life. No FWO language is completely free, and while the subunits like NPs that seem semantically intuitive to us may not always be realized as contiguous substrings in the strings of a language, there are often other contiguous substrings defined on the basis of prosodic effects, discourse relationships and/or purely formal syntactic rules that are adhered to. Invariably, dependency-based approaches must use varhoc under names such as &amp;quot;emancipation&amp;quot; to make exceptions where these notions 283 of contiguity do not agree. The constraints from these levels of linguistic structure interact, and phrases — of some variety — are the basic units for defining this interaction. For computational purposes, these constraints are interesting because they can be used to restrict search and, in the context of statistical parsing, to militate against less likely interpretations. 2 Kinds of Constituency There has, in fact, been a considerable undercurrent of linguistics research, beginning as early as Curry (1961), that challenges the Chomskyan assumption that one flavour of constituency exists on which constraints from all of these levels of linguistic structure can happily agree. (1961) distinguished what he called tecon which semantic intertakes place, from a grammatical structure, which deals with word order, morphology and (dis)contiguities. Much of this work, including Curry&apos;s, has not been very formal. The purpose of this paper is to present one possible formalisation of it, and in a manner particularly consistent with how Curry&apos;s work has developed within HPSG (Kathol, 2000). The one exception to this informality, Lexical- Functional Grammar (Kaplan and Bresnan, 1982), is worth noting, since it is also widely used by computational linguists. LFG, to its credit, had the foresight to distinguish two different kinds structure very early on. One of them, funcrepresented using a feature structure that directly indicates thematic role and grammatical function assignment, among other things, without any appeal to a primitive &amp;quot;fconstituent.&amp;quot; While a more conservative representation (a phrase structure tree) will be used here for tectogrammatical structure, it would be entirely consistent with the spirit of the present work to use feature structures or even dependency trees in the context of this level of phrase structure. In the other, corresponds roughly to phenogrammatical structure, uses a phrase structure tree labelled with very tectogrammatical-looking categories: nouns, PPs, on occasion NPs, etc. Where these are not realised as contiguous substrings, c-structure trees are generally just flatter and wider-branching, in order to match the daughters of these discontiguous constituents directly, contiguously, and in the acceptable orders. What is missing here is a primitive in the formalism for talking about contiguous substrings that may not have a semantic, tectogrammatical significance, and a primitive for talking about nontectogrammatical regions over which word order constraints are expressed. Examples of the former are quite evident in the Slavic languages, such as with second-position clitics. As their name suggests, these clitics occur after something in first position. That something can be a normal tectogrammatical constituent, like an NP, or it can be a prosodic word, such as a preposition and first adjective of an NP (Browne, 1974), or, in certain circumstances, it can be a sequence of discourselinked NPs (Penn, 1997). Of the latter, probathe best-known example is the German Mitthis field, pronouns generally precede prosodically heavier NPs (and with a particular order prescribed among multiple pronouns), and temporal adjuncts generally precede locatival adjuncts. It is false to claim that these ordering constraints holds only within a VP or over an enclause. The in fact, defined in linear terms, as the substring bounded on the left by either a complementizer or a finite verb, and on the right by a periphrastic verbal complex. fields like the called fields the HPSG literature, are defined relative to some region, in this case German clauses, in which other fields may also be defined. These fields are linearly ordered with respect to one another, and sometimes have constraints on how many words or tectogrammatical constituents they can contain. Regions may also occur inside fields of larger regions, such as with embedded clauses in German. What emerges from this characterisation is an extended context-free formalism in which right-hand-sides of rules can use the Kleene star (as in LFG c-structures). What is different about these extended CFGs is that they do not provide interpretations — only a parse into linearly defined fields and regions. The present formalism consists of two parallel representational devices, one being this extended CFG and the 284 other, an interpretive tectogrammatical tree structure with potentially crossing links. Along with these come constraints that associate substructures from the two representations, in a very similar spirit to LFG structural correspondence functions. The idea of using topological fields as a guide for general parsing appears to have originated with Oliva (1992); more recent work primarily folds in parochial facts from German, including Duchier (2001), which presents German topological parsing as a constraint satisfaction problem. The present approach actually received its inspiration initially from Slavic language wordorder data, but can be applied equally well to German. Synchronous tree-adjoining grammars (Shieber and Schabes, 1990) bear some resemblance to the parallel derivations used here, although the same constituents are used there in both. 3 Formalism We can state three characterizing assumptions that restrict the expressive power of this formalism: Topological Linearity: word-order constraints can be witnessed by a topology deon some region. Topological Locality: may exist due to scrambling, but they are not Hence all discontiguities can characterized in some region bounded topological size. Qualified Isomorphy: linear and local regions are not always the same as traditional (tectogrammatical) constituents, they themselves are the same. Furthermore, principles governing linear order and discontiguare stated relative to the common witnesses the substrings being ordered or dislocated. Topological Linearity agrees with the assumption made in traditional ID/LP grammars that linear we do not deny the existence of unbounded dependencies, we believe they deserve a much different treatment. Our current approach has been to handle them within the teccategories themselves, such as in the feature of an HPSG feature structure. These will not be discussed further here. precedence constraints apply within some region, although with ID/LP, that region is a tectogrammatically defined subtree. Linearity can be enforced by assigning substrings to different topological fields. Compared to relative statements of linear order, e.g., NP &lt; VP, topological fields allow one to make more absolute statements about linear position that are crucial for thinking about FWO syntax in a more modular fashion. Qualified Isomorphy refines an assumption made in earlier work on topological fields that every word simply bears a unique topological field. Topological structure is nested because the tectogrammatical structures it constrains are. Using phenogrammatical trees of nested regions allows us to order the words of an embedded clause, for example, without contradicting their placement relative to the words of a matrix clause because which field a word bears is relative to the region being considered. We begin with the basic primitives from which grammars are constructed: 1 topological signature a quintu- (,C, Region, E, Phon), that: ,C is a language describing tectogrammatical categories, with a countable set of variables, Field a set of fields, as German Region a set of as clauses, relative to which topological fields are defined, E a Phon : E* a function that maps in an interpretation, I, of phonological strings. be as simple as variables and constants atomic categories like a description logic for feature structures, for example. It can be a language with disjunction, although there is obviously a computational cost to be paid for this. 2 of topological fields, a unique set of descriptors, that for every f 285 f E Desc(Field) field), {f} Desc(Field) field), f* or more fields), f+ or more fields). We can now define our phenogrammatical structures. These are the extended CFG rules that divide regions topologically into fields: 3 a topological signature, a rule of the form r 04,, where r di n &gt; When we look at the parse tree that corresponds to a derivation with a set of pheno-rules over some string, we see that every field and region can account for some contiguous substring that its subdominates. This is called the that field or region. We can extend this notion of yield to tectogrammatical categories, although the substrings that correspond to these may not be contiguous. We could, following Johnson (1985), think of yields as bit vectors defined over a fixed length corresponding to the length of the input, for example. Structural constraints constrain pheno-yields in terms of tecto-yields and vice versa. We look at in terms of whether one i.e., substring inclusion. 4 a topological signature, the constraints, over that signature are, every 0 f Field, r Region: covering: covers r, 0, r covered_by 0, matching: matches f,0 matched_by linkage: • compaction: (0). Structural constraints are interpreted with universal quantification on their left-hand sides and existential quantification on their right hand sides, so not equivalent to its dual _by 0. Covering constraints specify that the phonological yield of every/some tectogrammatical category deby or includes, the phonologyield of some/every field or region although the yield of 0 may also extend into other phenogrammatical constituents. A special case of is matching, e.g., matches f.This is when the phonological yield of every/some tectogrammatical category denoted by 0 is exactly the same as the phonological yield of some/every or region shorthand, we also allow &gt; covers f f/r covered_by 0. Similarly, matching constraints with universal on both sides are written as Linkage constraints are essentially the converse of phenogrammatical structural rules: they license the links in a phenogrammatical tree with field mothers and region daughters. Linkage rules are always unary-branching. A field contains at most one region, with the alternative being one lexical item, i.e., a pre-terminal field. Compaction constraints indicate that a tectogrammatical constituent has a phonological yield with no discontiguities. To these, we can add universally quantified conwhich are the usual ones from constraint-based grammar — any tectogrammatical constituent in the denotation of 0 is also in the of We are now in a position to introduce the tectogrammatical rules, which tell us how to build tectogrammatical structures. These are subject to the universally quantified constraints above, but can also specify constraints on a particular daughter: 5 a topological signature and the structural constraints, that signature are, for every 1 &lt; &lt; n, &lt; k &lt;n, f r covering: covers f,i covers r, matching: matches f/r precedence: immediate precedence: &lt; &lt; compaction: ( 6 a topological signature, a 286 rule of the form 00 ... where the 0, n &gt; 1, and p The indices in indexed constraints refer to the mother or daughter constituents in a tectogrammatical rule. In the absence of any indexed constraints, a tecto-rule makes no assumptions about the linear relationships among its daughters. Relative precedence and immediate precedence can be used to describe traditional phrase structure, where it exists, which can also be provided as an idiom: ... that, as with traditional ID/LP, compaction can be specified in the absence of precedence, which serves to specify contiguity separately from linear order; uncan be specified in the absence of contiguity (Goetz and Penn, 1997; Suhre, 1999). Manandhar (1995) has a similar approach to linear precedence. 4 Parsing Just as with CFGs, there are a number of different control strategies that could be imagined for parsing with this topological formalism. The one presented here incorporates elements that are reminiscent of naive bottom-up, top-down and left-corner parsing. Information about headedness or statistically estimated parameters would be incorporated into a more sophisticated large-scale parser. For simplicity, the exposition here assumes that for field or region, I r, is at most one structural constraint of each variety that univerquantifies over The flow of the parsing algorithm is shown schematically running on a German example in Figure 1. Parsing begins after consulting a lexicon to find the tecto-categories associated with each word of input. These categories are then mapped by structural constraints to topological fields or regions (leftward arrows). From there, pheno-structure is built bottom-up using phenorules, much as in a bottom-up CFG parser. In German, it is often assumed that clauses have the following topology defined on them: clause vf, cf,mf*, {vc}, Infl. mf marks the above. is listed as the cona sequence of regions. At fields or regions where there are structural constraints universally on I r, then predict some tectocategory (rightward arrows). In the figure above, for example, it is assumed that there is a constraint in German that: (s which encodes our knowledge about the contiguity and position of these three categories&apos; yields. Parsing proceeds in tectogrammar top-down in a restricted so that only what is topologiaccessible can be matched, as explained below. During top-down parsing, derivations are checked against structural constraints universally quantified on descriptions that are consistent with the current category. Further bottom-up pheno-parsing can in principle be interleaved with top-down tecto-prediction in any manner. 4.1 Edges Specifically, in a chart-parser implementation, we require four kinds of edges: pheno-edges: parsing right-to-left and interpreting pheno-rules left-to-right, we need only passive (inactive) edges for bottom-up pheno- These record the the spanned the edge. active tecto-edges: are the edges predicted pheno-parsing. They record the field/region that predicted them, the two bit vectors: one dethe substring that can be used and one denoting the substring that can optionally used difference is what must be consumed by the category being sought. They carry a set of topological accessibility (explained below). passive tecto-edges: record the predicted them, a bit vecdenoting the substring used a of they confer. frozen tecto-edges: are essentially active tecto-edges that are waiting for their can-BV. They the predicted, bit vector that must be consumed edge also has a unique 287 Figure 1: Flow of control in the topological parsing algorithm. clause of mf np /,&apos; habe np vt &apos; ---------------------gesehen den det clause vf mf rel vp „-----der Z\ k „ , , , , , , , - _ _ ,---. vi \ -.. ---- 1 , &apos;&lt;-----_- __- ___-- --------- , - -,_ schon 1 singt _ ----- Mann 4.2 Rule Operation There are four main combinations we must then implement once the input has been scanned: • pheno-completion: given pheno rule r pheno-edges for d1 a pheno-edge for r with the union of their intervals (likewise for linking) • tecto-prediction: given an active tecto-edge category consistent with tecto-rule 01 01 with the same sponsor, can-BV, and keys, but with an opt-BV equal to its can-B V — everything is optional because another daughter may consume the rest. • tecto-completion: given an active tecto-edge with category consistent with 00, tecto-rule &gt; 071; tecto-edges consiswith non-final if n — 1, predict an active for with can-BV and opt- BV equal to the can-BV of 00 less the used- BVs of the passive edges, the keys of the passive edge for 0j, and the same sponsor. If n — 1, then predict the for but set its opt-BV to the opt-BV of 00 less the used-B Vs of the passive edges — this is the last daughter and must consume the remainder of what is required. ultimate: If n, then check that what the union of the used-BVs does not cover in the can-BV of 00 is in opt-BV, and create a pastecto-edge for with the unions of the keys and used-B Vs of the passive daughters. If the active edge was an initial prediction from pheno-structure, add the sponsor to the set of keys too. This can be interpreted as an exchange in which some higher active edge will be given access to this sponsor&apos;s yield in exchange for using this passive edge. If a passive edge is lexical (produced by the input scan), we must ensure that its bit is topologically accessible to the sponsor of the active edge. If a tecto-rule has indexed constraints, then these constraints must be checked in addition (with bitvector arithmetic, mainly). • tecto-unfreezing: given an active tecto-edge and a frozen tecto-edge with consistent categories and accessible sponsors, if the req-By of the frozen edge is contained in the can-BV of the active edge, then create a new active tecto-edge, with the same sponsor and can-BV, with an opt-BV less the req-BV, and a set of keys augmented by the sponsor of the frozen edge. This can be interpreted as an exchange in which the active edge promises to consume req-B V, and in turn receives a key to access some topological field/region. 4.3 Structural Constraint Operation The first three of these are a variation on contextfree parsing, in which bit-vectors are maintained instead of intervals. Active tecto-edges are initially predicted from pheno-structure by I r matched_by ç Once we know that yield of some a particular interval is by a 0, we can predict 0 with the can- 288 BV of that interval without necessarily finishing Once we have built the will admission to this Ir higher active edges they agree to use this way, we can enthat every Ir a 0 in the final tectostructure for the input. Frozen edges are added to the chart by Ir covered_by 0 We know that Ir should be consumed by a 0 in tectogrammar, but 0 may be larger. Frozen edges refuse admission every active edge except those trying to build a 0. of the form matches f Ir the can-BVs of active edges for 0 to the maximal accessible they cover, and enthe requirement that the passive edges of some Ir Constraints of the form covers f Ir their interpretation on passive 0 edges, and eliminate active edges in which covers no Ir. Clearly, the idioms introduced above can be compiled specially to exploit the combination of constraints they provide. Input is accepted as grammatical if it is possible to build both a spanning pheno-edge of a distinguished region and a spanning tecto-edge of a distinguished category. 4.4 Topological Accessibility Not all subconstituents in tectogrammar are compatible with each other just because their categories combine in a tecto-rule. The reason for this is that multiple pheno-structures are being built simultaneously in the chart. These pheno-structures can have different fields and thus, unlike CFGs, different structural constraints. As a result, we need some means of ensuring that passive edges from one pheno-tree are not being used by active edges predicted by another pheno-tree with incompatible structural constraints. In order for a lexical passive edge to be incorinto a tecto-structure, there must be an acin the corresponding pheno-structure from the sponsor of the active edge at the root of the tecto-structure down to the lexical item. Every daughter field/region is accessible to its mother in a pheno-structure, but transitive closure of this relation is blocked by fields/regions that appear on the left-hand-sides of structural constraints, i.e., the fields/regions that predict tecto-edges. The sponsor of an active edge only has access through a blocking field/region if it possesses the key issued by that field/region. This key is given to the predicting edge only if it agrees to use up all the daughters under the blocking node. Topological inaccessibility makes parsing of scrambling-related constructions more efficient. In a typical grammar, active tecto-edges are either prevented outright from using large portions of inaccessible input, or required to use an existing passive edge as the only means of access. Figure 2 shows a well-formed pheno-tree for German Figure 2: A well-formed pheno-tree for German. with not only clauses but NP regions and PP regions that define those categories&apos; internal struc- Figure 3 shows its corresponding tecto- NP VP /N Pro V CP us Figure 3: The well-formed tecto-tree for Figure 2. When the embedded VP dominating seeks an NP daughter, it must simply match the</abstract>
<title confidence="0.722264166666667">NP AuxP I VN Pro VP Aux er NP / hat I I TV I I gesehen N I</title>
<author confidence="0.874766">den_Mann</author>
<abstract confidence="0.997031135593221">sa te mit NP dem Teleskop clause2 Ich sagte clausei vc nf daf3 npri cf mf sprf nof gesehen hat ppr n INI nof den Mann mit dem Teleskop 289 NP edge for npri. The other embedded NP is inside a blocking ppr, and the subject NP is not in the yield of the clausej that sponsored this VP. Notice the internals of are inaccessible to the dominating from the CP it offers of a The result is that clauses are parsed largely independently. 5 Future Work We are currently implementing a compiler based on this formalism in SICStus Prolog. The input to the compiler is a topological grammar and the output is a Prolog parser for that grammar. While there are no corpora sufficiently annotated for this model, the topologically annotated Verbmobil II corpus of German comes the closest. Based on a grammar with 74 phenogrammatical rules and 72 tectogrammatical rules extracted from 87 reannotated sentences of this corpus, our parser takes an average of 8.26 seconds per sentence to parse a larger set of 125 sentences from the same corpus on a Celeron 600 MHz computer running Windows XP. Much of the VM-II corpus consists of relatively simple utterances, and there were no recursive tectogrammatical rules, a significant obstacle for any purely top-down parser. The next step in implementation is to integrate bottom-up or mixed control into tectogrammatical parsing to more closely constrain the number of active edges predicted. A great deal more static analysis of parsing rule interaction and morphological analysis must also be performed for tractable parsing. The space of parsing algorithms that this formalism supports needs to be mapped out to match syntactic properties of grammars with optimal algorithms for them. A significant amount of experimentation also needs to be done on providing the right higher-level constructs to grammarwriters that will reduce the complexity that comes with using this more flexible formalism. This may also lead to simplifications that could eventually be parametrised and statistically estimated to produce efficient large-scale language models for FWO languages that can capture more semantic information.</abstract>
<note confidence="0.817979444444445">References W. Browne. 1974. On the problem of enclitic placement in Serbo-Croatian. In R. D. Brecht and V. Chvany, editors, Transformational Syn- 10 of Slavic Materials. of Slavic Languages and Literatures, University of Michigan. Collins. 1999. Statistical Models for Language Parsing. thesis, University</note>
<abstract confidence="0.883580133333333">of Pennsylvania. H. Curry. 1961. Some logical aspects of grammatistructure. In Jacobson, editor, of Language and its Mathematical Aspects: Proceedings of the Twelfth Symposium in Applied Mathematics, pages 56-68. American Mathematical Society. D. Duchier. 2001. Lexicalized syntax and topology for non-projective dependency grammar. In G.-J. Kruieditor, of the Joint Formal Grammar Conference /Seventh Meeting on the Mathematics of Language. T. Goetz and G. Penn. 1997. A proposed linear specification language. Arbeitspapier des SFB 340 134, Ebarhard-Karls-Unviersitat Tubingen. . Johnson. 1985. Parsing discontinuous constituents.</abstract>
<note confidence="0.945109666666667">of the 23rd Annual Meeting of the Association for Computational Linguistics. R. Kaplan and J. Bresnan. 1982. Lexical-functional grammar: A formal system for grammatical repre- In J. Bresnan, editor, Mental Repreof Grammatical Relations. Press. Kathol. 2000. Syntax. Univ. Press. S. Manandhar. 1995. Deterministic consistency checkof LP constraints. In of the 7th of the EACL, 165-172. K. Oliva. 1992. The proper treatment of word orin HPSG. In of the 14th International Conference on Computational Linguistics, volume 1, pages 184-190. G. Penn. 1997. On the plausibility of purely structural</note>
<abstract confidence="0.826857636363636">wh-fronting. In of the Second European Conference on Formal Description of Slavic Languages. S. Shieber and Y. Schabes. 1990. Synchronous tree adgrammars. In of the 13th International Conference on Computational Linguistics, volume 3, pages 1-6. 0. Suhre. 1999. Computational aspects of a grammar formalism for languages with freer word order. Master&apos;s thesis, Eberh ard-K arl s-Universi tat Ttibingen.</abstract>
<intro confidence="0.576809">290</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>W Browne</author>
</authors>
<title>On the problem of enclitic placement in Serbo-Croatian. In</title>
<date>1974</date>
<booktitle>Slavic Transformational Syntax,</booktitle>
<volume>10</volume>
<editor>R. D. Brecht and C. V. Chvany, editors,</editor>
<institution>University of Michigan.</institution>
<contexts>
<context position="6064" citStr="Browne, 1974" startWordPosition="936" endWordPosition="937">t is missing here is a primitive in the formalism for talking about contiguous substrings that may not have a semantic, tectogrammatical significance, and a primitive for talking about nontectogrammatical regions over which word order constraints are expressed. Examples of the former are quite evident in the Slavic languages, such as with second-position clitics. As their name suggests, these clitics occur after something in first position. That something can be a normal tectogrammatical constituent, like an NP, or it can be a prosodic word, such as a preposition and first adjective of an NP (Browne, 1974), or, in certain circumstances, it can be a sequence of discourselinked NPs (Penn, 1997). Of the latter, probably the best-known example is the German Mittelfeld. Within this field, pronouns generally precede prosodically heavier NPs (and with a particular order prescribed among multiple pronouns), and temporal adjuncts generally precede locatival adjuncts. It is false to claim that these ordering constraints holds only within a VP or over an entire clause. The Mittelfeld is, in fact, defined in linear terms, as the substring bounded on the left by either a complementizer or a finite verb, and</context>
</contexts>
<marker>Browne, 1974</marker>
<rawString>W. Browne. 1974. On the problem of enclitic placement in Serbo-Croatian. In R. D. Brecht and C. V. Chvany, editors, Slavic Transformational Syntax, volume 10 of Michigan Slavic Materials. Dept. of Slavic Languages and Literatures, University of Michigan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Collins</author>
</authors>
<title>Head-Driven Statistical Models for Natural Language Parsing.</title>
<date>1999</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="1601" citStr="Collins (1999)" startWordPosition="241" endWordPosition="242"> and grammatical function assignment, i.e., &amp;quot;who did what to whom,&amp;quot; will be just as important as a probabilistic model&apos;s ability to predict the next word in a string. In striving to represent useful meaning relations, we, and the annotated corpora we use, have dutifully followed the common assumption in linguistics that the assignment of relations are artifacts of configurational ones — primitive relationships between nodes in phrasestructure trees licensed by a grammar. In the case of parsing with English, there have been some remarkable successes in the last five years, most notably that of Collins (1999) and several successive improvements, who use knowledge about headedness and subcategorisation, traditional n-grams and some information about unbounded dependencies to dramatically improve on our ability to predict the most likely phrasestructure tree given a string of words — with the tacit assumption that this tree has something to do with interpretation. While there have also been more modest successes with purely dependencybased grammars in the realm of freer word-order (FWO) languages, these often map dependency trees to phrase structure trees, and even agreeing on what the best phrase-s</context>
</contexts>
<marker>Collins, 1999</marker>
<rawString>. Collins. 1999. Head-Driven Statistical Models for Natural Language Parsing. Ph.D. thesis, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Curry</author>
</authors>
<title>Some logical aspects of grammatical structure.</title>
<date>1961</date>
<booktitle>Structure of Language and its Mathematical Aspects: Proceedings of the Twelfth Symposium in Applied Mathematics,</booktitle>
<pages>56--68</pages>
<editor>In Jacobson, editor,</editor>
<publisher>American Mathematical Society.</publisher>
<contexts>
<context position="3573" citStr="Curry (1961)" startWordPosition="551" endWordPosition="552">ious ad hoc devices under names such as &amp;quot;emancipation&amp;quot; to make exceptions where these notions 283 of contiguity do not agree. The constraints from these levels of linguistic structure interact, and phrases — of some variety — are the basic units for defining this interaction. For computational purposes, these constraints are interesting because they can be used to restrict search and, in the context of statistical parsing, to militate against less likely interpretations. 2 Kinds of Constituency There has, in fact, been a considerable undercurrent of linguistics research, beginning as early as Curry (1961), that challenges the Chomskyan assumption that one flavour of constituency exists on which constraints from all of these levels of linguistic structure can happily agree. Curry (1961) distinguished what he called tectogrammatical structure, on which semantic interpretation takes place, from a pheno grammatical structure, which deals with word order, morphology and (dis)contiguities. Much of this work, including Curry&apos;s, has not been very formal. The purpose of this paper is to present one possible formalisation of it, and in a manner particularly consistent with how Curry&apos;s work has developed</context>
</contexts>
<marker>Curry, 1961</marker>
<rawString>H. Curry. 1961. Some logical aspects of grammatical structure. In Jacobson, editor, Structure of Language and its Mathematical Aspects: Proceedings of the Twelfth Symposium in Applied Mathematics, pages 56-68. American Mathematical Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Duchier</author>
</authors>
<title>Lexicalized syntax and topology for non-projective dependency grammar.</title>
<date>2001</date>
<booktitle>Proceedings of the Joint Formal Grammar Conference /Seventh Meeting on the Mathematics of Language.</booktitle>
<editor>In G.-J. Kruijff, editor,</editor>
<contexts>
<context position="8048" citStr="Duchier (2001)" startWordPosition="1250" endWordPosition="1251">parse into linearly defined fields and regions. The present formalism consists of two parallel representational devices, one being this extended CFG and the 284 other, an interpretive tectogrammatical tree structure with potentially crossing links. Along with these come constraints that associate substructures from the two representations, in a very similar spirit to LFG structural correspondence functions. The idea of using topological fields as a guide for general parsing appears to have originated with Oliva (1992); more recent work primarily folds in parochial facts from German, including Duchier (2001), which presents German topological parsing as a constraint satisfaction problem. The present approach actually received its inspiration initially from Slavic language wordorder data, but can be applied equally well to German. Synchronous tree-adjoining grammars (Shieber and Schabes, 1990) bear some resemblance to the parallel derivations used here, although the same constituents are used there in both. 3 Formalism We can state three characterizing assumptions that restrict the expressive power of this formalism: • Topological Linearity: all word-order constraints can be witnessed by a topolog</context>
</contexts>
<marker>Duchier, 2001</marker>
<rawString>D. Duchier. 2001. Lexicalized syntax and topology for non-projective dependency grammar. In G.-J. Kruijff, editor, Proceedings of the Joint Formal Grammar Conference /Seventh Meeting on the Mathematics of Language.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Goetz</author>
<author>G Penn</author>
</authors>
<title>A proposed linear specification language.</title>
<date>1997</date>
<booktitle>Arbeitspapier des SFB 340 134, Ebarhard-Karls-Unviersitat Tubingen.</booktitle>
<contexts>
<context position="15907" citStr="Goetz and Penn, 1997" startWordPosition="2547" endWordPosition="2550"> the mother or daughter constituents in a tectogrammatical rule. In the absence of any indexed constraints, a tecto-rule makes no assumptions about the linear relationships among its daughters. Relative precedence and immediate precedence can be used to describe traditional phrase structure, where it exists, which can also be provided as an idiom: cbo &gt; 01 ... On. Note that, as with traditional ID/LP, compaction can be specified in the absence of precedence, which serves to specify contiguity separately from linear order; unlike ID/LP, precedence can be specified in the absence of contiguity (Goetz and Penn, 1997; Suhre, 1999). Manandhar (1995) has a similar approach to linear precedence. 4 Parsing Just as with CFGs, there are a number of different control strategies that could be imagined for parsing with this topological formalism. The one presented here incorporates elements that are reminiscent of naive bottom-up, top-down and left-corner parsing. Information about headedness or statistically estimated parameters would be incorporated into a more sophisticated large-scale parser. For simplicity, the exposition here assumes that for every field or region, f I r, there is at most one structural cons</context>
</contexts>
<marker>Goetz, Penn, 1997</marker>
<rawString>T. Goetz and G. Penn. 1997. A proposed linear specification language. Arbeitspapier des SFB 340 134, Ebarhard-Karls-Unviersitat Tubingen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johnson</author>
</authors>
<title>Parsing discontinuous constituents.</title>
<date>1985</date>
<booktitle>In Proceedings of the 23rd Annual Meeting of the Association for Computational Linguistics.</booktitle>
<contexts>
<context position="12372" citStr="Johnson (1985)" startWordPosition="1955" endWordPosition="1956">s topologically into fields: Definition 3 Given a topological signature, a P &gt; phenogrammatical rule is of the form r d1... 04,, where r E Region, the di Desc(Field), and n &gt; 0. When we look at the parse tree that corresponds to a derivation with a set of pheno-rules over some string, we see that every field and region can account for some contiguous substring that its subtree dominates. This is called the yield of that field or region. We can extend this notion of yield to tectogrammatical categories, although the substrings that correspond to these may not be contiguous. We could, following Johnson (1985), think of yields as bit vectors defined over a fixed length corresponding to the length of the input, for example. Structural constraints constrain pheno-yields in terms of tecto-yields and vice versa. We look at them in terms of whether one covers another, i.e., substring inclusion. Definition 4 Given a topological signature, the structural constraints, C, over that signature are, for every 0 E L, f E Field, and r E Region: • covering: 0 covers f, covers r, f covered_by 0, r covered_by 0, • matching: 0 matches f, 0 matches r, f matched_by 0, r matched_by 0, • linkage: rkf,f ,ri, • compaction</context>
</contexts>
<marker>Johnson, 1985</marker>
<rawString>. Johnson. 1985. Parsing discontinuous constituents. In Proceedings of the 23rd Annual Meeting of the Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kaplan</author>
<author>J Bresnan</author>
</authors>
<title>Lexical-functional grammar: A formal system for grammatical representation.</title>
<date>1982</date>
<booktitle>The Mental Representation of Grammatical Relations.</booktitle>
<editor>In J. Bresnan, editor,</editor>
<publisher>MIT Press. A. Kathol.</publisher>
<contexts>
<context position="4293" citStr="Kaplan and Bresnan, 1982" startWordPosition="660" endWordPosition="663">straints from all of these levels of linguistic structure can happily agree. Curry (1961) distinguished what he called tectogrammatical structure, on which semantic interpretation takes place, from a pheno grammatical structure, which deals with word order, morphology and (dis)contiguities. Much of this work, including Curry&apos;s, has not been very formal. The purpose of this paper is to present one possible formalisation of it, and in a manner particularly consistent with how Curry&apos;s work has developed within HPSG (Kathol, 2000). The one exception to this informality, LexicalFunctional Grammar (Kaplan and Bresnan, 1982), is worth noting, since it is also widely used by computational linguists. LFG, to its credit, had the foresight to distinguish two different kinds of structure very early on. One of them, functional or f-structure, is represented using a feature structure that directly indicates thematic role and grammatical function assignment, among other things, without any appeal to a primitive &amp;quot;fconstituent.&amp;quot; While a more conservative representation (a phrase structure tree) will be used here for tectogrammatical structure, it would be entirely consistent with the spirit of the present work to use featu</context>
</contexts>
<marker>Kaplan, Bresnan, 1982</marker>
<rawString>R. Kaplan and J. Bresnan. 1982. Lexical-functional grammar: A formal system for grammatical representation. In J. Bresnan, editor, The Mental Representation of Grammatical Relations. MIT Press. A. Kathol. 2000. Linear Syntax. Oxford Univ. Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Manandhar</author>
</authors>
<title>Deterministic consistency checking of LP constraints.</title>
<date>1995</date>
<booktitle>In Proceedings of the 7th Conference of the EACL,</booktitle>
<pages>165--172</pages>
<contexts>
<context position="15939" citStr="Manandhar (1995)" startWordPosition="2553" endWordPosition="2554"> in a tectogrammatical rule. In the absence of any indexed constraints, a tecto-rule makes no assumptions about the linear relationships among its daughters. Relative precedence and immediate precedence can be used to describe traditional phrase structure, where it exists, which can also be provided as an idiom: cbo &gt; 01 ... On. Note that, as with traditional ID/LP, compaction can be specified in the absence of precedence, which serves to specify contiguity separately from linear order; unlike ID/LP, precedence can be specified in the absence of contiguity (Goetz and Penn, 1997; Suhre, 1999). Manandhar (1995) has a similar approach to linear precedence. 4 Parsing Just as with CFGs, there are a number of different control strategies that could be imagined for parsing with this topological formalism. The one presented here incorporates elements that are reminiscent of naive bottom-up, top-down and left-corner parsing. Information about headedness or statistically estimated parameters would be incorporated into a more sophisticated large-scale parser. For simplicity, the exposition here assumes that for every field or region, f I r, there is at most one structural constraint of each variety that univ</context>
</contexts>
<marker>Manandhar, 1995</marker>
<rawString>S. Manandhar. 1995. Deterministic consistency checking of LP constraints. In Proceedings of the 7th Conference of the EACL, pages 165-172.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Oliva</author>
</authors>
<title>The proper treatment of word order in HPSG.</title>
<date>1992</date>
<booktitle>In Proceedings of the 14th International Conference on Computational Linguistics,</booktitle>
<volume>1</volume>
<pages>184--190</pages>
<contexts>
<context position="7957" citStr="Oliva (1992)" startWordPosition="1236" endWordPosition="1237">different about these extended CFGs is that they do not provide interpretations — only a parse into linearly defined fields and regions. The present formalism consists of two parallel representational devices, one being this extended CFG and the 284 other, an interpretive tectogrammatical tree structure with potentially crossing links. Along with these come constraints that associate substructures from the two representations, in a very similar spirit to LFG structural correspondence functions. The idea of using topological fields as a guide for general parsing appears to have originated with Oliva (1992); more recent work primarily folds in parochial facts from German, including Duchier (2001), which presents German topological parsing as a constraint satisfaction problem. The present approach actually received its inspiration initially from Slavic language wordorder data, but can be applied equally well to German. Synchronous tree-adjoining grammars (Shieber and Schabes, 1990) bear some resemblance to the parallel derivations used here, although the same constituents are used there in both. 3 Formalism We can state three characterizing assumptions that restrict the expressive power of this f</context>
</contexts>
<marker>Oliva, 1992</marker>
<rawString>K. Oliva. 1992. The proper treatment of word order in HPSG. In Proceedings of the 14th International Conference on Computational Linguistics, volume 1, pages 184-190.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Penn</author>
</authors>
<title>On the plausibility of purely structural multiple wh-fronting.</title>
<date>1997</date>
<booktitle>In Proceedings of the Second European Conference on Formal Description of Slavic Languages.</booktitle>
<contexts>
<context position="6152" citStr="Penn, 1997" startWordPosition="951" endWordPosition="952">that may not have a semantic, tectogrammatical significance, and a primitive for talking about nontectogrammatical regions over which word order constraints are expressed. Examples of the former are quite evident in the Slavic languages, such as with second-position clitics. As their name suggests, these clitics occur after something in first position. That something can be a normal tectogrammatical constituent, like an NP, or it can be a prosodic word, such as a preposition and first adjective of an NP (Browne, 1974), or, in certain circumstances, it can be a sequence of discourselinked NPs (Penn, 1997). Of the latter, probably the best-known example is the German Mittelfeld. Within this field, pronouns generally precede prosodically heavier NPs (and with a particular order prescribed among multiple pronouns), and temporal adjuncts generally precede locatival adjuncts. It is false to claim that these ordering constraints holds only within a VP or over an entire clause. The Mittelfeld is, in fact, defined in linear terms, as the substring bounded on the left by either a complementizer or a finite verb, and on the right by a periphrastic verbal complex. Linear fields like the Mittelfeld, usual</context>
<context position="15907" citStr="Penn, 1997" startWordPosition="2549" endWordPosition="2550">r or daughter constituents in a tectogrammatical rule. In the absence of any indexed constraints, a tecto-rule makes no assumptions about the linear relationships among its daughters. Relative precedence and immediate precedence can be used to describe traditional phrase structure, where it exists, which can also be provided as an idiom: cbo &gt; 01 ... On. Note that, as with traditional ID/LP, compaction can be specified in the absence of precedence, which serves to specify contiguity separately from linear order; unlike ID/LP, precedence can be specified in the absence of contiguity (Goetz and Penn, 1997; Suhre, 1999). Manandhar (1995) has a similar approach to linear precedence. 4 Parsing Just as with CFGs, there are a number of different control strategies that could be imagined for parsing with this topological formalism. The one presented here incorporates elements that are reminiscent of naive bottom-up, top-down and left-corner parsing. Information about headedness or statistically estimated parameters would be incorporated into a more sophisticated large-scale parser. For simplicity, the exposition here assumes that for every field or region, f I r, there is at most one structural cons</context>
</contexts>
<marker>Penn, 1997</marker>
<rawString>G. Penn. 1997. On the plausibility of purely structural multiple wh-fronting. In Proceedings of the Second European Conference on Formal Description of Slavic Languages.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Shieber</author>
<author>Y Schabes</author>
</authors>
<title>Synchronous tree adjoining grammars.</title>
<date>1990</date>
<booktitle>In Proceedings of the 13th International Conference on Computational Linguistics,</booktitle>
<volume>3</volume>
<pages>1--6</pages>
<contexts>
<context position="8338" citStr="Shieber and Schabes, 1990" startWordPosition="1289" endWordPosition="1292">ints that associate substructures from the two representations, in a very similar spirit to LFG structural correspondence functions. The idea of using topological fields as a guide for general parsing appears to have originated with Oliva (1992); more recent work primarily folds in parochial facts from German, including Duchier (2001), which presents German topological parsing as a constraint satisfaction problem. The present approach actually received its inspiration initially from Slavic language wordorder data, but can be applied equally well to German. Synchronous tree-adjoining grammars (Shieber and Schabes, 1990) bear some resemblance to the parallel derivations used here, although the same constituents are used there in both. 3 Formalism We can state three characterizing assumptions that restrict the expressive power of this formalism: • Topological Linearity: all word-order constraints can be witnessed by a topology defined on some linear region. • Topological Locality: discontiguities may exist due to scrambling, but they are not unbounded.1 Hence all discontiguities can be characterized in some local region of bounded topological size. • Qualified Isomorphy: While linear and local regions are not </context>
</contexts>
<marker>Shieber, Schabes, 1990</marker>
<rawString>S. Shieber and Y. Schabes. 1990. Synchronous tree adjoining grammars. In Proceedings of the 13th International Conference on Computational Linguistics, volume 3, pages 1-6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Suhre</author>
</authors>
<title>Computational aspects of a grammar formalism for languages with freer word order. Master&apos;s thesis, Eberh ard-K arl s-Universi tat Ttibingen.</title>
<date>1999</date>
<contexts>
<context position="15921" citStr="Suhre, 1999" startWordPosition="2551" endWordPosition="2552">r constituents in a tectogrammatical rule. In the absence of any indexed constraints, a tecto-rule makes no assumptions about the linear relationships among its daughters. Relative precedence and immediate precedence can be used to describe traditional phrase structure, where it exists, which can also be provided as an idiom: cbo &gt; 01 ... On. Note that, as with traditional ID/LP, compaction can be specified in the absence of precedence, which serves to specify contiguity separately from linear order; unlike ID/LP, precedence can be specified in the absence of contiguity (Goetz and Penn, 1997; Suhre, 1999). Manandhar (1995) has a similar approach to linear precedence. 4 Parsing Just as with CFGs, there are a number of different control strategies that could be imagined for parsing with this topological formalism. The one presented here incorporates elements that are reminiscent of naive bottom-up, top-down and left-corner parsing. Information about headedness or statistically estimated parameters would be incorporated into a more sophisticated large-scale parser. For simplicity, the exposition here assumes that for every field or region, f I r, there is at most one structural constraint of each</context>
</contexts>
<marker>Suhre, 1999</marker>
<rawString>0. Suhre. 1999. Computational aspects of a grammar formalism for languages with freer word order. Master&apos;s thesis, Eberh ard-K arl s-Universi tat Ttibingen.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>