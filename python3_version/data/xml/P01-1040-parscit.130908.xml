<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000035">
<title confidence="0.998829">
A Common Framework for Syntactic Annotation
</title>
<author confidence="0.997767">
Nancy Ide
</author>
<affiliation confidence="0.779602666666667">
Department of Computer Science
Vassar College
Poughkeepsie, NY 12604-0520 USA
</affiliation>
<email confidence="0.99765">
ide@cs.vassar.edu
</email>
<author confidence="0.507822">
Laurent Romary
</author>
<affiliation confidence="0.331662">
LORIA/CNRS
</affiliation>
<address confidence="0.870184">
Campus Scientifique, B.P. 239
54506 Vandoeuvre-l❑s-Nancy, FRANCE
</address>
<email confidence="0.998314">
romary@loria.fr
</email>
<sectionHeader confidence="0.99738" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999911">
It is widely recognized that the
proliferation of annotation schemes
runs counter to the need to re-use
language resources, and that standards
for linguistic annotation are becoming
increasingly mandatory. To answer this
need, we have developed a
representation framework comprised of
an abstract model for a variety of
different annotation types (e.g.,
morpho-syntactic tagging, syntactic
annotation, co-reference annotation,
etc.), which can be instantiated in
different ways depending on the
annotator❑s approach and goals. In this
paper we provide an overview of our
representation framework and
demonstrate its applicability to
syntactic annotation. We show how the
framework can contribute to
comparative evaluation and merging of
parser output and diverse syntactic
annotation schemes.
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99996032">
It is widely recognized that the proliferation of
annotation schemes runs counter to the need to
re-use language resources, and that standards for
linguistic annotation are becoming increasingly
mandatory. In particular, there is a need for a
general framework for linguistic annotation that
is flexible and extensible enough to
accommodate different annotation types and
different theoretical and practical approaches,
while at the same time enabling their
representation in a []pivot[] format that can serve
as the basis for comparative evaluation of parser
output, such as PARSEVAL (Harrison, et al.,
1991), as well as the development of reusable
editing and processing tools.
To answer this need, we have developed a
representation framework comprised of an
abstract model for a variety of different
annotation types (e.g., morpho-syntactic
tagging, syntactic annotation, co-reference
annotation, etc.), which can be instantiated in
different ways depending on the annotator❑s
approach and goals. We have implemented both
the abstract model and various instantiations
using XML schemas (Thompson, et al., 2000),
the Resource Definition Framework (RDF)
(Lassila and Swick, 2000) and RDF schemas
(Brickley and Guha, 2000), which enable
description and definition of abstract data
models together with means to interpret, via the
model, information encoded according to
different conventions. The results have been
incorporated into XCES (Ide, et al., 2000a), part
of the EAGLES Guidelines developed by the
Expert Advisory Group on Language
Engineering Standards (EAGLES)1. The XCES
provides a ready-made, standard encoding
format together with a data architecture
designed specifically for linguistically annotated
corpora.
In this paper we provide an overview of our
representation framework and demonstrate its
applicability to syntactic annotation. The
framework has been applied to the
representation of terminology (Terminological
Markup Framework2, ISO project n.16642) and
computational lexicons (Ide, et al., 2000b), thus
demonstrating its general applicability for a
variety of linguistic annotation types. We also
show how the framework can contribute to
</bodyText>
<footnote confidence="0.9973165">
1 http://www.ilc.pi.cnr.it/EAGLES/home.html
2 http://www.loria.fr/projects/TMF
</footnote>
<bodyText confidence="0.930248">
comparison and merging of diverse syntactic
annotation schemes.
</bodyText>
<sectionHeader confidence="0.919775" genericHeader="method">
2 Current Practice
</sectionHeader>
<bodyText confidence="0.994940333333333">
At the highest level of abstraction, syntactic
annotation schemes represent the following
kinds of information:
</bodyText>
<listItem confidence="0.883901857142857">
• Category information: labeling of
components based on syntactic category
(e.g., noun phrase, prepositional phrase),
syntactic role (subject, object), etc.;
• Dependency information: relations among
components, including constituency
relations, grammatical role relations, etc.
</listItem>
<bodyText confidence="0.966998428571428">
For example, the annotation in Figure 1, drawn
from the Penn Treebank II3 (hereafter, PTB),
uses LISP-like list structures to specify
constituency relations and provide syntactic
category labels for constituents. Some
grammatical roles (subject, object, etc.) are
implicit in the structure of the encoding: for
instance, the nesting of the NP []the front room[]
implies that the NP is the object of the
prepositional phrase, whereas the position of the
NP []him[] following and at the same level as the
VP node implies that this NP is the grammatical
object. Additional processing (or human
intervention) is required to render these relations
explicit. Note that the PTB encoding provides
some explicit information about grammatical
role, in that []subject[] is explicitly labeled
(although its relation to the verb remains
implicit in the structure), but most relations
(e.g., []object[]) are left implicit. Relations
among non-contiguous elements demand a
special numbering mechanism to enable cross-
reference, as in the specification of the NP-SBJ
of the embedded sentence by reference to the
earlier NP-SBJ-1 node.
Although they differ in the labels and in
some cases the function of various nodes in the
tree, most annotation schemes provide a similar
constituency-based representation of relations
among syntactic components (see Abeille,
forthcoming, for a comprehensive survey of
syntactic annotation schemes). In contrast,
dependency schemes (e.g., Sleator and
Temperley, 1993; Tapanainen and Jarvinen,
1997; Carroll, et al., forthcoming) do not
</bodyText>
<footnote confidence="0.772246">
3 http://www.cis.upenn.edu/treebank
</footnote>
<bodyText confidence="0.999796777777778">
provide a constituency analysis4 but rather
specify grammatical relations among elements
explicitly; for example, the sentence []Paul
intends to leave IBM[] could be represented as
shown in Figure 2, where the predicate is the
relation type, the first argument is the head, the
second the dependent, and additional arguments
may provide category-specific information (e.g.,
introducer for prepositional phrases, etc.).
</bodyText>
<figure confidence="0.69022125">
((S (NP-SBJ-1 Jones)
(VP followed)
(NP him)
(PP-DIR into
(NP the front room))
,
(S-ADV (NP-SBJ *-1)
(VP closing
(NP the door)
(PP behind
(NP him)))))
.))
</figure>
<figureCaption confidence="0.9047375">
Figure 1. PTB annotation of []Jones followed him
into the front room, closing the door behind
</figureCaption>
<equation confidence="0.8779236">
him.[]
subj(intend,Paul,_)
xcomp(intend,leave,to)
subj(leave,Paul)
dobj(leave,IBM,_)
</equation>
<figureCaption confidence="0.9846735">
Figure 2. Dependency annotation according to
Carroll, Minnen, and Briscoe (forthcoming)
</figureCaption>
<sectionHeader confidence="0.994863" genericHeader="method">
3 A Model for Syntactic Annotation
</sectionHeader>
<bodyText confidence="0.9511535">
The goal in the XCES is to provide a framework
for annotation that is theory and tagset
independent. We accomplish this by treating the
description of any specific syntactic annotation
scheme as a process involving several
knowledge sources that interact at various
levels. The process allows one to specify, on the
one hand, the informational properties of the
scheme (i.e., its capacity to represent a given
piece of information), and, on the other, the way
the scheme can be instantiated (e.g., as an XML
document). Figure 3 shows the overall
architecture of the XCES framework for
syntactic annotation.
4 So-called []hybrid systems[] (e.g., Basili, et al., 199;
Grefenstette, 1999) combine constituency analysis and
functional dependencies, usually producing a shallow
constituent parse that brackets major phrase types and
identifying the dependencies between heads of
constituents.
</bodyText>
<figure confidence="0.997775538461538">
STRUCTURAL
SKELETON
DATA
CATEGORY
REGISTRY
Universal Resources
General Markup Language
Abstract
XML
encoding
Virtual
AML
Dialect
Specification
Data
Category
Specification
Concrete
AML
Project Specific Resources
Concrete
XML
encoding
XSLT Script
Non-XML
Encoding
</figure>
<figureCaption confidence="0.999787">
Figure 3. Overall architecture of the XCES annotation framework
</figureCaption>
<bodyText confidence="0.995456898305085">
Two knowledge sources are used define the
abstract model:
Data Category Registry: Within the framework
of the XCES we are establishing an inventory of
data categories for syntactic annotation, initially
based on the EAGLES Recommendations for
Syntactic Annotation of Corpora (Leech et al.,
1996). Data categories are defined using RDF
descriptions that formalize the properties
associated with each. The categories are
organized in a hierarchy, from general to
specific. For example, a general dependent
relation may be defined, which may have one of
the possible values argument or modifier;
argument in turn may have the possible values
subject, object, or complement; etc.5 Note that
RDF descriptions function much like class
definitions in an object-oriented programming
language: they provide, effectively, templates
that describe how objects may be instantiated,
but do not constitute the objects themselves.
Thus, in a document containing an actual
annotation, several objects with the type
argument may be instantiated, each with a
different value. The RDF schema ensures that
each instantiation of argument is recognized as a
sub-class of dependent and inherits the
appropriate properties.
Structural Skeleton: a domain-dependent
abstract structural framework for syntactic
5 Cf. the hierarchy in Figure 1.1, Caroll, Minnen, and
Briscoe (forthcoming).
annotations, capable of fully capturing all the
information in a specific annotation scheme. The
structural skeleton for syntactic annotations is
described below in section 12.1.
Two other knowledge sources are used to
define a project-specific format for the
annotation scheme, in terms of its expressive
power and its instantiation in XML:
Data Category Specification (DCS): describes
the set of data categories that can be used within
a given annotation scheme, again using RDF
schema. The DCS defines constraints on each
category, including restrictions on the values
they can take (e.g., &amp;quot;text with markup&amp;quot;; a
&amp;quot;picklist&amp;quot; for grammatical gender, or any of the
data types defined for XML), restrictions on
where a particular data category can appear
(level in the structural hierarchy). The DCS may
include a subset of categories from the DCR
together with application-specific categories
additionally defined in the DCS. The DCS also
indicates a level of granularity based on the
DCR hierarchy.
Dialect specification: defines, using XML
schemas, XSLT scripts, and XSL style sheets,
the project-specific XML format for syntactic
annotations. The specifications may include:
</bodyText>
<listItem confidence="0.910060826086957">
• Data category instantiation styles: Data
categories may be realized in a project-
specific scheme in any of a variety of
formats. For example, if there exists a data
category NounPhrase, this may be realized
as an &lt;NounPhrase&gt; element (possibly
containing additional elements), a typed
element (e.g. &lt;cat type=NounPhrase&gt;), tag
content (e.g., &lt;cat&gt;NounPhrase&lt;/cat&gt;), etc.
• Data category vocabulary styles: Project-
specific formats can utilize names different
from those in the Data Category Registry;
for instance, a DCR specification for
NounPhrase can be expressed as ❑NP❑ or
❑SN❑ (❑syntagme nominal❑) in the project-
specific format, if desired.
• Expansion structures: A project-specific
format may alter the structure of the
annotation as expressed using the structural
skeleton. For example, it may be desirable
for processing or other reasons to create two
sub-nodes under a given &lt;struct&gt; node, one
to group features and one to group relations.
</listItem>
<bodyText confidence="0.999952347826087">
The combination of the structural skeleton
and the DCS defines a virtual annotation
markup language (AML). Any information
structure that corresponds to a virtual AML has
a canonical expression as an XML document;
therefore, the inter-operability of different
AMLs is dependent only on their compatibility
at the virtual level. As such, virtual AML is the
hub of the annotation framework: it defines a
lingua franca for syntactic annotations that can
be used to compare and merge annotations, as
well as enable design of generic tools for
visualization, editing, extraction, etc.
The combination of a virtual AML with the
Dialect Specification provides the information
necessary to automatically generate a concrete
AML representation of the annotation scheme,
which conforms to the project-specific format
provided in the Dialect Specification. XSLT
filters translate between the representations of
the annotation in concrete and virtual AML, as
well as between non-XML formats (such as the
LISP-like PTB notation) and concrete AML.6
</bodyText>
<subsectionHeader confidence="0.992839">
2.1 The Structural Skeleton
</subsectionHeader>
<bodyText confidence="0.9172968">
For syntactic annotation, we can identify a
general, underlying model that informs current
practice: specification of constituency relations
(with some set of application-specific names and
properties) among syntactic or grammatical
components (also with a set of application-
specific names and properties), whether this is
modeled with a tree structure or the relations are
given explicitly.
Because of the common use of trees in
syntactic annotation, together with the natural
tree-structure of markup in XML documents, we
provide a structural skeleton for syntactic
markup following this model. The most
important element in the skeleton is the
&lt;struct&gt; element, which represents a node
(level) in the syntax tree. &lt;struct&gt; elements may
be recursively nested at any level to reflect the
structure of the corresponding tree. The &lt;struct&gt;
element has the following attributes:
6 Strictly speaking, an application-specific format could be
translated directly into the virtual AML, eliminating the
need for the intermediary concrete AML format. However,
especially for existing formats, it is typically more
straightforward to perform the two-step process.
</bodyText>
<listItem confidence="0.964987555555556">
• type : specifies the node label (e.g., ❑S❑,
❑NP❑, etc.) or points to an object in another
document that provides the value. This
allows specifying complex data items as
annotations. It also enables generating a
single instantiation of an annotation value in
a separate document that can be referenced as
needed.
• xlink : points to the data to which the
annotation applies. In the XCES, we
recommend the use of stand-off
annotation []i.e., annotation that is
maintained in a document separate from the
primary (annotated) data.7 The xlink attribute
uses the XML Path Language (XPath) (Clark
&amp; DeRose, 1999) to specify the location of
the relevant data in the primary document.
• ref : refers to a node defined elsewhere, used
instead of xlink.
• rel˚: specifies a type of relation (e.g., ❑subj❑)
• head : specifies the node corresponding to
the head of the relation
• dependent : specifies the node corresponding
to the dependent of the relation
• introducer : specifies the node corresponding
to an introducing word or phrase
• initial : gives a thematic or semantic role of a
</listItem>
<bodyText confidence="0.958748214285714">
component, e.g., ❑subj❑ for the object of a
by-phrase in a passive sentence.
The hierarchy of &lt;struct&gt; elements
corresponds to the nodes in a phrase structure
analysis; each &lt;struct&gt; element is typed
accordingly. The grammar underlying the
annotation therefore specifies constraints on
embedding that can be instantiated in an XML
schema, which can then be used to prevent or
detect tree structures that do not conform to the
grammar. Conversely, the grammar rules
implicit in annotated treebanks, which are
typically not annotated according to a formal
grammar, can be easily extracted from the
abstract structural encoding.
The skeleton also includes a &lt;feat&gt; (feature)
element, which can be used to provide
additional information (e.g., gender, number)
that is attached to the node in the tree
represented by the enclosing &lt;struct&gt; element.
Like &lt;struct&gt;, this element can be recursively
nested or can point to a description in another
7 The stand-off scheme also provides means to represent
ambiguities, since there can be multiple links between data
and alternative annotations.
document, thereby providing means to associate
information at any level of detail or complexity
to the annotated structure.
Figure 4 shows the annotation from the PTB
(Figure 1) rendered in the abstract XML format.
Note that in this example, relations are encoded
only when they appear explicitly in the original
annotation (therefore, heads of relations default
to ❑unknown❑.) An XSLT script could be used
to create a second XML document that includes
the relations implicit in the embedding (e.g., the
first embedded &lt;struct&gt; with category NP has
relation ❑subject❑, the first VP is the head, etc.).
A strict dependency annotation encoded in the
abstract format uses a flat hierarchy and
specifies all relations explicitly with the rel
attribute, as shown in Figure 5.8
</bodyText>
<sectionHeader confidence="0.989591" genericHeader="method">
4 Using the XCES Scheme
</sectionHeader>
<bodyText confidence="0.999724607142857">
The Virtual AML provides a pivot format that
enables comparison of annotations in different
formats[]including not only different
constituency-based annotations, but also
constituency-based and dependency annotations.
For example, the PTB annotation corresponding
to the dependency annotation in Figure 2 is
shown in Figure 6. Figure 7 gives the
corresponding encoding in the XCES abstract
scheme. It is relatively trivial with an XSLT
script to extract the information in the
dependency annotation (Figure 5) from the PTB
encoding (Figure 7) to produce a nearly identical
dependency encoding. The script would use
rules to make relations that are implicit in the
structure of the PTB encoding explicit (for
example, the ❑xcomp❑ relation that is implicit in
the embedding of the ❑S❑ phrase).
The ability to generate a common
representation for different annotations
overcomes several obstacles that have hindered
evaluation exercises in the past. For instance, the
evaluation technique used in the PARSEVAL
exercise is applicable to phrase structure
analyses only, and cannot be applied to
dependency-style analyses or ❑lexical❑ parsing
frameworks such as finite-state constraint
parsers. As the example above shows, this
</bodyText>
<footnote confidence="0.99278775">
8 For the sake of readability, this encoding assumes that the
sentence ❑Paul intends to leave IBM❑ is marked up as
&lt;s1&gt;&lt;w1&gt;Paul&lt;/w1&gt;&lt;w2&gt;intends&lt;/w2&gt;&lt;w3&gt;to&lt;/w3&gt;&lt;w
4&gt;leave&lt;/w4&gt;&lt;w5&gt;IBM&lt;/w5&gt;&lt;/s1&gt;.
</footnote>
<bodyText confidence="0.967185105263158">
problem can be addressed using the XCES
framework.
It has also been noted that that the PARSEVAL
bracket-precision measure penalizes parsers that
return more structure than exists in the relatively
[]flat[] treebank structures, even if they are
correct (Srinivas, et al., 1995). XSLT scripts can
extract the appropriate information for
comparison purposes while retaining links to
additional parts of the annotation in the original
document, thus eliminating the need to []dumb
down[] parser output in order to participate in the
evaluation exercise. Similarly, information lost
in the transduction from phrase structure to a
dependency-based analysis (as in the example
above), which, as Atwell (1996) points out, may
eliminate grammatical information potentially
required for later processing, can also be
retained.
</bodyText>
<figure confidence="0.922925285714286">
((S (NP-SBJ-1 Paul)
(VP intends)
(S (NP-SBJ *-1)
(VP to
(VP leave
(NP IBM))))
.))
</figure>
<figureCaption confidence="0.97237">
Figure 6. PTB annotation of &amp;quot;Paul intends to
leave IBM.
</figureCaption>
<figure confidence="0.991935892857143">
&lt;struct id=&amp;quot;s0&amp;quot; type=&amp;quot;S&amp;quot;&gt;
&lt;struct id=&amp;quot;s1&amp;quot; type=&amp;quot;NP&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),1,5))&amp;quot;
rel =&amp;quot;SBJ&amp;quot;/&gt;
&lt;struct id=&amp;quot;s2&amp;quot; type=&amp;quot;VP&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),7,8))&amp;quot;/&gt;
&lt;struct id=&amp;quot;s3&amp;quot; type=&amp;quot;NP&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),16,3))&amp;quot;/&gt;
&lt;struct id=&amp;quot;s4&amp;quot; type=&amp;quot;PP&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),20,4))&amp;quot;
rel=&amp;quot;DIR&amp;quot;&gt;
&lt;struct id=&amp;quot;s5&amp;quot; type=&amp;quot;NP&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),25,14))&amp;quot;/&gt;
&lt;/struct&gt;
&lt;struct id=&amp;quot;s6&amp;quot; type=&amp;quot;S&amp;quot; rel=&amp;quot;ADV&amp;quot;&gt;
&lt;struct id=&amp;quot;s7&amp;quot; ref=&amp;quot;s1&amp;quot; type=&amp;quot;NP&amp;quot; rel=&amp;quot;SBJ&amp;quot;/&gt;
&lt;struct id=&amp;quot;s8&amp;quot; type=&amp;quot;VP&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),41,7))&amp;quot;&gt;
&lt;struct id=&amp;quot;s9&amp;quot; type=&amp;quot;NP&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),49,8))&amp;quot;/&gt;
&lt;struct id=&amp;quot;s10&amp;quot; type=&amp;quot;PP&amp;quot; rel=&amp;quot;DIR&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),57,6))&amp;quot;&gt;
&lt;struct id=&amp;quot;s11&amp;quot; type=&amp;quot;NP&amp;quot;
xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),64,3))&amp;quot;/&gt;
&lt;/struct&gt;
&lt;/struct&gt;
&lt;/struct&gt;
&lt;/struct&gt;
</figure>
<figureCaption confidence="0.999924">
Figure 4. The PTB example encoded according to the structural skeleton
</figureCaption>
<bodyText confidence="0.66361025">
&lt;struct rel=&amp;quot;subj&amp;quot; head=&amp;quot;w2&amp;quot; dependent=&amp;quot;w1&amp;quot;/&gt;
&lt;struct rel=&amp;quot;xcomp&amp;quot; head=&amp;quot;w2&amp;quot; dependent=&amp;quot;w4&amp;quot; introducer=&amp;quot;w3&amp;quot;/&gt;
&lt;struct rel=&amp;quot;subj&amp;quot; head=&amp;quot;w4&amp;quot; dependent=&amp;quot;w1&amp;quot;/&gt;
&lt;struct rel=&amp;quot;dobj&amp;quot; head=&amp;quot;w4&amp;quot; dependent=&amp;quot;w5&amp;quot;/&gt;
</bodyText>
<figureCaption confidence="0.933042">
Figure 5. Abstract XML encoding for the dependency annotation in Figure 2.
</figureCaption>
<table confidence="0.9524416">
&lt;struct id=&amp;quot;s0&amp;quot; type=&amp;quot;S❑&gt;
&lt;struct id=&amp;quot;s1&amp;quot; type=&amp;quot;NP❑ target=&amp;quot;w1❑
rel=&amp;quot;SBJ&amp;quot; head=&amp;quot;s2&amp;quot;/&gt;
&lt;struct id=&amp;quot;s2&amp;quot; type=&amp;quot;VP❑ target=&amp;quot;w2&amp;quot;/&gt;
&lt;struct id=&amp;quot;s3&amp;quot; type=&amp;quot;S❑&gt;
&lt;struct id=&amp;quot;s4&amp;quot; ref=&amp;quot;s1&amp;quot;
rel=&amp;quot;SBJ&amp;quot; head=&amp;quot;s6&amp;quot;/&gt;
&lt;struct id=&amp;quot;s5&amp;quot; type=&amp;quot;VP❑ target=&amp;quot;w3&amp;quot;&gt;
&lt;struct id=&amp;quot;s6&amp;quot; type=&amp;quot;VP❑ target=&amp;quot;w4&amp;quot;&gt;
&lt;struct id=❑s7❑ type=&amp;quot;NP❑ target=&amp;quot;w5&amp;quot;/&gt;
</table>
<figure confidence="0.94052375">
&lt;/struct&gt;
&lt;/struct&gt;
&lt;/struct&gt;
&lt;/struct&gt;
</figure>
<figureCaption confidence="0.994279">
Figure 4 : PTB encoding of &amp;quot;Paul intends to leave IBM.&amp;quot;
</figureCaption>
<sectionHeader confidence="0.999676" genericHeader="evaluation">
5 Discussion
</sectionHeader>
<bodyText confidence="0.99925215625">
Despite its seeming complexity, the XCES
framework is designed to reduce overhead for
annotators and users. Part of the work of the
XCES is to provide XML support (e.g.,
development of XSLT scripts, XML schemas,
etc.) for use by the research community, thus
eliminating the need for XML expertise at
each development site. Because XML-
encoded annotated corpora are increasingly
used for interchange between processing and
analytic tools, we are developing XSLT
scripts for mapping, and extraction of
annotated data, import/export of (partially)
annotated material, and integration of results
of external tools into existing annotated data
in XML. Tools for editing annotations in the
abstract format, which automatically generate
virtual AML from Data Category and Dialect
Specifications, are already under development
in the context of work on the Terminological
Markup Language, and a tool for
automatically generating RDF specifications
for user-specified data categories has already
been developed in the SALT project.9 Several
freely distributed interpreters for XSLT have
also been developed (e.g., xt10, Xalan11). In
practice, annotators and users of annotated
corpora will rarely see XML and RDF
instantiations of annotated data; rather, they
will access the data via interfaces that
automatically generate, interpret, and display
the data in easy-to-read formats.
</bodyText>
<footnote confidence="0.9920165">
9 http://www.loria.fr/projets/SALT
10 Clark, J., 1999. XT Version 1991105.
http://www.jclark.com/xml/xt.html
11 http://www.apache.org
</footnote>
<bodyText confidence="0.999956666666667">
The abstract model that captures the
fundamental properties of syntactic annotation
schemes provides a conceptual tool for
assessing the coherence and consistency of
existing schemes and those being developed.
The model enforces clear distinctions between
implicit and explicit information (e.g.,
functional relations implied by structural
relations in constituent analyses), and phrasal
and functional relations. It is alarmingly
common for annotation schemes to represent
these different kinds of information in the
same way, rendering their distinction
computationally intractable (even if they are
perfectly understandable by the informed
human reader). Hand-developed annotation
schemes used in treebanks are often described
informally in guidebooks for annotators,
leaving considerable room for variation; for
example, Charniak (1996) notes that the PTB
implicitly contains more than 10,000 context-
free rules, most of which are used only once.
Comparison and transduction of schemes
becomes virtually impossible under such
circumstances. While requiring that annotators
make relations explicit and consider the
mapping to the XCES abstract format
increases overhead, we feel that the exercise
will help avoid such problems and can only
lead to greater coherence, consistency, and
inter-operability among annotation schemes.
The most important contribution to inter-
operability of annotation schemes is the Data
Category Registry. By mapping site-specific
categories onto definitions in the Registry,
equivalences (and non-equivalences) are made
explicit. Again, the provision of a []standard[]
set of categories, together with the
requirement that scheme-specific categories
</bodyText>
<note confidence="0.48383925">
Grammatical Relation Annotation Scheme. In
Anne Abeill❑ (ed.)Treebanks: Building and
Using Syntactically Annotated Corpora, Kluwer
Academic Publishers.
</note>
<bodyText confidence="0.769832">
are mapped to them where possible, will
contribute to greater consistency and
commonality among annotation schemes.
</bodyText>
<sectionHeader confidence="0.998828" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999984130434783">
The XCES framework for linguistic
annotation is built around some relatively
straightforward ideas: separation of
information conveyed by means of structure
and information conveyed directly by
specification of content categories;
development of an abstract format that puts a
layer of abstraction between site-specific
annotation schemes and standard
specifications; and creation of a Data
Category Registry to provide a reference set
of annotation categories. The emergence of
XML and related standards such as RDF
provides the enabling technology. We are,
therefore, at a point where the creation and
use of annotated data and concerns about the
way it is represented can be treated
separately❑that is, researchers can focus on
the question of what to encode, independent of
the question of how to encode it. The end
result should be greater coherence,
consistency, and ease of use and access for
annotated data.
</bodyText>
<sectionHeader confidence="0.999258" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999628776119403">
Anne Abeill❑ (ed.), forthcoming. Treebanks:
Building and Using Syntactically Annotated
Corpora, Kluwer Academic Publishers.
Eric Atwell, 1996. Comparative evaluation of
grammatical annotation models. In R. Sutcliffe,
H. Koch, A. McElligott (eds.), Industrial
Parsing of Software Manuals, 25-46. Rodopi.
Paul Biron and Ashok Malhotra, 2000. XML
Schema Part 2: Datatypes. W3C Candidate
Recommendation.
http://www.w3.org/TR/xmlschema-2/.
Tim Bray, Jean Paoli and C. Michael Sperberg-
McQueen (eds.), 1998. Extensible Markup
Language (XML).
Dan Brickley and R.V. Guha, 2000. Resource
Description Framework (RDF) Schema
Specification 1.0. http://www.w3.org/TR/rdf-
schema/.
John Carroll, Guido Minnen, and Ted Briscoe,
forthcoming. Parser Evaluation Using a
Eugene Charniak, 1996. Tree-bank grammars.
Proceedings of the 13th National Conference on
Artificial Intelligence, AAAI1196, 1031-36.
James Clark (ed.), 1999. XSL Transformations
(XSLT). http://www.w3.org/TR/xslt.
James Clark and Steven DeRose, 1999. XML Path
Language. http://www.w3.org/TR/xpath.
Philip Harrison, Steven Abney, Ezra Black, Dan
Flickinger, Claudia Gdaniec, Ralph Grishman,
Don Hindle, Bob Ingria, Mitch Marcus,
Beatrice Santorini, and Tomek Strzalkowski,
1991. Evaluating syntax performance of
parser/grammars of English. Proceedings of the
Workshop on Evaluating Natural Language
Processing Systems, 71-77.
Nancy Ide, Patrice Bonhomme, and Laurent
Romary, 2000. XCES: An XML-based Standard
for Linguistic Corpora. Proceedings of the
Second Language Resources and Evaluation
Conference (LREC), 825-30.
Nancy Ide, Adam Kilgarriff, and Laurent Romary,
2000. A Formal Model of Dictionary Structure
and Content. In Proceedings of EURALEX’00,
113-126.
Ora Lassila and Ralph Swick, 1999. Resource
Description framework (RDF) Model and
Syntax. http://www.w3.org/TR/REC-rdf-syntax.
Geoffrey Leech, R. Barnett, and P. Kahrel, 1996.
EAGLES Recommendations for the Syntactic
Annotation of Corpora.
Daniel Sleator and Davy Temperley, 1993. Parsing
English with a link grammar. Third
International Workshop on Parsing
Technologies.
Bangalore Srinivas, Christy Doran, Beth-Ann
Hockey and Avarind Joshi, 1996. An approach
to robust partial parsing and evaluation metrics.
Proceedings of the ESSLI1196 Workshop on
Robust Parsing, 70-82.
Pasi Tapanainen and Timo J❑rvinen. 1997.A non-
projective dependency parser. Proceedings of
the 5th Conference on Applied Natural
Language Processing (ANLP’97), 64-71.
Henry Thompson, David Beech, Murray Maloney,
and Noah Mendelsohn, 2000. XML Schema
Part 1: Structures.
http://www.w3.org/TR/xmlschema-1/.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.896298">
<title confidence="0.999868">A Common Framework for Syntactic Annotation</title>
<author confidence="0.999782">Nancy Ide</author>
<affiliation confidence="0.99477">Department of Computer Science Vassar College</affiliation>
<address confidence="0.937712">Poughkeepsie, NY 12604-0520 USA</address>
<email confidence="0.999743">ide@cs.vassar.edu</email>
<author confidence="0.997373">Laurent Romary</author>
<affiliation confidence="0.983957">LORIA/CNRS</affiliation>
<address confidence="0.995135">Campus Scientifique, B.P. 239 54506 Vandoeuvre-l❑s-Nancy, FRANCE</address>
<email confidence="0.999115">romary@loria.fr</email>
<abstract confidence="0.999801208333333">It is widely recognized that the proliferation of annotation schemes runs counter to the need to re-use language resources, and that standards for linguistic annotation are becoming increasingly mandatory. To answer this need, we have developed a representation framework comprised of an abstract model for a variety of different annotation types (e.g., morpho-syntactic tagging, syntactic annotation, co-reference annotation, etc.), which can be instantiated in different ways depending on the annotator❑s approach and goals. In this paper we provide an overview of our representation framework and demonstrate its applicability to syntactic annotation. We show how the framework can contribute to comparative evaluation and merging of parser output and diverse syntactic annotation schemes.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>forthcoming. Treebanks: Building and Using Syntactically Annotated Corpora,</title>
<editor>Anne Abeill❑ (ed.),</editor>
<publisher>Kluwer Academic Publishers.</publisher>
<marker></marker>
<rawString>Anne Abeill❑ (ed.), forthcoming. Treebanks: Building and Using Syntactically Annotated Corpora, Kluwer Academic Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eric Atwell</author>
</authors>
<title>Comparative evaluation of grammatical annotation models. In</title>
<date>1996</date>
<booktitle>Industrial Parsing of Software Manuals,</booktitle>
<pages>25--46</pages>
<editor>R. Sutcliffe, H. Koch, A. McElligott (eds.),</editor>
<publisher>Rodopi.</publisher>
<contexts>
<context position="18257" citStr="Atwell (1996)" startWordPosition="2679" endWordPosition="2680">ARSEVAL bracket-precision measure penalizes parsers that return more structure than exists in the relatively []flat[] treebank structures, even if they are correct (Srinivas, et al., 1995). XSLT scripts can extract the appropriate information for comparison purposes while retaining links to additional parts of the annotation in the original document, thus eliminating the need to []dumb down[] parser output in order to participate in the evaluation exercise. Similarly, information lost in the transduction from phrase structure to a dependency-based analysis (as in the example above), which, as Atwell (1996) points out, may eliminate grammatical information potentially required for later processing, can also be retained. ((S (NP-SBJ-1 Paul) (VP intends) (S (NP-SBJ *-1) (VP to (VP leave (NP IBM)))) .)) Figure 6. PTB annotation of &amp;quot;Paul intends to leave IBM. &lt;struct id=&amp;quot;s0&amp;quot; type=&amp;quot;S&amp;quot;&gt; &lt;struct id=&amp;quot;s1&amp;quot; type=&amp;quot;NP&amp;quot; xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),1,5))&amp;quot; rel =&amp;quot;SBJ&amp;quot;/&gt; &lt;struct id=&amp;quot;s2&amp;quot; type=&amp;quot;VP&amp;quot; xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),7,8))&amp;quot;/&gt; &lt;struct id=&amp;quot;s3&amp;quot; type=&amp;quot;NP&amp;quot; xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),16,3))&amp;quot;/&gt; &lt;struct id=&amp;quot;s4&amp;quot; type=&amp;quot;PP&amp;quot; xlink:href=&amp;quot;xptr(substring(/p/s[1]/text(),20,4))&amp;quot; r</context>
</contexts>
<marker>Atwell, 1996</marker>
<rawString>Eric Atwell, 1996. Comparative evaluation of grammatical annotation models. In R. Sutcliffe, H. Koch, A. McElligott (eds.), Industrial Parsing of Software Manuals, 25-46. Rodopi.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paul Biron</author>
<author>Ashok Malhotra</author>
</authors>
<date>2000</date>
<booktitle>XML Schema Part 2: Datatypes. W3C Candidate Recommendation. http://www.w3.org/TR/xmlschema-2/.</booktitle>
<marker>Biron, Malhotra, 2000</marker>
<rawString>Paul Biron and Ashok Malhotra, 2000. XML Schema Part 2: Datatypes. W3C Candidate Recommendation. http://www.w3.org/TR/xmlschema-2/.</rawString>
</citation>
<citation valid="true">
<date>1998</date>
<booktitle>Extensible Markup Language (XML).</booktitle>
<editor>Tim Bray, Jean Paoli and C. Michael SperbergMcQueen (eds.),</editor>
<marker>1998</marker>
<rawString>Tim Bray, Jean Paoli and C. Michael SperbergMcQueen (eds.), 1998. Extensible Markup Language (XML).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Brickley</author>
<author>R V Guha</author>
</authors>
<title>Resource Description Framework (RDF)</title>
<date>2000</date>
<journal>Schema Specification</journal>
<volume>1</volume>
<pages>3</pages>
<contexts>
<context position="2297" citStr="Brickley and Guha, 2000" startWordPosition="318" endWordPosition="321">al., 1991), as well as the development of reusable editing and processing tools. To answer this need, we have developed a representation framework comprised of an abstract model for a variety of different annotation types (e.g., morpho-syntactic tagging, syntactic annotation, co-reference annotation, etc.), which can be instantiated in different ways depending on the annotator❑s approach and goals. We have implemented both the abstract model and various instantiations using XML schemas (Thompson, et al., 2000), the Resource Definition Framework (RDF) (Lassila and Swick, 2000) and RDF schemas (Brickley and Guha, 2000), which enable description and definition of abstract data models together with means to interpret, via the model, information encoded according to different conventions. The results have been incorporated into XCES (Ide, et al., 2000a), part of the EAGLES Guidelines developed by the Expert Advisory Group on Language Engineering Standards (EAGLES)1. The XCES provides a ready-made, standard encoding format together with a data architecture designed specifically for linguistically annotated corpora. In this paper we provide an overview of our representation framework and demonstrate its applicab</context>
</contexts>
<marker>Brickley, Guha, 2000</marker>
<rawString>Dan Brickley and R.V. Guha, 2000. Resource Description Framework (RDF) Schema Specification 1.0. http://www.w3.org/TR/rdfschema/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Carroll</author>
<author>Guido Minnen</author>
<author>Ted Briscoe</author>
<author>forthcoming</author>
</authors>
<title>Parser Evaluation Using a Eugene Charniak,</title>
<date>1996</date>
<booktitle>Proceedings of the 13th National Conference on Artificial Intelligence, AAAI1196,</booktitle>
<pages>1031--36</pages>
<marker>Carroll, Minnen, Briscoe, forthcoming, 1996</marker>
<rawString>John Carroll, Guido Minnen, and Ted Briscoe, forthcoming. Parser Evaluation Using a Eugene Charniak, 1996. Tree-bank grammars. Proceedings of the 13th National Conference on Artificial Intelligence, AAAI1196, 1031-36.</rawString>
</citation>
<citation valid="false">
<date>1999</date>
<editor>James Clark (ed.),</editor>
<marker>1999</marker>
<rawString>James Clark (ed.), 1999. XSL Transformations (XSLT). http://www.w3.org/TR/xslt.</rawString>
</citation>
<citation valid="true">
<authors>
<author>James Clark</author>
<author>Steven DeRose</author>
</authors>
<date>1999</date>
<note>XML Path Language. http://www.w3.org/TR/xpath.</note>
<contexts>
<context position="13788" citStr="Clark &amp; DeRose, 1999" startWordPosition="1991" endWordPosition="1994">tep process. • type : specifies the node label (e.g., ❑S❑, ❑NP❑, etc.) or points to an object in another document that provides the value. This allows specifying complex data items as annotations. It also enables generating a single instantiation of an annotation value in a separate document that can be referenced as needed. • xlink : points to the data to which the annotation applies. In the XCES, we recommend the use of stand-off annotation []i.e., annotation that is maintained in a document separate from the primary (annotated) data.7 The xlink attribute uses the XML Path Language (XPath) (Clark &amp; DeRose, 1999) to specify the location of the relevant data in the primary document. • ref : refers to a node defined elsewhere, used instead of xlink. • rel˚: specifies a type of relation (e.g., ❑subj❑) • head : specifies the node corresponding to the head of the relation • dependent : specifies the node corresponding to the dependent of the relation • introducer : specifies the node corresponding to an introducing word or phrase • initial : gives a thematic or semantic role of a component, e.g., ❑subj❑ for the object of a by-phrase in a passive sentence. The hierarchy of &lt;struct&gt; elements corresponds to t</context>
</contexts>
<marker>Clark, DeRose, 1999</marker>
<rawString>James Clark and Steven DeRose, 1999. XML Path Language. http://www.w3.org/TR/xpath.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philip Harrison</author>
<author>Steven Abney</author>
<author>Ezra Black</author>
<author>Dan Flickinger</author>
<author>Claudia Gdaniec</author>
<author>Ralph Grishman</author>
<author>Don Hindle</author>
<author>Bob Ingria</author>
<author>Mitch Marcus</author>
<author>Beatrice Santorini</author>
<author>Tomek Strzalkowski</author>
</authors>
<title>Evaluating syntax performance of parser/grammars of English.</title>
<date>1991</date>
<booktitle>Proceedings of the Workshop on Evaluating Natural Language Processing Systems,</booktitle>
<pages>71--77</pages>
<contexts>
<context position="1683" citStr="Harrison, et al., 1991" startWordPosition="230" endWordPosition="233"> Introduction It is widely recognized that the proliferation of annotation schemes runs counter to the need to re-use language resources, and that standards for linguistic annotation are becoming increasingly mandatory. In particular, there is a need for a general framework for linguistic annotation that is flexible and extensible enough to accommodate different annotation types and different theoretical and practical approaches, while at the same time enabling their representation in a []pivot[] format that can serve as the basis for comparative evaluation of parser output, such as PARSEVAL (Harrison, et al., 1991), as well as the development of reusable editing and processing tools. To answer this need, we have developed a representation framework comprised of an abstract model for a variety of different annotation types (e.g., morpho-syntactic tagging, syntactic annotation, co-reference annotation, etc.), which can be instantiated in different ways depending on the annotator❑s approach and goals. We have implemented both the abstract model and various instantiations using XML schemas (Thompson, et al., 2000), the Resource Definition Framework (RDF) (Lassila and Swick, 2000) and RDF schemas (Brickley a</context>
</contexts>
<marker>Harrison, Abney, Black, Flickinger, Gdaniec, Grishman, Hindle, Ingria, Marcus, Santorini, Strzalkowski, 1991</marker>
<rawString>Philip Harrison, Steven Abney, Ezra Black, Dan Flickinger, Claudia Gdaniec, Ralph Grishman, Don Hindle, Bob Ingria, Mitch Marcus, Beatrice Santorini, and Tomek Strzalkowski, 1991. Evaluating syntax performance of parser/grammars of English. Proceedings of the Workshop on Evaluating Natural Language Processing Systems, 71-77.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nancy Ide</author>
<author>Patrice Bonhomme</author>
<author>Laurent Romary</author>
</authors>
<title>XCES: An XML-based Standard for Linguistic Corpora.</title>
<date>2000</date>
<booktitle>Proceedings of the Second Language Resources and Evaluation Conference (LREC),</booktitle>
<pages>825--30</pages>
<contexts>
<context position="2531" citStr="Ide, et al., 2000" startWordPosition="352" endWordPosition="355">ctic tagging, syntactic annotation, co-reference annotation, etc.), which can be instantiated in different ways depending on the annotator❑s approach and goals. We have implemented both the abstract model and various instantiations using XML schemas (Thompson, et al., 2000), the Resource Definition Framework (RDF) (Lassila and Swick, 2000) and RDF schemas (Brickley and Guha, 2000), which enable description and definition of abstract data models together with means to interpret, via the model, information encoded according to different conventions. The results have been incorporated into XCES (Ide, et al., 2000a), part of the EAGLES Guidelines developed by the Expert Advisory Group on Language Engineering Standards (EAGLES)1. The XCES provides a ready-made, standard encoding format together with a data architecture designed specifically for linguistically annotated corpora. In this paper we provide an overview of our representation framework and demonstrate its applicability to syntactic annotation. The framework has been applied to the representation of terminology (Terminological Markup Framework2, ISO project n.16642) and computational lexicons (Ide, et al., 2000b), thus demonstrating its general</context>
</contexts>
<marker>Ide, Bonhomme, Romary, 2000</marker>
<rawString>Nancy Ide, Patrice Bonhomme, and Laurent Romary, 2000. XCES: An XML-based Standard for Linguistic Corpora. Proceedings of the Second Language Resources and Evaluation Conference (LREC), 825-30.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nancy Ide</author>
<author>Adam Kilgarriff</author>
<author>Laurent Romary</author>
</authors>
<title>A Formal Model of Dictionary Structure and Content.</title>
<date>2000</date>
<booktitle>In Proceedings of EURALEX’00,</booktitle>
<pages>113--126</pages>
<contexts>
<context position="2531" citStr="Ide, et al., 2000" startWordPosition="352" endWordPosition="355">ctic tagging, syntactic annotation, co-reference annotation, etc.), which can be instantiated in different ways depending on the annotator❑s approach and goals. We have implemented both the abstract model and various instantiations using XML schemas (Thompson, et al., 2000), the Resource Definition Framework (RDF) (Lassila and Swick, 2000) and RDF schemas (Brickley and Guha, 2000), which enable description and definition of abstract data models together with means to interpret, via the model, information encoded according to different conventions. The results have been incorporated into XCES (Ide, et al., 2000a), part of the EAGLES Guidelines developed by the Expert Advisory Group on Language Engineering Standards (EAGLES)1. The XCES provides a ready-made, standard encoding format together with a data architecture designed specifically for linguistically annotated corpora. In this paper we provide an overview of our representation framework and demonstrate its applicability to syntactic annotation. The framework has been applied to the representation of terminology (Terminological Markup Framework2, ISO project n.16642) and computational lexicons (Ide, et al., 2000b), thus demonstrating its general</context>
</contexts>
<marker>Ide, Kilgarriff, Romary, 2000</marker>
<rawString>Nancy Ide, Adam Kilgarriff, and Laurent Romary, 2000. A Formal Model of Dictionary Structure and Content. In Proceedings of EURALEX’00, 113-126.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ora Lassila</author>
<author>Ralph Swick</author>
</authors>
<title>Resource Description framework (RDF) Model and Syntax.</title>
<date>1999</date>
<note>http://www.w3.org/TR/REC-rdf-syntax.</note>
<marker>Lassila, Swick, 1999</marker>
<rawString>Ora Lassila and Ralph Swick, 1999. Resource Description framework (RDF) Model and Syntax. http://www.w3.org/TR/REC-rdf-syntax.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geoffrey Leech</author>
<author>R Barnett</author>
<author>P Kahrel</author>
</authors>
<title>EAGLES Recommendations for the Syntactic Annotation of Corpora.</title>
<date>1996</date>
<contexts>
<context position="7768" citStr="Leech et al., 1996" startWordPosition="1088" endWordPosition="1091">RUCTURAL SKELETON DATA CATEGORY REGISTRY Universal Resources General Markup Language Abstract XML encoding Virtual AML Dialect Specification Data Category Specification Concrete AML Project Specific Resources Concrete XML encoding XSLT Script Non-XML Encoding Figure 3. Overall architecture of the XCES annotation framework Two knowledge sources are used define the abstract model: Data Category Registry: Within the framework of the XCES we are establishing an inventory of data categories for syntactic annotation, initially based on the EAGLES Recommendations for Syntactic Annotation of Corpora (Leech et al., 1996). Data categories are defined using RDF descriptions that formalize the properties associated with each. The categories are organized in a hierarchy, from general to specific. For example, a general dependent relation may be defined, which may have one of the possible values argument or modifier; argument in turn may have the possible values subject, object, or complement; etc.5 Note that RDF descriptions function much like class definitions in an object-oriented programming language: they provide, effectively, templates that describe how objects may be instantiated, but do not constitute the </context>
</contexts>
<marker>Leech, Barnett, Kahrel, 1996</marker>
<rawString>Geoffrey Leech, R. Barnett, and P. Kahrel, 1996. EAGLES Recommendations for the Syntactic Annotation of Corpora.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Sleator</author>
<author>Davy Temperley</author>
</authors>
<title>Parsing English with a link grammar. Third International Workshop on Parsing Technologies.</title>
<date>1993</date>
<contexts>
<context position="5278" citStr="Sleator and Temperley, 1993" startWordPosition="733" endWordPosition="736">ost relations (e.g., []object[]) are left implicit. Relations among non-contiguous elements demand a special numbering mechanism to enable crossreference, as in the specification of the NP-SBJ of the embedded sentence by reference to the earlier NP-SBJ-1 node. Although they differ in the labels and in some cases the function of various nodes in the tree, most annotation schemes provide a similar constituency-based representation of relations among syntactic components (see Abeille, forthcoming, for a comprehensive survey of syntactic annotation schemes). In contrast, dependency schemes (e.g., Sleator and Temperley, 1993; Tapanainen and Jarvinen, 1997; Carroll, et al., forthcoming) do not 3 http://www.cis.upenn.edu/treebank provide a constituency analysis4 but rather specify grammatical relations among elements explicitly; for example, the sentence []Paul intends to leave IBM[] could be represented as shown in Figure 2, where the predicate is the relation type, the first argument is the head, the second the dependent, and additional arguments may provide category-specific information (e.g., introducer for prepositional phrases, etc.). ((S (NP-SBJ-1 Jones) (VP followed) (NP him) (PP-DIR into (NP the front room</context>
</contexts>
<marker>Sleator, Temperley, 1993</marker>
<rawString>Daniel Sleator and Davy Temperley, 1993. Parsing English with a link grammar. Third International Workshop on Parsing Technologies.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bangalore Srinivas</author>
<author>Christy Doran</author>
<author>Beth-Ann Hockey</author>
<author>Avarind Joshi</author>
</authors>
<title>An approach to robust partial parsing and evaluation metrics.</title>
<date>1996</date>
<booktitle>Proceedings of the ESSLI1196 Workshop on Robust Parsing,</booktitle>
<pages>70--82</pages>
<marker>Srinivas, Doran, Hockey, Joshi, 1996</marker>
<rawString>Bangalore Srinivas, Christy Doran, Beth-Ann Hockey and Avarind Joshi, 1996. An approach to robust partial parsing and evaluation metrics. Proceedings of the ESSLI1196 Workshop on Robust Parsing, 70-82.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Pasi Tapanainen</author>
<author>Timo J❑rvinen</author>
</authors>
<title>nonprojective dependency parser.</title>
<date>1997</date>
<booktitle>Proceedings of the 5th Conference on Applied Natural Language Processing (ANLP’97),</booktitle>
<pages>64--71</pages>
<marker>Tapanainen, J❑rvinen, 1997</marker>
<rawString>Pasi Tapanainen and Timo J❑rvinen. 1997.A nonprojective dependency parser. Proceedings of the 5th Conference on Applied Natural Language Processing (ANLP’97), 64-71.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Henry Thompson</author>
<author>David Beech</author>
<author>Murray Maloney</author>
<author>Noah Mendelsohn</author>
</authors>
<date>2000</date>
<note>XML Schema Part 1: Structures. http://www.w3.org/TR/xmlschema-1/.</note>
<contexts>
<context position="2188" citStr="Thompson, et al., 2000" startWordPosition="302" endWordPosition="305">mat that can serve as the basis for comparative evaluation of parser output, such as PARSEVAL (Harrison, et al., 1991), as well as the development of reusable editing and processing tools. To answer this need, we have developed a representation framework comprised of an abstract model for a variety of different annotation types (e.g., morpho-syntactic tagging, syntactic annotation, co-reference annotation, etc.), which can be instantiated in different ways depending on the annotator❑s approach and goals. We have implemented both the abstract model and various instantiations using XML schemas (Thompson, et al., 2000), the Resource Definition Framework (RDF) (Lassila and Swick, 2000) and RDF schemas (Brickley and Guha, 2000), which enable description and definition of abstract data models together with means to interpret, via the model, information encoded according to different conventions. The results have been incorporated into XCES (Ide, et al., 2000a), part of the EAGLES Guidelines developed by the Expert Advisory Group on Language Engineering Standards (EAGLES)1. The XCES provides a ready-made, standard encoding format together with a data architecture designed specifically for linguistically annotat</context>
</contexts>
<marker>Thompson, Beech, Maloney, Mendelsohn, 2000</marker>
<rawString>Henry Thompson, David Beech, Murray Maloney, and Noah Mendelsohn, 2000. XML Schema Part 1: Structures. http://www.w3.org/TR/xmlschema-1/.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>