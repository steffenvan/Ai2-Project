<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000716">
<title confidence="0.935338">
Text Chunking using Regularized Winnow
</title>
<author confidence="0.640206">
Tong Zhang and Fred Damerau and David Johnson
</author>
<affiliation confidence="0.4208295">
IBM T.J. Watson Research Center
Yorktown Heights
</affiliation>
<address confidence="0.974548">
New York, 10598, USA
</address>
<email confidence="0.997211">
tzhang@watson.ibm.com damerau@watson.ibm.com dejohns@us.ibm.com
</email>
<sectionHeader confidence="0.99561" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9998685">
Many machine learning methods have
recently been applied to natural lan-
guage processing tasks. Among them,
the Winnow algorithm has been ar-
gued to be particularly suitable for NLP
problems, due to its robustness to ir-
relevant features. However in theory,
Winnow may not converge for non-
separable data. To remedy this prob-
lem, a modification called regularized
Winnow has been proposed. In this pa-
per, we apply this new method to text
chunking. We show that this method
achieves state of the art performance
with significantly less computation than
previous approaches.
</bodyText>
<sectionHeader confidence="0.999129" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999936410714286">
Recently there has been considerable interest in
applying machine learning techniques to prob-
lems in natural language processing. One method
that has been quite successful in many applica-
tions is the SNoW architecture (Dagan et al.,
1997; Khardon et al., 1999). This architecture
is based on the Winnow algorithm (Littlestone,
1988; Grove and Roth, 2001), which in theory
is suitable for problems with many irrelevant at-
tributes. In natural language processing, one of-
ten encounters a very high dimensional feature
space, although most of the features are irrele-
vant. Therefore the robustness of Winnow to high
dimensional feature space is considered an impor-
tant reason why it is suitable for NLP tasks.
However, the convergence of the Winnow al-
gorithm is only guaranteed for linearly separable
data. In practical NLP applications, data are of-
ten linearly non-separable. Consequently, a di-
rect application of Winnow may lead to numer-
ical instability. A remedy for this, called regu-
larized Winnow, has been recently proposed in
(Zhang, 2001). This method modifies the origi-
nal Winnow algorithm so that it solves a regular-
ized optimization problem. It converges both in
the linearly separable case and in the linearly non-
separable case. Its numerical stability implies that
the new method can be more suitable for practical
NLP problems that may not be linearly separable.
In this paper, we compare regularized Winnow
and Winnow algorithms on text chunking (Ab-
ney, 1991). In order for us to rigorously com-
pare our system with others, we use the CoNLL-
2000 shared task dataset (Sang and Buchholz,
2000), which is publicly available from http://lcg-
www.uia.ac.be/conll2000/chunking. An advan-
tage of using this dataset is that a large number
of state of the art statistical natural language pro-
cessing methods have already been applied to the
data. Therefore we can readily compare our re-
sults with other reported results.
We show that state of the art performance can
be achieved by using the newly proposed regu-
larized Winnow method. Furthermore, we can
achieve this result with significantly less compu-
tation than earlier systems of comparable perfor-
mance.
The paper is organized as follows. In Section 2,
we describe the Winnow algorithm and the reg-
ularized Winnow method. Section 3 describes
the CoNLL-2000 shared task. In Section 4, we
give a detailed description of our system that em-
ploys the regularized Winnow algorithm for text
chunking. Section 5 contains experimental results
for our system on the CoNLL-2000 shared task.
Some final remarks will be given in Section 6.
</bodyText>
<sectionHeader confidence="0.6357495" genericHeader="introduction">
2 Winnow and regularized Winnow for
binary classification
</sectionHeader>
<bodyText confidence="0.998835225806452">
We review the Winnow algorithm and the reg-
ularized Winnow method. Consider the binary
classification problem: to determine a label
associated with an input vector . A use-
ful method for solving this problem is through lin-
ear discriminant functions, which consist of lin-
ear combinations of the components of the input
variable. Specifically, we seek a weight vector
and a threshold such that if its label
and if its label .
For simplicity, we shall assume in this
paper. The restriction does not cause problems in
practice since one can always append a constant
feature to the input data , which offsets the effect
of .
Given a training set of labeled data
, a number of approaches
to finding linear discriminant functions have
been advanced over the years. We are especially
interested in the Winnow multiplicative update
algorithm (Littlestone, 1988). This algorithm
updates the weight vector by going through
the training data repeatedly. It is mistake driven
in the sense that the weight vector is updated
only when the algorithm is not able to correctly
classify an example.
The Winnow algorithm (with positive weight)
employs multiplicative update: if the linear dis-
criminant function misclassifies an input training
vector with true label , then we update each
component of the weight vector as:
</bodyText>
<equation confidence="0.934482">
(1)
</equation>
<bodyText confidence="0.997062045454545">
where is a parameter called the learning
rate. The initial weight vector can be taken as
, where is a prior which is typ-
ically chosen to be uniform.
There can be several variants of the Winnow al-
gorithm. One is called balanced Winnow, which
is equivalent to an embedding of the input space
into a higher dimensional space as: .
This modification allows the positive weight Win-
now algorithm for the augmented input to have
the effect of both positive and negative weights
for the original input .
One problem of the Winnow online update al-
gorithm is that it may not converge when the data
are not linearly separable. One may partially rem-
edy this problem by decreasing the learning rate
parameter during the updates. However, this is
rather ad hoc since it is unclear what is the best
way to do so. Therefore in practice, it can be quite
difficult to implement this idea properly.
In order to obtain a systematic solution to this
problem, we shall first examine a derivation of
the Winnow algorithm in (Gentile and Warmuth,
1998), which motivates a more general solution to
be presented later.
Following (Gentile and Warmuth, 1998), we
consider the loss function
Setting the gradient of the above formula to zero,
we obtain
In the above equation, denotes the gra-
dient (or more rigorously, a subgradient) of
, which takes the value
if , the value if
, and a value in between if
. The Winnow update (1) can
be regarded as an approximate solution to (3).
Although the above derivation does not solve
the non-convergence problem of the original Win-
now method when the data are not linearly sepa-
rable, it does provide valuable insights which can
lead to a more systematic solution of the problem.
The basic idea was given in (Zhang, 2001), where
the original Winnow algorithm was converted into
a numerical optimization problem that can handle
linearly non-separable data.
,
which is often called “hinge loss”. For each data
point , we consider an online update rule
such that the weight after seeing the-th ex-
ample is given by the solution to
The resulting formulation is closely related to
(2). However, instead of looking at one example
at a time as in an online formulation, we incorpo-
rate all examples at the same time. In addition,
we add a margin condition into the “hinge loss”.
Specifically, we seek a linear weight that solves
Where is a given parameter called the reg-
ularization parameter. The optimal solution of
the above optimization problem can be derived
from the solution of the following dual opti-
mization problem:
A Winnow-like update rule can be derived for
the dual regularized Winnow formulation. At
each data point , we fix all with ,
and update to approximately maximize the
dual objective functional using gradient ascent:
</bodyText>
<equation confidence="0.559061">
(4)
</equation>
<bodyText confidence="0.994795404255319">
problem in natural language processing. As an
example of text chunking, the sentence “Balcor,
which has interests in real estate, said the posi-
tion is newly created.” can be divided as follows:
[NP Balcor], [NP which] [VP has] [NP inter-
ests] [PP in] [NP real estate], [VP said] [NP the
position] [VP is newly created].
In this example, NP denotes non phrase, VP
denotes verb phrase, and PP denotes prepositional
phrase.
The CoNLL-2000 shared task (Sang and Buch-
holz, 2000), introduced last year, is an attempt
to set up a standard dataset so that researchers
can compare different statistical chunking meth-
ods. The data are extracted from sections of the
Penn Treebank. The training set consists of WSJ
sections 15-18 of the Penn Treebank, and the test
set consists of WSJ sections 20. Additionally, a
part-of-speech (POS) tag was assigned to each to-
ken by a standard POS tagger (Brill, 1994) that
was trained on the Penn Treebank. These POS
tags can be used as features in a machine learn-
ing based chunking algorithm. See Section 4 for
detail.
The data contains eleven different chunk types.
However, except for the most frequent three
types: NP (noun phrase), VP (verb phrase), and
PP (prepositional phrase), each of the remaining
chunks has less than occurrences. The chunks
are represented by the following three types of
tags:
The-th component of is given by
s.t. ( )
where . We update
and by repeatedly going over the data from
B-X first word of a chunk of type X
I-X non-initial word in an X chunk
.
Learning bounds of regularized Winnow that
are similar to the mistake bound of the original
Winnow have been given in (Zhang, 2001). These
results imply that the new method, while it can
properly handle non-separable data, shares simi-
lar theoretical advantages of Winnow in that it is
also robust to irrelevant features. This theoretical
insight implies that the algorithm is suitable for
NLP tasks with large feature spaces.
</bodyText>
<sectionHeader confidence="0.875632" genericHeader="method">
3 CoNLL-2000 chunking task
</sectionHeader>
<bodyText confidence="0.999271705882353">
The text chunking task is to divide text into
syntactically related non-overlapping groups of
words (chunks). It is considered an important
O word outside of any chunk
A standard software program has been
provided (which is available from http://lcg-
www.uia.ac.be/conll2000/chunking) to compute
the performance of each algorithm. For each
chunk, three figures of merit are computed:
precision (the percentage of detected phrases that
are correct), recall (the percentage of phrases in
the data that are found), and the metric
which is the harmonic mean of the precision and
the recall. The overall precision, recall and
metric on all chunks are also computed. The
overall metric gives a single number that
can be used to compare different algorithms.
</bodyText>
<sectionHeader confidence="0.984294" genericHeader="method">
4 System description
</sectionHeader>
<subsectionHeader confidence="0.999905">
4.1 Encoding of basic features
</subsectionHeader>
<bodyText confidence="0.96664">
An advantage of regularized Winnow is its robust-
ness to irrelevant features. We can thus include as
many features as possible, and let the algorithm
itself find the relevant ones. This strategy ensures
that we do not miss any features that are impor-
tant. However, using more features requires more
memory and slows down the algorithm. There-
fore in practice it is still necessary to limit the
number of features used.
Let
be a string of tokenized text (each token is a word
or punctuation). We want to predict the chunk
type of the current token . For each word
, we let denote the associated POS tag,
which is assumed to be given in the CoNLL-2000
shared task. The following is a list of the features
we use as input to the regularized Winnow (where
we choose ):
first order features: and (
)
second order features: (
,
;
In addition, since in a sequential process, the
predicted chunk tags for are available for
, we include the following extra chunk type
features:
, ), and POS-chunk
interactions (
).
For each data point (corresponding to the cur-
rent token ), the associated features are en-
coded as a binary vector , which is the input to
Winnow. Each component of corresponds to a
possible feature value of a feature in one of
the above feature lists. The value of the compo-
nent corresponds to a test which has value one if
the corresponding feature achieves value , or
value zero if the corresponding feature achieves
another feature value.
(the
feature value represented by the component is ac-
tive), and value zero otherwise. The same encod-
ing is applied to all other first order and second
order features, with each possible test of “feature
= feature value” corresponds to a unique compo-
nent in .
Clearly, in this representation, the high order
features are conjunction features that become ac-
tive when all of their components are active. In
principle, one may also consider disjunction fea-
tures that become active when some of their com-
ponents are active. However, such features are
not considered in this work. Note that the above
representation leads to a sparse, but very large di-
mensional vector. This explains why we do not
include all possible second order features since
this will quickly consume more memory than we
can handle.
Also the above list of features are not neces-
sarily the best available. We only included the
most straight-forward features and pair-wise fea-
ture interactions. One might try even higher order
features to obtain better results.
Since Winnow is relatively robust to irrelevant
features, it is usually helpful to provide the algo-
rithm with as many features as possible, and let
the algorithm pick up relevant ones. The main
problem that prohibits us from using more fea-
tures in the Winnow algorithm is memory con-
sumption (mainly in training). The time complex-
ity of the Winnow algorithm does not depend on
the number of features, but rather on the average
number of non-zero features per data, which is
usually quite small.
Due to the memory problem, in our implemen-
tation we have to limit the number of token fea-
tures (words or punctuation) to : we sort the
tokens by their frequencies in the training set from
high frequency to low frequency; we then treat to-
), and (
)
second order chunk-type features:
first order chunk-type features: (
)
(
For example, since is in our feature list,
each of the possible POS value of corre-
sponds to a component of : the component has
value one if (the feature value repre-
sented by the component is active), and value zero
otherwise. Similarly for a second order feature in
our feature list such as , each pos-
sible value in the set is
represented by a component of : the component
has value one if and
kens of rank or higher as the same token.
Since the number is still reasonably large,
this restriction is relatively minor.
There are possible remedies to the memory
consumption problem, although we have not im-
plemented them in our current system. One so-
lution comes from noticing that although the fea-
ture vector is of very high dimension, most di-
mensions are empty. Therefore one may create a
hash table for the features, which can significantly
reduce the memory consumption.
</bodyText>
<subsectionHeader confidence="0.999275">
4.2 Using enhanced linguistic features
</subsectionHeader>
<bodyText confidence="0.9720940625">
We were interested in determining if additional
features with more linguistic content would lead
to even better performance. The ESG (English
Slot Grammar) system in (McCord, 1989) is not
directly comparable to the phrase structure gram-
mar implicit in the WSJ treebank. ESG is a de-
pendency grammar in which each phrase has a
head and dependent elements, each marked with
a syntactic role. ESG normally produces multiple
parses for a sentence, but has the capability, which
we used, to output only the highest ranked parse,
where rank is determined by a system-defined
measure.
There are a number of incompatibilities be-
tween the treebank and ESG in tokenization,
which had to be compensated for in order to trans-
fer the syntactic role features to the tokens in the
standard training and test sets. We also trans-
ferred the ESG part-of-speech codes (different
from those in the WSJ corpus) and made an at-
tempt to attach B-PP, B-NP and I-NP tags as in-
ferred from the ESG dependency structure. In the
end, the latter two tags did not prove useful. ESG
is also very fast, parsing several thousand sen-
tences on an IBM RS/6000 in a few minutes of
clock time.
It might seem odd to use a parser output as in-
put to a machine learning system to find syntactic
chunks. As noted above, ESG or any other parser
normally produces many analyses, whereas in the
kind of applications for which chunking is used,
e.g., information extraction, only one solution is
normally desired. In addition, due to many in-
compatibilities between ESG and WSJ treebank,
less than of ESG generated syntactic role
tags are in agreement with WSJ chunks. How-
ever, the ESG syntactic role tags can be regarded
as features in a statistical chunker. Another view
is that the statistical chunker can be regarded as
a machine learned transformation that maps ESG
syntactic role tags into WSJ chunks.
We denote by the syntactic role tag associ-
ated with token . Each tag takes one of 138
possible values. The following features are added
to our system.
first order features: ( )
second order features: self interactions
(
</bodyText>
<subsectionHeader confidence="0.985133">
4.3 Dynamic programming
</subsectionHeader>
<bodyText confidence="0.999199939393939">
In text chunking, we predict hidden states (chunk
types) based on a sequence of observed states
(text). This resembles hidden Markov models
where dynamic programming has been widely
employed. Our approach is related to ideas de-
scribed in (Punyakanok and Roth, 2001). Similar
methods have also appeared in other natural lan-
guage processing systems (for example, in (Ku-
doh and Matsumoto, 2000)).
Given input vectors consisting of features
constructed as above, we apply the regularized
Winnow algorithm to train linear weight vectors.
Since the Winnow algorithm only produces pos-
itive weights, we employ the balanced version
of Winnow with being transformed into
. As explained earlier, the constant
term is used to offset the effect of threshold.
Once a weight vector is
obtained, we let and .
The prediction with an incoming feature vector
is then .
Since Winnow only solves binary classification
problems, we train one linear classifier for each
chunk type. In this way, we obtain twenty-three
linear classifiers, one for each chunk type. De-
note by the weight associated with type, then
a straight-forward method to classify an incoming
datum is to assign the chunk tag as the one with
the highest score .
However, there are constraints in any valid se-
quence of chunk types: if the current chunk is of
type I-X, then the previous chunk type can only be
either B-X or I-X. This constraint can be explored
</bodyText>
<equation confidence="0.891221333333333">
, ), and iterations
with POS-tags
( ).
</equation>
<bodyText confidence="0.996372214285714">
to improve chunking performance. We denote by
the set of all valid chunk sequences (that is,
the sequence satisfies the above chunk type con-
straint).
Let be the sequence of tok-
enized text for which we would like to find the
associated chunk types. Let be the as-
sociated feature vectors for this text sequence. Let
be a sequence of potential chunk types
that is valid: . In our system,
we find the sequence of chunk types that has the
highest value of overall truncated score as:
where
The truncation onto the interval is to make
sure that no single point contributes too much in
the summation.
The optimization problem
can be solved by using dynamic programming.
We build a table of all chunk types for every token
. For each fixed chunk type , we define a
value
It is easy to verify that we have the following re-
cursion:
We also assume the initial condition
for all . Using this recursion, we can iterate over
, and compute for each
potential chunk type .
Observe that in (5), depends on the pre-
vious chunk-types (where
). In our implementation, these chunk-
types used to create the current feature vec-
tor are determined as follows. We
let ,and let
for
.
After the computation of all for
, we determine the best sequence
as follows. We assign to
the chunk type with the largest value of
. Each chunk type is then
determined from the recursion (5) as
.
</bodyText>
<sectionHeader confidence="0.987594" genericHeader="evaluation">
5 Experimental results
</sectionHeader>
<bodyText confidence="0.991437836363636">
Experimental results reported in this section were
obtained by using , and a uniform prior of
. We let the learning rate , and
ran the regularized Winnow update formula (4)
repeatedly thirty times over the training data. The
algorithm is not very sensitive to these parame-
ter choices. Some other aspects of the system
design (such as dynamic programming, features
used, etc) have more impact on the performance.
However, due to the limitation of space, we will
not discuss their impact in detail.
Table 1 gives results obtained with the basic
features. This representation gives a total number
of binary features. However, the number
of non-zero features per datum is , which de-
termines the time complexity of our system. The
training time on a 400Mhz Pentium machine run-
ning Linux is about sixteen minutes, which cor-
responds to less than one minute per category.
The time using the dynamic programming to pro-
duce chunk predictions, excluding tokenization,
is less than ten seconds. There are about
non-zero linear weight components per chunk-
type, which corresponds to a sparsity of more than
. Most features are thus irrelevant.
All previous systems achieving a similar per-
formance are significantly more complex. For
example, the previous best result in the litera-
ture was achieved by a combination of 231 kernel
support vector machines (Kudoh and Matsumoto,
2000) with an overall value of . Each
kernel support vector machine is computation-
ally significantly more expensive than a corre-
sponding Winnow classifier, and they use an or-
der of magnitude more classifiers. This implies
that their system should be orders of magnitudes
more expensive than ours. This point can be ver-
(5)
ified from their training time of about one day on
a 500Mhz Linux machine. The previously sec-
ond best system was a combination of five differ-
ent WPDV models, with an overall value
of (van Halteren, 2000). This system is
again more complex than the regularized Win-
now approach we propose (their best single clas-
sifier performance is ). The third
best performance was achieved by using combi-
nations of memory-based models, with an over-
all value of . The rest of the eleven
reported systems employed a variety of statisti-
cal techniques such as maximum entropy, Hidden
Markov models, and transformation based rule
learners. Interested readers are referred to the
summary paper (Sang and Buchholz, 2000) which
contains the references to all systems being tested.
</bodyText>
<table confidence="0.99897925">
testdata precision recall
ADJP 79.45 72.37 75.75
ADVP 81.46 80.14 80.79
CONJP 45.45 55.56 50.00
INTJ 100.00 50.00 66.67
LST 0.00 0.00 0.00
NP 93.86 93.95 93.90
PP 96.87 97.76 97.31
PRT 80.85 71.70 76.00
SBAR 87.10 87.10 87.10
VP 93.69 93.75 93.72
all 93.53 93.49 93.51
</table>
<tableCaption confidence="0.9603365">
Table 1: Our chunk prediction results: with basic
features
</tableCaption>
<bodyText confidence="0.98445375862069">
The above comparison implies that the regular-
ized Winnow approach achieves state of the art
performance with significant less computation.
The success of this method relies on regularized
Winnow’s ability to tolerate irrelevant features.
This allows us to use a very large feature space
and let the algorithm to pick the relevant ones. In
addition, the algorithm presented in this paper is
simple. Unlike some other approaches, there is
little ad hoc engineering tuning involved in our
system. This simplicity allows other researchers
to reproduce our results easily.
In Table 2, we report the results of our system
with the basic features enhanced by using ESG
syntactic roles, showing that using more linguis-
tic features can enhance the performance of the
system. In addition, since regularized Winnow is
able to pick up relevant features automatically, we
can easily integrate different features into our sys-
tem in a systematic way without concerning our-
selves with the semantics of the features. The re-
sulting overall value of is appreciably
better than any previous system. The overall com-
plexity of the system is still quite reasonable. The
total number of features is about , with
nonzero features for each data point. The train-
ing time is about thirty minutes, and the number
of non-zero weight components per chunk-type is
about .
</bodyText>
<table confidence="0.998995083333333">
testdata precision recall
ADJP 82.22 72.83 77.24
ADVP 81.06 81.06 81.06
CONJP 50.00 44.44 47.06
INTJ 100.00 50.00 66.67
LST 0.00 0.00 0.00
NP 94.45 94.36 94.40
PP 97.64 98.07 97.85
PRT 80.41 73.58 76.85
SBAR 91.17 88.79 89.96
VP 94.31 94.59 94.45
all 94.24 94.01 94.13
</table>
<tableCaption confidence="0.969984">
Table 2: Our chunk prediction results: with en-
hanced features
</tableCaption>
<bodyText confidence="0.999874903225806">
It is also interesting to compare the regularized
Winnow results with those of the original Win-
now method. We only report results with the ba-
sic linguistic features in Table 3. In this exper-
iment, we use the same setup as in the regular-
ized Winnow approach. We start with a uniform
prior of , and let the learning rate be
. The Winnow update (1) is performed
thirty times repeatedly over the data. The training
time is about sixteen minutes, which is approxi-
mately the same as that of the regularized Win-
now method.
Clearly regularized Winnow method has in-
deed enhanced the performance of the original
Winnow method. The improvement is more or
less consistent over all chunk types. It can also be
seen that the improvement is not dramatic. This
is not too surprising since the data is very close to
linearly separable. Even on the testset, the multi-
class classification accuracy is around . On
average, the binary classification accuracy on the
training set (note that we train one binary classi-
fier for each chunk type) is close to . This
means that the training data is close to linearly
separable. Since the benefit of regularized Win-
now is more significant with noisy data, the im-
provement in this case is not dramatic. We shall
mention that for some other more noisy problems
which we have tested on, the improvement of reg-
ularized Winnow method over the original Win-
now method can be much more significant.
</bodyText>
<table confidence="0.996855384615385">
testdata precision recall
ADJP 73.54 71.69 72.60
ADVP 80.83 78.41 79.60
CONJP 54.55 66.67 60.00
INTJ 100.00 50.00 66.67
LST 0.00 0.00 0.00
NP 93.36 93.52 93.44
PP 96.83 97.11 96.97
PRT 83.13 65.09 73.02
SBAR 82.89 86.92 84.85
UCP 0.00 0.00 0.00
VP 93.32 93.24 93.28
all 92.77 92.93 92.85
</table>
<tableCaption confidence="0.9491525">
Table 3: Chunk prediction results using original
Winnow (with basic features)
</tableCaption>
<sectionHeader confidence="0.998823" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.999974736842105">
In this paper, we described a text chunking sys-
tem using regularized Winnow. Since regularized
Winnow is robust to irrelevant features, we can
construct a very high dimensional feature space
and let the algorithm pick up the important ones.
We have shown that state of the art performance
can be achieved by using this approach. Further-
more, the method we propose is computationally
more efficient than all other systems reported in
the literature that achieved performance close to
ours. Our system is also relatively simple which
does not involve much engineering tuning. This
means that it will be relatively easy for other re-
searchers to implement and reproduce our results.
Furthermore, the success of regularized Winnow
in text chunking suggests that the method might
be applicable to other NLP problems where it is
necessary to use large feature spaces to achieve
good performance.
</bodyText>
<sectionHeader confidence="0.99646" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999783904761905">
S. P. Abney. 1991. Parsing by chunks. In R. C.
Berwick, S. P. Abney, and C. Tenny, editors,
Principle-Based Parsing: Computation and Psy-
cholinguistics, pages 257–278. Kluwer, Dordrecht.
Eric Brill. 1994. Some advances in rule-based part of
speech tagging. In Proc. AAAI 94, pages 722–727.
I. Dagan, Y. Karov, and D. Roth. 1997. Mistake-
driven learning in text categorization. In Proceed-
ings of the Second Conference on Empirical Meth-
ods in NLP.
C. Gentile and M. K. Warmuth. 1998. Linear hinge
loss and average margin. In Proc. NIPS’98.
A. Grove and D. Roth. 2001. Linear concepts and
hidden variables. Machine Learning, 42:123–141.
R. Khardon, D. Roth, and L. Valiant. 1999. Relational
learning for NLP using linear threshold elements.
In Proceedings IJCAI-99.
Taku Kudoh and Yuji Matsumoto. 2000. Use of sup-
port vector learning for chunk identification. In
Proc. CoNLL-2000 and LLL-2000, pages 142–144.
N. Littlestone. 1988. Learning quickly when irrele-
vant attributes abound: a new linear-threshold algo-
rithm. Machine Learning, 2:285–318.
Michael McCord. 1989. Slot grammar: a system for
simple construction of practical natural language
grammars. Natural Language and Logic, pages
118–145.
Vasin Punyakanok and Dan Roth. 2001. The use
of classifiers in sequential inference. In Todd K.
Leen, Thomas G. Dietterich, and Volker Tresp, ed-
itors, Advances in Neural Information Processing
Systems 13, pages 995–1001. MIT Press.
Erik F. Tjong Kim Sang and Sabine Buchholz. 2000.
Introduction to the conll-2000 shared tasks: Chunk-
ing. In Proc. CoNLL-2000 and LLL-2000, pages
127–132.
Hans van Halteren. 2000. Chunking with wpdv mod-
els. In Proc. CoNLL-2000 and LLL-2000, pages
154–156.
Tong Zhang. 2001. Regularized winnow methods.
In Advances in Neural Information Processing Sys-
tems 13, pages 703–709.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.496258">
<title confidence="0.99229">Text Chunking using Regularized Winnow</title>
<author confidence="0.999312">Zhang Damerau Johnson</author>
<affiliation confidence="0.999968">IBM T.J. Watson Research Center</affiliation>
<address confidence="0.75307">Yorktown Heights New York, 10598, USA</address>
<email confidence="0.999147">tzhang@watson.ibm.comdamerau@watson.ibm.comdejohns@us.ibm.com</email>
<abstract confidence="0.999329294117647">Many machine learning methods have recently been applied to natural language processing tasks. Among them, the Winnow algorithm has been argued to be particularly suitable for NLP problems, due to its robustness to irrelevant features. However in theory, Winnow may not converge for nonseparable data. To remedy this problem, a modification called regularized Winnow has been proposed. In this paper, we apply this new method to text chunking. We show that this method achieves state of the art performance with significantly less computation than previous approaches.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>S P Abney</author>
</authors>
<title>Parsing by chunks. In</title>
<date>1991</date>
<booktitle>Principle-Based Parsing: Computation and Psycholinguistics,</booktitle>
<pages>257--278</pages>
<editor>R. C. Berwick, S. P. Abney, and C. Tenny, editors,</editor>
<publisher>Kluwer,</publisher>
<location>Dordrecht.</location>
<contexts>
<context position="2281" citStr="Abney, 1991" startWordPosition="354" endWordPosition="356">non-separable. Consequently, a direct application of Winnow may lead to numerical instability. A remedy for this, called regularized Winnow, has been recently proposed in (Zhang, 2001). This method modifies the original Winnow algorithm so that it solves a regularized optimization problem. It converges both in the linearly separable case and in the linearly nonseparable case. Its numerical stability implies that the new method can be more suitable for practical NLP problems that may not be linearly separable. In this paper, we compare regularized Winnow and Winnow algorithms on text chunking (Abney, 1991). In order for us to rigorously compare our system with others, we use the CoNLL2000 shared task dataset (Sang and Buchholz, 2000), which is publicly available from http://lcgwww.uia.ac.be/conll2000/chunking. An advantage of using this dataset is that a large number of state of the art statistical natural language processing methods have already been applied to the data. Therefore we can readily compare our results with other reported results. We show that state of the art performance can be achieved by using the newly proposed regularized Winnow method. Furthermore, we can achieve this result</context>
</contexts>
<marker>Abney, 1991</marker>
<rawString>S. P. Abney. 1991. Parsing by chunks. In R. C. Berwick, S. P. Abney, and C. Tenny, editors, Principle-Based Parsing: Computation and Psycholinguistics, pages 257–278. Kluwer, Dordrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eric Brill</author>
</authors>
<title>Some advances in rule-based part of speech tagging.</title>
<date>1994</date>
<booktitle>In Proc. AAAI 94,</booktitle>
<pages>722--727</pages>
<contexts>
<context position="8389" citStr="Brill, 1994" startWordPosition="1386" endWordPosition="1387">P the position] [VP is newly created]. In this example, NP denotes non phrase, VP denotes verb phrase, and PP denotes prepositional phrase. The CoNLL-2000 shared task (Sang and Buchholz, 2000), introduced last year, is an attempt to set up a standard dataset so that researchers can compare different statistical chunking methods. The data are extracted from sections of the Penn Treebank. The training set consists of WSJ sections 15-18 of the Penn Treebank, and the test set consists of WSJ sections 20. Additionally, a part-of-speech (POS) tag was assigned to each token by a standard POS tagger (Brill, 1994) that was trained on the Penn Treebank. These POS tags can be used as features in a machine learning based chunking algorithm. See Section 4 for detail. The data contains eleven different chunk types. However, except for the most frequent three types: NP (noun phrase), VP (verb phrase), and PP (prepositional phrase), each of the remaining chunks has less than occurrences. The chunks are represented by the following three types of tags: The-th component of is given by s.t. ( ) where . We update and by repeatedly going over the data from B-X first word of a chunk of type X I-X non-initial word i</context>
</contexts>
<marker>Brill, 1994</marker>
<rawString>Eric Brill. 1994. Some advances in rule-based part of speech tagging. In Proc. AAAI 94, pages 722–727.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Dagan</author>
<author>Y Karov</author>
<author>D Roth</author>
</authors>
<title>Mistakedriven learning in text categorization.</title>
<date>1997</date>
<booktitle>In Proceedings of the Second Conference on Empirical Methods in NLP.</booktitle>
<contexts>
<context position="1049" citStr="Dagan et al., 1997" startWordPosition="155" endWordPosition="158">bustness to irrelevant features. However in theory, Winnow may not converge for nonseparable data. To remedy this problem, a modification called regularized Winnow has been proposed. In this paper, we apply this new method to text chunking. We show that this method achieves state of the art performance with significantly less computation than previous approaches. 1 Introduction Recently there has been considerable interest in applying machine learning techniques to problems in natural language processing. One method that has been quite successful in many applications is the SNoW architecture (Dagan et al., 1997; Khardon et al., 1999). This architecture is based on the Winnow algorithm (Littlestone, 1988; Grove and Roth, 2001), which in theory is suitable for problems with many irrelevant attributes. In natural language processing, one often encounters a very high dimensional feature space, although most of the features are irrelevant. Therefore the robustness of Winnow to high dimensional feature space is considered an important reason why it is suitable for NLP tasks. However, the convergence of the Winnow algorithm is only guaranteed for linearly separable data. In practical NLP applications, data</context>
</contexts>
<marker>Dagan, Karov, Roth, 1997</marker>
<rawString>I. Dagan, Y. Karov, and D. Roth. 1997. Mistakedriven learning in text categorization. In Proceedings of the Second Conference on Empirical Methods in NLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Gentile</author>
<author>M K Warmuth</author>
</authors>
<title>Linear hinge loss and average margin.</title>
<date>1998</date>
<booktitle>In Proc. NIPS’98.</booktitle>
<contexts>
<context position="5779" citStr="Gentile and Warmuth, 1998" startWordPosition="940" endWordPosition="943">ented input to have the effect of both positive and negative weights for the original input . One problem of the Winnow online update algorithm is that it may not converge when the data are not linearly separable. One may partially remedy this problem by decreasing the learning rate parameter during the updates. However, this is rather ad hoc since it is unclear what is the best way to do so. Therefore in practice, it can be quite difficult to implement this idea properly. In order to obtain a systematic solution to this problem, we shall first examine a derivation of the Winnow algorithm in (Gentile and Warmuth, 1998), which motivates a more general solution to be presented later. Following (Gentile and Warmuth, 1998), we consider the loss function Setting the gradient of the above formula to zero, we obtain In the above equation, denotes the gradient (or more rigorously, a subgradient) of , which takes the value if , the value if , and a value in between if . The Winnow update (1) can be regarded as an approximate solution to (3). Although the above derivation does not solve the non-convergence problem of the original Winnow method when the data are not linearly separable, it does provide valuable insight</context>
</contexts>
<marker>Gentile, Warmuth, 1998</marker>
<rawString>C. Gentile and M. K. Warmuth. 1998. Linear hinge loss and average margin. In Proc. NIPS’98.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Grove</author>
<author>D Roth</author>
</authors>
<title>Linear concepts and hidden variables.</title>
<date>2001</date>
<booktitle>Machine Learning,</booktitle>
<pages>42--123</pages>
<contexts>
<context position="1166" citStr="Grove and Roth, 2001" startWordPosition="173" endWordPosition="176">problem, a modification called regularized Winnow has been proposed. In this paper, we apply this new method to text chunking. We show that this method achieves state of the art performance with significantly less computation than previous approaches. 1 Introduction Recently there has been considerable interest in applying machine learning techniques to problems in natural language processing. One method that has been quite successful in many applications is the SNoW architecture (Dagan et al., 1997; Khardon et al., 1999). This architecture is based on the Winnow algorithm (Littlestone, 1988; Grove and Roth, 2001), which in theory is suitable for problems with many irrelevant attributes. In natural language processing, one often encounters a very high dimensional feature space, although most of the features are irrelevant. Therefore the robustness of Winnow to high dimensional feature space is considered an important reason why it is suitable for NLP tasks. However, the convergence of the Winnow algorithm is only guaranteed for linearly separable data. In practical NLP applications, data are often linearly non-separable. Consequently, a direct application of Winnow may lead to numerical instability. A </context>
</contexts>
<marker>Grove, Roth, 2001</marker>
<rawString>A. Grove and D. Roth. 2001. Linear concepts and hidden variables. Machine Learning, 42:123–141.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Khardon</author>
<author>D Roth</author>
<author>L Valiant</author>
</authors>
<title>Relational learning for NLP using linear threshold elements.</title>
<date>1999</date>
<booktitle>In Proceedings IJCAI-99.</booktitle>
<contexts>
<context position="1072" citStr="Khardon et al., 1999" startWordPosition="159" endWordPosition="162">nt features. However in theory, Winnow may not converge for nonseparable data. To remedy this problem, a modification called regularized Winnow has been proposed. In this paper, we apply this new method to text chunking. We show that this method achieves state of the art performance with significantly less computation than previous approaches. 1 Introduction Recently there has been considerable interest in applying machine learning techniques to problems in natural language processing. One method that has been quite successful in many applications is the SNoW architecture (Dagan et al., 1997; Khardon et al., 1999). This architecture is based on the Winnow algorithm (Littlestone, 1988; Grove and Roth, 2001), which in theory is suitable for problems with many irrelevant attributes. In natural language processing, one often encounters a very high dimensional feature space, although most of the features are irrelevant. Therefore the robustness of Winnow to high dimensional feature space is considered an important reason why it is suitable for NLP tasks. However, the convergence of the Winnow algorithm is only guaranteed for linearly separable data. In practical NLP applications, data are often linearly non</context>
</contexts>
<marker>Khardon, Roth, Valiant, 1999</marker>
<rawString>R. Khardon, D. Roth, and L. Valiant. 1999. Relational learning for NLP using linear threshold elements. In Proceedings IJCAI-99.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Taku Kudoh</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Use of support vector learning for chunk identification.</title>
<date>2000</date>
<booktitle>In Proc. CoNLL-2000 and LLL-2000,</booktitle>
<pages>142--144</pages>
<contexts>
<context position="16949" citStr="Kudoh and Matsumoto, 2000" startWordPosition="2852" endWordPosition="2856"> by the syntactic role tag associated with token . Each tag takes one of 138 possible values. The following features are added to our system. first order features: ( ) second order features: self interactions ( 4.3 Dynamic programming In text chunking, we predict hidden states (chunk types) based on a sequence of observed states (text). This resembles hidden Markov models where dynamic programming has been widely employed. Our approach is related to ideas described in (Punyakanok and Roth, 2001). Similar methods have also appeared in other natural language processing systems (for example, in (Kudoh and Matsumoto, 2000)). Given input vectors consisting of features constructed as above, we apply the regularized Winnow algorithm to train linear weight vectors. Since the Winnow algorithm only produces positive weights, we employ the balanced version of Winnow with being transformed into . As explained earlier, the constant term is used to offset the effect of threshold. Once a weight vector is obtained, we let and . The prediction with an incoming feature vector is then . Since Winnow only solves binary classification problems, we train one linear classifier for each chunk type. In this way, we obtain twenty-th</context>
<context position="20743" citStr="Kudoh and Matsumoto, 2000" startWordPosition="3511" endWordPosition="3514">on a 400Mhz Pentium machine running Linux is about sixteen minutes, which corresponds to less than one minute per category. The time using the dynamic programming to produce chunk predictions, excluding tokenization, is less than ten seconds. There are about non-zero linear weight components per chunktype, which corresponds to a sparsity of more than . Most features are thus irrelevant. All previous systems achieving a similar performance are significantly more complex. For example, the previous best result in the literature was achieved by a combination of 231 kernel support vector machines (Kudoh and Matsumoto, 2000) with an overall value of . Each kernel support vector machine is computationally significantly more expensive than a corresponding Winnow classifier, and they use an order of magnitude more classifiers. This implies that their system should be orders of magnitudes more expensive than ours. This point can be ver(5) ified from their training time of about one day on a 500Mhz Linux machine. The previously second best system was a combination of five different WPDV models, with an overall value of (van Halteren, 2000). This system is again more complex than the regularized Winnow approach we prop</context>
</contexts>
<marker>Kudoh, Matsumoto, 2000</marker>
<rawString>Taku Kudoh and Yuji Matsumoto. 2000. Use of support vector learning for chunk identification. In Proc. CoNLL-2000 and LLL-2000, pages 142–144.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Littlestone</author>
</authors>
<title>Learning quickly when irrelevant attributes abound: a new linear-threshold algorithm.</title>
<date>1988</date>
<booktitle>Machine Learning,</booktitle>
<pages>2--285</pages>
<contexts>
<context position="1143" citStr="Littlestone, 1988" startWordPosition="171" endWordPosition="172">ta. To remedy this problem, a modification called regularized Winnow has been proposed. In this paper, we apply this new method to text chunking. We show that this method achieves state of the art performance with significantly less computation than previous approaches. 1 Introduction Recently there has been considerable interest in applying machine learning techniques to problems in natural language processing. One method that has been quite successful in many applications is the SNoW architecture (Dagan et al., 1997; Khardon et al., 1999). This architecture is based on the Winnow algorithm (Littlestone, 1988; Grove and Roth, 2001), which in theory is suitable for problems with many irrelevant attributes. In natural language processing, one often encounters a very high dimensional feature space, although most of the features are irrelevant. Therefore the robustness of Winnow to high dimensional feature space is considered an important reason why it is suitable for NLP tasks. However, the convergence of the Winnow algorithm is only guaranteed for linearly separable data. In practical NLP applications, data are often linearly non-separable. Consequently, a direct application of Winnow may lead to nu</context>
<context position="4296" citStr="Littlestone, 1988" startWordPosition="686" endWordPosition="687">nant functions, which consist of linear combinations of the components of the input variable. Specifically, we seek a weight vector and a threshold such that if its label and if its label . For simplicity, we shall assume in this paper. The restriction does not cause problems in practice since one can always append a constant feature to the input data , which offsets the effect of . Given a training set of labeled data , a number of approaches to finding linear discriminant functions have been advanced over the years. We are especially interested in the Winnow multiplicative update algorithm (Littlestone, 1988). This algorithm updates the weight vector by going through the training data repeatedly. It is mistake driven in the sense that the weight vector is updated only when the algorithm is not able to correctly classify an example. The Winnow algorithm (with positive weight) employs multiplicative update: if the linear discriminant function misclassifies an input training vector with true label , then we update each component of the weight vector as: (1) where is a parameter called the learning rate. The initial weight vector can be taken as , where is a prior which is typically chosen to be unifo</context>
</contexts>
<marker>Littlestone, 1988</marker>
<rawString>N. Littlestone. 1988. Learning quickly when irrelevant attributes abound: a new linear-threshold algorithm. Machine Learning, 2:285–318.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael McCord</author>
</authors>
<title>Slot grammar: a system for simple construction of practical natural language grammars. Natural Language and Logic,</title>
<date>1989</date>
<pages>118--145</pages>
<contexts>
<context position="14638" citStr="McCord, 1989" startWordPosition="2459" endWordPosition="2460"> this restriction is relatively minor. There are possible remedies to the memory consumption problem, although we have not implemented them in our current system. One solution comes from noticing that although the feature vector is of very high dimension, most dimensions are empty. Therefore one may create a hash table for the features, which can significantly reduce the memory consumption. 4.2 Using enhanced linguistic features We were interested in determining if additional features with more linguistic content would lead to even better performance. The ESG (English Slot Grammar) system in (McCord, 1989) is not directly comparable to the phrase structure grammar implicit in the WSJ treebank. ESG is a dependency grammar in which each phrase has a head and dependent elements, each marked with a syntactic role. ESG normally produces multiple parses for a sentence, but has the capability, which we used, to output only the highest ranked parse, where rank is determined by a system-defined measure. There are a number of incompatibilities between the treebank and ESG in tokenization, which had to be compensated for in order to transfer the syntactic role features to the tokens in the standard traini</context>
</contexts>
<marker>McCord, 1989</marker>
<rawString>Michael McCord. 1989. Slot grammar: a system for simple construction of practical natural language grammars. Natural Language and Logic, pages 118–145.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Vasin Punyakanok</author>
<author>Dan Roth</author>
</authors>
<title>The use of classifiers in sequential inference.</title>
<date>2001</date>
<booktitle>Advances in Neural Information Processing Systems 13,</booktitle>
<pages>995--1001</pages>
<editor>In Todd K. Leen, Thomas G. Dietterich, and Volker Tresp, editors,</editor>
<publisher>MIT Press.</publisher>
<contexts>
<context position="16823" citStr="Punyakanok and Roth, 2001" startWordPosition="2833" endWordPosition="2836">tical chunker can be regarded as a machine learned transformation that maps ESG syntactic role tags into WSJ chunks. We denote by the syntactic role tag associated with token . Each tag takes one of 138 possible values. The following features are added to our system. first order features: ( ) second order features: self interactions ( 4.3 Dynamic programming In text chunking, we predict hidden states (chunk types) based on a sequence of observed states (text). This resembles hidden Markov models where dynamic programming has been widely employed. Our approach is related to ideas described in (Punyakanok and Roth, 2001). Similar methods have also appeared in other natural language processing systems (for example, in (Kudoh and Matsumoto, 2000)). Given input vectors consisting of features constructed as above, we apply the regularized Winnow algorithm to train linear weight vectors. Since the Winnow algorithm only produces positive weights, we employ the balanced version of Winnow with being transformed into . As explained earlier, the constant term is used to offset the effect of threshold. Once a weight vector is obtained, we let and . The prediction with an incoming feature vector is then . Since Winnow on</context>
</contexts>
<marker>Punyakanok, Roth, 2001</marker>
<rawString>Vasin Punyakanok and Dan Roth. 2001. The use of classifiers in sequential inference. In Todd K. Leen, Thomas G. Dietterich, and Volker Tresp, editors, Advances in Neural Information Processing Systems 13, pages 995–1001. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Erik F Tjong Kim Sang</author>
<author>Sabine Buchholz</author>
</authors>
<title>Introduction to the conll-2000 shared tasks: Chunking.</title>
<date>2000</date>
<booktitle>In Proc. CoNLL-2000 and LLL-2000,</booktitle>
<pages>127--132</pages>
<contexts>
<context position="2411" citStr="Sang and Buchholz, 2000" startWordPosition="377" endWordPosition="380">ed regularized Winnow, has been recently proposed in (Zhang, 2001). This method modifies the original Winnow algorithm so that it solves a regularized optimization problem. It converges both in the linearly separable case and in the linearly nonseparable case. Its numerical stability implies that the new method can be more suitable for practical NLP problems that may not be linearly separable. In this paper, we compare regularized Winnow and Winnow algorithms on text chunking (Abney, 1991). In order for us to rigorously compare our system with others, we use the CoNLL2000 shared task dataset (Sang and Buchholz, 2000), which is publicly available from http://lcgwww.uia.ac.be/conll2000/chunking. An advantage of using this dataset is that a large number of state of the art statistical natural language processing methods have already been applied to the data. Therefore we can readily compare our results with other reported results. We show that state of the art performance can be achieved by using the newly proposed regularized Winnow method. Furthermore, we can achieve this result with significantly less computation than earlier systems of comparable performance. The paper is organized as follows. In Section</context>
<context position="7969" citStr="Sang and Buchholz, 2000" startWordPosition="1312" endWordPosition="1316">innow formulation. At each data point , we fix all with , and update to approximately maximize the dual objective functional using gradient ascent: (4) problem in natural language processing. As an example of text chunking, the sentence “Balcor, which has interests in real estate, said the position is newly created.” can be divided as follows: [NP Balcor], [NP which] [VP has] [NP interests] [PP in] [NP real estate], [VP said] [NP the position] [VP is newly created]. In this example, NP denotes non phrase, VP denotes verb phrase, and PP denotes prepositional phrase. The CoNLL-2000 shared task (Sang and Buchholz, 2000), introduced last year, is an attempt to set up a standard dataset so that researchers can compare different statistical chunking methods. The data are extracted from sections of the Penn Treebank. The training set consists of WSJ sections 15-18 of the Penn Treebank, and the test set consists of WSJ sections 20. Additionally, a part-of-speech (POS) tag was assigned to each token by a standard POS tagger (Brill, 1994) that was trained on the Penn Treebank. These POS tags can be used as features in a machine learning based chunking algorithm. See Section 4 for detail. The data contains eleven di</context>
<context position="21758" citStr="Sang and Buchholz, 2000" startWordPosition="3681" endWordPosition="3684"> The previously second best system was a combination of five different WPDV models, with an overall value of (van Halteren, 2000). This system is again more complex than the regularized Winnow approach we propose (their best single classifier performance is ). The third best performance was achieved by using combinations of memory-based models, with an overall value of . The rest of the eleven reported systems employed a variety of statistical techniques such as maximum entropy, Hidden Markov models, and transformation based rule learners. Interested readers are referred to the summary paper (Sang and Buchholz, 2000) which contains the references to all systems being tested. testdata precision recall ADJP 79.45 72.37 75.75 ADVP 81.46 80.14 80.79 CONJP 45.45 55.56 50.00 INTJ 100.00 50.00 66.67 LST 0.00 0.00 0.00 NP 93.86 93.95 93.90 PP 96.87 97.76 97.31 PRT 80.85 71.70 76.00 SBAR 87.10 87.10 87.10 VP 93.69 93.75 93.72 all 93.53 93.49 93.51 Table 1: Our chunk prediction results: with basic features The above comparison implies that the regularized Winnow approach achieves state of the art performance with significant less computation. The success of this method relies on regularized Winnow’s ability to tole</context>
</contexts>
<marker>Sang, Buchholz, 2000</marker>
<rawString>Erik F. Tjong Kim Sang and Sabine Buchholz. 2000. Introduction to the conll-2000 shared tasks: Chunking. In Proc. CoNLL-2000 and LLL-2000, pages 127–132.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hans van Halteren</author>
</authors>
<title>Chunking with wpdv models.</title>
<date>2000</date>
<booktitle>In Proc. CoNLL-2000 and LLL-2000,</booktitle>
<pages>154--156</pages>
<marker>van Halteren, 2000</marker>
<rawString>Hans van Halteren. 2000. Chunking with wpdv models. In Proc. CoNLL-2000 and LLL-2000, pages 154–156.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tong Zhang</author>
</authors>
<title>Regularized winnow methods.</title>
<date>2001</date>
<booktitle>In Advances in Neural Information Processing Systems 13,</booktitle>
<pages>703--709</pages>
<contexts>
<context position="1853" citStr="Zhang, 2001" startWordPosition="285" endWordPosition="286"> In natural language processing, one often encounters a very high dimensional feature space, although most of the features are irrelevant. Therefore the robustness of Winnow to high dimensional feature space is considered an important reason why it is suitable for NLP tasks. However, the convergence of the Winnow algorithm is only guaranteed for linearly separable data. In practical NLP applications, data are often linearly non-separable. Consequently, a direct application of Winnow may lead to numerical instability. A remedy for this, called regularized Winnow, has been recently proposed in (Zhang, 2001). This method modifies the original Winnow algorithm so that it solves a regularized optimization problem. It converges both in the linearly separable case and in the linearly nonseparable case. Its numerical stability implies that the new method can be more suitable for practical NLP problems that may not be linearly separable. In this paper, we compare regularized Winnow and Winnow algorithms on text chunking (Abney, 1991). In order for us to rigorously compare our system with others, we use the CoNLL2000 shared task dataset (Sang and Buchholz, 2000), which is publicly available from http://</context>
<context position="6483" citStr="Zhang, 2001" startWordPosition="1066" endWordPosition="1067">uth, 1998), we consider the loss function Setting the gradient of the above formula to zero, we obtain In the above equation, denotes the gradient (or more rigorously, a subgradient) of , which takes the value if , the value if , and a value in between if . The Winnow update (1) can be regarded as an approximate solution to (3). Although the above derivation does not solve the non-convergence problem of the original Winnow method when the data are not linearly separable, it does provide valuable insights which can lead to a more systematic solution of the problem. The basic idea was given in (Zhang, 2001), where the original Winnow algorithm was converted into a numerical optimization problem that can handle linearly non-separable data. , which is often called “hinge loss”. For each data point , we consider an online update rule such that the weight after seeing the-th example is given by the solution to The resulting formulation is closely related to (2). However, instead of looking at one example at a time as in an online formulation, we incorporate all examples at the same time. In addition, we add a margin condition into the “hinge loss”. Specifically, we seek a linear weight that solves W</context>
<context position="9135" citStr="Zhang, 2001" startWordPosition="1519" endWordPosition="1520">tion 4 for detail. The data contains eleven different chunk types. However, except for the most frequent three types: NP (noun phrase), VP (verb phrase), and PP (prepositional phrase), each of the remaining chunks has less than occurrences. The chunks are represented by the following three types of tags: The-th component of is given by s.t. ( ) where . We update and by repeatedly going over the data from B-X first word of a chunk of type X I-X non-initial word in an X chunk . Learning bounds of regularized Winnow that are similar to the mistake bound of the original Winnow have been given in (Zhang, 2001). These results imply that the new method, while it can properly handle non-separable data, shares similar theoretical advantages of Winnow in that it is also robust to irrelevant features. This theoretical insight implies that the algorithm is suitable for NLP tasks with large feature spaces. 3 CoNLL-2000 chunking task The text chunking task is to divide text into syntactically related non-overlapping groups of words (chunks). It is considered an important O word outside of any chunk A standard software program has been provided (which is available from http://lcgwww.uia.ac.be/conll2000/chunk</context>
</contexts>
<marker>Zhang, 2001</marker>
<rawString>Tong Zhang. 2001. Regularized winnow methods. In Advances in Neural Information Processing Systems 13, pages 703–709.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>