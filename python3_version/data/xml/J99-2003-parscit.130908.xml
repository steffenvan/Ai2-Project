<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.9980995">
Tree Adjoining Grammars in a Fragment
of the Lambek Calculus
</title>
<author confidence="0.982028">
V. Michele Abrusci* Christophe Fouqueret
</author>
<affiliation confidence="0.885654">
Universita di Bari Universite Paris-Nord
</affiliation>
<author confidence="0.829948">
Jacqueline Vauzeilles1
</author>
<affiliation confidence="0.313932">
Universite Paris-Nord
</affiliation>
<bodyText confidence="0.999683">
This paper presents a logical formalization of Tree Adjoining Grammar (TAG). TAG deals with
lexical ized trees and two operations are available: substitution and adjunction. Adjunction is
generally presented as an insertion of one tree inside another, surrounding the subtree at the
adjunction node. This seems to contradict standard logical ability. We prove that some logical
formalisms, namely a fragment of the Lambek calculus, can handle adjunction.
We represent objects and operations of the TAG formalism in four steps: first trees (initial
or derived) and the way they are constituted, then the operations (substitution and adjunction),
and finally the elementary trees, i.e., the grammar. Trees (initial or derived) are obtained as the
closure of the calculus under two rules that mimic the grammatical ones. We then prove the equiv-
alence between the language generated by a TAG grammar and the closure under substitution
and adjunction of its logical representation. Besides this nice property, we relate parse trees to
logical proofs, and to their geometric representation: proofnets. We briefly present them and give
examples of parse trees as proofnets. This process can be interpreted as an assembling of blocks
(proofnets corresponding to elementary trees of the grammar).
</bodyText>
<sectionHeader confidence="0.992132" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999954666666667">
This paper presents a logical formalization of Tree Adjoining Grammar (TAG) (Joshi,
Levy and Takahashi 1975). TAG deals with lexicalized trees and two operations are
available: substitution and adjunction. A set of (elementary) trees is associated to
each lexical item. TAG is a tree-rewriting system: the derivation process consists in
applying operations to trees in order to obtain a (derived) tree whose sequence of
leaves is a sentence. Adjunction increases the expressive power of the formalism in
such a way that noncontext-free languages can be represented although the parse
process is done in polynomial time. Adjunction is generally presented as an insertion
of one tree inside another, surrounding the subtree at the adjunction node. This seems
to contradict standard logic, but we show (in Section 4) that some logical formalisms,
namely a fragment of the Lambek calculus (LC, first introduced by Lambek [1958]),
can handle adjunction.
We represent objects and operations of the TAG formalism in four steps: first trees
(initial or derived) and the way they are constituted, then the operations (substitution
and adjunction), and finally the elementary trees, i.e., the grammar. Labels occurring
</bodyText>
<note confidence="0.6522016">
* CILA, 70121 Bari, Italy. E-mail: abrusci@casputit
t LIPN-CNRS URA 1507, 93430 Villetaneuse, France. E-mail: cf@lipn.univ-paris13.fr
LIPN-CNRS URA 1507, 93430 Villetarieuse, France. E-mail: jv@lipn.univ-paris13.fr
C) 1999 Association for Computational Linguistics
Computational Linguistics Volume 25, Number 2
</note>
<bodyText confidence="0.999959527777778">
in the grammar constitute the set of propositional variables we need. The sequent
calculus is a restriction of the standard sequent calculus for LC: there are identity
axioms (A I- A) and rules for introducing connectives (0 at left-hand side, 0- at
right-hand side). In LC, / is usually used for and • for 0. We use this notation
throughout the paper to relate our formalization to noncommutative linear logic. 0-
is the left implication, 0 is a noncommutative &amp;quot;and&amp;quot; connective. We prove that this
restricted calculus is closed under two rules that mimic the grammatical operations.
Trees (initial or derived) are then obtained as the closure of the calculus under these
two rules. In fact, trees are represented as (provable) sequents in an almost classical
way. The right-hand side is the variable labeling the mother node of the tree. The
left-hand side is a sequence of formulas of the following kinds: A for some leaf A of
the tree, A o-- B1 0 ... B, where A is the label of some internal node and B, are the
labels of its daughters, A o- A whenever A is a node where an adjunction can take
place. This latter kind of formula can be grammatically interpreted as if such an A
was split up into two nodes with the same label, linked by some &amp;quot;soft&amp;quot; relation. The
set of elementary trees of a TAG grammar gi is then represented as a subset M of the
sequents in the closure of the calculus under the two previous rules. We then prove
the equivalence between the language generated in TAG by such a grammar gi and
the closure under substitution and adjunction of the logical representation M. Note
that our interpretation of adjunction is very close to the use of quasi trees described
in Vijay-Shanker, (1992).
Besides this equivalence property, we relate parse trees to logical proofs, and to
their geometric representation, proofnets. We briefly present proofnets, and the corre-
spondence between proofs and proofnets, and give examples of parse trees viewed as
proofnets. This enables a new point of view on the parse process. This process can be
interpreted as an assembling of blocks (proofnets corresponding to elementary trees
of the grammar), and also as a circulation of information through links relating nodes
of the proofnets.
The remainder of the paper is organized in four parts. Section 2 describes the
TAG formalism. We recall the terminology and show how substitution and adjunction
operate on trees. Section 3 gives a survey of Lambek calculus viewed as a fragment
of a noncommutative linear logic. We propose in Section 4 a logical formulation of
TAG in a fragment of LC, and prove the correspondence between the two. Section 5 is
devoted to the representation of proofs as proofnets; in this final section, we also study
implications of this point of view. The proofs of propositions and theorems given in
Section 4 are delayed to the appendix for the sake of clarity.
</bodyText>
<sectionHeader confidence="0.913123" genericHeader="keywords">
2. Tree Adjoining Grammars
</sectionHeader>
<bodyText confidence="0.998425333333333">
The Tree Adjoining Grammar formalism is a tree-generating formalism introduced in
Joshi, Levy, and Takahashi (1975), linguistically motivated (see, for example, Abeille
et al. [1990] and Kroch and Joshi [1985]), and with formal properties studied in Vijay-
Shanker and Joshi (1985) and Vijay-Shanker and Weir (1994a, 1994b). A TAG is defined
by two finite sets of trees composed by means of the substitution and adjunction
operations.&apos;
</bodyText>
<footnote confidence="0.940731">
1 Originally, there was no need for a substitution operation, as initial trees were always rooted at S. thus •
labeling a sentence. In the Lexicalized-TAG formalism, this constraint disappears in favor of the
substitution operation. Throughout the paper, we will use TAG to refer to the Lexicalized-TAG
formalism.
</footnote>
<page confidence="0.996024">
210
</page>
<note confidence="0.955087">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<sectionHeader confidence="0.598375" genericHeader="introduction">
Definition
</sectionHeader>
<bodyText confidence="0.811913">
A TAG G is a 5-tuple (VN, VT, S. I, A) where
</bodyText>
<listItem confidence="0.999674">
• VN is a finite set of nonterminal symbols,
• VT is a finite set of terminal symbols,
• S is a distinguished nonterminal symbol, the start symbol,
• I is a set of initial trees,
• A is a set of auxiliary trees.
</listItem>
<bodyText confidence="0.999913933333333">
An elementary tree is either an initial tree or an auxiliary tree. Initial as well as
auxiliary trees are trees with at least one leaf labeled by a terminal node (the grammar
is a so-called lexicalized one). An auxiliary tree must furthermore have a leaf (the foot
node, marked with a star *) with the same label as the root node. Each nonterminal
node is marked as adjoinable or nonadjoinable (in this case, the node is marked NA).
Each internal node must obviously be labeled by a nonterminal node.2 A derived tree
is either an initial tree or a tree obtained from derived trees by means of the two
available operations.
We add two constraints on TAG grammars: a node X cannot have a unique daugh-
ter labeled X, i.e., cannot be part of a tree. This condition is in no way an important
X
constraint, as a grammar may always be transformed to conform to the constraint by
substituting a unique node X for the partial tree. However, our logical representation
makes use of a trick based on such trees: we replace nodes marked adjoinable by such
partial trees (there is no mark at all in our logical representation). We also suppose
that the type of each tree is unambiguous: an initial tree has no leaf with the same
label as the root node, an auxiliary tree has only one leaf with the same label as the
root node.
To conform with the literature, we will use a to refer to an initial tree, p to refer to
an auxiliary tree, and y to refer to some derived tree. Examples of initial and auxiliary
trees are given in Figure 1. Two TAGs are defined: G1 =--- ({S}, {a, b, c, d, e}, S. fall, Oil)
(c is the empty word) and G2 =----- ({S, VP, NP, N}, {the, man, walks}, S. {a2, a3, 0E4}, 0).
The substitution operation is defined as usual. A nonterminal leaf of a tree may be
expanded with a tree whose root node has the same label. We follow a conventional
notation: leaves that accept substitution are marked with a down arrow i. This is not
to be interpreted as a restriction on substitution, but only as a visual indication of
what remains to be substituted to get a complete sentence. The adjunction operation
is a little bit more complicated. It supposes a derived tree with a nonterminal node,
say X, possibly internal and not marked NA, and an auxiliary tree with root node X.
The operation consists in:
</bodyText>
<listItem confidence="0.999198">
• excising the subtree with root labeled X in the derived tree,
• inserting the auxiliary tree at node labeled X in the derived tree,
</listItem>
<footnote confidence="0.709282666666667">
2 In some versions, nonterminal nodes of elementary trees are labeled by a set of (auxiliary) trees that
can be adjoined at this node. In case of the empty set, the node is obviously nonadjoinable. For the
sake of clarity, we simplify the definition to only take into account the Boolean adjoinable property.
</footnote>
<page confidence="0.997327">
211
</page>
<figure confidence="0.990761111111111">
Computational Linguistics Volume 25, Number 2
al )31 =
a
b 1AC
NP /y
a2— Z N a3 = I o4
The /V.I. man N P,I. VP
i
walks
</figure>
<figureCaption confidence="0.9227025">
Figure 1
Elementary trees.
</figureCaption>
<bodyText confidence="0.972328181818182">
• finally, inserting the excised subtree at the foot node (hence labeled X
and marked with a star *) in the auxiliary tree.
Examples of these operations are given in Figure 2. To clearly show the adjunction
operation, the links of the adjoined tree ,3i are represented by dashed lines in the
derived trees 1(3 and -y4. Obviously, there is only one kind of link. We write Yi G 72
when 72 is the result of an adjunction or a substitution of an elementary tree of a
TAG G on the derived tree 111; = is the reflexive, transitive closure of G. The set
{-y/3a E G and a =-y} is represented by T(G). The language L(G) generated by a
TAG G is the set of strings, i.e., sequences of leaves of trees in T(G) when the leaves of
these trees are only labeled with terminal nodes, and whose root is the start symbol.
Hence, L(G1) = {anbncndn /n &gt; 0} and L(G2) = {the man walks}.
</bodyText>
<listItem confidence="0.389495">
3. Lambek Calculus and Noncommutative Linear Logic
</listItem>
<figureCaption confidence="0.7241305">
Lambek calculus is well known; we give only the language and sequent calculus in
Figure 3.
</figureCaption>
<bodyText confidence="0.988187789473684">
Lambek calculus will be sufficient to formalize TAG (see the next section). In
Figures 4, 5, and 6, we give three examples of proofs to show how the sequen.t calculus
can be used. The first one (Figure 4) is a straightforward use of a Lambek-style parsing,
given the two implications and a set of proper axioms corresponding to the words.
The two other proofs do not use proper axioms at all: rules labeled lex are provable
sequents; as these sequents are obviously provable we omit their proof tree. The second
proof (Figure 5) is in the same spirit as the first. However, for this second proof,
descriptions of lexical items are included in the sequents. At the same time, it can
easily be compared to the third proof: in the second proof, the structural information
is located at the head of each structure as one formula; in the third proof, one formula
represents a syntactic tree of level 1. The third proof (Figure 6) interprets the Lambek
grammar in a derivation style, we only need one implication 0— and the connective
times 0. The proofs use cuts: they can be withdrawn using the cut elimination theorem,
but we think the cuts help in understanding the process. The following sections include
other examples and emphasize the usefulness of noncommutative linear logic in the
linguistic domain.
A natural way to extend Lambek calculus consists in embedding it in a classical
system, in the sense that the connectives &amp;quot;and&amp;quot; and &amp;quot;or&amp;quot; are dual. Indeed, LC is an
&amp;quot;intuitionistic&amp;quot; system as there can be only one conclusion in the sequents, this is not
</bodyText>
<page confidence="0.99707">
212
</page>
<note confidence="0.514918">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<figure confidence="0.993782722222222">
NP
Substitution of a3 on a2 gives Yi =
the N
man
Substitution of 71 on a4 gives 72 = -&apos;------
NJ&apos; VIP
/ \
the N walks
man
Adjunction of )131 on al gives 73 = - --
a
STA
SNA
Adjunction of 131 on 73 gives 74 =
a SALA
-
t
b SA C
</figure>
<figureCaption confidence="0.907186">
Figure 2
Substitution and adjunction results.
</figureCaption>
<bodyText confidence="0.999903666666667">
the case with noncommutative linear logic. Allowing multiple conclusions may give
valuable benefits from a linguistic point of view, but we will only consider in this
paper the geometrical representation available for such a system, i.e., proofnets. In
the appendix, we give a brief description of linear logic, and the relations between
classical, linear, and noncommutative linear logics. We hope this will help readers to
understand the overall framework.
</bodyText>
<sectionHeader confidence="0.874704" genericHeader="method">
4. The Calculus A (A Fragment of LC)
</sectionHeader>
<bodyText confidence="0.999892428571429">
The formalization of TAG in LC relies mainly on a logical presentation of the two op-
erations substitution and adjunction, together with a correspondence between proofs
and trees. As already shown in the previous section, the substitution operation is noth-
ing but the application of the cut rule restricted to atomic formulas, which we call the
atomic cut rule. Interpreting the adjunction operation is really the main difficulty. The
adjunction results from two atomic cut rules between the sequent corresponding to
the adjunction tree and two suitable sequents corresponding to two subparts of the
</bodyText>
<page confidence="0.998651">
213
</page>
<figure confidence="0.8896208">
Computational Linguistics Volume 25, Number 2
IP I- A r1,A,r2 B
(axiom) (cut)
A I- A r,,r,r, F- B
A B 0)
</figure>
<equation confidence="0.99001725">
P,A1-A0B
r,,A,r, F- c iFB
c—)
o— B,A,r2 c
ri,A,r, 1--C 6.1-B
(/ —o
ri,A,B -0 A,r2 c )
ri,A,B,r, F C
(1 0)
ri,A(DB,r2F- c
P,BFA ,
i&apos;l-Ao—B
B,r I- A
(r— —o)
F B —o A
Figure 3
Language and sequent calculus for the Lambek calculus.
John H NP
gives F ((NP-0 S)o—NP)o—NP
Mary I- NP
a F- NPo—N
book I- N
NP NP S S
NP,NP —o S S NP NP
NP,(NP —o S)o— NP,NP S NP NP
NP,((NP —o S)o— NP)o— NP,NP,NP S N N
NP,((NP —o S)o— NP)o— NP, NP,(NP o— N), N S
John, gives, Mary, a, book I- S
</equation>
<bodyText confidence="0.579443">
(cuts wrt the
proper axioms)
</bodyText>
<figureCaption confidence="0.682096">
Figure 4
</figureCaption>
<bodyText confidence="0.762234">
Lexicon and proof of John gives Mary a book: (Lambek-style) with proper axioms.
</bodyText>
<equation confidence="0.973831571428571">
(lex) (lex) (lex)
NP,(((NP —0 SI) o— NP)o— NP)o— gives, gives, NP, NP S NP o— Mary, Mary F N/ex) (NP o— N) 0— o,o,NF NP No— book , book F N
NP, (((NP —o 5) o— NP) o— NP)o— gives, gives, NP o— Mary„Wary, NP F S (cut) (NP 0— N)o— a, a, N book, book NP
x)
NP o— John, John NP(le NP,(((NP —o 5)o— NP)o— NP)o— gives, gives„VP o— Mary, Mary, (NP 0— N) o— a, a, N o— book, book F S
(tut)
NP 0— John, John, ()(NP --o S) o— NP)o— NP) o— gives, gives, NP o— Mary, Mary,(NP N) o— 0,0,N 0—book, book F S
</equation>
<figureCaption confidence="0.609028">
Figure 5
</figureCaption>
<figure confidence="0.754676714285714">
Proof of John gives Mary a book: (Lambek-style) two implications.
tree where adjunction is done. Consider, for example, the following TAG grammar:
SNA
Grammar = f
E a
b SNA C
(tut)
</figure>
<page confidence="0.99044">
214
</page>
<note confidence="0.693909">
Abrusd, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<equation confidence="0.9698578">
(leo) (lex) (lex) (lex)
S o— NP ® VP, NP, VP o— V e NP 0 NP,V o— gives,gives,NP,NP I- S NP o— Mary, Mary I- NP NP o— Det 0 N, Da o— a, a , N F NP N 0— book, book I- N
(cut) (cut)
So— NP® VP, NP, VP o— V 0 NP ® NP,V o— gives,gives,NP 0— Mary, Mary, NP I- S NP o— Det 0 N,Det o— a, a, N o— book, book I- NP
(cut)
</equation>
<figureCaption confidence="0.588402">
Figure 6
</figureCaption>
<subsectionHeader confidence="0.618739">
Proof of John gives Mary a book: one implication and times.
</subsectionHeader>
<bodyText confidence="0.992099">
This set of trees may be viewed as a subset of the closure 7-(g2) under substitution
(possibly with the declaration of adjunction nodes) of the following set of trees of
level 1:
</bodyText>
<equation confidence="0.988078">
SNA \
Grammar g2 -= ft , A
E aSd bSNAc
</equation>
<bodyText confidence="0.998979">
Note that the result of the adjunction of the second tree of on itself is exactly
the result of substitutions on trees of g2. However it is obvious that trees resulting
from substitution operations on g2 do not always correspond to results of adjunction
operations on g.
We logically represent the set of trees 7--(g2) as (the set of provable theorems of)
a calculus 4(c2): the formulas are built with the alphabet fe,a,b,c,d,S1 and the set of
connectives {0, 0-}, the sequent calculus consists of the axioms s s and the rules (in
both axioms and rules, s is a propositional letter):
</bodyText>
<equation confidence="0.9426668">
r ri, s, r2 H B r F- aosod ri, s, r2 B rl-bosoc B
ri, s 0- E, r, r2 B Pi, s 0- a s d, r, B ri,s bose c, r, r2 B
FHA F- B s H s ri, s, r2 P- B
r, I- A B (0)
ri, s 0- s, s, r2 B
</equation>
<bodyText confidence="0.9999505">
The introduction of a left implication (o-) corresponds to the building of a partial
tree. Such introductions are then restricted either to the formalization of the trees
of the grammar (the first three rules correspond exactly to the trees of g2), or to the
formalization of adjunction nodes (the formula s 0- s &amp;quot;marks&amp;quot; s as being an adjunction
node, i.e., the adjunction rule may be applied only on this kind of node as it will be
clear below).
The grammar can then be logically represented as a subset M(g) of the set of
provable sequents of the calculus A(g2):
</bodyText>
<equation confidence="0.595383">
M()= {S 0- aoSod,a,S 0- S,S 0- b®Sec,b,S,c,dh S,So- S,S 0- E, S}
</equation>
<bodyText confidence="0.999964666666667">
In AB-grammars (Bar-Hillel 1953), only one implication is used without any &amp;quot;and&amp;quot;
connective. The grammar would be represented in AB-grammars as two provable
sequents (note that &amp;quot;daughters of a node&amp;quot; are explicitly ordered):
</bodyText>
<equation confidence="0.743689">
((S 0- d) 0- S) 0- a,a,S 0- S,((S o- c) 0- S) 0- b,b,S,c,d1- S, S 0- S,S 0- €,€1- S
</equation>
<bodyText confidence="0.999886">
We will prove later that, besides the cut rule, there exists another derived rule for
the calculus A(g2) (and in fact for each calculus of this kind) mimicking the adjunction
operation. Reducing the calculus, then, to a closure of the substitution and adjunction
</bodyText>
<equation confidence="0.584455333333333">
NP o— John,John NP(lex) S o— NP® VP, NP, VP o— V NP NP,V o— gives,gives,NP o— Mary, Mary, NP o— Dot N, Vet o— ox, No— book, took -S
(cut)
S 0— NP VP, NP o— John, John, VP o— V NP NP,V 0— gives,gives,NP o— Mary, Mary, NP o— Det N,Det o— a, a, N o— book, book S
</equation>
<page confidence="0.737699">
215
</page>
<figure confidence="0.999385">
Computational Linguistics Volume 25, Number 2
D M(g&apos;) cut cum(G&apos;))
adj
T(g) D gi cug&apos;)
subst
adj
</figure>
<figureCaption confidence="0.999519">
Figure 7
</figureCaption>
<bodyText confidence="0.984882958333334">
Summary of the logical interpretation of the TAG formalism.
rules on M(g), we get exactly the logical representations of the set of trees under the
TAG grammar G.
The adjunction rule must be logically justified: there must be only one way to
combine the pieces (i.e., provable sequents corresponding to trees of level 1), given
the substitution node, such that the order of the elements is as requested.
To prove this, we show that for a suitable fragment of LC there is a unique way
to decompose a sequent F, a o— A, A H B in two sequents r, a, A2 I- B and A1 H A,
where A = Ai, L. In this section, we clarify the calculus A used to interpret TAG: it
includes a cut rule and an adjunction rule that mimic the grammatical operations. As
pointed out previously, these two rules are correct with respect to logic. We give the
basic properties satisfied by this calculus A. In order to represent TAG in LC, we first
construct the set G of subtrees of depth 1 of trees appearing in a TAG grammar G&apos;. The
TAG grammar g&apos; is then a subset of the closure T(G) of the set g under substitution
(indicated by subst) and the declaration of nodes where adjunction is not available
(indicated by NA). The interpretation of elements of G as provable sequents of A is
straightforward. This leads to a calculus A(G) where the operations are restricted with
respect to J. The TAG grammar G&apos; is then in correspondence with a subset m(gi)
of A(G) and we prove the equivalence between the language cug&apos;) generated by
G&apos; and the set of sequents CL(M(G&apos;)) obtained by closure on M(G&apos;) by the cut and
adjunction rules (we use M instead of M(G&apos;) whenever there is no ambiguity). Proofs
of propositions are delayed to the appendix. The various components of our approach
are summarized in Figure 7.
Consider the following fragment A of LC:
</bodyText>
<sectionHeader confidence="0.499768" genericHeader="method">
Definition The Calculus A
</sectionHeader>
<listItem confidence="0.999685">
• Alphabet of A: propositional letters a,b, .. ., connectives 0,
• Formulas: usual definition. A is a simple 0-formula iff A is a
</listItem>
<bodyText confidence="0.998690333333333">
propositional letter or A is a formula b1 0 ... ® bn where b1, ... ,b, are
propositional letters. B is a o--formula iff B = a o— A where a is a
propositional letter and A is a simple 0-formula.
</bodyText>
<page confidence="0.982274">
216
</page>
<note confidence="0.573667">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<listItem confidence="0.978509833333333">
• Sequents: F h A, where r is a finite sequence of formulas and A is a
formula.
• Sequent calculus:
— Axiom: a a
— Rules: r I- A AHB r 1- A c, r2 B
F,1-A013 (0) C 0- A, In, r2 B (°-)
</listItem>
<bodyText confidence="0.9495415">
In the following, we only consider sequents such that formulas in the left side are
either propositional letters, or 0—formulas. So, in the rule introducing 0-, C stands
for a propositional letter. As we have only one propositional letter before 0-, we model
trees: C is the (unique) mother and the 0-formula A is the sequence of its daughters.
Proposition Main properties of calculus A
(proofs in the appendix)
</bodyText>
<listItem confidence="0.9382755">
1. If I&apos; I- A 0 B is provable in A, then
• A and B are simple 0-formulas;
• there is a unique pair (r1, r2) s.t. r = r1, r2 and both the
sequents F1 H A and r2 B are provable in A.
2. If P, a o- A, A H B is provable in A, then
• A and B are simple 0-formulas;
• there is a unique pair (Ai, A2) s.t. A = A1, A2 and both the
sequents A and r, a, A2 B are provable in A.
</listItem>
<bodyText confidence="0.966579625">
Such a pair (A1, A2) will be called &amp;quot;the splitting pair in r, a o- A, A H B
for A.&amp;quot; Note that this pair can be computed easily: the first element Ai
of the splitting pair must satisfy a counting condition on each
propositional letter occurring in it (see the appendix).
3. The calculus A is closed under the atomic cut rule (which we also call
the substitution rule)
Note that A1 and A2 are uniquely defined from the premises, so the previous deduc-
tion is really a logical rule.
</bodyText>
<subsectionHeader confidence="0.65128">
Definition The Calculus A(g)
</subsectionHeader>
<bodyText confidence="0.945892333333333">
Let g be a family of labeled trees, of depth 1, not of the form f. Let T(g) be
h a Ai, a, A2 I- A
At, r, A2 A (cut)
i.e., if the sequents F H a and Ai, a, A2 h A are provable in A, then the
sequent A1,1&apos;, A2 h A is also provable in A.
4. The calculus A is closed under the adjoining rule
Pi, a, r2 a A, a o- a, A H b
ri, Ai, r2, A2 b
where (A1, A2) is the splitting pair of A in A, a o- a, A H b.
</bodyText>
<page confidence="0.821186">
217
</page>
<note confidence="0.289157">
Computational Linguistics Volume 25, Number 2
</note>
<bodyText confidence="0.592849">
the closure of g under the rules:
</bodyText>
<listItem confidence="0.996498166666667">
• substitution with or without the declaration of a new possibly internal
point on which the adjoining operation may be performed,
• adjoining operation.
A(g) is the calculus obtained from A as follows:
• propositional letters are exactly all the labels of the trees in g,
• the rule (0–) is restricted as follows:
</listItem>
<equation confidence="0.592006666666667">
P H A ri, a, r2 H B
(0- , g)
ri, a o- A, r, r2 1-- B
</equation>
<bodyText confidence="0.982437333333333">
where A, B are simple 0-formulas of the language of A(g), a is a
propositional letter of the language of A(g) and one of the following
cases occurs:
</bodyText>
<equation confidence="0.893282">
— A is a
— A is a propositional letter b different from a, and the tree iE g
b
— A is b1 ® ... ® b„, and the tree A E g
hi • • • bn
</equation>
<bodyText confidence="0.999979692307692">
The following propositions state the correspondence between sequents and trees.
The first two provide a precise translation between the two notions. Basically, a sequent
F 1- a (in the previous language) is the logical equivalent of a tree with root a, and
there is exactly one formula in r for each leaf, for each subtree (of depth 1), for
each adjunction node, and nothing else. Seq() (respectively, Tree()) associates a sequent
(respectively, a tree) to each tree (respectively, each sequent), and we prove the two are
converse. The last three propositions are properties concerning the logical counterpart
of a TAG grammar. The last one is in fact the most important: the closure under
(logical) adjunction and substitution of the set of sequents corresponding to a set of
elementary trees is exactly the set of sequents corresponding to the closure under
(grammatical) adjunction and substitution of this set of elementary trees. In other
words, the logical calculus (the restricted logical calculus we defined above) and the
grammatical calculus (the TAG calculus) coincide.
</bodyText>
<subsectionHeader confidence="0.635398">
Proposition Main properties of calculus A(g)
</subsectionHeader>
<bodyText confidence="0.946126">
(proofs in the appendix)
</bodyText>
<listItem confidence="0.814530166666667">
Properties 1-4 of A are also properties of A(g). Moreover the following properties
hold for A(c):
• To T E 7-(g), we associate a sequent Seq(T) of A(g) s.t.
— if a is the root of T, and the terminal points of T (ordered from
left to right) are al, ... ,am, then Seq(T) is
r H a
</listItem>
<page confidence="0.98719">
218
</page>
<note confidence="0.64628">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<bodyText confidence="0.999872">
where the sequence of all the propositional variables occurring
in is ai, ,a,, and there is a formula c 0- c in F iff c is a
possibly internal point of T on which the adjoining operation
may be performed;
</bodyText>
<listItem confidence="0.98057136">
- Seq(T) is provable in A(g).
• To every provable sequent F H A in A(g), we associate Tree(F H A) s.t.
- if A is a propositional letter, then Tree(F I- A) E T(g) where the
root is A, the terminal points (from left to right) are exactly all
the propositional letters occurring in F and in the same order in
which they occur in F, and the possibly internal points on which
the adjoining operation may be performed are exactly all the
propositional letters c s.t. c o— c occurs in F;
- if A is bi ... b„, and so F = Fi, Fn with the sequents
F, b, provable in A(g) for every 1 &lt;i &lt; n, then Tree(F I- A) is a
sequence T1, ... ,Tn of trees E s.t. T = Tree(F, H b,).
• If F H a is provable in A(g), then Seq(Tree(F H a)) = F H a. If T is a tree of
g, then Tree(Seq(T))= T.
• Let M be a set of provable sequents in A(g). Define CL(M) as follows:
- MCCL(M)
— (closure under atomic cut rule) if FhaE CL(M) and
Ai, a, Az H B ECL(M), then Ai, F, A2 B ECL(M)
— (closure under adjoining operation) if F1, a, r2 I- a ECL(M) and
A, a 0- a, A I- b ECL(M), then A, F1, A1, Fz, A2 H b ECL(M), where
(A1, A2) is the splitting pair of A in A, a, A H b
- nothing else belongs to CL(M).
• If F I- A ECL(M), then r I- A is provable in A(g)•
• If C (g , let CL(g&apos;) be the closure of g&apos; under:
— substitution,
— adjoining operation.
</listItem>
<equation confidence="0.9518905">
Clearly, cug,) C 2--(g). Let M = {Seq(T)/T E gi}, then
CL(M) = {Seq(T)/T E CL(&apos;)}.
</equation>
<bodyText confidence="0.9999805">
Starting from this last proposition, it is possible to prove that the language accepted
by a TAG grammar gi is exactly the language accepted by M(g&apos;). We can define the
language accepted by such a calculus as follows: Let us take only those sequents
in CL(M(g&apos;)) whose right part is the propositional variable S (the start symbol of
the grammar), and such that propositional variables of the left part of the sequent
correspond to terminal symbols of the grammar, i.e., words of the language. The
language accepted by M(g&apos;) is then the set of sequences of words in the same order
as they appear in the previous sequents.
</bodyText>
<sectionHeader confidence="0.779964" genericHeader="method">
5. TAG Analysis Using Noncommutative Proofnets
</sectionHeader>
<bodyText confidence="0.78372">
A proof in sequent calculus contains many useless properties in its contexts. Girard
(1987) has defined, in a purely geometric way, a class of graphs of formulas, called
</bodyText>
<page confidence="0.993483">
219
</page>
<note confidence="0.635769">
Computational Linguistics Volume 25, Number 2
</note>
<bodyText confidence="0.9999391">
proofnets: for each proof of a sequent F in the one-sided sequent calculus for multi-
plicative linear logic, there is a corresponding proofnet whose conclusions are exactly
the formulas in F, and for each proofnet, there is at least one corresponding proof of
the sequent H r in the one-sided sequent calculus for multiplicative linear logic (where
F is a sequence of all the conclusions of the proofnet). Similarly, Abrusci (1991) de-
fined in a purely geometric way a class of graphs, called noncommutative proofnets,
relative to multiplicative noncommutative linear logic. Roorda (1992) also described
proofnets for Lambek calculus. Other criteria exist by now for characterizing proofnets
for commutative or noncommutative, intuitionistic or nonintuitionistic linear logic. We
present here Abrusci&apos;s criteria.
</bodyText>
<subsectionHeader confidence="0.989071">
5.1 Noncommutative Proofnets
</subsectionHeader>
<bodyText confidence="0.999489714285714">
Proofnets are defined on one-sided sequent calculi. Presentations of the one-sided
sequent calculus, and of proofnets are given in the appendix. Let us recall that 22 is
the &amp;quot;or&amp;quot; connective associated to 0 (the &amp;quot;and&amp;quot; connective), such that A –o B = A-&apos;-&apos;B.
To every proof it of a sequent H F in the one-sided sequent calculus for multiplicative
noncommutative linear logic, we can associate (by induction on the construction of
the proof 7r) a noncommutative proofnet with conclusions F, i.e., an oriented planar
graph 7&apos; of occurrencies of formulas such that:
</bodyText>
<listItem confidence="0.966924666666666">
• The conclusions of 7&apos; are exactly the formulas in F.
• is a noncommutative proof structure, i.e., it is constructed by means of
the following links&apos;:
7.7
— Axiom-link (two conclusions, no premise) Al A
A
- Cut-link (two premises, no conclusion) L_J
AB
V
- 0-link (two premises, one conclusion) A B
AB
V
- 2?-link (two premises, one conclusion) A 28 B
and every occurrence of formula is a premise of at most one link and is a
conclusion of exactly one link.
• The translation r&apos; of it is a proofnet, i.e., it admits no shorttrip. A
shorttrip is a trip that does not contain each node twice. A trip is a
sequence of nodes, going from one node to another according to the
graph and to a switch for each 0-link and each 2g -link, in a
bideterministic way: the traversal of nodes is done according to Figure 8.
• Every assignment for 7&apos; is total: two integer variables are associated to
each label (one for each &amp;quot;side&amp;quot; of the variable). Constraints are imposed
on variables with respect to how trips are done throughout the net. The
assignment is total if the set of constraints has a solution.
</listItem>
<footnote confidence="0.6061115">
3 The 28-1ink is graphically distinguished from the 0-link. However this is a moot point because the
graph has only one kind of edge.
</footnote>
<page confidence="0.970646">
220
</page>
<figure confidence="0.960534333333333">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
BOC
Conclusion k.C.)
Axiom-link 1B1
Cut-link
0—link L-switch
C
R-switch \\//
130C
R-switch
BC B28
n —link L-switch
</figure>
<figureCaption confidence="0.8021065">
Figure 8
Travels through proof structures.
</figureCaption>
<listItem confidence="0.8623245">
• 7r1 induces the linear order F of the conclusions, i.e., iff the precedence
relation is a chain and each conclusion occurs exactly once in the chain.
</listItem>
<bodyText confidence="0.98261">
Precise definitions, examples, explanations and the proof of the following theorem
may be found in Abrusci (1995).
</bodyText>
<subsectionHeader confidence="0.45509">
Theorem
</subsectionHeader>
<bodyText confidence="0.975274">
7r/ is a noncommutative proofnet with conclusions F iff there exists a proof 7r of the
sequent F- F in the sequent calculus for multiplicative noncommutative linear logic
such that is associated to 7r.
Note that every noncommutative proofnet is a planar graph.
</bodyText>
<subsectionHeader confidence="0.999324">
5.2 Parse Examples
</subsectionHeader>
<bodyText confidence="0.999897846153846">
In this section, we give two simple examples of parses. The aim of this section is to
show the strong connection between the structure of proofs of sequents and a standard
TAG derived structure. Moreover, it emphasizes the interest of a proofnet approach as
the syntax (and parsing process) is concretely designed as a logical manipulation of
logical structures. In the next section, we develop this approach and show how lexical
rules can be integrated into it. Finally, we briefly mention that this can also give a
logical formalization of D-trees (Vijay-Shanker 1992).
The first example requires only substitution, i.e., the cut rule in the logical point of
view. We first give the sequents (provable in A) associated to the lexical items. Their
meanings are straightforward, e.g., &amp;quot;John and Mary are noun phrases (NP)&amp;quot; or &amp;quot;saw
requires a complement NP to obtain a verb phrase (VP) and a subject NP to obtain
a sentence (S).&amp;quot; Note that VP is an adjunction node so the sequent associated to the
item saw includes the formula VP o— VP. The next example uses this specification.
</bodyText>
<construct confidence="0.282776333333333">
John NP o- John, John F- NP
Mary NP 0- Mary, Mary I- NP
saw S o- NP VP, NP, VP o- VP, VP o- V NP, V 0- saw, saw, NP F- S
</construct>
<page confidence="0.97518">
221
</page>
<note confidence="0.566456">
Computational Linguistics Volume 25, Number 2
</note>
<equation confidence="0.990886142857143">
S o- NP 0 VP, NP, VP 0- VP, VP o- V ® NP,V o- saw, saw, NP I- S NP 0- Mary, Mary I- NP
NP o- John, John I- NP S o- NP 0 VP, NP, VP o- VP, VP 0- V 0 NP,V o- saw, saw, NP 0- Mary, Mary I- S
( (cut)cut)
S o- NP 0 VP, NP o- John, John, VP o- VP, VP o- V® NP,V o- saw, saw, NP o- Mary, Mary I- S
S o- NP 0 VP, NP, VP 0- VP, VP 0- V ® NP,V 0- saw , saw, NP I- S NP o- John, John I- NP
NP 0- Mary, Mary I- NP S o- NP 0 VP, NP o- John, John, VP o- VP, VP o- V® NP,V o- saw, saw, NP I- S (cut)
S o- NP 0 VP, NP o- John, John, VP o- VP, VP o- V® NP,V o- saw, saw, NP o- Mary, Mary F S (cut)
</equation>
<figureCaption confidence="0.923863">
Figure 9
</figureCaption>
<bodyText confidence="0.99044075">
A(G) proofs of John saw Mary.
The proof associated to the analysis of John saw Mary requires two cuts. The two
sequent proofs given in Figure 9 are the only two possibilities for this sentence in the
fragment „4(c). This pinpoints the fact that the order in which the cuts are done is
not significant with respect to the derived structure. Proofnets allow the expression of
this equivalence. Hence the two proofs have the same associated proofnet, given in
Figure 10. For the sake of clarity, the cut rules are bold lines, and subnets associated to
lexical items are circled. Obviously, if we delete the two cut lines, we are left with three
proofnets referring to (provable) sequents. The proofnet in Figure 10 still contains some
superfluous information, namely, nodes that cannot be targeted by the only available
operations in A(G)—the cut rule and the adjunction rule on a propositional variable.
In fact, we only need to keep nodes (i) that refer to conclusions of the proofnet that are
propositional variables or negation of propositional variables (a cut can be done on
such a literal), and (ii) that belong to subgraphs of the following form (corresponding
to the existence of a formula A 0-- A in the left part of a sequent, i.e., its negation
A 0 A± in the one-sided associated sequent):
</bodyText>
<equation confidence="0.6927745">
—1 r—
A A-
V
A 0 Ai
</equation>
<bodyText confidence="0.963097888888889">
We can then simplify the graph and replace the internal logical machinery by black
boxes (shown in the figures as solid black circles). The conclusions of each basic
proofnet are labeled: outputs (i.e., conclusions that are propositional variables) are
drawn as closed half circles, inputs (i.e., conclusions that are the negation of proposi-
tional variables) are drawn as open half circles. Plain lines link black boxes to black
boxes or conclusions, and subgraphs corresponding to adjunction points are drawn
as dashed lines. The previous proofnet is then redrawn as in Figure 11. We obviously
find the derived tree (neglecting some minor differences). The logical proofnet can
then be seen as an &amp;quot;explanation&amp;quot; of the structure of the tree, that is to say the oper-
ations available on the tree are the result of some focus of what can be done on the
proofnet. On the one hand, the use of black boxes is necessary to clarify the structure
of the analysis; on the other hand, this hides proof details that can be useful for some
linguistic operations (as is the case for adjunction with respect to the classical struc-
ture of a derived tree). We show in the next subsection another application of such a
(logical) refinement.
The last example discussed in this section is the analysis of the sentence John saw
Mary today. The sequent associated to the adverb today is the following one:
today VP 0- VP 0 today, VP, today I- VP
</bodyText>
<page confidence="0.991656">
222
</page>
<note confidence="0.456908">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<figure confidence="0.959566956521739">
NIP
---I I— ---I PVP VPI
Mary NP1 saw 111 V 0 NP VPi
VVP 0 VPI
Maryi Mary 0 NPI NANP1sowi saw 0 VI V 0 NP 0 VP1
Figure 10
John saw Mary.
—1
NP VP
VNP® VP S1
I ,
John NP&apos;
Johni John 0 NPI
NPI NP® VP 0 SIS
P
VP
VP
NP 1 % NP
7 r\
John saw
Mary
Figure 11
A simplified proof for John saw Mary.
</figure>
<figureCaption confidence="0.769418">
Figure 12
</figureCaption>
<subsubsectionHeader confidence="0.676508">
John saw Mary today.
</subsubsectionHeader>
<bodyText confidence="0.999535833333333">
The logical analysis includes the two operations substitution and adjunction, i.e.,
two cut rules and an adjunction rule. In Figure 12 the adjunction rule is shown as
a double-thick dashed line: this (logically) mimics the adjunction as it is shown in
the derived tree given in Figure 13. Note that the adverb has to be placed after the
complement (rightmost in the proofnet) in order to keep the graph planar. The proofnet
in Figure 14 is the proofnet corresponding to a cut-free proof.
</bodyText>
<page confidence="0.997026">
223
</page>
<figure confidence="0.8233326875">
Computational Linguistics Volume 25, Number 2
NP 111------,,,, 1
John VP
(Th LI
(Th i today
saw
Mary
Figure 13
A simplified proof for John saw Mary today.
I
\John&apos; John 0 N.J;LI
NP VP
11 NP 0 VP S&apos;
NP 0 VP 0 S S
1
John
</figure>
<figureCaption confidence="0.965307">
Figure 14
</figureCaption>
<bodyText confidence="0.82269">
Cut-free proofnet for John saw Mary today.
</bodyText>
<subsectionHeader confidence="0.989681">
5.3 On Some Extensions
</subsectionHeader>
<bodyText confidence="0.990336">
As usual in lexicalized formalisms, TAG states rules to generate the lexicon from a
basic set of descriptions. Among these, we find rules for passivization, interrogative
forms or wh-sentences. We focus here on one example (namely who) to show to what
extent the previous paradigm can be used also to logically interpret these lexical rules.
We expect this will help in understanding the underlying mechanisms. The formula-
tion we propose is the simplest one. This is also closely related to the approach used
in categorial grammars (the raising rule is simply the introduction of an implication;
see also Joshi and Kulick [1995] for such a relation and the way who can be defined).
Figures 15, 16, and 17 present proofnets and simplified proofnets for the two noun
adjuncts who John meets and who meets John. The analysis of complete sentences includ-
ing these adjuncts is then similar to the process developed in the previous section.
The corresponding (provable) sequents are given below. The basic lexical descriptions
are the following (we have deleted the adjunction declarations for sake of clarity; the
(logical) adjunction rule has to be slightly extended in order to take care of these new
structures):
John NP o- John, John I-- NP
meets So- NP 0 VP, NP, VP 0- V 0 NP, V o- meets, meets, NP I- S
who N o- N 0 who 0 (S 0- NP),N, who, S 0- NP I- N
Let m(g1) denote the set of the three previous sequents. From these basic descriptions,
the following entries are computed, i.e., the part of the lexicon relevant to these words
</bodyText>
<page confidence="0.996175">
224
</page>
<note confidence="0.450173">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<figure confidence="0.823859">
V NP V PL
V® ® vpi
Figure 15
Cut-free proofnet for who John meets.
</figure>
<figureCaption confidence="0.791867">
Figure 16
</figureCaption>
<bodyText confidence="0.666693888888889">
Cut-free proofnet for who meets John.
(MQ denotes this new set):
John NP o— John, John I— NP
meets So— NP 0 VP, NP, VP o— V 0 NP, V o— meets, meets, NP S
who meets _ No-NOwhoO(So-NP),N,who,(So-NP)o-VP,VPo-VONP,Vo-meets,meets,NPI-N
who _ meets No-Nowhoo(So-NP),N,who,So-NP0VP,NP,VP0-VoNP,Vo-meets,meetsl-N
It should be noted that the two sequents given below are provable in the calculus
MQ (cut and adjunction rules only).
who meets John N o— N 0 who 0 (S o— NP), N, who, (S o— NP) o— VP,
</bodyText>
<equation confidence="0.429889333333333">
VP o— V 0 NP, V o— meets, meets, NP o— John, John I— N
who John meets N o— N 0 who 0 (5 o— NP), N, who, S o— NP 0 VP, NP o— John, John,
VP 0— VP, VP 0— V 0 NP, V 0— meets, meets I— N
</equation>
<bodyText confidence="0.999568">
But they are not provable with the cut and adjunction rules from M(g). In other
words, we should consider the construction of the language in two steps. The first step
is the construction of the lexicon (a TAG grammar) from a basic set of descriptions
using complex rules. The second step is the closure of the TAG grammar with the cut
and adjunction rules. This point of view needs to be further developed but could be
a first approach to a complete integration of lexicon and grammar.
</bodyText>
<equation confidence="0.651232">
meets V1 V NP VP&amp;quot; VP NP Si
</equation>
<page confidence="0.929199">
225
</page>
<figure confidence="0.998638">
Computational Linguistics Volume 25, Number 2
NP
cm
r\
meets
John
</figure>
<figureCaption confidence="0.973094">
Figure 17
</figureCaption>
<bodyText confidence="0.874221">
Simplified proofs for who John meets and who meets John.
</bodyText>
<sectionHeader confidence="0.991251" genericHeader="method">
6. Conclusion
</sectionHeader>
<bodyText confidence="0.999981666666667">
The use of logic as a framework to describe natural language is not a new idea. Works
on Lambek calculus and logic programming are famous examples. However, linguistic
formalisms have fundamentally evolved in the past two decades. Though theoretical
research has been done on unification and attribute-value structures, operations on
syntactic trees have been investigated mainly by comparing different solutions (Vijay-
Shanker and Weir 1994a, 1994b). In this paper, we consider another way to look at
these operations. We focus on the adjunction operation available in Tree Adjoining
Grammars, as it seems to be the simplest way to augment the expressive power of a
formalism. We prove that noncommutative intuitionistic linear logic is a good frame-
work and we define a fragment equivalent to TAG. We show, furthermore, to what
extent geometric representations of proofs (proofnets) may be useful in understanding
how black boxes (i.e., relations between nodes in a syntactic tree) help simplify a parse
but also hide interesting mechanisms. There is still a lot to do in this direction. For
one thing, generalized categorial grammars also have to be logically investigated, the
objective being to relate GCG operations to logical operations (completed if necessary).
The preceding discussions also show the relationship between our point of view and
the idea of quasi trees developed by Vijay-Shanker (1992). He proposes to consider
partial descriptions of trees, i.e., adjunction nodes represented by means of loose rela-
tions whose meaning is a domination relation. In this case, the adjunction operation is
identified by a pair of substitution operations. The strong relation with what precedes
is clear. However, in order to take into account exactly this presentation, the axiom
of identity A I- A, where A is a propositional variable, must be added to the calculus
A(g) given in Section 4. In this way, adjunction nodes can be deleted from sequents.
In this new calculus, the following rule is satisfied:
</bodyText>
<listItem confidence="0.3324275">
A I- A r, A 0- A, A I- B (adjunction)
r, A I- B
</listItem>
<page confidence="0.996894">
226
</page>
<note confidence="0.825171">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<bodyText confidence="0.905292571428572">
Hence, we obtain the following equivalence:
Proposition
A parse tree is correct
iff the two nodes in a domination relation have the same label
iff there is a proof whose conclusions that are propositional variables are
the words of the sentence in the same order, and without any formula of
the form A o— A.
</bodyText>
<sectionHeader confidence="0.982045" genericHeader="method">
Appendix
</sectionHeader>
<subsectionHeader confidence="0.861747">
A.1 A Brief Description of Noncommutative Linear Logic
</subsectionHeader>
<bodyText confidence="0.999948378378378">
Linear logic was introduced by Girard (1987) as a &amp;quot;resource conscious logic.&amp;quot; In other
words, though classical logic deals with static descriptions, linear logic considers
propositions as finite resources. Hence, while &amp;quot;A&amp;quot; and &amp;quot;A and A&amp;quot; are equivalent in
classical logic, this is (generally) not the case in linear logic. The easiest technical way
to investigate this difference is to consider the Gentzen sequent calculus for these log-
ics. A sequent is of the form F I-- A where I&apos; and A stand for sequences of formulas
well-formed with respect to the language of the logic. It expresses the fact that the
(multiplicative) disjunction of formulas in A is a consequence of the (multiplicative)
conjunction of formulas in F. Remember that a sequent calculus is a set of rules spec-
ifying the provable sequents, given a set of axioms. A proof of a sequent is then the
successive application of sequent rules beginning with axioms, i.e., a tree with the
proved sequent as the root of the tree (at the bottom) and whose leaves are axioms
(on top). Besides axioms and rules introducing connectives at the right or left part of
a sequent, we find structural rules that govern the structure of a sequent. In classical
logic, the set of structural rules consists in weakening, contraction, and exchange (see
Figure 18 where A, B are formulas, F, F&apos;, A, A&apos; are sequences of formulas). Weaken-
ing and contraction allow the arbitrary copying of formulas: having a formula A as
a hypothesis or conclusion is equivalent to having it twice (or more). This point of
view contradicts the notion of resource, hence these two structural rules are omitted in
linear logic. However special connectives, namely the exponentials of-course &amp;quot;!&amp;quot; and
why-not &amp;quot;?&amp;quot; have these properties. The exchange rule is responsible for commutativity
of the comma (in the right side and in the left side): the order of hypotheses or con-
clusions does not matter. This rule is no longer valid in the noncommutative version
of linear logic.
However, and this is already true in linear logic, the logical interpretation of &amp;quot;and&amp;quot;
and &amp;quot;or&amp;quot; is not as simple as it is in classical logic. We need to distinguish two &amp;quot;and&amp;quot; (0
meaning &apos;times&apos; and &amp; meaning &apos;with&apos;) and two &amp;quot;or&amp;quot; (22 meaning &apos;par&apos; and ED mean-
ing &apos;plus&apos;), hence inducing four constants: 1, T, 1,0 (respective neutral elements for
the previous connectives). In fact, connectives are related in such a way that they form
two groups: the multiplicative group (0,22, 1,1) and the additive group ( &amp; , ED, T, 0).
Hereafter, we use only the multiplicative group. There are obviously fundamental rea-
sons for this proliferation but these explanations are outside the scope of this paper.
Negation and implication are however of special interest. In (commutative) linear logic,
there is only one negation • ± and one (linear) implication —o. In the noncommutative
case, negation and implication have to be split: there is pre- -L. and post- negation •1-
and pre- o— and post- implication —0. These two implications have to be related with
two operations in Lambek calculus: —0 with \ and 0— with /. The implications may
</bodyText>
<page confidence="0.98428">
227
</page>
<figure confidence="0.977566583333333">
Computational Linguistics Volume 25, Number 2
P I- A
(1 weakening)
F,A1- A
(r - weakening)
PH &amp;A
PH A,A,A
(r contraction)
F,A,AH A
(1 contraction)
r I-A, A
r,AhLs.
</figure>
<figureCaption confidence="0.957266">
r,B,A,ri h A PI- A, B, A&apos; A&apos; (r exchange)
(1 exchange) P h. A,A,B,A&apos;
r,A,B,r&apos;h A
Figure 18
Structural rules.
</figureCaption>
<bodyText confidence="0.999768777777778">
be defined in the following way: B o- A :-.-_ B 22 -LA and A -o B---.. Ai28B. In Figure 19,
we give the one-sided sequent calculus for the multiplicative fragment of noncommu-
tative linear logic (N-LL), and in Figure 3 in Section 3, the two-sided sequent calculus
for the multiplicative fragment of intuitionistic noncommutative linear logic (N-ILL):
sequent calculus for N-LL and sequent calculus for N-ILL satisfy the cut elimination
theorem, i.e., for each proof there exists a cut-free proof with the same conclusion;
however, we make use of cut rules in Section 4. Note that if r h A is provable in the
multiplicative intuitionistic noncommutative linear logic, then H (r.)±, A* is provable
in the multiplicative noncommutative linear logic, where:
</bodyText>
<listItem confidence="0.987288888888889">
• for each formula A of intuitionistic noncommutative linear logic, A* is a
formula of noncommutative linear logic defined as follows
— p* = p, for every propositional letter p
— (B 0 C)* = B* 0 C*, (B -0 C)* = (B*)±28C* ,
(B o- C)* = B*28 -L(C*)
• for each finite sequence A1, ..., An of formulas of intuitionistic
noncommutative linear logic, (A1, ..., An)* = (Ai)&amp;quot;, • • • , (An)*
• for each finite sequence A1, ..., An of formulas of noncommutative linear
logic, (A1, . . . , A, )± = (An) -L, . . . , (A1)±
</listItem>
<subsectionHeader confidence="0.953015">
A.2 The Calculus A (a Fragment of N-ILL) (proofs)
</subsectionHeader>
<bodyText confidence="0.9999485">
In this section, we give the proofs for the various propositions presented in the paper.
We repeat the definitions and propositions for clarity.
</bodyText>
<subsectionHeader confidence="0.873218">
Definition The Calculus A
</subsectionHeader>
<listItem confidence="0.9992975">
• Alphabet of A: propositional letters a,b, .. ., connectives 0, o-.
• Formulas: usual definition. A is a simple 0-formula iff A is a
</listItem>
<bodyText confidence="0.992694">
propositional letter or A is a formula b1 0... 0 bn where b1,. . . , bn are
propositional letters. B is a o--formula iff C = a o- A where a is a
propositional letter and A is a simple 0-formula.
</bodyText>
<listItem confidence="0.991551">
• Sequents: F H A, where F is a finite sequence of formulas and A is a
formula.
</listItem>
<page confidence="0.994067">
228
</page>
<table confidence="0.342699666666667">
Abrusci, Fouquere, and Vauzeilles
Tree Adjoining Grammars
Alphabet:
</table>
<listItem confidence="0.994374">
• propositional letters: a, b, c, . . .
• for each propositional letter p and each integer n&gt; 0
</listItem>
<subsectionHeader confidence="0.625352">
n times It Limes
</subsectionHeader>
<bodyText confidence="0.637808">
p an d - • • J-p
</bodyText>
<listItem confidence="0.922929">
• connectives: 0, 2g
</listItem>
<table confidence="0.92768325">
Formulas: usual definition
Sequents: F- r where r is a finite sequence of formulas
Metalinguistic definition of Al and -LA s.t. 1-(A-1-)= (1,4)1 = A, for every formula A:
n times n+1 times n times n-1 times
(p 1...1 )1 = p ••••••&amp;quot;1
ii 1...1
n times n-1 times P) ..._
l(p )= pIi n times n+1 times
(B C)-L = 2g ./3I \ .._
-L(B o P)-
Rules of sequent calculus: (B 25. c)-1- = C-L 0 Bi-
-L(B C)=-LC 0 -LB
(axiom) ri, A, r2 Ai,A r,A H A1, Ai, A2
r1,,r2 A1,r,2
(cut 1) (cut - 2)
AA
A-&apos;-,A
H Ai, A, B, 2
(r- 2,0I- F1, A, F2 B, A (rl 0) F A F- Ai, R A
I- Ai, A 28 B, A2 A B, r2 hA1s,A0B,A2 (r2-®)
</table>
<figureCaption confidence="0.553791">
Figure 19
</figureCaption>
<bodyText confidence="0.625731">
Language and sequent calculus for multiplicative noncomrnutative linear logic.
</bodyText>
<listItem confidence="0.951535333333333">
• Sequent calculus:
— Axiom: a H a
Rules:
</listItem>
<equation confidence="0.908013666666667">
I&apos; H A A I- B ( r H A Fi, C, Fn2 H B (
—
F,AI-A0B Fi, C 0--- A, r, r2 1-- B
</equation>
<bodyText confidence="0.9994755">
In the following, we only consider sequents such that formulas in the left side are
either propositional letters, or a--formulas. So, in the rule introducing c–, C stands
for a propositional letter. This consists in considering trees: C is the (unique) mother
and the 0-formula A is the sequence of its daughters.
</bodyText>
<page confidence="0.995179">
229
</page>
<figure confidence="0.408547">
Computational Linguistics Volume 25, Number 2
Proposition Calculus A
</figure>
<listItem confidence="0.92632825">
1. If I- A 0 B is provable in A, then
• A and B are simple 0-formulas;
• there is a unique pair (F1, r2) s.t. r = r1, r2 and both the
sequents r, H A and F2 B are provable in A.
</listItem>
<subsectionHeader confidence="0.602407">
Proof
</subsectionHeader>
<bodyText confidence="0.639185">
By induction on the proof 7r of F I- A 0 B in A. Note that 7T cannot be an axiom.
THC43HD (0) (10 and
</bodyText>
<listItem confidence="0.8420746">
• If the last rule in 7r is (0), then ir is FE-CODthr = T,
A0B=C0D (disregarding the brackets).
If A = C and B = D, the result is obvious. If A 0 C&apos; = C and C&apos; 0 D = B,
then by induction hypothesis there exist unique 4/1 and ‘112 such that
Ti I- A and W2 H C&apos; are provable for T = Ti, k112; and then, by (0)
</listItem>
<bodyText confidence="0.8535126">
412. B is provable, so that r, = T, and F2 = 4f2, 4&gt; are unique and
satisfy the property. If A = C 0 D&apos; and D&apos; 0 B = D, then by induction
hypothesis, there exist unique 4&gt;i and 4,2 such that 4i D&apos; and 4,2 H B
are provable for 4&gt; = i,4&apos;2; and then, by (0) 4f, (1)1 H A is provable, so
that r, = 4f, 4&gt;i and r2 = 42 are unique and satisfy the property.
</bodyText>
<listItem confidence="0.644268">
C 4/1,a,4/21- A0B
(c)—)
• If the last rule in 7r is (o—), then 7T is PI-A0B with
</listItem>
<equation confidence="0.880869666666667">
F = 4/1,a o— 412. We apply the induction hypothesis on
41 1, a, T2. F- A 0 B (a proof shorter than 7r). If a, A H A and A&apos; H B are
4&gt; C Ti, a, A A
</equation>
<bodyText confidence="0.849448166666667">
provable with 4,2 = A, A&apos;, then a o— C, 4), A I- A (c—) so that
F1 = a o— C, 4), A and r2 = A&apos; are unique and satisfy the property. If
A H A and A&apos;, a, 412 B are provable with klfi = A, A&apos;, then
4&gt; H C A&apos;, a, T2 B
C,(1),W2 B (&apos;) so that r, = A, and F2 = &apos;,aA 0-- C, 43, 4/2 are
unique and satisfy the property.
</bodyText>
<listItem confidence="0.968671333333333">
2. If r, a 0— A, A H B is provable in A, then
• A and B are simple 0-formulas;
• there is a unique pair (A1, A2) s.t. A = A1, A2 and both the
</listItem>
<bodyText confidence="0.7780282">
sequents zi I- A and r, a, A2 H B are provable in A.
Such a pair (A1, A2) will be called &amp;quot;the splitting pair for A in
r, a o— A, H B.&amp;quot;
Proof
By induction on the proof 7r of r, a 0— A, A H B in A.
</bodyText>
<page confidence="0.982927">
230
</page>
<note confidence="0.515563">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<bodyText confidence="0.99900675">
This pair can be computed easily: the first element Ai of the splitting pair must
satisfy a counting condition on each propositional variable occurring in it as defined
below. This property will enable us to consider an adjunction rule based on such
splitting pairs.
</bodyText>
<subsectionHeader confidence="0.784036">
Definition
</subsectionHeader>
<bodyText confidence="0.992677333333333">
Let A be a simple 0-formula or a o--formula (calculus A) and a a propositional vari-
able, the number of positive occurrences p(a, A) (and negative occurrences n(a, A)) of
a in A is defined by:
</bodyText>
<listItem confidence="0.9994696">
• if A a then p(a, A) = 1, n(a, A) = 0
• if A b and b is a propositional variable distinct from a, then p(a, A) = 0,
n(a, A) = 0
• if A B C, then p(a, A) = p (a, B) p (a , C), n(a, A) = n(a, B) + n (a, C)
• if A B o- Ai 0 ... 0 An, then p(a, A) = p(a, B) and
</listItem>
<bodyText confidence="0.717356666666667">
n(a, A) = p(a, A1 . . . 0 An) as A1, ..., An are 0-simple formulas, cf. the
calculus A.
Let S be the sequent C1,. , Cn H A defined as for calculus A (0 and 0-):
</bodyText>
<listItem confidence="0.726866333333333">
•
P ka, S = p(a, + n(a, Ci) + • • • + n(a, C)
• n(a, S) = p(a, + • • + P(a, Cn)
</listItem>
<bodyText confidence="0.999758333333333">
It is easy to prove (for S provable in the calculus A) by induction on a proof of S that (i)
for each propositional variable a occurring in S, p(a, S) = n(a, S), and also that (ii) if S
is the sequent , C I- A then Cn is a propositional variable (we denote this variable
by e(S)). Moreover, for k &lt; n, if we denote the sequent Ci,. Ck I- A by Sk, then (iii)
p(a, Sk) &gt; n(a, Sk). We can then deduce that (iv), for k &lt; n, there exists at least one
propositional variable s.t. p(a, Sk) &gt; n(a, Sk). Note that p(e(S), Sn_i) &gt; n(e(S),Sn-i).
</bodyText>
<subsectionHeader confidence="0.888084">
Proposition
</subsectionHeader>
<bodyText confidence="0.8927106">
Let S: r, B 0- C, D1, . . , Dn h A be a provable sequent in A, then the splitting pair
for D1, . . , D, in S is uniquely determined by the sequent 5&apos;: D1,. , Di C, j &lt; n,
such that for each propositional variable a occurring in 5&apos;, the following condition is
satisfied:
p(a, S&apos;) = n(a, S&apos;)
</bodyText>
<subsectionHeader confidence="0.717291">
Proof
</subsectionHeader>
<bodyText confidence="0.7630845">
Note that S&apos; is provable. Hence the property (i) is true for such a sequent. The unique-
ness results from property (iv) stated previously.
3. The calculus A is closed under the atomic cut rule
r H a Ai, a, 6,2 H A
</bodyText>
<equation confidence="0.7723645">
(cut)
r, A2 I- A
</equation>
<bodyText confidence="0.917793">
i.e., if the sequents r I- a and Ai, a, 6,2 I- A are provable in A, then the
sequent Ai, r, A2 I- A is also provable in A.
</bodyText>
<page confidence="0.987833">
231
</page>
<figure confidence="0.399214">
Computational Linguistics Volume 25, Number 2
Proof
</figure>
<bodyText confidence="0.922341666666667">
By induction on the proof Ir of F I- a, by using the properties 1 and 2. If 7r is an axiom,
the result is trivial. If 7 is not an axiom, the last rule in 7r is (0-), and so 7 has the
form
</bodyText>
<figure confidence="0.384867">
-*IJ HB .(1.2 I- a
FE -a (°-)
By induction hypothesis, since 431, b, 4)2 H a is provable (with a shorter proof than 7r)
and Ai, a, A2 I- A is provable, then Ai, (Di, b,11&apos;2, A2 I- A is provable, and then we get
IfHB Ai, , 432, A2 I- a
H a
</figure>
<sectionHeader confidence="0.442881" genericHeader="conclusions">
4. The calculus A is closed under the adjoining rule
</sectionHeader>
<bodyText confidence="0.9189247">
a, I&apos;, I- a A, a o- a, A H b (adj)
A, r1, A1, 1&apos;2, A2 b
where (A1, A2) is the splitting pair of A in A, a o- a, A I- b.
Proof
Indeed, suppose the sequents F1, a, 1&apos;2 H a and A, a o- a, A H b are provable in A.
Since A, a o- a, A H b is provable, by the property 2, there is a unique pair (A1, A2)
s.t. A = A1, A2 and both the sequents A1 H a and A, a, A2 H b are provable in A. Now
since r1, a, P2 H a and A, a, A2 H b are provable in A, by the property 3 the sequent
A, 1&apos;1, a, 1-2, A2 H b is also provable in A; and now, since A1 I- a and A, 1&apos;1, a, 1&apos;2, A2 H b
are provable in A, the sequent A, r1, A1, 1&apos;2, A2 b is also provable in A.
</bodyText>
<subsectionHeader confidence="0.525495">
Definition The calculus A(g)
</subsectionHeader>
<bodyText confidence="0.930142">
X
Let g be a family of labeled trees, of depth 1, not of the form . Let 2-(g) be the
X
closure of g under the rules:
</bodyText>
<listItem confidence="0.959164142857143">
• substitution with or without the declaration of a new possibly internal
point on which the adjoining operation may be performed,
• adjoining operation.
A(g) is the calculus obtained from A as follows:
• propositional letters are exactly all the labels of the trees in g,
• the rule (o--) is restricted as follows:
r I- A Pi, a, r2 F- B
</listItem>
<construct confidence="0.4891975">
(c- , g)
a o- A, r2 B
</construct>
<page confidence="0.981031">
232
</page>
<note confidence="0.864763">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<bodyText confidence="0.999574">
where A, B are simple 0-formulas of A(g), a is a propositional letter of
A(g), and one of the following cases occurs:
</bodyText>
<listItem confidence="0.6508442">
— A is a
— A is a propositional letter b different from a, and the tree ic g
b
— A is b1 0 ... 0 bn, and the tree A e g
b1. .b
</listItem>
<reference confidence="0.562469">
Proposition Calculus A(g)
Properties 1-4 of A are also properties of A(g). Moreover the following properties
hold for A(g):
</reference>
<listItem confidence="0.873172">
• To T E 7-(g), we associate a sequent Seq(T) of A(g) s.t.:
</listItem>
<bodyText confidence="0.906118275862069">
— if a is the root of T, and the terminal points of T (ordered from
left to right) are al, ... , am, then Seq(T) is
F I- a
where in r the sequence of all the occurring propositional
variables is al, ... , am and in r there is a formula c o- c iff c is a
possibly internal point of T on which the adjoining operation
may be performed;
— Seq(T) is provable in A(G).
Proof
By induction on the class of all the trees of 7-(g).
Let T C g, i.e. T is / E g
Define Seq(T) -_, a o— b1 0 ... 0 1),b1, ...,b,, I— a. Trivially, Seq(T) satisfies (i) and
(ii).
Let T be a tree obtained from a tree T1 c 7-(g) with root a and a tree T2 E 7-(g)
with a terminal point a, by substitution with the declaration that a is a point in T on
which the adjoining operation may be performed. Suppose b is the root of T2, and so b
is the root of T. By induction hypothesis, to T1 is associated a sequent Seq(Ti) __ F F-- a
satisfying (i) and (ii), and to T2 is associated a sequent Seq(T2) satisfying (i) and (ii)
so that Seq(T2) --- Ai, a, A2 I- b where all the terminal points of T2 before a occur in
Ai in the same order as in T2 and all the terminal points of T2 after a occur in A2 in
the same order as in T2. Define Seq(T) -.- Ai, a o- a, F, A2 I- b. It is easy to prove that
Seq(T) satisfies (i). Seq(T) is obtained from Seq(Ti) and Seq(T2) by using (0-, g), so
that it is provable in A(g) since Seq(Ti) and Seq(T2) are provable in A(g) by induction
hypothesis.
Let T be a tree obtained from a tree T1 E 7-(g) with root a and a tree T2 E T(g)
with a terminal point a, by substitution without the declaration that a is in T a point on
which the adjoining operation may be performed. Suppose b is the root of T2, and so b
is the root of T. By induction hypothesis, to Ti. is associated a sequent Seq(Ti) ,- 1 - &apos; I - a
satisfying (i) and (ii), and to T2 is associated a sequent Seq(T2) satisfying (i) and (ii)
</bodyText>
<page confidence="0.993522">
233
</page>
<note confidence="0.705526">
Computational Linguistics Volume 25, Number 2
</note>
<bodyText confidence="0.99929595">
so that Seq(T2) Ai, a, A2 H b where all the terminal points of T2 before a occur in
Ai in the same order as in T2 and all the terminal points of T2 after a occur in A2 in
the same order as in T2. Define Seq(T) Ai, r, H b. It is easy to prove that Seq(T)
satisfies (i). Seq(T) is obtained from Seq(Ti) and Seq(T2) by using the atomic cut rule,
so that by property 3 it is provable in A(g) since Seq(Ti) and Seq(T2) are provable in
A(g) by induction hypothesis.
Let T be a tree obtained by adjoining operation from a tree T1 E 7-(g) with root
a and a terminal point a, and a tree T2 E T() with a possibly internal point a on
which the adjoining operation may be performed. Suppose b is the root of T2, and
so b is the root of T. By induction hypothesis, to T1 is associated a sequent Seq(Ti)
satisfying (i) and (ii), so that Seq(Ti) r1, a, rz H a where all the terminal points of
Ti before a occur in r1 in the same order as in T1 and all the terminal points of
after a occur in rz in the same order as in T1; and to T2 is associated a sequent Seq(T2)
satisfying (i) and (ii) so that Seq(T2) A, a o-- a, A b. Since Seq(T2) is provable
in A(g) by induction hypothesis, then by property 2, there is a unique pair (A1, A2)
s.t. A = Ai, A2 and the sequents A1 a and A, a, A2 H b are both provable in A(g).
Define Seq(T) A, r1, A1, rz, A2 b. It is easy to prove that Seq(T) satisfies (i). Seq(T)
is obtained from Seq(Ti) and Seq(T2) by using adjoining rule, so that by property 3
it is provable in A(g) since Seq(Ti) and Seq(T2) are provable in A(g) by induction
hypothesis.
</bodyText>
<listItem confidence="0.9906035">
• To every provable sequent F I- A in A(g), we associate Tree(r I- A) s.t.
- if A is a propositional letter, then Tree(r I- A) E 7--(g) where the
</listItem>
<bodyText confidence="0.937375125">
root is A, the terminal points (from left to right) are exactly all
the propositional letters occurring in r and in the same order in
which they occur in F, and the possibly internal points on which
the adjoining operation may be performed are exactly all the
propositional letters c s.t. c 0- c occur in r;
- if A is bi ... bn, and so = ri Fn with the sequents r, b,
provable in A(g) for every 1 &lt; i &lt; n, then Tree(r I- A) is a
sequence T1, ..., Tn of trees E r(g), s.t. T= Tree(r, H bd.
</bodyText>
<subsectionHeader confidence="0.730038">
Proof
</subsectionHeader>
<bodyText confidence="0.881537">
By induction on the proof 7r of r H A.
</bodyText>
<equation confidence="0.640906">
Tree(a a) = a
</equation>
<bodyText confidence="0.981730785714286">
If A = BOC and the last rule of 7r is (0) with principal formula B0C and premises
F1 H B and rz H C, then Tree(r B C) = Tree(ri B),Tree(r2 H C).
If the last rule of 7r is (0-, g) with principal formula a 0- a and premises r H a
and Ai, a, A2 H b, then Tree(Ai, a 0- a, A2 H b) is the tree obtained by substitution from
Tree(r H a) and Tree(Ai, a, A2 H b) with the declaration that the possibly internal point
a is a point on which the adjoining operation may be performed.
If the last rule of 7r is (0-, g) with principal formula a 0- a and premises F H a and
Ai, a, A2 b1 0 ... 0 bn, and a occurs in r, s.t. r, H 19,, then Tree(Ai, a 0- a, A2 b1 0
... bn) is obtained from Tree(Ai, a, A2 H ... bn) = Tree(r b1),. , Tree(r n bn)
by replacing Tree(ri bi) by the tree obtained by substitution from Tree(r H a) and
Tree(r, H b,) with the declaration that the possibly internal point a is a point on which
the adjoining operation may be performed.
If the last rule of is (a-, g) with principal formula a a- A and premises I-&apos; H A
and Ai, a, A2 b, then Tree(Ai, a 0- A, A2 H b) is the tree obtained as follows: first add
</bodyText>
<page confidence="0.98892">
234
</page>
<note confidence="0.548081">
Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars
</note>
<figure confidence="0.741820666666667">
a root a common to all the trees Tree(r H A) by using (if A = b1 0 ... 0 bn) the link
E g,
bi b„
</figure>
<bodyText confidence="0.555294333333333">
or (if A = b) the link eg, and then compose this tree with the tree Tree(Ai, a, A2) H b).
If the last rule of 7r is (o-, g) with principal formula a 0- A and premises F H A and
Ai, a, Az I- bl® ... bn, and a occurs in r, s.t. F H b,, then Tree(Ai, a 0-- A, A2 H blo . . .0
</bodyText>
<listItem confidence="0.78532">
bn) is obtained from Tree(Ai, a, A2 H b1 ... 0 b,,) = Tree(ri b1), ,Tree(rt, H bn) by
replacing Tree(r, H b,) by the tree obtained as above from Tree(r H A) and Tree(r, b,).
• If F H a is provable in A(G), then Seq(Tree(r I- a)) = r I- a. If T is a tree of
g, then Tree(Seq(T)) = T.
• Let M be a set of provable sequents in A(G). Define CL(M) as follows:
- MCCL(M)
- (closure under atomic cut rule) if PhaE CL(M) and
Ai, a, Az B ECL(M), then Ai, r, A2 B ECL(M)
- (closure under adjoining operation) if P1, a, r2 H a ECL(M) and
A, a 0- a, A H b ECL(M), then A, r1, Al, F2, A2 b ECL(M), where
(A1, A2) is the splitting pair of A in A, a, A H b;
- nothing else belongs to CL(M).
• If I&apos; I- A ECL(M), then r H A is provable in A(G)•
</listItem>
<subsectionHeader confidence="0.742999">
Proof
</subsectionHeader>
<bodyText confidence="0.996052166666667">
By induction on CL(M).
If r H A EM, then by hypothesis F H A is provable.
If F H A is obtained from two other sequents, by atomic cut rule, then I&apos; A is
provable by property 3 since (by induction hypothesis) the two sequents are provable.
If r I- A is obtained from two other sequents, by adjoining operation, then F h A is
provable by property 4 since (by induction hypothesis) the two sequents are provable.
</bodyText>
<listItem confidence="0.7118538">
• If G&apos; C G, let T(G&apos;) be the closure of g&apos; under:
— substitution;
— adjoining operation.
Clearly, CL(G&apos;) C r(g). Let M = {Seq(T)/T E GI, then
CL(M) = {Seq(T)/T E T(G/)}.
</listItem>
<subsectionHeader confidence="0.69965">
Proof
</subsectionHeader>
<bodyText confidence="0.947671">
The proof follows previous results.
</bodyText>
<sectionHeader confidence="0.925264" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999255">
Abeille, Anne, K. Bishop, S. Cote, and Yves
Schabes. 1990. A lexicalized tree-adjoining
grammar for English. Technical Report
MS-CIS-90-24, LINC LAB 170, Computer
Science Department, University of
Pennsylvania, Philadelphia, PA.
Abrusci, Michele. 1991. Phase semantics and
</reference>
<page confidence="0.955094">
235
</page>
<note confidence="0.313164">
Computational Linguistics Volume 25, Number 2
</note>
<reference confidence="0.99699531147541">
sequent calculus for pure
noncommutative classical linear
propositional logic. The Journal of Symbolic
Logic, 56(4):1,403-1,451.
Abrusci, Michele. 1995. Noncommutative
proof nets. In Jean-Yves Girard, Yves
Lafont, and Laurent Regnier, editors,
Advances in Linear Logic, volume 222.
Cambridge University Press,
pages 271-296. Proceedings of the
Workshop on Linear Logic, Ithaca, NY,
June 1993.
Bar-Hillel, Yoshua. 1953. A
quasi-arithmetical notation for syntactic
description. Language, 29:47-58.
Girard, Jean-Yves. 1987. Linear logic.
Theoretical Computer Science, 50:1-102.
Joshi, Aravind K. and Seth Kulick. 1995.
Partial proof trees as building blocks for a
categorial grammar. In Glyn Morrill and
Richard T. Oehrle, editors, Formal
Grammar, Proceedings of the Conference of the
European Summer School of Logic, Language
and Information, Barcelona, August. Also
as Technical Report, Institute for Research
in Cognitive Science, University of
Pennsylvania, Philadelphia, PA, March
1996.
Joshi, Aravind K., Leon S. Levy, and M.
Takahashi. 1975. Tree adjunct grammars.
Journal of Computer and System Sciences,
10(1):136-163.
Kroch, Anthony S. and Aravind K. Joshi.
1985. Linguistic relevance of tree
adjoining grammars. Technical Report
MS-CIS-85-18, LINC LAB 170, Computer
Science Department, University of
Pennsylvania, Philadelphia, PA.
Lambek, Joachim. 1958. The mathematics of
sentence structure. American Math.
Monthly, 65:154-169.
Roorda, Dirk. 1992. Proof nets for Lambek
calculus. Journal of Logic and Computation,
2(2):211-231.
Vijay-Shanker, K. 1992. Using descriptions
of trees in a tree adjoining grammar.
Computational Linguistics, 18(4):481-517.
Vijay-Shanker, K. and Aravind K. Joshi.
1985. Some computational properties of
tree adjoining grammars. In Proceedings of
the 23rd Annual Meeting, pages 82-93.
Association for Computational
Linguistics.
Vijay-Shanker, K. and David J. Weir. 1994a.
The equivalence of four extensions of
context-free grammars. Mathematical
Systems Theory, 27:511-545.
Vijay-Shanker, K. and David J. Weir. 1994b.
Parsing some constrained grammar
formalisms. Computational Linguistics,
19(4):591-636.
</reference>
<page confidence="0.998522">
236
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.482023">
<title confidence="0.998524">Tree Adjoining Grammars in a Fragment of the Lambek Calculus</title>
<author confidence="0.992445">V Michele Abrusci Christophe Fouqueret</author>
<affiliation confidence="0.771847">Universita di Bari Universite Paris-Nord Universite Paris-Nord</affiliation>
<abstract confidence="0.991816785714286">This paper presents a logical formalization of Tree Adjoining Grammar (TAG). TAG deals with lexical ized trees and two operations are available: substitution and adjunction. Adjunction is generally presented as an insertion of one tree inside another, surrounding the subtree at the adjunction node. This seems to contradict standard logical ability. We prove that some logical formalisms, namely a fragment of the Lambek calculus, can handle adjunction. We represent objects and operations of the TAG formalism in four steps: first trees (initial or derived) and the way they are constituted, then the operations (substitution and adjunction), and finally the elementary trees, i.e., the grammar. Trees (initial or derived) are obtained as the closure of the calculus under two rules that mimic the grammatical ones. We then prove the equivalence between the language generated by a TAG grammar and the closure under substitution and adjunction of its logical representation. Besides this nice property, we relate parse trees to proofs, and to their geometric representation: briefly present them and give examples of parse trees as proofnets. This process can be interpreted as an assembling of blocks (proofnets corresponding to elementary trees of the grammar).</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>Proposition Calculus A(g) Properties 1-4 of A are also properties of A(g). Moreover the following properties hold for A(g):</title>
<marker></marker>
<rawString>Proposition Calculus A(g) Properties 1-4 of A are also properties of A(g). Moreover the following properties hold for A(g):</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anne Abeille</author>
<author>K Bishop</author>
<author>S Cote</author>
<author>Yves Schabes</author>
</authors>
<title>A lexicalized tree-adjoining grammar for English.</title>
<date>1990</date>
<tech>Technical Report MS-CIS-90-24, LINC LAB 170,</tech>
<institution>Computer Science Department, University of Pennsylvania,</institution>
<location>Philadelphia, PA.</location>
<marker>Abeille, Bishop, Cote, Schabes, 1990</marker>
<rawString>Abeille, Anne, K. Bishop, S. Cote, and Yves Schabes. 1990. A lexicalized tree-adjoining grammar for English. Technical Report MS-CIS-90-24, LINC LAB 170, Computer Science Department, University of Pennsylvania, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michele Abrusci</author>
</authors>
<title>Phase semantics and sequent calculus for pure noncommutative classical linear propositional logic.</title>
<date>1991</date>
<journal>The Journal of Symbolic Logic,</journal>
<pages>56--4</pages>
<contexts>
<context position="27493" citStr="Abrusci (1991)" startWordPosition="5032" endWordPosition="5033"> many useless properties in its contexts. Girard (1987) has defined, in a purely geometric way, a class of graphs of formulas, called 219 Computational Linguistics Volume 25, Number 2 proofnets: for each proof of a sequent F in the one-sided sequent calculus for multiplicative linear logic, there is a corresponding proofnet whose conclusions are exactly the formulas in F, and for each proofnet, there is at least one corresponding proof of the sequent H r in the one-sided sequent calculus for multiplicative linear logic (where F is a sequence of all the conclusions of the proofnet). Similarly, Abrusci (1991) defined in a purely geometric way a class of graphs, called noncommutative proofnets, relative to multiplicative noncommutative linear logic. Roorda (1992) also described proofnets for Lambek calculus. Other criteria exist by now for characterizing proofnets for commutative or noncommutative, intuitionistic or nonintuitionistic linear logic. We present here Abrusci&apos;s criteria. 5.1 Noncommutative Proofnets Proofnets are defined on one-sided sequent calculi. Presentations of the one-sided sequent calculus, and of proofnets are given in the appendix. Let us recall that 22 is the &amp;quot;or&amp;quot; connective </context>
</contexts>
<marker>Abrusci, 1991</marker>
<rawString>Abrusci, Michele. 1991. Phase semantics and sequent calculus for pure noncommutative classical linear propositional logic. The Journal of Symbolic Logic, 56(4):1,403-1,451.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michele Abrusci</author>
</authors>
<title>Noncommutative proof nets.</title>
<date>1995</date>
<booktitle>Advances in Linear Logic,</booktitle>
<volume>volume</volume>
<pages>222</pages>
<editor>In Jean-Yves Girard, Yves Lafont, and Laurent Regnier, editors,</editor>
<publisher>Cambridge University Press,</publisher>
<location>Ithaca, NY,</location>
<contexts>
<context position="30175" citStr="Abrusci (1995)" startWordPosition="5480" endWordPosition="5481"> 28-1ink is graphically distinguished from the 0-link. However this is a moot point because the graph has only one kind of edge. 220 Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars BOC Conclusion k.C.) Axiom-link 1B1 Cut-link 0—link L-switch C R-switch \\// 130C R-switch BC B28 n —link L-switch Figure 8 Travels through proof structures. • 7r1 induces the linear order F of the conclusions, i.e., iff the precedence relation is a chain and each conclusion occurs exactly once in the chain. Precise definitions, examples, explanations and the proof of the following theorem may be found in Abrusci (1995). Theorem 7r/ is a noncommutative proofnet with conclusions F iff there exists a proof 7r of the sequent F- F in the sequent calculus for multiplicative noncommutative linear logic such that is associated to 7r. Note that every noncommutative proofnet is a planar graph. 5.2 Parse Examples In this section, we give two simple examples of parses. The aim of this section is to show the strong connection between the structure of proofs of sequents and a standard TAG derived structure. Moreover, it emphasizes the interest of a proofnet approach as the syntax (and parsing process) is concretely desig</context>
</contexts>
<marker>Abrusci, 1995</marker>
<rawString>Abrusci, Michele. 1995. Noncommutative proof nets. In Jean-Yves Girard, Yves Lafont, and Laurent Regnier, editors, Advances in Linear Logic, volume 222. Cambridge University Press, pages 271-296. Proceedings of the Workshop on Linear Logic, Ithaca, NY, June 1993.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoshua Bar-Hillel</author>
</authors>
<title>A quasi-arithmetical notation for syntactic description.</title>
<date>1953</date>
<journal>Language,</journal>
<pages>29--47</pages>
<contexts>
<context position="17353" citStr="Bar-Hillel 1953" startWordPosition="3077" endWordPosition="3078">rresponds to the building of a partial tree. Such introductions are then restricted either to the formalization of the trees of the grammar (the first three rules correspond exactly to the trees of g2), or to the formalization of adjunction nodes (the formula s 0- s &amp;quot;marks&amp;quot; s as being an adjunction node, i.e., the adjunction rule may be applied only on this kind of node as it will be clear below). The grammar can then be logically represented as a subset M(g) of the set of provable sequents of the calculus A(g2): M()= {S 0- aoSod,a,S 0- S,S 0- b®Sec,b,S,c,dh S,So- S,S 0- E, S} In AB-grammars (Bar-Hillel 1953), only one implication is used without any &amp;quot;and&amp;quot; connective. The grammar would be represented in AB-grammars as two provable sequents (note that &amp;quot;daughters of a node&amp;quot; are explicitly ordered): ((S 0- d) 0- S) 0- a,a,S 0- S,((S o- c) 0- S) 0- b,b,S,c,d1- S, S 0- S,S 0- €,€1- S We will prove later that, besides the cut rule, there exists another derived rule for the calculus A(g2) (and in fact for each calculus of this kind) mimicking the adjunction operation. Reducing the calculus, then, to a closure of the substitution and adjunction NP o— John,John NP(lex) S o— NP® VP, NP, VP o— V NP NP,V o— g</context>
</contexts>
<marker>Bar-Hillel, 1953</marker>
<rawString>Bar-Hillel, Yoshua. 1953. A quasi-arithmetical notation for syntactic description. Language, 29:47-58.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jean-Yves Girard</author>
</authors>
<title>Linear logic.</title>
<date>1987</date>
<journal>Theoretical Computer Science,</journal>
<pages>50--1</pages>
<contexts>
<context position="26934" citStr="Girard (1987)" startWordPosition="4940" endWordPosition="4941">g&apos;). We can define the language accepted by such a calculus as follows: Let us take only those sequents in CL(M(g&apos;)) whose right part is the propositional variable S (the start symbol of the grammar), and such that propositional variables of the left part of the sequent correspond to terminal symbols of the grammar, i.e., words of the language. The language accepted by M(g&apos;) is then the set of sequences of words in the same order as they appear in the previous sequents. 5. TAG Analysis Using Noncommutative Proofnets A proof in sequent calculus contains many useless properties in its contexts. Girard (1987) has defined, in a purely geometric way, a class of graphs of formulas, called 219 Computational Linguistics Volume 25, Number 2 proofnets: for each proof of a sequent F in the one-sided sequent calculus for multiplicative linear logic, there is a corresponding proofnet whose conclusions are exactly the formulas in F, and for each proofnet, there is at least one corresponding proof of the sequent H r in the one-sided sequent calculus for multiplicative linear logic (where F is a sequence of all the conclusions of the proofnet). Similarly, Abrusci (1991) defined in a purely geometric way a clas</context>
<context position="41760" citStr="Girard (1987)" startWordPosition="7585" endWordPosition="7586">s can be deleted from sequents. In this new calculus, the following rule is satisfied: A I- A r, A 0- A, A I- B (adjunction) r, A I- B 226 Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars Hence, we obtain the following equivalence: Proposition A parse tree is correct iff the two nodes in a domination relation have the same label iff there is a proof whose conclusions that are propositional variables are the words of the sentence in the same order, and without any formula of the form A o— A. Appendix A.1 A Brief Description of Noncommutative Linear Logic Linear logic was introduced by Girard (1987) as a &amp;quot;resource conscious logic.&amp;quot; In other words, though classical logic deals with static descriptions, linear logic considers propositions as finite resources. Hence, while &amp;quot;A&amp;quot; and &amp;quot;A and A&amp;quot; are equivalent in classical logic, this is (generally) not the case in linear logic. The easiest technical way to investigate this difference is to consider the Gentzen sequent calculus for these logics. A sequent is of the form F I-- A where I&apos; and A stand for sequences of formulas well-formed with respect to the language of the logic. It expresses the fact that the (multiplicative) disjunction of formu</context>
</contexts>
<marker>Girard, 1987</marker>
<rawString>Girard, Jean-Yves. 1987. Linear logic. Theoretical Computer Science, 50:1-102.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Aravind K Joshi</author>
<author>Seth Kulick</author>
</authors>
<title>Partial proof trees as building blocks for a categorial grammar.</title>
<date>1995</date>
<booktitle>Formal Grammar, Proceedings of the Conference of the European Summer School of Logic, Language and Information,</booktitle>
<editor>In Glyn Morrill and Richard T. Oehrle, editors,</editor>
<institution>University of Pennsylvania,</institution>
<location>Barcelona,</location>
<marker>Joshi, Kulick, 1995</marker>
<rawString>Joshi, Aravind K. and Seth Kulick. 1995. Partial proof trees as building blocks for a categorial grammar. In Glyn Morrill and Richard T. Oehrle, editors, Formal Grammar, Proceedings of the Conference of the European Summer School of Logic, Language and Information, Barcelona, August. Also as Technical Report, Institute for Research in Cognitive Science, University of Pennsylvania, Philadelphia, PA, March 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Leon S Levy</author>
<author>M Takahashi</author>
</authors>
<title>Tree adjunct grammars.</title>
<date>1975</date>
<journal>Journal of Computer and System Sciences,</journal>
<pages>10--1</pages>
<marker>Joshi, Levy, Takahashi, 1975</marker>
<rawString>Joshi, Aravind K., Leon S. Levy, and M. Takahashi. 1975. Tree adjunct grammars. Journal of Computer and System Sciences, 10(1):136-163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anthony S Kroch</author>
<author>Aravind K Joshi</author>
</authors>
<title>Linguistic relevance of tree adjoining grammars.</title>
<date>1985</date>
<tech>Technical Report MS-CIS-85-18, LINC LAB 170,</tech>
<institution>Computer Science Department, University of Pennsylvania,</institution>
<location>Philadelphia, PA.</location>
<marker>Kroch, Joshi, 1985</marker>
<rawString>Kroch, Anthony S. and Aravind K. Joshi. 1985. Linguistic relevance of tree adjoining grammars. Technical Report MS-CIS-85-18, LINC LAB 170, Computer Science Department, University of Pennsylvania, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joachim Lambek</author>
</authors>
<title>The mathematics of sentence structure.</title>
<date>1958</date>
<journal>American Math. Monthly,</journal>
<pages>65--154</pages>
<marker>Lambek, 1958</marker>
<rawString>Lambek, Joachim. 1958. The mathematics of sentence structure. American Math. Monthly, 65:154-169.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dirk Roorda</author>
</authors>
<title>Proof nets for Lambek calculus.</title>
<date>1992</date>
<journal>Journal of Logic and Computation,</journal>
<pages>2--2</pages>
<contexts>
<context position="27649" citStr="Roorda (1992)" startWordPosition="5054" endWordPosition="5055">istics Volume 25, Number 2 proofnets: for each proof of a sequent F in the one-sided sequent calculus for multiplicative linear logic, there is a corresponding proofnet whose conclusions are exactly the formulas in F, and for each proofnet, there is at least one corresponding proof of the sequent H r in the one-sided sequent calculus for multiplicative linear logic (where F is a sequence of all the conclusions of the proofnet). Similarly, Abrusci (1991) defined in a purely geometric way a class of graphs, called noncommutative proofnets, relative to multiplicative noncommutative linear logic. Roorda (1992) also described proofnets for Lambek calculus. Other criteria exist by now for characterizing proofnets for commutative or noncommutative, intuitionistic or nonintuitionistic linear logic. We present here Abrusci&apos;s criteria. 5.1 Noncommutative Proofnets Proofnets are defined on one-sided sequent calculi. Presentations of the one-sided sequent calculus, and of proofnets are given in the appendix. Let us recall that 22 is the &amp;quot;or&amp;quot; connective associated to 0 (the &amp;quot;and&amp;quot; connective), such that A –o B = A-&apos;-&apos;B. To every proof it of a sequent H F in the one-sided sequent calculus for multiplicative n</context>
</contexts>
<marker>Roorda, 1992</marker>
<rawString>Roorda, Dirk. 1992. Proof nets for Lambek calculus. Journal of Logic and Computation, 2(2):211-231.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
</authors>
<title>Using descriptions of trees in a tree adjoining grammar.</title>
<date>1992</date>
<journal>Computational Linguistics,</journal>
<pages>18--4</pages>
<contexts>
<context position="4722" citStr="Vijay-Shanker, (1992)" startWordPosition="745" endWordPosition="746">an take place. This latter kind of formula can be grammatically interpreted as if such an A was split up into two nodes with the same label, linked by some &amp;quot;soft&amp;quot; relation. The set of elementary trees of a TAG grammar gi is then represented as a subset M of the sequents in the closure of the calculus under the two previous rules. We then prove the equivalence between the language generated in TAG by such a grammar gi and the closure under substitution and adjunction of the logical representation M. Note that our interpretation of adjunction is very close to the use of quasi trees described in Vijay-Shanker, (1992). Besides this equivalence property, we relate parse trees to logical proofs, and to their geometric representation, proofnets. We briefly present proofnets, and the correspondence between proofs and proofnets, and give examples of parse trees viewed as proofnets. This enables a new point of view on the parse process. This process can be interpreted as an assembling of blocks (proofnets corresponding to elementary trees of the grammar), and also as a circulation of information through links relating nodes of the proofnets. The remainder of the paper is organized in four parts. Section 2 descri</context>
<context position="31035" citStr="Vijay-Shanker 1992" startWordPosition="5620" endWordPosition="5621">e proofnet is a planar graph. 5.2 Parse Examples In this section, we give two simple examples of parses. The aim of this section is to show the strong connection between the structure of proofs of sequents and a standard TAG derived structure. Moreover, it emphasizes the interest of a proofnet approach as the syntax (and parsing process) is concretely designed as a logical manipulation of logical structures. In the next section, we develop this approach and show how lexical rules can be integrated into it. Finally, we briefly mention that this can also give a logical formalization of D-trees (Vijay-Shanker 1992). The first example requires only substitution, i.e., the cut rule in the logical point of view. We first give the sequents (provable in A) associated to the lexical items. Their meanings are straightforward, e.g., &amp;quot;John and Mary are noun phrases (NP)&amp;quot; or &amp;quot;saw requires a complement NP to obtain a verb phrase (VP) and a subject NP to obtain a sentence (S).&amp;quot; Note that VP is an adjunction node so the sequent associated to the item saw includes the formula VP o— VP. The next example uses this specification. John NP o- John, John F- NP Mary NP 0- Mary, Mary I- NP saw S o- NP VP, NP, VP o- VP, VP o-</context>
<context position="40631" citStr="Vijay-Shanker (1992)" startWordPosition="7392" endWordPosition="7393">t to TAG. We show, furthermore, to what extent geometric representations of proofs (proofnets) may be useful in understanding how black boxes (i.e., relations between nodes in a syntactic tree) help simplify a parse but also hide interesting mechanisms. There is still a lot to do in this direction. For one thing, generalized categorial grammars also have to be logically investigated, the objective being to relate GCG operations to logical operations (completed if necessary). The preceding discussions also show the relationship between our point of view and the idea of quasi trees developed by Vijay-Shanker (1992). He proposes to consider partial descriptions of trees, i.e., adjunction nodes represented by means of loose relations whose meaning is a domination relation. In this case, the adjunction operation is identified by a pair of substitution operations. The strong relation with what precedes is clear. However, in order to take into account exactly this presentation, the axiom of identity A I- A, where A is a propositional variable, must be added to the calculus A(g) given in Section 4. In this way, adjunction nodes can be deleted from sequents. In this new calculus, the following rule is satisfie</context>
</contexts>
<marker>Vijay-Shanker, 1992</marker>
<rawString>Vijay-Shanker, K. 1992. Using descriptions of trees in a tree adjoining grammar. Computational Linguistics, 18(4):481-517.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>Aravind K Joshi</author>
</authors>
<title>Some computational properties of tree adjoining grammars.</title>
<date>1985</date>
<booktitle>In Proceedings of the 23rd Annual Meeting,</booktitle>
<pages>82--93</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<marker>Vijay-Shanker, Joshi, 1985</marker>
<rawString>Vijay-Shanker, K. and Aravind K. Joshi. 1985. Some computational properties of tree adjoining grammars. In Proceedings of the 23rd Annual Meeting, pages 82-93. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>David J Weir</author>
</authors>
<title>The equivalence of four extensions of context-free grammars.</title>
<date>1994</date>
<booktitle>Mathematical Systems Theory,</booktitle>
<pages>27--511</pages>
<contexts>
<context position="6240" citStr="Vijay-Shanker and Weir (1994" startWordPosition="986" endWordPosition="989"> the correspondence between the two. Section 5 is devoted to the representation of proofs as proofnets; in this final section, we also study implications of this point of view. The proofs of propositions and theorems given in Section 4 are delayed to the appendix for the sake of clarity. 2. Tree Adjoining Grammars The Tree Adjoining Grammar formalism is a tree-generating formalism introduced in Joshi, Levy, and Takahashi (1975), linguistically motivated (see, for example, Abeille et al. [1990] and Kroch and Joshi [1985]), and with formal properties studied in VijayShanker and Joshi (1985) and Vijay-Shanker and Weir (1994a, 1994b). A TAG is defined by two finite sets of trees composed by means of the substitution and adjunction operations.&apos; 1 Originally, there was no need for a substitution operation, as initial trees were always rooted at S. thus • labeling a sentence. In the Lexicalized-TAG formalism, this constraint disappears in favor of the substitution operation. Throughout the paper, we will use TAG to refer to the Lexicalized-TAG formalism. 210 Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars Definition A TAG G is a 5-tuple (VN, VT, S. I, A) where • VN is a finite set of nonterminal symbols, •</context>
</contexts>
<marker>Vijay-Shanker, Weir, 1994</marker>
<rawString>Vijay-Shanker, K. and David J. Weir. 1994a. The equivalence of four extensions of context-free grammars. Mathematical Systems Theory, 27:511-545.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>David J Weir</author>
</authors>
<title>Parsing some constrained grammar formalisms.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<pages>19--4</pages>
<contexts>
<context position="6240" citStr="Vijay-Shanker and Weir (1994" startWordPosition="986" endWordPosition="989"> the correspondence between the two. Section 5 is devoted to the representation of proofs as proofnets; in this final section, we also study implications of this point of view. The proofs of propositions and theorems given in Section 4 are delayed to the appendix for the sake of clarity. 2. Tree Adjoining Grammars The Tree Adjoining Grammar formalism is a tree-generating formalism introduced in Joshi, Levy, and Takahashi (1975), linguistically motivated (see, for example, Abeille et al. [1990] and Kroch and Joshi [1985]), and with formal properties studied in VijayShanker and Joshi (1985) and Vijay-Shanker and Weir (1994a, 1994b). A TAG is defined by two finite sets of trees composed by means of the substitution and adjunction operations.&apos; 1 Originally, there was no need for a substitution operation, as initial trees were always rooted at S. thus • labeling a sentence. In the Lexicalized-TAG formalism, this constraint disappears in favor of the substitution operation. Throughout the paper, we will use TAG to refer to the Lexicalized-TAG formalism. 210 Abrusci, Fouquere, and Vauzeilles Tree Adjoining Grammars Definition A TAG G is a 5-tuple (VN, VT, S. I, A) where • VN is a finite set of nonterminal symbols, •</context>
</contexts>
<marker>Vijay-Shanker, Weir, 1994</marker>
<rawString>Vijay-Shanker, K. and David J. Weir. 1994b. Parsing some constrained grammar formalisms. Computational Linguistics, 19(4):591-636.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>