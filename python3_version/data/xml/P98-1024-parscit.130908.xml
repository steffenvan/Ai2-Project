<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001136">
<title confidence="0.9804">
Managing information at linguistic interfaces*
</title>
<author confidence="0.977609">
Johan Bos and C.J. Rupp
</author>
<affiliation confidence="0.868103">
Computerlinguistik
Universitat des Saarlandes
</affiliation>
<address confidence="0.866358">
D-66041 Saarbriicken
</address>
<email confidence="0.993546">
lbos,cjl@coli.uni—sb.de
</email>
<author confidence="0.900401">
Bianka Buschbeck-Wolf and Michael Dorna
</author>
<affiliation confidence="0.7134135">
Institut fiir Maschinelle Sprachverarbeitung (IMS)
Universitat Stuttgart
</affiliation>
<address confidence="0.818422">
D-70174 Stuttgart
</address>
<email confidence="0.904745">
{bianka,michl}Oims.uni—stuttgart.de
</email>
<sectionHeader confidence="0.989388" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9995185">
A large spoken dialogue translation system imposes
both engineering and linguistic constraints on the
way in which linguistic information is communi-
cated between modules. We describe the design and
use of interface terms, whose formal, functional and
communicative role has been tested in a sequence of
integrated systems and which have proven adequate
to these constraints.
</bodyText>
<sectionHeader confidence="0.9988" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999701071428571">
This paper describes the development and usage
of interface representations for linguistic informa-
tion within the Verbmobi/ project: a large dis-
tributed project for speech-to-speech translation of
negotiation dialogues, between English, German
and Japanese. We take as our reference point the
Verbmobil Research Prototype (Bub et al., 1997),
but this is only one of a sequence of fully integrated
running systems. The functional, formal and com-
municative role of interface terms within these sys-
tems, once instigated, has already been maintained
through changes in the overall architecture and con-
stitution of the Verbmobil consortium.
There are two aspects to our story:
</bodyText>
<listItem confidence="0.864045692307692">
• the practical and software engineering con-
straints imposed by the distributed develop-
ment of a large natural language system.
• the linguistic requirements of the translation
task at the heart of the system.
* This work was funded by the German Federal Ministry of
Education, Science, Research and Technology (BMBF) in the
framework of the Verbmobi/ project under grant 01 IV 701
R4 and 01 IV 701 N3. The responsibility for this article lies
with the authors. Thanks to our many Verbmobil colleagues
who helped to design and develop the results presented here,
and also to the anonymous reviewers for giving useful hints to
improve this paper.
</listItem>
<bodyText confidence="0.99995125">
The prominence of the engineering requirements
is further heightened by the fact that we are dealing
with a spoken dialogue system which must strive
towards real time interactions.
We proceed by describing the requirements of the
Verbmobi/ Research Prototype, the actual contents
of the Verbmobil Interface Term (henceforth VIT),
the semantic formalism encoded within VITs and
processing aspects. We conclude that VITs fulfill
the joint goals of a functional interface term and
an adequate linguistic representation within a single
data structure.
</bodyText>
<subsectionHeader confidence="0.985413">
1.1 Modularity
</subsectionHeader>
<bodyText confidence="0.998417115384616">
We are concerned here with the interface represen-
tations exchanged between modules that make use
of traditional linguistic concepts. Figure 1 shows a
simplified form of the Verbmobi/ Research Proto-
type architecturel , the modules in the grey shaded
area make use of VITs as linguistic interface terms
and are loosely termed the &amp;quot;linguistic&amp;quot; modules of
the system, in contrast to the other modules shown
which are chiefly concerned with the processing of
acoustic signals. The linguistic design criteria for
VITs derive mainly from the syntactic and seman-
tic analysis module, labelled SynSem, the generation
and the transfer modules.
One point that should be made at the outset is that
these linguistic modules really are modules, rather
than, say, organisational constructs in some larger
constraints system. In practice, these modules are
developed at different sites, may be implemented
in different programming languages or use differ-
ent internal linguistic formalisms, and, indeed, there
may be interchangeable modules for the same func-
tion. This level of modularity, in itself, provides suf-
ficient motivation for a common interface represen-
&apos;In that we have excluded the modules that employ alter-
native techniques and express no interest in linguistic informa-
tion.
</bodyText>
<page confidence="0.952288">
160
</page>
<figure confidence="0.748467">
Recognition
</figure>
<figureCaption confidence="0.999948">
Figure 1: A Simplified diagram of the Verbmobi/ Research Prototype Architecture
</figureCaption>
<bodyText confidence="0.999683571428571">
tation among the linguistic modules, allowing the
definition of a module&apos;s functionality in terms of
its 110 behaviour, but also providing a theory in-
dependent lingua franca for discussions which may
involve both linguists and computer scientists. The
Verbmobi/ community is actually large enough to
require such off-line constructs, too.
</bodyText>
<subsectionHeader confidence="0.9996">
1.2 Encoding of Linguistic Information
</subsectionHeader>
<bodyText confidence="0.9996846">
A key question in the design of an interface lan-
guage is what information must be carried and
to what purpose. The primary definition criterion
within the linguistic modules has been the transla-
tion task. The actual translation operation is per-
formed in the transfer module as a mapping between
semantic representations of the source and target
languages, see (Dorna and Emele, 1996). However,
the information requirements of this process are
flexible, since information from various levels of
analysis are used in disambiguation within the trans-
fer module, including prosody and dialogue struc-
ture.
To a large extent the information requirements di-
vide into two parts:
</bodyText>
<listItem confidence="0.996250333333333">
• the expressive adequacy of the semantic repre-
sentation;
• representing other types of linguistic informa-
</listItem>
<bodyText confidence="0.973325909090909">
tion so as to meet the disambiguation require-
ments with the minimum of redundancy.
The design of the semantic representations en-
coded within VITs has been guided by an ongoing
movement in representational semantic formalisms
which takes as a starting point the fact that certain
key features of a purely logical semantics are not
fully defined in natural language utterances and typ-
ically play no part in translation operations. This
has been most clearly demonstrated for cases where
quantifier scope ambiguities are exactly preserved
under translation. The response to these observa-
tions is termed underspecification and various such
underspecified formalisms have been defined. In
one sense underspecification is, in itself, a form of
information management, in that only the informa-
tion that is actually present in an utterance is repre-
sented, further disambiguation being derived from
the context. In the absence of such contextual in-
formation further specificity can only be based on
guesswork.
While the management of information in the VIT
semantics consists of leaving unsaid what cannot be
adequately specified, the amount of information and
also the type of information in the other partitions
of the VIT (see Section 2.1) has been determined
by the simple principle of providing information on
justified demand. The information provided is also
quite varied but the unifying property is that the
requirements are defined by the specific needs of
transfer, in distinguishing cases that are truly am-
biguous under translation or need to be resolved.
For example:
</bodyText>
<listItem confidence="0.995910666666667">
(1) Geht das bei ihnen?
a. Is it possible for you?
b. Is it possible at your place?
</listItem>
<bodyText confidence="0.999700333333333">
In (1), the German preposition bei displays an
ambiguity between the experiencer reading (1a) and
the spatial interpretation ( lb). The resolution of this
ambiguity requires in the first instance three pieces
of information: the type of the verb predicate, the
sort of the internal argument of bei and the sort
of the subject. This, in turn, requires the resolution
of the reference of the anaphor das, where mor-
phosyntactic constraints come into play. If the ref-
erent has the sort time then the experiencer read-
ing (la) can be selected. This is the more usual re-
sult in the Verbmobi/ context. Should the referent
</bodyText>
<page confidence="0.991292">
161
</page>
<table confidence="0.945662066666667">
Slot Name Description
VIT ID combines a unique tag for the turn segment described by the current VIT and the
word lattice path used in its linguistic analysis;
Index a triple consisting of the entry points for traversing the VIT representation;
Conditions labelled conditions describing the possibly underspecified semantic content of an
utterance;
Constraints scope and grouping constraints, e.g. used for underspecified quantifier and opera-
tor scope representation;
Sorts sortal specifications for instance variables introduced in labelled conditions;
Discourse additional semantic and pragmatic information, e.g. discourse roles for individual
instance;
Syntax morpho-syntactic features, e.g. number and gender of individual instances;
Tense and Aspect morpho-syntactic tense combined with aspect and sentence mood information,
e.g. used for computing surface tense;
Prosody prosodic information such as accenting and sentence mood.
</table>
<tableCaption confidence="0.999837">
Table 1: A list of VIT slots.
</tableCaption>
<bodyText confidence="0.9995818">
be sortally specified as a situation, further infor-
mation will be required to determine the dialogue
stage, i.e. whether the time of appointment is being
negotiated or its place. Only in the latter case is the
spatial reading (lb) relevant.
</bodyText>
<listItem confidence="0.991475333333333">
(2) Dann wiirde das doch gehen
a. Then, it WOULD be possible, after all.
b. It would be possible, wouldn&apos;t it?
</listItem>
<bodyText confidence="0.999985952380952">
Consider the discourse particle doch in (2) which
can be disambiguated with prosodic information.
When doch is stressed and the utterance has falling
intonation, it functions as a pointer to a previous
dialogue stage. Something that was impossible be-
fore turned out to be feasible at the utterance time.
Then, doch is translated into after all and the auxil-
iary takes over the accent (2a) 2. If (2) has a rising
intonation and the particle is not stressed, it signals
the speaker&apos;s expectation of the hearer&apos;s approving
response. In English, this meaning is conveyed by
a question tag (2b). Lieske et al. (1997) provide a
more detailed account of the use of prosodic infor-
mation in Verbrnobll.
In addition to the information that is explicitly
represented in the specified fields of a VIT, in-
cluding the surface word order that can be inferred
from the segment identification, and the resolution
of underspecified ambiguities in context, transfer
might require further information, such as domain-
specific world knowledge, speech act or discourse
</bodyText>
<subsectionHeader confidence="0.366137">
2We indicate prosodic accent with SMALL CAPITALS.
</subsectionHeader>
<bodyText confidence="0.99994275">
stage information. This information can be obtained
on demand from the resolution component (see Fig-
ure 1). This flexible approach to the information
required for transfer is termed cascaded disam-
biguation (Buschbeck-Wolf, 1997) and is balanced
against the fact that each level of escalation implies
a correspondingly greater share of the permissible
runtime.
</bodyText>
<sectionHeader confidence="0.893846" genericHeader="method">
2 The Verbmobil Interface Term
</sectionHeader>
<bodyText confidence="0.999917333333333">
The VIT encodes various pieces of information pro-
duced and used in the linguistic modules. The con-
tent of a VIT corresponds to a single segment (or
utterance) in a dialog turn. This partitioning of turns
enables the linguistic components to work incre-
mentally.
</bodyText>
<subsectionHeader confidence="0.993772">
2.1 Multiple Levels of Information
</subsectionHeader>
<bodyText confidence="0.9999134375">
A VIT is a record-like data structure whose fields
are filled with semantic, scopal, sortal, morpho-
syntactic, prosodic, discourse and other information
(see Table 1). These slots can be seen as analysis
layers collecting different types of linguistic infor-
mation that is produced by several modules. The in-
formation within and between the layers is linked
together using constant symbols, called &amp;quot;labels&amp;quot;,
&amp;quot;instances&amp;quot; and &amp;quot;holes&amp;quot;. These constants could be
interpreted as skolemized logical variables which
each denote a node in a graph. Besides purely lin-
guistic information, a VIT contains a unique seg-
ment identifier that encodes the time span of the an-
alyzed speech input, the analyzed path of the orig-
inal word lattice, the producer of the VIT, which
language is represented, etc. This identifier is used,
</bodyText>
<page confidence="0.990987">
162
</page>
<bodyText confidence="0.9998825">
for example, to synchronize the processing of anal-
yses from different parsers. For processing aspects
of VITs see Section 3.
A concrete example of a VIT is given in Figure 2
in a Prolog notation where the slots are also marked.
This example is further discussed in Section 2.2.
</bodyText>
<subsectionHeader confidence="0.9797">
2.2 VIT Semantics
</subsectionHeader>
<bodyText confidence="0.999982307692308">
The core semantic content of the VIT is contained
in the two slots: Conditions and Constraints.
The conditions represent the predicates of the se-
mantic content and the constraints the semantic
dependency structure over those predicates. This
partitioning between semantic content and seman-
tic structure is modelled on the kind of represen-
tational metalanguage employed in UDRS seman-
tics (Reyle, 1993) to express underspecification.
The semantic representation is, thus, a metalan-
guage expression containing metavariables, termed
labels, that may be assigned to object language con-
structs. Moreover, such a metalanguage is minimally
recursive 3, in that recursive structure is expunged
from the surface level by the use of metavariables
over the recursive constituents of the object lan-
guage.
In UDRSs quantifier dependencies and other
scope information are underspecified because the
constraints provide incomplete information about
the assignment of object language structures to la-
bels. However, a constraint set may be monoton-
ically extended to provide a complete resolution.
VIT semantics follows a similar strategy but some-
what extends the expressivity of the metalanguage.
There are two constructs in the VIT semantic
metalanguage which provide for an extension in
expressivity relative to UDRSs. These have both
been adopted from immediate precursors within the
project, such as Bos et al. (1996), and further re-
fined. The first of these is the mechanism of holes
and plugging which originates in the hole seman-
tics of Bos (1996). This requires a distinction be-
tween two types of metavariable employed: labels
and holes. Labels denote the instantiated structures,
primarily the individual predicates. Holes, on the
other hand, mark the underspecified argument po-
sitions of propositional arguments and scope do-
mains. Resolution consists of an assignment of la-
</bodyText>
<footnote confidence="0.820934333333333">
3We owe the term minimal recursion to Copestake
et at. (1995), but the mechanism they describe was already in
use in UDRSs.
</footnote>
<figure confidence="0.901812931034483">
vit(
% Segment ID
vitID(sid(116,a,ge,2,181,2,ge,y,syntaxger),
% WHG String
Diord(jedes,24,[15]),
word(treffen,26,[19]),
word(mit,26,[112]).
word(ihnen,27,[114]),
vord(hat,28,[11]),
word(ein,29,[117]),
word(interessantes,30,[121]),
vord(thema,31,[122])]),
% Index
index(12,11,i3),
% Conditions
[dec1(12,h23),
jed(15,i6,18,h7),
treffen(19,i6),
mit(112,i6,i13),
pron(114,i13),
haben(11,i3),
arg3(11,i3,i6),
arg2(11,i3,i16),
ein(117,i16,120,h19),
interessant(121,i16),
thema(122,i16)],
% Constraints
[in_g(122,120),
in_g(121,120),
in_g(114,18),
in_g(112,18),
in_g(19,18),
leq(15,h23),
leq(11,h7),
leq(117,h23),
leq(11,h19)],
% Sorts
[s_sort(i6,meeting_sit),
s_sort(i13,human),
s_sort(i16,info_content)],
% Discourse
[prontype(i13,he,std),
dir(112,n0)],
% Syntax
[num(i6,sg),
pers(i6,3),
pers(i13,1),
num(i13,p1),
num(116,sg),
pers(i16,3)],
% Tense and Aspect
[ta_mood(i3,ind),
ta_tense(i3,pres),
ta_perf(i3,nonperf)],
% Prosody
rpros_accent(15),
pros_accent(121),
pros_mood(12,decl)]
</figure>
<figureCaption confidence="0.998845">
Figure 2: A Verbmobi/ Interface Term
</figureCaption>
<page confidence="0.997338">
163
</page>
<bodyText confidence="0.999981821428572">
bels to holes, a plugging. In general, the constraint
set contains partial constraints on such a plugging,
expressed by the &amp;quot;less than or equal&amp;quot; relation (leq)
but no actual equations. leq(L ,H) should be inter-
preted as a disjunction that the label is either subor-
dinate to the hole or equal to it. Alternatively, this
relation can be seen as imposing a partial ordering.
A valid plugging must observe all such constraints.
The other extension in expressivity was the in-
troduction of additional constraints between labels.
These form another type of abstraction away from
logical structure, in that conjunctive structure is also
represented by constraints. The purpose of this fur-
ther abstraction is to allow lexical predicates to be
linked into additional structures, beyond that re-
quired for a logical semantics. For example, focus
structure may group predicates that belong to dif-
ferent scope domains. More immediately, prosodic
information, expressed at the lexical level, can be
linked into the VIT via lexical predicates. The con-
straints expressing conjunctive structure relate basic
predicate labels and group labels which correspond
to a conjunctive structure in the object language,
such as a DRS, intuitively a single box. Grouping
constraints take the form in_g (L , G), where the &amp;quot;in
group&amp;quot; relation (in_g) denotes that the label L is a
member of the group G. The content of a group is,
thus, defined by the set of such grouping constraints.
</bodyText>
<equation confidence="0.911146">
g = A l such that g) E Constraints
</equation>
<bodyText confidence="0.999883666666667">
These two forms of abstraction from logical struc-
ture have a tendency to expand the printed form of
a VIT, relative to a recursive term structure, but in
one respect this is clearly a more compact represen-
tation, since lexical predicates occur only once but
may engage in various types of structure.
</bodyText>
<subsectionHeader confidence="0.999646">
2.3 An Example
</subsectionHeader>
<bodyText confidence="0.999031916666667">
Figure 2 shows the VIT produced by the analysis
of the German sentence: Jedes Treffen mit Ihnen hat
em n interessantes Thema (&amp;quot;Every meeting with you
has an interesting topic&amp;quot;). The instances which cor-
respond to object language variables are represented
by the sequence { i 1 , 12, }, holes by {hl,
h2, } and labels, including group and predi-
cate labels, by {1i, 12, . . . }. The base label of a
predicate appears in its first argument position. The
predicates haben, arg2 and arg3 share the same
label because they form the representation of a sin-
gle predication, in so-called neo-Davidsonian nota-
</bodyText>
<equation confidence="0.9860348">
decl (12 ,h23)
jed(15,i6,18,h7) ein(117,i16,120,h19)
haben(11,i3)
arg3(11,i3,i6)
arg2(11,i3,i16)
</equation>
<figureCaption confidence="0.980614">
Figure 3: A Graphical Representation of the Scop-
ing Constraints
</figureCaption>
<bodyText confidence="0.997282277777778">
tion (e.g. (Parsons, 1991)). The two groups 120 and
18 form the restrictions of the existential quantifier,
em, and the universal, j ed, respectively. Two of the
scoping constraints place the quantifiers&apos; labels be-
low the top hole, the argument of the mood operator
(de cl). The other two link the quantifiers respec-
tive scopes to the bottom label, in this case the main
verb, but no constraints are imposed on the relative
scope of the quantifiers. The whole structure is best
viewed as a (partial) subordination hierarchy, as in
Figure 3.
A complete resolution would result from an as-
signment of the labels {1i, 15, 117} to the three
holes {h23, h19, h7}. Taking into account the
implicit constraint that any argument to a predicate
is automatically subordinate to its label, there are in
fact only two possibilities: the pluggings p1 and p2
given below,
</bodyText>
<equation confidence="0.563171">
h23 h19 h7
pl 15 11 117
p2 117 15 11
</equation>
<bodyText confidence="0.9371398">
corresponding to the two relative scopings of the
quantifiers:
VX(TREFFEN(X)&amp;MIT(X,Z)--).3y(THEMA(y)
&amp;INTERESSANT(y)&amp;HABEN(X,y)))
and
</bodyText>
<page confidence="0.966844">
164
</page>
<equation confidence="0.753468">
3y(THEMA(y)&amp;INTERESSANT(y)&amp;
Vx(TREFFEN(x)&amp;MIT(x,z)--HABEN(x,y)))
</equation>
<bodyText confidence="0.999845166666667">
A full resolution is, however, rarely necessary.
Where transfer requires more specific scoping con-
straints these can be provided in a pairwise fash-
ion, based on default heuristics from word order or
prosodic cues, or at the cost of an additional call to
the resolution component.
</bodyText>
<sectionHeader confidence="0.999263" genericHeader="method">
3 VIT Processing
</sectionHeader>
<subsectionHeader confidence="0.999826">
3.1 Lists as Data Structures
</subsectionHeader>
<bodyText confidence="0.9999764375">
Almost all fields in a VIT record are represented
as lists.4 In general, list elements do not introduce
any further recursive embedding, i.e. the elements
are like fixed records with fields containing con-
stants. The non-recursive nature of these list ele-
ments makes the access and manipulation of in-
formation (e.g. addition, deletion, refinement, etc.)
very convenient. Moreover, the number of list el-
ements can be kept small by distributing informa-
tion over different slots according to its linguistic
nature (see Section 3.2 below) or the producer of
the specific kind of data (see Section 2.1). The kind
of structuring adopted and the relative shortness of
the lists make for rapid access to and operations on
VITs.
It is significant that efficient information access is
dependent not only on an appropriate data structure,
but also on the representational formalism imple-
mented in the individual data items. This property
has been presented as an independent motivation for
minimally recursive representations from the Ma-
chine Translation point of view (Copestake et al.,
1995), and has been most thoroughly explored in
the context of the substitution operations required
for transfer. We believe we have taken this argu-
ment to its logical conclusion, in implementing a
non-recursive semantic metalanguage in an appro-
priate data structure. This, in itself, provides suf-
ficient motivation for opting for such representa-
tions rather than, say, feature structures or the recur-
sive QLFs (Alshawi et al., 1991) of CLE (Alshawi,
1992).
</bodyText>
<subsectionHeader confidence="0.991393">
3.2 ADT Package
</subsectionHeader>
<bodyText confidence="0.976894933333333">
In general, linguistic analysis components are very
sensitive to changes in input data caused by modifi-
4In typical Al languages, such as Lisp and Prolog, lists are
built-in, and they can be ported easily to other programming
languages.
cations of analyses or by increasing coverage. Ob-
viously, there is a need for some kind of robust-
ness at the interface level, especially in large dis-
tributed software projects like Verbmobll with par-
allel development of different components. There-
fore, components that communicate with each other
should abstract over data types used at their inter-
faces. This is really a further projection of standard
software engineering practice into the implementa-
tion of linguistic modules.
In this spirit, all access to and manipulation of
the information in a VIT is mediated by an abstract
data type (ADT) package (Dorna, 1996). The ADT
package can be used to build a new VIT, to fill it
with information, to copy and delete information
within a VIT, to check the contents (see Section 3.3
below), to get specific information, to print a VIT,
etc. To give an example of abstraction, there is no
need to know where specific information is stored
for later lookup. This is done by the ADT package
that manages the adding of a piece of information
to the appropriate slot. This means that the external
treatment of the VIT as an interface term is entirely
independent of the internal implementation and data
structure within any of the modules and vice versa.5
</bodyText>
<subsectionHeader confidence="0.995015">
3.3 Consistency Checking
</subsectionHeader>
<bodyText confidence="0.999993428571429">
As a side effect of adopting an extensive ADT pack-
age we were able to provide a variety of check-
ing and quality control functions. They are espe-
cially useful at interfaces between linguistic mod-
ules to check format and content errors. At the for-
mat checking level language-specific on-line dic-
tionaries are used to ensure compatibility between
the components. A content checker is used to test
language-independent structural properties, such as
missing or wrongly bound variables, missing or in-
consistent information, and cyclicity.
As far as we are aware, this is the first time that
the results of linguistic components dealing with se-
mantics can be systematically checked at module
interfaces. It has been shown that this form of test-
ing is well-suited for error detection in components
with rapidly growing linguistic coverage. It is worth
noting that the source language lexical coverage in
the Verbmobll Research Prototype is around 2500
words, rising to 10K at the end of the second phase6.
Furthermore, the complex information produced by
</bodyText>
<footnote confidence="0.99872475">
5The kind of data structure used by the communication ar-
chitecture (Amtrup and Benra, 1996) is, similarly, transparent
to the modules.
61n the year 2000.
</footnote>
<page confidence="0.997636">
165
</page>
<bodyText confidence="0.999741875">
linguistic components even makes automatic output
control necessary.
The same checking can be used to define a quality
rating, e.g. for correctness, interpretability, etc. of
the content of a VIT. Such results are much better
and more productive in improving a system than
common, purely quantitative, measures based on
failure or success rates.
</bodyText>
<sectionHeader confidence="0.999344" genericHeader="conclusions">
4 Conclusion
</sectionHeader>
<bodyText confidence="0.9998012">
We have described the interface terms used to carry
linguistic information in the Verbmobi/ system.
The amount and type of information that they carry
are adapted to the various constraints that arose dur-
ing the distributed development of such a large sys-
tem over a periods of several years. The VIT format
has been integrated into several running systems,
including the most successful, the Verbmobi/ Re-
search Prototype. Subsequent modifications in the
second phase of Verbmobil have been possible in
a systematic and monotonic fashion. Similarly, the
adaption of several new syntactic and semantic anal-
ysis modules has not presented any major or un-
seen problems. Among the tasks currently under de-
velopment is the use of VIT representations in the
generation of dialogue protocols, in the language of
each participant.
We feel that VITs have proved themselves ad-
equate to the considerable system requirements
through their continued, effective use. We also find
it reassuring that, despite the priority given to the
engineering requirement, we have been able to em-
bed within this interface language representations
that are, at least, equivalent to the state of the art
in Computational Semantics.
</bodyText>
<sectionHeader confidence="0.999346" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999940983333333">
Hiyan Alshawi, David M. Carter, Bjorn Gamback,
and Manny Rayner. 1991. Translation by Quasi
Logical Form Transfer. In Proceedings of the
29th Annual Meeting of the Association for Com-
putational Linguistics (ACL&apos;91), pages 161-168,
Berkeley, CA.
Hiyan Alshawi, editor. 1992. The Core Language
Engine. ACL-MIT Press Series in Natural Lan-
guages Processing. MIT Press, Cambridge, MA.
Jan W. Amtrup and Jorg Benra. 1996. Communica-
tion in Large distributed Al Systems for Natural
Language Processing. In Proceedings of the 16th
International Conference on Computational Lin-
guistics (Coling &apos;96), pages 35-40, Copenhagen,
Denmark.
J. Bos, B. Gamback, C. Lieske, Y. Mori, M. Pinkal,
and K. Worm. 1996. Compositional Semantics
in Verbmobil. In Proceedings of the 16th Interna-
tional Conference on Computational Linguistics
( Coling &apos;96), pages 131-136, Copenhagen, Den-
mark.
Johan Bos. 1996. Predicate Logic Unplugged. In
Paul Dekker and Martin Stokhof, editors, Pro-
ceedings of the Tenth Amsterdam Colloquium,
pages 133-143, ILLC/Department of Philosophy,
University of Amsterdam.
T. Bub, W. Wahlster, and A. Waibel. 1997.
Verbmobi/: The Combination of Deep and Shal-
low Processing for Spontaneous Speech Trans-
lation. In Proceedings of the 22nd Interna-
tional Conference on Acoustics, Speech, and Sig-
nal Processing (ICASSP &apos;97), Munich, Germany,
April.
Bianka Buschbeck-Wolf. 1997. Resolution on De-
mand. Verbmobil Report 196, IMS, Universitat
Stuttgart, Germany.
A. Copestake, D. Flickinger, R. Malouf, S. Riehe-
mann, and I. Sag. 1995. Translation using Mini-
mal Recursion Semantics. In Proceedings of the
6th International Conference on Theoretical and
Methodological Issues in Machine Translation
(TMI&apos;95), Leuven, Belgium.
Michael Dorna and Martin C. Emele. 1996.
Semantic-based Transfer. In Proceedings of the
16th International Conference on Computational
Linguistics (Coling &apos;96), Copenhagen, Denmark.
Michael Dorna. 1996. The ADT-Package for the
Verbmobi/ Interface Term. Verbmobil Report
104, IMS, Universitat Stuttgart, Germany.
C. Lieske, J. Bos, B. Gamback M. Emele, and
C.J. Rupp. 1997. Giving prosody a meaning.
In Proceedings of the 5th European Conference
on Speech Communication and Technology (Eu-
roSpeech &apos;97), Rhodes, Greece, September.
T. Parsons. 1991. Events in the Semantics of En-
glish. MIT Press, Cambridge, Mass.
Uwe Reyle. 1993. Dealing with Ambiguities
by Underspecification: Construction, Represen-
tation and Deduction. Journal of Semantics,
10(2):123-179.
</reference>
<page confidence="0.998761">
166
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.580947">
<title confidence="0.999647">Managing information at linguistic interfaces*</title>
<author confidence="0.993584">Bos Rupp</author>
<affiliation confidence="0.966579">Computerlinguistik Universitat des Saarlandes</affiliation>
<address confidence="0.934093">D-66041 Saarbriicken</address>
<email confidence="0.983779">lbos,cjl@coli.uni—sb.de</email>
<author confidence="0.678267">Buschbeck-Wolf Dorna</author>
<affiliation confidence="0.99954">Institut fiir Maschinelle Sprachverarbeitung (IMS) Universitat Stuttgart</affiliation>
<address confidence="0.996958">D-70174 Stuttgart</address>
<email confidence="0.997216">biankaOims.uni—stuttgart.de</email>
<email confidence="0.997216">michlOims.uni—stuttgart.de</email>
<abstract confidence="0.999210333333333">spoken dialogue translation system imposes both engineering and linguistic constraints on the way in which linguistic information is communicated between modules. We describe the design and use of interface terms, whose formal, functional and communicative role has been tested in a sequence of integrated systems and which have proven adequate to these constraints.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Hiyan Alshawi</author>
<author>David M Carter</author>
<author>Bjorn Gamback</author>
<author>Manny Rayner</author>
</authors>
<title>Translation by Quasi Logical Form Transfer.</title>
<date>1991</date>
<booktitle>In Proceedings of the 29th Annual Meeting of the Association for Computational Linguistics (ACL&apos;91),</booktitle>
<pages>161--168</pages>
<location>Berkeley, CA.</location>
<contexts>
<context position="20118" citStr="Alshawi et al., 1991" startWordPosition="3066" endWordPosition="3069"> individual data items. This property has been presented as an independent motivation for minimally recursive representations from the Machine Translation point of view (Copestake et al., 1995), and has been most thoroughly explored in the context of the substitution operations required for transfer. We believe we have taken this argument to its logical conclusion, in implementing a non-recursive semantic metalanguage in an appropriate data structure. This, in itself, provides sufficient motivation for opting for such representations rather than, say, feature structures or the recursive QLFs (Alshawi et al., 1991) of CLE (Alshawi, 1992). 3.2 ADT Package In general, linguistic analysis components are very sensitive to changes in input data caused by modifi4In typical Al languages, such as Lisp and Prolog, lists are built-in, and they can be ported easily to other programming languages. cations of analyses or by increasing coverage. Obviously, there is a need for some kind of robustness at the interface level, especially in large distributed software projects like Verbmobll with parallel development of different components. Therefore, components that communicate with each other should abstract over data </context>
</contexts>
<marker>Alshawi, Carter, Gamback, Rayner, 1991</marker>
<rawString>Hiyan Alshawi, David M. Carter, Bjorn Gamback, and Manny Rayner. 1991. Translation by Quasi Logical Form Transfer. In Proceedings of the 29th Annual Meeting of the Association for Computational Linguistics (ACL&apos;91), pages 161-168, Berkeley, CA.</rawString>
</citation>
<citation valid="true">
<title>The Core Language Engine.</title>
<date>1992</date>
<booktitle>Series in Natural Languages Processing.</booktitle>
<editor>Hiyan Alshawi, editor.</editor>
<publisher>ACL-MIT Press</publisher>
<location>Cambridge, MA.</location>
<marker>1992</marker>
<rawString>Hiyan Alshawi, editor. 1992. The Core Language Engine. ACL-MIT Press Series in Natural Languages Processing. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jan W Amtrup</author>
<author>Jorg Benra</author>
</authors>
<title>Communication in Large distributed Al Systems for Natural Language Processing.</title>
<date>1996</date>
<booktitle>In Proceedings of the 16th International Conference on Computational Linguistics (Coling &apos;96),</booktitle>
<pages>35--40</pages>
<location>Copenhagen, Denmark.</location>
<contexts>
<context position="22809" citStr="Amtrup and Benra, 1996" startWordPosition="3510" endWordPosition="3513">n, and cyclicity. As far as we are aware, this is the first time that the results of linguistic components dealing with semantics can be systematically checked at module interfaces. It has been shown that this form of testing is well-suited for error detection in components with rapidly growing linguistic coverage. It is worth noting that the source language lexical coverage in the Verbmobll Research Prototype is around 2500 words, rising to 10K at the end of the second phase6. Furthermore, the complex information produced by 5The kind of data structure used by the communication architecture (Amtrup and Benra, 1996) is, similarly, transparent to the modules. 61n the year 2000. 165 linguistic components even makes automatic output control necessary. The same checking can be used to define a quality rating, e.g. for correctness, interpretability, etc. of the content of a VIT. Such results are much better and more productive in improving a system than common, purely quantitative, measures based on failure or success rates. 4 Conclusion We have described the interface terms used to carry linguistic information in the Verbmobi/ system. The amount and type of information that they carry are adapted to the vari</context>
</contexts>
<marker>Amtrup, Benra, 1996</marker>
<rawString>Jan W. Amtrup and Jorg Benra. 1996. Communication in Large distributed Al Systems for Natural Language Processing. In Proceedings of the 16th International Conference on Computational Linguistics (Coling &apos;96), pages 35-40, Copenhagen, Denmark.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Bos</author>
<author>B Gamback</author>
<author>C Lieske</author>
<author>Y Mori</author>
<author>M Pinkal</author>
<author>K Worm</author>
</authors>
<title>Compositional Semantics in Verbmobil.</title>
<date>1996</date>
<booktitle>In Proceedings of the 16th International Conference on Computational Linguistics ( Coling &apos;96),</booktitle>
<pages>131--136</pages>
<location>Copenhagen, Denmark.</location>
<contexts>
<context position="13016" citStr="Bos et al. (1996)" startWordPosition="2004" endWordPosition="2007">uage. In UDRSs quantifier dependencies and other scope information are underspecified because the constraints provide incomplete information about the assignment of object language structures to labels. However, a constraint set may be monotonically extended to provide a complete resolution. VIT semantics follows a similar strategy but somewhat extends the expressivity of the metalanguage. There are two constructs in the VIT semantic metalanguage which provide for an extension in expressivity relative to UDRSs. These have both been adopted from immediate precursors within the project, such as Bos et al. (1996), and further refined. The first of these is the mechanism of holes and plugging which originates in the hole semantics of Bos (1996). This requires a distinction between two types of metavariable employed: labels and holes. Labels denote the instantiated structures, primarily the individual predicates. Holes, on the other hand, mark the underspecified argument positions of propositional arguments and scope domains. Resolution consists of an assignment of la3We owe the term minimal recursion to Copestake et at. (1995), but the mechanism they describe was already in use in UDRSs. vit( % Segment</context>
</contexts>
<marker>Bos, Gamback, Lieske, Mori, Pinkal, Worm, 1996</marker>
<rawString>J. Bos, B. Gamback, C. Lieske, Y. Mori, M. Pinkal, and K. Worm. 1996. Compositional Semantics in Verbmobil. In Proceedings of the 16th International Conference on Computational Linguistics ( Coling &apos;96), pages 131-136, Copenhagen, Denmark.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Johan Bos</author>
</authors>
<title>Predicate Logic Unplugged.</title>
<date>1996</date>
<booktitle>Proceedings of the Tenth Amsterdam Colloquium,</booktitle>
<pages>133--143</pages>
<editor>In Paul Dekker and Martin Stokhof, editors,</editor>
<institution>ILLC/Department of Philosophy, University of Amsterdam.</institution>
<contexts>
<context position="13149" citStr="Bos (1996)" startWordPosition="2031" endWordPosition="2032"> about the assignment of object language structures to labels. However, a constraint set may be monotonically extended to provide a complete resolution. VIT semantics follows a similar strategy but somewhat extends the expressivity of the metalanguage. There are two constructs in the VIT semantic metalanguage which provide for an extension in expressivity relative to UDRSs. These have both been adopted from immediate precursors within the project, such as Bos et al. (1996), and further refined. The first of these is the mechanism of holes and plugging which originates in the hole semantics of Bos (1996). This requires a distinction between two types of metavariable employed: labels and holes. Labels denote the instantiated structures, primarily the individual predicates. Holes, on the other hand, mark the underspecified argument positions of propositional arguments and scope domains. Resolution consists of an assignment of la3We owe the term minimal recursion to Copestake et at. (1995), but the mechanism they describe was already in use in UDRSs. vit( % Segment ID vitID(sid(116,a,ge,2,181,2,ge,y,syntaxger), % WHG String Diord(jedes,24,[15]), word(treffen,26,[19]), word(mit,26,[112]). word(ih</context>
</contexts>
<marker>Bos, 1996</marker>
<rawString>Johan Bos. 1996. Predicate Logic Unplugged. In Paul Dekker and Martin Stokhof, editors, Proceedings of the Tenth Amsterdam Colloquium, pages 133-143, ILLC/Department of Philosophy, University of Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Bub</author>
<author>W Wahlster</author>
<author>A Waibel</author>
</authors>
<title>Verbmobi/: The Combination of Deep and Shallow Processing for Spontaneous Speech Translation.</title>
<date>1997</date>
<booktitle>In Proceedings of the 22nd International Conference on Acoustics, Speech, and Signal Processing (ICASSP &apos;97),</booktitle>
<location>Munich, Germany,</location>
<contexts>
<context position="1068" citStr="Bub et al., 1997" startWordPosition="135" endWordPosition="138">h linguistic information is communicated between modules. We describe the design and use of interface terms, whose formal, functional and communicative role has been tested in a sequence of integrated systems and which have proven adequate to these constraints. 1 Introduction This paper describes the development and usage of interface representations for linguistic information within the Verbmobi/ project: a large distributed project for speech-to-speech translation of negotiation dialogues, between English, German and Japanese. We take as our reference point the Verbmobil Research Prototype (Bub et al., 1997), but this is only one of a sequence of fully integrated running systems. The functional, formal and communicative role of interface terms within these systems, once instigated, has already been maintained through changes in the overall architecture and constitution of the Verbmobil consortium. There are two aspects to our story: • the practical and software engineering constraints imposed by the distributed development of a large natural language system. • the linguistic requirements of the translation task at the heart of the system. * This work was funded by the German Federal Ministry of E</context>
</contexts>
<marker>Bub, Wahlster, Waibel, 1997</marker>
<rawString>T. Bub, W. Wahlster, and A. Waibel. 1997. Verbmobi/: The Combination of Deep and Shallow Processing for Spontaneous Speech Translation. In Proceedings of the 22nd International Conference on Acoustics, Speech, and Signal Processing (ICASSP &apos;97), Munich, Germany, April.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bianka Buschbeck-Wolf</author>
</authors>
<title>Resolution on Demand.</title>
<date>1997</date>
<tech>Verbmobil Report 196, IMS,</tech>
<institution>Universitat</institution>
<location>Stuttgart, Germany.</location>
<contexts>
<context position="10044" citStr="Buschbeck-Wolf, 1997" startWordPosition="1541" endWordPosition="1542">on to the information that is explicitly represented in the specified fields of a VIT, including the surface word order that can be inferred from the segment identification, and the resolution of underspecified ambiguities in context, transfer might require further information, such as domainspecific world knowledge, speech act or discourse 2We indicate prosodic accent with SMALL CAPITALS. stage information. This information can be obtained on demand from the resolution component (see Figure 1). This flexible approach to the information required for transfer is termed cascaded disambiguation (Buschbeck-Wolf, 1997) and is balanced against the fact that each level of escalation implies a correspondingly greater share of the permissible runtime. 2 The Verbmobil Interface Term The VIT encodes various pieces of information produced and used in the linguistic modules. The content of a VIT corresponds to a single segment (or utterance) in a dialog turn. This partitioning of turns enables the linguistic components to work incrementally. 2.1 Multiple Levels of Information A VIT is a record-like data structure whose fields are filled with semantic, scopal, sortal, morphosyntactic, prosodic, discourse and other i</context>
</contexts>
<marker>Buschbeck-Wolf, 1997</marker>
<rawString>Bianka Buschbeck-Wolf. 1997. Resolution on Demand. Verbmobil Report 196, IMS, Universitat Stuttgart, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Copestake</author>
<author>D Flickinger</author>
<author>R Malouf</author>
<author>S Riehemann</author>
<author>I Sag</author>
</authors>
<title>Translation using Minimal Recursion Semantics.</title>
<date>1995</date>
<booktitle>In Proceedings of the 6th International Conference on Theoretical and Methodological Issues in Machine Translation (TMI&apos;95),</booktitle>
<location>Leuven, Belgium.</location>
<contexts>
<context position="19690" citStr="Copestake et al., 1995" startWordPosition="2999" endWordPosition="3002"> different slots according to its linguistic nature (see Section 3.2 below) or the producer of the specific kind of data (see Section 2.1). The kind of structuring adopted and the relative shortness of the lists make for rapid access to and operations on VITs. It is significant that efficient information access is dependent not only on an appropriate data structure, but also on the representational formalism implemented in the individual data items. This property has been presented as an independent motivation for minimally recursive representations from the Machine Translation point of view (Copestake et al., 1995), and has been most thoroughly explored in the context of the substitution operations required for transfer. We believe we have taken this argument to its logical conclusion, in implementing a non-recursive semantic metalanguage in an appropriate data structure. This, in itself, provides sufficient motivation for opting for such representations rather than, say, feature structures or the recursive QLFs (Alshawi et al., 1991) of CLE (Alshawi, 1992). 3.2 ADT Package In general, linguistic analysis components are very sensitive to changes in input data caused by modifi4In typical Al languages, su</context>
</contexts>
<marker>Copestake, Flickinger, Malouf, Riehemann, Sag, 1995</marker>
<rawString>A. Copestake, D. Flickinger, R. Malouf, S. Riehemann, and I. Sag. 1995. Translation using Minimal Recursion Semantics. In Proceedings of the 6th International Conference on Theoretical and Methodological Issues in Machine Translation (TMI&apos;95), Leuven, Belgium.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Dorna</author>
<author>Martin C Emele</author>
</authors>
<title>Semantic-based Transfer.</title>
<date>1996</date>
<booktitle>In Proceedings of the 16th International Conference on Computational Linguistics (Coling &apos;96),</booktitle>
<location>Copenhagen, Denmark.</location>
<contexts>
<context position="4735" citStr="Dorna and Emele, 1996" startWordPosition="706" endWordPosition="709">a theory independent lingua franca for discussions which may involve both linguists and computer scientists. The Verbmobi/ community is actually large enough to require such off-line constructs, too. 1.2 Encoding of Linguistic Information A key question in the design of an interface language is what information must be carried and to what purpose. The primary definition criterion within the linguistic modules has been the translation task. The actual translation operation is performed in the transfer module as a mapping between semantic representations of the source and target languages, see (Dorna and Emele, 1996). However, the information requirements of this process are flexible, since information from various levels of analysis are used in disambiguation within the transfer module, including prosody and dialogue structure. To a large extent the information requirements divide into two parts: • the expressive adequacy of the semantic representation; • representing other types of linguistic information so as to meet the disambiguation requirements with the minimum of redundancy. The design of the semantic representations encoded within VITs has been guided by an ongoing movement in representational se</context>
</contexts>
<marker>Dorna, Emele, 1996</marker>
<rawString>Michael Dorna and Martin C. Emele. 1996. Semantic-based Transfer. In Proceedings of the 16th International Conference on Computational Linguistics (Coling &apos;96), Copenhagen, Denmark.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Dorna</author>
</authors>
<title>The ADT-Package for the Verbmobi/ Interface Term.</title>
<date>1996</date>
<tech>Verbmobil Report 104, IMS,</tech>
<institution>Universitat</institution>
<location>Stuttgart, Germany.</location>
<contexts>
<context position="21014" citStr="Dorna, 1996" startWordPosition="3213" endWordPosition="3214"> of analyses or by increasing coverage. Obviously, there is a need for some kind of robustness at the interface level, especially in large distributed software projects like Verbmobll with parallel development of different components. Therefore, components that communicate with each other should abstract over data types used at their interfaces. This is really a further projection of standard software engineering practice into the implementation of linguistic modules. In this spirit, all access to and manipulation of the information in a VIT is mediated by an abstract data type (ADT) package (Dorna, 1996). The ADT package can be used to build a new VIT, to fill it with information, to copy and delete information within a VIT, to check the contents (see Section 3.3 below), to get specific information, to print a VIT, etc. To give an example of abstraction, there is no need to know where specific information is stored for later lookup. This is done by the ADT package that manages the adding of a piece of information to the appropriate slot. This means that the external treatment of the VIT as an interface term is entirely independent of the internal implementation and data structure within any o</context>
</contexts>
<marker>Dorna, 1996</marker>
<rawString>Michael Dorna. 1996. The ADT-Package for the Verbmobi/ Interface Term. Verbmobil Report 104, IMS, Universitat Stuttgart, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Lieske</author>
<author>J Bos</author>
<author>B Gamback M Emele</author>
<author>C J Rupp</author>
</authors>
<title>Giving prosody a meaning.</title>
<date>1997</date>
<booktitle>In Proceedings of the 5th European Conference on Speech Communication and Technology (EuroSpeech &apos;97),</booktitle>
<location>Rhodes, Greece,</location>
<contexts>
<context position="9331" citStr="Lieske et al. (1997)" startWordPosition="1432" endWordPosition="1435">dn&apos;t it? Consider the discourse particle doch in (2) which can be disambiguated with prosodic information. When doch is stressed and the utterance has falling intonation, it functions as a pointer to a previous dialogue stage. Something that was impossible before turned out to be feasible at the utterance time. Then, doch is translated into after all and the auxiliary takes over the accent (2a) 2. If (2) has a rising intonation and the particle is not stressed, it signals the speaker&apos;s expectation of the hearer&apos;s approving response. In English, this meaning is conveyed by a question tag (2b). Lieske et al. (1997) provide a more detailed account of the use of prosodic information in Verbrnobll. In addition to the information that is explicitly represented in the specified fields of a VIT, including the surface word order that can be inferred from the segment identification, and the resolution of underspecified ambiguities in context, transfer might require further information, such as domainspecific world knowledge, speech act or discourse 2We indicate prosodic accent with SMALL CAPITALS. stage information. This information can be obtained on demand from the resolution component (see Figure 1). This fl</context>
</contexts>
<marker>Lieske, Bos, Emele, Rupp, 1997</marker>
<rawString>C. Lieske, J. Bos, B. Gamback M. Emele, and C.J. Rupp. 1997. Giving prosody a meaning. In Proceedings of the 5th European Conference on Speech Communication and Technology (EuroSpeech &apos;97), Rhodes, Greece, September.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Parsons</author>
</authors>
<title>Events in the Semantics of English.</title>
<date>1991</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, Mass.</location>
<contexts>
<context position="17212" citStr="Parsons, 1991" startWordPosition="2608" endWordPosition="2609">pic&amp;quot;). The instances which correspond to object language variables are represented by the sequence { i 1 , 12, }, holes by {hl, h2, } and labels, including group and predicate labels, by {1i, 12, . . . }. The base label of a predicate appears in its first argument position. The predicates haben, arg2 and arg3 share the same label because they form the representation of a single predication, in so-called neo-Davidsonian notadecl (12 ,h23) jed(15,i6,18,h7) ein(117,i16,120,h19) haben(11,i3) arg3(11,i3,i6) arg2(11,i3,i16) Figure 3: A Graphical Representation of the Scoping Constraints tion (e.g. (Parsons, 1991)). The two groups 120 and 18 form the restrictions of the existential quantifier, em, and the universal, j ed, respectively. Two of the scoping constraints place the quantifiers&apos; labels below the top hole, the argument of the mood operator (de cl). The other two link the quantifiers respective scopes to the bottom label, in this case the main verb, but no constraints are imposed on the relative scope of the quantifiers. The whole structure is best viewed as a (partial) subordination hierarchy, as in Figure 3. A complete resolution would result from an assignment of the labels {1i, 15, 117} to </context>
</contexts>
<marker>Parsons, 1991</marker>
<rawString>T. Parsons. 1991. Events in the Semantics of English. MIT Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Uwe Reyle</author>
</authors>
<title>Dealing with Ambiguities by Underspecification: Construction, Representation and Deduction.</title>
<date>1993</date>
<journal>Journal of Semantics,</journal>
<pages>10--2</pages>
<contexts>
<context position="12013" citStr="Reyle, 1993" startWordPosition="1858" endWordPosition="1859">rocessing aspects of VITs see Section 3. A concrete example of a VIT is given in Figure 2 in a Prolog notation where the slots are also marked. This example is further discussed in Section 2.2. 2.2 VIT Semantics The core semantic content of the VIT is contained in the two slots: Conditions and Constraints. The conditions represent the predicates of the semantic content and the constraints the semantic dependency structure over those predicates. This partitioning between semantic content and semantic structure is modelled on the kind of representational metalanguage employed in UDRS semantics (Reyle, 1993) to express underspecification. The semantic representation is, thus, a metalanguage expression containing metavariables, termed labels, that may be assigned to object language constructs. Moreover, such a metalanguage is minimally recursive 3, in that recursive structure is expunged from the surface level by the use of metavariables over the recursive constituents of the object language. In UDRSs quantifier dependencies and other scope information are underspecified because the constraints provide incomplete information about the assignment of object language structures to labels. However, a </context>
</contexts>
<marker>Reyle, 1993</marker>
<rawString>Uwe Reyle. 1993. Dealing with Ambiguities by Underspecification: Construction, Representation and Deduction. Journal of Semantics, 10(2):123-179.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>