<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000125">
<title confidence="0.990934">
Wysiwym with wider coverage
</title>
<author confidence="0.997395">
Richard Power and Roger Evans
</author>
<affiliation confidence="0.840379">
Information Technology Research Institute
University of Brighton
Lewes Road
</affiliation>
<address confidence="0.993714">
Brighton BN2 4AT, UK
</address>
<email confidence="0.997567">
Firstname.Lastname@itri.bton.ac.uk
</email>
<sectionHeader confidence="0.993815" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999951181818182">
We describe an extension of the Wysiwym
technology for knowledge editing through nat-
ural language feedback. Previous applications
have addressed relatively simple tasks requiring
a very limited range of nominal and clause pat-
terns. We show that by adding a further editing
operation called reconfiguration, the technology
can achieve a far wider coverage more in line
with other general-purpose generators. The ex-
tension will be included in a Java-based library
package for producing Wysiwym applications.
</bodyText>
<sectionHeader confidence="0.998733" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999686785714286">
Wysiwym (What You See Is What You Meant)
is a user-interface technology through which a
domain expert can formally encode knowledge
by structured editing of an automatically gener-
ated feedback text (Power and Scott, 1998). The
technology has hitherto addressed two practical
contexts: the automatic production of multilin-
gual technical documentation, and the formula-
tion of queries to a database or expert system.
In the first case, Wysiwym editing encodes the
desired content of the document in an interlin-
gua, from which versions can be generated in
mutliple languages; in the second case, it yields
a query encoded in a formal query language such
as SQL. The benefit is the same in either con-
text: since editing is mediated through a presen-
tation in natural language, there is no need for
the user to be acquainted with the formal details
of knowledge representation or query languages.
Elsewhere (Evans and Power, 2003) we have
described a library package for developing
Wysiwym applications. This package was a
consolidation of work carried out in a series of
early applications (Power and Scott, 1998; Pi-
wek et al., 2000; Bouayad-Agha et al., 2002),
requiring a very restricted linguistic coverage,
especially as regards the range of clausal and
nominal patterns. We present here an exten-
sion to this library which allows a coverage
more in line with general-purpose generators
like FUF/SURGE (Elhadad and Robin, 1992),
KPML/PENMAN (Bateman, 1996) and Real-
Pro (Lavoie and Rambow, 1997). The exten-
sion is based on two new ideas: first, a change
to the underlying semantic model, replacing
atomic entity types with feature structures; sec-
ondly, a corresponding change in the user inter-
face, which now offers an extra editing operation
(called reconfiguration) through which complex
entity types may be modified. The purpose of
this paper (and the accompanying demonstra-
tion) is to describe these novelties.
</bodyText>
<sectionHeader confidence="0.671184" genericHeader="introduction">
2 Editing with simple types
</sectionHeader>
<figureCaption confidence="0.996009">
Figure 1: A-box with simple types
</figureCaption>
<bodyText confidence="0.99994">
In early Wysiwym applications, the editing
process served to build an A-box like that shown
in figure 1, comprising a set of entities (repre-
sented by rectangles), each entity having a sim-
ple type (represented by labels within rectan-
gles) and a set of relationships (represented by
labelled arcs). The graph in this figure is rooted
in a take entity, denoting a taking event, the
participants being a patient entity (the taker)
and an an aspirin entity (the takee). The in-
tended meaning of the graph is expressed by the
English sentence ‘the patient takes an aspirin’.
The construction of the graph through Wysi-
wym editing proceeds as follows. The starting
point is an empty A-box, which consists only
in a constraint on the root entity — for in-
</bodyText>
<equation confidence="0.5343282">
ARG−1
take
ARG−2
patient
aspirin
</equation>
<bodyText confidence="0.999809571428572">
stance, the requirement that it should be some
kind of event. This unpromising A-box is sup-
plied as input to a natural language generator
with two special features: (a) it can generate
texts from an A-box in any state of completion
(even empty); (b) it can generate menus open-
ing on anchors within the text, in addition to
the text itself. The resulting feedback text is
presented to the user through a special interface
in which some spans are mouse-sensitive an-
chors, marking points where a new entity may
be added to the A-box. Anchors are normally
shown through a colour code; here we will em-
ploy square brackets:
</bodyText>
<subsectionHeader confidence="0.713607">
[Some event].
</subsectionHeader>
<bodyText confidence="0.977173869565218">
When the user mouse-clicks on an anchor, a
menu pops up listing all entity types allowed
in the relevant context — in this case, all event
types.
arrive
breathe
. . .
take
. . .
After the user chooses one of these options, such
as ‘take’, a new entity of the specified type is
created, and added to the A-box at the current
location (in this case, the root of the graph). As-
suming the ontology decrees that a take event
has two participants, a person and an object,
the new A-box will include two anchors allow-
ing these entities to be defined:
[Some person] takes [some object].
Opening the anchor ‘some person’ will yield a
list of options including ‘patient’; opening ‘some
object’ will yield options including ‘an aspirin’;
in this way two more entities can be introduced,
so obtaining the complete graph in figure 1.
</bodyText>
<sectionHeader confidence="0.953045" genericHeader="method">
3 Limitations in coverage
</sectionHeader>
<bodyText confidence="0.999262888888889">
For some applications, the above procedure
works well, but it allows far too few variations to
cope with real documents or queries of normal
linguistic complexity. A single choice of event
type (‘take’) is assumed by default to imply just
one out of the thousands of possible clause pat-
terns that could be obtained by varying mood,
tense, polarity, modality, etc., or by adding ad-
verbial modifiers:
</bodyText>
<table confidence="0.865347166666667">
FORCE
does the patient take an aspirin?
take an aspirin
TIME
the patient took an aspirin
the patient will take an aspirin
POLARITY
the patient does not take an aspirin
MODALITY
the patient may take an aspirin
the patient must take an aspirin
the patient might take an aspirin
the patient should take an aspirin
MODIFIER
the patient takes an aspirin [at some time]
the patient takes an aspirin [somewhere]
the patient takes an aspirin [in some manner]
the patient takes an aspirin [with some frequency]
</table>
<bodyText confidence="0.99934475">
By combining just the above features, we ob-
tain over 300 combinations; these would mul-
tiply further if we included the semantic fea-
tures controlling perfective, progressive, voice,
and wh-questions. Such a large set of options
challenges the feasibility of WYSIWYM, or in-
deed any other approach to knowledge editing
by domain experts.
</bodyText>
<sectionHeader confidence="0.880783" genericHeader="method">
4 Editing with complex types
</sectionHeader>
<bodyText confidence="0.9998444">
Our favoured (indeed, only) proposal for em-
bracing these variations is based on an analogy
with a drawing tool. In WYSIWYM, choosing
take from a menu of event types introduces
an event entity, implicitly defaulted to present
time, positive polarity, and so forth. In a draw-
ing tool, choosing the rectangle icon from a
palette of shapes introduces a rectangle entity,
implicitly defaulted to a certain size, colour, and
border (to name just three features). Having
introduced a rectangle entity, however, the user
can reconfigure it by changing these features one
at a time. Why should an equivalent operation
not be provided for the semantic features un-
derlying a clause?
</bodyText>
<figureCaption confidence="0.989119">
Figure 2: A-box with complex types
</figureCaption>
<figure confidence="0.989806916666667">
take
POLARITY positive
TIME present
MODALITY undef
ARG−2
patient
IDENTIFIABILITY identifiable
MULTIPLICITY single
aspirin
IDENTIFIABILITY unidentifiable
MULTIPLICITY single
ARG−1
</figure>
<bodyText confidence="0.999468658536586">
To add this extra editing operation we must
replace the simple entity types employed in
early WYsIwYM systems by complex types, as
illustrated in figure 2 (to simplify, just a few of
the possible features are shown). To reconfig-
ure an entity, the user selects the corresponding
span in the feedback text (all such spans will be
mouse-sensitive), and chooses from a menu of
options, each corresponding to a change in just
one feature.
With this potentially huge increase in the
number of editing operations for a given feed-
back text, the idea of precomputing all possi-
ble menus and popping one up on demand be-
comes less attractive, both computationally and
to the user. Instead, when the user selects a
span of text, the menu of reconfigurations for
that span is computed on the fly, and displayed
in a static menu pane adjacent to the main text
pane, which can be browsed and searched - see
figure 3. At every stage during the interaction,
the user sees a feedback text (right pane), with
one span highlighted through a colour code, and
a list of options for reconfiguring the currently
selected unit (left pane). If the selected unit
happens to be an anchor (square brackets), the
operation will be one of choosing an initial en-
tity type rather than reconfiguring an existing
one, but the appearance of the interface will be
the same. The user can continue the interaction
in two ways: either by choosing an option from
the menu pane, or by selecting a different cur-
rent unit by mouse-clicking within the feedback
text pane.
To illustrate, we will suppose that the current
A-box is as depicted in figure 2, and that the
‘patient’ entity is currently selected. Highlight-
ing the selected span in bold face rather than a
colour code, the feedback text and the menu of
reconfiguration options might be as follows:
The patient takes an aspirin.
</bodyText>
<sectionHeader confidence="0.809506666666667" genericHeader="method">
IDENTIFIABILITY
A patient
MULTIPLICITY
</sectionHeader>
<subsectionHeader confidence="0.993919">
The patients
</subsectionHeader>
<bodyText confidence="0.996571">
The labels (IDENTIFIABILITY etc.) could of
course be replaced by more familiar words (e.g.,
article, number). Assuming that the user is
happy with the subject of the sentence, he/she
will ignore the reconfiguration options and in-
stead click around the word ‘takes’ in the feed-
back text, so selecting the whole event entity:
The patient takes an aspirin.
</bodyText>
<subsectionHeader confidence="0.287681">
POLARITY
</subsectionHeader>
<bodyText confidence="0.944853142857143">
The patient does not take an aspirin.
TIME
The patient took an aspirin.
The patient will take an aspirin.
MODALITY
The patient must take an aspirin.
The patient may take an aspirin.
The patient might take an aspirin.
If the first reconfiguration option is chosen, set-
ting POLARITY to negative, the revised options
will conserve this new value throughout, except
for the new polarity option, which will now be
to change the value back to positive:
The patient does not take an aspirin.
</bodyText>
<sectionHeader confidence="0.468612" genericHeader="method">
POLARITY
</sectionHeader>
<subsectionHeader confidence="0.397974">
The patient takes an aspirin.
TIME
</subsectionHeader>
<bodyText confidence="0.920129">
The patient did not take an aspirin.
The patient will not take an aspirin.
MODALITY
The patient must not take an aspirin.
The patient may not take an aspirin.
The patient might not take an aspirin.
Figure 3 also shows the use of tags in the feed-
back text, such as Leaflet, Section, Paragraph.
These provide anchor points to select and re-
configure linguistic units which have no exclu-
sive text of their own. Such tags would not form
part of the final output text in a document au-
thoring scenario.
</bodyText>
<sectionHeader confidence="0.58576" genericHeader="method">
5 Benefits of the approach
</sectionHeader>
<bodyText confidence="0.999915523809524">
These techniques make it possible to construct
complex, fluent and expressive texts using a
point-and-click interface, with no typing of text.
The benefits of previous WYsIwYM systems are
also retained here: the text is guaranteed to
have a coherent internal representation which
can be constrained to conform to a controlled
language or house style specification, or gener-
ated (and edited) in a different language. The
internal representation can be used to monitor
the document content, for example to provide
authoring support, or it can be transformed into
an alternative representation for further pro-
cessing.
Although the motivation for this extension
was to provide effective support for document
authoring, the underlying model offers addi-
tional functionality in other knowledge creation
scenarios as well. The examples in this paper
use the complex types of the knowledge objects
to represent linguistic variation, but might just
</bodyText>
<figureCaption confidence="0.998145">
Figure 3: Snapshot of application
</figureCaption>
<bodyText confidence="0.999775">
as easily represent other kinds of semantic de-
tail, for example in an object-oriented program
specifciation scenario.
</bodyText>
<sectionHeader confidence="0.999275" genericHeader="conclusions">
6 Conclusion
</sectionHeader>
<bodyText confidence="0.995439166666667">
In this paper we have described an extension to
our earlier WYSIWYM approach which supports
more sophisticated interactions with the under-
lying knowledge base, allowing a far wider range
of linguistic expressions to be constructed. This
makes the system more suitable for real author-
ing tasks, particularly in controlled language
or multilingual contexts, while also enhancing
its potential for constructing and editing other
kinds of complex knowledge.
The system has been implemented as an ex-
tension to our WYSIWYM library (Evans and
Power, 2003), using a wide-coverage grammar
based on the subcategorisation frames found in
the XTAG (Doran et al., 1994) categories, and
deployed in the domain of medical informatics.
The demonstration requires a PC with Java and
Sicstus Prolog.
</bodyText>
<sectionHeader confidence="0.998985" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999342666666666">
John A. Bateman. 1996. KPML: The KoMET-
Penman (Multilingual) Development Envi-
ronment. Technical report, Institut f¨ur In-
tegrierte Publikations- und Informationssys-
teme (IPSI), GMD, Darmstadt, March. Re-
lease 0.9.
Nadjet Bouayad-Agha, Richard Power, Donia
Scott, and Anja Belz. 2002. PILLS: Multilin-
gual generation of medical information docu-
ments with overlapping content. In Proceed-
ings of the Third International Conference on
Language Resoures and Evaluation (LREC
2002), pages 2111–2114, Las Palmas.
Christy Doran, Dania Egedi, Beth Ann Hockey,
B. Srinivas, and Martin Zaidel. 1994. XTAG
system - a wide coverage grammar for english.
In Proceedings of the 15th International Con-
ference on Computational Linguistics (COL-
ING 94), pages 922–928, Kyoto, Japan.
Michael Elhadad and Jacques Robin. 1992.
Controlling content realization with func-
tional unification grammars. In Aspects
of Automated Natural Language Generation,
pages 89–104. Springer Verlag.
Roger Evans and Richard Power. 2003. Wysi-
wym: Building user interfaces with natu-
ral language feedback. In Research notes
and demonstration papers at EACL-03, pages
203–206, Budapest, Hungary.
B. Lavoie and O. Rambow. 1997. RealPro: A
fast, portable sentence realizer. In Proceed-
ings of the Conference on Applied Natural
Language Processing (ANLP’97), Washing-
ton, DC.
Paul Piwek, Roger Evans, Lynne Cahill, and
Neil Tipper. 2000. Natural language genera-
tion in the mile system. In Proceedings of the
IMPACTS in NLG Workshop, pages 33–42,
Schloss Dagstuhl, Germany.
R. Power and D. Scott. 1998. Multilingual au-
thoring using feedback texts. In Proceedings
of the 17th International Conference on Com-
putational Linguistics and 36th Annual Meet-
ing of the Association for Computational Lin-
guistics, pages 1053–1059, Montreal, Canada.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.475951">
<title confidence="0.991542">wider coverage</title>
<author confidence="0.967305">Power Evans</author>
<affiliation confidence="0.9998915">Information Technology Research Institute University of Brighton</affiliation>
<address confidence="0.9463455">Lewes Road Brighton BN2 4AT, UK</address>
<email confidence="0.967882">Firstname.Lastname@itri.bton.ac.uk</email>
<abstract confidence="0.998386">describe an extension of the technology for knowledge editing through natural language feedback. Previous applications have addressed relatively simple tasks requiring a very limited range of nominal and clause patterns. We show that by adding a further editing called the technology can achieve a far wider coverage more in line with other general-purpose generators. The extension will be included in a Java-based library</abstract>
<intro confidence="0.58411">for producing</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>John A Bateman</author>
</authors>
<title>KPML: The KoMETPenman (Multilingual) Development Environment.</title>
<date>1996</date>
<journal>Release</journal>
<booktitle>Institut f¨ur Integrierte Publikations- und Informationssysteme (IPSI), GMD,</booktitle>
<tech>Technical report,</tech>
<volume>0</volume>
<location>Darmstadt,</location>
<contexts>
<context position="2173" citStr="Bateman, 1996" startWordPosition="332" endWordPosition="333">ls of knowledge representation or query languages. Elsewhere (Evans and Power, 2003) we have described a library package for developing Wysiwym applications. This package was a consolidation of work carried out in a series of early applications (Power and Scott, 1998; Piwek et al., 2000; Bouayad-Agha et al., 2002), requiring a very restricted linguistic coverage, especially as regards the range of clausal and nominal patterns. We present here an extension to this library which allows a coverage more in line with general-purpose generators like FUF/SURGE (Elhadad and Robin, 1992), KPML/PENMAN (Bateman, 1996) and RealPro (Lavoie and Rambow, 1997). The extension is based on two new ideas: first, a change to the underlying semantic model, replacing atomic entity types with feature structures; secondly, a corresponding change in the user interface, which now offers an extra editing operation (called reconfiguration) through which complex entity types may be modified. The purpose of this paper (and the accompanying demonstration) is to describe these novelties. 2 Editing with simple types Figure 1: A-box with simple types In early Wysiwym applications, the editing process served to build an A-box like</context>
</contexts>
<marker>Bateman, 1996</marker>
<rawString>John A. Bateman. 1996. KPML: The KoMETPenman (Multilingual) Development Environment. Technical report, Institut f¨ur Integrierte Publikations- und Informationssysteme (IPSI), GMD, Darmstadt, March. Release 0.9.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nadjet Bouayad-Agha</author>
<author>Richard Power</author>
<author>Donia Scott</author>
<author>Anja Belz</author>
</authors>
<title>PILLS: Multilingual generation of medical information documents with overlapping content.</title>
<date>2002</date>
<booktitle>In Proceedings of the Third International Conference on Language Resoures and Evaluation (LREC</booktitle>
<pages>2111--2114</pages>
<location>Las Palmas.</location>
<contexts>
<context position="1874" citStr="Bouayad-Agha et al., 2002" startWordPosition="286" endWordPosition="289">ons can be generated in mutliple languages; in the second case, it yields a query encoded in a formal query language such as SQL. The benefit is the same in either context: since editing is mediated through a presentation in natural language, there is no need for the user to be acquainted with the formal details of knowledge representation or query languages. Elsewhere (Evans and Power, 2003) we have described a library package for developing Wysiwym applications. This package was a consolidation of work carried out in a series of early applications (Power and Scott, 1998; Piwek et al., 2000; Bouayad-Agha et al., 2002), requiring a very restricted linguistic coverage, especially as regards the range of clausal and nominal patterns. We present here an extension to this library which allows a coverage more in line with general-purpose generators like FUF/SURGE (Elhadad and Robin, 1992), KPML/PENMAN (Bateman, 1996) and RealPro (Lavoie and Rambow, 1997). The extension is based on two new ideas: first, a change to the underlying semantic model, replacing atomic entity types with feature structures; secondly, a corresponding change in the user interface, which now offers an extra editing operation (called reconfi</context>
</contexts>
<marker>Bouayad-Agha, Power, Scott, Belz, 2002</marker>
<rawString>Nadjet Bouayad-Agha, Richard Power, Donia Scott, and Anja Belz. 2002. PILLS: Multilingual generation of medical information documents with overlapping content. In Proceedings of the Third International Conference on Language Resoures and Evaluation (LREC 2002), pages 2111–2114, Las Palmas.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christy Doran</author>
<author>Dania Egedi</author>
<author>Beth Ann Hockey</author>
<author>B Srinivas</author>
<author>Martin Zaidel</author>
</authors>
<title>XTAG system - a wide coverage grammar for english.</title>
<date>1994</date>
<booktitle>In Proceedings of the 15th International Conference on Computational Linguistics (COLING 94),</booktitle>
<pages>922--928</pages>
<location>Kyoto, Japan.</location>
<marker>Doran, Egedi, Hockey, Srinivas, Zaidel, 1994</marker>
<rawString>Christy Doran, Dania Egedi, Beth Ann Hockey, B. Srinivas, and Martin Zaidel. 1994. XTAG system - a wide coverage grammar for english. In Proceedings of the 15th International Conference on Computational Linguistics (COLING 94), pages 922–928, Kyoto, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Elhadad</author>
<author>Jacques Robin</author>
</authors>
<title>Controlling content realization with functional unification grammars.</title>
<date>1992</date>
<booktitle>In Aspects of Automated Natural Language Generation,</booktitle>
<pages>89--104</pages>
<publisher>Springer Verlag.</publisher>
<contexts>
<context position="2144" citStr="Elhadad and Robin, 1992" startWordPosition="327" endWordPosition="330"> to be acquainted with the formal details of knowledge representation or query languages. Elsewhere (Evans and Power, 2003) we have described a library package for developing Wysiwym applications. This package was a consolidation of work carried out in a series of early applications (Power and Scott, 1998; Piwek et al., 2000; Bouayad-Agha et al., 2002), requiring a very restricted linguistic coverage, especially as regards the range of clausal and nominal patterns. We present here an extension to this library which allows a coverage more in line with general-purpose generators like FUF/SURGE (Elhadad and Robin, 1992), KPML/PENMAN (Bateman, 1996) and RealPro (Lavoie and Rambow, 1997). The extension is based on two new ideas: first, a change to the underlying semantic model, replacing atomic entity types with feature structures; secondly, a corresponding change in the user interface, which now offers an extra editing operation (called reconfiguration) through which complex entity types may be modified. The purpose of this paper (and the accompanying demonstration) is to describe these novelties. 2 Editing with simple types Figure 1: A-box with simple types In early Wysiwym applications, the editing process </context>
</contexts>
<marker>Elhadad, Robin, 1992</marker>
<rawString>Michael Elhadad and Jacques Robin. 1992. Controlling content realization with functional unification grammars. In Aspects of Automated Natural Language Generation, pages 89–104. Springer Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Roger Evans</author>
<author>Richard Power</author>
</authors>
<title>Wysiwym: Building user interfaces with natural language feedback.</title>
<date>2003</date>
<booktitle>In Research notes and demonstration papers at EACL-03,</booktitle>
<pages>203--206</pages>
<location>Budapest, Hungary.</location>
<contexts>
<context position="1643" citStr="Evans and Power, 2003" startWordPosition="248" endWordPosition="251">oduction of multilingual technical documentation, and the formulation of queries to a database or expert system. In the first case, Wysiwym editing encodes the desired content of the document in an interlingua, from which versions can be generated in mutliple languages; in the second case, it yields a query encoded in a formal query language such as SQL. The benefit is the same in either context: since editing is mediated through a presentation in natural language, there is no need for the user to be acquainted with the formal details of knowledge representation or query languages. Elsewhere (Evans and Power, 2003) we have described a library package for developing Wysiwym applications. This package was a consolidation of work carried out in a series of early applications (Power and Scott, 1998; Piwek et al., 2000; Bouayad-Agha et al., 2002), requiring a very restricted linguistic coverage, especially as regards the range of clausal and nominal patterns. We present here an extension to this library which allows a coverage more in line with general-purpose generators like FUF/SURGE (Elhadad and Robin, 1992), KPML/PENMAN (Bateman, 1996) and RealPro (Lavoie and Rambow, 1997). The extension is based on two </context>
</contexts>
<marker>Evans, Power, 2003</marker>
<rawString>Roger Evans and Richard Power. 2003. Wysiwym: Building user interfaces with natural language feedback. In Research notes and demonstration papers at EACL-03, pages 203–206, Budapest, Hungary.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Lavoie</author>
<author>O Rambow</author>
</authors>
<title>RealPro: A fast, portable sentence realizer.</title>
<date>1997</date>
<booktitle>In Proceedings of the Conference on Applied Natural Language Processing (ANLP’97),</booktitle>
<location>Washington, DC.</location>
<contexts>
<context position="2211" citStr="Lavoie and Rambow, 1997" startWordPosition="337" endWordPosition="340">on or query languages. Elsewhere (Evans and Power, 2003) we have described a library package for developing Wysiwym applications. This package was a consolidation of work carried out in a series of early applications (Power and Scott, 1998; Piwek et al., 2000; Bouayad-Agha et al., 2002), requiring a very restricted linguistic coverage, especially as regards the range of clausal and nominal patterns. We present here an extension to this library which allows a coverage more in line with general-purpose generators like FUF/SURGE (Elhadad and Robin, 1992), KPML/PENMAN (Bateman, 1996) and RealPro (Lavoie and Rambow, 1997). The extension is based on two new ideas: first, a change to the underlying semantic model, replacing atomic entity types with feature structures; secondly, a corresponding change in the user interface, which now offers an extra editing operation (called reconfiguration) through which complex entity types may be modified. The purpose of this paper (and the accompanying demonstration) is to describe these novelties. 2 Editing with simple types Figure 1: A-box with simple types In early Wysiwym applications, the editing process served to build an A-box like that shown in figure 1, comprising a </context>
</contexts>
<marker>Lavoie, Rambow, 1997</marker>
<rawString>B. Lavoie and O. Rambow. 1997. RealPro: A fast, portable sentence realizer. In Proceedings of the Conference on Applied Natural Language Processing (ANLP’97), Washington, DC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paul Piwek</author>
<author>Roger Evans</author>
<author>Lynne Cahill</author>
<author>Neil Tipper</author>
</authors>
<title>Natural language generation in the mile system.</title>
<date>2000</date>
<booktitle>In Proceedings of the IMPACTS in NLG Workshop,</booktitle>
<pages>33--42</pages>
<location>Schloss Dagstuhl, Germany.</location>
<contexts>
<context position="1846" citStr="Piwek et al., 2000" startWordPosition="281" endWordPosition="285">ua, from which versions can be generated in mutliple languages; in the second case, it yields a query encoded in a formal query language such as SQL. The benefit is the same in either context: since editing is mediated through a presentation in natural language, there is no need for the user to be acquainted with the formal details of knowledge representation or query languages. Elsewhere (Evans and Power, 2003) we have described a library package for developing Wysiwym applications. This package was a consolidation of work carried out in a series of early applications (Power and Scott, 1998; Piwek et al., 2000; Bouayad-Agha et al., 2002), requiring a very restricted linguistic coverage, especially as regards the range of clausal and nominal patterns. We present here an extension to this library which allows a coverage more in line with general-purpose generators like FUF/SURGE (Elhadad and Robin, 1992), KPML/PENMAN (Bateman, 1996) and RealPro (Lavoie and Rambow, 1997). The extension is based on two new ideas: first, a change to the underlying semantic model, replacing atomic entity types with feature structures; secondly, a corresponding change in the user interface, which now offers an extra editi</context>
</contexts>
<marker>Piwek, Evans, Cahill, Tipper, 2000</marker>
<rawString>Paul Piwek, Roger Evans, Lynne Cahill, and Neil Tipper. 2000. Natural language generation in the mile system. In Proceedings of the IMPACTS in NLG Workshop, pages 33–42, Schloss Dagstuhl, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Power</author>
<author>D Scott</author>
</authors>
<title>Multilingual authoring using feedback texts.</title>
<date>1998</date>
<booktitle>In Proceedings of the 17th International Conference on Computational Linguistics and 36th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>1053--1059</pages>
<location>Montreal, Canada.</location>
<contexts>
<context position="941" citStr="Power and Scott, 1998" startWordPosition="132" endWordPosition="135">lications have addressed relatively simple tasks requiring a very limited range of nominal and clause patterns. We show that by adding a further editing operation called reconfiguration, the technology can achieve a far wider coverage more in line with other general-purpose generators. The extension will be included in a Java-based library package for producing Wysiwym applications. 1 Introduction Wysiwym (What You See Is What You Meant) is a user-interface technology through which a domain expert can formally encode knowledge by structured editing of an automatically generated feedback text (Power and Scott, 1998). The technology has hitherto addressed two practical contexts: the automatic production of multilingual technical documentation, and the formulation of queries to a database or expert system. In the first case, Wysiwym editing encodes the desired content of the document in an interlingua, from which versions can be generated in mutliple languages; in the second case, it yields a query encoded in a formal query language such as SQL. The benefit is the same in either context: since editing is mediated through a presentation in natural language, there is no need for the user to be acquainted wit</context>
</contexts>
<marker>Power, Scott, 1998</marker>
<rawString>R. Power and D. Scott. 1998. Multilingual authoring using feedback texts. In Proceedings of the 17th International Conference on Computational Linguistics and 36th Annual Meeting of the Association for Computational Linguistics, pages 1053–1059, Montreal, Canada.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>