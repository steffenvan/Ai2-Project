<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.124147">
<title confidence="0.983158">
Speech-Enabled Hybrid Multilingual Translation for Mobile Devices
</title>
<author confidence="0.984087">
Krasimir Angelov Bj¨orn Bringert Aarne Ranta
</author>
<affiliation confidence="0.991379">
University of Gothenburg Google Inc University of Gothenburg
</affiliation>
<email confidence="0.978727">
krasimir@chalmers.se bringert@google.com aarne@chalmers.se
</email>
<sectionHeader confidence="0.993474" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999841105263158">
This paper presents an architecture and a
prototype for speech-to-speech translation
on Android devices, based on GF (Gram-
matical Framework). From the user’s
point of view, the advantage is that the
system works off-line and yet has a lean
size; it also gives, as a bonus, gram-
matical information useful for language
learners. From the developer’s point of
view, the advantage is the open architec-
ture that permits the customization of the
system to new languages and for special
purposes. Thus the architecture can be
used for controlled-language-like transla-
tors that deliver very high quality, which
is the traditional strength of GF. However,
this paper focuses on a general-purpose
system that allows arbitrary input. It cov-
ers eight languages.
</bodyText>
<sectionHeader confidence="0.998938" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99757575">
Many popular applications (apps) on mobile
devices are about language. They range
from general-purpose translators to tourist phrase
books, dictionaries, and language learning pro-
grams. Many of the apps are commercial and
based on proprietary resources and software. The
mobile APIs (both Android and iOS) make it easy
to build apps, and this provides an excellent way to
exploit and demonstrate computational linguistics
research, perhaps not used as much as it could.
GF (Grammatical Framework, (Ranta, 2011)) is
a grammar formalism designed for building multi-
lingual grammars and interfacing them with other
software systems. Both multilinguality and inter-
facing are based on the use of an abstract syntax,
a tree structure that captures the essence of syntax
and semantics in a language-neutral way. Transla-
tion in GF is organized as parsing the source lan-
guage input into an abstract syntax tree and then
linearizing the tree into the target language. Here
is an example of a simple question, as modelled by
an abstract syntax tree and linearized to four lan-
guages, which use different syntactic structures to
express the same content:
</bodyText>
<figure confidence="0.4135924">
Query (What Age (Name ”Madonna”))
English: How old is Madonna?
Finnish: Kuinka vanha Madonna on?
French: Quel ˆage a Madonna?
Italian: Quanti anni ha Madonna?
</figure>
<bodyText confidence="0.999958290322581">
In recent years much focus in GF has been
put on cloud applications (Ranta et al., 2010) and
on mobile apps, for both Android (D´etrez and
Enache, 2010) and iOS (Djupfeldt, 2013). They
all implement text-based phrasebooks, whereas
Alum¨ae and Kaljurand (2012) have built a speech-
enabled question-answering system for Estonian.
An earlier speech translation system in GF is pre-
sented in Bringert (2008).
All embedded GF systems are based on a
standardized run-time format of GF, called PGF
(Portable Grammar Format; Angelov et al. 2009,
Angelov 2011). PGF is a simple “machine lan-
guage”, to which the much richer GF source lan-
guage is compiled by the GF grammar compiler.
PGF being simple, it is relatively straightforward
to write interpreters that perform parsing and lin-
earizations with PGF grammars. The first mobile
implementations were explicitly designed to work
on small devices with limited resources. Thus they
work fine for small grammars (with up to hun-
dreds of rules and lexical entries per language), but
they don’t scale up well into open-domain gram-
mars requiring a lexicon size of tens of thousands
of lemmas. Moreover, they don’t support out-of-
grammar input, and have no means of choosing
between alternative parse results, which in a large
grammar can easily amount to thousands of trees.
A new, more efficient and robust run-time sys-
tem for PGF was later written in C (Angelov,
2011). Its performance is competitive with the
</bodyText>
<page confidence="0.993055">
41
</page>
<note confidence="0.774126">
Proceedings of the Demonstrations at the 14th Conference of the European Chapter of the Association for Computational Linguistics, pages 41–44,
Gothenburg, Sweden, April 26-30 2014. c�2014 Association for Computational Linguistics
</note>
<bodyText confidence="0.999985833333333">
state of the art in grammar-based parsing (Angelov
and Ljungl¨of, 2014). This system uses statisti-
cal disambiguation and supports large-scale gram-
mars, such as an English grammar covering most
of the Penn Treebank. In addition, it is lean
enough to be embedded as an Android application
even with full-scale grammars, running even on
devices as old as the Nexus One from early 2010.
Small grammars limited to natural language
fragments, such as a phrasebook, are usable when
equipped with predictive parsing that can suggest
the next words in context. However, there is no
natural device for word suggestions with speech
input. The system must then require the user to
learn the input language; alternatively, it can be
reduced to simple keyword spotting. This can
be useful in information retrieval applications, but
hardly in translation. Any useful speech-enabled
translator must have wide coverage, and it cannot
be restricted to just translating keywords.
In this paper, we show a mobile system that
has a wide coverage and translates both text and
speech. The system is modular and could be eas-
ily adapted to traditional GF applications as well:
since the PGF format is the same, one can combine
any grammar with any run-time PGF interpreter.
The rest of the paper is organized as follows:
Section 2 describes the system’s functionalities
from the user’s point of view. Section 3 explains
the technology from the developer’s point of view.
Section 4 presents some preliminary results on the
usability of the system, and discusses some ways
of improving it. Section 5 concludes.
A proper quantitative evaluation of the transla-
tion quality has to wait till another occasion, and
will be more properly done in a context that ad-
dresses hybrid GF-based translation as a research
topic. Early attempts in this area have not yet con-
verged into a stable methodology, but we believe
that setting translation in the context of a practical
use case, as here, can help identify what issues to
focus on.
</bodyText>
<sectionHeader confidence="0.982241" genericHeader="introduction">
2 Functionalities
</sectionHeader>
<bodyText confidence="0.999954">
The app starts with the last-used language pair pre-
selected for input and output. It waits for speech
input, which is invoked by touching the micro-
phone icon. Once the input is finished, it appears
in text on the left side of the screen. Its translation
appears below it, on the right, and is also rendered
as speech (Figure 1 (a)).
</bodyText>
<figure confidence="0.991469">
(a) (b)
</figure>
<figureCaption confidence="0.996833">
Figure 1: Translation between various languages
with (a) speech (b) text input.
</figureCaption>
<bodyText confidence="0.999743972222222">
The source and target languages are selected by
the two drop-down lists on the top of the screen.
The icon with two arrows to the right of the lan-
guage selectors allows the two languages to be
swapped quickly.
The speech recognition and text-to-speech
(TTS) is done using public Android APIs. On
most devices, these make use of Google’s speech
recognizer and synthesizer, which are available in
both online and offline versions. The offline en-
gines tend to have a reduced choice of languages
and reduced quality compared to the online en-
gines, but don’t require an internet connection.
Alternatively, the user can select the keyboard
mode. The microphone icon is then changed to a
keyboard icon, which opens a software keyboard
and shows a text field for entering a new phrase.
Once the phrase is translated, it is shown on the
screen but also sent to TTS (Figure 1 (b)).
If the input consists of a single lexical unit,
the user can open a dictionary description for the
word. The resulting screen shows the base form
of the word, followed by a list of possible transla-
tions. The target language is shown on the top of
the screen and it can be changed to see the transla-
tions in the other languages (Figure 2 (a)). Touch-
ing one of the translations opens a full-form in-
flection table together with other grammatical in-
formation about the word, such as gender and verb
valency (Figure 2 (b)).
Finally, the translator also works as an input
mode for other apps such as SMS. It provides a
soft keyboard, which is similar to the standard An-
droid keyboard, except that it has two more keys
allowing the entered phrase to be translated in-
place from inside any other application.
</bodyText>
<page confidence="0.991282">
42
</page>
<figure confidence="0.998732">
(a) (b)
</figure>
<figureCaption confidence="0.920219">
Figure 2: (a) Results of dictionary lookup. (b) Va-
lency and the inflection table for a Bulgarian verb.
</figureCaption>
<sectionHeader confidence="0.999554" genericHeader="method">
3 Technology
</sectionHeader>
<subsectionHeader confidence="0.999211">
3.1 Run-time processing
</subsectionHeader>
<bodyText confidence="0.999925294117647">
The core of the system is the C runtime for PGF
(Angelov, 2011). The runtime is compiled to na-
tive code with the Android NDK and is called via
foreign function interface from the user interface,
which is implemented in Java.
The main challenge in using the runtime on mo-
bile devices is that even the latest models are still
several times slower that a modern laptop. For in-
stance, just loading the grammars for English and
Bulgarian, on a mobile device initially took about
28 seconds, while the same task is a negligible
operation on a normal computer. We spent con-
siderable time on optimizing the grammar loader
and the translator in general. Now the same gram-
mar, when loaded sequentially, takes only about
5-6 seconds. Furthermore, we made the grammar
loader parallel, i.e. it loads each language in par-
allel. The user interface runs in yet another thread,
so while the grammar is loading, the user can al-
ready start typing or uttering a sentence. In addi-
tion, we made it possible to load only those lan-
guages that are actually used, i.e. only two at a
time instead of all eight at once.
Parsing is a challenge in itself. As the grammars
grow bigger, there tends to be more and more need
for disambiguation. This is performed by a statis-
tical model, where each abstract syntax tree node
has weight. We used the method of Angelov and
Ljungl¨of (2014) to find the best tree.
Moreover, since any sound grammar is likely to
fail on some input, there is need for robustness.
This has been solved by chunking the input into
maximal parsable bits. As a result, the translations
are not always grammatically correct, because de-
</bodyText>
<table confidence="0.99737225">
Bulgarian 26664 French 19570
Chinese 17050 German 9992
English 65009 Hindi 33841
Finnish 57036 Swedish 24550
</table>
<tableCaption confidence="0.999434">
Table 1: Lexical coverage (lemmas)
</tableCaption>
<bodyText confidence="0.998382">
pendencies between chunks, such as agreement,
get lost. This kind of errors are familiar to anyone
who has used a statistical system such as Google
translate. In the GF system it is easy to avoid them,
provided the parse is complete.
</bodyText>
<subsectionHeader confidence="0.999547">
3.2 The language component
</subsectionHeader>
<bodyText confidence="0.999994925925926">
The language-specific component of the app is the
PGF grammar, which contains both the grammars
proper and the probabilistic model of the abstract
syntax. The app can be adaptad to a different PGF
grammar by changing a few lines of the source
code. Hence any grammar written in GF is readily
usable as the language component of an app. But
here we focus on the large-scale grammar meant
for robust translation.
The core of the grammar is the GF Resource
Grammar Library (Ranta, 2009), which currently
covers 29 languages. Of these, 8 have been ex-
tended with more syntax rules (about 20% in ad-
dition to the standard library) and a larger lexi-
con. Table 1 shows the list of languages together
with the size of the lexicon for each of them. The
abstract syntax is based on English lemmas and
some split word senses of them. The other lan-
guages, having fewer words than English, are thus
incomplete. Unknown words are rendered by ei-
ther showing them in English (if included in the
English lexicon) or just returning them verbatim
(typical for named entities).
The lexicon has been bootstrapped from various
freely available sources, such as linked WordNets
and the Wiktionary. Parts of the lexicon have been
checked or completely written manually.
</bodyText>
<sectionHeader confidence="0.970141" genericHeader="method">
4 First results
</sectionHeader>
<bodyText confidence="0.999959375">
The most striking advantage of the translation app
is its lean size: currently just 18Mb for the whole
set of 8 languages, allowing translation for 56
language pairs. This can be compared with the
size of about 200Mb for just one language pair
in Google’s translation app used off-line. The
Apertium off-line app is between these two, using
around 2MB per language pair.
</bodyText>
<page confidence="0.999484">
43
</page>
<bodyText confidence="0.999970717948718">
The speed is still an issue. While the app
now loads smoothly on modern hardware (such
as Nexus 5 phones), translation is usually much
slower than in Google and Apertium apps. The
speed depends heavily on the complexity of the
source language, with Finnish and French the
worst ones, and on sentence length. Only with
short sentences (under ten words) from Bulgarian,
Chinese, English, and Swedish, does the translator
deliver satisfactory speed. On the other hand, long
sentences entered via speech are likely to con-
tain speech recognition errors, which makes their
translation pointless anyway.
Translating single words is based on a simpler
algorithm (dictionary lookup) and is therefore im-
mediate; together with the grammatical informa-
tion displayed, this makes single word translation
into the most mature feature of the app so far.
The translation quality and coverage are rea-
sonable in phrasebook-like short and simple sen-
tences. The app has exploited some idiomatic con-
structions of the earlier GF phrasebook (D´etrez
and Enache, 2010), so that it can correctly switch
the syntactic structure and translate e.g. how old
are you to French as quel ˆage as-tu. In many other
cases, the results are unidiomatic word-to-word
translations but still grammatical. For instance,
hur mycket ¨ar klockan, which should give what is
the time, returns how mighty is the bell. Such short
idioms are typically correct in Google’s translation
app, and collecting them into the GF resources will
be an important future task.
On the plus side, grammar-based translation is
more predictable than statistical. Thus (currently)
when using Google translate from Swedish to En-
glish, both min far ¨ar svensk and its negation min
far ¨ar inte svensk come out as the positive sen-
tence my father is Swedish. With grammar-based
translation, such semantic errors can be avoided.
</bodyText>
<sectionHeader confidence="0.998954" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999971157894737">
We have presented a platform for mobile transla-
tion apps based on GF grammars, statistical dis-
ambiguation, and chunking-based robustness, en-
hanced by Android’s off-the-shelf speech input
and output. The platform is demonstrated by a
system that translates fairly open text between 8
languages, with reasonable performance for short
sentences but slow parsing for longer ones, with
moreover lower quality due to more parse errors.
The processing modules, user interface, and the
language resources are available as open source
software and thereby usable for the community
for building other systems with similar function-
alities. As the app is a front end to a grammati-
cal language resource, it can also be used for other
language-aware tasks such as learning apps; this is
illustrated in the demo app by the display of inflec-
tion tables. The app and its sources are available
via http://www.grammaticalframework.org.
</bodyText>
<sectionHeader confidence="0.998682" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.997686642857143">
Tanel Alum¨ae and Kaarel Kaljurand. 2012. Open and
extendable speech recognition application architec-
ture for mobile environments. The Third Interna-
tional Workshop on Spoken Languages Technologies
for Under-resourced Languages (SLTU 2012), Cape
Town, South Africa.
Krasimir Angelov and Peter Ljungl¨of. 2014. Fast
statistical parsing with parallel multiple context-free
grammars. In European Chapter of the Association
for Computational Linguistics, Gothenburg.
Krasimir Angelov, Bj¨orn Bringert, and Aarne Ranta.
2009. PGF: A Portable Run-Time Format for Type-
Theoretical Grammars. Journal of Logic, Language
and Information, 19(2), pp. 201–228.
Krasimir Angelov. 2011. The Mechanics of the Gram-
matical Framework. Ph.D. thesis, Chalmers Univer-
sity of Technology.
Bj¨orn Bringert. 2008. Speech translation with Gram-
matical Framework. In Coling 2008: Proceedings of
the workshop on Speech Processing for Safety Crit-
ical Translation and Pervasive Applications, pages
5–8, Manchester, UK, August. Coling 2008 Orga-
nizing Committee.
Gr´egoire D´etrez and Ramona Enache. 2010. A frame-
work for multilingual applications on the android
platform. In Swedish Language Technology Confer-
ence.
Emil Djupfeldt. 2013. Grammatical framework on the
iphone using a C++ PGF parser. Technical report,
Chalmers Univerity of Technology.
Aarne Ranta, Krasimir Angelov, and Thomas Hallgren.
2010. Tools for multilingual grammar-based trans-
lation on the web. In Proceedings of the ACL 2010
System Demonstrations, ACLDemos ’10, pages 66–
71, Stroudsburg, PA, USA. Association for Compu-
tational Linguistics.
Aarne Ranta. 2009. The GF resource grammar library.
Linguistic Issues in Language Technology.
Aarne Ranta. 2011. Grammatical Framework: Pro-
gramming with Multilingual Grammars. CSLI Pub-
lications, Stanford. ISBN-10: 1-57586-626-9 (Pa-
per), 1-57586-627-7 (Cloth).
</reference>
<page confidence="0.999294">
44
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.563796">
<title confidence="0.999621">Speech-Enabled Hybrid Multilingual Translation for Mobile Devices</title>
<author confidence="0.992468">Krasimir Angelov Bj¨orn Bringert Aarne Ranta</author>
<affiliation confidence="0.994383">University of Gothenburg Google Inc University of</affiliation>
<abstract confidence="0.978996761904762">krasimir@chalmers.se bringert@google.com aarne@chalmers.se Abstract This paper presents an architecture and a prototype for speech-to-speech translation on Android devices, based on GF (Grammatical Framework). From the user’s point of view, the advantage is that the system works off-line and yet has a lean size; it also gives, as a bonus, grammatical information useful for language learners. From the developer’s point of view, the advantage is the open architecture that permits the customization of the system to new languages and for special purposes. Thus the architecture can be used for controlled-language-like translators that deliver very high quality, which is the traditional strength of GF. However, this paper focuses on a general-purpose system that allows arbitrary input. It covers eight languages.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Tanel Alum¨ae</author>
<author>Kaarel Kaljurand</author>
</authors>
<title>Open and extendable speech recognition application architecture for mobile environments.</title>
<date>2012</date>
<booktitle>The Third International Workshop on Spoken Languages Technologies for Under-resourced Languages (SLTU 2012),</booktitle>
<location>Cape Town, South Africa.</location>
<marker>Alum¨ae, Kaljurand, 2012</marker>
<rawString>Tanel Alum¨ae and Kaarel Kaljurand. 2012. Open and extendable speech recognition application architecture for mobile environments. The Third International Workshop on Spoken Languages Technologies for Under-resourced Languages (SLTU 2012), Cape Town, South Africa.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Krasimir Angelov</author>
<author>Peter Ljungl¨of</author>
</authors>
<title>Fast statistical parsing with parallel multiple context-free grammars.</title>
<date>2014</date>
<booktitle>In European Chapter of the Association for Computational Linguistics,</booktitle>
<location>Gothenburg.</location>
<marker>Angelov, Ljungl¨of, 2014</marker>
<rawString>Krasimir Angelov and Peter Ljungl¨of. 2014. Fast statistical parsing with parallel multiple context-free grammars. In European Chapter of the Association for Computational Linguistics, Gothenburg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Krasimir Angelov</author>
<author>Bj¨orn Bringert</author>
<author>Aarne Ranta</author>
</authors>
<title>PGF: A Portable Run-Time Format for TypeTheoretical Grammars.</title>
<date>2009</date>
<journal>Journal of Logic, Language and Information,</journal>
<volume>19</volume>
<issue>2</issue>
<pages>201--228</pages>
<contexts>
<context position="2839" citStr="Angelov et al. 2009" startWordPosition="434" endWordPosition="437">inka vanha Madonna on? French: Quel ˆage a Madonna? Italian: Quanti anni ha Madonna? In recent years much focus in GF has been put on cloud applications (Ranta et al., 2010) and on mobile apps, for both Android (D´etrez and Enache, 2010) and iOS (Djupfeldt, 2013). They all implement text-based phrasebooks, whereas Alum¨ae and Kaljurand (2012) have built a speechenabled question-answering system for Estonian. An earlier speech translation system in GF is presented in Bringert (2008). All embedded GF systems are based on a standardized run-time format of GF, called PGF (Portable Grammar Format; Angelov et al. 2009, Angelov 2011). PGF is a simple “machine language”, to which the much richer GF source language is compiled by the GF grammar compiler. PGF being simple, it is relatively straightforward to write interpreters that perform parsing and linearizations with PGF grammars. The first mobile implementations were explicitly designed to work on small devices with limited resources. Thus they work fine for small grammars (with up to hundreds of rules and lexical entries per language), but they don’t scale up well into open-domain grammars requiring a lexicon size of tens of thousands of lemmas. Moreover</context>
</contexts>
<marker>Angelov, Bringert, Ranta, 2009</marker>
<rawString>Krasimir Angelov, Bj¨orn Bringert, and Aarne Ranta. 2009. PGF: A Portable Run-Time Format for TypeTheoretical Grammars. Journal of Logic, Language and Information, 19(2), pp. 201–228.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Krasimir Angelov</author>
</authors>
<title>The Mechanics of the Grammatical Framework.</title>
<date>2011</date>
<tech>Ph.D. thesis,</tech>
<institution>Chalmers University of Technology.</institution>
<contexts>
<context position="2854" citStr="Angelov 2011" startWordPosition="438" endWordPosition="439">? French: Quel ˆage a Madonna? Italian: Quanti anni ha Madonna? In recent years much focus in GF has been put on cloud applications (Ranta et al., 2010) and on mobile apps, for both Android (D´etrez and Enache, 2010) and iOS (Djupfeldt, 2013). They all implement text-based phrasebooks, whereas Alum¨ae and Kaljurand (2012) have built a speechenabled question-answering system for Estonian. An earlier speech translation system in GF is presented in Bringert (2008). All embedded GF systems are based on a standardized run-time format of GF, called PGF (Portable Grammar Format; Angelov et al. 2009, Angelov 2011). PGF is a simple “machine language”, to which the much richer GF source language is compiled by the GF grammar compiler. PGF being simple, it is relatively straightforward to write interpreters that perform parsing and linearizations with PGF grammars. The first mobile implementations were explicitly designed to work on small devices with limited resources. Thus they work fine for small grammars (with up to hundreds of rules and lexical entries per language), but they don’t scale up well into open-domain grammars requiring a lexicon size of tens of thousands of lemmas. Moreover, they don’t su</context>
<context position="8305" citStr="Angelov, 2011" startWordPosition="1359" endWordPosition="1360">tion table together with other grammatical information about the word, such as gender and verb valency (Figure 2 (b)). Finally, the translator also works as an input mode for other apps such as SMS. It provides a soft keyboard, which is similar to the standard Android keyboard, except that it has two more keys allowing the entered phrase to be translated inplace from inside any other application. 42 (a) (b) Figure 2: (a) Results of dictionary lookup. (b) Valency and the inflection table for a Bulgarian verb. 3 Technology 3.1 Run-time processing The core of the system is the C runtime for PGF (Angelov, 2011). The runtime is compiled to native code with the Android NDK and is called via foreign function interface from the user interface, which is implemented in Java. The main challenge in using the runtime on mobile devices is that even the latest models are still several times slower that a modern laptop. For instance, just loading the grammars for English and Bulgarian, on a mobile device initially took about 28 seconds, while the same task is a negligible operation on a normal computer. We spent considerable time on optimizing the grammar loader and the translator in general. Now the same gramm</context>
</contexts>
<marker>Angelov, 2011</marker>
<rawString>Krasimir Angelov. 2011. The Mechanics of the Grammatical Framework. Ph.D. thesis, Chalmers University of Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bj¨orn Bringert</author>
</authors>
<title>Speech translation with Grammatical Framework. In Coling</title>
<date>2008</date>
<journal>Organizing Committee.</journal>
<booktitle>Proceedings of the workshop on Speech Processing for Safety Critical Translation and Pervasive Applications,</booktitle>
<pages>5--8</pages>
<location>Manchester, UK,</location>
<contexts>
<context position="2706" citStr="Bringert (2008)" startWordPosition="414" endWordPosition="415">rent syntactic structures to express the same content: Query (What Age (Name ”Madonna”)) English: How old is Madonna? Finnish: Kuinka vanha Madonna on? French: Quel ˆage a Madonna? Italian: Quanti anni ha Madonna? In recent years much focus in GF has been put on cloud applications (Ranta et al., 2010) and on mobile apps, for both Android (D´etrez and Enache, 2010) and iOS (Djupfeldt, 2013). They all implement text-based phrasebooks, whereas Alum¨ae and Kaljurand (2012) have built a speechenabled question-answering system for Estonian. An earlier speech translation system in GF is presented in Bringert (2008). All embedded GF systems are based on a standardized run-time format of GF, called PGF (Portable Grammar Format; Angelov et al. 2009, Angelov 2011). PGF is a simple “machine language”, to which the much richer GF source language is compiled by the GF grammar compiler. PGF being simple, it is relatively straightforward to write interpreters that perform parsing and linearizations with PGF grammars. The first mobile implementations were explicitly designed to work on small devices with limited resources. Thus they work fine for small grammars (with up to hundreds of rules and lexical entries pe</context>
</contexts>
<marker>Bringert, 2008</marker>
<rawString>Bj¨orn Bringert. 2008. Speech translation with Grammatical Framework. In Coling 2008: Proceedings of the workshop on Speech Processing for Safety Critical Translation and Pervasive Applications, pages 5–8, Manchester, UK, August. Coling 2008 Organizing Committee.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gr´egoire D´etrez</author>
<author>Ramona Enache</author>
</authors>
<title>A framework for multilingual applications on the android platform.</title>
<date>2010</date>
<booktitle>In Swedish Language Technology Conference.</booktitle>
<marker>D´etrez, Enache, 2010</marker>
<rawString>Gr´egoire D´etrez and Ramona Enache. 2010. A framework for multilingual applications on the android platform. In Swedish Language Technology Conference.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emil Djupfeldt</author>
</authors>
<title>Grammatical framework on the iphone using a C++ PGF parser.</title>
<date>2013</date>
<tech>Technical report,</tech>
<institution>Chalmers Univerity of Technology.</institution>
<contexts>
<context position="2483" citStr="Djupfeldt, 2013" startWordPosition="382" endWordPosition="383">age input into an abstract syntax tree and then linearizing the tree into the target language. Here is an example of a simple question, as modelled by an abstract syntax tree and linearized to four languages, which use different syntactic structures to express the same content: Query (What Age (Name ”Madonna”)) English: How old is Madonna? Finnish: Kuinka vanha Madonna on? French: Quel ˆage a Madonna? Italian: Quanti anni ha Madonna? In recent years much focus in GF has been put on cloud applications (Ranta et al., 2010) and on mobile apps, for both Android (D´etrez and Enache, 2010) and iOS (Djupfeldt, 2013). They all implement text-based phrasebooks, whereas Alum¨ae and Kaljurand (2012) have built a speechenabled question-answering system for Estonian. An earlier speech translation system in GF is presented in Bringert (2008). All embedded GF systems are based on a standardized run-time format of GF, called PGF (Portable Grammar Format; Angelov et al. 2009, Angelov 2011). PGF is a simple “machine language”, to which the much richer GF source language is compiled by the GF grammar compiler. PGF being simple, it is relatively straightforward to write interpreters that perform parsing and lineariza</context>
</contexts>
<marker>Djupfeldt, 2013</marker>
<rawString>Emil Djupfeldt. 2013. Grammatical framework on the iphone using a C++ PGF parser. Technical report, Chalmers Univerity of Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aarne Ranta</author>
<author>Krasimir Angelov</author>
<author>Thomas Hallgren</author>
</authors>
<title>Tools for multilingual grammar-based translation on the web.</title>
<date>2010</date>
<booktitle>In Proceedings of the ACL 2010 System Demonstrations, ACLDemos ’10,</booktitle>
<pages>66--71</pages>
<publisher>Association</publisher>
<institution>for Computational Linguistics.</institution>
<location>Stroudsburg, PA, USA.</location>
<contexts>
<context position="2393" citStr="Ranta et al., 2010" startWordPosition="365" endWordPosition="368">mantics in a language-neutral way. Translation in GF is organized as parsing the source language input into an abstract syntax tree and then linearizing the tree into the target language. Here is an example of a simple question, as modelled by an abstract syntax tree and linearized to four languages, which use different syntactic structures to express the same content: Query (What Age (Name ”Madonna”)) English: How old is Madonna? Finnish: Kuinka vanha Madonna on? French: Quel ˆage a Madonna? Italian: Quanti anni ha Madonna? In recent years much focus in GF has been put on cloud applications (Ranta et al., 2010) and on mobile apps, for both Android (D´etrez and Enache, 2010) and iOS (Djupfeldt, 2013). They all implement text-based phrasebooks, whereas Alum¨ae and Kaljurand (2012) have built a speechenabled question-answering system for Estonian. An earlier speech translation system in GF is presented in Bringert (2008). All embedded GF systems are based on a standardized run-time format of GF, called PGF (Portable Grammar Format; Angelov et al. 2009, Angelov 2011). PGF is a simple “machine language”, to which the much richer GF source language is compiled by the GF grammar compiler. PGF being simple,</context>
</contexts>
<marker>Ranta, Angelov, Hallgren, 2010</marker>
<rawString>Aarne Ranta, Krasimir Angelov, and Thomas Hallgren. 2010. Tools for multilingual grammar-based translation on the web. In Proceedings of the ACL 2010 System Demonstrations, ACLDemos ’10, pages 66– 71, Stroudsburg, PA, USA. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aarne Ranta</author>
</authors>
<title>The GF resource grammar library. Linguistic Issues in Language Technology.</title>
<date>2009</date>
<contexts>
<context position="10753" citStr="Ranta, 2009" startWordPosition="1784" endWordPosition="1785"> such as Google translate. In the GF system it is easy to avoid them, provided the parse is complete. 3.2 The language component The language-specific component of the app is the PGF grammar, which contains both the grammars proper and the probabilistic model of the abstract syntax. The app can be adaptad to a different PGF grammar by changing a few lines of the source code. Hence any grammar written in GF is readily usable as the language component of an app. But here we focus on the large-scale grammar meant for robust translation. The core of the grammar is the GF Resource Grammar Library (Ranta, 2009), which currently covers 29 languages. Of these, 8 have been extended with more syntax rules (about 20% in addition to the standard library) and a larger lexicon. Table 1 shows the list of languages together with the size of the lexicon for each of them. The abstract syntax is based on English lemmas and some split word senses of them. The other languages, having fewer words than English, are thus incomplete. Unknown words are rendered by either showing them in English (if included in the English lexicon) or just returning them verbatim (typical for named entities). The lexicon has been bootst</context>
</contexts>
<marker>Ranta, 2009</marker>
<rawString>Aarne Ranta. 2009. The GF resource grammar library. Linguistic Issues in Language Technology.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aarne Ranta</author>
</authors>
<title>Grammatical Framework: Programming with Multilingual Grammars.</title>
<date>2011</date>
<volume>10</volume>
<pages>1--57586</pages>
<publisher>CSLI Publications,</publisher>
<location>Stanford.</location>
<contexts>
<context position="1515" citStr="Ranta, 2011" startWordPosition="221" endWordPosition="222">es on a general-purpose system that allows arbitrary input. It covers eight languages. 1 Introduction Many popular applications (apps) on mobile devices are about language. They range from general-purpose translators to tourist phrase books, dictionaries, and language learning programs. Many of the apps are commercial and based on proprietary resources and software. The mobile APIs (both Android and iOS) make it easy to build apps, and this provides an excellent way to exploit and demonstrate computational linguistics research, perhaps not used as much as it could. GF (Grammatical Framework, (Ranta, 2011)) is a grammar formalism designed for building multilingual grammars and interfacing them with other software systems. Both multilinguality and interfacing are based on the use of an abstract syntax, a tree structure that captures the essence of syntax and semantics in a language-neutral way. Translation in GF is organized as parsing the source language input into an abstract syntax tree and then linearizing the tree into the target language. Here is an example of a simple question, as modelled by an abstract syntax tree and linearized to four languages, which use different syntactic structure</context>
</contexts>
<marker>Ranta, 2011</marker>
<rawString>Aarne Ranta. 2011. Grammatical Framework: Programming with Multilingual Grammars. CSLI Publications, Stanford. ISBN-10: 1-57586-626-9 (Paper), 1-57586-627-7 (Cloth).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>