<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000073">
<bodyText confidence="0.960900075000001">
STRING-TREE CORRESPONDENCE GRAMMAR: A DECLARATIVE GRAMMAR FORMALISM FOR DEFINING
THE CORRESPONDENCE BETWEEN STRINGS OF TERMS AND TREE STRUCTURES
YUSOFF ZAHARIN
Groupe d&apos;Etudes pour la Traduction Automatique
B.P. n° 68
Universite de Grenoble
38402 SAINT-MARTIN-D&apos;HERES
FRANCE
ABSTRACT
The paper introduces a grammar formalism for
defining the set of sentences in a language, a set
of labeled trees (not the derivation trees of the
grammar) for the representation of the interpreta-
tion of the sentences, and the (possibly non-pro-
jective) correspondence between subtrees of each
tree and substrings of the related sentence. The
grammar formalism is motivated by the linguistic
approach (adopted at GETA) where a multilevel inter-
pretative structure is associated to a sentence. The
topology of the multilevel structure is &apos;meaning&apos;
motivated, and hence its substructures may not cor-
respond projectively to the substrings of the rela-
ted sentence.
Grammar formalisms have been developed for va-
rious purposes. Generative-Transformational Gram-
mars, General Phrase Structure Grammars, Lexical
Functional Grammar. etc. were designed to be expla-
natory models for human language performance, while
others like the Definite Clause Grammars were more
geared towards direct interpretability by machines.
In this paper, we introduce a declarative grammar
formalism for the task of establishing the relation
between on one hand a set of strings of terms and
on the other a set of structural representations -
a structural representation being in a form amena-
ble to processing (say for translation into another
language), where all and only the relevant contents
or &apos;meaning&apos; (in some sense adequate for the purpo-
se) of the related string are exhibited. The gram-
mar can also be interpreted to perform analysis
(given a string of terms, to produce a structural
representation capturing the &apos;meaning&apos; of the
string) or to perform generation (given a structu-
ral representation, to produce a string of terms
whose meaning is captured by the said structural
representation).
It must be emphasised here that the grammar
writer is at liberty (within certain constraints)to
design the structural representation for a given
string of terms (because its topology is indepen-
dent of the derivation tree of the grammar), as
well as the nature of the correspondence between
the two (for example, according to certain linguis-
tic criteria). The grammar formalism is only a tool
for expressing the structural representation, the
related string, and the correspondence.
The formalism is motivated by the linguistic
approach (adopted at GETA) where a multilevel inter-
pretative structure is associated to a sentence.
The multilevel structure is &apos;meaning&apos; motivated,
and hence its substructures may not correspond pro-
jectively to the substrings of the related sentence.
The characteristic of the linguistic approach is
the design of the multilevel structures,
while the grammar formalism is the tool (notation)
for expressing these multilevel structures, their
related sentences, and the nature of the correspon-
dence between the two. In this paper, we present
only the grammar formalism ; a discussion on the
linguistic approach can be found in [Vauquois 78]
and [Zaharin 87].
For this grammar formalism, a structural
representation is given in the form of a labeled
tree, and the relation between a string of terms
and a structural representation is defined as a
mapping between elements of the set of substrings
of the string and elements of the set of subtrees
of the tree : such a relation is called a string-
tree correspondence. An example of a string-tree
correspondence is given in fig. I.
</bodyText>
<figureCaption confidence="0.317519">
Fig.1 - A string-tree correspondence.
</figureCaption>
<bodyText confidence="0.991305615384615">
The example is taken from [Pullum 843 where he
called for a &apos;simple&apos; grammar which can analyse/
generate the non-context free sublanguage of the
African language Bambara given by :
L {_X o XIX in N* for some set of nouns N,
I N 1&gt;11
and at the same time the grammar must produce a
&apos;linguistically motivated&apos; structural representa-
tion for the corresponding string of words. For
instance, the noun phrase &amp;quot;dog catcher hunter o dog
catcher hunter&amp;quot; means &amp;quot;any dog catcher hunter&amp;quot; and
so the structural representation should describe
precisely that.
</bodyText>
<page confidence="0.950393">
160
</page>
<bodyText confidence="0.999804078651686">
In the string-tree correspondence in fig. 1,
there are three concepts involved : the TREE which
is a labeled tree taking the role of the structu-
ral representation, the STRING which is a string
of terms, and finally the correspondence which is
a mapping (given by the arrows defined
between substrings of STRING and subtrees of TREE
(a more formal notation using indices would be
less readable for demonstrational purposes). In
the TREE, a node is given by an identifier and a
label (eg. I:NP). To avoid a very messy diagram,
in fig. 1 we have omitted the other subcorrespon-
dence between substrings and subtrees, for example
between the whole TREE and the whole STRING (tri-
vial), between the subtree 4(5(6),7) and the two
occurrences of the substring &amp;quot;dog catcher&amp;quot; (non-
trivial), etc. We shall do the same in the rest
of this paper. (Then again, this is the string-
tree correspondence we wish to express for our
examples - recall the remark earlier saying that
the grammar writer is at liberty to define the na-
ture of the string-tree correspondence he or she
desires, and this is done in the rules, see later).
We also note that the nodes in the TREE are simply
concepts in the structural representation and thus
the interpretation is independent of any grammar
that defines the correspondence (in fact, we have
yet to speak of a grammar) : for instance, the TREE
in fig. I does not necessitate the presence of a
rule of the form &amp;quot;AP NP hunter -■ NP&amp;quot; to be in the
grammar.
A more complex string-tree correspondence is
given in fig. 2 where we choose to define a struc-
tural representation of a particular form for each
string in the language anbncn. Here, the case for
n=3 is given. The problem is akin to the &apos;respec-
tively&apos; problem, where for a sentence like &amp;quot;Peter,
Paul and Mary gave a book, a pen and a pencil to
Jane, Elisabeth and John respectively&amp;quot;, we wish to
associate a structural representation giving the
&apos;meaning&apos; &amp;quot;Peter gave a book to Jane, Paul gave a
pen to Elisabeth, and Mary gave a pencil to John&amp;quot;.
Fig. 2 - A non-projective strinfilree
correspondence for aflb c
At this Point, again we repeat our earlier
statement that the choice of such structural re-
presentations and the need for such string-tree
correspondence are not the topics of discussion in
this paper.
The aim of this paper is to introduce the tool, in
the form of a grammar formalism, which can define
such string-tree correspondence as well as beinter-
pretable for analysis and for generation between
strings of terms and structural representations.
The grammar formalism for such a purpose is
called the String-Tree Correspondence Grammar
(STCG). The STCG is a more formal version of the
Static Grammar developed by [Chappuy 83] [Vauquois
&amp; Chappuy 85]. The Static Grammar (shortly later
renamed the Structural Correspondence Specification
Grammar), was designed to be a declarative grammar
formalism for defining linguistic structures and
their correspondence with strings of utterances in
natural languages. It has been extensively used for
specification and documentation,as well as a(manual)
reference for writing the linguistic programs (ana-
lysers and generators) in the machine translation
system ARIANE-78 [Boitet-et-al 82]. Relatively lar-
ge scale Static Grammars have been written for
French in the French national machine translation
project [Boitet 86] translating French into English,
and for Malay in the Malaysian national project
[Tong 86] translating English to Malay ; the two
projects share a common Static Grammar for English
(naturally). The STCG derives its formal properties
from the Static Grammar, but with more formal defi-
nitions of the properties. In the passage from the
Static Grammar to the STCG, the form as well as
some other characteristics have undergone certain
changes, and hence the change to a more appropriate
name. The STCG first appeared in [Zaharin 86],
where the formal definitions of the grammar are
given (but under the name of the Tree Corresponden-
ce Grammar).
A STCG contains a set of correspondence rules,
each of which defines a correspondence between a
structural representation (or rather a set or fami-
ly of) and a string of terms (similarly a set or
family of). Each rule is of the form :
</bodyText>
<equation confidence="0.96952275">
Rule: R
oci • • • cx. — A
CORRESPONDENCE:
( CC, p, ) ( )
</equation>
<bodyText confidence="0.999652">
The simplest form of such a rule is when
are terms and $ is a tree. The rule then states
that the string of terms (11,...,0._ corresponds (-1
to the tree B, while the entry CORRESPONDENCE gives
the substring-subtree correspondence between the
terms al ..... an and the subtrees Ba,... ,S of B. An
example is given by rule Si below which defines the
&apos;string-tree correspondence in fig. 3.
</bodyText>
<equation confidence="0.9607328">
Rule : SI
•• • • I 1:S
(2:a)(3:b)(4:c) 2:a 3 b 4:c
CORRESPONDENCE :
(2-2), (3-3), (4-4)
</equation>
<page confidence="0.98188">
161
</page>
<figure confidence="0.913972285714286">
TREE : 1:S Fig.
STRING
2tia 3:b
: a 1
4:c
3 - Correspondence
defined by SI
</figure>
<bodyText confidence="0.997953862068965">
The alternative to the above is to give each
a. in terms of a tree (ie. without reference to any
rule), but then there is no guarantee that this
tree will correspond to some string of terms. Even
if it does, one cannot be certain that it would be
the string of terms one wishes to include in the
rule - after all, two entirely different strings of
terms may correspond to the same tree (a oaraohrase)
by means of two different rules.
Although in the example in fig. 3 above, the
leaves of the TREE are labeled and ordered exactly
as the terms in the STRING, this is not obligatory.
For example, it is indeed possible to change the
label of node 2 to something else, or to move the
node to the right of node 4, or even to exclude
the node altogether. In short, the string-tree
correspondence defined by a rule need not be
projective.
Such elementary rules al...an-8 (with
al,. .,an terms) can be generalised to a form where
each ai (i=1,..,n) represents a string of terms,
say A. Here, generalities can be captured if ai
specilies the name of a rule which defines astring-
tree correspondence AcTi (for some tree Ti given
in the said rule, but it is of little significance
here), in which case the interpretation of the
string-tree correspondence defined by ai..an-B is
taken to be Al..A -6 (here Al..A means the conca-
tenation of The Vrings The substring-
subtree correspondence will still be given by the
entry CORRESPONDENCE. Fig. 4 illustrates this.
We shall discard the alternative and adopt the
first approach.The generalised rule al,..an-B (with
each ai being the name of a rule) can be extended
further by letting ai be a list of rule names,
where this is interpreted as a choice for the
string-tree correspondence Ai-Ti to be referred to,
and hence the choice for the string of terms Ai
represented by ai. In such a situation, it mayalso
be possible that we wish the topology of the tree
to vary according to the choice of Ai, and this
variation to be in terms of the subtrees of the
tree T.. For these reasons, we specify each a. as
a pair (REFERENCE, STRUCTURE) where REFERENCElis
the said list of rule names and STRUCTURE is atree
schema containing variables, such that the struc-
ture represents the tree found on the right hand
side of the &amp;quot;-&amp;quot; in each rule referred to in the
list REFERENCE. This way, the tree B can be defi-
ned in terms of Ti by means of the variables (for
example those appearing simultaneously in both ai
and B). See the example later in fig. 5 for an
illustration.
..,Rn are rule names;
the correspondence by
Rule RA is interpreted
as Ti Tn
and hence
</bodyText>
<equation confidence="0.930984">
1:1-1 • • • 11.4, 14 A
</equation>
<bodyText confidence="0.998794666666667">
Rules RN! and RN2 below are examples
of STCG rules in the form discussed
above, where RN2 refers to RN1 and
itself. Variables in the entry STRUCTURE
are given in boxes, eg. , where each
variable can be instantiated to a linear
ordered sequence of trees. For a given
element (REFERENCE, STRUCTURE), the ins-
tantiations of the variables in STRUCTU-
RE can be obtained only by identifying
(an operation intuitively similar to the
standard notion of unification - again,
see later in fig. 5) the STRUCTURE with
the right hand side of a rule given in
the entry REFERENCE.
</bodyText>
<figure confidence="0.980268954545454">
Fig.4 - &apos;String-tree correspondence with reference to other rules
Rule: RN2
REFEranam- fIttil,RN2 ven)
STRUCTURE= 2:NP 1:NP
[13 EL-]
CORRESIKNOMENCE:
( 2 rv 2 )
ri C:1
1:NP
ro
2:NP H
[t]
( 1 &apos;NI Ci] )
Rule: RN1
N
REEESIZNCE.,
STR1R7. rSTRE
[j!)
1: noun
CORRESPONDENCE:
0:NP
1:noun
</figure>
<page confidence="0.983467">
162
</page>
<bodyText confidence="0.98282611627907">
As an immediate consequence to the above, an
STCG rule thus defines a correspondence between a
set of strings of terms on one hand and a set of
trees on the other (by means of a linear sequence
of sets of trees). The rule RN1 describes a corres-
pondence between a single term and atree
containing a node NP dominating a single leaf (for
example, it gives the respective structural repre-
sentations for &amp;quot;dog&amp;quot;, &amp;quot;catcher&amp;quot;, etc.). The rule
RN2 describes a correspondence between two or more
terms and a single tree - note the recursive
REFERENCE in the first element of RN2 (for example,
it gives the structural representation for &amp;quot;catcher
hunter&amp;quot; as well as for &amp;quot;dog catcher hunter&amp;quot;, see
later in fig. 5).
The entry STRUCTURE of an element may also
act as a constraint by making explicit certain
nodes in the STRUCTURE instead of just a node
dominating a forest (we have no examples for this
in this paper, but one can easily visualise the
idea). This means that the entry STRUCTURE of an
element ai = (REFERENCE, STRUCTURE) in a rule
al..an-8 is also a constraint on the trees in Ti,
and hence on the strings in Ai (as Ai and T. are
now sets), in a correspondence A.-Ti definea by a
rule referred to by ai in its entry REFERENCE.
Whenever it is made use of, such a constraint en-
sures that only certain subsets of Ti, and hence of
A., are referred to and used in the correspondence
described by al..an-B.
The string-tree correspondence in fig. 1 is
defined by rule RN3 below, which refers to rules
RN1 and RN2. We show how this is done in fig. 5.
Note that if two variables in a single rule have
the same label, then their instantiations must be
identical. The concept of derivation as well as the
derivation tree have been defined for the STCG
[Zaharin 861, but it would be too long to explain
them here. Instead, we shall use a diagram like the
one in fig. 5, which should be quite self-explana-
tory.
Rule: RN3
REP=
</bodyText>
<sectionHeader confidence="0.621449" genericHeader="abstract">
1: NP
</sectionHeader>
<bodyText confidence="0.906857538461538">
11RN1,RN2111 fir TRN1,RN2/1
STR= 1:NP 5:NP
CORRESPONDENCE:
( 1 1 ), ( 4=1 2 ), ( 5 eN, 1 )
ttl3
Going back to fig. 2 where the string-tree
correspondence for a3b3c3 is given, each substruc-
ture below a node S in the TREE corresponds to a
substring &amp;quot;abc&amp;quot;, but the terms in this substring
are distributed over the whole STRING. In general,
in a string-tree correspondence Al..A -8 defined
by a rule al..au-8, it is possible that we wish to
define a substring-subtree correspondence of
the form A. ..A. -8k , where A. ,..,A. are disjoint
-1
substrings of the string A ...A and Bk is a sub-
-1 -11
tree of 8, and that 8k cannot be expressed in terms
of the respective structural representations (if
any) of A. ,..,A. . Such a correspondence cannot be
handled by a rule of the form discussed so far be-
cause a structural representation (STRUCTURE) found
on the left hand side can correspond only to a unit
(connected) substring.
We can overcome this problem by allowing a rule
to define a subcorrespondence between a substructu-
re in the TREE (in the RHS) and a disjoint sub-
string in the STRING (in the LHS), where this sub-
correspondence is described in another rule (ie.
using a reference - SUBREFERENCE - for a substruc-
ture in the TREE, rather than uniquely for the
elements in the LHS). One also allows elements in
the LHS to be given in terms of variables which can
be instantiated to substrings. Rule S2 (after fig.
5) gives an example of such a rule where X,Y,Z are
variables.
The rule S2 is of the following general type.
(Recall that we wish to define a substring-subtree
correspondence of the form A. ...A.-8k , where
</bodyText>
<equation confidence="0.6945585">
gm
-1
</equation>
<bodyText confidence="0.93509675">
A. ,..,A. are disjoint substrings of the string
-11 -1m
A ..A and $k is a subtree of 8, and that $k cannot
-n
be expressed in terms of the respective structural
representations (if any) of A. ,..,A.). In the rule
- -1m
a..an-B, the elements a ..,an are to be as before
</bodyText>
<equation confidence="0.8405005">
1
1&apos;
</equation>
<bodyText confidence="0.9978570625">
except for those representing the substrings
A. ,..,A. which are to be left as unknowns,wTitten
Jm
say X. ,..,X. respectively. The correspondence
-1
-1m
A. ..A. -$k is to be written in the entry CORRES-
-1 -1m
PONDENCE as X. ..X. -8 and this is given a refe-
rence in an entry SUBREFERENCE as a means to define
the correspondence elsewhere in another rule. In
this SUBREFERENCE, if a rule a&apos;..a&apos;-8 is a possibi-
lity, the identification between the sequences
..X. and a&apos;..a&apos; must be given. The interpreta-
tion of the rule is that the SUBREFERENCE gives a
string-tree correspondence A&apos;..A1-8&apos;which precise-
</bodyText>
<sectionHeader confidence="0.416558" genericHeader="acknowledgments">
-1 -p
</sectionHeader>
<bodyText confidence="0.994205166666667">
ly defines the string-tree correspondence
A. ..A. ~8 ,where $k is identified with v and
A. ..A. is identified with A&apos;. .A&apos; with the
-1 -1m -1 -p
separation points being obtained from the predeter-
mined identification between X. ..X. and a&apos;. .a&apos;
mentioned above. -1 -1m p
A STCG containing the rules Si and S2 defines
the language anbncn, and associates a structural re-
presentation like the one in fig.2 to every string
in the language. Fig.6 illustrates how this grammar
defines the string-tree correspondence in fig.2.
</bodyText>
<page confidence="0.996318">
163
</page>
<figure confidence="0.994152567307692">
Fig.S - Rules R41,R12,RN3 to define the correspondence in fig.1
1. NP
Rule: RN3
Rule: RN2
ltNP
TREE:
Identical
REFERENCE
to give
Unknown in TREE .[E]
Unknown in STRING = A
ERENCE to RN1 to give
and A2&apos;■ catcher
156 anr1:■ dog
REPERVICElaN1 to give
•
( NP
agin RN2
in LES )
Rule:RN2&apos;
TREE:
STRING:
:NP
- &apos;-
and A = Al
STRING:
REFERENCE to
RN2 to give
and Al = Al&apos; 142,
alpin RN3
A2
NP in LES
REFERENCE to
RN1 to give
Etl. and A2 = hunter
TREE:
2:AP
1
3:any
STRING: A o A
( NP o NP
in LEIS )
Rule: RN1
1 NP
STRING: hunter
: RN1
TREE:
STRING:
l&apos;:NP
1
2&apos;sdog
dog
Rule: RN1&amp;quot; 1&amp;quot;:NP
TREE:
1
2&amp;quot; :catcher
STRING: catcher
164
Fig.6 - Rules Sl,S2 to define the correspondence in fig.2
1
REF=
sTR= .
2:a 3:b 4:c
CORRESPONDENCE:
( 2 9,, 2 ) ( 3 ,4 3 ), ( 4_•J4 ),
2:a 3 b 4:c 5:5
1
( X Y Z 5 )
141
- SUBREFERENCE(by):
5 Sl: X= 2&apos;, Y= 3, Z= 4&apos;
(2&apos;,3,4 in referred Si)
or
S2: X. 2&apos;X&apos;, Y= 3&apos;Y&apos;, Z= 4&apos;Z&apos;
in referred S2)
Rule: S.
11S
Unknown in STRING =
X, Y, Z
Unknown in tree
e-SUBREFERENCE for S
to S2 Ct3
to give :
and X = a X&apos;
Y = b Y&apos;
Z = c Z&apos;
in S2
SUBREFERENCE for S
to Si
to give :
and 3. = a
Y&apos; = b
Z&apos; = c
Rule: S2 1:S
2:a 3.b 4:c 5:S
STRING: aXbYcZ
( no REFERENCE in LHS )
Rule: S2&apos; l&apos;:S
2&apos;:a 3&apos;:b 4&apos;:c 5&apos;:S
STRING: a X&apos; b Y&apos; c Z&apos;
( no REFERENCE in LHS )
Rule: Si 1:S
2:a 3 b 4:c
STRING: a b c
</figure>
<page confidence="0.993619">
165
</page>
<bodyText confidence="0.993106647058823">
The informal discussion in this paper gives
the motivation and some idea of the formal defini-
tion of the String-Tree Correspondence Grammar.
The grammar stresses not only the fact that one can
express string-tree correspondence like the ones
we have discussed, but also that it can be done in
a &apos;natural&apos; way using the formalism - meaning the
structures and correspondence are explicit in the
rule, and not implicit and dependent on the combi-
nation of grammar rules applied (as in derivation
trees). The inclusion of the substring-subtree
correspondence is also another characteristic of
the grammar formalism. One also sees that the
grammar is declarative in nature, and thus it is
interpretable both for analysis and for generation
(for example, by interpreting the rules as tree
rewriting rules with variables).
In an effort to demonstrate the principal
properties of the formalism, the STCG presented in
this paper is in a simple form, ie. treating trees
with each node having a single label. In its gene-
ral form, the STCG deals with labels having
considerable internal structure (lists of features,
etc.). Furthermore, one can also express
constraints on the features in the nodes - on indi-
vidual nodes or between different nodes.
As mentioned, the concepts of direct derivation
(•&gt;) and derivation (=&gt;), as well as the derivation
tree are also defined for the STCG. (Note that the
rules with properties similar to the rule S2 entail
a definition of direct derivation which is more
complex than the classical definition). The set of
rules in a grammar forms a formal grammar, ie. it
defines a language, in fact two languages, one of
strings and the other of trees.
At the moment, there is no large applications
of the STCG, but as the STCG derives its formal
properties from the Static Grammar, it would be
quite a simple process to transfer applications in
the Static Grammar into STCG applications. Like the
Static Grammar, the STCG is basically a formalism
for specification, but given its formal nature, one
also aims for direct interpretability by a machine.
Though still incomplete, work has begun to build
such an interpreter [Zajac 86].
ACKNOWLEDGEMENTS
I would like to thank Christian Boitet who
had been a great help in the formulation of the
ideas presented here. My gratitude also to Hans
Karlgren and Eva Hajitova for their remarks and
criticisms on earlier versions of the paper.
</bodyText>
<sectionHeader confidence="0.914866" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.999362912280702">
[Boitet-et-al-82]
Ch. Boitet, P. Guillaume, M. Quezel-Ambrunaz
&amp;quot;Implementation and conversational environment
of ARIANE-78.4&amp;quot;.
Proceedings of COLING-82, Prague.
(Boitet 86]
Ch. Boitet
&amp;quot;The French National Project : technical orga-
nization and translation results of CALLIOPE-
AERO&amp;quot;.
IBM Conference on machine translation,
Copenhagen, August 1986.
[Chappuy 83]
S. Chappuy
&amp;quot;Formalisation de la description des niveaux
d&apos;interpretation des langues naturelles.
Etude menge en vue de l&apos;analyse et de la One-
ration au moyen de transducteurs&amp;quot;.
These Tame Cycle, Juillet 1983, INPG,Grenoble.
[Pullum 84]
G.K. Pullum
&amp;quot;Syntactic and semantic parsability&amp;quot;.
Proceedings of COLING-84, Stanford.
[Tong 86]
Tong L.C.
&amp;quot;English-Malay translation system : a labora-
tory prototype&amp;quot;.
Proceedings of COLING-86, Bonn.
[Vauquois 78]
B. Vauquois
&amp;quot;Description de la structure intermediaire&amp;quot;.
Communication presentge au Colloque de
Luxembourg, Avril 1978, GETA doc., Grenoble.
[Vauquois &amp; Chappuy 85]
B. Vauquois, S. Chappuy
&amp;quot;Static Grammars : a formalism for the des-
cription of linguistic models&amp;quot;.
Proceedings of the conference on theoretical
and methodological issues in machine transla-
tion of natural languages, COLGATE University,
New York, August 1985.
[Zaharin 86]
Zaharin Y.
&amp;quot;Strategies and heuristics in the analysis of
a natural language in machine translation&amp;quot;.
PhD thesis, Universiti Sains Malaysia, Penang,
March 1986. (Research conducted under the
GETA-USM cooperation - GETA doc., Grenoble).
[Zaharin 87]
Zaharin Y.
&amp;quot;The linguistic approach at GETA : asynopsis7
GETA document, January 1987, Grenoble.
[Zajac 86]
R. Zajac
&amp;quot;SCSL : a linguistic specification language
for MT&amp;quot;.
Proceedings of COLING-86, Bonn.
</reference>
<page confidence="0.998764">
166
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.7731675">STRING-TREE CORRESPONDENCE GRAMMAR: A DECLARATIVE GRAMMAR FORMALISM FOR DEFINING THE CORRESPONDENCE BETWEEN STRINGS OF TERMS AND TREE STRUCTURES YUSOFF ZAHARIN Groupe d&apos;Etudes pour la Traduction Automatique</title>
<pubnum confidence="0.245232">68</pubnum>
<affiliation confidence="0.935107">Universite de Grenoble</affiliation>
<address confidence="0.719927">38402 SAINT-MARTIN-D&apos;HERES FRANCE</address>
<abstract confidence="0.991420055944055">The paper introduces a grammar formalism for defining the set of sentences in a language, a set of labeled trees (not the derivation trees of the grammar) for the representation of the interpretation of the sentences, and the (possibly non-projective) correspondence between subtrees of each tree and substrings of the related sentence. The grammar formalism is motivated by the linguistic approach (adopted at GETA) where a multilevel interpretative structure is associated to a sentence. The topology of the multilevel structure is &apos;meaning&apos; motivated, and hence its substructures may not correspond projectively to the substrings of the related sentence. Grammar formalisms have been developed for various purposes. Generative-Transformational Grammars, General Phrase Structure Grammars, Lexical Functional Grammar. etc. were designed to be explanatory models for human language performance, while others like the Definite Clause Grammars were more geared towards direct interpretability by machines. In this paper, we introduce a declarative grammar formalism for the task of establishing the relation between on one hand a set of strings of terms and on the other a set of structural representations a structural representation being in a form amenable to processing (say for translation into another language), where all and only the relevant contents or &apos;meaning&apos; (in some sense adequate for the purpose) of the related string are exhibited. The grammar can also be interpreted to perform analysis (given a string of terms, to produce a structural representation capturing the &apos;meaning&apos; of the string) or to perform generation (given a structural representation, to produce a string of terms whose meaning is captured by the said structural representation). It must be emphasised here that the grammar writer is at liberty (within certain constraints)to design the structural representation for a given string of terms (because its topology is independent of the derivation tree of the grammar), as well as the nature of the correspondence between the two (for example, according to certain linguistic criteria). The grammar formalism is only a tool for expressing the structural representation, the related string, and the correspondence. The formalism is motivated by the linguistic approach (adopted at GETA) where a multilevel interpretative structure is associated to a sentence. The multilevel structure is &apos;meaning&apos; motivated, and hence its substructures may not correspond projectively to the substrings of the related sentence. The characteristic of the linguistic approach is the design of the multilevel structures, while the grammar formalism is the tool (notation) for expressing these multilevel structures, their related sentences, and the nature of the correspondence between the two. In this paper, we present only the grammar formalism ; a discussion on the linguistic approach can be found in [Vauquois 78] and [Zaharin 87]. For this grammar formalism, a structural representation is given in the form of a labeled tree, and the relation between a string of terms and a structural representation is defined as a mapping between elements of the set of substrings of the string and elements of the set of subtrees of the tree : such a relation is called a stringtree correspondence. An example of a string-tree correspondence is given in fig. I. correspondence. The example is taken from [Pullum 843 where he called for a &apos;simple&apos; grammar which can analyse/ generate the non-context free sublanguage of the African language Bambara given by : {_X o XIX in some set of nouns N, N and at the same time the grammar must produce a &apos;linguistically motivated&apos; structural representation for the corresponding string of words. For instance, the noun phrase &amp;quot;dog catcher hunter o dog catcher hunter&amp;quot; means &amp;quot;any dog catcher hunter&amp;quot; and so the structural representation should describe precisely that. 160 In the string-tree correspondence in fig. 1, there are three concepts involved : the TREE which is a labeled tree taking the role of the structural representation, the STRING which is a string of terms, and finally the correspondence which is a mapping (given by the arrows defined between substrings of STRING and subtrees of TREE (a more formal notation using indices would be less readable for demonstrational purposes). In the TREE, a node is given by an identifier and a label (eg. I:NP). To avoid a very messy diagram, in fig. 1 we have omitted the other subcorrespondence between substrings and subtrees, for example between the whole TREE and the whole STRING (trivial), between the subtree 4(5(6),7) and the two occurrences of the substring &amp;quot;dog catcher&amp;quot; (nontrivial), etc. We shall do the same in the rest of this paper. (Then again, this is the stringtree correspondence we wish to express for our examples recall the remark earlier saying that the grammar writer is at liberty to define the nature of the string-tree correspondence he or she desires, and this is done in the rules, see later). We also note that the nodes in the TREE are simply concepts in the structural representation and thus the interpretation is independent of any grammar that defines the correspondence (in fact, we have yet to speak of a grammar) : for instance, the TREE in fig. I does not necessitate the presence of a rule of the form &amp;quot;AP NP hunter -■ NP&amp;quot; to be in the grammar. A more complex string-tree correspondence is given in fig. 2 where we choose to define a structural representation of a particular form for each in the language Here, the case for n=3 is given. The problem is akin to the &apos;respectively&apos; problem, where for a sentence like &amp;quot;Peter, Paul and Mary gave a book, a pen and a pencil to Jane, Elisabeth and John respectively&amp;quot;, we wish to associate a structural representation giving the &apos;meaning&apos; &amp;quot;Peter gave a book to Jane, Paul gave a pen to Elisabeth, and Mary gave a pencil to John&amp;quot;. Fig. 2 - A non-projective strinfilree for c At this Point, again we repeat our earlier statement that the choice of such structural representations and the need for such string-tree correspondence are not the topics of discussion in this paper. The aim of this paper is to introduce the tool, in the form of a grammar formalism, which can define such string-tree correspondence as well as beinterpretable for analysis and for generation between strings of terms and structural representations. The grammar formalism for such a purpose is called the String-Tree Correspondence Grammar (STCG). The STCG is a more formal version of the Static Grammar developed by [Chappuy 83] [Vauquois &amp; Chappuy 85]. The Static Grammar (shortly later renamed the Structural Correspondence Specification Grammar), was designed to be a declarative grammar formalism for defining linguistic structures and their correspondence with strings of utterances in natural languages. It has been extensively used for specification and documentation,as well as a(manual) reference for writing the linguistic programs (analysers and generators) in the machine translation system ARIANE-78 [Boitet-et-al 82]. Relatively large scale Static Grammars have been written for French in the French national machine translation project [Boitet 86] translating French into English, and for Malay in the Malaysian national project [Tong 86] translating English to Malay ; the two projects share a common Static Grammar for English (naturally). The STCG derives its formal properties from the Static Grammar, but with more formal definitions of the properties. In the passage from the Static Grammar to the STCG, the form as well as some other characteristics have undergone certain changes, and hence the change to a more appropriate name. The STCG first appeared in [Zaharin 86], where the formal definitions of the grammar are given (but under the name of the Tree Correspondence Grammar). A STCG contains a set of correspondence rules, each of which defines a correspondence between a structural representation (or rather a set or family of) and a string of terms (similarly a set or family of). Each rule is of the form : Rule: R oci • • • cx. — A CORRESPONDENCE: ) ) The simplest form of such a rule is when are terms and $ is a tree. The rule then states the string of terms to the tree B, while the entry CORRESPONDENCE gives the substring-subtree correspondence between the ..... anand the subtrees Ba,... ,S of B. An example is given by rule Si below which defines the &apos;string-tree correspondence in fig. 3. Rule : SI • • I (2:a)(3:b)(4:c) 2:a 3 b 4:c CORRESPONDENCE : (3-3), 161 TREE : 1:S Fig. STRING : a 3:b 1 4:c 3 - Correspondence defined by SI The alternative to the above is to give each a. in terms of a tree (ie. without reference to any rule), but then there is no guarantee that this tree will correspond to some string of terms. Even if it does, one cannot be certain that it would be the string of terms one wishes to include in the rule after all, two entirely different strings of terms may correspond to the same tree (a oaraohrase) by means of two different rules. Although in the example in fig. 3 above, the leaves of the TREE are labeled and ordered exactly as the terms in the STRING, this is not obligatory. For example, it is indeed possible to change the label of node 2 to something else, or to move the node to the right of node 4, or even to exclude the node altogether. In short, the string-tree correspondence defined by a rule need not be projective. elementary rules (with terms) can be generalised to a form where (i=1,..,n) represents a string of terms, A. Here, generalities can be captured if specilies the name of a rule which defines astringcorrespondence (for some tree given in the said rule, but it is of little significance here), in which case the interpretation of the correspondence defined by is to be Al..A -6 (here Al..A means the concaof Vrings subtree correspondence will still be given by the entry CORRESPONDENCE. Fig. 4 illustrates this. We shall discard the alternative and adopt the approach.The generalised rule (with being the name of a rule) can be extended by letting be a list of rule names, where this is interpreted as a choice for the correspondence to be referred to, hence the choice for the string of terms by In such a situation, it mayalso be possible that we wish the topology of the tree vary according to the choice of and this variation to be in terms of the subtrees of the tree T.. For these reasons, we specify each a. as pair (REFERENCE, STRUCTURE) where the said list of rule names and STRUCTURE is atree schema containing variables, such that the structure represents the tree found on the right hand side of the &amp;quot;-&amp;quot; in each rule referred to in the list REFERENCE. This way, the tree B can be defiin terms of by means of the variables (for those appearing simultaneously in both and B). See the example later in fig. 5 for an illustration. are rule names; the correspondence by Rule RA is interpreted and hence • • • A Rules RN! and RN2 below are examples of STCG rules in the form discussed above, where RN2 refers to RN1 and itself. Variables in the entry STRUCTURE are given in boxes, eg. , where each variable can be instantiated to a linear ordered sequence of trees. For a given element (REFERENCE, STRUCTURE), the instantiations of the variables in STRUCTU- RE can be obtained only by identifying (an operation intuitively similar to the standard notion of unification again, see later in fig. 5) the STRUCTURE with the right hand side of a rule given in the entry REFERENCE. Fig.4 - &apos;String-tree correspondence with reference to other rules Rule: RN2 ven) STRUCTURE= 2:NP 1:NP CORRESIKNOMENCE: ( 2 rv 2 ) ri C:1 1:NP ro 2:NP H [t] &apos;NICi] </abstract>
<note confidence="0.805581875">Rule: RN1 N STR1R7. rSTRE 1: noun CORRESPONDENCE: 0:NP 1:noun 162</note>
<abstract confidence="0.989004195121951">As an immediate consequence to the above, an STCG rule thus defines a correspondence between a set of strings of terms on one hand and a set of trees on the other (by means of a linear sequence of sets of trees). The rule RN1 describes a correspondence between a single term and atree containing a node NP dominating a single leaf (for example, it gives the respective structural representations for &amp;quot;dog&amp;quot;, &amp;quot;catcher&amp;quot;, etc.). The rule RN2 describes a correspondence between two or more terms and a single tree note the recursive REFERENCE in the first element of RN2 (for example, it gives the structural representation for &amp;quot;catcher hunter&amp;quot; as well as for &amp;quot;dog catcher hunter&amp;quot;, see later in fig. 5). The entry STRUCTURE of an element may also act as a constraint by making explicit certain nodes in the STRUCTURE instead of just a node dominating a forest (we have no examples for this in this paper, but one can easily visualise the idea). This means that the entry STRUCTURE of an = (REFERENCE, STRUCTURE) in a rule is also a constraint on the trees in hence on the strings in (as and T. are sets), in a correspondence definea by a referred to by in its entry REFERENCE. Whenever it is made use of, such a constraint enthat only certain subsets of and hence of A., are referred to and used in the correspondence by The string-tree correspondence in fig. 1 is defined by rule RN3 below, which refers to rules RN1 and RN2. We show how this is done in fig. 5. Note that if two variables in a single rule have the same label, then their instantiations must be identical. The concept of derivation as well as the derivation tree have been defined for the STCG [Zaharin 861, but it would be too long to explain them here. Instead, we shall use a diagram like the one in fig. 5, which should be quite self-explanatory.</abstract>
<note confidence="0.82472175">Rule: RN3 REP= 1: NP fir TRN1,RN2/1 STR= 1:NP 5:NP CORRESPONDENCE: 1 1 ), ( 4=1 2 ), ( 5 1 ) Going back to fig. 2 where the string-tree</note>
<abstract confidence="0.908500346456692">for is given, each substructure below a node S in the TREE corresponds to a substring &amp;quot;abc&amp;quot;, but the terms in this substring are distributed over the whole STRING. In general, a string-tree correspondence defined a rule it is possible that we wish to define a substring-subtree correspondence of form A. ..A. , where A. ,..,A. are disjoint -1 of the string A ...A and a subof 8, and that cannot be expressed in terms of the respective structural representations (if any) of A. ,..,A. . Such a correspondence cannot be handled by a rule of the form discussed so far because a structural representation (STRUCTURE) found on the left hand side can correspond only to a unit (connected) substring. We can overcome this problem by allowing a rule to define a subcorrespondence between a substructure in the TREE (in the RHS) and a disjoint substring in the STRING (in the LHS), where this subcorrespondence is described in another rule (ie. using a reference - SUBREFERENCE for a substructure in the TREE, rather than uniquely for the elements in the LHS). One also allows elements in the LHS to be given in terms of variables which can be instantiated to substrings. Rule S2 (after fig. 5) gives an example of such a rule where X,Y,Z are variables. The rule S2 is of the following general type. (Recall that we wish to define a substring-subtree of the form A. where A. ,..,A. are disjoint substrings of the string ..A and a subtree of 8, and that -n be expressed in terms of the respective structural representations (if any) of A. ,..,A.). In the rule the elements a to be as before 1 1&apos; except for those representing the substrings A. ,..,A. which are to be left as unknowns,wTitten Jm say X. ,..,X. respectively. The correspondence ..A. is to be written in the entry CORRESas X. ..X. and this is given a rence in an entry SUBREFERENCE as a means to define the correspondence elsewhere in another rule. In SUBREFERENCE, if a rule is a possibility, the identification between the sequences ..X. and a&apos;..a&apos; must be given. The interpretation of the rule is that the SUBREFERENCE gives a correspondence precisely defines the string-tree correspondence ..A. ~8 ,where identified with A. ..A. is identified with A&apos;. .A&apos; with the separation points being obtained from the predeteridentification between X. ..X. and .a&apos; above. A STCG containing the rules Si and S2 defines the language anbncn, and associates a structural representation like the one in fig.2 to every string in the language. Fig.6 illustrates how this grammar defines the string-tree correspondence in fig.2. 163 Fig.S - Rules R41,R12,RN3 to define the correspondence in fig.1 1. NP Rule: RN3 Rule: RN2 ltNP TREE: Identical REFERENCE to give in TREE Unknown in STRING = A ERENCE to RN1 to give and A2&apos;■ catcher 156 anr1:■ dog give • ( NP agin RN2 in LES ) Rule:RN2&apos; TREE: STRING: :NP - &apos;- = Al STRING: REFERENCE to RN2 to give and Al = Al&apos; 142, alpin RN3 A2 NP in LES REFERENCE to RN1 to give and A2 = hunter TREE: 2:AP 1 3:any STRING: A o A ( NP o NP in LEIS ) Rule: RN1 1 NP STRING: hunter : RN1 TREE: STRING: l&apos;:NP 1 2&apos;sdog dog Rule: RN1&amp;quot; 1&amp;quot;:NP TREE: 1 2&amp;quot; :catcher STRING: catcher 164 Fig.6 - Rules Sl,S2 to define the correspondence in fig.2 1 REF= sTR= .</abstract>
<note confidence="0.893310285714286">2:a 3:b 4:c CORRESPONDENCE: 2 ( 3 ,43 ), ( 4_•J4 ), 2:a 3 b 4:c 5:5 1 ( X Y Z 5 ) - SUBREFERENCE(by): 5 Sl: X= 2&apos;, Y= 3, Z= 4&apos; (2&apos;,3,4 in referred Si) or S2: X. 2&apos;X&apos;, Y= 3&apos;Y&apos;, Z= 4&apos;Z&apos; in referred S2) Rule: S. 11S</note>
<title confidence="0.654604454545455">Unknown in STRING = X, Y, Z Unknown in tree e-SUBREFERENCE for S to S2 Ct3 to give : and X = a X&apos; Y = b Y&apos; Z = c Z&apos; in S2 for</title>
<author confidence="0.910875">to Si</author>
<abstract confidence="0.991791044776119">to give : a Y&apos; = b Z&apos; = c Rule: S2 1:S 2:a 3.b 4:c 5:S STRING: aXbYcZ no REFERENCE in ) Rule: S2&apos; l&apos;:S 2&apos;:a 3&apos;:b 4&apos;:c 5&apos;:S STRING: a X&apos; b Y&apos; c Z&apos; ( no REFERENCE in LHS ) Rule: Si 1:S 2:a 3 b 4:c STRING: a b c 165 The informal discussion in this paper gives the motivation and some idea of the formal definition of the String-Tree Correspondence Grammar. The grammar stresses not only the fact that one can express string-tree correspondence like the ones we have discussed, but also that it can be done in a &apos;natural&apos; way using the formalism meaning the structures and correspondence are explicit in the rule, and not implicit and dependent on the combination of grammar rules applied (as in derivation trees). The inclusion of the substring-subtree correspondence is also another characteristic of the grammar formalism. One also sees that the grammar is declarative in nature, and thus it is interpretable both for analysis and for generation (for example, by interpreting the rules as tree rewriting rules with variables). In an effort to demonstrate the principal properties of the formalism, the STCG presented in this paper is in a simple form, ie. treating trees with each node having a single label. In its general form, the STCG deals with labels having considerable internal structure (lists of features, etc.). Furthermore, one can also express constraints on the features in the nodes on individual nodes or between different nodes. As mentioned, the concepts of direct derivation (•&gt;) and derivation (=&gt;), as well as the derivation tree are also defined for the STCG. (Note that the rules with properties similar to the rule S2 entail a definition of direct derivation which is more complex than the classical definition). The set of rules in a grammar forms a formal grammar, ie. it defines a language, in fact two languages, one of strings and the other of trees. At the moment, there is no large applications of the STCG, but as the STCG derives its formal properties from the Static Grammar, it would be quite a simple process to transfer applications in the Static Grammar into STCG applications. Like the Static Grammar, the STCG is basically a formalism for specification, but given its formal nature, one also aims for direct interpretability by a machine. Though still incomplete, work has begun to build such an interpreter [Zajac 86]. ACKNOWLEDGEMENTS I would like to thank Christian Boitet who had been a great help in the formulation of the ideas presented here. My gratitude also to Hans Karlgren and Eva Hajitova for their remarks and criticisms on earlier versions of the paper.</abstract>
<note confidence="0.869436571428571">REFERENCES [Boitet-et-al-82] Ch. Boitet, P. Guillaume, M. Quezel-Ambrunaz &amp;quot;Implementation and conversational environment of ARIANE-78.4&amp;quot;. Proceedings of COLING-82, Prague. (Boitet 86] Ch. Boitet &amp;quot;The French National Project : technical organization and translation results of CALLIOPE- AERO&amp;quot;. IBM Conference on machine translation, Copenhagen, August 1986. [Chappuy 83]</note>
<author confidence="0.811719">S Chappuy</author>
<abstract confidence="0.9829985">amp;quot;Formalisation de la description des niveaux d&apos;interpretation des langues naturelles. menge en vue de l&apos;analyse et de la Oneration au moyen de transducteurs&amp;quot;.</abstract>
<note confidence="0.734119235294118">These Tame Cycle, Juillet 1983, INPG,Grenoble. [Pullum 84] G.K. Pullum &amp;quot;Syntactic and semantic parsability&amp;quot;. Proceedings of COLING-84, Stanford. [Tong 86] Tong L.C. translation system : a laboratory prototype&amp;quot;. Proceedings of COLING-86, Bonn. [Vauquois 78] B. Vauquois &amp;quot;Description de la structure intermediaire&amp;quot;. Communication presentge au Colloque de Luxembourg, Avril 1978, GETA doc., Grenoble. [Vauquois &amp; Chappuy 85] B. Vauquois, S. Chappuy</note>
<abstract confidence="0.8906835">amp;quot;Static Grammars : a formalism for the description of linguistic models&amp;quot;. Proceedings of the conference on theoretical and methodological issues in machine transla-</abstract>
<affiliation confidence="0.778659">tion of natural languages, COLGATE University,</affiliation>
<note confidence="0.628603388888889">New York, August 1985. [Zaharin 86] Zaharin Y. &amp;quot;Strategies and heuristics in the analysis of a natural language in machine translation&amp;quot;. PhD thesis, Universiti Sains Malaysia, Penang, March 1986. (Research conducted under the GETA-USM cooperation - GETA doc., Grenoble). [Zaharin 87] Zaharin Y. linguistic approach at GETA : GETA document, January 1987, Grenoble. [Zajac 86] R. Zajac &amp;quot;SCSL : a linguistic specification language for MT&amp;quot;. Proceedings of COLING-86, Bonn. 166</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<note>[Boitet-et-al-82]</note>
<marker></marker>
<rawString>[Boitet-et-al-82]</rawString>
</citation>
<citation valid="false">
<authors>
<author>P Guillaume Boitet</author>
<author>M</author>
</authors>
<title>Quezel-Ambrunaz &amp;quot;Implementation and conversational environment of ARIANE-78.4&amp;quot;.</title>
<marker>Boitet, M, </marker>
<rawString>Ch. Boitet, P. Guillaume, M. Quezel-Ambrunaz &amp;quot;Implementation and conversational environment of ARIANE-78.4&amp;quot;.</rawString>
</citation>
<citation valid="false">
<booktitle>Proceedings of COLING-82,</booktitle>
<tech>(Boitet 86] Ch. Boitet</tech>
<location>Prague.</location>
<marker></marker>
<rawString>Proceedings of COLING-82, Prague. (Boitet 86] Ch. Boitet</rawString>
</citation>
<citation valid="false">
<title>The French National Project : technical organization and translation results of CALLIOPEAERO&amp;quot;.</title>
<marker></marker>
<rawString>&amp;quot;The French National Project : technical organization and translation results of CALLIOPEAERO&amp;quot;.</rawString>
</citation>
<citation valid="true">
<date>1986</date>
<booktitle>IBM Conference on machine translation,</booktitle>
<location>Copenhagen,</location>
<marker>1986</marker>
<rawString>IBM Conference on machine translation, Copenhagen, August 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Chappuy</author>
</authors>
<title>Formalisation de la description des niveaux d&apos;interpretation des langues naturelles. Etude menge en vue de l&apos;analyse et de la Oneration au moyen de transducteurs&amp;quot;. These Tame Cycle,</title>
<date>1983</date>
<journal>Pullum</journal>
<volume>84</volume>
<location>Juillet</location>
<marker>Chappuy, 1983</marker>
<rawString>[Chappuy 83] S. Chappuy &amp;quot;Formalisation de la description des niveaux d&apos;interpretation des langues naturelles. Etude menge en vue de l&apos;analyse et de la Oneration au moyen de transducteurs&amp;quot;. These Tame Cycle, Juillet 1983, INPG,Grenoble. [Pullum 84]</rawString>
</citation>
<citation valid="false">
<authors>
<author>G K Pullum</author>
</authors>
<title>Syntactic and semantic parsability&amp;quot;.</title>
<journal>Tong</journal>
<booktitle>Proceedings of COLING-84,</booktitle>
<volume>86</volume>
<location>Stanford.</location>
<marker>Pullum, </marker>
<rawString>G.K. Pullum &amp;quot;Syntactic and semantic parsability&amp;quot;. Proceedings of COLING-84, Stanford. [Tong 86]</rawString>
</citation>
<citation valid="true">
<authors>
<author>L C Tong</author>
</authors>
<title>English-Malay translation system : a laboratory prototype&amp;quot;.</title>
<date>1978</date>
<journal>Vauquois</journal>
<booktitle>Proceedings of COLING-86,</booktitle>
<volume>78</volume>
<location>Bonn.</location>
<marker>Tong, 1978</marker>
<rawString>Tong L.C. &amp;quot;English-Malay translation system : a laboratory prototype&amp;quot;. Proceedings of COLING-86, Bonn. [Vauquois 78] B. Vauquois &amp;quot;Description de la structure intermediaire&amp;quot;. Communication presentge au Colloque de Luxembourg, Avril 1978, GETA doc., Grenoble.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Vauquois</author>
<author>S</author>
</authors>
<title>Chappuy &amp;quot;Static Grammars : a formalism for the description of linguistic models&amp;quot;.</title>
<date>1985</date>
<booktitle>Proceedings of the conference on theoretical and methodological issues in machine translation of natural languages,</booktitle>
<institution>COLGATE University,</institution>
<location>New York,</location>
<marker>Vauquois, S, 1985</marker>
<rawString>[Vauquois &amp; Chappuy 85] B. Vauquois, S. Chappuy &amp;quot;Static Grammars : a formalism for the description of linguistic models&amp;quot;. Proceedings of the conference on theoretical and methodological issues in machine translation of natural languages, COLGATE University, New York, August 1985.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Zaharin</author>
</authors>
<title>Strategies and heuristics in the analysis of a natural language in machine translation&amp;quot;.</title>
<date>1986</date>
<booktitle>(Research conducted under the GETA-USM cooperation - GETA doc., Grenoble). [Zaharin 87] Zaharin Y. &amp;quot;The linguistic approach at GETA : asynopsis7 GETA document,</booktitle>
<tech>PhD thesis,</tech>
<institution>Universiti Sains Malaysia, Penang,</institution>
<location>Grenoble.</location>
<marker>Zaharin, 1986</marker>
<rawString>[Zaharin 86] Zaharin Y. &amp;quot;Strategies and heuristics in the analysis of a natural language in machine translation&amp;quot;. PhD thesis, Universiti Sains Malaysia, Penang, March 1986. (Research conducted under the GETA-USM cooperation - GETA doc., Grenoble). [Zaharin 87] Zaharin Y. &amp;quot;The linguistic approach at GETA : asynopsis7 GETA document, January 1987, Grenoble.</rawString>
</citation>
<citation valid="false">
<authors>
<author>R</author>
</authors>
<title>Zajac &amp;quot;SCSL : a linguistic specification language for MT&amp;quot;.</title>
<booktitle>Proceedings of COLING-86,</booktitle>
<location>Bonn.</location>
<marker>R, </marker>
<rawString>[Zajac 86] R. Zajac &amp;quot;SCSL : a linguistic specification language for MT&amp;quot;. Proceedings of COLING-86, Bonn.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>