<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.650543">
Augmented Dependency Grammar :
A Simple Interface between the Grammar Rule and the Knowledge
Kazunori MURAKI , Shunji ICHIYAMA
C&amp;C Systems Research Laboratories
NEC Corporation
Kawasaki-city,213 JAPAN and
</note>
<sectionHeader confidence="0.7642994" genericHeader="method">
Yasutomo FUKUMOCHI
Softwear development devis ion
NSIS Corporation
Kawasaki-city,213 JAPAN
ABSTRACT
</sectionHeader>
<bodyText confidence="0.99990492">
This paper describes some operational
aspects of a language comprehension model which
unifies the linguistic theory and the semantic
theory in respect to operations. The
computational model, called Augmented Dependency
Grammar (ADG), formulates not only the
linguistic dependency structure of sentences but
also the semantic dependency structure using the
extended deep case grammar and field-oriented
fact-knowledge based inferences. Fact knowledge
base and ADG model clarify the qualitative
difference between what we call semantics and
logical meaning. From a practrical view point,
it provides clear image of syntactic/semantic
computation for language processing in analysis
and synthesis. It also explains the gap in
semantics and logical meaning, and gives a clear
computaional image of what we call conceptual
analysis.
This grammar is used for analysis of
Japanese and synthesis of English, in the
Japanese-to-English machine translation system
called VENUS (Vehicle for Natural Language
Understanding and Synthesis) currently developed
by NEC.
</bodyText>
<subsectionHeader confidence="0.664181">
Basic Idea
</subsectionHeader>
<bodyText confidence="0.963322142857143">
The VENUS analysis model consists of two
components, Legato and Crescendo, as shown in
Fig. 1. Legato based on the ADG framework,
constructs semantic dependency structure of
Japanese input sentences by feature-oriented
dependency grammar rules as main control
information for syntactic analysis, and by
semantic inference mechanism on a object fields&apos;
fact knowledge base. Legato maps syntactic
dependency directly to meaningful logical
dependency if possible, or maps it to language-
particular semantic dependency if two kinds of
dependencies do not coincide. The second
component, Crescendo, extracts a conceptual
structure about facts from the semantic
dependency structure through logical
interpretation on the language-particular
semantic dependency using knowledge based
inferences.
Conceptual Dependency
Structure
</bodyText>
<figureCaption confidence="0.82755">
Fig. 1 VENUS Analysis Module
</figureCaption>
<figure confidence="0.99960025">
Input Sentence
IP
Morphological 14
Analysis
Word List
IP
Dependency structure
Analysis
Semantic Dependency /
11, Structure
Legato:
Crescendo: &apos;Conceptual Structure
Analysis
Thesaurus
Knowledge
Base
</figure>
<page confidence="0.994838">
198
</page>
<bodyText confidence="0.998912052631579">
A computational comprehension model for the
ADG is given in Fig. 2. Three different kinds
of information sources other than the lexicon
support language comprehension, and two
inference functions defined on them extract the
interpretation of input sentences. The top
level information is a language structure model.
The bottom is a logical(factual/conceptual)
interpretation model which determine the
possible logical relations between &amp;quot;OBJECTs and
THINGs&amp;quot;.
The semantics located between the above two
models, which has not been clarified in any
paper. Suppose interpretaion is a process of
determining the relation between &amp;quot; OBJECTs and
THINGs &amp;quot;, the ordinary notion of semantics
allows us to determine words&apos; semantics in
particular syntagmatic relations, but not
relational interpretation between concepts.
</bodyText>
<figure confidence="0.858944333333333">
Language A
Linguistics
Language B
</figure>
<figureCaption confidence="0.974766">
Fig. 2 Comprehension Model
</figureCaption>
<bodyText confidence="0.999485266666667">
The notion of basically binary &amp;quot;dependency&amp;quot;
has a primary role to simplify the above
interface, just in the sense that either
syntactic or semantic inference recognizes
interpretable binary relation. The semantics in
the sense used here may not necessarily be
shared among languages, while facts are shared
among languages.
Legato built on the model is syntactic and
semantic analysis module which construct
directly semantic dependency structure from
surface structure. Crescendo is an engine to
eliminate non-logical part in semantic structure
and induces logical structure with pragmatic
information deduced from semantics.
</bodyText>
<subsectionHeader confidence="0.870634">
Semantic/Logical Interpretation
</subsectionHeader>
<bodyText confidence="0.998677230769231">
Each word has its own meaning, sometimes
plural meanings. In this paper word meaning is
represented by a logical symbol called CONCEPT
SYMBOL. The symbol is a representation
primitive for fact knowledge base and internal
conceptual representation of sentences.
Semantic structure representation is also
defined on them, but it borrows syntagmatic
function called dummy symbols which never appear
in conceptual representation.
The above examples SEN1, SEN2 share the same
meaning as shown in FACT1, except pragmatic and
temporal information. Ordinary analysis of SEN1
produces subject-predicate-object syntagmatic
information, and further case interpretaion of
subject-predicate ,object-predicate relations.
However this kind of case interpretation brings
into difficulties to select case marking
ambiguities such as GOA1 or RESult for the above
object-predicate. SEN2 analysis produces
instantly REAson interpretation between two
nominals in terms of &amp;quot;REAson&amp;quot;-marking
preposition &amp;quot;because-of&amp;quot;. This comparison
supports the case even a verb must be
interpreted in some case as a logical relation
and clarifies the standpoint to specify the ADO.
</bodyText>
<figure confidence="0.994216857142857">
Syntactic/Semantic
process
Conceptual proces
\ Semantics
Concept/Fact
Semantics
Linguistics
</figure>
<listItem confidence="0.686924666666667">
1. Factual(conceptual) information must be
independent of syntagmatic meaning as
well as independent of syntax.
</listItem>
<bodyText confidence="0.9996754">
The semantics here is defined as information
concerning the denotation of OBJECTs and THINGs.
It interprets the (semantic) relations between
them, and must be inducible from the raw
syntagmatic information. That is to say, it
may sometimes inherits such language particular
features as syntactic structure, wording,
culture. The structure representing semantics
may not be interpretable in terms of pure logic,
but may be represented linguistically.
</bodyText>
<listItem confidence="0.9551543125">
1) The ADO defines syntactic dependency
structure, semantic dependency
structure, and descriminates the
semantic dependency from the logical
structure.
2) It functions as the interface between
syntactic dependency and semantic
dependency.
2. Ordinary case marking strategy produces
anomaly because it dare to interpret
syntagmatic relations logically even if
those are purely syntagmatic existence.
3. Fillmore&apos;s case is not suitable for
conceptual representaion primitive for a
variety of syntactic and syntagmatic
structures.
</listItem>
<bodyText confidence="0.988632428571428">
On the other hand, syntax is a clue to
understanding of sentences. Syntagmatic
relations, in most cases, can be interpretable
as in FACT1 for SEN2, and linguistic
information is a sole trigger for human to
recognize new notion or new word meaning in a
sentence.
</bodyText>
<page confidence="0.986622">
199
</page>
<figure confidence="0.941467730769231">
SERI War resulted in disaster.
NOMINAL-.21 *N VERB / NOMINAL
t&apos;&apos;------_,/ •
I subject pred object /
1 /
REAson/ &apos;0G0A1//
OBJect RESult
SEM Disaster because of war
NOMINAL PREPosision NOMINAL
POST-NOMINAL modifier
DISASTER4—REAson4--- WAR
SEM1 War resulted in disaster.
WAR REAson DISASTER
\
REAsonl sN-011FAIon224
part-of-speech
grammatical f.
ordinary case
semantics
grammatical f.
ADG and usual case
semantics coincide with
factual meaning
CONCEPT SYMBOLs
ADG semantics
FACT1 WAR --• REAson DISASTER conceptual representation
</figure>
<figureCaption confidence="0.594468">
for both SEN1 and SEN2
</figureCaption>
<bodyText confidence="0.999286090909091">
Comprehension of constructing factual
information is defined by two different levels
understanding; 1 LEGATO semantic analysis (as
shown in SEM, FACT1 for SEN1,2 respectively)
with direct correspondence to syntagmatic
relation, and 2. CRESCENDO factual (logical)
understanding as in a extraction process of
FACT1 from SEN1 via SEM1.
The symbols; REAson1,2 as in SE41, are
called dummy relations in the sense that
REAson1(2) has no logical significance because
REAson1(2) holds in any combination of REAson
and other concept, while REAson in FACT1 holds
in the special combination of concepts like WAR
with DISASTAR. They play a role to match
syntagmatic relation with semantics in terms of
syntax. These two processes analize the
pragmatic, modal, and temporal information which
is added into the factual structure to produce
the conceptual structure.
&amp;quot;Dependency&amp;quot; is 2nd idea, to figure out that
semantic (dependency) analysis of sentences is
executable at the same time of syntactic
(dependency) analysis. ADG employs dependency
framework in a different way from the ordinary
one. It deals with prepositions, postpositions,
case inflections, grammatical functions, copula
etc., as the functional features for relational
interpretation. For example, preposition in
English may not be a syntactic governor (&apos;head&apos;
in this paper) of its object phrase, copula &amp;quot;be&amp;quot;
in front of adjective modifies the syntactic
feature of the adjective as a syntagmatic head
predicate which allows it to have a dependent
marked as a subject, while adjective in itself
has a function of pre-nominal modifier. Namely,
most of the functional words are dealt like case
inflections. They add functional features to
words or modify their features.
The functional features map word-to-word
dependency to concept-to-concept semantic
dependency. The figure 3 explains the simple
interface mechanism. Functional features such as
SUBject, OBJect, BECAUSE-OF corresponds to
REAson1, REAson2, REAson respectively. The ADG
syntactic dependency rules(see *s below) predict
those semantic relations using the functional
features and word syntax, and at the same time
they trigger fact knowledge base inference to
interpret Concept-to-Concept relations. A
fact(concept) knowledge base is composed of such
binary pieces as Ss or Cs. In this figure S and
C mean semantic knowledge dependent on
languages, and conceptual knowledge
respectively.
</bodyText>
<table confidence="0.98128425">
Word/Concept Function/Relation Word/Concept
* war subject result-in
S WAR REAson1 REAson
• war object result-in
S WAR REAson2 REAson
* war BECAUSE-OF disaster
C WAR REAson DISASTER
Fig. 3 Syntactic dependencyi dummy/conceptual dependency
</table>
<page confidence="0.608536">
200
</page>
<sectionHeader confidence="0.3362" genericHeader="method">
ADG definition
</sectionHeader>
<bodyText confidence="0.6393383125">
Dl. FEATURE describes morphological,
syntactic, semantic, and conceptual information
, and is used for describing the lexicon,
semantic structure, conceptual structure and ADG
rules. Feature is formalized as :
Feature Name . Feature Value/ .1 Context IT
Dependency function, one of the syntactic
features for a particle , is described as
follows.
LD.(INULL/.11Ai LH.fNULL1.14%
no word on the left depends on a
particle, it depends on no word on the
left
RD.INOM1. A RH.iNULLt. A
it depends on NOMinal on the right
etc.
</bodyText>
<listItem confidence="0.783335777777778">
D2. CONCEPTUAL SYMBOL(CS) is a large set of
intensional symbols standing for meanings
conveyed by words. CONCEPTUAL SYMBOL includes
those symbols such as NOTION, COMPUTER, GIVE,
COLOR, BEAUTIFUL, SUP-SUB, PARTOF, AGT and so
on. CS is one of the features included in
FEATURE.
D3. THESAURUS is a system defined as a
subset of:
</listItem>
<table confidence="0.516698833333333">
CONCEPTUAL SYMBOL 1 x SUP-SUB(PARTOF) relation
D4. PTABLE is a system defined as a subset
of:
CONCEPTUAL SYMBOL x CONCEPTUAL/dummy RELATIONs
Relation symbols in PTABLE consist of 45
CONCEPTUAL relations except for SUP-SUB
</table>
<bodyText confidence="0.986053176470588">
relation, and dummy relations such as REAson1,
REAson2, LOCI, etc. CONCEPTUAL RELATION is a
subset of CONCEPTUAL SYMBOL: AGT relation , OBJ
relation , POSSess relation, LOC relation and
the other 41 relations.
Relations are directed binary relations
including logical ones such as REAson, CAUSAL,
PARTOF, SUP-SUB, etc. and deep case relations
such as AGT, OBJ, LOC, etc., and several
language dependent dummy relations such as LOCI,
LOC2 ,CNT1, REAson1 etc.
The THESAURUS and the PTABLE, which is
described interns of semantic dependency and
conceptual information, compose the fact
knowledge base. The former forms directed
network called an abstraction hierarchy for
concept generalization.
</bodyText>
<sectionHeader confidence="0.979486" genericHeader="method">
CONCEPT SYMBOL
</sectionHeader>
<bodyText confidence="0.98848294117647">
The CS(CONCEPT SYMBOL) differs from that of
Schank&apos;s primitives in many respects. The
number of CSs grows in proportion to the size
of vocaburary as human cultivates new ideas and
notions. The meaning of each CS is
intensionally defined by LambdaCS
COOCURR(CS,CSi,CRj). This model does not
require to explain the reason why these CSs
may be primitives and set up lexical rules for
mapping Schank&apos;s semantic primitives to the
corresponding words. That is to say, human can
perceive the word concept only through observing
which CSs and CRs CO-OCURR with logical and
pragmatic functions. Each description of
COOCURR(CS1,CS2,CS3) in the world model, where
one CSi can be interpreted as CR, specifies the
meaning LambdaCSi.
</bodyText>
<figure confidence="0.302938210526316">
ADG rules are defined as feature-oriented.
D5. ADG: dependency rule for Legato.
(FEATURE1) + (FEATURE2) 0(FEAT1JRE3)
Head Selection
Feature Inheritance
Conceptual Relation Prediction
Triggering Thesaurus/PTABLE
Semantic Dependency Construction
D6. contextual rule for Crescendo.
i.PATHi .0 i PATH1
PATH = FEATURE (dep/hed FEATURE)
(dep/hed :a dependency direction)
D7. Network structure is used for INTERNAL
REPRESENTATION: semantic dependency structure
and conceptual structure. Network Structure is
defined as a subset of:
1
CONCEPTUAL SYMBOL xi45 conceptual relations,
dummy relations
</figure>
<bodyText confidence="0.933043">
D8. Each lexical entry has its KEY and
CONTENT. The KEY consists of WORD spelling and
CS. The CONTENT is a set of FEATUREs . CS may
be one piece of those conceptual FEATUREs .
</bodyText>
<subsectionHeader confidence="0.622116">
Atomic formula in PTABLE and THESAURUS
</subsectionHeader>
<bodyText confidence="0.792126">
Knowledge Base consists of LEXICON,
</bodyText>
<sectionHeader confidence="0.570127" genericHeader="method">
THESAURUS and PTABLE.
</sectionHeader>
<bodyText confidence="0.94817825">
The case grammar, as a basis of internal
representation, which is constructed with the
combination of binary case relations, fits the
dependency grammar very well, since both
dependency and case relation are basically
binary. The dependency analysis also correlates
to the atomic formula adopted for fact model
specification. The formula has the following
form, but not the ordinary predicate convention.
The formula tells only the fact that three CSs
(one may be CR) coocurr logically.
COOCURR ( CSi , CSj , CSk )
</bodyText>
<page confidence="0.996907">
201
</page>
<bodyText confidence="0.475393904761905">
This convention also implies some order-free
calculation. The following example illustrates
this kind of flexible function.
S11 An Apple existed on the table.
APPLE LOCation TABLE - - -F1
LOC(APPLE,TABLE).
S12 The location of an apple was the table.
LOC APPLE TABLE
eq (TABLE, LOC of APPLE) - - - F2
TABLE (LOC , APPLE) - - - F3
S22 Tom processed data.
HUMAN PROCESS DATA - - - F4
PROCESS(HUMAN , DATA)
S22 The agent of process was TOM.
(TOM is a process-or).
4. constructs their dependency structure
using their FEATUREs if the knowledge
base returns consistent semantic
interpretation; in other words, if the
consistent conceptual relation between
their CSs is found.
</bodyText>
<subsectionHeader confidence="0.967531">
Legato Implementation
</subsectionHeader>
<bodyText confidence="0.999851571428572">
Legato is a bottom-up dependency analysis
engine (a kind of shift-reduce mechanism) based
on the non-deterministic push-down automaton 2
, which is extended by devising context holding
mechanism (context stack) to deal with
exceptional dependencies (to be mentioned
later).
The binary (augmented) dependency rule has a
structure shown in Fig. 2. If the focused word
(called FOCUS) and the word on the top of the
push-down stack (called Pd-TOP) have the
FEATUREs specified by the rule, a new HEAD with
the derived FEATUREs is created by the action in
the rule.
</bodyText>
<sectionHeader confidence="0.685672" genericHeader="method">
FOCUS Pd TOP + ACTION
</sectionHeader>
<bodyText confidence="0.942767846153846">
AGT PROCESS HUMAN feature feature actions
conditions conditions
eq ( HUMAN, AGT of PROCESS) - - -F5
HUMAN ( AGT , PROCESS ) - - F6
Many kinds of formula can be set up for
representing the above propositions . In our
framework, the following unique representation
format resolves the higher order difficulties,
such as
F1&amp;F3 = LOC(APPLE,TABLE(LOC,APPLE).
F4&amp;F6 =PROCESS(HUMAN(AGT,PROCESS),DATA).
by using alternatives
COOCURR( APPLE, TABLE).
</bodyText>
<sectionHeader confidence="0.647883" genericHeader="method">
COOCURR( PROCESS,HUMAN,AGT).
COOCURR( PROCESS,DATA,OBJ).
</sectionHeader>
<bodyText confidence="0.967481">
Dependency grammar framework has been
augmented as follows:
</bodyText>
<sectionHeader confidence="0.564047" genericHeader="method">
ADG functions
</sectionHeader>
<listItem confidence="0.990341166666667">
1. detects a possible pair of syntactic
head and its dependent based on their
FEATUREs,
2. predicts a set of permissible conceptual
relations between them, using their pre-
or post-positional features, phrase
structural features, case structural
features and so on,
3. triggers the knowledge base inference
mechanism using their CSs in their
conceptual information and the predicted
permissible relations,
</listItem>
<bodyText confidence="0.97425525">
for the focus for the push down
word stack top word
Fig. 4 Legato rule form
In the case of Japanese,
</bodyText>
<listItem confidence="0.898364857142857">
1. Japanese sentences satisfy the non-
crossing condition in syntactic
dependency relation.
2. Moreover, the syntactic dependency
relation coincides with the semantic and
conceptual dependency relation in most
cases.
</listItem>
<bodyText confidence="0.9999805">
However, the semantic dependency sometimes
doesn&apos;t coincide with the syntactic dependency.
In a worse case, even the non-crossing condition
does not hold. The sample sentences in Fig. 5
exemplify such a linguistic phenomenon.
The non-crossing condition does not hold
semantically in Ex. 2 and Ex. 3. Here in this
figure, the solid lines indicate a syntactic
dependency and the dotted lines indicate a
semantic dependency. The arrows run from the
head word to the dependent word.
A case of non-correspondence between
syntactic and semantic dependency is shown in
Ex. 2 (al &amp; a2). although, w4 is recognized as
w3&apos;s syntactic head, the true semantic head of
w3 can be found among the words (w1 and w2)
syntactically dependent on the word, w3. That is
the word, wl. Furthermore, the crossing of a2
and a3 violates the non-crossing condition.
The context stack is a small push-down stack
for keeping sub-context associated with the
dependent words , and it is attatched to the
</bodyText>
<page confidence="0.993024">
202
</page>
<bodyText confidence="0.997521941176471">
newly generated HEAD in order to bridge the gap
between both kinds of dependencies. When
Legato creates a new HEAD from Pd-TOP and HEAD,
the context associated with Pd-TOP is stacked up
onto the context stack in the new HEAD. At the
same time, the semantic dependency is
constructed between Pd-TOP and HEAD if it is
permissible. Legato refers to the context in
the context stack if needed, and then constructs
the semantic dependency if the word which has a
semantic dependency relation to the word stored
within a context in the context stack can be
identified.
This enables the analysis mechanism to
easily deal with the sister dependency, which
cannot done with in the traditional dependency
grammar framework.
</bodyText>
<subsectionHeader confidence="0.912705">
Crescendo implementation
</subsectionHeader>
<bodyText confidence="0.9439295">
The conceptual structure to be extracted as
the final result of the comprehension process
must be independent of the surface expression,
while the semantic structure given by Legato may
retain the inherited characteristics from the
surface expression in the source language. If
</bodyText>
<figure confidence="0.991769777777778">
Ex. 1
L.
sentence (PT
sentence analysis
The
F4—z
easy
;
A
Ex.2 C°1 —
wi computers vV2
Oi —1&amp;quot; iv 0.1
Ex.3 doN 1) I!
human.
Z03, NT 2—t 3 t`—ms
_ .
f--a ;R&amp;quot; I- t&gt;- • ti F .
Robot make
A
- - - - - - - -
- - - -
_ -
Instead of
- -
0)
the
laboratory in W3 three v4 use
Li 1
cr
Fig. 5 Examples of the gap between syntactic and semantic dependency
a. Input sentence
X is an element of the set A.
b. Crescendo inference
(ELe Ment)
,ELM2
x
</figure>
<reference confidence="0.724462714285714">
C Ss: &apos;ELe Ment&apos;, &apos;SET&apos;, &apos;N A M E&apos; ,(&apos;A&apos; and &apos;x&apos;)
Conceptual Relations: &apos;N A ME&apos; and &apos;E Le Ment&apos;.
du m my relations: &apos;EL M 1 , &apos;EL M2&apos;
c. Contextual Rule
Eeeinent
41118111 SSD
Fig.6 Crescendo diagram
</reference>
<page confidence="0.99855">
203
</page>
<bodyText confidence="0.999934758620689">
the surface sentences express the same concepts,
they must be organized into the same conceptual
dependency structure.
In the semantic structure example given on
the left in Fig. 6.b, the CS &amp;quot;ELeMent&amp;quot;, which
usually has two meanings ( an object concept and
a membership relation concept), functions as an
object concept. It is reasonable, from a logical
point of view, to regard the CS as a relation
name in the conceptual structure , as shown on
the right in Fig.6.b because &apos;SET -ELeMent - X&apos;
is easily deduced from the two propositions of
&apos;ELeMent -ELM2 - X&apos; and &apos;ELeMent - ELM1 - SET&apos;.
That is to say, the two sentences, like &amp;quot;The set
A includes X&amp;quot; and &amp;quot;X is an element in the set
A,&amp;quot; must have the same conceptual structure.
Crescendo controls this kind of logical
deduction neccessary for concluding the
conceptual structure from the semantic
structure. Besides conceptual and logical
inference rules, it has causal inference rules
among the facts for determing consistent causal
chains.
Figure 6.c shows an example of the logical
inference rules. It infers the right conceptual
structure in Fig. 6.b from the left semantic
structure. The knowledge based inference also
assures the consistency of the deduced
conceptual structures.
</bodyText>
<subsectionHeader confidence="0.669802">
Conluding Remark
</subsectionHeader>
<bodyText confidence="0.999813260869565">
This paper has introduced a language
comprehension model ADO to determine linguistic
and semantic structures in sentences with a
simple binary operation framework. The proposed
dependency structure analysis engine (Legato)
and the conceptual structure extraction engine
(Crescendo) have been implemented. The ADO
succeeded in constructively formalizing
syntactic specification and semantic
interpretation, using the knowledge base of a
set of conceptual relations and the inference
mechanism on it, defined only by simple binary
operations.
Legato and Crescendo were incorporated in
VENUS Japanese-to-English machine translation
system. The experiments have proved its
operational efficacy, fitness and justification.
The ADD points out anomaly in usual case
systems, and resolves it by introducing the
concept of dummy relation which can not and must
not be interpreted logically. This extension
puts the semantics of a linguistic theory in
the correct position.
</bodyText>
<sectionHeader confidence="0.994549" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999854857142857">
1. Gaifman, H., &amp;quot;Dependency System and
Phrase Structure Systems, &amp;quot;Information
and Control 8,304-337(1965).
2. Aho, A.V., Hoperoft, J.E. and Ullman
,J.D., &amp;quot;The Design and Analysis of
Computer Algorithms,&amp;quot; Addison-Wesley
Publishing Co.( 19711).
</reference>
<page confidence="0.998895">
204
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000012">
<title confidence="0.999166">Augmented Dependency Grammar : A Simple Interface between the Grammar Rule and the Knowledge</title>
<author confidence="0.984737">Kazunori MURAKI</author>
<affiliation confidence="0.833895">C&amp;C Systems Research Laboratories NEC Corporation Kawasaki-city,213 JAPAN and</affiliation>
<title confidence="0.723505">Yasutomo FUKUMOCHI</title>
<author confidence="0.832461">Softwear development devis ion</author>
<affiliation confidence="0.996272">NSIS Corporation</affiliation>
<address confidence="0.947687">Kawasaki-city,213 JAPAN</address>
<abstract confidence="0.998691065217392">This paper describes some operational aspects of a language comprehension model which unifies the linguistic theory and the semantic theory in respect to operations. The computational model, called Augmented Dependency not only the linguistic dependency structure of sentences but also the semantic dependency structure using the extended deep case grammar and field-oriented fact-knowledge based inferences. Fact knowledge base and ADG model clarify the qualitative difference between what we call semantics and logical meaning. From a practrical view point, it provides clear image of syntactic/semantic computation for language processing in analysis and synthesis. It also explains the gap in semantics and logical meaning, and gives a clear computaional image of what we call conceptual analysis. This grammar is used for analysis of Japanese and synthesis of English, in the Japanese-to-English machine translation system for Natural Language Understanding and Synthesis) currently developed by NEC. Basic Idea model consists of two components, Legato and Crescendo, as shown in Fig. 1. Legato based on the ADG framework, constructs semantic dependency structure of Japanese input sentences by feature-oriented dependency grammar rules as main control information for syntactic analysis, and by semantic inference mechanism on a object fields&apos; fact knowledge base. Legato maps syntactic dependency directly to meaningful logical dependency if possible, or maps it to languageparticular semantic dependency if two kinds of dependencies do not coincide. The second component, Crescendo, extracts a conceptual structure about facts from the semantic dependency structure through logical interpretation on the language-particular semantic dependency using knowledge based inferences.</abstract>
<note confidence="0.534912153846154">Conceptual Dependency Structure Fig. 1 VENUS Analysis Module Input Sentence IP Morphological 14 Analysis Word List IP Dependency structure Analysis Dependency/ 11,Structure</note>
<title confidence="0.9558014">Legato: Structure Analysis Thesaurus Knowledge</title>
<author confidence="0.930152">Base</author>
<date confidence="0.531692">198</date>
<abstract confidence="0.986644473684211">A computational comprehension model for the ADG is given in Fig. 2. Three different kinds of information sources other than the lexicon support language comprehension, and two inference functions defined on them extract the interpretation of input sentences. The top level information is a language structure model. The bottom is a logical(factual/conceptual) interpretation model which determine the logical relations between THINGs&amp;quot;. The semantics located between the above two models, which has not been clarified in any paper. Suppose interpretaion is a process of the relation between &amp;quot; &amp;quot;, ordinary notion of semantics allows us to determine words&apos; semantics in particular syntagmatic relations, but not relational interpretation between concepts. Language A Linguistics Fig. 2 Comprehension Model The notion of basically binary &amp;quot;dependency&amp;quot; has a primary role to simplify the above interface, just in the sense that either syntactic or semantic inference recognizes interpretable binary relation. The semantics in the sense used here may not necessarily be shared among languages, while facts are shared among languages. Legato built on the model is syntactic and semantic analysis module which construct directly semantic dependency structure from surface structure. Crescendo is an engine to eliminate non-logical part in semantic structure and induces logical structure with pragmatic information deduced from semantics. Semantic/Logical Interpretation Each word has its own meaning, sometimes plural meanings. In this paper word meaning is by a logical symbol called symbol is a representation primitive for fact knowledge base and internal conceptual representation of sentences. Semantic structure representation is also defined on them, but it borrows syntagmatic function called dummy symbols which never appear in conceptual representation. above examples SEN2 the same as shown in pragmatic and temporal information. Ordinary analysis of SEN1 produces subject-predicate-object syntagmatic information, and further case interpretaion of subject-predicate ,object-predicate relations. However this kind of case interpretation brings into difficulties to select case marking ambiguities such as GOA1 or RESult for the above object-predicate. SEN2 analysis produces between two nominals in terms of &amp;quot;REAson&amp;quot;-marking preposition &amp;quot;because-of&amp;quot;. This comparison supports the case even a verb must be interpreted in some case as a logical relation and clarifies the standpoint to specify the ADO. Syntactic/Semantic process Conceptual proces \ Semantics Concept/Fact Semantics Linguistics 1. Factual(conceptual) information must be independent of syntagmatic meaning as well as independent of syntax. The semantics here is defined as information the denotation of It interprets the (semantic) relations between and must from the raw syntagmatic information. That is to say, it may sometimes inherits such language particular features as syntactic structure, wording, culture. The structure representing semantics may not be interpretable in terms of pure logic, but may be represented linguistically. 1) The ADO defines syntactic dependency structure, semantic dependency structure, and descriminates the semantic dependency from the logical structure. 2) It functions as the interface between syntactic dependency and semantic dependency. 2. Ordinary case marking strategy produces anomaly because it dare to interpret syntagmatic relations logically even if those are purely syntagmatic existence. 3. Fillmore&apos;s case is not suitable for conceptual representaion primitive for a variety of syntactic and syntagmatic structures. On the other hand, syntax is a clue to understanding of sentences. Syntagmatic relations, in most cases, can be interpretable in linguistic information is a sole trigger for human to recognize new notion or new word meaning in a sentence. 199 resulted in disaster. *N VERB / NOMINAL • I subject pred object / 1 / OBJect RESult because of war NOMINAL PREPosision NOMINAL POST-NOMINAL modifier DISASTER4—REAson4--- WAR resulted in disaster. \ part-of-speech grammatical f. ordinary case semantics grammatical f. ADG and usual case semantics coincide with factual meaning CONCEPT SYMBOLs ADG semantics REAson conceptual representation SEN1 and SEN2 Comprehension of constructing factual information is defined by two different levels 1 analysis (as in FACT1 with direct correspondence to syntagmatic and CRESCENDO (logical) understanding as in a extraction process of from The symbols; REAson1,2 as in SE41, are called dummy relations in the sense that REAson1(2) has no logical significance because REAson1(2) holds in any combination of REAson and other concept, while REAson in FACT1 holds in the special combination of concepts like WAR with DISASTAR. They play a role to match syntagmatic relation with semantics in terms of syntax. These two processes analize the pragmatic, modal, and temporal information which is added into the factual structure to produce the conceptual structure. 2nd idea, to figure out that semantic (dependency) analysis of sentences is executable at the same time of syntactic analysis. dependency framework in a different way from the ordinary one. It deals with prepositions, postpositions, case inflections, grammatical functions, copula etc., as the functional features for relational interpretation. For example, preposition in English may not be a syntactic governor (&apos;head&apos; in this paper) of its object phrase, copula &amp;quot;be&amp;quot; in front of adjective modifies the syntactic feature of the adjective as a syntagmatic head predicate which allows it to have a dependent marked as a subject, while adjective in itself has a function of pre-nominal modifier. Namely, most of the functional words are dealt like case inflections. They add functional features to words or modify their features. The functional features map word-to-word dependency to concept-to-concept semantic dependency. The figure 3 explains the simple interface mechanism. Functional features such as SUBject, OBJect, BECAUSE-OF corresponds to REAson2, REAson The dependency rules(see predict those semantic relations using the functional features and word syntax, and at the same time they trigger fact knowledge base inference to interpret Concept-to-Concept relations. A fact(concept) knowledge base is composed of such pieces as Ss or Cs. In this figure semantic knowledge dependent on languages, and conceptual knowledge respectively. Word/Concept Function/Relation Word/Concept * war subject result-in S WAR REAson1 REAson • war object result-in S WAR REAson2 REAson * war BECAUSE-OF disaster REAson DISASTER dummy/conceptual dependency 200 ADG definition FEATURE morphological, syntactic, semantic, and conceptual information , and is used for describing the lexicon, semantic structure, conceptual structure and ADG rules. Feature is formalized as : Name . Feature Value/ .1 Context Dependency function, one of the syntactic features for a particle , is described as follows. LH.fNULL1.14% no word on the left depends on a particle, it depends on no word on the left RD.INOM1. A RH.iNULLt. A it depends on NOMinal on the right etc. D2. CONCEPTUAL SYMBOL(CS) is a large set of symbols standing for by words. SYMBOL includes those symbols such as NOTION, COMPUTER, GIVE, COLOR, BEAUTIFUL, SUP-SUB, PARTOF, AGT and so on. CS is one of the features included in FEATURE. THESAURUS a system defined as a subset of: CONCEPTUAL SYMBOL 1 x SUP-SUB(PARTOF) relation PTABLE is system defined as a subset of: CONCEPTUAL SYMBOL x CONCEPTUAL/dummy RELATIONs Relation symbols in PTABLE consist of 45 except for SUP-SUB relation, and dummy relations such as REAson1, LOCI, etc. RELATION a of SYMBOL: AGT relation , OBJ relation , POSSess relation, LOC relation and the other 41 relations. Relations are directed binary relations including logical ones such as REAson, CAUSAL, PARTOF, SUP-SUB, etc. and deep case relations such as AGT, OBJ, LOC, etc., and several language dependent dummy relations such as LOCI, LOC2 ,CNT1, REAson1 etc. the is described interns of semantic dependency and conceptual information, compose the fact knowledge base. The former forms directed network called an abstraction hierarchy for concept generalization. CONCEPT SYMBOL The CS(CONCEPT SYMBOL) differs from that of Schank&apos;s primitives in many respects. The of in proportion to the size of vocaburary as human cultivates new ideas and notions. The meaning of each CS is intensionally defined by LambdaCS COOCURR(CS,CSi,CRj). This model does not require to explain the reason why these CSs may be primitives and set up lexical rules for mapping Schank&apos;s semantic primitives to the corresponding words. That is to say, human can perceive the word concept only through observing which CSs and CRs CO-OCURR with logical and pragmatic functions. Each description of COOCURR(CS1,CS2,CS3) in the world model, where CSi can be interpreted as the meaning LambdaCSi. ADG rules are defined as feature-oriented. ADG: rule for Legato. (FEATURE1) + (FEATURE2) 0(FEAT1JRE3)</abstract>
<title confidence="0.99226775">Head Selection Feature Inheritance Conceptual Relation Prediction Semantic Dependency Construction</title>
<note confidence="0.665377">D6. contextual rule for Crescendo. .0</note>
<abstract confidence="0.967639192622951">PATH = FEATURE (dep/hed FEATURE) (dep/hed :a dependency direction) Network structure used for dependency structure conceptual structure. Structure is defined as a subset of: 1 CONCEPTUAL SYMBOL xi45 conceptual relations, dummy relations Each lexical entry has its of WORD spelling and The a set of . CS be one piece of those conceptual FEATUREs . Atomic formula in PTABLE and THESAURUS Base consists of The case grammar, as a basis of internal representation, which is constructed with the combination of binary case relations, fits the dependency grammar very well, since both dependency and case relation are basically binary. The dependency analysis also correlates to the atomic formula adopted for fact model specification. The formula has the following form, but not the ordinary predicate convention. The formula tells only the fact that three CSs (one may be CR) coocurr logically. COOCURR ( CSi , CSj , CSk ) 201 This convention also implies some order-free calculation. The following example illustrates this kind of flexible function. Apple existed on the table. APPLE LOCation TABLE - - -F1 LOC(APPLE,TABLE). S12 The location of an apple was the table. LOC APPLE TABLE eq (TABLE, LOC of APPLE) - - - F2 TABLE (LOC , APPLE) - - - F3 S22 Tom processed data. HUMAN PROCESS DATA - - - F4 PROCESS(HUMAN , DATA) S22 The agent of process was TOM. (TOM is a process-or). 4. constructs their dependency structure using their FEATUREs if the knowledge base returns consistent semantic interpretation; in other words, if the consistent conceptual relation between their CSs is found. Legato Implementation Legato is a bottom-up dependency analysis engine (a kind of shift-reduce mechanism) based on the non-deterministic push-down automaton 2 , which is extended by devising context holding mechanism (context stack) to deal with exceptional dependencies (to be mentioned later). The binary (augmented) dependency rule has a structure shown in Fig. 2. If the focused word the word on the top of the stack (called the FEATUREs specified by the rule, a new HEAD with the derived FEATUREs is created by the action in the rule. Pd TOP AGT PROCESS HUMAN feature feature actions conditions conditions eq ( HUMAN, AGT of PROCESS) - - -F5 HUMAN ( AGT , PROCESS ) - - F6 Many kinds of formula can be set up for representing the above propositions . In our framework, the following unique representation format resolves the higher order difficulties, such as F1&amp;F3 = LOC(APPLE,TABLE(LOC,APPLE). F4&amp;F6 =PROCESS(HUMAN(AGT,PROCESS),DATA). by using alternatives COOCURR( APPLE, TABLE). COOCURR( PROCESS,HUMAN,AGT). COOCURR( PROCESS,DATA,OBJ). Dependency grammar framework has been augmented as follows: ADG functions 1. detects a possible pair of syntactic head and its dependent based on their FEATUREs, 2. predicts a set of permissible conceptual relations between them, using their preor post-positional features, phrase structural features, case structural features and so on, 3. triggers the knowledge base inference mechanism using their CSs in their conceptual information and the predicted permissible relations, for the focus for the push down word stack top word Fig. 4 Legato rule form In the case of Japanese, Japanese sentences satisfy noncrossing condition in syntactic dependency relation. 2. Moreover, the syntactic dependency coincides with the semantic conceptual dependency relation in most cases. However, the semantic dependency sometimes doesn&apos;t coincide with the syntactic dependency. In a worse case, even the non-crossing condition does not hold. The sample sentences in Fig. 5 exemplify such a linguistic phenomenon. The non-crossing condition does not hold in Ex. 2 and Ex. in this figure, the solid lines indicate a syntactic dependency and the dotted lines indicate a dependency. The arrows run from the head word to the dependent word. A case of non-correspondence between syntactic and semantic dependency is shown in Ex. 2 (al &amp; a2). although, w4 is recognized as w3&apos;s syntactic head, the true semantic head of be found among the words (w1 and w2) dependent on the word, is the word, wl. Furthermore, the crossing of a2 and a3 violates the non-crossing condition. The context stack is a small push-down stack for keeping sub-context associated with the dependent words , and it is attatched to the 202 newly generated HEAD in order to bridge the gap between both kinds of dependencies. When Legato creates a new HEAD from Pd-TOP and HEAD, the context associated with Pd-TOP is stacked up onto the context stack in the new HEAD. At the same time, the semantic dependency is constructed between Pd-TOP and HEAD if it is Legato the context in the context stack if needed, and then constructs the semantic dependency if the word which has a semantic dependency relation to the word stored within a context in the context stack can be identified. This enables the analysis mechanism to deal with the sister dependency, cannot done with in the traditional dependency grammar framework. Crescendo implementation The conceptual structure to be extracted as the final result of the comprehension process must be independent of the surface expression, while the semantic structure given by Legato may retain the inherited characteristics from the surface expression in the source language. If Ex. 1 L. analysis The F4—z easy ; A — 0.1 I! human. NT 3 _ . I- • ti . make A - - - - - - - - - - - - Instead of - - 0) the in Fig. 5 Examples of the gap between syntactic and semantic dependency a. Input sentence X is an element of the set A. b. Crescendo inference (ELeMent) x C Ss: &apos;ELe Ment&apos;, &apos;SET&apos;, &apos;N A M E&apos; ,(&apos;A&apos; and &apos;x&apos;) Conceptual Relations: &apos;N A ME&apos; and &apos;E Le Ment&apos;. m my relations: &apos;EL M 1 , &apos;EL c. Contextual Rule Eeeinent 41118111 SSD Fig.6 Crescendo diagram 203 the surface sentences express the same concepts, they must be organized into the same conceptual dependency structure. In the semantic structure example given on left in Fig. 6.b, the which usually has two meanings ( an object concept and a membership relation concept), functions as an object concept. It is reasonable, from a logical of view, to regard the a relation name in the conceptual structure , as shown on the right in Fig.6.b because &apos;SET -ELeMent - X&apos; is easily deduced from the two propositions of &apos;ELeMent -ELM2 - X&apos; and &apos;ELeMent - ELM1 - SET&apos;. That is to say, the two sentences, like &amp;quot;The set A includes X&amp;quot; and &amp;quot;X is an element in the set A,&amp;quot; must have the same conceptual structure. Crescendo controls this kind of logical deduction neccessary for concluding the conceptual structure from the semantic structure. Besides conceptual and logical inference rules, it has causal inference rules among the facts for determing consistent causal chains. Figure 6.c shows an example of the logical inference rules. It infers the right conceptual structure in Fig. 6.b from the left semantic structure. The knowledge based inference also assures the consistency of the deduced conceptual structures. Conluding Remark This paper has introduced a language model determine linguistic and semantic structures in sentences with a simple binary operation framework. The proposed dependency structure analysis engine (Legato) and the conceptual structure extraction engine have been implemented. The succeeded in constructively formalizing syntactic specification and semantic interpretation, using the knowledge base of a set of conceptual relations and the inference mechanism on it, defined only by simple binary operations. Legato and Crescendo were incorporated in machine translation system. The experiments have proved its operational efficacy, fitness and justification. The ADD points out anomaly in usual case systems, and resolves it by introducing the concept of dummy relation which can not and must not be interpreted logically. This extension puts the semantics of a linguistic theory in the correct position.</abstract>
<note confidence="0.893374666666667">References 1. Gaifman, H., &amp;quot;Dependency System and Phrase Structure Systems, &amp;quot;Information and Control 8,304-337(1965). 2. Aho, A.V., Hoperoft, J.E. and Ullman ,J.D., &amp;quot;The Design and Analysis of Computer Algorithms,&amp;quot; Addison-Wesley Publishing Co.( 19711). 204</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>C Ss</author>
</authors>
<title>ELe Ment&apos;, &apos;SET&apos;, &apos;N A M E&apos; ,(&apos;A&apos; and &apos;x&apos;) Conceptual Relations: &apos;N A ME&apos; and &apos;E Le Ment&apos;. du m my relations: &apos;EL</title>
<journal>M</journal>
<volume>1</volume>
<note>EL M2&apos;</note>
<marker>Ss, </marker>
<rawString>C Ss: &apos;ELe Ment&apos;, &apos;SET&apos;, &apos;N A M E&apos; ,(&apos;A&apos; and &apos;x&apos;) Conceptual Relations: &apos;N A ME&apos; and &apos;E Le Ment&apos;. du m my relations: &apos;EL M 1 , &apos;EL M2&apos;</rawString>
</citation>
<citation valid="false">
<booktitle>Fig.6 Crescendo diagram 1. Gaifman, H., &amp;quot;Dependency System and Phrase Structure Systems, &amp;quot;Information and Control</booktitle>
<pages>8--304</pages>
<marker></marker>
<rawString>Fig.6 Crescendo diagram 1. Gaifman, H., &amp;quot;Dependency System and Phrase Structure Systems, &amp;quot;Information and Control 8,304-337(1965).</rawString>
</citation>
<citation valid="true">
<authors>
<author>A V Aho</author>
<author>J E Hoperoft</author>
<author>Ullman</author>
</authors>
<title>The Design and Analysis of Computer Algorithms,&amp;quot;</title>
<date>1971</date>
<publisher>Addison-Wesley Publishing Co.(</publisher>
<marker>Aho, Hoperoft, Ullman, 1971</marker>
<rawString>2. Aho, A.V., Hoperoft, J.E. and Ullman ,J.D., &amp;quot;The Design and Analysis of Computer Algorithms,&amp;quot; Addison-Wesley Publishing Co.( 19711).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>