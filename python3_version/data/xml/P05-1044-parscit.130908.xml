<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000227">
<title confidence="0.979393">
Contrastive Estimation: Training Log-Linear Models on Unlabeled Data*
</title>
<author confidence="0.967557">
Noah A. Smith and Jason Eisner
</author>
<affiliation confidence="0.929831">
Department of Computer Science / Center for Language and Speech Processing
Johns Hopkins University, Baltimore, MD 21218 USA
</affiliation>
<email confidence="0.995551">
{nasmith,jason}@cs.jhu.edu
</email>
<sectionHeader confidence="0.99734" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999801235294118">
Conditional random fields (Lafferty et al., 2001) are
quite effective at sequence labeling tasks like shal-
low parsing (Sha and Pereira, 2003) and named-
entity extraction (McCallum and Li, 2003). CRFs
are log-linear, allowing the incorporation of arbi-
trary features into the model. To train on unlabeled
data, we require unsupervised estimation methods
for log-linear models; few exist. We describe a novel
approach, contrastive estimation. We show that the
new technique can be intuitively understood as ex-
ploiting implicit negative evidence and is computa-
tionally efficient. Applied to a sequence labeling
problem—POS tagging given a tagging dictionary
and unlabeled text—contrastive estimation outper-
forms EM (with the same feature set), is more robust
to degradations of the dictionary, and can largely re-
cover by modeling additional features.
</bodyText>
<sectionHeader confidence="0.999516" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999370636363636">
Finding linguistic structure in raw text is not easy.
The classical forward-backward and inside-outside
algorithms try to guide probabilistic models to dis-
cover structure in text, but they tend to get stuck in
local maxima (Charniak, 1993). Even when they
avoid local maxima (e.g., through clever initializa-
tion) they typically deviate from human ideas of
what the “right” structure is (Merialdo, 1994).
One strategy is to incorporate domain knowledge
into the model’s structure. Instead of blind HMMs
or PCFGs, one could use models whose features
</bodyText>
<footnote confidence="0.99164375">
*This work was supported by a Fannie and John Hertz
Foundation fellowship to the first author and NSF ITR grant IIS-
0313193 to the second author. The views expressed are not nec-
essarily endorsed by the sponsors. The authors also thank three
anonymous ACL reviewers for helpful comments, colleagues
at JHU CLSP (especially David Smith and Roy Tromble) and
Miles Osborne for insightful feedback, and Eric Goldlust and
Markus Dreyer for Dyna language support.
</footnote>
<bodyText confidence="0.999502131578947">
are crafted to pay attention to a range of domain-
specific linguistic cues. Log-linear models can be so
crafted and have already achieved excellent perfor-
mance when trained on annotated data, where they
are known as “maximum entropy” models (Ratna-
parkhi et al., 1994; Rosenfeld, 1994).
Our goal is to learn log-linear models from
unannotated data. Since the forward-backward
and inside-outside algorithms are instances of
Expectation-Maximization (EM) (Dempster et al.,
1977), a natural approach is to construct EM algo-
rithms that handle log-linear models. Riezler (1999)
did so, then resorted to an approximation because
the true objective function was hard to normalize.
Stepping back from EM, we may generally en-
vision parameter estimation for probabilistic mod-
eling as pushing probability mass toward the train-
ing examples. We must consider not only where
the learner pushes the mass, but also from where the
mass is taken. In this paper, we describe an alterna-
tive to EM: contrastive estimation (CE), which (un-
like EM) explicitly states the source of the probabil-
ity mass that is to be given to an example.1
One reason is to make normalization efficient. In-
deed, CE generalizes EM and other practical tech-
niques used to train log-linear models, including
conditional estimation (for the supervised case) and
Riezler’s approximation (for the unsupervised case).
The other reason to use CE is to improve accu-
racy. CE offers an additional way to inject domain
knowledge into unsupervised learning (Smith and
Eisner, 2005). CE hypothesizes that each positive
example in training implies a domain-specific set
of examples which are (for the most part) degraded
(§2). This class of implicit negative evidence pro-
vides the source of probability mass for the observed
example. We discuss the application of CE to log-
linear models in §3.
</bodyText>
<footnote confidence="0.9649835">
1Not to be confused with contrastive divergence minimiza-
tion (Hinton, 2003), a technique for training products of experts.
</footnote>
<page confidence="0.954622">
354
</page>
<note confidence="0.991621">
Proceedings of the 43rd Annual Meeting of the ACL, pages 354–362,
Ann Arbor, June 2005. c�2005 Association for Computational Linguistics
</note>
<bodyText confidence="0.999868555555555">
We are particularly interested in log-linear models
over sequences, like the conditional random fields
(CRFs) of Lafferty et al. (2001) and weighted CFGs
(Miyao and Tsujii, 2002). For a given sequence, im-
plicit negative evidence can be represented as a lat-
tice derived by finite-state operations (§4). Effec-
tiveness of the approach on POS tagging using un-
labeled data is demonstrated (§5). We discuss future
work (§6) and conclude (§7).
</bodyText>
<sectionHeader confidence="0.992142" genericHeader="method">
2 Implicit Negative Evidence
</sectionHeader>
<bodyText confidence="0.999903692307692">
Natural language is a delicate thing. For any plausi-
ble sentence, there are many slight perturbations of
it that will make it implausible. Consider, for ex-
ample, the first sentence of this section. Suppose
we choose one of its six words at random and re-
move it; on this example, odds are two to one that
the resulting sentence will be ungrammatical. Or,
we could randomly choose two adjacent words and
transpose them; none of the results are valid conver-
sational English. The learner we describe here takes
into account not only the observed positive exam-
ple, but also a set of similar but deprecated negative
examples.
</bodyText>
<subsectionHeader confidence="0.995014">
2.1 Learning setting
</subsectionHeader>
<bodyText confidence="0.999798">
Let x� = (x1, x2,...), be our observed example sen-
tences, where each xi E X, and let yz E � be the
unobserved correct hidden structure for xi (e.g., a
POS sequence). We seek a model, parameterized by
0, such that the (unknown) correct analysis yi is the
best analysis for xi (under the model). If yz were ob-
served, a variety of training criteria would be avail-
able (see Tab. 1), but yi is unknown, so none apply.
Typically one turns to the EM algorithm (Dempster
et al., 1977), which locally maximizes
</bodyText>
<equation confidence="0.997112">
Y � � Y
p X = xi  |θ~ =
i i
</equation>
<bodyText confidence="0.995931">
where X is a random variable over sentences and
Y a random variable over analyses (notation is of-
ten abbreviated, eliminating the random variables).
An often-used alternative to EM is a class of so-
called Viterbi approximations, which iteratively find
the probabilistically-best y� and then, on each itera-
tion, solve a supervised problem (see Tab. 1).
</bodyText>
<table confidence="0.993608421052632">
likelihood (JL) p xi, y*i  |θ~
Yjoint i
conditional Y p (y*i  |xi, θ~)
likelihood (CL) i
classification X δ(y*i , y(xi))
accuracy (Juang i
and Katagiri, 1992)
expected yi  |xi, θ J
classification Xp (*
accuracy (Klein and i
Manning, 2002)
negated boosting _ 1
loss (Collins, 2000) − Xp (y*i  |xi, 01
i
margin (Crammer γ s.t. k~θk ≤ 1; ∀i, ∀y =6 y*i ,
and Singer, 2001) θ~ · (~f(xi, y*i ) − ~f(xi, y)) ≥ γ
expected local Y Y p `j(Y ) = `j(y* i )  |xi, θ~
accuracy (Altun et � �
al., 2003) i j
</table>
<tableCaption confidence="0.98726925">
Table 1: Various supervised training criteria. All functions are
written so as to be maximized. None of these criteria are avail-
able for unsupervised estimation because they all depend on the
correct label, y*.
</tableCaption>
<subsectionHeader confidence="0.889992">
2.2 A new approach: contrastive estimation
</subsectionHeader>
<bodyText confidence="0.869827">
Our approach instead maximizes
</bodyText>
<equation confidence="0.9730005">
� �
p Xi = xi  |Xi ∈ N(xi), θ~ (2)
</equation>
<bodyText confidence="0.999958857142857">
where the “neighborhood” N(xi) C_ X is a set of
implicit negative examples plus the example xi it-
self. As in EM, p(xi ..., 0) is found by marginal-
izing over hidden variables (Eq. 1). Note that the
x&apos; E N(xi) are not treated as hard negative exam-
ples; we merely seek to move probability mass from
them to the observed x.
The neighborhood of x, N(x), contains examples
that are perturbations of x. We refer to the mapping
N : X —* 21 as the neighborhood function, and the
optimization of Eq. 2 as contrastive estimation (CE).
CE seeks to move probability mass from the
neighborhood of an observed xi to xi itself. The
learner hypothesizes that good models are those
which discriminate an observed example from its
neighborhood. Put another way, the learner assumes
not only that xi is good, but that xi is locally op-
timal in example space (X), and that alternative,
similar examples (from the neighborhood) are infe-
rior. Rather than explain all of the data, the model
must only explain (using hidden variables) why the
</bodyText>
<equation confidence="0.996348666666667">
� �
p X = xi, Y = y  |θ~ (1)
X
yEJ
Y
i
</equation>
<page confidence="0.854079">
355
</page>
<subsectionHeader confidence="0.441044">
likelihood criterion Ai Bi
</subsectionHeader>
<bodyText confidence="0.9998696">
observed sentence is better than its neighbors. Of
course, the validity of this hypothesis will depend
on the form of the neighborhood function.
Consider, as a concrete example, learning nat-
ural language syntax. In Smith and Eisner (2005),
we define a sentence’s neighborhood to be a set of
slightly-altered sentences that use the same lexemes,
as suggested at the start of this section. While their
syntax is degraded, the inferred meaning of any of
these altered sentences is typically close to the in-
tended meaning, yet the speaker chose x and not
one of the other x&apos; E N(x). Why? Deletions
are likely to violate subcategorization requirements,
and transpositions are likely to violate word order
requirements—both of which have something to do
with syntax. x was the most grammatical option that
conveyed the speaker’s meaning, hence (we hope)
roughly the most grammatical option in the neigh-
borhood N(x), and the syntactic model should make
it so.
</bodyText>
<sectionHeader confidence="0.999588" genericHeader="method">
3 Log-Linear Models
</sectionHeader>
<bodyText confidence="0.994107">
We have not yet specified the form of our probabilis-
tic model, only that it is parameterized by B� E Rn.
Log-linear models, which we will show are a natural
fit for CE, assign probability to an (example, label)
pair (x, y) according to
</bodyText>
<equation confidence="0.98337">
(x, y  |θ~� def Z M u (x, y |01 (3)
</equation>
<bodyText confidence="0.981205">
where the “unnormalized score” u(x, y |0) is
</bodyText>
<equation confidence="0.894333666666667">
� �
u x,y  |θ~ � def �
� exp θ~ · ~f(x, y) (4)
The notation above is defined as follows. f� X x
� �Rn�0 is a nonnegative vector feature function,
�
</equation>
<bodyText confidence="0.9793838">
and B E Rn are the corresponding feature weights
(the model’s parameters). Because the features can
take any form and need not be orthogonal, log-linear
models can capture arbitrary dependencies in the
data and cleanly incorporate them into a model.
Z(�B) (the partition function) is chosen so that
E(x,y) p(x, y  |0) = 1; i.e., Z(B) = E(x,y) u(x, y |
0). u is typically easy to compute for a given (x, y),
but Z may be much harder to compute. All the ob-
jective functions in this paper take the form
</bodyText>
<equation confidence="0.971496777777778">
Y
i P � �
P � �
(x,y)EAi p x, y  |θ~
(x,y)EBi p x, y  |θ~ (5)
joint {(xi, yz )} X x �
conditional {(xi, yz )} {xi} x �
marginal (a l`a EM) {xi} x � X x �
contrastive {xi} x � N(xi) x �
</equation>
<tableCaption confidence="0.9785225">
Table 2: Supervised (upper box) and unsupervised (lower box)
estimation with log-linear models in terms of Eq. 5.
</tableCaption>
<bodyText confidence="0.9935535">
where Ai C Bi (for each i). For log-linear models
this is simply
</bodyText>
<equation confidence="0.972068">
PY(x,y)EAi u (x, y  |θ) /
i P(x,y)EBi u (x, y  |θ) l6)
</equation>
<bodyText confidence="0.981726378378378">
So there is no need to compute Z(0), but we do need
to compute sums over A and B. Tab. 2 summarizes
some concrete examples; see also §3.1–3.2.
We would prefer to choose an objective function
such that these sums are easy. CE focuses on choos-
ing appropriate small contrast sets Bi, both for effi-
ciency and to guide the learner. The natural choice
for Ai (which is usually easier to sum over) is the set
of (x, y) that are consistent with what was observed
(partially or completely) about the ith training ex-
ample, i.e., the numerator E(x,y)EAi p(x, y  |�B) is
designed to find p(observation i |0). The idea is to
focus the probability mass within Bi on the subset
Ai where the i the training example is known to be.
It is possible to build log-linear models where
each xi is a sequence.2 In this paper, each model
is a weighted finite-state automaton (WFSA) where
states correspond to POS tags. The parameter vector
B E Rn specifies a weight for each of the n transi-
tions in the automaton. y is a hidden path through
the automaton (determining a POS sequence), and x
is the string it emits. u(x, y  |0) is defined by ap-
plying exp to the total weight of all transitions in y.
This is an example of Eqs. 4 and 6 where fj(x, y) is
the number of times the path y takes the jth transi-
tion.
The partition function Z( 0) of the WFSA is found
by adding up the u-scores of all paths through the
WFSA. For a k-state WFSA, this equates to solving
a linear system of k equations in k variables (Tarjan,
1981). But if the WFSA contains cycles this infi-
nite sum may diverge. Alternatives to exact com-
2These are exemplified by CRFs (Lafferty et al., 2001),
which can be viewed alternately as undirected dynamic graph-
ical models with a chain topology, as log-linear models over
entire sequences with local features, or as WFSAs. Because
“CRF” implies CL estimation, we use the term “WFSA.”
</bodyText>
<page confidence="0.995114">
356
</page>
<bodyText confidence="0.9999746">
putation, like random sampling (see, e.g., Abney,
1997), will not help to avoid this difficulty; in addi-
tion, convergence rates are in general unknown and
bounds difficult to prove. We would prefer to sum
over finitely many paths in Bi.
</bodyText>
<subsectionHeader confidence="0.995801">
3.1 Parameter estimation (supervised)
</subsectionHeader>
<bodyText confidence="0.999866388888889">
For log-linear models, both CL and JL estimation
(Tab. 1) are available. In terms of Eq. 5, both
set Ai = {(xi, yz )}. The difference is in B: for
JL, Bi = X × % so summing over Bi is equiva-
lent to computing the partition function Z(~θ). Be-
cause that sum is typically difficult, CL is preferred;
Bi = {xi} × � for xi, which is often tractable.
For sequence models like WFSAs it is computed us-
ing a dynamic programming algorithm (the forward
algorithm for WFSAs). Klein and Manning (2002)
argue for CL on grounds of accuracy, but see also
Johnson (2001). See Tab. 2; other contrast sets Bi
are also possible.
When Bi contains only xi paired with the current
best competitor (ˆy) to y* , we have a technique that
resembles maximum margin training (Crammer and
Singer, 2001). Note that yˆ will then change across
training iterations, making Bi dynamic.
</bodyText>
<subsectionHeader confidence="0.996547">
3.2 Parameter estimation (unsupervised)
</subsectionHeader>
<bodyText confidence="0.999208173913043">
The difference between supervised and unsuper-
vised learning is that in the latter case, Ai is forced
to sum over label sequences y because they weren’t
observed. In the unsupervised case, CE maximizes
In terms of Eq. 5, A = {xi}×� and B = N(xi)×Y.
EM’s objective function (Eq. 1) is a special case
where N(xi) = X, for all i, and the denomina-
tor becomes Z(~θ). An alternative is to restrict the
neighborhood to the set of observed training exam-
ples rather than all possible examples (Riezler,1999;
Johnson et al., 1999; Riezler et al., 2000):
Another variant is conditional EM. Let xi be a
pair (xi,1, xi,2) and define the neighborhood to be
N(xi) = {¯x = (¯x1, xi,2)}. This approach has
been applied to conditional densities (Jebara and
Pentland, 1998) and conditional training of acoustic
models with hidden variables (Valtchev et al., 1997).
Generally speaking, CE is equivalent to some
kind of EM when N(·) is an equivalence relation
on examples, so that the neighborhoods partition X.
Then if q is any fixed (untrained) distribution over
neighborhoods, CE equates to running EM on the
model defined by
</bodyText>
<equation confidence="0.970708">
P (x, y|θ~) =fq (N(x)) - p (x, y  |N(x), θ) (9)
</equation>
<bodyText confidence="0.994108473684211">
CE may also be viewed as an importance sam-
pling approximation to EM, where the sample space
X is replaced by N(xi). We will demonstrate ex-
perimentally that CE is not just an approximation to
EM; it makes sense from a modeling perspective.
In §4, we will describe neighborhoods of se-
quences that can be represented as acyclic lattices
built directly from an observed sequence. The sum
over Bi is then the total u-score in our model of all
paths in the neighborhood lattice. To compute this,
intersect the WFSA and the lattice, obtaining a new
acyclic WFSA, and sum the u-scores of all its paths
(Eisner, 2002) using a simple dynamic programming
algorithm akin to the forward algorithm. The sum
over Ai may be computed similarly.
CE with lattice neighborhoods is not confined to
the WFSAs of this paper; when estimating weighted
CFGs, the key algorithm is the inside algorithm for
lattice parsing (Smith and Eisner, 2005).
</bodyText>
<subsectionHeader confidence="0.997348">
3.3 Numerical optimization
</subsectionHeader>
<bodyText confidence="0.999966833333333">
To maximize the neighborhood likelihood (Eq. 7),
we apply a standard numerical optimization method
(L-BFGS) that iteratively climbs the function using
knowledge of its value and gradient (Liu and No-
cedal, 1989). The partial derivative of ,GN with re-
spect to the jth feature weight θj is
</bodyText>
<equation confidence="0.984591071428571">
( ) �
LN θ~ = log
i
( )
u xi, y  |θ~
( ) (7)
u x, y  |θ~
E
yEJ
E
(x,y)EN(x;)�J
�u (xi  |θ) /E u (xj  |θ J (8) ∂LN E= E~θ [fj  |xi] − E~θ [fj  |N(xi)] (10)
i
∂θj
</equation>
<bodyText confidence="0.999792625">
Viewed as a CE method, this approach (though ef-
fective when there are few hypotheses) seems mis-
guided; the objective says to move mass to each ex-
ample at the expense of all other training examples.
This looks similar to the gradient of log-linear like-
lihood functions on complete data, though the ex-
pectation on the left is in those cases replaced by an
observed feature value fj(xi, yz ). In this paper, the
</bodyText>
<page confidence="0.992684">
357
</page>
<figureCaption confidence="0.983431">
Figure 1: A sentence and three lattices representing some of its neighborhoods. The transducer used to generate each neighborhood
lattice (via composition with the sentence, followed by determinization and minimization) is shown to its right.
</figureCaption>
<figure confidence="0.998726916666667">
?:E
?
natural language is a delicate thing
a. DEL1WORD:
natural language is a delicate thing
? ?
?:E
language is a delicate thing
? ?
b. TRANS1:
natural language is a delicate thing
x m : x m−1 xm−1:xm
..
(Each bigram xi+1
i in the sentence has an
arc pair (xi : xi+1, xi+1 : xi).)
?:E
?
E
?
x1 :
x2 x2: x1
x2: x3 x3:x2
is a delicate thing
?
E
?:E
c. DEL1SUBSEQ:
natural language is a delicate thing
language
is
is
a
a
a delicate
thing
</figure>
<bodyText confidence="0.9994225">
expectations in Eq. 10 are computed by the forward-
backward algorithm generalized to lattices.
We emphasize that the function ,GN is not glob-
ally concave; our search will lead only to a local op-
timum.3 Therefore, as with all unsupervised statisti-
cal learning, the bias in the initialization of B will af-
fect the quality of the estimate and the performance
of the method. In future we might wish to apply
techniques for avoiding local optima, such as deter-
ministic annealing (Smith and Eisner, 2004).
</bodyText>
<sectionHeader confidence="0.998467" genericHeader="method">
4 Lattice Neighborhoods
</sectionHeader>
<bodyText confidence="0.945703638888889">
We next consider some non-classical neighborhood
functions for sequences. When X = E+ for some
symbol alphabet E, certain kinds of neighborhoods
have natural, compact representations. Given an in-
put string x = (x1, x2, ..., xm), we write xji for
the substring (xi, xi+1, ..., xj) and xm1 for the whole
string. Consider first the neighborhood consisting of
all sequences generated by deleting a single symbol
from the m-length sequence xm1 :
DEL1WORD(xi ) = {xl−1xm`+1 1 &lt; ` &lt; m} U {xm1 }
This set consists of m + 1 strings and can be com-
pactly represented as a lattice (see Fig. 1a). Another
3Without any hidden variables, Z is globally concave.
neighborhood involves transposing any pair of adja-
cent words: r 1
TRANS1(xi ) = 1 xl—lx`+1x`xm`+2 1 &lt; ` &lt; mI U {xm1 }
This set can also be compactly represented as a lat-
tice (Fig. 1b). We can combine DEL1WORD and
TRANS1 by taking their union; this gives a larger
neighborhood, DELORTRANS1.4
The DEL1SUBSEQ neighborhood allows the dele-
tion of any contiguous subsequence of words that is
strictly smaller than the whole sequence. This lattice
is similar to that of DEL1WORD, but adds some arcs
(Fig. 1c); the size of this neighborhood is O(m2).
A final neighborhood we will consider is
LENGTH, which consists of Em. CE with the
LENGTH neighborhood is very similar to EM; it is
equivalent to using EM to estimate the parameters
of a model defined by Eq. 9 where q is any fixed
(untrained) distribution over lengths.
When the vocabulary E is the set of words in a
natural language, it is never fully known; approx-
imations for defining LENGTH = Em include us-
ing observed E from the training set (as we do) or
adding a special OOV symbol.
</bodyText>
<footnote confidence="0.950175">
4In general, the lattices are obtained by composing the ob-
served sequence with a small FST and determinizing and mini-
mizing the result; the relevant transducers are shown in Fig. 1.
</footnote>
<page confidence="0.991358">
358
</page>
<table confidence="0.982732909090909">
12K 24K 48K 96K
CRF (supervised) sel. oracle sel. oracle sel. oracle sel. oracle
HMM (supervised)
100.0 99.8 99.8 99.5
99.3 98.5 97.9 97.2
LENGTH 74.9 77.4 78.7 81.5 78.3 81.3 78.9 79.3
DELORTR1 70.8 70.8 78.6 78.6 78.3 79.1 75.2 78.8
TRANS1 72.7 72.7 77.2 77.2 78.1 79.4 74.7 79.0
EM 49.5 52.9 55.5 58.0 59.4 60.9 60.9 62.1
DEL1WORD 55.4 55.6 58.6 60.3 59.9 60.2 59.9 60.4
DEL1SSQ 53.0 53.3 55.0 56.7 55.3 55.4 57.3 58.7
</table>
<figure confidence="0.962429352941176">
random expected
35.2
35.1
35.1
35.1
ambiguous words 6,244 12,923 25,879 51,521
% correct tags
100
70
40
90
60
50
30
80
0 0.1 1 10
smoothing parameter
</figure>
<figureCaption confidence="0.8625304">
Figure 2: Percent ambiguous words tagged correctly in the 96K dataset, as the smoothing parameter (A in the case of EM, or in the
CE cases) varies. The model selected from each criterion using unlabeled development data is circled in the plot. Dataset size is
varied in the table at right, which shows models selected using unlabeled development data (“sel.”) and using an oracle (“oracle,”
the highest point on a curve). Across conditions, some neighborhood roughly splits the difference between supervised models and
EM.
</figureCaption>
<page confidence="0.870031">
8
</page>
<sectionHeader confidence="0.99658" genericHeader="method">
5 Experiments
</sectionHeader>
<bodyText confidence="0.998415">
We compare CE (using neighborhoods from §4)
with EM on POS tagging using unlabeled data.
</bodyText>
<subsectionHeader confidence="0.999241">
5.1 Comparison with EM
</subsectionHeader>
<bodyText confidence="0.998973791666667">
Our experiments are inspired by those in
Merialdo (1994); we train a trigram tagger using
only unlabeled data, assuming complete knowledge
of the tagging dictionary.5 In our experiments,
we varied the amount of data available (12K–96K
words of WSJ), the heaviness of smoothing, and the
estimation criterion. In all cases, training stopped
when the relative change in the criterion fell below
10−4 between steps (typically G 100 steps). For this
corpus and tag set, on average, a tagger must decide
between 2.3 tags for a given token.
The generative model trained by EM was identical
to Merialdo’s: a second-order HMM. We smoothed
using a flat Dirichlet prior with single parameter A
for all distributions (A-values from 0 to 10 were
tested).6 The model was initialized uniformly.
The log-linear models trained by CE used the
same feature set, though the feature weights are no
longer log-probabilities and there are no sum-to-one
constraints. In addition to an unsmoothed trial, we
tried diagonal Gaussian priors (quadratic penalty)
with u2 ranging from 0.1 to 10. The models were
initialized with all Bj = 0.
Unsupervised model selection. For each (crite-
</bodyText>
<footnote confidence="0.98985725">
5Without a tagging dictionary, tag names are interchange-
able and cannot be evaluated on gold-standard accuracy. We
address the tagging dictionary assumption in §5.2.
6This is equivalent to add-A smoothing within every M step.
</footnote>
<bodyText confidence="0.99923303030303">
rion, dataset) pair, we selected the smoothing trial
that gave the highest estimation criterion score on a
5K-word development set (also unlabeled).
Results. The plot in Fig. 2 shows the Viterbi ac-
curacy of each criterion trained on the 96K-word
dataset as smoothing was varied; the table shows,
for each (criterion, dataset) pair the performance of
the selected A or u2 and the one chosen by an oracle.
LENGTH, TRANS1, and DELORTRANS1 are con-
sistently the best, far out-stripping EM. These gains
dwarf the performance of EM on over 1.1M words
(66.6% as reported by Smith and Eisner (2004)),
even when the latter uses improved search (70.0%).
DEL1WORD and DEL1SUBSEQ, on the other hand,
are poor, even worse than EM on larger datasets.
An important result is that neighborhoods do not
succeed by virtue of approximating log-linear EM;
if that were so, we would expect larger neighbor-
hoods (like DEL1SUBSEQ) to out-perform smaller
ones (like TRANS1)—this is not so. DEL1SUBSEQ
and DEL1WORD are poor because they do not give
helpful classes of negative evidence: deleting a word
or a short subsequence often does very little dam-
age. Put another way, models that do a good job of
explaining why no word or subsequence should be
deleted do not do so using the familiar POS cate-
gories.
The LENGTH neighborhood is as close to log-
linear EM as it is practical to get. The inconsis-
tencies in the LENGTH curve (Fig. 2) are notable
and also appeared at the other training set sizes.
Believing this might be indicative of brittleness in
Viterbi label selection, we computed the expected
</bodyText>
<page confidence="0.995886">
359
</page>
<table confidence="0.997522941176471">
DELORTRANS1 TRANS1 LENGTH EM
trigram trigram trigram
words in trigram trigram trigram trigram
+ spelling + spelling + spelling
tagging dict. sel. oracle sel. oracle sel. oracle sel. oracle sel. oracle sel. oracle sel. oracle
all train &amp; dev.
1st 500 sents.
count &gt; 2
count &gt; 3
78.3 90.1 80.9 91.1 90.4 90.4 88.7 90.9 87.8 90.4 87.1 91.9 78.0 84.4 69.5
72.3 84.8 80.2 90.8 80.8 82.9 88.1 90.1 68.1 78.3 76.9 83.2 77.2 80.5 60.5
69.5 81.3 79.5 90.3 77.0 78.6 78.7 90.1 65.3 75.2 73.3 73.8 70.1 70.9 56.6
65.0 77.2 78.3 89.8 71.7 73.4 78.4 89.5 62.8 72.3 73.2 73.6 66.5 66.5 51.0
13,150 2.3
13,841 3.7
14,780 4.4
15,996 5.5
</table>
<tableCaption confidence="0.940948333333333">
Table 3: Percent of all words correctly tagged in the 24K dataset, as the tagging dictionary is diluted. Unsupervised model selection
(“sel.”) and oracle model selection (“oracle”) across smoothing parameters are shown. Note that we evaluated on all words (unlike
Fig. 3) and used 17 coarse tags, giving higher scores than in Fig. 2.
</tableCaption>
<bodyText confidence="0.999815625">
accuracy of the LENGTH models; the same “dips”
were present. This could indicate that the learner
was trapped in a local maximum, suggesting that,
since other criteria did not exhibit this behavior,
LENGTH might be a bumpier objective surface. It
would be interesting to measure the bumpiness (sen-
sitivity to initial conditions) of different contrastive
objectives.7
</bodyText>
<subsectionHeader confidence="0.999179">
5.2 Removing knowledge, adding features
</subsectionHeader>
<bodyText confidence="0.999994791666667">
The assumption that the tagging dictionary is com-
pletely known is difficult to justify. While a POS
lexicon might be available for a new language, cer-
tainly it will not give exhaustive information about
all word types in a corpus. We experimented with
removing knowledge from the tagging dictionary,
thereby increasing the difficulty of the task, to see
how well various objective functions could recover.
One means to recovery is the addition of features to
the model—this is easy with log-linear models but
not with classical generative models.
We compared the performance of the best
neighborhoods (LENGTH, DELORTRANS1, and
TRANS1) from the first experiment, plus EM, us-
ing three diluted dictionaries and the original one,
on the 24K dataset. A diluted dictionary adds (tag,
word) entries so that rare words are allowed with
any tag, simulating zero prior knowledge about the
word. “Rare” might be defined in different ways;
we used three definitions: words unseen in the first
500 sentences (about half of the 24K training cor-
pus); singletons (words with count &lt; 1); and words
with count &lt; 2. To allow more trials, we projected
the original 45 tags onto a coarser set of 17 (e.g.,
</bodyText>
<footnote confidence="0.987635666666667">
7A reviewer suggested including a table comparing different
criterion values for each learned model (i.e., each neighborhood
evaluated on each other neighborhood). This table contained no
big surprises; we note only that most models were the best on
their own criterion, and among unsupervised models, LENGTH
performed best on the CL criterion.
</footnote>
<bodyText confidence="0.991357641025641">
RB* ADV).
To take better advantage of the power of log-
linear models—specifically, their ability to incorpo-
rate novel features—we also ran trials augmenting
the model with spelling features, allowing exploita-
tion of correlations between parts of the word and a
possible tag. Our spelling features included all ob-
served 1-, 2-, and 3-character suffixes, initial capital-
ization, containing a hyphen, and containing a digit.
Results. Fig. 3 plots tagging accuracy (on am-
biguous words) for each dictionary on the 24K
dataset. The x-axis is the smoothing parameter (A
for EM, Q2 for CE). Note that the different plots are
not comparable, because their y-axes are based on
different sets of ambiguous words.
So that models under different dilution conditions
could be compared, we computed accuracy on all
words; these are shown in Tab. 3. The reader will
notice that there is often a large gap between unsu-
pervised and oracle model selection; this draws at-
tention to a need for better unsupervised regulariza-
tion and model selection techniques.
Without spelling features, all models perform
worse as knowledge is removed. But LENGTH suf-
fers most substantially, relative to its initial perfor-
mance. Why is this? LENGTH (like EM) requires
the model to explain why a given sentence was seen
instead of some other sentence of the same length.
One way to make this explanation is to manipulate
emission weights (i.e., for (tag, word) features): the
learner can construct a good class-based unigram
model of the text (where classes are tags). This is
good for the LENGTH objective, but not for learning
good POS tag sequences.
In contrast, DELORTRANS1 and TRANS1 do not
allow the learner to manipulate emission weights for
words not in the sentence. The sentence’s good-
ness must be explained in a way other than by the
words it contains: namely through the POS tags. To
</bodyText>
<page confidence="0.993622">
360
</page>
<bodyText confidence="0.999947380952381">
check this intuition, we built local normalized mod-
els p(word I tag) from the parameters learned by
TRANS1 and LENGTH. For each tag, these were
compared by KL divergence to the empirical lexical
distributions (from labeled data). For the ten tags
accounting for 95.6% of the data, LENGTH more
closely matched the empirical lexical distributions.
LENGTH is learning a correct distribution, but that
distribution is not helpful for the task.
The improvement from adding spelling features
is striking: DELORTRANS1 and TRANS1 recover
nearly completely (modulo the model selection
problem) from the diluted dictionaries. LENGTH
sees far less recovery. Hence even our improved fea-
ture sets cannot compensate for the choice of neigh-
borhood. This highlights our argument that a neigh-
borhood is not an approximation to log-linear EM;
LENGTH tries very hard to approximate log-linear
EM but requires a good dictionary to be on par with
the other criteria. Good neighborhoods, rather, per-
form well in their own right.
</bodyText>
<sectionHeader confidence="0.999825" genericHeader="method">
6 Future Work
</sectionHeader>
<bodyText confidence="0.93395764">
Foremost for future work is the “minimally super-
vised” paradigm in which a small amount of la-
beled data is available (see, e.g., Clark et al. (2003)).
Unlike well-known “bootstrapping” approaches
(Yarowsky, 1995), EM and CE have the possible ad-
vantage of maintaining posteriors over hidden labels
(or structure) throughout learning; bootstrapping ei-
ther chooses, for each example, a single label, or
remains completely agnostic. One can envision a
mixed objective function that tries to fit the labeled
examples while discriminating unlabeled examples
from their neighborhoods.8
Regardless of how much (if any) data are labeled,
the question of good smoothing techniques requires
more attention. Here we used a single zero-mean,
constant-variance Gaussian prior for all parameters.
Better performance might be achieved by allowing
different variances for different feature types. This
8Zhu and Ghahramani (2002) explored the semi-supervised
classification problem for spatially-distributed data, where
some data are labeled, using a Boltzmann machine to model
the dataset. For them, the Markov random field is over label-
ing configurations for all examples, not, as in our case, com-
plex structured labels for a particular example. Hence their B
(Eq. 5), though very large, was finite and could be sampled.
</bodyText>
<figure confidence="0.988173323529412">
All train &amp; development words are in the tagging dictionary:
85
80
75
70
65
60
55
50
45
40
Tagging dictionary taken from the first 500 sentences:
85
80
75
70
65
60
55
50
45
40
Tagging dictionary contains words with count &gt; 2:
85
80
75
70
65
60
55
50
45
40
Tagging dictionary contains words with count &gt; 3:
</figure>
<figureCaption confidence="0.8193105">
Figure 3: Percent ambiguous words tagged correctly (with
coarse tags) on the 24K dataset, as the dictionary is diluted and
</figureCaption>
<bodyText confidence="0.9639726">
with spelling features. Each graph corresponds to a different
level of dilution. Models selected using unlabeled development
data are circled. These plots (unlike Tab. 3) are not compara-
ble to each other because each is measured on a different set of
ambiguous words.
</bodyText>
<figure confidence="0.977540666666667">
0 0.1 1 10
smoothing parameter
DELORTRANS1 E
TRANS1 ❑
LENGTH 4 5
EM x
8
85
0
85
75
80
0
75
70
65
60 65
55
50 50
45
40
</figure>
<page confidence="0.995094">
361
</page>
<bodyText confidence="0.9996299">
leads to a need for more efficient tuning of the prior
parameters on development data.
The effectiveness of CE (and different neighbor-
hoods) for dependency grammar induction is ex-
plored in Smith and Eisner (2005) with considerable
success. We introduce there the notion of design-
ing neighborhoods to guide learning for particular
tasks. Instead of guiding an unsupervised learner to
match linguists’ annotations, the choice of neighbor-
hood might be made to direct the learner toward hid-
den structure that is helpful for error-correction tasks
like spelling correction and punctuation restoration
that may benefit from a grammatical model.
Wang et al. (2002) discuss the latent maximum
entropy principle. They advocate running EM many
times and selecting the local maximum that maxi-
mizes entropy. One might do the same for the local
maxima of any CE objective, though theoretical and
experimental support for this idea remain for future
work.
</bodyText>
<sectionHeader confidence="0.999412" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.999971466666667">
We have presented contrastive estimation, a new
probabilistic estimation criterion that forces a model
to explain why the given training data were better
than bad data implied by the positive examples. We
have shown that for unsupervised sequence model-
ing, this technique is efficient and drastically out-
performs EM; for POS tagging, the gain in accu-
racy over EM is twice what we would get from ten
times as much data and improved search, sticking
with EM’s criterion (Smith and Eisner, 2004). On
this task, with certain neighborhoods, contrastive
estimation suffers less than EM does from dimin-
ished prior knowledge and is able to exploit new
features—that EM can’t—to largely recover from
the loss of knowledge.
</bodyText>
<sectionHeader confidence="0.999644" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999917933333333">
S. P. Abney. 1997. Stochastic attribute-value grammars. Com-
putational Linguistics, 23(4):597–617.
Y. Altun, M. Johnson, and T. Hofmann. 2003. Investigating
loss functions and optimization methods for discriminative
learning of label sequences. In Proc. ofEMNLP.
E. Charniak. 1993. Statistical Language Learning. MIT Press.
S. Clark, J. R. Curran, and M. Osborne. 2003. Bootstrapping
POS taggers using unlabelled data. In Proc. of CoNLL.
M. Collins. 2000. Discriminative reranking for natural lan-
guage parsing. In Proc. ofICML.
K. Crammer and Y. Singer. 2001. On the algorithmic imple-
mentation of multiclass kernel-based vector machines. Jour-
nal ofMachine Learning Research, 2(5):265–92.
A. Dempster, N. Laird, and D. Rubin. 1977. Maximum likeli-
hood estimation from incomplete data via the EM algorithm.
Journal of the Royal Statistical Society B, 39:1–38.
J. Eisner. 2002. Parameter estimation for probabilistic finite-
state transducers. In Proc. ofACL.
G. E. Hinton. 2003. Training products of experts by mini-
mizing contrastive divergence. Technical Report GCNU TR
2000-004, University College London.
T. Jebara and A. Pentland. 1998. Maximum conditional like-
lihood via bound maximization and the CEM algorithm. In
Proc. ofNIPS.
M. Johnson, S. Geman, S. Canon, Z. Chi, and S. Riezler. 1999.
Estimators for stochastic “unification-based” grammars. In
Proc. ofACL.
M. Johnson. 2001. Joint and conditional estimation of tagging
and parsing models. In Proc. ofACL.
B.-H. Juang and S. Katagiri. 1992. Discriminative learning for
minimum error classification. IEEE Trans. Signal Process-
ing, 40:3043–54.
D. Klein and C. D. Manning. 2002. Conditional structure vs.
conditional estimation in NLP models. In Proc. ofEMNLP.
J. Lafferty, A. McCallum, and F. Pereira. 2001. Conditional
random fields: Probabilistic models for segmenting and la-
beling sequence data. In Proc. ofICML.
D. C. Liu and J. Nocedal. 1989. On the limited memory method
for large scale optimization. Mathematical Programming B,
45(3):503–28.
A. McCallum and W. Li. 2003. Early results for named-
entity extraction with conditional random fields. In Proc.
of CoNLL.
B. Merialdo. 1994. Tagging English text with a probabilistic
model. Computational Linguistics, 20(2):155–72.
Y. Miyao and J. Tsujii. 2002. Maximum entropy estimation for
feature forests. In Proc. ofHLT.
A. Ratnaparkhi, S. Roukos, and R. T. Ward. 1994. A maximum
entropy model for parsing. In Proc. ofICSLP.
S. Riezler, D. Prescher, J. Kuhn, and M. Johnson. 2000. Lex-
icalized stochastic modeling of constraint-based grammars
using log-linear measures and EM training. In Proc. ofACL.
S. Riezler. 1999. Probabilistic Constraint Logic Programming.
Ph.D. thesis, Universit¨at T¨ubingen.
R. Rosenfeld. 1994. Adaptive Statistical Language Modeling:
A Maximum Entropy Approach. Ph.D. thesis, CMU.
F. Sha and F. Pereira. 2003. Shallow parsing with conditional
random fields. In Proc. of HLT-NAACL.
N. A. Smith and J. Eisner. 2004. Annealing techniques for
unsupervised statistical language learning. In Proc. ofACL.
N. A. Smith and J. Eisner. 2005. Guiding unsupervised gram-
mar induction using contrastive estimation. In Proc. of IJ-
CAI Workshop on Grammatical Inference Applications.
R. E. Tarjan. 1981. A unified approach to path problems. Jour-
nal of the ACM, 28(3):577–93.
V. Valtchev, J. J. Odell, P. C. Woodland, and S. J. Young. 1997.
MMIE training of large vocabulary speech recognition sys-
tems. Speech Communication, 22(4):303–14.
S. Wang, R. Rosenfeld, Y. Zhao, and D. Schuurmans. 2002.
The latent maximum entropy principle. In Proc. ofISIT.
D. Yarowsky. 1995. Unsupervised word sense disambiguation
rivaling supervised methods. In Proc. ofACL.
X. Zhu and Z. Ghahramani. 2002. Towards semi-supervised
classification with Markov random fields. Technical Report
CMU-CALD-02-106, Carnegie Mellon University.
</reference>
<page confidence="0.99826">
362
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.917167">
<title confidence="0.99725">Estimation: Training Log-Linear Models on Unlabeled</title>
<author confidence="0.99925">A Smith Eisner</author>
<affiliation confidence="0.999575">Department of Computer Science / Center for Language and Speech Processing</affiliation>
<address confidence="0.993615">Johns Hopkins University, Baltimore, MD 21218 USA</address>
<abstract confidence="0.995787555555556">Conditional random fields (Lafferty et al., 2001) are quite effective at sequence labeling tasks like shallow parsing (Sha and Pereira, 2003) and namedentity extraction (McCallum and Li, 2003). CRFs allowing the incorporation of arbifeatures into the model. To train on we require methods for log-linear models; few exist. We describe a novel We show that the new technique can be intuitively understood as exnegative evidence is computationally efficient. Applied to a sequence labeling problem—POS tagging given a tagging dictionary and unlabeled text—contrastive estimation outperforms EM (with the same feature set), is more robust to degradations of the dictionary, and can largely recover by modeling additional features.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>S P Abney</author>
</authors>
<title>Stochastic attribute-value grammars.</title>
<date>1997</date>
<journal>Computational Linguistics,</journal>
<volume>23</volume>
<issue>4</issue>
<contexts>
<context position="12383" citStr="Abney, 1997" startWordPosition="2152" endWordPosition="2153">WFSA is found by adding up the u-scores of all paths through the WFSA. For a k-state WFSA, this equates to solving a linear system of k equations in k variables (Tarjan, 1981). But if the WFSA contains cycles this infinite sum may diverge. Alternatives to exact com2These are exemplified by CRFs (Lafferty et al., 2001), which can be viewed alternately as undirected dynamic graphical models with a chain topology, as log-linear models over entire sequences with local features, or as WFSAs. Because “CRF” implies CL estimation, we use the term “WFSA.” 356 putation, like random sampling (see, e.g., Abney, 1997), will not help to avoid this difficulty; in addition, convergence rates are in general unknown and bounds difficult to prove. We would prefer to sum over finitely many paths in Bi. 3.1 Parameter estimation (supervised) For log-linear models, both CL and JL estimation (Tab. 1) are available. In terms of Eq. 5, both set Ai = {(xi, yz )}. The difference is in B: for JL, Bi = X × % so summing over Bi is equivalent to computing the partition function Z(~θ). Because that sum is typically difficult, CL is preferred; Bi = {xi} × � for xi, which is often tractable. For sequence models like WFSAs it is</context>
</contexts>
<marker>Abney, 1997</marker>
<rawString>S. P. Abney. 1997. Stochastic attribute-value grammars. Computational Linguistics, 23(4):597–617.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Altun</author>
<author>M Johnson</author>
<author>T Hofmann</author>
</authors>
<title>Investigating loss functions and optimization methods for discriminative learning of label sequences.</title>
<date>2003</date>
<booktitle>In Proc. ofEMNLP.</booktitle>
<marker>Altun, Johnson, Hofmann, 2003</marker>
<rawString>Y. Altun, M. Johnson, and T. Hofmann. 2003. Investigating loss functions and optimization methods for discriminative learning of label sequences. In Proc. ofEMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Charniak</author>
</authors>
<title>Statistical Language Learning.</title>
<date>1993</date>
<booktitle>In Proc. of CoNLL.</booktitle>
<publisher>MIT Press.</publisher>
<contexts>
<context position="1362" citStr="Charniak, 1993" startWordPosition="197" endWordPosition="198">ely understood as exploiting implicit negative evidence and is computationally efficient. Applied to a sequence labeling problem—POS tagging given a tagging dictionary and unlabeled text—contrastive estimation outperforms EM (with the same feature set), is more robust to degradations of the dictionary, and can largely recover by modeling additional features. 1 Introduction Finding linguistic structure in raw text is not easy. The classical forward-backward and inside-outside algorithms try to guide probabilistic models to discover structure in text, but they tend to get stuck in local maxima (Charniak, 1993). Even when they avoid local maxima (e.g., through clever initialization) they typically deviate from human ideas of what the “right” structure is (Merialdo, 1994). One strategy is to incorporate domain knowledge into the model’s structure. Instead of blind HMMs or PCFGs, one could use models whose features *This work was supported by a Fannie and John Hertz Foundation fellowship to the first author and NSF ITR grant IIS0313193 to the second author. The views expressed are not necessarily endorsed by the sponsors. The authors also thank three anonymous ACL reviewers for helpful comments, colle</context>
</contexts>
<marker>Charniak, 1993</marker>
<rawString>E. Charniak. 1993. Statistical Language Learning. MIT Press. S. Clark, J. R. Curran, and M. Osborne. 2003. Bootstrapping POS taggers using unlabelled data. In Proc. of CoNLL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Collins</author>
</authors>
<title>Discriminative reranking for natural language parsing.</title>
<date>2000</date>
<booktitle>In Proc. ofICML.</booktitle>
<contexts>
<context position="6488" citStr="Collins, 2000" startWordPosition="1046" endWordPosition="1047">andom variable over sentences and Y a random variable over analyses (notation is often abbreviated, eliminating the random variables). An often-used alternative to EM is a class of socalled Viterbi approximations, which iteratively find the probabilistically-best y� and then, on each iteration, solve a supervised problem (see Tab. 1). likelihood (JL) p xi, y*i |θ~ Yjoint i conditional Y p (y*i |xi, θ~) likelihood (CL) i classification X δ(y*i , y(xi)) accuracy (Juang i and Katagiri, 1992) expected yi |xi, θ J classification Xp (* accuracy (Klein and i Manning, 2002) negated boosting _ 1 loss (Collins, 2000) − Xp (y*i |xi, 01 i margin (Crammer γ s.t. k~θk ≤ 1; ∀i, ∀y =6 y*i , and Singer, 2001) θ~ · (~f(xi, y*i ) − ~f(xi, y)) ≥ γ expected local Y Y p `j(Y ) = `j(y* i ) |xi, θ~ accuracy (Altun et � � al., 2003) i j Table 1: Various supervised training criteria. All functions are written so as to be maximized. None of these criteria are available for unsupervised estimation because they all depend on the correct label, y*. 2.2 A new approach: contrastive estimation Our approach instead maximizes � � p Xi = xi |Xi ∈ N(xi), θ~ (2) where the “neighborhood” N(xi) C_ X is a set of implicit negative examp</context>
</contexts>
<marker>Collins, 2000</marker>
<rawString>M. Collins. 2000. Discriminative reranking for natural language parsing. In Proc. ofICML.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Crammer</author>
<author>Y Singer</author>
</authors>
<title>On the algorithmic implementation of multiclass kernel-based vector machines.</title>
<date>2001</date>
<journal>Journal ofMachine Learning Research,</journal>
<volume>2</volume>
<issue>5</issue>
<contexts>
<context position="13374" citStr="Crammer and Singer, 2001" startWordPosition="2329" endWordPosition="2332"> JL, Bi = X × % so summing over Bi is equivalent to computing the partition function Z(~θ). Because that sum is typically difficult, CL is preferred; Bi = {xi} × � for xi, which is often tractable. For sequence models like WFSAs it is computed using a dynamic programming algorithm (the forward algorithm for WFSAs). Klein and Manning (2002) argue for CL on grounds of accuracy, but see also Johnson (2001). See Tab. 2; other contrast sets Bi are also possible. When Bi contains only xi paired with the current best competitor (ˆy) to y* , we have a technique that resembles maximum margin training (Crammer and Singer, 2001). Note that yˆ will then change across training iterations, making Bi dynamic. 3.2 Parameter estimation (unsupervised) The difference between supervised and unsupervised learning is that in the latter case, Ai is forced to sum over label sequences y because they weren’t observed. In the unsupervised case, CE maximizes In terms of Eq. 5, A = {xi}×� and B = N(xi)×Y. EM’s objective function (Eq. 1) is a special case where N(xi) = X, for all i, and the denominator becomes Z(~θ). An alternative is to restrict the neighborhood to the set of observed training examples rather than all possible example</context>
</contexts>
<marker>Crammer, Singer, 2001</marker>
<rawString>K. Crammer and Y. Singer. 2001. On the algorithmic implementation of multiclass kernel-based vector machines. Journal ofMachine Learning Research, 2(5):265–92.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Dempster</author>
<author>N Laird</author>
<author>D Rubin</author>
</authors>
<title>Maximum likelihood estimation from incomplete data via the EM algorithm.</title>
<date>1977</date>
<journal>Journal of the Royal Statistical Society B,</journal>
<pages>39--1</pages>
<contexts>
<context position="2601" citStr="Dempster et al., 1977" startWordPosition="388" endWordPosition="391"> (especially David Smith and Roy Tromble) and Miles Osborne for insightful feedback, and Eric Goldlust and Markus Dreyer for Dyna language support. are crafted to pay attention to a range of domainspecific linguistic cues. Log-linear models can be so crafted and have already achieved excellent performance when trained on annotated data, where they are known as “maximum entropy” models (Ratnaparkhi et al., 1994; Rosenfeld, 1994). Our goal is to learn log-linear models from unannotated data. Since the forward-backward and inside-outside algorithms are instances of Expectation-Maximization (EM) (Dempster et al., 1977), a natural approach is to construct EM algorithms that handle log-linear models. Riezler (1999) did so, then resorted to an approximation because the true objective function was hard to normalize. Stepping back from EM, we may generally envision parameter estimation for probabilistic modeling as pushing probability mass toward the training examples. We must consider not only where the learner pushes the mass, but also from where the mass is taken. In this paper, we describe an alternative to EM: contrastive estimation (CE), which (unlike EM) explicitly states the source of the probability mas</context>
<context position="5807" citStr="Dempster et al., 1977" startWordPosition="924" endWordPosition="927"> here takes into account not only the observed positive example, but also a set of similar but deprecated negative examples. 2.1 Learning setting Let x� = (x1, x2,...), be our observed example sentences, where each xi E X, and let yz E � be the unobserved correct hidden structure for xi (e.g., a POS sequence). We seek a model, parameterized by 0, such that the (unknown) correct analysis yi is the best analysis for xi (under the model). If yz were observed, a variety of training criteria would be available (see Tab. 1), but yi is unknown, so none apply. Typically one turns to the EM algorithm (Dempster et al., 1977), which locally maximizes Y � � Y p X = xi |θ~ = i i where X is a random variable over sentences and Y a random variable over analyses (notation is often abbreviated, eliminating the random variables). An often-used alternative to EM is a class of socalled Viterbi approximations, which iteratively find the probabilistically-best y� and then, on each iteration, solve a supervised problem (see Tab. 1). likelihood (JL) p xi, y*i |θ~ Yjoint i conditional Y p (y*i |xi, θ~) likelihood (CL) i classification X δ(y*i , y(xi)) accuracy (Juang i and Katagiri, 1992) expected yi |xi, θ J classification Xp </context>
</contexts>
<marker>Dempster, Laird, Rubin, 1977</marker>
<rawString>A. Dempster, N. Laird, and D. Rubin. 1977. Maximum likelihood estimation from incomplete data via the EM algorithm. Journal of the Royal Statistical Society B, 39:1–38.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Eisner</author>
</authors>
<title>Parameter estimation for probabilistic finitestate transducers.</title>
<date>2002</date>
<booktitle>In Proc. ofACL.</booktitle>
<contexts>
<context position="15255" citStr="Eisner, 2002" startWordPosition="2656" endWordPosition="2657"> (9) CE may also be viewed as an importance sampling approximation to EM, where the sample space X is replaced by N(xi). We will demonstrate experimentally that CE is not just an approximation to EM; it makes sense from a modeling perspective. In §4, we will describe neighborhoods of sequences that can be represented as acyclic lattices built directly from an observed sequence. The sum over Bi is then the total u-score in our model of all paths in the neighborhood lattice. To compute this, intersect the WFSA and the lattice, obtaining a new acyclic WFSA, and sum the u-scores of all its paths (Eisner, 2002) using a simple dynamic programming algorithm akin to the forward algorithm. The sum over Ai may be computed similarly. CE with lattice neighborhoods is not confined to the WFSAs of this paper; when estimating weighted CFGs, the key algorithm is the inside algorithm for lattice parsing (Smith and Eisner, 2005). 3.3 Numerical optimization To maximize the neighborhood likelihood (Eq. 7), we apply a standard numerical optimization method (L-BFGS) that iteratively climbs the function using knowledge of its value and gradient (Liu and Nocedal, 1989). The partial derivative of ,GN with respect to th</context>
</contexts>
<marker>Eisner, 2002</marker>
<rawString>J. Eisner. 2002. Parameter estimation for probabilistic finitestate transducers. In Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G E Hinton</author>
</authors>
<title>Training products of experts by minimizing contrastive divergence.</title>
<date>2003</date>
<tech>Technical Report GCNU TR 2000-004,</tech>
<institution>University College London.</institution>
<contexts>
<context position="4035" citStr="Hinton, 2003" startWordPosition="623" endWordPosition="624">rvised case) and Riezler’s approximation (for the unsupervised case). The other reason to use CE is to improve accuracy. CE offers an additional way to inject domain knowledge into unsupervised learning (Smith and Eisner, 2005). CE hypothesizes that each positive example in training implies a domain-specific set of examples which are (for the most part) degraded (§2). This class of implicit negative evidence provides the source of probability mass for the observed example. We discuss the application of CE to loglinear models in §3. 1Not to be confused with contrastive divergence minimization (Hinton, 2003), a technique for training products of experts. 354 Proceedings of the 43rd Annual Meeting of the ACL, pages 354–362, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics We are particularly interested in log-linear models over sequences, like the conditional random fields (CRFs) of Lafferty et al. (2001) and weighted CFGs (Miyao and Tsujii, 2002). For a given sequence, implicit negative evidence can be represented as a lattice derived by finite-state operations (§4). Effectiveness of the approach on POS tagging using unlabeled data is demonstrated (§5). We discuss future wor</context>
</contexts>
<marker>Hinton, 2003</marker>
<rawString>G. E. Hinton. 2003. Training products of experts by minimizing contrastive divergence. Technical Report GCNU TR 2000-004, University College London.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Jebara</author>
<author>A Pentland</author>
</authors>
<title>Maximum conditional likelihood via bound maximization and the CEM algorithm.</title>
<date>1998</date>
<booktitle>In Proc. ofNIPS.</booktitle>
<contexts>
<context position="14246" citStr="Jebara and Pentland, 1998" startWordPosition="2477" endWordPosition="2480">s y because they weren’t observed. In the unsupervised case, CE maximizes In terms of Eq. 5, A = {xi}×� and B = N(xi)×Y. EM’s objective function (Eq. 1) is a special case where N(xi) = X, for all i, and the denominator becomes Z(~θ). An alternative is to restrict the neighborhood to the set of observed training examples rather than all possible examples (Riezler,1999; Johnson et al., 1999; Riezler et al., 2000): Another variant is conditional EM. Let xi be a pair (xi,1, xi,2) and define the neighborhood to be N(xi) = {¯x = (¯x1, xi,2)}. This approach has been applied to conditional densities (Jebara and Pentland, 1998) and conditional training of acoustic models with hidden variables (Valtchev et al., 1997). Generally speaking, CE is equivalent to some kind of EM when N(·) is an equivalence relation on examples, so that the neighborhoods partition X. Then if q is any fixed (untrained) distribution over neighborhoods, CE equates to running EM on the model defined by P (x, y|θ~) =fq (N(x)) - p (x, y |N(x), θ) (9) CE may also be viewed as an importance sampling approximation to EM, where the sample space X is replaced by N(xi). We will demonstrate experimentally that CE is not just an approximation to EM; it m</context>
</contexts>
<marker>Jebara, Pentland, 1998</marker>
<rawString>T. Jebara and A. Pentland. 1998. Maximum conditional likelihood via bound maximization and the CEM algorithm. In Proc. ofNIPS.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Johnson</author>
<author>S Geman</author>
<author>S Canon</author>
<author>Z Chi</author>
<author>S Riezler</author>
</authors>
<title>Estimators for stochastic “unification-based” grammars.</title>
<date>1999</date>
<booktitle>In Proc. ofACL.</booktitle>
<contexts>
<context position="14011" citStr="Johnson et al., 1999" startWordPosition="2437" endWordPosition="2440">ll then change across training iterations, making Bi dynamic. 3.2 Parameter estimation (unsupervised) The difference between supervised and unsupervised learning is that in the latter case, Ai is forced to sum over label sequences y because they weren’t observed. In the unsupervised case, CE maximizes In terms of Eq. 5, A = {xi}×� and B = N(xi)×Y. EM’s objective function (Eq. 1) is a special case where N(xi) = X, for all i, and the denominator becomes Z(~θ). An alternative is to restrict the neighborhood to the set of observed training examples rather than all possible examples (Riezler,1999; Johnson et al., 1999; Riezler et al., 2000): Another variant is conditional EM. Let xi be a pair (xi,1, xi,2) and define the neighborhood to be N(xi) = {¯x = (¯x1, xi,2)}. This approach has been applied to conditional densities (Jebara and Pentland, 1998) and conditional training of acoustic models with hidden variables (Valtchev et al., 1997). Generally speaking, CE is equivalent to some kind of EM when N(·) is an equivalence relation on examples, so that the neighborhoods partition X. Then if q is any fixed (untrained) distribution over neighborhoods, CE equates to running EM on the model defined by P (x, y|θ~)</context>
</contexts>
<marker>Johnson, Geman, Canon, Chi, Riezler, 1999</marker>
<rawString>M. Johnson, S. Geman, S. Canon, Z. Chi, and S. Riezler. 1999. Estimators for stochastic “unification-based” grammars. In Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Johnson</author>
</authors>
<title>Joint and conditional estimation of tagging and parsing models.</title>
<date>2001</date>
<booktitle>In Proc. ofACL.</booktitle>
<contexts>
<context position="13155" citStr="Johnson (2001)" startWordPosition="2293" endWordPosition="2294">itely many paths in Bi. 3.1 Parameter estimation (supervised) For log-linear models, both CL and JL estimation (Tab. 1) are available. In terms of Eq. 5, both set Ai = {(xi, yz )}. The difference is in B: for JL, Bi = X × % so summing over Bi is equivalent to computing the partition function Z(~θ). Because that sum is typically difficult, CL is preferred; Bi = {xi} × � for xi, which is often tractable. For sequence models like WFSAs it is computed using a dynamic programming algorithm (the forward algorithm for WFSAs). Klein and Manning (2002) argue for CL on grounds of accuracy, but see also Johnson (2001). See Tab. 2; other contrast sets Bi are also possible. When Bi contains only xi paired with the current best competitor (ˆy) to y* , we have a technique that resembles maximum margin training (Crammer and Singer, 2001). Note that yˆ will then change across training iterations, making Bi dynamic. 3.2 Parameter estimation (unsupervised) The difference between supervised and unsupervised learning is that in the latter case, Ai is forced to sum over label sequences y because they weren’t observed. In the unsupervised case, CE maximizes In terms of Eq. 5, A = {xi}×� and B = N(xi)×Y. EM’s objective</context>
</contexts>
<marker>Johnson, 2001</marker>
<rawString>M. Johnson. 2001. Joint and conditional estimation of tagging and parsing models. In Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B-H Juang</author>
<author>S Katagiri</author>
</authors>
<title>Discriminative learning for minimum error classification.</title>
<date>1992</date>
<journal>IEEE Trans. Signal Processing,</journal>
<pages>40--3043</pages>
<marker>Juang, Katagiri, 1992</marker>
<rawString>B.-H. Juang and S. Katagiri. 1992. Discriminative learning for minimum error classification. IEEE Trans. Signal Processing, 40:3043–54.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Klein</author>
<author>C D Manning</author>
</authors>
<title>Conditional structure vs. conditional estimation in NLP models.</title>
<date>2002</date>
<booktitle>In Proc. ofEMNLP.</booktitle>
<contexts>
<context position="13090" citStr="Klein and Manning (2002)" startWordPosition="2279" endWordPosition="2282">eral unknown and bounds difficult to prove. We would prefer to sum over finitely many paths in Bi. 3.1 Parameter estimation (supervised) For log-linear models, both CL and JL estimation (Tab. 1) are available. In terms of Eq. 5, both set Ai = {(xi, yz )}. The difference is in B: for JL, Bi = X × % so summing over Bi is equivalent to computing the partition function Z(~θ). Because that sum is typically difficult, CL is preferred; Bi = {xi} × � for xi, which is often tractable. For sequence models like WFSAs it is computed using a dynamic programming algorithm (the forward algorithm for WFSAs). Klein and Manning (2002) argue for CL on grounds of accuracy, but see also Johnson (2001). See Tab. 2; other contrast sets Bi are also possible. When Bi contains only xi paired with the current best competitor (ˆy) to y* , we have a technique that resembles maximum margin training (Crammer and Singer, 2001). Note that yˆ will then change across training iterations, making Bi dynamic. 3.2 Parameter estimation (unsupervised) The difference between supervised and unsupervised learning is that in the latter case, Ai is forced to sum over label sequences y because they weren’t observed. In the unsupervised case, CE maximi</context>
</contexts>
<marker>Klein, Manning, 2002</marker>
<rawString>D. Klein and C. D. Manning. 2002. Conditional structure vs. conditional estimation in NLP models. In Proc. ofEMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lafferty</author>
<author>A McCallum</author>
<author>F Pereira</author>
</authors>
<title>Conditional random fields: Probabilistic models for segmenting and labeling sequence data. In</title>
<date>2001</date>
<booktitle>Proc. ofICML.</booktitle>
<contexts>
<context position="4359" citStr="Lafferty et al. (2001)" startWordPosition="669" endWordPosition="672">f examples which are (for the most part) degraded (§2). This class of implicit negative evidence provides the source of probability mass for the observed example. We discuss the application of CE to loglinear models in §3. 1Not to be confused with contrastive divergence minimization (Hinton, 2003), a technique for training products of experts. 354 Proceedings of the 43rd Annual Meeting of the ACL, pages 354–362, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics We are particularly interested in log-linear models over sequences, like the conditional random fields (CRFs) of Lafferty et al. (2001) and weighted CFGs (Miyao and Tsujii, 2002). For a given sequence, implicit negative evidence can be represented as a lattice derived by finite-state operations (§4). Effectiveness of the approach on POS tagging using unlabeled data is demonstrated (§5). We discuss future work (§6) and conclude (§7). 2 Implicit Negative Evidence Natural language is a delicate thing. For any plausible sentence, there are many slight perturbations of it that will make it implausible. Consider, for example, the first sentence of this section. Suppose we choose one of its six words at random and remove it; on this</context>
<context position="12090" citStr="Lafferty et al., 2001" startWordPosition="2104" endWordPosition="2107">the automaton (determining a POS sequence), and x is the string it emits. u(x, y |0) is defined by applying exp to the total weight of all transitions in y. This is an example of Eqs. 4 and 6 where fj(x, y) is the number of times the path y takes the jth transition. The partition function Z( 0) of the WFSA is found by adding up the u-scores of all paths through the WFSA. For a k-state WFSA, this equates to solving a linear system of k equations in k variables (Tarjan, 1981). But if the WFSA contains cycles this infinite sum may diverge. Alternatives to exact com2These are exemplified by CRFs (Lafferty et al., 2001), which can be viewed alternately as undirected dynamic graphical models with a chain topology, as log-linear models over entire sequences with local features, or as WFSAs. Because “CRF” implies CL estimation, we use the term “WFSA.” 356 putation, like random sampling (see, e.g., Abney, 1997), will not help to avoid this difficulty; in addition, convergence rates are in general unknown and bounds difficult to prove. We would prefer to sum over finitely many paths in Bi. 3.1 Parameter estimation (supervised) For log-linear models, both CL and JL estimation (Tab. 1) are available. In terms of Eq</context>
</contexts>
<marker>Lafferty, McCallum, Pereira, 2001</marker>
<rawString>J. Lafferty, A. McCallum, and F. Pereira. 2001. Conditional random fields: Probabilistic models for segmenting and labeling sequence data. In Proc. ofICML.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D C Liu</author>
<author>J Nocedal</author>
</authors>
<title>On the limited memory method for large scale optimization.</title>
<date>1989</date>
<journal>Mathematical Programming B,</journal>
<volume>45</volume>
<issue>3</issue>
<contexts>
<context position="15805" citStr="Liu and Nocedal, 1989" startWordPosition="2738" endWordPosition="2742">a new acyclic WFSA, and sum the u-scores of all its paths (Eisner, 2002) using a simple dynamic programming algorithm akin to the forward algorithm. The sum over Ai may be computed similarly. CE with lattice neighborhoods is not confined to the WFSAs of this paper; when estimating weighted CFGs, the key algorithm is the inside algorithm for lattice parsing (Smith and Eisner, 2005). 3.3 Numerical optimization To maximize the neighborhood likelihood (Eq. 7), we apply a standard numerical optimization method (L-BFGS) that iteratively climbs the function using knowledge of its value and gradient (Liu and Nocedal, 1989). The partial derivative of ,GN with respect to the jth feature weight θj is ( ) � LN θ~ = log i ( ) u xi, y |θ~ ( ) (7) u x, y |θ~ E yEJ E (x,y)EN(x;)�J �u (xi |θ) /E u (xj |θ J (8) ∂LN E= E~θ [fj |xi] − E~θ [fj |N(xi)] (10) i ∂θj Viewed as a CE method, this approach (though effective when there are few hypotheses) seems misguided; the objective says to move mass to each example at the expense of all other training examples. This looks similar to the gradient of log-linear likelihood functions on complete data, though the expectation on the left is in those cases replaced by an observed featu</context>
</contexts>
<marker>Liu, Nocedal, 1989</marker>
<rawString>D. C. Liu and J. Nocedal. 1989. On the limited memory method for large scale optimization. Mathematical Programming B, 45(3):503–28.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A McCallum</author>
<author>W Li</author>
</authors>
<title>Early results for namedentity extraction with conditional random fields.</title>
<date>2003</date>
<booktitle>In Proc. of CoNLL.</booktitle>
<marker>McCallum, Li, 2003</marker>
<rawString>A. McCallum and W. Li. 2003. Early results for namedentity extraction with conditional random fields. In Proc. of CoNLL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Merialdo</author>
</authors>
<title>Tagging English text with a probabilistic model.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<issue>2</issue>
<contexts>
<context position="1525" citStr="Merialdo, 1994" startWordPosition="222" endWordPosition="223">nary and unlabeled text—contrastive estimation outperforms EM (with the same feature set), is more robust to degradations of the dictionary, and can largely recover by modeling additional features. 1 Introduction Finding linguistic structure in raw text is not easy. The classical forward-backward and inside-outside algorithms try to guide probabilistic models to discover structure in text, but they tend to get stuck in local maxima (Charniak, 1993). Even when they avoid local maxima (e.g., through clever initialization) they typically deviate from human ideas of what the “right” structure is (Merialdo, 1994). One strategy is to incorporate domain knowledge into the model’s structure. Instead of blind HMMs or PCFGs, one could use models whose features *This work was supported by a Fannie and John Hertz Foundation fellowship to the first author and NSF ITR grant IIS0313193 to the second author. The views expressed are not necessarily endorsed by the sponsors. The authors also thank three anonymous ACL reviewers for helpful comments, colleagues at JHU CLSP (especially David Smith and Roy Tromble) and Miles Osborne for insightful feedback, and Eric Goldlust and Markus Dreyer for Dyna language support</context>
<context position="20796" citStr="Merialdo (1994)" startWordPosition="3647" endWordPosition="3648">meter (A in the case of EM, or in the CE cases) varies. The model selected from each criterion using unlabeled development data is circled in the plot. Dataset size is varied in the table at right, which shows models selected using unlabeled development data (“sel.”) and using an oracle (“oracle,” the highest point on a curve). Across conditions, some neighborhood roughly splits the difference between supervised models and EM. 8 5 Experiments We compare CE (using neighborhoods from §4) with EM on POS tagging using unlabeled data. 5.1 Comparison with EM Our experiments are inspired by those in Merialdo (1994); we train a trigram tagger using only unlabeled data, assuming complete knowledge of the tagging dictionary.5 In our experiments, we varied the amount of data available (12K–96K words of WSJ), the heaviness of smoothing, and the estimation criterion. In all cases, training stopped when the relative change in the criterion fell below 10−4 between steps (typically G 100 steps). For this corpus and tag set, on average, a tagger must decide between 2.3 tags for a given token. The generative model trained by EM was identical to Merialdo’s: a second-order HMM. We smoothed using a flat Dirichlet pri</context>
</contexts>
<marker>Merialdo, 1994</marker>
<rawString>B. Merialdo. 1994. Tagging English text with a probabilistic model. Computational Linguistics, 20(2):155–72.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Miyao</author>
<author>J Tsujii</author>
</authors>
<title>Maximum entropy estimation for feature forests. In</title>
<date>2002</date>
<booktitle>Proc. ofHLT.</booktitle>
<contexts>
<context position="4402" citStr="Miyao and Tsujii, 2002" startWordPosition="676" endWordPosition="679">egraded (§2). This class of implicit negative evidence provides the source of probability mass for the observed example. We discuss the application of CE to loglinear models in §3. 1Not to be confused with contrastive divergence minimization (Hinton, 2003), a technique for training products of experts. 354 Proceedings of the 43rd Annual Meeting of the ACL, pages 354–362, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics We are particularly interested in log-linear models over sequences, like the conditional random fields (CRFs) of Lafferty et al. (2001) and weighted CFGs (Miyao and Tsujii, 2002). For a given sequence, implicit negative evidence can be represented as a lattice derived by finite-state operations (§4). Effectiveness of the approach on POS tagging using unlabeled data is demonstrated (§5). We discuss future work (§6) and conclude (§7). 2 Implicit Negative Evidence Natural language is a delicate thing. For any plausible sentence, there are many slight perturbations of it that will make it implausible. Consider, for example, the first sentence of this section. Suppose we choose one of its six words at random and remove it; on this example, odds are two to one that the resu</context>
</contexts>
<marker>Miyao, Tsujii, 2002</marker>
<rawString>Y. Miyao and J. Tsujii. 2002. Maximum entropy estimation for feature forests. In Proc. ofHLT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ratnaparkhi</author>
<author>S Roukos</author>
<author>R T Ward</author>
</authors>
<title>A maximum entropy model for parsing.</title>
<date>1994</date>
<booktitle>In Proc. ofICSLP.</booktitle>
<contexts>
<context position="2392" citStr="Ratnaparkhi et al., 1994" startWordPosition="360" endWordPosition="364"> NSF ITR grant IIS0313193 to the second author. The views expressed are not necessarily endorsed by the sponsors. The authors also thank three anonymous ACL reviewers for helpful comments, colleagues at JHU CLSP (especially David Smith and Roy Tromble) and Miles Osborne for insightful feedback, and Eric Goldlust and Markus Dreyer for Dyna language support. are crafted to pay attention to a range of domainspecific linguistic cues. Log-linear models can be so crafted and have already achieved excellent performance when trained on annotated data, where they are known as “maximum entropy” models (Ratnaparkhi et al., 1994; Rosenfeld, 1994). Our goal is to learn log-linear models from unannotated data. Since the forward-backward and inside-outside algorithms are instances of Expectation-Maximization (EM) (Dempster et al., 1977), a natural approach is to construct EM algorithms that handle log-linear models. Riezler (1999) did so, then resorted to an approximation because the true objective function was hard to normalize. Stepping back from EM, we may generally envision parameter estimation for probabilistic modeling as pushing probability mass toward the training examples. We must consider not only where the le</context>
</contexts>
<marker>Ratnaparkhi, Roukos, Ward, 1994</marker>
<rawString>A. Ratnaparkhi, S. Roukos, and R. T. Ward. 1994. A maximum entropy model for parsing. In Proc. ofICSLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Riezler</author>
<author>D Prescher</author>
<author>J Kuhn</author>
<author>M Johnson</author>
</authors>
<title>Lexicalized stochastic modeling of constraint-based grammars using log-linear measures and EM training.</title>
<date>2000</date>
<booktitle>In Proc. ofACL.</booktitle>
<contexts>
<context position="14034" citStr="Riezler et al., 2000" startWordPosition="2441" endWordPosition="2444">training iterations, making Bi dynamic. 3.2 Parameter estimation (unsupervised) The difference between supervised and unsupervised learning is that in the latter case, Ai is forced to sum over label sequences y because they weren’t observed. In the unsupervised case, CE maximizes In terms of Eq. 5, A = {xi}×� and B = N(xi)×Y. EM’s objective function (Eq. 1) is a special case where N(xi) = X, for all i, and the denominator becomes Z(~θ). An alternative is to restrict the neighborhood to the set of observed training examples rather than all possible examples (Riezler,1999; Johnson et al., 1999; Riezler et al., 2000): Another variant is conditional EM. Let xi be a pair (xi,1, xi,2) and define the neighborhood to be N(xi) = {¯x = (¯x1, xi,2)}. This approach has been applied to conditional densities (Jebara and Pentland, 1998) and conditional training of acoustic models with hidden variables (Valtchev et al., 1997). Generally speaking, CE is equivalent to some kind of EM when N(·) is an equivalence relation on examples, so that the neighborhoods partition X. Then if q is any fixed (untrained) distribution over neighborhoods, CE equates to running EM on the model defined by P (x, y|θ~) =fq (N(x)) - p (x, y |</context>
</contexts>
<marker>Riezler, Prescher, Kuhn, Johnson, 2000</marker>
<rawString>S. Riezler, D. Prescher, J. Kuhn, and M. Johnson. 2000. Lexicalized stochastic modeling of constraint-based grammars using log-linear measures and EM training. In Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Riezler</author>
</authors>
<title>Probabilistic Constraint Logic Programming.</title>
<date>1999</date>
<tech>Ph.D. thesis,</tech>
<institution>Universit¨at</institution>
<contexts>
<context position="2697" citStr="Riezler (1999)" startWordPosition="405" endWordPosition="406">nd Markus Dreyer for Dyna language support. are crafted to pay attention to a range of domainspecific linguistic cues. Log-linear models can be so crafted and have already achieved excellent performance when trained on annotated data, where they are known as “maximum entropy” models (Ratnaparkhi et al., 1994; Rosenfeld, 1994). Our goal is to learn log-linear models from unannotated data. Since the forward-backward and inside-outside algorithms are instances of Expectation-Maximization (EM) (Dempster et al., 1977), a natural approach is to construct EM algorithms that handle log-linear models. Riezler (1999) did so, then resorted to an approximation because the true objective function was hard to normalize. Stepping back from EM, we may generally envision parameter estimation for probabilistic modeling as pushing probability mass toward the training examples. We must consider not only where the learner pushes the mass, but also from where the mass is taken. In this paper, we describe an alternative to EM: contrastive estimation (CE), which (unlike EM) explicitly states the source of the probability mass that is to be given to an example.1 One reason is to make normalization efficient. Indeed, CE </context>
</contexts>
<marker>Riezler, 1999</marker>
<rawString>S. Riezler. 1999. Probabilistic Constraint Logic Programming. Ph.D. thesis, Universit¨at T¨ubingen. R. Rosenfeld. 1994. Adaptive Statistical Language Modeling: A Maximum Entropy Approach. Ph.D. thesis, CMU.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Sha</author>
<author>F Pereira</author>
</authors>
<title>Shallow parsing with conditional random fields.</title>
<date>2003</date>
<booktitle>In Proc. of HLT-NAACL.</booktitle>
<marker>Sha, Pereira, 2003</marker>
<rawString>F. Sha and F. Pereira. 2003. Shallow parsing with conditional random fields. In Proc. of HLT-NAACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N A Smith</author>
<author>J Eisner</author>
</authors>
<title>Annealing techniques for unsupervised statistical language learning.</title>
<date>2004</date>
<booktitle>In Proc. ofACL.</booktitle>
<contexts>
<context position="17626" citStr="Smith and Eisner, 2004" startWordPosition="3088" endWordPosition="3091"> x3 x3:x2 is a delicate thing ? E ?:E c. DEL1SUBSEQ: natural language is a delicate thing language is is a a a delicate thing expectations in Eq. 10 are computed by the forwardbackward algorithm generalized to lattices. We emphasize that the function ,GN is not globally concave; our search will lead only to a local optimum.3 Therefore, as with all unsupervised statistical learning, the bias in the initialization of B will affect the quality of the estimate and the performance of the method. In future we might wish to apply techniques for avoiding local optima, such as deterministic annealing (Smith and Eisner, 2004). 4 Lattice Neighborhoods We next consider some non-classical neighborhood functions for sequences. When X = E+ for some symbol alphabet E, certain kinds of neighborhoods have natural, compact representations. Given an input string x = (x1, x2, ..., xm), we write xji for the substring (xi, xi+1, ..., xj) and xm1 for the whole string. Consider first the neighborhood consisting of all sequences generated by deleting a single symbol from the m-length sequence xm1 : DEL1WORD(xi ) = {xl−1xm`+1 1 &lt; ` &lt; m} U {xm1 } This set consists of m + 1 strings and can be compactly represented as a lattice (see </context>
<context position="22710" citStr="Smith and Eisner (2004)" startWordPosition="3955" endWordPosition="3958">-A smoothing within every M step. rion, dataset) pair, we selected the smoothing trial that gave the highest estimation criterion score on a 5K-word development set (also unlabeled). Results. The plot in Fig. 2 shows the Viterbi accuracy of each criterion trained on the 96K-word dataset as smoothing was varied; the table shows, for each (criterion, dataset) pair the performance of the selected A or u2 and the one chosen by an oracle. LENGTH, TRANS1, and DELORTRANS1 are consistently the best, far out-stripping EM. These gains dwarf the performance of EM on over 1.1M words (66.6% as reported by Smith and Eisner (2004)), even when the latter uses improved search (70.0%). DEL1WORD and DEL1SUBSEQ, on the other hand, are poor, even worse than EM on larger datasets. An important result is that neighborhoods do not succeed by virtue of approximating log-linear EM; if that were so, we would expect larger neighborhoods (like DEL1SUBSEQ) to out-perform smaller ones (like TRANS1)—this is not so. DEL1SUBSEQ and DEL1WORD are poor because they do not give helpful classes of negative evidence: deleting a word or a short subsequence often does very little damage. Put another way, models that do a good job of explaining w</context>
</contexts>
<marker>Smith, Eisner, 2004</marker>
<rawString>N. A. Smith and J. Eisner. 2004. Annealing techniques for unsupervised statistical language learning. In Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N A Smith</author>
<author>J Eisner</author>
</authors>
<title>Guiding unsupervised grammar induction using contrastive estimation.</title>
<date>2005</date>
<booktitle>In Proc. of IJCAI Workshop on Grammatical Inference Applications.</booktitle>
<contexts>
<context position="3649" citStr="Smith and Eisner, 2005" startWordPosition="559" endWordPosition="562">om where the mass is taken. In this paper, we describe an alternative to EM: contrastive estimation (CE), which (unlike EM) explicitly states the source of the probability mass that is to be given to an example.1 One reason is to make normalization efficient. Indeed, CE generalizes EM and other practical techniques used to train log-linear models, including conditional estimation (for the supervised case) and Riezler’s approximation (for the unsupervised case). The other reason to use CE is to improve accuracy. CE offers an additional way to inject domain knowledge into unsupervised learning (Smith and Eisner, 2005). CE hypothesizes that each positive example in training implies a domain-specific set of examples which are (for the most part) degraded (§2). This class of implicit negative evidence provides the source of probability mass for the observed example. We discuss the application of CE to loglinear models in §3. 1Not to be confused with contrastive divergence minimization (Hinton, 2003), a technique for training products of experts. 354 Proceedings of the 43rd Annual Meeting of the ACL, pages 354–362, Ann Arbor, June 2005. c�2005 Association for Computational Linguistics We are particularly inter</context>
<context position="8341" citStr="Smith and Eisner (2005)" startWordPosition="1391" endWordPosition="1394">e from its neighborhood. Put another way, the learner assumes not only that xi is good, but that xi is locally optimal in example space (X), and that alternative, similar examples (from the neighborhood) are inferior. Rather than explain all of the data, the model must only explain (using hidden variables) why the � � p X = xi, Y = y |θ~ (1) X yEJ Y i 355 likelihood criterion Ai Bi observed sentence is better than its neighbors. Of course, the validity of this hypothesis will depend on the form of the neighborhood function. Consider, as a concrete example, learning natural language syntax. In Smith and Eisner (2005), we define a sentence’s neighborhood to be a set of slightly-altered sentences that use the same lexemes, as suggested at the start of this section. While their syntax is degraded, the inferred meaning of any of these altered sentences is typically close to the intended meaning, yet the speaker chose x and not one of the other x&apos; E N(x). Why? Deletions are likely to violate subcategorization requirements, and transpositions are likely to violate word order requirements—both of which have something to do with syntax. x was the most grammatical option that conveyed the speaker’s meaning, hence </context>
<context position="15566" citStr="Smith and Eisner, 2005" startWordPosition="2704" endWordPosition="2707">an be represented as acyclic lattices built directly from an observed sequence. The sum over Bi is then the total u-score in our model of all paths in the neighborhood lattice. To compute this, intersect the WFSA and the lattice, obtaining a new acyclic WFSA, and sum the u-scores of all its paths (Eisner, 2002) using a simple dynamic programming algorithm akin to the forward algorithm. The sum over Ai may be computed similarly. CE with lattice neighborhoods is not confined to the WFSAs of this paper; when estimating weighted CFGs, the key algorithm is the inside algorithm for lattice parsing (Smith and Eisner, 2005). 3.3 Numerical optimization To maximize the neighborhood likelihood (Eq. 7), we apply a standard numerical optimization method (L-BFGS) that iteratively climbs the function using knowledge of its value and gradient (Liu and Nocedal, 1989). The partial derivative of ,GN with respect to the jth feature weight θj is ( ) � LN θ~ = log i ( ) u xi, y |θ~ ( ) (7) u x, y |θ~ E yEJ E (x,y)EN(x;)�J �u (xi |θ) /E u (xj |θ J (8) ∂LN E= E~θ [fj |xi] − E~θ [fj |N(xi)] (10) i ∂θj Viewed as a CE method, this approach (though effective when there are few hypotheses) seems misguided; the objective says to move</context>
<context position="31811" citStr="Smith and Eisner (2005)" startWordPosition="5466" endWordPosition="5469">onary is diluted and with spelling features. Each graph corresponds to a different level of dilution. Models selected using unlabeled development data are circled. These plots (unlike Tab. 3) are not comparable to each other because each is measured on a different set of ambiguous words. 0 0.1 1 10 smoothing parameter DELORTRANS1 E TRANS1 ❑ LENGTH 4 5 EM x 8 85 0 85 75 80 0 75 70 65 60 65 55 50 50 45 40 361 leads to a need for more efficient tuning of the prior parameters on development data. The effectiveness of CE (and different neighborhoods) for dependency grammar induction is explored in Smith and Eisner (2005) with considerable success. We introduce there the notion of designing neighborhoods to guide learning for particular tasks. Instead of guiding an unsupervised learner to match linguists’ annotations, the choice of neighborhood might be made to direct the learner toward hidden structure that is helpful for error-correction tasks like spelling correction and punctuation restoration that may benefit from a grammatical model. Wang et al. (2002) discuss the latent maximum entropy principle. They advocate running EM many times and selecting the local maximum that maximizes entropy. One might do the</context>
</contexts>
<marker>Smith, Eisner, 2005</marker>
<rawString>N. A. Smith and J. Eisner. 2005. Guiding unsupervised grammar induction using contrastive estimation. In Proc. of IJCAI Workshop on Grammatical Inference Applications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R E Tarjan</author>
</authors>
<title>A unified approach to path problems.</title>
<date>1981</date>
<journal>Journal of the ACM,</journal>
<volume>28</volume>
<issue>3</issue>
<contexts>
<context position="11946" citStr="Tarjan, 1981" startWordPosition="2081" endWordPosition="2082">to POS tags. The parameter vector B E Rn specifies a weight for each of the n transitions in the automaton. y is a hidden path through the automaton (determining a POS sequence), and x is the string it emits. u(x, y |0) is defined by applying exp to the total weight of all transitions in y. This is an example of Eqs. 4 and 6 where fj(x, y) is the number of times the path y takes the jth transition. The partition function Z( 0) of the WFSA is found by adding up the u-scores of all paths through the WFSA. For a k-state WFSA, this equates to solving a linear system of k equations in k variables (Tarjan, 1981). But if the WFSA contains cycles this infinite sum may diverge. Alternatives to exact com2These are exemplified by CRFs (Lafferty et al., 2001), which can be viewed alternately as undirected dynamic graphical models with a chain topology, as log-linear models over entire sequences with local features, or as WFSAs. Because “CRF” implies CL estimation, we use the term “WFSA.” 356 putation, like random sampling (see, e.g., Abney, 1997), will not help to avoid this difficulty; in addition, convergence rates are in general unknown and bounds difficult to prove. We would prefer to sum over finitely</context>
</contexts>
<marker>Tarjan, 1981</marker>
<rawString>R. E. Tarjan. 1981. A unified approach to path problems. Journal of the ACM, 28(3):577–93.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Valtchev</author>
<author>J J Odell</author>
<author>P C Woodland</author>
<author>S J Young</author>
</authors>
<title>MMIE training of large vocabulary speech recognition systems.</title>
<date>1997</date>
<journal>Speech Communication,</journal>
<volume>22</volume>
<issue>4</issue>
<contexts>
<context position="14336" citStr="Valtchev et al., 1997" startWordPosition="2490" endWordPosition="2493"> = {xi}×� and B = N(xi)×Y. EM’s objective function (Eq. 1) is a special case where N(xi) = X, for all i, and the denominator becomes Z(~θ). An alternative is to restrict the neighborhood to the set of observed training examples rather than all possible examples (Riezler,1999; Johnson et al., 1999; Riezler et al., 2000): Another variant is conditional EM. Let xi be a pair (xi,1, xi,2) and define the neighborhood to be N(xi) = {¯x = (¯x1, xi,2)}. This approach has been applied to conditional densities (Jebara and Pentland, 1998) and conditional training of acoustic models with hidden variables (Valtchev et al., 1997). Generally speaking, CE is equivalent to some kind of EM when N(·) is an equivalence relation on examples, so that the neighborhoods partition X. Then if q is any fixed (untrained) distribution over neighborhoods, CE equates to running EM on the model defined by P (x, y|θ~) =fq (N(x)) - p (x, y |N(x), θ) (9) CE may also be viewed as an importance sampling approximation to EM, where the sample space X is replaced by N(xi). We will demonstrate experimentally that CE is not just an approximation to EM; it makes sense from a modeling perspective. In §4, we will describe neighborhoods of sequences</context>
</contexts>
<marker>Valtchev, Odell, Woodland, Young, 1997</marker>
<rawString>V. Valtchev, J. J. Odell, P. C. Woodland, and S. J. Young. 1997. MMIE training of large vocabulary speech recognition systems. Speech Communication, 22(4):303–14.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Wang</author>
<author>R Rosenfeld</author>
<author>Y Zhao</author>
<author>D Schuurmans</author>
</authors>
<title>The latent maximum entropy principle.</title>
<date>2002</date>
<booktitle>In Proc. ofISIT. D. Yarowsky.</booktitle>
<contexts>
<context position="32256" citStr="Wang et al. (2002)" startWordPosition="5533" endWordPosition="5536">ng of the prior parameters on development data. The effectiveness of CE (and different neighborhoods) for dependency grammar induction is explored in Smith and Eisner (2005) with considerable success. We introduce there the notion of designing neighborhoods to guide learning for particular tasks. Instead of guiding an unsupervised learner to match linguists’ annotations, the choice of neighborhood might be made to direct the learner toward hidden structure that is helpful for error-correction tasks like spelling correction and punctuation restoration that may benefit from a grammatical model. Wang et al. (2002) discuss the latent maximum entropy principle. They advocate running EM many times and selecting the local maximum that maximizes entropy. One might do the same for the local maxima of any CE objective, though theoretical and experimental support for this idea remain for future work. 7 Conclusion We have presented contrastive estimation, a new probabilistic estimation criterion that forces a model to explain why the given training data were better than bad data implied by the positive examples. We have shown that for unsupervised sequence modeling, this technique is efficient and drastically o</context>
</contexts>
<marker>Wang, Rosenfeld, Zhao, Schuurmans, 2002</marker>
<rawString>S. Wang, R. Rosenfeld, Y. Zhao, and D. Schuurmans. 2002. The latent maximum entropy principle. In Proc. ofISIT. D. Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In Proc. ofACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>X Zhu</author>
<author>Z Ghahramani</author>
</authors>
<title>Towards semi-supervised classification with Markov random fields.</title>
<date>2002</date>
<tech>Technical Report CMU-CALD-02-106,</tech>
<institution>Carnegie Mellon University.</institution>
<contexts>
<context position="30386" citStr="Zhu and Ghahramani (2002)" startWordPosition="5209" endWordPosition="5212">den labels (or structure) throughout learning; bootstrapping either chooses, for each example, a single label, or remains completely agnostic. One can envision a mixed objective function that tries to fit the labeled examples while discriminating unlabeled examples from their neighborhoods.8 Regardless of how much (if any) data are labeled, the question of good smoothing techniques requires more attention. Here we used a single zero-mean, constant-variance Gaussian prior for all parameters. Better performance might be achieved by allowing different variances for different feature types. This 8Zhu and Ghahramani (2002) explored the semi-supervised classification problem for spatially-distributed data, where some data are labeled, using a Boltzmann machine to model the dataset. For them, the Markov random field is over labeling configurations for all examples, not, as in our case, complex structured labels for a particular example. Hence their B (Eq. 5), though very large, was finite and could be sampled. All train &amp; development words are in the tagging dictionary: 85 80 75 70 65 60 55 50 45 40 Tagging dictionary taken from the first 500 sentences: 85 80 75 70 65 60 55 50 45 40 Tagging dictionary contains wo</context>
</contexts>
<marker>Zhu, Ghahramani, 2002</marker>
<rawString>X. Zhu and Z. Ghahramani. 2002. Towards semi-supervised classification with Markov random fields. Technical Report CMU-CALD-02-106, Carnegie Mellon University.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>