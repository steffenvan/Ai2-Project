<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000051">
<title confidence="0.998919">
From Grammar-Independent Construction Enumeration to
Lexical Types in Computational Grammars
</title>
<author confidence="0.906824">
Lars Hellan
</author>
<affiliation confidence="0.60646">
NTNU
</affiliation>
<address confidence="0.681457">
N-7491 Trondheim
Norway
</address>
<email confidence="0.994937">
lars.hellan@hf.ntnu.no
</email>
<sectionHeader confidence="0.993749" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9999759">
The paper presents a code for enumerat-
ing verb-construction templates, from
which lexical type inventories of compu-
tational grammars can be derived, and
test suites can be systematically devel-
oped. The templates also serve for de-
scriptive and typological research. The
code is string-based, with divisions into
slots providing modularity and flexibility
of specification.
</bodyText>
<sectionHeader confidence="0.998801" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.995683052631579">
This paper presents a code for enumerating verb-
construction templates. The code is string-based,
with divisions into slots providing modularity
and flexibility of specification. The templates
provide slots for specifying, relative to a con-
struction
- part of speech (POS) of the head
- grammatical relations exposed
- valence bound items
- thematic roles expressed
- situation type
- aspect (Aktionsart)
- part of speech of valence-bound items.
(These parameters altogether cover what is com-
monly referred to as &apos;argument structure&apos; relative
to the main predicate.) The code is outlined in
sections 2-5, and 8.
From the verb construction templates, lexical
type inventories of computational grammars can
</bodyText>
<footnote confidence="0.939184">
© 2008. Licensed under the Creative Commons Attri-
bution-Noncommercial-Share Alike 3.0 Unported
license (http://creativecommons.org/licenses/by-nc-
sa/3.0/). Some rights reserved.
</footnote>
<bodyText confidence="0.999927">
be derived (section 6). The design offers a sys-
tematic way of organizing test suites, and here-
with improved means of defining intra- and
cross-framework reference points of coverage
and depth of analysis. The template code also
lends itself for descriptive and typological re-
search (section 7).
The design is not geared to any particular
framework of computational grammar or linguis-
tics. Examples will be offered relative to HPSG-
and LFG- grammars, and the actual conversions
from templates to lexical types so far developed
relate to HPSG grammars using the LKB plat-
form (cf. (Copestake 2002)), based on the &apos;HPSG
Grammar Matrix&apos; design ((Bender et al. 2002)).
Our exposition will be based on the design as it
relates to the LKB-grammar NorSource (cf.
(Beermann and Hellan 2004)) and a Verb-
Construction enumeration for Norwegian.
The enterprise here presented has lines going
back at least to the mid and late 80ies, both re-
garding test suite development (e.g., (Flickinger
et al. 1987), (Lehmann et al. 1996)) and argu-
ment frame inventories ((Hellan et al. 1889)).
</bodyText>
<sectionHeader confidence="0.989503" genericHeader="introduction">
2 Code for Template Enumeration
</sectionHeader>
<bodyText confidence="0.999885857142857">
By a template for a verb construction we under-
stand a standardized way of exposing selected
features of the construction. Exposed features are
classificatory features, and in this respect, a tem-
plate may be regarded as a type.
A system for enumerating templates should
be designed such that they are, internal to a given
language, complete and transparent, and across
languages, comparable both in templates shared
and in templates distinct. Technologically they
should be as low level as possible, and platform
independent, and be equally accessible to practis-
ing field linguists as to NLP researchers in com-
putational settings. With such desiderata in mind,
</bodyText>
<page confidence="0.993909">
41
</page>
<note confidence="0.849256">
Coling 2008: Proceedings of the workshop on Grammar Engineering Across Frameworks, pages 41–48
Manchester, August 2008
</note>
<bodyText confidence="0.97828675">
we develop a code residing simply in strings of
symbols with a minimum of internal syntax.
The basic structural parts of such strings are
referred to as slots. In the slot specification, the
following conventions are observed:
* Slots are interconnected by &apos;-&apos; (hyphen).
* Distinct items inside a slot are interconnected
by &apos;_&apos; (underline).
* An item label containing neither ‘-‘ nor ‘_’ is
an uninterrupted string of letters. Internal com-
position is indicated by alternation between small
and capital letters.
The format can be applied also to non-verbal
constructions, but we here focus exclusively on
verbal ones. These have a template structure with
five slots:
</bodyText>
<figureCaption confidence="0.631581571428572">
Slot 1: POS of the head, and diathesis informa-
tion.
Slot 2: Valency, or transitivity specification (e.g.,
intr, tr, ditr,... ).
Slot 3: Dependents&apos; specification (syntactic and
referential properties of arguments).
Slot 4: Participant roles.
</figureCaption>
<bodyText confidence="0.98076825">
Slot 5: Situation type (written in SMALL CAPS).
Slots 1 and 2 are always filled, the others need
not be. A slot not specified is not displayed as
empty; however, the sets of labels defined for the
various slots are disjoint. Likewise, no labels are
distinguished in terms of capital letter vs. not. (1)
illustrates the composition, for a type instantiated
by the clause Mary throws the ball:
</bodyText>
<equation confidence="0.555556">
(1) v-tr-obDir-suAg_obEjct-EJECTION
</equation>
<bodyText confidence="0.966551678571428">
Slot 1 here says the head is Verb, slot 2 says that
the construction is transitive, slot 3 says that the
object har a directional function, slot 4 says that
the thematic roles are &apos;agent&apos;, expressed by the
subject, and &apos;ejected&apos;, expressed by the object,
and slot 5 says that the situation type is one char-
acterizable as &apos;ejection&apos;.
We start with a survey of the labels used for
slot 2, valence information. First, for the use of
the notions intr, tr, ditr, the following defi-
nitions apply. By a direct syntactic argument of a
verb, we understand a nominal constituent syn-
tactically related to the verb as subject-of, direct
object-of, or indirect object-of, and any clausal
constituent with either of these functions. (This
includes expletive subjects and objects, and ex-
cludes clausal constituents in extraposed posi-
tion; it also excludes any NP or clause governed
by a preposition or another relation-item.) An
intransitive construction is then one with only
SUBJECT as a direct syntactic argument, a transi-
tive construction has a SUBJECT and one OB-
JECT as direct syntactic arguments, and a ditran-
sitive construction has a SUBJECT and two OB-
JECTs as direct syntactic arguments. Any va-
lence-bound item other than those now described
is represented by an extension of the above tran-
sitivity-strings, for instance, in the strings in-
trObl and trObl, Obl means &apos;oblique&apos;, that is,
in addition to the number of arguments repre-
sented by intr/tr, there is a PP with &apos;selected&apos;
status.
The valence slot includes information as to
referential status of the arguments. We say that a
direct syntactic argument is standardly linked
when it has referential content and has a seman-
tic argument function relative to the verb. This
excludes expletive subjects and expletive objects,
as well as &apos;raised&apos; full NPs. The following sub-
strings in slot 2 indicate the presence of items
that are not standardly linked:
Impers (&apos;impersonal&apos;), Presentational, Epon
(&apos;extraposition&apos;), Nrf (&apos;non-referential&apos;), Rais
(&apos;item raised, i.e., non-argument&apos;), Nrg (&apos;non-
argument&apos; - used in slot 3)).
Specifications are sought to be non-redundant.
For instance, the string intrEpon occurring in
slot 2 entails that there is an expletive subject,
and when used for a langauge like English, there
is no need to say elsewhere that the subject is
expletive. Since what is redundant relative to one
language may not be so relative to another, ques-
tions of language-parametrized interpretation of
code may arise; however, we do not have a basis
yet for suggesting whether and how this would
be accommodated.
</bodyText>
<sectionHeader confidence="0.983895" genericHeader="method">
3 Valency labels
</sectionHeader>
<bodyText confidence="0.998364466666667">
The slot for valency, slot 2, has around 45 possi-
ble specifications relevant to Norwegian, and we
state those in full, to give an impression of what
may be the expected scope of this slot; an exam-
ple illustrates each type:
intr = intransitive, i.e., with only SUBJECT as
direct syntactic argument.
intrImpers = impersonal intransitive, i.e.,
SUBJECT is an expletive not linked to any other
item in the clause. (Ex.: det regner &apos;it rains&apos;)
intrImpersPrtcl = impersonal intransitive
with an aspectual particle. (Ex.: det klarner opp
&apos;it clears up&apos;)
intrImpersObl = impersonal intransitive with
an oblique argument. (Ex.: det synger i fjellene
</bodyText>
<page confidence="0.995435">
42
</page>
<bodyText confidence="0.965799626506024">
&apos;it sings in the mountains&apos;)
intrPresentational = intransitive with a
presentational structure, i.e., an expletive subject
and an indefinite NP.
intrDirPresentational = intrPresenta-
tional where the presented NP has a directional
function. (Ex.: det springer en mann &apos;there runs a
man&apos;)
intrPresentationalLoc = intrPresenta-
tional with a locative constituent. (Ex.: det sitter
en mann i stolen &apos;there sits a man in the chair&apos;)
intrDir = intransitive where the subject has a
directional function. (Ex.: gutten løper &apos;the boy
runs&apos;)
intrAdv = intransitive with an obligatory ad-
verb. (Ex.: han fungerer godt &apos;he functions well&apos;)
intrPrtcl = intransitive with an aspectual par-
ticle. (Ex.: regnet varer ved &apos;the rain lasts&apos;)
intrObl = intransitive with an oblique argu-
ment. (Ex.: jeg snakker om Ola &apos;I talk about Ola&apos;)
intrOblRais = intransitive with an oblique
argument from which an NP has been &apos;raised&apos;.
(Ex.: han later til å komme &apos;he appears [to] to come&apos;)
intrScpr = intransitive with a secondary predi-
cate (Small Clause predicate). (Ex.: gutten virker
syk &apos;the boy seems sick&apos;)
intrEpon = intransitive with an &apos;extraposed&apos;
clause. (Ex.: det hender at han kommer &apos;it happens
that he comes&apos;)
intrPrtclEpon = intransitive with an &apos;extra-
posed&apos; clause and an advparticle. (Ex.: det hører
med at han kommer Mock Eng: &amp;quot;it hears along that
he comes&amp;quot;)
intrOblEpon = intransitive with an &apos;extraposed&apos;
clause and an oblique argument. (Ex.: det haster
med å rydde Mock Eng: &amp;quot;it urges with to tiden up&amp;quot;)
intrPrtclOblEpon = intransitive with an &apos;ex-
traposed&apos; clause, an oblique argument, and an
advparticle. (Ex.: det ser ut til at han kommer Mock
Eng: &amp;quot;it looks out to that he comes&amp;quot;)
intrPrtclOblRais = intransitive with an
oblique argument from which an NP has been
&apos;raised&apos;, and an advparticle. (Ex.: han ser ut til å
komme Mock Eng: &amp;quot;he looks out to to come&amp;quot;)
intrImplicobjObl = intransitive with implicit
object, followed by PP (Ex.: han sølte på seg &apos;he
spilled on himself&apos;)
tr = transitive, i.e., with SUBJECT and one OB-
JECT.
trDir = transitive, where the subject is under-
stood in a directional function. (Ex.: Kari når top-
pen &apos;Kari reaches the top&apos;)
trPrtcl = transitive with an advparticle. (Ex.:
Kari fant ut svaret &apos;Kari found out the answer&apos;)
trPresentational = presentational structure
with an NP preceding the &apos;presented&apos; NP. (Ex.: det
venter ham en ulykke &apos;there awaits him an accident&apos;)
trObl = transitive with an oblique. (Ex.: jeg
sparker Ola i baken &apos;I kick Ola in the butt&apos;)
trEponSu = transitive with an extraposed clause
correlated with the subject, and an argument ob-
ject. (Ex.: det bekymrer meg at han kommer &apos;it wor-
ries me that he comes&apos;)
trEponOb = transitive with an extraposed clause
correlated with the object, and an argument sub-
ject.. (Ex.: vi muliggjorde det at han fikk innreisetil-
latelse &apos;we possible-made it that he got entrance visa&apos;)
trScpr = transitive with a secondary predicate
(Small Clause predicate). (Ex.: han sparket ballen
flat &apos;he kicked the ball flat&apos;)
trNrf = transitive whose object is non-
referential. (Ex.: Kari skammer seg &amp;quot;Kari shamess
herself&amp;quot; - &apos;Kari is ashamed&apos;)
ditr = ditransitive, i.e., with SUBJECT and two
OBJECTs (here referred to by the traditional
terms &apos;indirect&apos; (&apos;iob&apos;) and &apos;direct&apos; object, when
distinction is necessary).
ditrObl = ditransitive with oblique. (Ex.: jeg
kaster Ola kakestykker i ansiktet &amp;quot;I throw Ola cakes
in the face&amp;quot; - &apos;I throw cakes in the face of Ola&apos;)
ditrNrf = ditransitive whose indirect object is
non-referential. (Ex.: han foresetter seg å komme
&apos;he [foresetter] himself to come)
</bodyText>
<listItem confidence="0.698322470588235">
copAdj = predicative copular construction with
adjectival predicative. (Ex.: han er snill &apos;he is
kind&apos;). (Similarly: copN. (Ex.: han er bonde &apos;he is
peasant&apos;); copPP (Ex.: forestillingen var under
enhver kritikk &apos;the perforrmance was below critique&apos;);
copPredprtcl (Ex.: Ola er som en gud &apos;Ola is
like a god&apos;))
copIdN = identity copular construction with
nominal predicative. (Ex.: dette er mannen &apos;this is
the man&apos;.) (Similarly: copIdAbsinf (Ex.:
oppgaven er å spise silden &apos;the task is to eat the her-
ring&apos;.); copIdDECL (Ex.: problemet er at han spiser
silden &apos;the problem is that he eats the herring&apos;.);
copIdYN (Ex.: problemet er om han spiser silden
&apos;the problem is whether he eats the herring&apos;.);
copIdWH (Ex.: spørsmålet er hvem som spiser silden
&apos;the question is who eats the herring&apos;.))
</listItem>
<bodyText confidence="0.815729125">
copEponAdj = predicative copular construction
with adjectival predicative and the &apos;logical sub-
ject&apos; extraposed. (Ex.: det er uvisst hvem som kom-
mer &apos;it is uncertain who that comes&apos;.) Similarly: co-
pEponN (Ex.: det er et spørsmål hvem som kommer
&apos;it is a question who comes&apos;.); copEponPP (Ex.: det
er hinsides diskusjon at han kommer &apos;it is beyond dis-
cussion that he comes&apos;.); copEponPredprtcl
</bodyText>
<page confidence="0.998759">
43
</page>
<bodyText confidence="0.987522">
(Ex.: det var som bestilt at han tapte igjen &apos;it was like
booked that he lost again&apos;.))
</bodyText>
<sectionHeader confidence="0.986377" genericHeader="method">
4 Dependents&apos; labels
</sectionHeader>
<bodyText confidence="0.991124414141414">
The slot for dependents, slot 3, has around 40
labels relevant for Norwegian. Each is built up
with a first part indicating the grammatical func-
tion of the item specified (su, ob, iob, obl,
sc, epon), and the remainder providing the
specification, possibly also with some internal
structure. The following lists most of them:
suExpl = subject is an expletive.
suDECL = subject is a declarative clause. (Simi-
larly: suYN = subject is a yes-no-interrogative
clause; suWH = subject is a wh-interrogative
clause; suAbsinf = subject is an infinitival
clause with non-controlled interpretation.)
suNrg = subject is a non-argument.
obDir = object is understood in a directional
capacity.
obRefl = object is a reflexive.
obReflExpl = object is an expletive reflexive.
obDECL = object is a declarative clause. (Simi-
larly: obYN, obWH, obAbsInf)
obEqInf = object is an infinitive equi-controlled
by the only available possible controller.
obEqSuInf = object is an infinitive equi-
controlled by subject.
obEqIobInf = object is an infinitive equi-
controlled by indirect object.
obEqSuBareinf = object is a bare infinitive
equi-controlled by subject.
obEqIobBareinf = object is a bare infinitive
equi-controlled by indirect object.
iobRefl = indirect object is a reflexive.
iobReflExpl = indirect object is an expletive
reflexive.
oblEqSuInf = the governee of the oblique is an
infinitive equi-controlled by subject.
oblEqObInf = the governee of the oblique is an
infinitive equi-controlled by object.
oblRaisInf = the governee of the oblique is an
infinitive which is raising-controlled by the sub-
ject.
oblRefl = the governee of the oblique is a re-
flexive.
oblDECL = the governee of the oblique is a de-
clarative clause. (Similarly: oblYN, oblWH,
oblAbsinf)
oblPRTOFsubj = the referent of the governee of
the oblique is interpreted as part-of the referent
of the subject. (Ex.: jeg fryser på ryggen &apos;I freeze on
the back&apos; - I&apos;m cold on my back&apos;)
oblPRTOFobj = the referent of the governee of
the oblique is interpreted as part-of the referent
of the object. . (Ex.: jeg sparker Ola i baken &apos;I kick
Ola in the butt&apos;)
oblPRTOFiobj = the referent of the governee
of the oblique is interpreted as part-of the refer-
ent of the indirect object. (Ex.: jeg kaster Ola
kakestykker i ansiktet &amp;quot;I throw Ola cakes in the face&amp;quot;
- &apos;I throw cakes in the face of Ola&apos;)
oblEponAbsinf = extraposed is a non-
controlled infinitive occurring as governee of an
oblique.
oblEponDECL = extraposed is a declarative
clause occurring as governee of an oblique.
scSuNrg = the secondary predicate is predicated
of a non-argument subject (i.e., a subject not
serving as semantic argument of the matrix verb -
i.e., a &apos;raising to subject&apos; subject).
scObNrg = the secondary predicate is predicated
of a non-argument object (i.e., an object not serv-
ing as semantic argument of the matrix verb - i.e.,
a &apos;raising to object&apos; object).
scAdj = the secondary predicate is headed by an
adjective. (Similarly: scN, scPP,
scPredprtcl, scInf, scBareinf)
eponDECL = extraposed is a declarative clause.
(Similarly: eponYN, eponWH, eponCOND, epon-
EqInf, eponAbsinf)
We illustrate with a use of the &apos;small clause&apos;
specification scSuNrg. One of the construction
types it serves to qualify is exemplified by
han synes syk &apos;he seems sick&apos;,
which is a raising construction of the logical form
&apos;seem (he sick)&apos;, where the subject han does not
have a semantic argument function relative to the
verb. The label specifying this type is
v-intrScpr-scSuNrg_scAdj
where intrScpr states that the only constituents
syntactically present are a subject and a secon-
dary predicate, scSuNrg states that the subject
lacks semantic argument status relative to the
verb, and scAdj states that the secondary predi-
cate is headed by an adjective. The circumstance
that the latter two specifications concern depend-
ents rather than over-all valence, is marked by an
underscore interrelating them.
A transitive counterpart to this type is exem-
plified by han synes meg syk &apos;he seems me sick&apos;,
of the logical form &apos;seem-to-me (he sick)&apos;, where
the subject han still does not have a semantic
</bodyText>
<page confidence="0.996027">
44
</page>
<bodyText confidence="0.998723045454545">
argument function relative to the verb. The label
specifying this type is
v-trScpr-scSuNrg_scAdj
where trScpr states that the constituents syn-
tactically present are a subject, an object and a
secondary predicate, and the other specifications
serve as in the previous example.
With utilization of the slot 2 and slot 3 deter-
minants, around 200 templates have been defined
for Norwegian (these can be viewed at the site
typecraft.org (research/research projects).
Deciding what is to go in slot 2 and what in
slot 3 is in most cases starightforward, but not
always. For instance, it will be noted that in the
copula valence labels entered at the end of the
list in section 3, specifications like &apos;YN&apos;. &apos;DECL&apos;
etc are used which are otherwise used mainly in
dependents&apos; specifications. For one thing, in a
case where an adverb or a PP is obligatory, and
there is no relational &apos;super-term&apos; available for
specifying its presence, one will refer to the con-
stituent by head property directly, as in in-
trAdv. In the case of the copulas, one might
have entered &apos;YN&apos; etc tied to a grammatical rela-
tion &apos;identifier&apos; for the identity copula, and &apos;predi-
cative&apos; for predicative copula, giving, e.g., v-
copPred-predAdj instead of v-copAdj for the
predicative adjectival copula construction, and
v-copID-idN instead of v-copIdN for the
identity construction. Here it is essentially length
of labels, and sparsity concerns concerning
grammatical relations notions, which have
counted in favor of the latter options - either op-
tion is in principle possible.
Conversely, instead of writing &apos;trScpr-
scSuNrg_scAdj&apos; in the example discussed, one
could have written &apos;trScprAdj-scSuNrg&apos;, or
&apos;trScpr-scSuNrgAdj&apos; - against the former is a
wish to generally have POS of dependents being
stated in the dependents&apos; slot, and against the lat-
ter counts the circumstance that the secondary
predicate specifications are in general rather
complex already; this point will be further illus-
trated in section 8 below.
</bodyText>
<sectionHeader confidence="0.842117" genericHeader="method">
5 Thematic roles and situation types
</sectionHeader>
<bodyText confidence="0.99995554054054">
In specifying semantic roles and situation types,
classifications available are less robust than they
are for the factors covered above, and for that
reason, the notational system will not insist that
they should be provided. Closest to practical
consensus are core semantic role labels such as
&apos;agent&apos;, &apos;patient&apos; and the like, and aspectual speci-
fications; much less established is a set of situa-
tion types covering the full range of construc-
tions in a language. In this section we do not
provide any tentative list of values to be used,
but comment only on how they are expressed.
As exemplified in (1), each semantic role label
is built up with a first part indicating the gram-
matical function of the item specified, and the
remainder providing the specification - thus,
suAg, obEjct.. Unlike the case with dependents&apos;
labels, the remaining part has no internal struc-
ture.
Situation types may in principle cover any-
thing between Aktionsart and detailed situational
specification, like in a FrameNet label (cf.
http://framenet.icsi.berkeley.edu/). In the system
currently implemented, the level of specification
is somewhere between these two: Sitaution type
labels can be decomposed into standard aspectual
notions (like those proposed in Smith 1991,
1997) and specifications uniquely identifying
each type. An example is the possible situation
label CAUSATION_WITH_CAUSINGEVENT,
which means &amp;quot;causation where the cause is itself
an event and its event type is linguistically iden-
tified&amp;quot;, and which implies certain aspectual no-
tions, such as &apos;dynamic&apos; and &apos;telic&apos;.
We illustrate the full specification of the ex-
ample han synes meg syk &apos;he seems me sick&apos; dis-
cussed above, which is:
</bodyText>
<equation confidence="0.72397">
(2)
v-trScpr-scSuNrg_scAdj-
obCog_scThSit-PROPOSITIONALATTITUDE
</equation>
<bodyText confidence="0.999562736842106">
&apos;obCog&apos; here means that the object expresses a
&apos;cognizer&apos;, and &apos;scThSit&apos; that the secondary
predication expresses a &apos;situational theme&apos;. It will
be noted that, consistent with the non-argument
status of the subject, there is no thematic role tied
to the subject.
With utilization of the slot 4 and slot 5 deter-
minants, around 280 templates are currently de-
fined for Norwegian.
Slots 3 and 4 are both &apos;constituent oriented&apos;,
and may provide specifications of one and the
same item. For instance, in (2) all of scSuNrg,
scAdj (slot 3), and scThSit (slot 4) define the
secondary predicate. In principle it would be
possible to draw these different specifications
together into a unitary, but more complex, speci-
fication. This was done, e.g., in the TROLL sys-
tem (cf. (Hellan et al. 1989)), where arguments
were specified as triples of (i) head&apos;s POS, (ii)
</bodyText>
<page confidence="0.998431">
45
</page>
<bodyText confidence="0.999814875">
grammatical function, and (iii) thematic role (in-
cluding possible non-argument status). Among
possible advantages of the current system are that
it better profiles &apos;global&apos; properties of the con-
struction, that it better displays the profile of par-
ticipant roles, when entered, and makes omission
of them practically more easy. Cf. (Lehmann et
al. 1996) for further discussion.
</bodyText>
<sectionHeader confidence="0.962695" genericHeader="method">
6 From Templates to Grammars
</sectionHeader>
<bodyText confidence="0.971442846153846">
The information encoded in the first three slots
attains the same depth of argument structure de-
scription as is modeled in standard Matrix-HPSG
grammars, and approximately as in standard
LFG-Pargram grammars (cf. (Butt et al. 1999)).
Argument structure being what is generally en-
coded in lexical entries for verbs in such gram-
mars, we now address how the template system
can be used as lexical types or macros.
Minimally, templates could be imported as &apos;en
bloc&apos; type- or macro labels into computational
grammars. However, the hyphenation and under-
score structure of the templates suggest more
modular strategies, as we will now show for a
typed feature structure design.
For instance, for the template in (2) -
v-trScpr-scSuNrg_scAdj-
obCog_scThSit-PROPOSITIONALATTITUDE
one could see this as equivalent to a unification
of syntactic types representing, resp., &apos;verb-
headed&apos;, &apos;transitive with a secondary predicate&apos;,
&apos;secondary predicate predicated of raised subject&apos;,
and &apos;secondary predicate headed by an adjective&apos;,
and the semantic types &apos;cognizer, as role of ob-
ject&apos;, and &apos;situational theme&apos;, as role of secondary
predicate. In the tdl notation used in LKB gram-
mars, this would suggest (3) as one of its type
definitions (ignoring the situation type label for
now):
(3)
v-trScpr-scSuNrg_scAdj-obCog_scThSit :=
v &amp; trScpr &amp; scSuNrg &amp; scAdj &amp; obCog &amp;
scThSit.
Here, the type in line 1 is defined as the unifica-
tion of the types inter-connected with &apos;&amp;&apos;. Me-
chanically speaking, in going from template to
grammatical type, one simply replaces each hy-
phen or underline in the template label by a type
unification symbol. As individual types (as is
customary, mention of such types is done with
italics) v, trScpr, scSuNrg, scAdj, obCog and
scThSit will all be at &apos;sign&apos; level. That is: when,
in an LKB-like grammar, these types are to unify
with each other, they must belong to a common
supertype, and given that what they are compos-
ing together is the type of a verb lexeme, this is,
in a Matrix-type grammar, an instance of the type
sign. For instance, the type definition for scAdj,
relative to NorSource, is (with PREDIC being an
attribute introducing secondary predicates, and
QVAL introducing grammatical relations in a
non-list fashion, à la LFG):
</bodyText>
<equation confidence="0.890042333333333">
(4) scAdj := sign &amp;
[SYNSEM  |LOCAL  |CAT  |QVAL  |PREDIC  |LO-
CAL  |CAT  |HEAD adj].
</equation>
<bodyText confidence="0.9928764">
In what part of the over-all grammar will these
types be introduced? A first question is if &apos;con-
struction&apos; is a type of entity to be assumed among
the building blocks of the grammar. In standard
HPSG and LFG design, the tendency is to project
construction types into the inventory of lexical
types, so that verb-construction types enter the
grammar through the subcategorization frames
associated with verbs. On this view, a definition
like (3) will be in an inventory of lexical type
definitions.
How do lexical items, in this case verbs, relate
to these types? If we consider the more standard
design in HPSG and LFG grammars, where a
verb has as many entries as there are construction
frames in which it can enter, most verbs can en-
ter more than one constructional environment.1
Thus, in the typical case, a verb will be associ-
ated with a subset of the totality of types deriv-
able from the template collection, and thus have
entries each one defined by one of these types.
Some points of useful flexibility in this map-
ping may be noted, illustrated with the choice of
head in secondary predicate constructions (cf.
(4)): in constructions like those discussed, eligi-
ble such heads are in principle adjectives, ad-
verbs, prepositions, predicative particles and in-
finitivals. For a given verb, the full range of op-
tions need not be open, hence in defining the
general verb type corresponding to the template
v-trScpr-scSuNrg_scAdj-obCog_scThSit
one may want to leave the sc-head open, and
rather have a way of appending that information
for each individual verb. By separating out the
1 We here ignore possible designs which might, for each
verb, represent it with one single entry, and account for its
many frames of occurrence either through a network of
lexical rules, or through underspecifying each entry to yield,
for each verb, exactly the range of environments it can oc-
cur in.
</bodyText>
<page confidence="0.997768">
46
</page>
<bodyText confidence="0.99995325">
relevant part (_scAdj, _scAdv...,), and defining v-
trScpr-sSubNrg_scAdj, v-trScpr-scSuNrg_scAdv,
etc. as subtypes of v-trScpr-sSubNrg, one can in
an LKB grammar enter each verb in the lexicon
with the appropriate last part provided (and leave
them out when the verb actually can combine
with all options). In such an approach one has to
define all constellations in the relevant type file,
the gain lies in the flexibility one has in the lexi-
cal entry specifications. The same advantages
apply with regard to specification of semantic
roles.
</bodyText>
<sectionHeader confidence="0.719107" genericHeader="method">
7 Uses of the template inventories
</sectionHeader>
<bodyText confidence="0.999977943396227">
A first possible usage of a template inventory is
that one can employ a set of example sentences
illustrating the various templates as a test suite
for the grammar. Given the systematic design of
the template list, one is assured to have a system-
atic test suite in the respects covered by the tem-
plates.
A second benefit of the design is as a basis for
building cross-linguistically matching test-suites,
to the extent that templates coincide cross-
linguistically.
For linguistic typology, once one has template
lists developed for many languages, comparison
and systematization of differences can be facili-
tated.
For linguistic description and grammar crea-
tion, having established template lists for related
languages may enhance efficiency, in providing
&apos;check-list&apos; starting and reference points.
All of these points will presuppose that one
can reach a commonly approved standard of no-
tation. (In principle, with different types of nota-
tion, but a one-to-one correlation between nota-
tions, similar effects may be gained, although
there is then an extra step of identifying correla-
tions.)
Currently, such a combined initiative of nota-
tion development and typological investigation is
being pursued for a group of Ghanaian languages
in consonance with the Norwegian system; cf.
(Dakubu, 2008). (For both systems, full template
and example lists can be viewed at the site type-
craft.org mentioned above.)
As still another enterprise connected to the
present template inventory may be mentioned a
partial ontology of verb construction types devel-
oped with the LKB platform (in principle export-
able also to OWL), representing all of the tem-
plates in the Norwegian inventory and some
more. For a partial description, see (Hellan
2007).
Relative to the present system, a verb class
can be identified as a set of verbs which are ac-
commodated by the same set of construction
types. (This notion of &apos;verb class&apos; is related to
that employed in (Levin 1993), which is based
on alternations between construction types. An
alternation, such as the &apos;spray-load alternation&apos;,
can be viewed as a pair of construction types in
which a number of verbs can participate, typi-
cally with rather similar semantics, highlighting
– by a ‘minimal pair’ technique - semantic prop-
erties of the constructions chosen.)
</bodyText>
<sectionHeader confidence="0.925478" genericHeader="method">
8 More complex types
</sectionHeader>
<bodyText confidence="0.990854285714286">
In its current version, the system does not in-
clude &apos;derived&apos; constructions, of which in Nor-
wegian passive constructions would be the main
instance. As a prerequisite for a notational sys-
tem for derivation, systems will first be made for
selected Bantu and Ethio-Semitic languages (rep-
resenting future development)
Possibly also of a derivational nature, but here
treated as basic patterns, are &apos;Secondary predi-
cate&apos; constructions, a few of which were dis-
cussed above. To indicate where the Norwegian
label inventory probably reaches its peak of
complexity, we give a brief resymé of the pa-
rameters involved in these constructions, and the
more complex labels employed.
The secondary predicate (henceforth: secpred)
can relate to the main predicate either as the con-
tent of a propositional attitude or perception, or
as concurring in time, or as the causee of a causa-
tion. In the latter case, either an event is por-
trayed as the cause (indicated by the substring
....Cse), or an entity. In the former case, the
causing event can have from zero to two partici-
pants, and when one or two, one can be implicit.
What can never be implicit is the entity of which
the secpred is predicated: it may occur as subject
or object, and in either case either realizing this
grammatical function by itself (in which case the
function is &apos;non-argument&apos;), or sharing it with a
participant of the causing event (in which case
the function has &apos;argument&apos; status). The following
slot 3 labels serve to encode the various possi-
bilities:
scObArgConcurr (he drank the coffee
warm)
</bodyText>
<page confidence="0.997555">
47
</page>
<bodyText confidence="0.999612419354839">
scObNrgRes (he made me sick): Of the
causing event, only the participant denoted
by the subject is specified.
scSuArgCse (kaffen koker bort &apos;the coffee
boils away&apos;): The matrix verb (together with
its argument subject) expresses part of the
description of the causing event.
scObArgCse (han sparket ballen flat &apos;he
kicked the ball flat&apos;): The secondary predi-
cate is predicated of an argument object,
and the matrix verb (together with its ob-
ject) expresses part of the causing event.
scSuNrgCse (landsbyen snør ned &apos;the vil-
lage snows down&apos;): The secondary predicate
is predicated of a non-argument subject,
and the matrix verb expresses part of the
causing event.
scObNrgCse (han sang rommet tomt &apos;he
sang the room empty&apos;): The secondary predi-
cate is predicated of a non-argument ob-
ject, and the matrix verb (together with its
subject) expresses part of the causing
event.
In dealing with typologically different lan-
guages, it is not a priori given what construc-
tional template options may present them-
selves (see Dakubu op.cit. for discussion of
some Volta Basin languages). Whatever these
additional types may be, in designing labels,
one probably should not exceed the complex-
ity of the labels just presented.
</bodyText>
<sectionHeader confidence="0.997911" genericHeader="conclusions">
9 Conclusion
</sectionHeader>
<bodyText confidence="0.9999894375">
With an encoding of a construction type&apos;s argu-
ment structure and semantics which is probably
representative of what one may want to expose,
each template in the system presented here is by
itself as compressed as can be, which gives the
template structure some interest by itself. How-
ever, it is through the totality of templates, and
through the design by which they can be easily
enumerated, compared and computed, that the
system presented may be a contribution to
grammar engineering and language typology
alike. While the system reflects such ambitions,
it is still in an initial state of deployment both in
grammar engineering and typology, and its po-
tential value will reside in the extent to which it
will be used, and receive feedback for usability.
</bodyText>
<sectionHeader confidence="0.996407" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999880255319149">
Beermann, Dorothee and Lars Hellan. 2004. A treat-
ment of directionals in two implemented HPSG
grammars. In St. Müller (ed) Proceedings of the
HPSG04 Conference, CSLI Publications
/http://csli-publications.stanford.edu/
Bender, Emily M., Dan Flickinger, and Stephan
Oepen. 2002. The Grammar Matrix: An open-
source starter kit for the rapid development of
cross-linguistically consistent broad-coverage pre-
cision grammars. In Proceedings of the Workshop
on Grammar Engineering and Evaluation, Coling
2002, Taipei.
Butt, Miriam, Tracy Holloway King, Maria-Eugenia
Nini and Frederique Segond. 1999. A Grammar-
writer&apos;s Cookbook. Stanford: CSLI Publications.
Copestake, Ann. 2002. Implementing Typed Feature
Structure Grammars. CSLI Publications, Stanford.
Dakubu, Mary E. K. 2008. The Construction label
project: a tool for typological study. Presented at
West African Languages Congress (WALC), Win-
neba, July 2008.
Flickinger, Daniel, John Nerbonne, Ivan A. Sag, and
Thomas Wassow. 1987. Toward Evaluation of
NLP Systems. Technical report. Hewlett-Packard
Laboratories. Distributed at the 24th Annual Meet-
ing of the Association for Computational Linguis-
tics (ACL).
Hellan, Lars. 2007. On &apos;Deep Evaluation&apos; for Individ-
ual Computational Grammars and for Cross-
Framework Comparison. In: T.H. King and E. M.
Bender (eds) Proceedings of the GEAF 2007
Workshop. CSLI Studies in Computational Lin-
guistics ONLINE. CSLI Publications. http://csli-
publications.stanford.edu/
Hellan, Lars., Lars Johnsen and Anneliese Pitz. 1989.
TROLL. Ms., NTNU
Lehmann, Sabine., S. Oepen, S. Regier-Prost, K. Net-
ter, V. Lux, J. Klein, K. Falkedal, F. Fouvry, D. Es-
tival, E. Dauphin, H. Compagnion ,J. Baur, L. Bal-
kan, D. Arnold. 1996. Test Suites for Natural Lan-
guage Processing. Proceedings of COLING 16, p.
711-16.
Levin, Beth. 1993. English Verb Classes and Alterna-
tions: A Preliminary Investigation. University of
Chicago Press.
Smith, Carlota. 1991, 1997. The Parameter of Aspect.
Kluwer Publishers, Dordrecht.
</reference>
<page confidence="0.999353">
48
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.180829">
<title confidence="0.9624875">From Grammar-Independent Construction Enumeration to Lexical Types in Computational Grammars</title>
<author confidence="0.605183">Lars</author>
<pubnum confidence="0.804237">N-7491</pubnum>
<author confidence="0.354074">Norway</author>
<email confidence="0.987329">lars.hellan@hf.ntnu.no</email>
<abstract confidence="0.997577545454545">The paper presents a code for enumerating verb-construction templates, from which lexical type inventories of computational grammars can be derived, and test suites can be systematically developed. The templates also serve for descriptive and typological research. The code is string-based, with divisions into slots providing modularity and flexibility of specification.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Dorothee Beermann</author>
<author>Lars Hellan</author>
</authors>
<title>A treatment of directionals in two implemented HPSG grammars.</title>
<date>2004</date>
<booktitle>In St. Müller (ed) Proceedings of the HPSG04 Conference, CSLI Publications /http://csli-publications.stanford.edu/</booktitle>
<contexts>
<context position="2213" citStr="Beermann and Hellan 2004" startWordPosition="322" endWordPosition="325">eference points of coverage and depth of analysis. The template code also lends itself for descriptive and typological research (section 7). The design is not geared to any particular framework of computational grammar or linguistics. Examples will be offered relative to HPSGand LFG- grammars, and the actual conversions from templates to lexical types so far developed relate to HPSG grammars using the LKB platform (cf. (Copestake 2002)), based on the &apos;HPSG Grammar Matrix&apos; design ((Bender et al. 2002)). Our exposition will be based on the design as it relates to the LKB-grammar NorSource (cf. (Beermann and Hellan 2004)) and a VerbConstruction enumeration for Norwegian. The enterprise here presented has lines going back at least to the mid and late 80ies, both regarding test suite development (e.g., (Flickinger et al. 1987), (Lehmann et al. 1996)) and argument frame inventories ((Hellan et al. 1889)). 2 Code for Template Enumeration By a template for a verb construction we understand a standardized way of exposing selected features of the construction. Exposed features are classificatory features, and in this respect, a template may be regarded as a type. A system for enumerating templates should be designed</context>
</contexts>
<marker>Beermann, Hellan, 2004</marker>
<rawString>Beermann, Dorothee and Lars Hellan. 2004. A treatment of directionals in two implemented HPSG grammars. In St. Müller (ed) Proceedings of the HPSG04 Conference, CSLI Publications /http://csli-publications.stanford.edu/</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
<author>Dan Flickinger</author>
<author>Stephan Oepen</author>
</authors>
<title>The Grammar Matrix: An opensource starter kit for the rapid development of cross-linguistically consistent broad-coverage precision grammars.</title>
<date>2002</date>
<booktitle>In Proceedings of the Workshop on Grammar Engineering and Evaluation, Coling 2002,</booktitle>
<location>Taipei.</location>
<contexts>
<context position="2093" citStr="Bender et al. 2002" startWordPosition="302" endWordPosition="305">s a systematic way of organizing test suites, and herewith improved means of defining intra- and cross-framework reference points of coverage and depth of analysis. The template code also lends itself for descriptive and typological research (section 7). The design is not geared to any particular framework of computational grammar or linguistics. Examples will be offered relative to HPSGand LFG- grammars, and the actual conversions from templates to lexical types so far developed relate to HPSG grammars using the LKB platform (cf. (Copestake 2002)), based on the &apos;HPSG Grammar Matrix&apos; design ((Bender et al. 2002)). Our exposition will be based on the design as it relates to the LKB-grammar NorSource (cf. (Beermann and Hellan 2004)) and a VerbConstruction enumeration for Norwegian. The enterprise here presented has lines going back at least to the mid and late 80ies, both regarding test suite development (e.g., (Flickinger et al. 1987), (Lehmann et al. 1996)) and argument frame inventories ((Hellan et al. 1889)). 2 Code for Template Enumeration By a template for a verb construction we understand a standardized way of exposing selected features of the construction. Exposed features are classificatory fe</context>
</contexts>
<marker>Bender, Flickinger, Oepen, 2002</marker>
<rawString>Bender, Emily M., Dan Flickinger, and Stephan Oepen. 2002. The Grammar Matrix: An opensource starter kit for the rapid development of cross-linguistically consistent broad-coverage precision grammars. In Proceedings of the Workshop on Grammar Engineering and Evaluation, Coling 2002, Taipei.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Miriam Butt</author>
<author>Tracy Holloway King</author>
<author>Maria-Eugenia Nini</author>
<author>Frederique Segond</author>
</authors>
<title>A Grammarwriter&apos;s Cookbook.</title>
<date>1999</date>
<publisher>CSLI Publications.</publisher>
<location>Stanford:</location>
<contexts>
<context position="22091" citStr="Butt et al. 1999" startWordPosition="3521" endWordPosition="3524">, and (iii) thematic role (including possible non-argument status). Among possible advantages of the current system are that it better profiles &apos;global&apos; properties of the construction, that it better displays the profile of participant roles, when entered, and makes omission of them practically more easy. Cf. (Lehmann et al. 1996) for further discussion. 6 From Templates to Grammars The information encoded in the first three slots attains the same depth of argument structure description as is modeled in standard Matrix-HPSG grammars, and approximately as in standard LFG-Pargram grammars (cf. (Butt et al. 1999)). Argument structure being what is generally encoded in lexical entries for verbs in such grammars, we now address how the template system can be used as lexical types or macros. Minimally, templates could be imported as &apos;en bloc&apos; type- or macro labels into computational grammars. However, the hyphenation and underscore structure of the templates suggest more modular strategies, as we will now show for a typed feature structure design. For instance, for the template in (2) - v-trScpr-scSuNrg_scAdjobCog_scThSit-PROPOSITIONALATTITUDE one could see this as equivalent to a unification of syntacti</context>
</contexts>
<marker>Butt, King, Nini, Segond, 1999</marker>
<rawString>Butt, Miriam, Tracy Holloway King, Maria-Eugenia Nini and Frederique Segond. 1999. A Grammarwriter&apos;s Cookbook. Stanford: CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
</authors>
<title>Implementing Typed Feature Structure Grammars.</title>
<date>2002</date>
<publisher>CSLI Publications, Stanford.</publisher>
<contexts>
<context position="2027" citStr="Copestake 2002" startWordPosition="293" endWordPosition="294">Some rights reserved. be derived (section 6). The design offers a systematic way of organizing test suites, and herewith improved means of defining intra- and cross-framework reference points of coverage and depth of analysis. The template code also lends itself for descriptive and typological research (section 7). The design is not geared to any particular framework of computational grammar or linguistics. Examples will be offered relative to HPSGand LFG- grammars, and the actual conversions from templates to lexical types so far developed relate to HPSG grammars using the LKB platform (cf. (Copestake 2002)), based on the &apos;HPSG Grammar Matrix&apos; design ((Bender et al. 2002)). Our exposition will be based on the design as it relates to the LKB-grammar NorSource (cf. (Beermann and Hellan 2004)) and a VerbConstruction enumeration for Norwegian. The enterprise here presented has lines going back at least to the mid and late 80ies, both regarding test suite development (e.g., (Flickinger et al. 1987), (Lehmann et al. 1996)) and argument frame inventories ((Hellan et al. 1889)). 2 Code for Template Enumeration By a template for a verb construction we understand a standardized way of exposing selected fe</context>
</contexts>
<marker>Copestake, 2002</marker>
<rawString>Copestake, Ann. 2002. Implementing Typed Feature Structure Grammars. CSLI Publications, Stanford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary E K Dakubu</author>
</authors>
<title>The Construction label project: a tool for typological study. Presented at West African Languages Congress (WALC),</title>
<date>2008</date>
<location>Winneba,</location>
<contexts>
<context position="27948" citStr="Dakubu, 2008" startWordPosition="4477" endWordPosition="4478"> template lists for related languages may enhance efficiency, in providing &apos;check-list&apos; starting and reference points. All of these points will presuppose that one can reach a commonly approved standard of notation. (In principle, with different types of notation, but a one-to-one correlation between notations, similar effects may be gained, although there is then an extra step of identifying correlations.) Currently, such a combined initiative of notation development and typological investigation is being pursued for a group of Ghanaian languages in consonance with the Norwegian system; cf. (Dakubu, 2008). (For both systems, full template and example lists can be viewed at the site typecraft.org mentioned above.) As still another enterprise connected to the present template inventory may be mentioned a partial ontology of verb construction types developed with the LKB platform (in principle exportable also to OWL), representing all of the templates in the Norwegian inventory and some more. For a partial description, see (Hellan 2007). Relative to the present system, a verb class can be identified as a set of verbs which are accommodated by the same set of construction types. (This notion of &apos;v</context>
</contexts>
<marker>Dakubu, 2008</marker>
<rawString>Dakubu, Mary E. K. 2008. The Construction label project: a tool for typological study. Presented at West African Languages Congress (WALC), Winneba, July 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Flickinger</author>
<author>John Nerbonne</author>
<author>Ivan A Sag</author>
<author>Thomas Wassow</author>
</authors>
<title>Toward Evaluation of NLP Systems.</title>
<date>1987</date>
<booktitle>Technical report. Hewlett-Packard Laboratories. Distributed at the 24th Annual Meeting of the Association for Computational Linguistics (ACL).</booktitle>
<contexts>
<context position="2421" citStr="Flickinger et al. 1987" startWordPosition="356" endWordPosition="359"> grammar or linguistics. Examples will be offered relative to HPSGand LFG- grammars, and the actual conversions from templates to lexical types so far developed relate to HPSG grammars using the LKB platform (cf. (Copestake 2002)), based on the &apos;HPSG Grammar Matrix&apos; design ((Bender et al. 2002)). Our exposition will be based on the design as it relates to the LKB-grammar NorSource (cf. (Beermann and Hellan 2004)) and a VerbConstruction enumeration for Norwegian. The enterprise here presented has lines going back at least to the mid and late 80ies, both regarding test suite development (e.g., (Flickinger et al. 1987), (Lehmann et al. 1996)) and argument frame inventories ((Hellan et al. 1889)). 2 Code for Template Enumeration By a template for a verb construction we understand a standardized way of exposing selected features of the construction. Exposed features are classificatory features, and in this respect, a template may be regarded as a type. A system for enumerating templates should be designed such that they are, internal to a given language, complete and transparent, and across languages, comparable both in templates shared and in templates distinct. Technologically they should be as low level as</context>
</contexts>
<marker>Flickinger, Nerbonne, Sag, Wassow, 1987</marker>
<rawString>Flickinger, Daniel, John Nerbonne, Ivan A. Sag, and Thomas Wassow. 1987. Toward Evaluation of NLP Systems. Technical report. Hewlett-Packard Laboratories. Distributed at the 24th Annual Meeting of the Association for Computational Linguistics (ACL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lars Hellan</author>
</authors>
<title>On &apos;Deep Evaluation&apos; for Individual Computational Grammars and for CrossFramework Comparison. In:</title>
<date>2007</date>
<booktitle>Proceedings of the GEAF 2007 Workshop. CSLI Studies in Computational Linguistics ONLINE.</booktitle>
<publisher>CSLI Publications. http://cslipublications.stanford.edu/</publisher>
<contexts>
<context position="28385" citStr="Hellan 2007" startWordPosition="4548" endWordPosition="4549">initiative of notation development and typological investigation is being pursued for a group of Ghanaian languages in consonance with the Norwegian system; cf. (Dakubu, 2008). (For both systems, full template and example lists can be viewed at the site typecraft.org mentioned above.) As still another enterprise connected to the present template inventory may be mentioned a partial ontology of verb construction types developed with the LKB platform (in principle exportable also to OWL), representing all of the templates in the Norwegian inventory and some more. For a partial description, see (Hellan 2007). Relative to the present system, a verb class can be identified as a set of verbs which are accommodated by the same set of construction types. (This notion of &apos;verb class&apos; is related to that employed in (Levin 1993), which is based on alternations between construction types. An alternation, such as the &apos;spray-load alternation&apos;, can be viewed as a pair of construction types in which a number of verbs can participate, typically with rather similar semantics, highlighting – by a ‘minimal pair’ technique - semantic properties of the constructions chosen.) 8 More complex types In its current vers</context>
</contexts>
<marker>Hellan, 2007</marker>
<rawString>Hellan, Lars. 2007. On &apos;Deep Evaluation&apos; for Individual Computational Grammars and for CrossFramework Comparison. In: T.H. King and E. M. Bender (eds) Proceedings of the GEAF 2007 Workshop. CSLI Studies in Computational Linguistics ONLINE. CSLI Publications. http://cslipublications.stanford.edu/</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lars Hellan</author>
<author>Lars Johnsen</author>
<author>Anneliese Pitz</author>
</authors>
<date>1989</date>
<journal>TROLL. Ms., NTNU</journal>
<contexts>
<context position="21382" citStr="Hellan et al. 1989" startWordPosition="3411" endWordPosition="3414">stent with the non-argument status of the subject, there is no thematic role tied to the subject. With utilization of the slot 4 and slot 5 determinants, around 280 templates are currently defined for Norwegian. Slots 3 and 4 are both &apos;constituent oriented&apos;, and may provide specifications of one and the same item. For instance, in (2) all of scSuNrg, scAdj (slot 3), and scThSit (slot 4) define the secondary predicate. In principle it would be possible to draw these different specifications together into a unitary, but more complex, specification. This was done, e.g., in the TROLL system (cf. (Hellan et al. 1989)), where arguments were specified as triples of (i) head&apos;s POS, (ii) 45 grammatical function, and (iii) thematic role (including possible non-argument status). Among possible advantages of the current system are that it better profiles &apos;global&apos; properties of the construction, that it better displays the profile of participant roles, when entered, and makes omission of them practically more easy. Cf. (Lehmann et al. 1996) for further discussion. 6 From Templates to Grammars The information encoded in the first three slots attains the same depth of argument structure description as is modeled in</context>
</contexts>
<marker>Hellan, Johnsen, Pitz, 1989</marker>
<rawString>Hellan, Lars., Lars Johnsen and Anneliese Pitz. 1989. TROLL. Ms., NTNU</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sabine Lehmann</author>
<author>S Oepen</author>
<author>S Regier-Prost</author>
<author>K Netter</author>
<author>V Lux</author>
<author>J Klein</author>
<author>K Falkedal</author>
<author>F Fouvry</author>
<author>D Estival</author>
<author>E Dauphin</author>
<author>H Compagnion</author>
</authors>
<title>Test Suites for Natural Language Processing.</title>
<date>1996</date>
<booktitle>Proceedings of COLING 16,</booktitle>
<pages>711--16</pages>
<contexts>
<context position="2444" citStr="Lehmann et al. 1996" startWordPosition="360" endWordPosition="363">xamples will be offered relative to HPSGand LFG- grammars, and the actual conversions from templates to lexical types so far developed relate to HPSG grammars using the LKB platform (cf. (Copestake 2002)), based on the &apos;HPSG Grammar Matrix&apos; design ((Bender et al. 2002)). Our exposition will be based on the design as it relates to the LKB-grammar NorSource (cf. (Beermann and Hellan 2004)) and a VerbConstruction enumeration for Norwegian. The enterprise here presented has lines going back at least to the mid and late 80ies, both regarding test suite development (e.g., (Flickinger et al. 1987), (Lehmann et al. 1996)) and argument frame inventories ((Hellan et al. 1889)). 2 Code for Template Enumeration By a template for a verb construction we understand a standardized way of exposing selected features of the construction. Exposed features are classificatory features, and in this respect, a template may be regarded as a type. A system for enumerating templates should be designed such that they are, internal to a given language, complete and transparent, and across languages, comparable both in templates shared and in templates distinct. Technologically they should be as low level as possible, and platform</context>
<context position="21806" citStr="Lehmann et al. 1996" startWordPosition="3477" endWordPosition="3480">n principle it would be possible to draw these different specifications together into a unitary, but more complex, specification. This was done, e.g., in the TROLL system (cf. (Hellan et al. 1989)), where arguments were specified as triples of (i) head&apos;s POS, (ii) 45 grammatical function, and (iii) thematic role (including possible non-argument status). Among possible advantages of the current system are that it better profiles &apos;global&apos; properties of the construction, that it better displays the profile of participant roles, when entered, and makes omission of them practically more easy. Cf. (Lehmann et al. 1996) for further discussion. 6 From Templates to Grammars The information encoded in the first three slots attains the same depth of argument structure description as is modeled in standard Matrix-HPSG grammars, and approximately as in standard LFG-Pargram grammars (cf. (Butt et al. 1999)). Argument structure being what is generally encoded in lexical entries for verbs in such grammars, we now address how the template system can be used as lexical types or macros. Minimally, templates could be imported as &apos;en bloc&apos; type- or macro labels into computational grammars. However, the hyphenation and und</context>
</contexts>
<marker>Lehmann, Oepen, Regier-Prost, Netter, Lux, Klein, Falkedal, Fouvry, Estival, Dauphin, Compagnion, 1996</marker>
<rawString>Lehmann, Sabine., S. Oepen, S. Regier-Prost, K. Netter, V. Lux, J. Klein, K. Falkedal, F. Fouvry, D. Estival, E. Dauphin, H. Compagnion ,J. Baur, L. Balkan, D. Arnold. 1996. Test Suites for Natural Language Processing. Proceedings of COLING 16, p. 711-16.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Beth Levin</author>
</authors>
<title>English Verb Classes and Alternations: A Preliminary Investigation.</title>
<date>1993</date>
<publisher>University of Chicago Press.</publisher>
<contexts>
<context position="28602" citStr="Levin 1993" startWordPosition="4588" endWordPosition="4589">ple lists can be viewed at the site typecraft.org mentioned above.) As still another enterprise connected to the present template inventory may be mentioned a partial ontology of verb construction types developed with the LKB platform (in principle exportable also to OWL), representing all of the templates in the Norwegian inventory and some more. For a partial description, see (Hellan 2007). Relative to the present system, a verb class can be identified as a set of verbs which are accommodated by the same set of construction types. (This notion of &apos;verb class&apos; is related to that employed in (Levin 1993), which is based on alternations between construction types. An alternation, such as the &apos;spray-load alternation&apos;, can be viewed as a pair of construction types in which a number of verbs can participate, typically with rather similar semantics, highlighting – by a ‘minimal pair’ technique - semantic properties of the constructions chosen.) 8 More complex types In its current version, the system does not include &apos;derived&apos; constructions, of which in Norwegian passive constructions would be the main instance. As a prerequisite for a notational system for derivation, systems will first be made fo</context>
</contexts>
<marker>Levin, 1993</marker>
<rawString>Levin, Beth. 1993. English Verb Classes and Alternations: A Preliminary Investigation. University of Chicago Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carlota Smith</author>
</authors>
<title>The Parameter of Aspect.</title>
<date>1991</date>
<publisher>Kluwer Publishers,</publisher>
<location>Dordrecht.</location>
<contexts>
<context position="20105" citStr="Smith 1991" startWordPosition="3212" endWordPosition="3213"> with a first part indicating the grammatical function of the item specified, and the remainder providing the specification - thus, suAg, obEjct.. Unlike the case with dependents&apos; labels, the remaining part has no internal structure. Situation types may in principle cover anything between Aktionsart and detailed situational specification, like in a FrameNet label (cf. http://framenet.icsi.berkeley.edu/). In the system currently implemented, the level of specification is somewhere between these two: Sitaution type labels can be decomposed into standard aspectual notions (like those proposed in Smith 1991, 1997) and specifications uniquely identifying each type. An example is the possible situation label CAUSATION_WITH_CAUSINGEVENT, which means &amp;quot;causation where the cause is itself an event and its event type is linguistically identified&amp;quot;, and which implies certain aspectual notions, such as &apos;dynamic&apos; and &apos;telic&apos;. We illustrate the full specification of the example han synes meg syk &apos;he seems me sick&apos; discussed above, which is: (2) v-trScpr-scSuNrg_scAdjobCog_scThSit-PROPOSITIONALATTITUDE &apos;obCog&apos; here means that the object expresses a &apos;cognizer&apos;, and &apos;scThSit&apos; that the secondary predication exp</context>
</contexts>
<marker>Smith, 1991</marker>
<rawString>Smith, Carlota. 1991, 1997. The Parameter of Aspect. Kluwer Publishers, Dordrecht.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>