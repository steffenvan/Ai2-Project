<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.153788">
<title confidence="0.9980935">
Integrating Natural Language Generation
with XML Web Technology
</title>
<author confidence="0.998506">
Graham Wilcock
</author>
<affiliation confidence="0.999238">
University of Helsinki
</affiliation>
<address confidence="0.723918">
00014 Helsinki, Finland
</address>
<email confidence="0.995482">
graham.wilcock@helsinki.fi
</email>
<sectionHeader confidence="0.997348" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999961428571429">
The paper describes a software demo
integrating Natural Language Genera-
tion (NLG) techniques with recent de-
velopments in XML web technology.
The NLG techniques include a form of
template-based generation, transforma-
tion of text plan trees to text specifi-
cation trees, and a multi-stage pipeline
architecture. The web technology in-
cludes XSLT transformation processors,
an XML database, a Java servlet engine,
the Cocoon web publishing framework
and a Java speech synthesizer. The soft-
ware is all free, open-source.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999978285714286">
XML-based techniques for natural language gen-
eration are described by Wilcock (2001), based on
practical experience in developing an XML-based
generation component for a spoken dialogue sys-
tem (Jokinen and Wilcock, 2001).
The basic approach in the earlier work was to
construct a pipeline of XSLT transformations cor-
responding to the different NLG processing tasks.
The current work extends this by putting the XSLT
pipelines inside an Apache Cocoon XML server,
and by putting the lexicon in an Apache Xindice
native XML database. Also, the earlier speech
synthesizer is replaced by FreeTTS, a speech syn-
thesizer implemented in Java. Some of these ex-
tensions are described by Wilcock (2002).
The paper is organised as follows. Section 2
briefly summarizes the main tasks of NLG and
Section 3 then describes how these tasks can be
implemented using recent XML web technology.
Section 4 gives details of a software demo based
on this approach, showing a concrete example.
</bodyText>
<sectionHeader confidence="0.987414" genericHeader="method">
2 Brief Summary of NLG
</sectionHeader>
<bodyText confidence="0.9894545">
The most common design for NLG systems is a
pipeline architecture. The version described by
Reiter and Dale (2000) has the following modules
and tasks:
</bodyText>
<listItem confidence="0.9943157">
• Text Planning
— content determination
— discourse structuring
• Microplanning
— lexicalization
— referring expression generation
— aggregation
• Realization
— linguistic realization
— structure realization
</listItem>
<bodyText confidence="0.999879">
The interface between text planning and micro-
planning is a text plan, a tree whose leaves are
domain-specific concept messages. The interface
between microplanning and realization is a text
specification, another tree whose leaves are lin-
guistic phrase specifications. The various stages
of the NLG pipeline perform transformations on
the text plan tree and the text specification tree.
The status of template-based generation has
been debated by NLG researchers (Becker and
Busemann, 1999), but if it means &amp;quot;making exten-
sive use of a mapping between semantic structures
and representations of linguistic surface structures
that contain gaps&amp;quot; (van Deemter et al., 1999), then
it is a good way to create initial text plan trees that
contain gaps to be filled later when the concept
messages are turned into phrase specifications in
the text specification tree.
</bodyText>
<page confidence="0.998326">
247
</page>
<sectionHeader confidence="0.998756" genericHeader="method">
3 XMLWebTechnology
</sectionHeader>
<bodyText confidence="0.999923673913043">
As described by Wilcock (2001), XML-based
NLG can be performed by a sequence of XSLT
transformations. Template-based generation of the
initial text plan tree can be done by XSLT tem-
plates. Subsequent transformations of the text plan
tree during microplanning can be done by spe-
cialised XSLT transformations to produce the text
specification tree.
Java-based XSLT processors such as Xalan
(Apache XML Project, 2003c) can be embedded
in Java servlets and executed in a servlet engine
such as Tomcat (Apache Jakarta Project, 2003).
Moreover, it is now possible to embed complete
sequences of XSLT transformations, organised as
pipelines, inside Cocoon (Apache XML Project,
2003b). Cocoon runs as a web application inside
Tomcat, and offers high-performance XSLT pro-
cessing and scalability.
As Cocoon supports re-configurable pipelines
of XSLT transformations, pipelines for different
NLG requirements can be set up. For example,
Finnish and English generation pipelines can in-
clude the same XSLT transforms for text planning
stages which are domain-specific, but have differ-
ent sequences of transforms in the microplanning
and realization stages which are language-specific
(Wilcock, 2002).
The Apache Xindice native XML database
(Apache XML Project, 2003a) also runs as a web
application in Tomcat, and can be used together
with Cocoon. Xindice provides suitable support
for a lexicon in XML form, which can be indexed
to meet different processing requirements. For
generation, words can be indexed by concepts in-
stead of by spelling.
FreeTTS (Sun Microsystems, 2002) is a speech
synthesizer implemented in Java, which accepts
JSML, Java Speech Markup Language (Sun Mi-
crosystems, 1999). Because it is Java-based
FreeTTS can be embedded in Java servlets, and as
JSML is XML-based the XSLT pipelines can eas-
ily produce JSML output. However, the current
version of FreeTTS has some restrictions: JSML
markup is accepted but not actually applied to
the speech output, and there are only English and
MBROLA voices.
</bodyText>
<sectionHeader confidence="0.975517" genericHeader="method">
4 The Demonstration System
</sectionHeader>
<bodyText confidence="0.999818444444444">
The demonstration system performs bilingual gen-
eration of responses, in Finnish and English, as
part of a Helsinki bus timetable enquiry system.
The responses depend on the dialogue context
and can vary from full sentences to short ellipti-
cal phrases. The system demonstrates only gen-
eration - it does not include speech recognition,
language understanding or dialogue management
components.
</bodyText>
<subsectionHeader confidence="0.991945">
4.1 Input: an Agenda
</subsectionHeader>
<bodyText confidence="0.998834857142857">
The starting point is an agenda, a set of concepts
marked with Topic and NewInfo tags as explained
by Jokinen and Wilcock (2001). In the dialogue
system this is given by the dialogue manager. In
the demo, a number of different starting agendas
are provided, and their contents can be changed as
desired.
</bodyText>
<table confidence="0.901473464285714">
&lt;AG id=&amp;quot;AG1&amp;quot; type=&amp;quot;transcription&amp;quot;
timeline=&amp;quot;Timeline1&amp;quot;›
&lt;Anchor id=&amp;quot;AG1 anchor1&amp;quot; offset=&amp;quot;1&amp;quot;/&gt;
&lt;Anchor id=&amp;quot;AG1_anchor2&amp;quot; offset=&amp;quot;2&amp;quot;/&gt;
&lt;Annotation id=&amp;quot;AG1 ann1&amp;quot; type=&amp;quot;Concept&amp;quot;
start=&amp;quot;AGl_anchorl&amp;quot; end=&amp;quot;AG1_anchor2&amp;quot;›
&lt;Feat name=&amp;quot;score&amp;quot;&gt;0.0123&lt;/Feat&gt;
&lt;Feat name=&amp;quot;name&amp;quot;&gt;route&lt;/Feat&gt;
&lt;Feat name=&amp;quot;status&amp;quot;&gt;new-info&lt;/Feat&gt;
&lt;Feat name=&amp;quot;value&amp;quot;&gt;81&lt;/Feat&gt;
&lt;/Annotation&gt;
&lt;Annotation id=&amp;quot;AG1_ann2&amp;quot; type=&amp;quot;Concept&amp;quot;
start=&amp;quot;AG1 anchor1&amp;quot; end=&amp;quot;AG1 anchor2&amp;quot;›
&lt;Feat name=&amp;quot;score&amp;quot;&gt;0.0123&lt;/Feat&gt;
&lt;Feat name=&amp;quot;name&amp;quot;&gt;time&lt;/Feat&gt;
&lt;Feat name=&amp;quot;status&amp;quot;&gt;new-info&lt;/Feat&gt;
&lt;Feat name=&amp;quot;yalue&amp;quot;&gt;11:37&lt;/Feat&gt;
&lt;/Annotation&gt;
&lt;Annotation id=&amp;quot;AG1_ann3&amp;quot; type=&amp;quot;Concept&amp;quot;
start=&amp;quot;AGl_anchor1&amp;quot; end=&amp;quot;AG1_anchor2&amp;quot;›
&lt;Feat name=&amp;quot;score&amp;quot;&gt;0.1234&lt;/Feat&gt;
&lt;Feat name=&amp;quot;name&amp;quot;&gt;place&lt;/Feat&gt;
&lt;Feat name=&amp;quot;constr&amp;quot;&gt;depart&lt;/Feat&gt;
&lt;Feat name=&amp;quot;status&amp;quot;&gt;topic&lt;/Feat&gt;
&lt;Feat name=&amp;quot;yalue&amp;quot;&gt;herttoniemenranta
&lt;/Feat&gt;
&lt;/Annotation&gt;
&lt;/AG&gt;
</table>
<figureCaption confidence="0.998738">
Figure 1: An Agenda
</figureCaption>
<bodyText confidence="0.999921">
The agenda is represented in the full dialogue
system as an annotation graph (Bird et al., 2001),
as in Figure 1. This example shows an agenda for
a response following the enquiry When does the
</bodyText>
<page confidence="0.988601">
248
</page>
<bodyText confidence="0.996565428571429">
next bus leave from Herttoniemenranta? The con-
cept for departure place is marked as topic, and
the concepts for route number and departure time
are marked as new information. The response,
which will be generated step-by-step in the next
few sections, will be Number 81 leaves from there
at 11:37.
</bodyText>
<subsectionHeader confidence="0.993802">
4.2 Text Planning
</subsectionHeader>
<bodyText confidence="0.9986145">
In text planning, the content determination stage
simply extracts the concepts from the annotation
graph. Because the dialogue manager has already
decided the relevant concepts and put them in the
agenda, no other content determination is needed.
The discourse structuring stage creates a text
plan tree using the form of template-based genera-
tion described by Wilcock (2001). In the dialogue-
oriented system, the text plan is called a response
plan.
</bodyText>
<figure confidence="0.99971">
&lt;ResponsePlan&gt;
&lt;Message&gt;
&lt;type&gt;NumFromDepMsg&lt;/type&gt;
&lt;concept info=&amp;quot;NewInfon&gt;
&lt;type&gt;bus-number&lt;/type&gt;
&lt;value&gt;81&lt;/value&gt;
&lt;/concept&gt;
&lt;concept info=&amp;quot;NewInfon&gt;
&lt;type&gt;departure-time&lt;/type&gt;
&lt;value&gt;11:37&lt;/value&gt;
&lt;/concept&gt;
&lt;concept info=&amp;quot;Topicn&gt;
&lt;type&gt;departure-place&lt;/type&gt;
&lt;value&gt;herttoniemenranta&lt;/value&gt;
&lt;/concept&gt;
&lt;/Message&gt;
&lt;/ResponsePlan&gt;
</figure>
<figureCaption confidence="0.999849">
Figure 2: A Text Plan (Response Plan)
</figureCaption>
<bodyText confidence="0.999970733333333">
The text plans are XML tree structures contain-
ing variable slots, which will be filled in later by
the microplanning stages. In the text planning
stage, the concepts from the agenda are copied di-
rectly into the appropriate slots. So in Figure 2,
the concepts are the same as in Figure 1, only the
format has changed.
Note that in this example there is only one
message, which is typical in spoken dialogue re-
sponses. In multi-paragraph text generation there
would be large numbers of messages. Note also
that the departure place is Topic, and the bus num-
ber and time are NewInfo.
In the demonstration system, tracing can be
switched on so that the text plan is displayed.
</bodyText>
<subsectionHeader confidence="0.999531">
4.3 Microplanning
</subsectionHeader>
<bodyText confidence="0.9997547">
The processing during microplanning is done by
a sequence of XSLT transformations, as described
by Wilcock (2001). The text plan tree is replaced
by a text specification tree, here called a response
specification.
At later stages of the pipeline, further informa-
tion is added to the tree or nodes in the tree are
replaced by new nodes. In the referring expres-
sion stage of microplanning, domain concepts are
replaced with linguistic referring expressions.
</bodyText>
<figure confidence="0.999634173913044">
&lt;ResponseSpec&gt;
&lt;PhraseSpec&gt;
&lt;head&gt;leave&lt;/head&gt;
&lt;subject&gt;
&lt;head&gt;number&lt;/head&gt;
&lt;attribute&gt;81&lt;/attribute&gt;
&lt;/subject&gt;
&lt;adverbial&gt;
&lt;advtype&gt;from-place&lt;/advtype&gt;
&lt;head&gt;from&lt;/head&gt;
&lt;object&gt;
&lt;head&gt;there&lt;/head&gt;
&lt;/object&gt;
&lt;/adverbial&gt;
&lt;adverbial&gt;
&lt;advtype&gt;at-time&lt;/advtype&gt;
&lt;head&gt;at&lt;/head&gt;
&lt;object&gt;
&lt;attribute&gt;11:37&lt;/attribute&gt;
&lt;/object&gt;
&lt;/adverbial&gt;
&lt;/PhraseSpec&gt;
&lt;/ResponseSpec&gt;
</figure>
<figureCaption confidence="0.999948">
Figure 3: A Text Specification
</figureCaption>
<bodyText confidence="0.999895">
In the text specification in Figure 3 the concepts
of Figure 2 have been replaced by linguistic spec-
ifications. In the lexicalization stage, the &lt;head&gt;
words are inserted with their dependents, using a
form of head-dependency structure.
In the referring expressions stage, the departure-
place concept which was marked as Topic in
Figure 2 has been pronominalized as there. If
the same departure-place concept were marked as
NewInfo, it would be realized by the actual text
value of the departure placename.
In the demonstration system, tracing can also be
switched on so that the generated text specification
is displayed.
</bodyText>
<page confidence="0.994088">
249
</page>
<subsectionHeader confidence="0.92132">
4.4 Realization
</subsectionHeader>
<bodyText confidence="0.995715">
The realization stage produces output which is
marked up in Java Speech Markup Language (Sun
Microsystems, 1999).
</bodyText>
<figure confidence="0.986702125">
&lt;jsml lang=&amp;quot;enn&gt;
&lt;div type=&amp;quot;sentn&gt;
number
&lt;sayas class=&amp;quot;numbern&gt;81&lt;/sayas&gt;
leaves from there at
&lt;sayas class=&amp;quot;timen&gt;11:37&lt;/sayas&gt;
&lt;/div&gt;
&lt;/jsml&gt;
</figure>
<figureCaption confidence="0.999973">
Figure 4: Speech Markup
</figureCaption>
<bodyText confidence="0.9985792">
In Figure 4, the &lt;head&gt; words of Figure 3
provide the main content. The speech markup is
rather simplistic: &lt; di v type=&amp;quot;sent&amp;quot;&gt; marks
sentence boundaries, &lt; s ayas=&amp;quot;number&amp;quot;&gt; tells
the speech synthesizer that &amp;quot;81&amp;quot; should be pro-
nounced &amp;quot;eighty-one&amp;quot; not &amp;quot;eight one&amp;quot;.
The JSML output is passed to the FreeTTS
speech synthesizer (Sun Microsystems, 2002)
which produces the spoken response, in this case
Number 81 leaves from there at 11:37.
</bodyText>
<sectionHeader confidence="0.99877" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999963666666667">
The demonstration framework shows natural lan-
guage generation techniques closely integrated
with recent developments in XML web technology
(Xalan XSLT processors, Apache Xindice native
XML database, Tomcat servlet engine, Cocoon
web publishing framework, and FreeTTS speech
synthesizer). The software is all free, open-source,
and implemented in Java.
Using Cocoon, it is possible to modify an XSLT
transformation stylesheet and see the effect imme-
diately. The framework described here can there-
fore be used as a development environment for
XML-based NLG applications.
By switching on tracing to display the interme-
diate text plan and text specification, the approach
can also be used to teach natural language genera-
tion concepts.
The approach is being further developed.
</bodyText>
<sectionHeader confidence="0.996459" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999894928571429">
Apache Jakarta Project. 2003. Tomcat (latest version).
http://jakarta.apache.org/tomcat/.
Apache XML Project. 2003a. Apache Xindice.
http://xml.apache.org/xindice/.
Apache XML Project. 2003b. Cocoon (latest version).
http://xml.apache.org/cocoon/.
Apache XML Project. 2003c. Xalan-Java (latest ver-
sion). http://xml.apache.org/xalan-j/.
Tilman Becker and Stephan Busemann, editors. 1999.
May I Speak Freely? Between Templates and Free
Choice in Natural Language Generation. Proceed-
ings of the KI-99 Workshop. DFKI, Saarbrficken.
Steven Bird, Kazuaki Maeda, and Xiaoyi Ma. 2001.
AGTK: The annotation graph toolkit. In IRCS Work-
shop on Linguistic Databases, Philadelphia.
Kristiina Jokinen and Graham Wilcock. 2001.
Confidence-based adaptivity in response generation
for a spoken dialogue system. In Proceedings of the
2nd SIGdial Workshop on Discourse and Dialogue,
pages 80-89, Aalborg, Denmark.
Ehud Reiter and Robert Dale. 2000. Building Natural
Language Generation Systems. Cambridge Univer-
sity Press.
Sun Microsystems. 1999. Java Speech
Markup Language Specification, version
0.6. http: //java.sun.com/products/java-media/
speech/forDevelopers/JSML.
Sun Microsystems. 2002. FreeTTS: A speech synthe-
sizer written entirly in the Java programming lan-
guage. http://freetts.sourceforge.net/.
Kees van Deemter, Emiel Krahmer, and Mariet The-
une. 1999. Plan-based vs. template-based NLG: A
false opposition? In Becker and Busemann (1999),
pages 1-5.
Graham Wilcock. 2001. Pipelines, templates and
transformations: XML for natural language genera-
tion. In Proceedings of the 1st NLP and XML Work-
shop, pages 1-8, Tokyo.
Graham Wilcock. 2002. XML-based Natural Lan-
guage Generation. In Towards the Semantic Web
and Web Services: XML Finland 2002 Slide Presen-
tations, pages 40-63, Helsinki.
</reference>
<page confidence="0.997152">
250
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.688467">
<title confidence="0.9222925">Integrating Natural Language Generation with XML Web Technology</title>
<author confidence="0.999771">Graham Wilcock</author>
<affiliation confidence="0.999978">University of Helsinki</affiliation>
<address confidence="0.999979">00014 Helsinki, Finland</address>
<email confidence="0.995919">graham.wilcock@helsinki.fi</email>
<abstract confidence="0.987665466666667">The paper describes a software demo integrating Natural Language Generation (NLG) techniques with recent developments in XML web technology. The NLG techniques include a form of template-based generation, transformation of text plan trees to text specification trees, and a multi-stage pipeline architecture. The web technology includes XSLT transformation processors, an XML database, a Java servlet engine, the Cocoon web publishing framework and a Java speech synthesizer. The software is all free, open-source.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Apache Jakarta Project</author>
</authors>
<date>2003</date>
<note>Tomcat (latest version). http://jakarta.apache.org/tomcat/.</note>
<contexts>
<context position="3341" citStr="Project, 2003" startWordPosition="510" endWordPosition="511"> good way to create initial text plan trees that contain gaps to be filled later when the concept messages are turned into phrase specifications in the text specification tree. 247 3 XMLWebTechnology As described by Wilcock (2001), XML-based NLG can be performed by a sequence of XSLT transformations. Template-based generation of the initial text plan tree can be done by XSLT templates. Subsequent transformations of the text plan tree during microplanning can be done by specialised XSLT transformations to produce the text specification tree. Java-based XSLT processors such as Xalan (Apache XML Project, 2003c) can be embedded in Java servlets and executed in a servlet engine such as Tomcat (Apache Jakarta Project, 2003). Moreover, it is now possible to embed complete sequences of XSLT transformations, organised as pipelines, inside Cocoon (Apache XML Project, 2003b). Cocoon runs as a web application inside Tomcat, and offers high-performance XSLT processing and scalability. As Cocoon supports re-configurable pipelines of XSLT transformations, pipelines for different NLG requirements can be set up. For example, Finnish and English generation pipelines can include the same XSLT transforms for text </context>
</contexts>
<marker>Project, 2003</marker>
<rawString>Apache Jakarta Project. 2003. Tomcat (latest version). http://jakarta.apache.org/tomcat/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Apache XML Project</author>
</authors>
<date>2003</date>
<note>Apache Xindice. http://xml.apache.org/xindice/.</note>
<contexts>
<context position="3341" citStr="Project, 2003" startWordPosition="510" endWordPosition="511"> good way to create initial text plan trees that contain gaps to be filled later when the concept messages are turned into phrase specifications in the text specification tree. 247 3 XMLWebTechnology As described by Wilcock (2001), XML-based NLG can be performed by a sequence of XSLT transformations. Template-based generation of the initial text plan tree can be done by XSLT templates. Subsequent transformations of the text plan tree during microplanning can be done by specialised XSLT transformations to produce the text specification tree. Java-based XSLT processors such as Xalan (Apache XML Project, 2003c) can be embedded in Java servlets and executed in a servlet engine such as Tomcat (Apache Jakarta Project, 2003). Moreover, it is now possible to embed complete sequences of XSLT transformations, organised as pipelines, inside Cocoon (Apache XML Project, 2003b). Cocoon runs as a web application inside Tomcat, and offers high-performance XSLT processing and scalability. As Cocoon supports re-configurable pipelines of XSLT transformations, pipelines for different NLG requirements can be set up. For example, Finnish and English generation pipelines can include the same XSLT transforms for text </context>
</contexts>
<marker>Project, 2003</marker>
<rawString>Apache XML Project. 2003a. Apache Xindice. http://xml.apache.org/xindice/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Apache XML Project</author>
</authors>
<date>2003</date>
<note>Cocoon (latest version). http://xml.apache.org/cocoon/.</note>
<contexts>
<context position="3341" citStr="Project, 2003" startWordPosition="510" endWordPosition="511"> good way to create initial text plan trees that contain gaps to be filled later when the concept messages are turned into phrase specifications in the text specification tree. 247 3 XMLWebTechnology As described by Wilcock (2001), XML-based NLG can be performed by a sequence of XSLT transformations. Template-based generation of the initial text plan tree can be done by XSLT templates. Subsequent transformations of the text plan tree during microplanning can be done by specialised XSLT transformations to produce the text specification tree. Java-based XSLT processors such as Xalan (Apache XML Project, 2003c) can be embedded in Java servlets and executed in a servlet engine such as Tomcat (Apache Jakarta Project, 2003). Moreover, it is now possible to embed complete sequences of XSLT transformations, organised as pipelines, inside Cocoon (Apache XML Project, 2003b). Cocoon runs as a web application inside Tomcat, and offers high-performance XSLT processing and scalability. As Cocoon supports re-configurable pipelines of XSLT transformations, pipelines for different NLG requirements can be set up. For example, Finnish and English generation pipelines can include the same XSLT transforms for text </context>
</contexts>
<marker>Project, 2003</marker>
<rawString>Apache XML Project. 2003b. Cocoon (latest version). http://xml.apache.org/cocoon/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Apache XML Project</author>
</authors>
<date>2003</date>
<note>Xalan-Java (latest version). http://xml.apache.org/xalan-j/.</note>
<contexts>
<context position="3341" citStr="Project, 2003" startWordPosition="510" endWordPosition="511"> good way to create initial text plan trees that contain gaps to be filled later when the concept messages are turned into phrase specifications in the text specification tree. 247 3 XMLWebTechnology As described by Wilcock (2001), XML-based NLG can be performed by a sequence of XSLT transformations. Template-based generation of the initial text plan tree can be done by XSLT templates. Subsequent transformations of the text plan tree during microplanning can be done by specialised XSLT transformations to produce the text specification tree. Java-based XSLT processors such as Xalan (Apache XML Project, 2003c) can be embedded in Java servlets and executed in a servlet engine such as Tomcat (Apache Jakarta Project, 2003). Moreover, it is now possible to embed complete sequences of XSLT transformations, organised as pipelines, inside Cocoon (Apache XML Project, 2003b). Cocoon runs as a web application inside Tomcat, and offers high-performance XSLT processing and scalability. As Cocoon supports re-configurable pipelines of XSLT transformations, pipelines for different NLG requirements can be set up. For example, Finnish and English generation pipelines can include the same XSLT transforms for text </context>
</contexts>
<marker>Project, 2003</marker>
<rawString>Apache XML Project. 2003c. Xalan-Java (latest version). http://xml.apache.org/xalan-j/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tilman Becker</author>
<author>Stephan Busemann</author>
<author>editors</author>
</authors>
<title>May I Speak Freely?</title>
<date>1999</date>
<booktitle>Between Templates and Free Choice in Natural Language Generation. Proceedings of the KI-99 Workshop. DFKI, Saarbrficken.</booktitle>
<marker>Becker, Busemann, editors, 1999</marker>
<rawString>Tilman Becker and Stephan Busemann, editors. 1999. May I Speak Freely? Between Templates and Free Choice in Natural Language Generation. Proceedings of the KI-99 Workshop. DFKI, Saarbrficken.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Steven Bird</author>
<author>Kazuaki Maeda</author>
<author>Xiaoyi Ma</author>
</authors>
<title>AGTK: The annotation graph toolkit.</title>
<date>2001</date>
<booktitle>In IRCS Workshop on Linguistic Databases,</booktitle>
<location>Philadelphia.</location>
<contexts>
<context position="6652" citStr="Bird et al., 2001" startWordPosition="954" endWordPosition="957"> &lt;Annotation id=&amp;quot;AG1_ann2&amp;quot; type=&amp;quot;Concept&amp;quot; start=&amp;quot;AG1 anchor1&amp;quot; end=&amp;quot;AG1 anchor2&amp;quot;› &lt;Feat name=&amp;quot;score&amp;quot;&gt;0.0123&lt;/Feat&gt; &lt;Feat name=&amp;quot;name&amp;quot;&gt;time&lt;/Feat&gt; &lt;Feat name=&amp;quot;status&amp;quot;&gt;new-info&lt;/Feat&gt; &lt;Feat name=&amp;quot;yalue&amp;quot;&gt;11:37&lt;/Feat&gt; &lt;/Annotation&gt; &lt;Annotation id=&amp;quot;AG1_ann3&amp;quot; type=&amp;quot;Concept&amp;quot; start=&amp;quot;AGl_anchor1&amp;quot; end=&amp;quot;AG1_anchor2&amp;quot;› &lt;Feat name=&amp;quot;score&amp;quot;&gt;0.1234&lt;/Feat&gt; &lt;Feat name=&amp;quot;name&amp;quot;&gt;place&lt;/Feat&gt; &lt;Feat name=&amp;quot;constr&amp;quot;&gt;depart&lt;/Feat&gt; &lt;Feat name=&amp;quot;status&amp;quot;&gt;topic&lt;/Feat&gt; &lt;Feat name=&amp;quot;yalue&amp;quot;&gt;herttoniemenranta &lt;/Feat&gt; &lt;/Annotation&gt; &lt;/AG&gt; Figure 1: An Agenda The agenda is represented in the full dialogue system as an annotation graph (Bird et al., 2001), as in Figure 1. This example shows an agenda for a response following the enquiry When does the 248 next bus leave from Herttoniemenranta? The concept for departure place is marked as topic, and the concepts for route number and departure time are marked as new information. The response, which will be generated step-by-step in the next few sections, will be Number 81 leaves from there at 11:37. 4.2 Text Planning In text planning, the content determination stage simply extracts the concepts from the annotation graph. Because the dialogue manager has already decided the relevant concepts and p</context>
</contexts>
<marker>Bird, Maeda, Ma, 2001</marker>
<rawString>Steven Bird, Kazuaki Maeda, and Xiaoyi Ma. 2001. AGTK: The annotation graph toolkit. In IRCS Workshop on Linguistic Databases, Philadelphia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kristiina Jokinen</author>
<author>Graham Wilcock</author>
</authors>
<title>Confidence-based adaptivity in response generation for a spoken dialogue system.</title>
<date>2001</date>
<booktitle>In Proceedings of the 2nd SIGdial Workshop on Discourse and Dialogue,</booktitle>
<pages>80--89</pages>
<location>Aalborg, Denmark.</location>
<contexts>
<context position="912" citStr="Jokinen and Wilcock, 2001" startWordPosition="126" endWordPosition="129"> web technology. The NLG techniques include a form of template-based generation, transformation of text plan trees to text specification trees, and a multi-stage pipeline architecture. The web technology includes XSLT transformation processors, an XML database, a Java servlet engine, the Cocoon web publishing framework and a Java speech synthesizer. The software is all free, open-source. 1 Introduction XML-based techniques for natural language generation are described by Wilcock (2001), based on practical experience in developing an XML-based generation component for a spoken dialogue system (Jokinen and Wilcock, 2001). The basic approach in the earlier work was to construct a pipeline of XSLT transformations corresponding to the different NLG processing tasks. The current work extends this by putting the XSLT pipelines inside an Apache Cocoon XML server, and by putting the lexicon in an Apache Xindice native XML database. Also, the earlier speech synthesizer is replaced by FreeTTS, a speech synthesizer implemented in Java. Some of these extensions are described by Wilcock (2002). The paper is organised as follows. Section 2 briefly summarizes the main tasks of NLG and Section 3 then describes how these tas</context>
<context position="5504" citStr="Jokinen and Wilcock (2001)" startWordPosition="843" endWordPosition="846">ech output, and there are only English and MBROLA voices. 4 The Demonstration System The demonstration system performs bilingual generation of responses, in Finnish and English, as part of a Helsinki bus timetable enquiry system. The responses depend on the dialogue context and can vary from full sentences to short elliptical phrases. The system demonstrates only generation - it does not include speech recognition, language understanding or dialogue management components. 4.1 Input: an Agenda The starting point is an agenda, a set of concepts marked with Topic and NewInfo tags as explained by Jokinen and Wilcock (2001). In the dialogue system this is given by the dialogue manager. In the demo, a number of different starting agendas are provided, and their contents can be changed as desired. &lt;AG id=&amp;quot;AG1&amp;quot; type=&amp;quot;transcription&amp;quot; timeline=&amp;quot;Timeline1&amp;quot;› &lt;Anchor id=&amp;quot;AG1 anchor1&amp;quot; offset=&amp;quot;1&amp;quot;/&gt; &lt;Anchor id=&amp;quot;AG1_anchor2&amp;quot; offset=&amp;quot;2&amp;quot;/&gt; &lt;Annotation id=&amp;quot;AG1 ann1&amp;quot; type=&amp;quot;Concept&amp;quot; start=&amp;quot;AGl_anchorl&amp;quot; end=&amp;quot;AG1_anchor2&amp;quot;› &lt;Feat name=&amp;quot;score&amp;quot;&gt;0.0123&lt;/Feat&gt; &lt;Feat name=&amp;quot;name&amp;quot;&gt;route&lt;/Feat&gt; &lt;Feat name=&amp;quot;status&amp;quot;&gt;new-info&lt;/Feat&gt; &lt;Feat name=&amp;quot;value&amp;quot;&gt;81&lt;/Feat&gt; &lt;/Annotation&gt; &lt;Annotation id=&amp;quot;AG1_ann2&amp;quot; type=&amp;quot;Concept&amp;quot; start=&amp;quot;AG1 anchor1&amp;quot; end=&amp;quot;AG1</context>
</contexts>
<marker>Jokinen, Wilcock, 2001</marker>
<rawString>Kristiina Jokinen and Graham Wilcock. 2001. Confidence-based adaptivity in response generation for a spoken dialogue system. In Proceedings of the 2nd SIGdial Workshop on Discourse and Dialogue, pages 80-89, Aalborg, Denmark.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
<author>Robert Dale</author>
</authors>
<title>Building Natural Language Generation Systems.</title>
<date>2000</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="1799" citStr="Reiter and Dale (2000)" startWordPosition="274" endWordPosition="277">con in an Apache Xindice native XML database. Also, the earlier speech synthesizer is replaced by FreeTTS, a speech synthesizer implemented in Java. Some of these extensions are described by Wilcock (2002). The paper is organised as follows. Section 2 briefly summarizes the main tasks of NLG and Section 3 then describes how these tasks can be implemented using recent XML web technology. Section 4 gives details of a software demo based on this approach, showing a concrete example. 2 Brief Summary of NLG The most common design for NLG systems is a pipeline architecture. The version described by Reiter and Dale (2000) has the following modules and tasks: • Text Planning — content determination — discourse structuring • Microplanning — lexicalization — referring expression generation — aggregation • Realization — linguistic realization — structure realization The interface between text planning and microplanning is a text plan, a tree whose leaves are domain-specific concept messages. The interface between microplanning and realization is a text specification, another tree whose leaves are linguistic phrase specifications. The various stages of the NLG pipeline perform transformations on the text plan tree </context>
</contexts>
<marker>Reiter, Dale, 2000</marker>
<rawString>Ehud Reiter and Robert Dale. 2000. Building Natural Language Generation Systems. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<title>Java Speech Markup Language Specification, version 0.6. http: //java.sun.com/products/java-media/ speech/forDevelopers/JSML.</title>
<date>1999</date>
<institution>Sun Microsystems.</institution>
<marker>1999</marker>
<rawString>Sun Microsystems. 1999. Java Speech Markup Language Specification, version 0.6. http: //java.sun.com/products/java-media/ speech/forDevelopers/JSML.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sun Microsystems</author>
</authors>
<title>FreeTTS: A speech synthesizer written entirly in the Java programming language.</title>
<date>2002</date>
<note>http://freetts.sourceforge.net/.</note>
<contexts>
<context position="4493" citStr="Microsystems, 2002" startWordPosition="683" endWordPosition="684">generation pipelines can include the same XSLT transforms for text planning stages which are domain-specific, but have different sequences of transforms in the microplanning and realization stages which are language-specific (Wilcock, 2002). The Apache Xindice native XML database (Apache XML Project, 2003a) also runs as a web application in Tomcat, and can be used together with Cocoon. Xindice provides suitable support for a lexicon in XML form, which can be indexed to meet different processing requirements. For generation, words can be indexed by concepts instead of by spelling. FreeTTS (Sun Microsystems, 2002) is a speech synthesizer implemented in Java, which accepts JSML, Java Speech Markup Language (Sun Microsystems, 1999). Because it is Java-based FreeTTS can be embedded in Java servlets, and as JSML is XML-based the XSLT pipelines can easily produce JSML output. However, the current version of FreeTTS has some restrictions: JSML markup is accepted but not actually applied to the speech output, and there are only English and MBROLA voices. 4 The Demonstration System The demonstration system performs bilingual generation of responses, in Finnish and English, as part of a Helsinki bus timetable e</context>
<context position="10717" citStr="Microsystems, 2002" startWordPosition="1541" endWordPosition="1542">ion stage produces output which is marked up in Java Speech Markup Language (Sun Microsystems, 1999). &lt;jsml lang=&amp;quot;enn&gt; &lt;div type=&amp;quot;sentn&gt; number &lt;sayas class=&amp;quot;numbern&gt;81&lt;/sayas&gt; leaves from there at &lt;sayas class=&amp;quot;timen&gt;11:37&lt;/sayas&gt; &lt;/div&gt; &lt;/jsml&gt; Figure 4: Speech Markup In Figure 4, the &lt;head&gt; words of Figure 3 provide the main content. The speech markup is rather simplistic: &lt; di v type=&amp;quot;sent&amp;quot;&gt; marks sentence boundaries, &lt; s ayas=&amp;quot;number&amp;quot;&gt; tells the speech synthesizer that &amp;quot;81&amp;quot; should be pronounced &amp;quot;eighty-one&amp;quot; not &amp;quot;eight one&amp;quot;. The JSML output is passed to the FreeTTS speech synthesizer (Sun Microsystems, 2002) which produces the spoken response, in this case Number 81 leaves from there at 11:37. 5 Conclusion The demonstration framework shows natural language generation techniques closely integrated with recent developments in XML web technology (Xalan XSLT processors, Apache Xindice native XML database, Tomcat servlet engine, Cocoon web publishing framework, and FreeTTS speech synthesizer). The software is all free, open-source, and implemented in Java. Using Cocoon, it is possible to modify an XSLT transformation stylesheet and see the effect immediately. The framework described here can therefore</context>
</contexts>
<marker>Microsystems, 2002</marker>
<rawString>Sun Microsystems. 2002. FreeTTS: A speech synthesizer written entirly in the Java programming language. http://freetts.sourceforge.net/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kees van Deemter</author>
<author>Emiel Krahmer</author>
<author>Mariet Theune</author>
</authors>
<title>Plan-based vs. template-based NLG: A false opposition?</title>
<date>1999</date>
<booktitle>In Becker and Busemann</booktitle>
<pages>1--5</pages>
<marker>van Deemter, Krahmer, Theune, 1999</marker>
<rawString>Kees van Deemter, Emiel Krahmer, and Mariet Theune. 1999. Plan-based vs. template-based NLG: A false opposition? In Becker and Busemann (1999), pages 1-5.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Graham Wilcock</author>
</authors>
<title>Pipelines, templates and transformations: XML for natural language generation.</title>
<date>2001</date>
<booktitle>In Proceedings of the 1st NLP and XML Workshop,</booktitle>
<pages>1--8</pages>
<location>Tokyo.</location>
<contexts>
<context position="776" citStr="Wilcock (2001)" startWordPosition="108" endWordPosition="109">The paper describes a software demo integrating Natural Language Generation (NLG) techniques with recent developments in XML web technology. The NLG techniques include a form of template-based generation, transformation of text plan trees to text specification trees, and a multi-stage pipeline architecture. The web technology includes XSLT transformation processors, an XML database, a Java servlet engine, the Cocoon web publishing framework and a Java speech synthesizer. The software is all free, open-source. 1 Introduction XML-based techniques for natural language generation are described by Wilcock (2001), based on practical experience in developing an XML-based generation component for a spoken dialogue system (Jokinen and Wilcock, 2001). The basic approach in the earlier work was to construct a pipeline of XSLT transformations corresponding to the different NLG processing tasks. The current work extends this by putting the XSLT pipelines inside an Apache Cocoon XML server, and by putting the lexicon in an Apache Xindice native XML database. Also, the earlier speech synthesizer is replaced by FreeTTS, a speech synthesizer implemented in Java. Some of these extensions are described by Wilcock </context>
<context position="2958" citStr="Wilcock (2001)" startWordPosition="451" endWordPosition="452">pipeline perform transformations on the text plan tree and the text specification tree. The status of template-based generation has been debated by NLG researchers (Becker and Busemann, 1999), but if it means &amp;quot;making extensive use of a mapping between semantic structures and representations of linguistic surface structures that contain gaps&amp;quot; (van Deemter et al., 1999), then it is a good way to create initial text plan trees that contain gaps to be filled later when the concept messages are turned into phrase specifications in the text specification tree. 247 3 XMLWebTechnology As described by Wilcock (2001), XML-based NLG can be performed by a sequence of XSLT transformations. Template-based generation of the initial text plan tree can be done by XSLT templates. Subsequent transformations of the text plan tree during microplanning can be done by specialised XSLT transformations to produce the text specification tree. Java-based XSLT processors such as Xalan (Apache XML Project, 2003c) can be embedded in Java servlets and executed in a servlet engine such as Tomcat (Apache Jakarta Project, 2003). Moreover, it is now possible to embed complete sequences of XSLT transformations, organised as pipeli</context>
<context position="5504" citStr="Wilcock (2001)" startWordPosition="845" endWordPosition="846">and there are only English and MBROLA voices. 4 The Demonstration System The demonstration system performs bilingual generation of responses, in Finnish and English, as part of a Helsinki bus timetable enquiry system. The responses depend on the dialogue context and can vary from full sentences to short elliptical phrases. The system demonstrates only generation - it does not include speech recognition, language understanding or dialogue management components. 4.1 Input: an Agenda The starting point is an agenda, a set of concepts marked with Topic and NewInfo tags as explained by Jokinen and Wilcock (2001). In the dialogue system this is given by the dialogue manager. In the demo, a number of different starting agendas are provided, and their contents can be changed as desired. &lt;AG id=&amp;quot;AG1&amp;quot; type=&amp;quot;transcription&amp;quot; timeline=&amp;quot;Timeline1&amp;quot;› &lt;Anchor id=&amp;quot;AG1 anchor1&amp;quot; offset=&amp;quot;1&amp;quot;/&gt; &lt;Anchor id=&amp;quot;AG1_anchor2&amp;quot; offset=&amp;quot;2&amp;quot;/&gt; &lt;Annotation id=&amp;quot;AG1 ann1&amp;quot; type=&amp;quot;Concept&amp;quot; start=&amp;quot;AGl_anchorl&amp;quot; end=&amp;quot;AG1_anchor2&amp;quot;› &lt;Feat name=&amp;quot;score&amp;quot;&gt;0.0123&lt;/Feat&gt; &lt;Feat name=&amp;quot;name&amp;quot;&gt;route&lt;/Feat&gt; &lt;Feat name=&amp;quot;status&amp;quot;&gt;new-info&lt;/Feat&gt; &lt;Feat name=&amp;quot;value&amp;quot;&gt;81&lt;/Feat&gt; &lt;/Annotation&gt; &lt;Annotation id=&amp;quot;AG1_ann2&amp;quot; type=&amp;quot;Concept&amp;quot; start=&amp;quot;AG1 anchor1&amp;quot; end=&amp;quot;AG1</context>
<context position="7445" citStr="Wilcock (2001)" startWordPosition="1085" endWordPosition="1086">ked as topic, and the concepts for route number and departure time are marked as new information. The response, which will be generated step-by-step in the next few sections, will be Number 81 leaves from there at 11:37. 4.2 Text Planning In text planning, the content determination stage simply extracts the concepts from the annotation graph. Because the dialogue manager has already decided the relevant concepts and put them in the agenda, no other content determination is needed. The discourse structuring stage creates a text plan tree using the form of template-based generation described by Wilcock (2001). In the dialogueoriented system, the text plan is called a response plan. &lt;ResponsePlan&gt; &lt;Message&gt; &lt;type&gt;NumFromDepMsg&lt;/type&gt; &lt;concept info=&amp;quot;NewInfon&gt; &lt;type&gt;bus-number&lt;/type&gt; &lt;value&gt;81&lt;/value&gt; &lt;/concept&gt; &lt;concept info=&amp;quot;NewInfon&gt; &lt;type&gt;departure-time&lt;/type&gt; &lt;value&gt;11:37&lt;/value&gt; &lt;/concept&gt; &lt;concept info=&amp;quot;Topicn&gt; &lt;type&gt;departure-place&lt;/type&gt; &lt;value&gt;herttoniemenranta&lt;/value&gt; &lt;/concept&gt; &lt;/Message&gt; &lt;/ResponsePlan&gt; Figure 2: A Text Plan (Response Plan) The text plans are XML tree structures containing variable slots, which will be filled in later by the microplanning stages. In the text planning sta</context>
<context position="8699" citStr="Wilcock (2001)" startWordPosition="1263" endWordPosition="1264">ied directly into the appropriate slots. So in Figure 2, the concepts are the same as in Figure 1, only the format has changed. Note that in this example there is only one message, which is typical in spoken dialogue responses. In multi-paragraph text generation there would be large numbers of messages. Note also that the departure place is Topic, and the bus number and time are NewInfo. In the demonstration system, tracing can be switched on so that the text plan is displayed. 4.3 Microplanning The processing during microplanning is done by a sequence of XSLT transformations, as described by Wilcock (2001). The text plan tree is replaced by a text specification tree, here called a response specification. At later stages of the pipeline, further information is added to the tree or nodes in the tree are replaced by new nodes. In the referring expression stage of microplanning, domain concepts are replaced with linguistic referring expressions. &lt;ResponseSpec&gt; &lt;PhraseSpec&gt; &lt;head&gt;leave&lt;/head&gt; &lt;subject&gt; &lt;head&gt;number&lt;/head&gt; &lt;attribute&gt;81&lt;/attribute&gt; &lt;/subject&gt; &lt;adverbial&gt; &lt;advtype&gt;from-place&lt;/advtype&gt; &lt;head&gt;from&lt;/head&gt; &lt;object&gt; &lt;head&gt;there&lt;/head&gt; &lt;/object&gt; &lt;/adverbial&gt; &lt;adverbial&gt; &lt;advtype&gt;at-time&lt;/ad</context>
</contexts>
<marker>Wilcock, 2001</marker>
<rawString>Graham Wilcock. 2001. Pipelines, templates and transformations: XML for natural language generation. In Proceedings of the 1st NLP and XML Workshop, pages 1-8, Tokyo.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Graham Wilcock</author>
</authors>
<title>XML-based Natural Language Generation. In Towards the Semantic Web and Web Services: XML</title>
<date>2002</date>
<pages>40--63</pages>
<location>Helsinki.</location>
<contexts>
<context position="1382" citStr="Wilcock (2002)" startWordPosition="205" endWordPosition="206">k (2001), based on practical experience in developing an XML-based generation component for a spoken dialogue system (Jokinen and Wilcock, 2001). The basic approach in the earlier work was to construct a pipeline of XSLT transformations corresponding to the different NLG processing tasks. The current work extends this by putting the XSLT pipelines inside an Apache Cocoon XML server, and by putting the lexicon in an Apache Xindice native XML database. Also, the earlier speech synthesizer is replaced by FreeTTS, a speech synthesizer implemented in Java. Some of these extensions are described by Wilcock (2002). The paper is organised as follows. Section 2 briefly summarizes the main tasks of NLG and Section 3 then describes how these tasks can be implemented using recent XML web technology. Section 4 gives details of a software demo based on this approach, showing a concrete example. 2 Brief Summary of NLG The most common design for NLG systems is a pipeline architecture. The version described by Reiter and Dale (2000) has the following modules and tasks: • Text Planning — content determination — discourse structuring • Microplanning — lexicalization — referring expression generation — aggregation </context>
<context position="4114" citStr="Wilcock, 2002" startWordPosition="622" endWordPosition="623">ete sequences of XSLT transformations, organised as pipelines, inside Cocoon (Apache XML Project, 2003b). Cocoon runs as a web application inside Tomcat, and offers high-performance XSLT processing and scalability. As Cocoon supports re-configurable pipelines of XSLT transformations, pipelines for different NLG requirements can be set up. For example, Finnish and English generation pipelines can include the same XSLT transforms for text planning stages which are domain-specific, but have different sequences of transforms in the microplanning and realization stages which are language-specific (Wilcock, 2002). The Apache Xindice native XML database (Apache XML Project, 2003a) also runs as a web application in Tomcat, and can be used together with Cocoon. Xindice provides suitable support for a lexicon in XML form, which can be indexed to meet different processing requirements. For generation, words can be indexed by concepts instead of by spelling. FreeTTS (Sun Microsystems, 2002) is a speech synthesizer implemented in Java, which accepts JSML, Java Speech Markup Language (Sun Microsystems, 1999). Because it is Java-based FreeTTS can be embedded in Java servlets, and as JSML is XML-based the XSLT </context>
</contexts>
<marker>Wilcock, 2002</marker>
<rawString>Graham Wilcock. 2002. XML-based Natural Language Generation. In Towards the Semantic Web and Web Services: XML Finland 2002 Slide Presentations, pages 40-63, Helsinki.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>