<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.035871">
<title confidence="0.952447">
Grammar Development in GF
</title>
<author confidence="0.902797">
Aarne Ranta and Krasimir Angelov and Bj¨orn Bringert*
</author>
<affiliation confidence="0.999238">
Department of Computer Science and Engineering
Chalmers University of Technology and University of Gothenburg
</affiliation>
<email confidence="0.990723">
{aarne,krasimir,bringert}@chalmers.se
</email>
<sectionHeader confidence="0.997271" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999970266666667">
GF is a grammar formalism that has a
powerful type system and module system,
permitting a high level of abstraction and
division of labour in grammar writing. GF
is suited both for expert linguists, who
appreciate its capacity of generalizations
and conciseness, and for beginners, who
benefit from its static type checker and,
in particular, the GF Resource Grammar
Library, which currently covers 12 lan-
guages. GF has a notion of multilingual
grammars, enabling code sharing, linguis-
tic generalizations, rapid development of
translation systems, and painless porting
of applications to new languages.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99995452631579">
Grammar implementation for natural languages is
a challenge for both linguistics and engineering.
The linguistic challenge is to master the complex-
ities of languages so that all details are taken into
account and work seamlessly together; if possible,
the description should be concise and elegant, and
capture the linguist’s generalizations on the level
of code. The engineering challenge is to make
the grammar scalable, reusable, and maintainable.
Too many grammars implemented in the history of
computational linguistics have become obsolete,
not only because of their poor maintainability, but
also because of the decay of entire software and
hardware platforms.
The first measure to be taken against the ”bit
rot” of grammars is to write them in well-defined
formats that can be implemented independently
of platform. This requirement is more or less an
axiom in programming language development: a
</bodyText>
<subsectionHeader confidence="0.29528">
*Now at Google Inc.
</subsectionHeader>
<bodyText confidence="0.999908170731708">
language must have syntax and semantics specifi-
cations that are independent of its first implemen-
tation; otherwise the first implementation risks to
remain the only one.
Secondly, since grammar engineering is to a
large extent software engineering, grammar for-
malisms should learn from programming language
techniques that have been found useful in this re-
spect. Two such techniques are static type sys-
tems and module systems. Since grammar for-
malism implementations are mostly descendants
of Lisp and Prolog, they usually lack a static type
system that finds errors at compile time. In a com-
plex task like grammar writing, compile-time er-
ror detection is preferable to run-time debugging
whenever possible. As for modularity, traditional
grammar formalisms again inherit from Lisp and
Prolog low-level mechanisms like macros and file
includes, which in modern languages like Java and
ML have been replaced by advanced module sys-
tems akin in rigour to type systems.
Thirdly, as another lesson from software en-
gineering, grammar writing should permit an in-
creasing use of libraries, so that programmers can
build on ealier code. Types and modules are essen-
tial for the management of libraries. When a new
language is developed, an effort is needed in creat-
ing libraries for the language, so that programmers
can scale up to real-size tasks.
Fourthly, a grammar formalism should have a
stable and efficient implementation that works
on different platforms (hardware and operating
systems). Since grammars are often parts of larger
language-processing systems (such as translation
tools or dialogue systems), their interoperability
with other components is an important issue. The
implementation should provide compilers to stan-
dard formats, such as databases and speech recog-
nition language models. In addition to interoper-
ability, such compilers also help keeping the gram-
mars alive even if the original grammar formalism
</bodyText>
<note confidence="0.337736">
Proceedings of the EACL 2009 Demonstrations Session, pages 57–60,
Athens, Greece, 3 April 2009. c�2009 Association for Computational Linguistics
</note>
<page confidence="0.998796">
57
</page>
<bodyText confidence="0.999036352941176">
ceases to exist.
Fifthly, grammar formalisms should have rich
documentation; in particular, they should have
accessible tutorials that do not demand the read-
ers to be experts in a linguistic theory or in com-
puter programming. Also the libraries should be
documented, preferably by automatically gener-
ated documentation in the style of JavaDoc, which
is guaranteed to stay up to date.
Last but not least, a grammar formalism, as well
its documentation, implementation, and standard
libraries, should be freely available open-source
software that anyone can use, inspect, modify, and
improve. In the domain of general-purpose pro-
gramming, this is yet another growing trend; pro-
prietary languages are being made open-source or
at least free of charge.
</bodyText>
<sectionHeader confidence="0.942202" genericHeader="method">
2 The GF programming language
</sectionHeader>
<bodyText confidence="0.999983111111111">
The development of GF started in 1998 at Xe-
rox Research Centre Europe in Grenoble, within a
project entitled ”Multilingual Document Author-
ing” (Dymetman &amp; al. 2000). Its purpose was
to make it productive to build controlled-language
translators and multilingual authoring systems,
previously produced by hard-coded grammar
rules rather than declarative grammar formalisms
(Power &amp; Scott 1998). Later, mainly at Chalmers
University in Gothenburg, GF developed into a
functional programming language inspired by ML
and Haskell, with a strict type system and oper-
ational semantics specified in (Ranta 2004). A
module system was soon added (Ranta 2007), in-
spired by the parametrized modules of ML and
the class inheritance hierarchies of Java, although
with multiple inheritance in the style of C++.
Technically, GF falls within the class of so-
called Curry-style categorial grammars, inspired
by the distinction between tectogrammatical and
phenogrammatical structure in (Curry 1963).
Thus a GF grammar has an abstract syntax defin-
ing a system of types and trees (i.e. a free algebra),
and a concrete syntax, which is a homomorphic
mapping from trees to strings and, more generally,
to records of strings and features. To take a simple
example, the NP-VP predication rule, written
</bodyText>
<equation confidence="0.850945">
S ::= NP VP
</equation>
<bodyText confidence="0.990808618181818">
in a context-free notation, becomes in GF a pair of
an abstract and a concrete syntax rule,
fun Pred : NP -&gt; VP -&gt; S
lin Pred np vp = np ++ vp
The keyword fun stands for function declara-
tion (declaring the function Pred of type NP -&gt;
VP -&gt; S), whereas lin stands for linearization
(saying that trees of form Pred np vp are con-
verted to strings where the linearization of np is
followed by the linearization of vp). The arrow
-&gt; is the normal function type arrow of program-
ming languages, and ++ is concatenation.
Patterns more complex than string concatena-
tion can be used in linearizations of the same pred-
ication trees as the rule above. Thus agreement
can be expressed by using features passed from the
noun phrase to the verb phrase. The noun phrase
is here defined as not just a string, but as a record
with two fields—a string s and an agreement fea-
ture a. Verb-subject inversion can be expressed by
making VP into a discontinuous constituent, i.e.
a record with separate verb and complement fields
v and c. Combining these two phenomena, we
write
vp.v ! np.a ++ np.s ++ vp.c
(For the details of the notation, we refer to doc-
umentation on the GF web page.) Generalizing
strings into richer data structures makes it smooth
to deal accurately with complexities such as Ger-
man constituent order and Romance clitics, while
maintaining the simple tree structure defined by
the abstract syntax of Pred.
Separating abstract and concrete syntax makes
it possible to write multilingual grammars,
where one abstract syntax is equipped with several
concrete syntaxes. Thus different string configura-
tions can be mapped into the same abstract syntax
trees. For instance, the distinction between SVO
and VSO languages can be ignored on the abstract
level, and so can all other {S,V,O} patterns as well.
Also the differences in feature systems can be ab-
stracted away from. For instance, agreement fea-
tures in English are much simpler than in Arabic;
yet the same abstract syntax can be used.
Since concrete syntax is reversible between lin-
earization and parsing (Ljungl¨of 2004), multilin-
gual grammars can be used for translation, where
the abstract syntax works as interlingua. Experi-
ence from translation projects (e.g. Burke and Jo-
hannisson 2005, Caprotti 2006) has shown that the
interlingua-based translation provided by GF gives
good quality in domain-specific tasks. However,
GF also supports the use of a transfer component if
the compositional method implied by multilingual
grammars does not suffice (Bringert and Ranta
</bodyText>
<page confidence="0.991443">
58
</page>
<bodyText confidence="0.999974176470588">
2008). The language-theoretical strenght of GF is
between mildly and fully context-sensitive, with
polynomial parsing complexity (Ljungl¨of 2004).
In addition to multilingual grammars, GF is
usable for more traditional, large-scale unilin-
gual grammar development. The ”middle-scale”
resource grammars can be extended to wide-
coverage grammars, by adding a few rules and
a large lexicon. GF provides powerful tools for
building morphological lexica and exporting them
to other formats, including Xerox finite state tools
(Beesley and Karttunen 2003) and SQL databases
(Forsberg and Ranta 2004). Some large lexica
have been ported to the GF format from freely
available sources for Bulgarian, English, Finnish,
Hindi, and Swedish, comprising up to 70,000 lem-
mas and over two million word forms.
</bodyText>
<sectionHeader confidence="0.995833" genericHeader="method">
3 The GF Resource Grammar Library
</sectionHeader>
<bodyText confidence="0.999937955555556">
The GF Resource Grammar Library is a com-
prehensive multilingual grammar currently imple-
mented for 12 languages: Bulgarian, Catalan,
Danish, English, Finnish, French, German, Italian,
Norwegian, Russian, Spanish, and Swedish. Work
is in progress on Arabic, Hindi/Urdu, Latin, Pol-
ish, Romanian, and Thai. The library is an open-
source project, which constantly attracts new con-
tributions.
The library can be seen as an experiment on how
far the notion of multilingual grammars extends
and how GF scales up to wide-coverage gram-
mars. Its primary purpose, however, is to provide
a programming resource similar to the standard li-
braries of various programming languages. When
all linguistic details are taken into account, gram-
mar writing is an expert programming task, and
the library aims to make this expertise available to
non-expert application programmers.
The coverage of the library is comparable to the
Core Language Engine (Rayner &amp; al. 2000). It has
been developed and tested in applications ranging
from a translation system for software specifica-
tions (Burke and Johannisson 2005) to in-car dia-
logue systems (Perera and Ranta 2007).
The use of a grammar as a library is made pos-
sible by the type and module system of GF (Ranta
2007). What is more, the API (Application Pro-
grammer’s Interface) of the library is to a large ex-
tent language-independent. For instance, an NP-
VP predication rule is available for all languages,
even though the underlying details of predication
vary greatly from one language to another.
A typical domain grammar, such as the one in
Perera and Ranta (2007), has 100–200 syntactic
combinations and a lexicon of a few hundred lem-
mas. Building the syntax with the help of the li-
brary is a matter of a few working days. Once it
is built for one language, porting it to other lan-
guages mainly requires writing the lexicon. By
the use of the inflection libraries, this is a matter of
hours. Thus porting a domain grammar to a new
language requires very effort and also very little
linguistic knowledge: it is expertise of the appli-
cation domain and its terminology that is needed.
</bodyText>
<sectionHeader confidence="0.99305" genericHeader="method">
4 The GF grammar compiler
</sectionHeader>
<bodyText confidence="0.999994074074074">
The GF grammar compiler is usable in two ways:
in batch mode, and as an interactive shell. The
shell is a useful tool for developers as it provides
testing facilities such as parsing, linerization, ran-
dom generation, and grammar statistics. Both
modes use PGF, Portable Grammar Format,
which is the ”machine language” of GF permit-
ting fast run-time linearization and parsing (An-
gelov &amp; al. 2008). PGF interpreters have been
written in C++, Java, and Haskell, permitting an
easy embedding of grammars in systems written
in these languages. PGF can moreover be trans-
lated to other formats, including language mod-
els for speech recognition (e.g. Nuance and HTK;
see Bringert 2007a), VoiceXML (Bringert 2007b),
and JavaScript (Meza Moreno and Bringert 2008).
The grammar compiler is heavily optimizing, so
that the use of a large library grammar in small
run-time applications produces no penalty.
For the working grammarian, static type check-
ing is maybe the most unique feature of the GF
grammar compiler. Type checking does not only
detect errors in grammars. It also enables aggres-
sive optimizations (type-driven partial evaluation),
and overloading resolution, which makes it pos-
sible to use the same name for different functions
whose types are different.
</bodyText>
<sectionHeader confidence="0.99996" genericHeader="conclusions">
5 Related work
</sectionHeader>
<bodyText confidence="0.999990428571429">
As a grammar development system, GF is compa-
rable to Regulus (Rayner 2006), LKB (Copestake
2002), and XLE (Kaplan and Maxwell 2007). The
unique features of GF are its type and module sys-
tem, support for multilingual grammars, the large
number of back-end formats, and the availability
of libraries for 12 languages. Regulus has resource
</bodyText>
<page confidence="0.997371">
59
</page>
<bodyText confidence="0.999925">
grammars for 7 languages, but they are smaller in
scope. In LKB, the LinGO grammar matrix has
been developed for several languages (Bender and
Flickinger 2005), and in XLE, the Pargram gram-
mar set (Butt &amp; al. 2002). LKB and XLE tools
have been targeted to linguists working with large-
scale grammars, rather than for general program-
mers working with applications.
</bodyText>
<sectionHeader confidence="0.99318" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999531041237114">
[Angelov et al.2008] K. Angelov, B. Bringert, and
A. Ranta. 2008. PGF: A Portable Run-Time Format
for Type-Theoretical Grammars. Chalmers Univer-
sity. Submitted for publication.
[Beesley and Karttunen2003] K. Beesley and L. Kart-
tunen. 2003. Finite State Morphology. CSLI Publi-
cations.
[Bender and Flickinger2005] Emily M. Bender and
Dan Flickinger. 2005. Rapid prototyping of scal-
able grammars: Towards modularity in extensions
to a language-independent core. In Proceedings of
the 2nd International Joint Conference on Natural
Language Processing IJCNLP-05 (Posters/Demos),
Jeju Island, Korea.
[Bringert and Ranta2008] B. Bringert and A. Ranta.
2008. A Pattern for Almost Compositional Func-
tions. The Journal of Functional Programming,
18(5–6):567–598.
[Bringert2007a] B. Bringert. 2007a. Speech Recogni-
tion Grammar Compilation in Grammatical Frame-
work. In SPEECHGRAM 2007: ACL Workshop on
Grammar-Based Approaches to Spoken Language
Processing, June 29, 2007, Prague.
[Bringert2007b] Bj¨orn Bringert. 2007b. Rapid Devel-
opment of Dialogue Systems by Grammar Compi-
lation. In Simon Keizer, Harry Bunt, and Tim Paek,
editors, Proceedings of the 8th SIGdial Workshop on
Discourse and Dialogue, Antwerp, Belgium, pages
223–226. Association for Computational Linguis-
tics, September.
[Bringert2008] B. Bringert. 2008. Semantics of the GF
Resource Grammar Library. Report, Chalmers Uni-
versity.
[Burke and Johannisson2005] D. A. Burke and K. Jo-
hannisson. 2005. Translating Formal Software
Specifications to Natural Language / A Grammar-
Based Approach. In P. Blache and E. Stabler and
J. Busquets and R. Moot, editor, Logical Aspects
of Computational Linguistics (LACL 2005), volume
3492 of LNCS/LNAI, pages 51–66. Springer.
[Butt et al.2002] M. Butt, H. Dyvik, T. Holloway King,
H. Masuichi, and C. Rohrer. 2002. The Parallel
Grammar Project. In COLING 2002, Workshop on
Grammar Engineering and Evaluation, pages 1–7.
URL
[Caprotti2006] O. Caprotti. 2006. WebALT! Deliver
Mathematics Everywhere. In Proceedings of SITE
2006. Orlando March 20-24.
[Copestake2002] A. Copestake. 2002. Implementing
Typed Feature Structure Grammars. CSLI Publica-
tions.
[Curry1963] H. B. Curry. 1963. Some logical aspects
of grammatical structure. In Roman Jakobson, edi-
tor, Structure of Language and its Mathematical As-
pects: Proceedings of the Twelfth Symposium in Ap-
plied Mathematics, pages 56–68. American Mathe-
matical Society.
[Dymetman et al.2000] M. Dymetman, V. Lux, and
A. Ranta. 2000. XML and multilingual docu-
ment authoring: Convergent trends. In COLING,
Saarbr¨ucken, Germany, pages 243–249.
[Forsberg and Ranta2004] M. Forsberg and A. Ranta.
2004. Functional Morphology. In ICFP 2004,
Showbird, Utah, pages 213–223.
[Ljungl¨of2004] P. Ljungl¨of. 2004. The Expressivity
and Complexity of Grammatical Framework. Ph.D.
thesis, Dept. of Computing Science, Chalmers Uni-
versity of Technology and Gothenburg University.
[Meza Moreno and Bringert2008] M. S. Meza Moreno
and B. Bringert. 2008. Interactive Multilingual
Web Applications with Grammarical Framework. In
B. Nordstr¨om and A. Ranta, editors, Advances in
Natural Language Processing (GoTAL 2008), vol-
ume 5221 of LNCS/LNAI, pages 336–347.
[Perera and Ranta2007] N. Perera and A. Ranta. 2007.
Dialogue System Localization with the GF Resource
Grammar Library. In SPEECHGRAM 2007: ACL
Workshop on Grammar-Based Approaches to Spo-
ken Language Processing, June 29, 2007, Prague.
[Power and Scott1998] R. Power and D. Scott. 1998.
Multilingual authoring using feedback texts. In
COLING-ACL.
[Ranta2004] A. Ranta. 2004. Grammatical Frame-
work: A Type-Theoretical Grammar Formal-
ism. The Journal of Functional Programming,
14(2):145–189.
[Ranta2007] A. Ranta. 2007. Modular Grammar Engi-
neering in GF. Research on Language and Compu-
tation, 5:133–158.
[Rayner et al.2000] M. Rayner, D. Carter, P. Bouillon,
V. Digalakis, and M. Wir´en. 2000. The Spoken
Language Translator. Cambridge University Press,
Cambridge.
[Rayner et al.2006] M. Rayner, B. A. Hockey, and
P. Bouillon. 2006. Putting Linguistics into Speech
Recognition: The Regulus Grammar Compiler.
CSLI Publications.
</reference>
<page confidence="0.998388">
60
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.904940">
<title confidence="0.999162">Grammar Development in GF</title>
<author confidence="0.998839">Ranta Angelov</author>
<affiliation confidence="0.953761">Department of Computer Science and Engineering Chalmers University of Technology and University of Gothenburg</affiliation>
<abstract confidence="0.9996230625">GF is a grammar formalism that has a powerful type system and module system, permitting a high level of abstraction and division of labour in grammar writing. GF is suited both for expert linguists, who appreciate its capacity of generalizations and conciseness, and for beginners, who benefit from its static type checker and, in particular, the GF Resource Grammar Library, which currently covers 12 languages. GF has a notion of multilingual grammars, enabling code sharing, linguistic generalizations, rapid development of translation systems, and painless porting of applications to new languages.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>K Angelov</author>
<author>B Bringert</author>
<author>A Ranta</author>
</authors>
<title>PGF: A Portable Run-Time Format for Type-Theoretical Grammars. Chalmers University. Submitted for publication.</title>
<date>2008</date>
<marker>[Angelov et al.2008]</marker>
<rawString>K. Angelov, B. Bringert, and A. Ranta. 2008. PGF: A Portable Run-Time Format for Type-Theoretical Grammars. Chalmers University. Submitted for publication.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Beesley</author>
<author>L Karttunen</author>
</authors>
<title>Finite State Morphology.</title>
<date>2003</date>
<publisher>CSLI Publications.</publisher>
<marker>[Beesley and Karttunen2003]</marker>
<rawString>K. Beesley and L. Karttunen. 2003. Finite State Morphology. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
<author>Dan Flickinger</author>
</authors>
<title>Rapid prototyping of scalable grammars: Towards modularity in extensions to a language-independent core.</title>
<date>2005</date>
<booktitle>In Proceedings of the 2nd International Joint Conference on Natural Language Processing IJCNLP-05 (Posters/Demos),</booktitle>
<location>Jeju Island,</location>
<marker>[Bender and Flickinger2005]</marker>
<rawString>Emily M. Bender and Dan Flickinger. 2005. Rapid prototyping of scalable grammars: Towards modularity in extensions to a language-independent core. In Proceedings of the 2nd International Joint Conference on Natural Language Processing IJCNLP-05 (Posters/Demos), Jeju Island, Korea.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Bringert</author>
<author>A Ranta</author>
</authors>
<title>A Pattern for Almost Compositional Functions.</title>
<date>2008</date>
<booktitle>The Journal of Functional Programming,</booktitle>
<pages>18--5</pages>
<marker>[Bringert and Ranta2008]</marker>
<rawString>B. Bringert and A. Ranta. 2008. A Pattern for Almost Compositional Functions. The Journal of Functional Programming, 18(5–6):567–598.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Bringert</author>
</authors>
<title>Speech Recognition Grammar Compilation in Grammatical Framework.</title>
<date>2007</date>
<booktitle>In SPEECHGRAM 2007: ACL Workshop on Grammar-Based Approaches to Spoken Language Processing,</booktitle>
<location>Prague.</location>
<marker>[Bringert2007a]</marker>
<rawString>B. Bringert. 2007a. Speech Recognition Grammar Compilation in Grammatical Framework. In SPEECHGRAM 2007: ACL Workshop on Grammar-Based Approaches to Spoken Language Processing, June 29, 2007, Prague.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bj¨orn Bringert</author>
</authors>
<title>Rapid Development of Dialogue Systems by Grammar Compilation.</title>
<date>2007</date>
<booktitle>Proceedings of the 8th SIGdial Workshop on Discourse and Dialogue,</booktitle>
<pages>223--226</pages>
<editor>In Simon Keizer, Harry Bunt, and Tim Paek, editors,</editor>
<location>Antwerp, Belgium,</location>
<marker>[Bringert2007b]</marker>
<rawString>Bj¨orn Bringert. 2007b. Rapid Development of Dialogue Systems by Grammar Compilation. In Simon Keizer, Harry Bunt, and Tim Paek, editors, Proceedings of the 8th SIGdial Workshop on Discourse and Dialogue, Antwerp, Belgium, pages 223–226. Association for Computational Linguistics, September.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Bringert</author>
</authors>
<date>2008</date>
<journal>Semantics of the GF Resource Grammar Library. Report,</journal>
<institution>Chalmers University.</institution>
<marker>[Bringert2008]</marker>
<rawString>B. Bringert. 2008. Semantics of the GF Resource Grammar Library. Report, Chalmers University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D A Burke</author>
<author>K Johannisson</author>
</authors>
<title>Translating Formal Software Specifications to Natural Language / A GrammarBased Approach.</title>
<date>2005</date>
<booktitle>Logical Aspects of Computational Linguistics (LACL 2005),</booktitle>
<volume>3492</volume>
<pages>51--66</pages>
<editor>In P. Blache and E. Stabler and J. Busquets and R. Moot, editor,</editor>
<publisher>Springer.</publisher>
<marker>[Burke and Johannisson2005]</marker>
<rawString>D. A. Burke and K. Johannisson. 2005. Translating Formal Software Specifications to Natural Language / A GrammarBased Approach. In P. Blache and E. Stabler and J. Busquets and R. Moot, editor, Logical Aspects of Computational Linguistics (LACL 2005), volume 3492 of LNCS/LNAI, pages 51–66. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Butt</author>
<author>H Dyvik</author>
<author>T Holloway King</author>
<author>H Masuichi</author>
<author>C Rohrer</author>
</authors>
<title>The Parallel Grammar Project.</title>
<date>2002</date>
<booktitle>In COLING 2002, Workshop on Grammar Engineering and Evaluation,</booktitle>
<pages>1--7</pages>
<publisher>URL</publisher>
<marker>[Butt et al.2002]</marker>
<rawString>M. Butt, H. Dyvik, T. Holloway King, H. Masuichi, and C. Rohrer. 2002. The Parallel Grammar Project. In COLING 2002, Workshop on Grammar Engineering and Evaluation, pages 1–7. URL</rawString>
</citation>
<citation valid="true">
<authors>
<author>O Caprotti</author>
</authors>
<title>WebALT! Deliver Mathematics Everywhere.</title>
<date>2006</date>
<booktitle>In Proceedings of SITE 2006.</booktitle>
<location>Orlando</location>
<marker>[Caprotti2006]</marker>
<rawString>O. Caprotti. 2006. WebALT! Deliver Mathematics Everywhere. In Proceedings of SITE 2006. Orlando March 20-24.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Copestake</author>
</authors>
<title>Implementing Typed Feature Structure Grammars.</title>
<date>2002</date>
<publisher>CSLI Publications.</publisher>
<marker>[Copestake2002]</marker>
<rawString>A. Copestake. 2002. Implementing Typed Feature Structure Grammars. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H B Curry</author>
</authors>
<title>Some logical aspects of grammatical structure.</title>
<date>1963</date>
<booktitle>Structure of Language and its Mathematical Aspects: Proceedings of the Twelfth Symposium in Applied Mathematics,</booktitle>
<pages>56--68</pages>
<editor>In Roman Jakobson, editor,</editor>
<publisher>American Mathematical Society.</publisher>
<marker>[Curry1963]</marker>
<rawString>H. B. Curry. 1963. Some logical aspects of grammatical structure. In Roman Jakobson, editor, Structure of Language and its Mathematical Aspects: Proceedings of the Twelfth Symposium in Applied Mathematics, pages 56–68. American Mathematical Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Dymetman</author>
<author>V Lux</author>
<author>A Ranta</author>
</authors>
<title>XML and multilingual document authoring: Convergent trends.</title>
<date>2000</date>
<booktitle>In COLING, Saarbr¨ucken, Germany,</booktitle>
<pages>243--249</pages>
<marker>[Dymetman et al.2000]</marker>
<rawString>M. Dymetman, V. Lux, and A. Ranta. 2000. XML and multilingual document authoring: Convergent trends. In COLING, Saarbr¨ucken, Germany, pages 243–249.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Forsberg</author>
<author>A Ranta</author>
</authors>
<title>Functional Morphology.</title>
<date>2004</date>
<booktitle>In ICFP 2004,</booktitle>
<pages>213--223</pages>
<location>Showbird, Utah,</location>
<marker>[Forsberg and Ranta2004]</marker>
<rawString>M. Forsberg and A. Ranta. 2004. Functional Morphology. In ICFP 2004, Showbird, Utah, pages 213–223.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Ljungl¨of</author>
</authors>
<title>The Expressivity and Complexity of Grammatical Framework.</title>
<date>2004</date>
<tech>Ph.D. thesis,</tech>
<institution>Dept. of Computing Science, Chalmers University of Technology and Gothenburg University.</institution>
<marker>[Ljungl¨of2004]</marker>
<rawString>P. Ljungl¨of. 2004. The Expressivity and Complexity of Grammatical Framework. Ph.D. thesis, Dept. of Computing Science, Chalmers University of Technology and Gothenburg University.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M S Meza Moreno</author>
<author>B Bringert</author>
</authors>
<title>Interactive Multilingual Web Applications with Grammarical Framework.</title>
<date>2008</date>
<booktitle>Advances in Natural Language Processing (GoTAL</booktitle>
<volume>5221</volume>
<pages>336--347</pages>
<editor>In B. Nordstr¨om and A. Ranta, editors,</editor>
<marker>[Meza Moreno and Bringert2008]</marker>
<rawString>M. S. Meza Moreno and B. Bringert. 2008. Interactive Multilingual Web Applications with Grammarical Framework. In B. Nordstr¨om and A. Ranta, editors, Advances in Natural Language Processing (GoTAL 2008), volume 5221 of LNCS/LNAI, pages 336–347.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Perera</author>
<author>A Ranta</author>
</authors>
<title>Dialogue System Localization with the GF Resource Grammar Library.</title>
<date>2007</date>
<booktitle>In SPEECHGRAM 2007: ACL Workshop on Grammar-Based Approaches to Spoken Language Processing,</booktitle>
<location>Prague.</location>
<marker>[Perera and Ranta2007]</marker>
<rawString>N. Perera and A. Ranta. 2007. Dialogue System Localization with the GF Resource Grammar Library. In SPEECHGRAM 2007: ACL Workshop on Grammar-Based Approaches to Spoken Language Processing, June 29, 2007, Prague.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Power</author>
<author>D Scott</author>
</authors>
<title>Multilingual authoring using feedback texts.</title>
<date>1998</date>
<booktitle>In COLING-ACL.</booktitle>
<marker>[Power and Scott1998]</marker>
<rawString>R. Power and D. Scott. 1998. Multilingual authoring using feedback texts. In COLING-ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ranta</author>
</authors>
<title>Grammatical Framework: A Type-Theoretical Grammar Formalism.</title>
<date>2004</date>
<journal>The Journal of Functional Programming,</journal>
<volume>14</volume>
<issue>2</issue>
<marker>[Ranta2004]</marker>
<rawString>A. Ranta. 2004. Grammatical Framework: A Type-Theoretical Grammar Formalism. The Journal of Functional Programming, 14(2):145–189.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ranta</author>
</authors>
<title>Modular Grammar Engineering</title>
<date>2007</date>
<booktitle>in GF. Research on Language and Computation,</booktitle>
<pages>5--133</pages>
<marker>[Ranta2007]</marker>
<rawString>A. Ranta. 2007. Modular Grammar Engineering in GF. Research on Language and Computation, 5:133–158.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Rayner</author>
<author>D Carter</author>
<author>P Bouillon</author>
<author>V Digalakis</author>
<author>M Wir´en</author>
</authors>
<title>The Spoken Language Translator.</title>
<date>2000</date>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge.</location>
<marker>[Rayner et al.2000]</marker>
<rawString>M. Rayner, D. Carter, P. Bouillon, V. Digalakis, and M. Wir´en. 2000. The Spoken Language Translator. Cambridge University Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Rayner</author>
<author>B A Hockey</author>
<author>P Bouillon</author>
</authors>
<title>Putting Linguistics into Speech Recognition: The Regulus Grammar Compiler.</title>
<date>2006</date>
<publisher>CSLI Publications.</publisher>
<marker>[Rayner et al.2006]</marker>
<rawString>M. Rayner, B. A. Hockey, and P. Bouillon. 2006. Putting Linguistics into Speech Recognition: The Regulus Grammar Compiler. CSLI Publications.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>