<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001166">
<affiliation confidence="0.787558">
Interaction of Knowledge Sources in a
Portable Natural Language Interface
Carole D. Hafner
Computer Science Department
General Motors Research Laboratories
Warren, MI 48090
</affiliation>
<sectionHeader confidence="0.785194" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998143">
This paper describes a general approach to the
design of natural language interfaces that has
evolved during the development of DATALOG, an Eng-
lish database query system based on Cascaded ATM
grammar. By providing separate representation
schemes for linguistic knowledge, general world
knowledge, and application domain knowledge,
DATALOG achieves a high degree of portability and
extendability.
</bodyText>
<sectionHeader confidence="0.972451" genericHeader="introduction">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999583">
An area of continuing interest and challenge in
computational linguistics is the development of
techniques for building portable natural language
(NL) interfaces (See, for example, 19,3,12]). The
investigation of this problem has led to several
NL systems, including TEAM [7], IRUS [1], and
INTELLECT [10], which separate domain-dependent
information from other, more general capabilities,
and thus have the ability to be transported from
one application to another. However, it is impor-
tant to realize that the domain-independent por-
tions of such systems constrain both the form and
the content of the domain-dependent portions.
Thus, in order to understand a system&apos;s capabili-
ties, one must have a clear picture of the struc-
ture of interaction among these modules.
This paper describes a general approach to the
design of NL interfaces, focusing on the structure
of interaction among the components of a portable
NL system. The approach has evolved during the
development of DATALOG (for &amp;quot;database dialogue&amp;quot;)
an experimental system that accepts a wide variety
of English queries and commands and retreives the
answer from the user&apos;s database. If no items sat-
isfy the user&apos;s request, DATALOG gives an informa-
tive response explaining what part of the query
could not be satisfied. (Generation of responses
in DATALOG is described in another report [6].)
Although DATALOG is primarily a testbed for
research, it has been applied to several demon-
stration databases and one &amp;quot;real&amp;quot; database con-
taining descriptions and rental information for
more than 500 computer hardware units.
The portability of DATALOG is based on the
independent specification of three kinda of knowl-
edge that such a system must have: a linguistic
grammar of English; a general semantic model of
database objects and relationships; and a domain
model representing the particular concepts of the
application domain. After giving a brief overview
of the architecture of DATALOG, the remainder of
the paper will focus on the interactions among the
components of the system, first describing the
interaction between syntax and semantics, and then
the interaction between general knowledge and
domain knowledge.
</bodyText>
<sectionHeader confidence="0.665136" genericHeader="method">
2. Overview of DATALOG Architecture
</sectionHeader>
<bodyText confidence="0.999029217391304">
The architecture of DATALOG is based on Cas-
caded ATN grammar, a general approach to the
design of language processors which is an exten-
sion of Augmented Transition Network grammar [13].
The Cascaded ATN approach to NL processing was
first developed in the RUS parser [2] and was for-
mally characterized by Woods [14]. Figure 1 shows
the architecture of a Cascaded ATN for NL process-
ing: the syntactic-and semantic components are
implemented as separate processes which operate in
parallel, communicating information back and
forth. This communication (represented by the
&amp;quot;interface&amp;quot; portions of the diagram) allows a lin-
guistic ATN grammar to interact with a semantic
processor, creating a conceptual representation of
the input in a step-by-step manner and rejecting
semantically incorrect analyses at an early stage.
DATALOG extends the architecture shown in Fig-
ure 1 in the direction of increased portability,
by dividing semantics into two parts (see Figure
2). A &amp;quot;general&amp;quot; semantic processor based on the
relational model of data [5] interprets a wide
variety of information requests applied to
</bodyText>
<figure confidence="0.994253285714286">
1 ATN
GRAMMAR
input combined syntactic/
semantic analysis
interface
interface
SEMANTICS
</figure>
<figureCaption confidence="0.9552565">
Figure 1. Cascaded Architecture for
Natural Language Processing
</figureCaption>
<page confidence="0.823272">
57
</page>
<table confidence="0.416003666666667">
-----------) ATN combined syntactic/
input GRAMMAR semantic analysis
interface
interface
GENERAL APPLICATION
SEMANTICS SEMANTICS
</table>
<figureCaption confidence="0.996739">
Figure 2. Architecture of DATALOG
</figureCaption>
<bodyText confidence="0.999396769230769">
abstract database objects. This level of knowl-
edge is equivalent to what Hendrix has labelled
&amp;quot;pragmatic grammar&amp;quot; [9]. Domain knowledge is rep-
resented in a semantic network, which encodes the
conceptual structure of the user&apos;s database.
These two levels of knowledge representation arc
linked together, as described in Section 4 below.
The output of the Cascaded ATN grammar is a
combined linguistic and conceptual representation
of the query (see Figure 3), which includes a
&amp;quot;SEMANTICS&amp;quot; component along with the usual lin-
guistic constituents in the interpretation of each
phrase.
</bodyText>
<listItem confidence="0.49842">
3. Interaction of Syntax and Semantics
</listItem>
<bodyText confidence="0.999929681818182">
The DATALOG interface between syntax and seman-
tics is a simplification of the RUS approach,
which has been described in detail elsewhere [11].
The linguistic portion of the interface is imple-
mented by adding a new arc action called &amp;quot;ASSIGN&amp;quot;
to the ATN model of grammar. ASSIGN communicates
partial linguistic analyses to a semantic inter-
preter, which incrementally creates a conceptual
representation of the input. If an assignment is
nonsensical or incompatible with previous assign-
ments, the semantic interpreter can reject the
assignment, causing the parser to back up and try
another path through the grammar.
In DATALOG, ASSIGN is a function of three argu-
ments: the HEAD of the current clause or phrase,
the CONSTITUENT which is being added to the inter-
pretation of the phrase, and the SYNTACTIC SLOT
which the constituent occupies. As a simplified
example, an ATN grammar might process noun phrases
by &amp;quot;collecting&amp;quot; determiners, numbers, superlatives
and other pre-modifiers in registers until the
head noun is found. Then the head is assigned to
the NPHEAD slot; the pre-modifiers are assigned
(in reverse order) to the NPPREMOD slot; superla-
tives are assigned to the SUPER slot; and numbers
are assigned to the NUMBER slot. Finally, the
determiners are assigned to the DETERMINER slot.
If all of these assignments are acceptable to the
semantic interpreter, an interpretation is con-
structed for the &amp;quot;base noun phrase&amp;quot;, and the par-
ser can then begin to process the noun phrase
post-modifiers. Figure 3 illustrates the inter-
pretation of &amp;quot;the tallest female employee&amp;quot;,
according to this scheme. A more detailed
description of how DATALOG constructs interpreta-
tions is contained in another report [8].
During parsing, semantic information is col-
lected in &amp;quot;semantic&amp;quot; registers, which are inacces-
sible (by convention) to the grammar. This con-
vention ensures the generality of the grammar;
although the linguistic component (through the
assignment mechanism) controls the information
that is passed to the semantic interpreter, the
only information that flows back to the grammar is
</bodyText>
<figure confidence="0.898731161290323">
Pushing for Noun Phrase.
ASSIGN Actions:
HEAD
employee
employee
employee
employee
CONSTITUENT
employee
(AMOD female)
(ADJP
(ADV most)
(ADJ tall))
(the)
SYNTACTIC SLOT
NPHEAD
NPPREMOD
SUPER
DET
Popping Noun Phrase:
(NP
(DET (the))
(PREMODS ((ADJP (ADV most) (ADJ tall)) (AMOD female))
(HEAD employee)
(SEMANTICS
(ENTITY
(0 nil)
(KIND employee)
(RESTRICTIONS (
((ATT sex) (RELOP ISA) (VALUE female))
((ATT height) (RANKOP MOST) (CUTOFF 1)) )))))
</figure>
<figureCaption confidence="0.999771">
Figure 3. Interpretation of &amp;quot;the tallest female employee&amp;quot;.
</figureCaption>
<page confidence="0.99315">
58
</page>
<bodyText confidence="0.999920142857143">
the acceptance or rejection of each assignment.
When the grammar builds a constituent structure
for a phrase or clause, it includes an extra con-
stituent called &amp;quot;SEMANTICS&amp;quot;, which it takes from a
semantic register. However, generality of the
grammar is maintained by forbidding the grammar to
examine the contents of the SEMANTICS constituent.
</bodyText>
<sectionHeader confidence="0.453392" genericHeader="method">
4. Interaction of General and Application
Semantics
</sectionHeader>
<bodyText confidence="0.999894422222222">
The semantic interpreter is divided into two
levels: a &amp;quot;lower-level&amp;quot; semantic network repre-
senting the objects and relationships in the
application domain; and a &amp;quot;higher-level&amp;quot; network
representing general knowledge about database
structures, data analysis, and information
requests. Each node of the domain network, in
addition to its links with other domain concepts,
has a &amp;quot;hook&amp;quot; attaching it to the higher-level con-
cept of which it is an instance. Semantic proce-
dures are also attached to the higher-level con-
cepts; in this way, domain concepts are indirectly
linked to the semantic procedures that are used to
interpret them.
Figure 4 illustrates the relationship between
the general concepts of DATALOG and the domain
semantic network of a personnel application.
Domain concepts such as &amp;quot;female&amp;quot; and &amp;quot;dollar&amp;quot; are
attached to general concepts such as /SUBCLASS/
and /UNIT/. (The higher-level concepts are delim-
ited by slash &amp;quot;/&amp;quot; characters.) When a phrase such
as &amp;quot;40000 dollars&amp;quot; is analyzed, the semantic
procedures for the general concept /UNIT/ are
invoked to interpret it.
The general concepts also organized into a net-
work, which supports inheritance of semantic pro-
cedures. For example, two of the general concepts
in DATALOG are /ATTR/, which can represent any
attribute in the database, and /NUmATTR/, which
represents numeric attributes such as &amp;quot;salary&amp;quot; and
&amp;quot;age&amp;quot;. Since /ATTR/ is the parent of /NUMATTR/ in
the general concept network, its semantic proce-
dures are automatically invoked when required dur-
ing interpretation of a phrase whose head is a
numeric attribute. This occurs whenever no
/NUMATTR/ procedure exists for a given syntactic
slot; thus, sub-concepts can be defined by specif-
ying only those cases where their interpretations
differ from the parent.
Figure 5 shows the same diagram as Figure 4,
with concepts from the computer hardware database
.substituted for personnel concepts. This illus-
trates how the semantic procedures that inter-
preted personnel queries can be easily transported
to a different domain.
</bodyText>
<sectionHeader confidence="0.970632" genericHeader="conclusions">
5. Conclusions
</sectionHeader>
<bodyText confidence="0.971567409090909">
The general approach we have taken to defining&amp;quot;
the inter-component interactions in DATALOG has
led to a high degree of extendability. We have
been able to add new sub-networks to the grammar
without making any changes in the semantic inter-
preter, producing correct interpretations (and
correct answers from the database) on the first -
try. We have also been able to implement new gen-
eral semantic processes without modifying the
grammar, taking advantage of the &amp;quot;conceptual fac-
toring&amp;quot; [14] which is one of the benefits of the
Cascaded ATN approach.
The use of a two-level semantic model is an
experimental approach that further adds to the
portability of a Cascaded ATN grammar. By repre-
senting application concepts in an &amp;quot;epistemologi-
cal&amp;quot; semantic network with a restricted set of
primitive links (see Brae:man [4]), the task of
building a new application of DATALOG is reduced
to defining the nodes and connectivity of this
network and the synonyms for the concepts repre-
&apos;employee
</bodyText>
<figureCaption confidence="0.9973">
Figure 4. Interaction of Domain and General Knowledge
</figureCaption>
<figure confidence="0.998574214285714">
Which female Ph.D.s earn more than 40000 dollars
att_of
att_of
1
, sex
/SUBCLASS/ /SUBCLASS/
inian71
\\\\.val_of
Idegree
Ph.D.
NUVIATIy2 UNIT
[masters
unit of
val_of
</figure>
<page confidence="0.98474">
&apos;59
</page>
<bodyText confidence="0.999702846153846">
sented by the nodes. Martin et. al. [12] define a
transportable NL interface as one that can acquire
a new domain model by interacting with a human
database expert. Although DATALOG does not yet
have such a capability, the two-level semantic
model provides a foundation for it.
DATALOG is still under active development, and
current research activities are focused on two
problem areas: extending the two-level semantic
model to handle more complex databases, and inte-
grating a pragmatic component for handling ana-
phora and other dialogue-level phenomena into the
Cascaded ATN grammar.
</bodyText>
<sectionHeader confidence="0.993125" genericHeader="references">
6. References
</sectionHeader>
<reference confidence="0.999951396551724">
1. Bates, M. and Bobrow, R. J., &amp;quot;Information
Retrieval Using a Transportable Natural Lan-
guage Interface.&amp;quot; In Research and Development
in Information Retrieval: Proc. Sixth Annual
International ACM SIGIR Conf., Bethesda MD,
pp. 81-86 (1983).
2. Bobrow, R. &amp;quot;The RUS System.&amp;quot; In &amp;quot;Research in
Natural Language Understanding,&amp;quot; BBN Report
No. 3878. Cambridge, MA: Bolt Beranek and
Newman Inc. (1978).
3. Bobrow-, R. and Webber, B. L., &amp;quot;Knowledge Rep-
resentation for Syntactic/Semantic Process-
ing.&amp;quot; In Proc. of the First Annual National
Conf. on Artificial Intelligence, Palo Alto
CA, pp. 316-323 (1980).
4. Brachman, R. J., &amp;quot;On the Epistemological Sta-
tus of Semantic Networks.&amp;quot; In Associative Net-
works: Representation and Use of Knowledge by
Computers, pp. 3-50. Edited by N. V. Findler,
New York NY (1979).
5. Codd, E. F. &amp;quot;A Relational Model of Data for
Large Shared Data Banks.&amp;quot; Communications of
the ACM, Vol. 13, No. 6, pp.377-387 (1970).
6. Godden, K. S., &amp;quot;Categorizing Natural Language
Queries for Intelligent Responses.&amp;quot; Research
Publication 4639, General Motors Research Lab-
oratories, Warren MI (1984).
7. Grosz, B. J., &amp;quot;TEAM: A Transportable Natural
Language Interface System.&amp;quot; In Proc. Conf. on
Applied Natural Language Processing, Santa
Monica CA., pp. 39-45 (1983).
8. Hafner, C. D. and Godden, K. S., &amp;quot;Design of
Natural Language Interfaces: A Case Study.&amp;quot;
Research Publication 4567, General Motors
Research Laboratories, Warren MI (1984).
9. Hendrix, G. G. and Lewis, W. H., &amp;quot;Transporta-
ble Natural Language Interfaces to Data.&amp;quot;
Proc. 19th Annual Meeting of the Assoc. for
Computational Linguistics, Stanford CA, pp.
159-165 (1981).
10. INTELLECT Query System User&apos;s Guide, 2nd. Edi-
tion. Newton Centre, MA: Artificial Intelli-
gence Corp. (1980).
11. Mark, W. S. and Barton, G. E., &amp;quot;The&apos;RUSGRAMMAR
Parsing System.&amp;quot; Research Publication
GMR-3243. Warren, MI: General Motors Research
Laboratories (1980).
12. Martin, P., Appelt, D., and Pereira, F.,
&amp;quot;Transportability and Generality in a Natural-
Language Interface System.&amp;quot; In Proc. Eight
International Joint Conf. on Artificial Intel-
ligence, Karlsruhe, West Germany (1983).
13. Woods, W. &amp;quot;Transition Network Grammars for
Natural Language Analysis.&amp;quot; Communications of
the ACM, Vol. 13, No. 10, pp. 591-606 (1970).
14. Woods, W., &amp;quot;Cascaded ATN Grammars.&amp;quot; American
Journal of Computational Linguistics,&amp;quot; Vol. 6,
No. 1, pp. 1-12 (1980).
</reference>
<figureCaption confidence="0.985114">
Figure 5. Figure 4 Transported to a New Domain
</figureCaption>
<figure confidence="0.998898210526316">
Which IBM terminals weigh more than 70 pounds
/SUBCLASS/NUMATTV/
printer
DEC
terminal
vendor
att_of
val_of\
///
Idescription
unit
IBM
val_of
weigh i pound
/
verb_of
/
1 weight]
att_of
</figure>
<page confidence="0.865">
60
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.886860">
<title confidence="0.9936535">Interaction of Knowledge Sources in a Portable Natural Language Interface</title>
<author confidence="0.999968">Carole D Hafner</author>
<affiliation confidence="0.9995795">Computer Science Department General Motors Research Laboratories</affiliation>
<address confidence="0.999702">Warren, MI 48090</address>
<abstract confidence="0.9892293">This paper describes a general approach to the design of natural language interfaces that has evolved during the development of DATALOG, an English database query system based on Cascaded ATM grammar. By providing separate representation schemes for linguistic knowledge, general world knowledge, and application domain knowledge, DATALOG achieves a high degree of portability and extendability.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M Bates</author>
<author>R J Bobrow</author>
</authors>
<title>Information Retrieval Using a Transportable Natural Language Interface.&amp;quot;</title>
<date>1983</date>
<booktitle>In Research and Development in Information Retrieval: Proc. Sixth Annual International ACM SIGIR Conf., Bethesda MD,</booktitle>
<pages>81--86</pages>
<contexts>
<context position="879" citStr="[1]" startWordPosition="123" endWordPosition="123">evolved during the development of DATALOG, an English database query system based on Cascaded ATM grammar. By providing separate representation schemes for linguistic knowledge, general world knowledge, and application domain knowledge, DATALOG achieves a high degree of portability and extendability. 1. Introduction An area of continuing interest and challenge in computational linguistics is the development of techniques for building portable natural language (NL) interfaces (See, for example, 19,3,12]). The investigation of this problem has led to several NL systems, including TEAM [7], IRUS [1], and INTELLECT [10], which separate domain-dependent information from other, more general capabilities, and thus have the ability to be transported from one application to another. However, it is important to realize that the domain-independent portions of such systems constrain both the form and the content of the domain-dependent portions. Thus, in order to understand a system&apos;s capabilities, one must have a clear picture of the structure of interaction among these modules. This paper describes a general approach to the design of NL interfaces, focusing on the structure of interaction among</context>
</contexts>
<marker>1.</marker>
<rawString>Bates, M. and Bobrow, R. J., &amp;quot;Information Retrieval Using a Transportable Natural Language Interface.&amp;quot; In Research and Development in Information Retrieval: Proc. Sixth Annual International ACM SIGIR Conf., Bethesda MD, pp. 81-86 (1983).</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Bobrow</author>
</authors>
<title>The RUS System.&amp;quot; In &amp;quot;Research in Natural Language Understanding,&amp;quot;</title>
<date>1978</date>
<tech>BBN Report No. 3878.</tech>
<institution>Bolt Beranek and Newman Inc.</institution>
<location>Cambridge, MA:</location>
<contexts>
<context position="3076" citStr="[2]" startWordPosition="469" endWordPosition="469">ain. After giving a brief overview of the architecture of DATALOG, the remainder of the paper will focus on the interactions among the components of the system, first describing the interaction between syntax and semantics, and then the interaction between general knowledge and domain knowledge. 2. Overview of DATALOG Architecture The architecture of DATALOG is based on Cascaded ATN grammar, a general approach to the design of language processors which is an extension of Augmented Transition Network grammar [13]. The Cascaded ATN approach to NL processing was first developed in the RUS parser [2] and was formally characterized by Woods [14]. Figure 1 shows the architecture of a Cascaded ATN for NL processing: the syntactic-and semantic components are implemented as separate processes which operate in parallel, communicating information back and forth. This communication (represented by the &amp;quot;interface&amp;quot; portions of the diagram) allows a linguistic ATN grammar to interact with a semantic processor, creating a conceptual representation of the input in a step-by-step manner and rejecting semantically incorrect analyses at an early stage. DATALOG extends the architecture shown in Figure 1 i</context>
</contexts>
<marker>2.</marker>
<rawString>Bobrow, R. &amp;quot;The RUS System.&amp;quot; In &amp;quot;Research in Natural Language Understanding,&amp;quot; BBN Report No. 3878. Cambridge, MA: Bolt Beranek and Newman Inc. (1978).</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Bobrow-</author>
<author>B L Webber</author>
</authors>
<title>Knowledge Representation for Syntactic/Semantic Processing.&amp;quot;</title>
<date>1980</date>
<booktitle>In Proc. of the First Annual National Conf. on Artificial Intelligence,</booktitle>
<pages>316--323</pages>
<location>Palo Alto CA,</location>
<marker>3.</marker>
<rawString>Bobrow-, R. and Webber, B. L., &amp;quot;Knowledge Representation for Syntactic/Semantic Processing.&amp;quot; In Proc. of the First Annual National Conf. on Artificial Intelligence, Palo Alto CA, pp. 316-323 (1980).</rawString>
</citation>
<citation valid="true">
<authors>
<author>R J Brachman</author>
</authors>
<title>On the Epistemological Status of Semantic Networks.&amp;quot;</title>
<date>1979</date>
<booktitle>In Associative Networks: Representation and Use of Knowledge by Computers,</booktitle>
<pages>3--50</pages>
<location>New York NY</location>
<note>Edited by</note>
<contexts>
<context position="10699" citStr="[4]" startWordPosition="1640" endWordPosition="1640">nges in the semantic interpreter, producing correct interpretations (and correct answers from the database) on the first - try. We have also been able to implement new general semantic processes without modifying the grammar, taking advantage of the &amp;quot;conceptual factoring&amp;quot; [14] which is one of the benefits of the Cascaded ATN approach. The use of a two-level semantic model is an experimental approach that further adds to the portability of a Cascaded ATN grammar. By representing application concepts in an &amp;quot;epistemological&amp;quot; semantic network with a restricted set of primitive links (see Brae:man [4]), the task of building a new application of DATALOG is reduced to defining the nodes and connectivity of this network and the synonyms for the concepts repre&apos;employee Figure 4. Interaction of Domain and General Knowledge Which female Ph.D.s earn more than 40000 dollars att_of att_of 1 , sex /SUBCLASS/ /SUBCLASS/ inian71 \\\\.val_of Idegree Ph.D. NUVIATIy2 UNIT [masters unit of val_of &apos;59 sented by the nodes. Martin et. al. [12] define a transportable NL interface as one that can acquire a new domain model by interacting with a human database expert. Although DATALOG does not yet have such a c</context>
</contexts>
<marker>4.</marker>
<rawString>Brachman, R. J., &amp;quot;On the Epistemological Status of Semantic Networks.&amp;quot; In Associative Networks: Representation and Use of Knowledge by Computers, pp. 3-50. Edited by N. V. Findler, New York NY (1979).</rawString>
</citation>
<citation valid="true">
<authors>
<author>E F Codd</author>
</authors>
<title>A Relational Model of Data for Large Shared Data Banks.&amp;quot;</title>
<date>1970</date>
<journal>Communications of the ACM,</journal>
<volume>13</volume>
<pages>377--387</pages>
<contexts>
<context position="3843" citStr="[5]" startWordPosition="586" endWordPosition="586">ented as separate processes which operate in parallel, communicating information back and forth. This communication (represented by the &amp;quot;interface&amp;quot; portions of the diagram) allows a linguistic ATN grammar to interact with a semantic processor, creating a conceptual representation of the input in a step-by-step manner and rejecting semantically incorrect analyses at an early stage. DATALOG extends the architecture shown in Figure 1 in the direction of increased portability, by dividing semantics into two parts (see Figure 2). A &amp;quot;general&amp;quot; semantic processor based on the relational model of data [5] interprets a wide variety of information requests applied to 1 ATN GRAMMAR input combined syntactic/ semantic analysis interface interface SEMANTICS Figure 1. Cascaded Architecture for Natural Language Processing 57 -----------) ATN combined syntactic/ input GRAMMAR semantic analysis interface interface GENERAL APPLICATION SEMANTICS SEMANTICS Figure 2. Architecture of DATALOG abstract database objects. This level of knowledge is equivalent to what Hendrix has labelled &amp;quot;pragmatic grammar&amp;quot; [9]. Domain knowledge is represented in a semantic network, which encodes the conceptual structure of the </context>
</contexts>
<marker>5.</marker>
<rawString>Codd, E. F. &amp;quot;A Relational Model of Data for Large Shared Data Banks.&amp;quot; Communications of the ACM, Vol. 13, No. 6, pp.377-387 (1970).</rawString>
</citation>
<citation valid="true">
<authors>
<author>K S Godden</author>
</authors>
<title>Categorizing Natural Language Queries for Intelligent Responses.&amp;quot; Research Publication 4639, General Motors Research Laboratories,</title>
<date>1984</date>
<location>Warren MI</location>
<contexts>
<context position="1945" citStr="[6]" startWordPosition="292" endWordPosition="292">ong these modules. This paper describes a general approach to the design of NL interfaces, focusing on the structure of interaction among the components of a portable NL system. The approach has evolved during the development of DATALOG (for &amp;quot;database dialogue&amp;quot;) an experimental system that accepts a wide variety of English queries and commands and retreives the answer from the user&apos;s database. If no items satisfy the user&apos;s request, DATALOG gives an informative response explaining what part of the query could not be satisfied. (Generation of responses in DATALOG is described in another report [6].) Although DATALOG is primarily a testbed for research, it has been applied to several demonstration databases and one &amp;quot;real&amp;quot; database containing descriptions and rental information for more than 500 computer hardware units. The portability of DATALOG is based on the independent specification of three kinda of knowledge that such a system must have: a linguistic grammar of English; a general semantic model of database objects and relationships; and a domain model representing the particular concepts of the application domain. After giving a brief overview of the architecture of DATALOG, the r</context>
</contexts>
<marker>6.</marker>
<rawString>Godden, K. S., &amp;quot;Categorizing Natural Language Queries for Intelligent Responses.&amp;quot; Research Publication 4639, General Motors Research Laboratories, Warren MI (1984).</rawString>
</citation>
<citation valid="true">
<authors>
<author>B J Grosz</author>
</authors>
<title>TEAM: A Transportable Natural Language Interface System.&amp;quot; In</title>
<date>1983</date>
<booktitle>Proc. Conf. on Applied Natural Language Processing,</booktitle>
<pages>39--45</pages>
<location>Santa Monica CA.,</location>
<contexts>
<context position="869" citStr="[7]" startWordPosition="121" endWordPosition="121"> that has evolved during the development of DATALOG, an English database query system based on Cascaded ATM grammar. By providing separate representation schemes for linguistic knowledge, general world knowledge, and application domain knowledge, DATALOG achieves a high degree of portability and extendability. 1. Introduction An area of continuing interest and challenge in computational linguistics is the development of techniques for building portable natural language (NL) interfaces (See, for example, 19,3,12]). The investigation of this problem has led to several NL systems, including TEAM [7], IRUS [1], and INTELLECT [10], which separate domain-dependent information from other, more general capabilities, and thus have the ability to be transported from one application to another. However, it is important to realize that the domain-independent portions of such systems constrain both the form and the content of the domain-dependent portions. Thus, in order to understand a system&apos;s capabilities, one must have a clear picture of the structure of interaction among these modules. This paper describes a general approach to the design of NL interfaces, focusing on the structure of interac</context>
</contexts>
<marker>7.</marker>
<rawString>Grosz, B. J., &amp;quot;TEAM: A Transportable Natural Language Interface System.&amp;quot; In Proc. Conf. on Applied Natural Language Processing, Santa Monica CA., pp. 39-45 (1983).</rawString>
</citation>
<citation valid="true">
<authors>
<author>C D Hafner</author>
<author>K S Godden</author>
</authors>
<title>Design of Natural Language Interfaces: A Case Study.&amp;quot; Research Publication 4567, General Motors Research Laboratories,</title>
<date>1984</date>
<location>Warren MI</location>
<contexts>
<context position="6546" citStr="[8]" startWordPosition="1001" endWordPosition="1001">(in reverse order) to the NPPREMOD slot; superlatives are assigned to the SUPER slot; and numbers are assigned to the NUMBER slot. Finally, the determiners are assigned to the DETERMINER slot. If all of these assignments are acceptable to the semantic interpreter, an interpretation is constructed for the &amp;quot;base noun phrase&amp;quot;, and the parser can then begin to process the noun phrase post-modifiers. Figure 3 illustrates the interpretation of &amp;quot;the tallest female employee&amp;quot;, according to this scheme. A more detailed description of how DATALOG constructs interpretations is contained in another report [8]. During parsing, semantic information is collected in &amp;quot;semantic&amp;quot; registers, which are inaccessible (by convention) to the grammar. This convention ensures the generality of the grammar; although the linguistic component (through the assignment mechanism) controls the information that is passed to the semantic interpreter, the only information that flows back to the grammar is Pushing for Noun Phrase. ASSIGN Actions: HEAD employee employee employee employee CONSTITUENT employee (AMOD female) (ADJP (ADV most) (ADJ tall)) (the) SYNTACTIC SLOT NPHEAD NPPREMOD SUPER DET Popping Noun Phrase: (NP (D</context>
</contexts>
<marker>8.</marker>
<rawString>Hafner, C. D. and Godden, K. S., &amp;quot;Design of Natural Language Interfaces: A Case Study.&amp;quot; Research Publication 4567, General Motors Research Laboratories, Warren MI (1984).</rawString>
</citation>
<citation valid="true">
<authors>
<author>G G Hendrix</author>
<author>W H Lewis</author>
</authors>
<title>Transportable Natural Language Interfaces to Data.&amp;quot;</title>
<date>1981</date>
<booktitle>Proc. 19th Annual Meeting of the Assoc. for Computational Linguistics,</booktitle>
<pages>159--165</pages>
<location>Stanford CA,</location>
<contexts>
<context position="4340" citStr="[9]" startWordPosition="652" endWordPosition="652">cs into two parts (see Figure 2). A &amp;quot;general&amp;quot; semantic processor based on the relational model of data [5] interprets a wide variety of information requests applied to 1 ATN GRAMMAR input combined syntactic/ semantic analysis interface interface SEMANTICS Figure 1. Cascaded Architecture for Natural Language Processing 57 -----------) ATN combined syntactic/ input GRAMMAR semantic analysis interface interface GENERAL APPLICATION SEMANTICS SEMANTICS Figure 2. Architecture of DATALOG abstract database objects. This level of knowledge is equivalent to what Hendrix has labelled &amp;quot;pragmatic grammar&amp;quot; [9]. Domain knowledge is represented in a semantic network, which encodes the conceptual structure of the user&apos;s database. These two levels of knowledge representation arc linked together, as described in Section 4 below. The output of the Cascaded ATN grammar is a combined linguistic and conceptual representation of the query (see Figure 3), which includes a &amp;quot;SEMANTICS&amp;quot; component along with the usual linguistic constituents in the interpretation of each phrase. 3. Interaction of Syntax and Semantics The DATALOG interface between syntax and semantics is a simplification of the RUS approach, which</context>
</contexts>
<marker>9.</marker>
<rawString>Hendrix, G. G. and Lewis, W. H., &amp;quot;Transportable Natural Language Interfaces to Data.&amp;quot; Proc. 19th Annual Meeting of the Assoc. for Computational Linguistics, Stanford CA, pp. 159-165 (1981).</rawString>
</citation>
<citation valid="true">
<date>1980</date>
<journal>Artificial Intelligence Corp.</journal>
<booktitle>INTELLECT Query System User&apos;s Guide, 2nd. Edition.</booktitle>
<location>Newton Centre, MA:</location>
<contexts>
<context position="899" citStr="[10]" startWordPosition="126" endWordPosition="126">development of DATALOG, an English database query system based on Cascaded ATM grammar. By providing separate representation schemes for linguistic knowledge, general world knowledge, and application domain knowledge, DATALOG achieves a high degree of portability and extendability. 1. Introduction An area of continuing interest and challenge in computational linguistics is the development of techniques for building portable natural language (NL) interfaces (See, for example, 19,3,12]). The investigation of this problem has led to several NL systems, including TEAM [7], IRUS [1], and INTELLECT [10], which separate domain-dependent information from other, more general capabilities, and thus have the ability to be transported from one application to another. However, it is important to realize that the domain-independent portions of such systems constrain both the form and the content of the domain-dependent portions. Thus, in order to understand a system&apos;s capabilities, one must have a clear picture of the structure of interaction among these modules. This paper describes a general approach to the design of NL interfaces, focusing on the structure of interaction among the components of a</context>
</contexts>
<marker>10.</marker>
<rawString>INTELLECT Query System User&apos;s Guide, 2nd. Edition. Newton Centre, MA: Artificial Intelligence Corp. (1980).</rawString>
</citation>
<citation valid="true">
<authors>
<author>W S Mark</author>
<author>G E Barton</author>
</authors>
<title>The&apos;RUSGRAMMAR Parsing System.&amp;quot; Research Publication GMR-3243.</title>
<date>1980</date>
<journal>General Motors Research Laboratories</journal>
<location>Warren, MI:</location>
<contexts>
<context position="4984" citStr="[11]" startWordPosition="752" endWordPosition="752">emantic network, which encodes the conceptual structure of the user&apos;s database. These two levels of knowledge representation arc linked together, as described in Section 4 below. The output of the Cascaded ATN grammar is a combined linguistic and conceptual representation of the query (see Figure 3), which includes a &amp;quot;SEMANTICS&amp;quot; component along with the usual linguistic constituents in the interpretation of each phrase. 3. Interaction of Syntax and Semantics The DATALOG interface between syntax and semantics is a simplification of the RUS approach, which has been described in detail elsewhere [11]. The linguistic portion of the interface is implemented by adding a new arc action called &amp;quot;ASSIGN&amp;quot; to the ATN model of grammar. ASSIGN communicates partial linguistic analyses to a semantic interpreter, which incrementally creates a conceptual representation of the input. If an assignment is nonsensical or incompatible with previous assignments, the semantic interpreter can reject the assignment, causing the parser to back up and try another path through the grammar. In DATALOG, ASSIGN is a function of three arguments: the HEAD of the current clause or phrase, the CONSTITUENT which is being a</context>
</contexts>
<marker>11.</marker>
<rawString>Mark, W. S. and Barton, G. E., &amp;quot;The&apos;RUSGRAMMAR Parsing System.&amp;quot; Research Publication GMR-3243. Warren, MI: General Motors Research Laboratories (1980).</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Martin</author>
<author>D Appelt</author>
<author>F Pereira</author>
</authors>
<title>Transportability and Generality in a NaturalLanguage Interface System.&amp;quot; In</title>
<date>1983</date>
<booktitle>Proc. Eight International Joint Conf. on Artificial Intelligence,</booktitle>
<location>Karlsruhe, West</location>
<marker>12.</marker>
<rawString>Martin, P., Appelt, D., and Pereira, F., &amp;quot;Transportability and Generality in a NaturalLanguage Interface System.&amp;quot; In Proc. Eight International Joint Conf. on Artificial Intelligence, Karlsruhe, West Germany (1983).</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Woods</author>
</authors>
<title>Transition Network Grammars for Natural Language Analysis.&amp;quot;</title>
<date>1970</date>
<journal>Communications of the ACM,</journal>
<volume>13</volume>
<pages>591--606</pages>
<contexts>
<context position="2990" citStr="[13]" startWordPosition="454" endWordPosition="454">onships; and a domain model representing the particular concepts of the application domain. After giving a brief overview of the architecture of DATALOG, the remainder of the paper will focus on the interactions among the components of the system, first describing the interaction between syntax and semantics, and then the interaction between general knowledge and domain knowledge. 2. Overview of DATALOG Architecture The architecture of DATALOG is based on Cascaded ATN grammar, a general approach to the design of language processors which is an extension of Augmented Transition Network grammar [13]. The Cascaded ATN approach to NL processing was first developed in the RUS parser [2] and was formally characterized by Woods [14]. Figure 1 shows the architecture of a Cascaded ATN for NL processing: the syntactic-and semantic components are implemented as separate processes which operate in parallel, communicating information back and forth. This communication (represented by the &amp;quot;interface&amp;quot; portions of the diagram) allows a linguistic ATN grammar to interact with a semantic processor, creating a conceptual representation of the input in a step-by-step manner and rejecting semantically inco</context>
</contexts>
<marker>13.</marker>
<rawString>Woods, W. &amp;quot;Transition Network Grammars for Natural Language Analysis.&amp;quot; Communications of the ACM, Vol. 13, No. 10, pp. 591-606 (1970).</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Woods</author>
</authors>
<title>Cascaded ATN Grammars.&amp;quot;</title>
<date>1980</date>
<journal>American Journal of Computational Linguistics,&amp;quot;</journal>
<volume>6</volume>
<pages>1--12</pages>
<contexts>
<context position="3121" citStr="[14]" startWordPosition="477" endWordPosition="477">chitecture of DATALOG, the remainder of the paper will focus on the interactions among the components of the system, first describing the interaction between syntax and semantics, and then the interaction between general knowledge and domain knowledge. 2. Overview of DATALOG Architecture The architecture of DATALOG is based on Cascaded ATN grammar, a general approach to the design of language processors which is an extension of Augmented Transition Network grammar [13]. The Cascaded ATN approach to NL processing was first developed in the RUS parser [2] and was formally characterized by Woods [14]. Figure 1 shows the architecture of a Cascaded ATN for NL processing: the syntactic-and semantic components are implemented as separate processes which operate in parallel, communicating information back and forth. This communication (represented by the &amp;quot;interface&amp;quot; portions of the diagram) allows a linguistic ATN grammar to interact with a semantic processor, creating a conceptual representation of the input in a step-by-step manner and rejecting semantically incorrect analyses at an early stage. DATALOG extends the architecture shown in Figure 1 in the direction of increased portability, by </context>
<context position="10373" citStr="[14]" startWordPosition="1586" endWordPosition="1586">ic procedures that interpreted personnel queries can be easily transported to a different domain. 5. Conclusions The general approach we have taken to defining&amp;quot; the inter-component interactions in DATALOG has led to a high degree of extendability. We have been able to add new sub-networks to the grammar without making any changes in the semantic interpreter, producing correct interpretations (and correct answers from the database) on the first - try. We have also been able to implement new general semantic processes without modifying the grammar, taking advantage of the &amp;quot;conceptual factoring&amp;quot; [14] which is one of the benefits of the Cascaded ATN approach. The use of a two-level semantic model is an experimental approach that further adds to the portability of a Cascaded ATN grammar. By representing application concepts in an &amp;quot;epistemological&amp;quot; semantic network with a restricted set of primitive links (see Brae:man [4]), the task of building a new application of DATALOG is reduced to defining the nodes and connectivity of this network and the synonyms for the concepts repre&apos;employee Figure 4. Interaction of Domain and General Knowledge Which female Ph.D.s earn more than 40000 dollars att</context>
</contexts>
<marker>14.</marker>
<rawString>Woods, W., &amp;quot;Cascaded ATN Grammars.&amp;quot; American Journal of Computational Linguistics,&amp;quot; Vol. 6, No. 1, pp. 1-12 (1980).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>