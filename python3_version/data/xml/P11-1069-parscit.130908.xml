<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000123">
<title confidence="0.99159">
Shift-Reduce CCG Parsing
</title>
<author confidence="0.999336">
Yue Zhang Stephen Clark
</author>
<affiliation confidence="0.998606">
University of Cambridge University of Cambridge
Computer Laboratory Computer Laboratory
</affiliation>
<email confidence="0.997743">
yue.zhang@cl.cam.ac.uk stephen.clark@cl.cam.ac.uk
</email>
<sectionHeader confidence="0.995596" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999474277777778">
CCGs are directly compatible with binary-
branching bottom-up parsing algorithms, in
particular CKY and shift-reduce algorithms.
While the chart-based approach has been the
dominant approach for CCG, the shift-reduce
method has been little explored. In this paper,
we develop a shift-reduce CCG parser using
a discriminative model and beam search, and
compare its strengths and weaknesses with the
chart-based C&amp;C parser. We study different
errors made by the two parsers, and show that
the shift-reduce parser gives competitive accu-
racies compared to C&amp;C. Considering our use
of a small beam, and given the high ambigu-
ity levels in an automatically-extracted gram-
mar and the amount of information in the CCG
lexical categories which form the shift actions,
this is a surprising result.
</bodyText>
<sectionHeader confidence="0.999119" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998232384615385">
Combinatory Categorial Grammar (CCG; Steedman
(2000)) is a lexicalised theory of grammar which has
been successfully applied to a range of problems in
NLP, including treebank creation (Hockenmaier and
Steedman, 2007), syntactic parsing (Hockenmaier,
2003; Clark and Curran, 2007), logical form con-
struction (Bos et al., 2004) and surface realization
(White and Rajkumar, 2009). From a parsing per-
spective, the C&amp;C parser (Clark and Curran, 2007)
has been shown to be competitive with state-of-the-
art statistical parsers on a variety of test suites, in-
cluding those consisting of grammatical relations
(Clark and Curran, 2007), Penn Treebank phrase-
</bodyText>
<page confidence="0.531015">
683
</page>
<bodyText confidence="0.999867264705883">
structure trees (Clark and Curran, 2009), and un-
bounded dependencies (Rimell et al., 2009).
The binary branching nature of CCG means that
it is naturally compatible with bottom-up parsing al-
gorithms such as shift-reduce and CKY (Ades and
Steedman, 1982; Steedman, 2000). However, the
parsing work by Clark and Curran (2007), and also
Hockenmaier (2003) and Fowler and Penn (2010),
has only considered chart-parsing. In this paper we
fill a gap in the CCG literature by developing a shift-
reduce parser for CCG.
Shift-reduce parsers have become popular for de-
pendency parsing, building on the initial work of Ya-
mada and Matsumoto (2003) and Nivre and Scholz
(2004). One advantage of shift-reduce parsers is that
the scoring model can be defined over actions, al-
lowing highly efficient parsing by using a greedy
algorithm in which the highest scoring action (or a
small number of possible actions) is taken at each
step. In addition, high accuracy can be maintained
by using a model which utilises a rich set of features
for making each local decision (Nivre et al., 2006).
Following recent work applying global discrim-
inative models to large-scale structured prediction
problems (Collins and Roark, 2004; Miyao and
Tsujii, 2005; Clark and Curran, 2007; Finkel et
al., 2008), we build our shift-reduce parser using a
global linear model, and compare it with the chart-
based C&amp;C parser. Using standard development
and test sets from CCGbank, our shift-reduce parser
gives a labeled F-measure of 85.53%, which is com-
petitive with the 85.45% F-measure of the C&amp;C
parser on recovery of predicate-argument dependen-
cies from CCGbank. Hence our work shows that
</bodyText>
<note confidence="0.9639035">
Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 683–692,
Portland, Oregon, June 19-24, 2011. c�2011 Association for Computational Linguistics
</note>
<bodyText confidence="0.990762778947369">
transition-based parsing can be successfully applied an NP to its left using function application:
to CCG, improving on earlier attempts such as Has- NP S\NP ⇒ S
san et al. (2008). Detailed analysis shows that our Categories can also combine using function
shift-reduce parser yields a higher precision, lower composition, allowing the combination of “may”
recall and higher F-score on most of the common ((S\NP)/(S\NP)) and “like” ((S\NP)/NP) in
CCG dependency types compared to C&amp;C. coordination examples such as “John may like but
One advantage of the shift-reduce parser is that may detest Mary”:
it easily handles sentences for which it is difficult (S\NP)/(S\NP) (S\NP)/NP ⇒ (S\NP)/NP
to find a spanning analysis, which can happen with In addition to binary rules, such as function appli-
CCG because the lexical categories at the leaves of a cation and composition, there are also unary rules
derivation place strong contraints on the set of possi- which operate on a single category in order to
ble derivations, and the supertagger which provides change its type. For example, forward type-raising
the lexical categories sometimes makes mistakes. can change a subject NP into a complex category
Unlike the C&amp;C parser, the shift-reduce parser nat- looking to the right for a verb phrase:
urally produces fragmentary analyses when appro- NP ⇒ S/(S\NP)
priate (Vivre et al., 2006), and can produce sensible An example CCG derivation is given in Section 3.
local structures even when a full spanning analysis The resource used for building wide-coverage
cannot be found.1 CCG parsers of English is CCGbank (Hockenmaier
Finally, considering this work in the wider pars- and Steedman, 2007), a version of the Penn Tree-
ing context, it provides an interesting comparison bank in which each phrase-structure tree has been
between heuristic beam search using a rich set of transformed into a normal-form CCG derivation.
features, and optimal dynamic programming search There are two ways to extract a grammar from this
where the feature range is restricted. We are able to resource. One approach is to extract a lexicon,
perform this comparison because the use of the CCG i.e. a mapping from words to sets of lexical cat-
supertagger means that the C&amp;C parser is able to egories, and then manually define the combinatory
build the complete chart, from which it can find the rule schemas, such as functional application and
optimal derivation, with no pruning whatsoever at composition, which combine the categories together.
the parsing stage. In contrast, the shift-reduce parser The derivations in the treebank are then used to pro-
uses a simple beam search with a relatively small vide training data for the statistical disambiguation
beam. Perhaps surprisingly, given the ambiguity lev- model. This is the method used in the C&amp;C parser.2
els in an automatically-extracted grammar, and the The second approach is to read the complete
amount of information in the CCG lexical categories grammar from the derivations, by extracting combi-
which form the shift actions, the shift-reduce parser natory rule instances from the local trees consisting
using heuristic beam search is able to outperform the of a parent category and one or two child categories,
chart-based parser. and applying only those instances during parsing.
2 CCG Parsing (These rule instances also include rules to deal with
CCG, and the application of CCG to wide-coverage punctuation and unary type-changing rules, in addi-
parsing, is described in detail elsewhere (Steedman, tion to instances of the combinatory rule schemas.)
2000; Hockenmaier, 2003; Clark and Curran, 2007). This is the method used by Hockenmaier (2003) and
Here we provide only a short description. is the method we adopt in this paper.
During CCG parsing, adjacent categories are com- Fowler and Penn (2010) demonstrate that the sec-
bined using CCG’s combinatory rules. For example, ond extraction method results in a context-free ap-
a verb phrase in English (S\NP) can combine with proximation to the grammar resulting from the first
2Although the C&amp;C default mode applies a restriction for effi-
ciency reasons in which only rule instances seen in CCGbank
can be applied, making the grammar of the second type.
1See e.g. Riezler et al. (2002) and Zhang et al. (2007) for chart-
based parsers which can produce fragmentary analyses.
684
method, which has the potential to produce a mildly-
context sensitive grammar (given the existence of
certain combinatory rules) (Weir, 1988). However,
it is important to note that the advantages of CCG, in
particular the tight relationship between syntax and
semantic interpretation, are still maintained with the
second approach, as Fowler and Penn (2010) argue.
3 The Shift-reduce CCG Parser
Given an input sentence, our parser uses a stack of
partial derivations, a queue of incoming words, and
a series of actions—derived from the rule instances
in CCGbank—to build a derivation tree. Following
Clark and Curran (2007), we assume that each input
word has been assigned a POS-tag (from the Penn
Treebank tagset) and a set of CCG lexical categories.
We use the same maximum entropy POS-tagger and
supertagger as the C&amp;C parser. The derivation tree
can be transformed into CCG dependencies or gram-
matical relations by a post-processing step, which
essentially runs the C&amp;C parser deterministically
over the derivation, interpreting the derivation and
generating the required output.
The configuration of the parser, at each step of
the parsing process, is shown in part (a) of Figure 1,
where the stack holds the partial derivation trees that
have been built, and the queue contains the incoming
words that have not been processed. In the figure,
S(H) represents a category S on the stack with head
word H, while Qi represents a word in the incoming
queue.
The set of action types used by the parser is as
follows: {SHIFT, COMBINE, UNARY, FINISH}.
Each action type represents a set of possible actions
available to the parser at each step in the process.
The SHIFT-X action pushes the next incoming
word onto the stack, and assigns the lexical category
X to the word (Figure 1(b)). The label X can be any
lexical category from the set assigned to the word
being shifted by the supertagger. Hence the shift ac-
tion performs lexical category disambiguation. This
is in contrast to a shift-reduce dependency parser in
which a shift action typically just pushes a word onto
the stack.
The COMBINE-X action pops the top two nodes
off the stack, and combines them into a new node,
which is pushed back on the stack. The category of
</bodyText>
<page confidence="0.480597">
685
</page>
<figureCaption confidence="0.705414">
Figure 1: The parser configuration and set of actions.
the new node is X. A COMBINE action corresponds
to a combinatory rule in the CCG grammar (or one of
the additional punctuation or type-changing rules),
which is applied to the categories of the top two
nodes on the stack.
</figureCaption>
<bodyText confidence="0.995929142857143">
The UNARY-X action pops the top of the stack,
transforms it into a new node with category X, and
pushes the new node onto the stack. A UNARY ac-
tion corresponds to a unary type-changing or type-
raising rule in the CCG grammar, which is applied to
the category on top of the stack.
The FINISH action terminates the parsing pro-
cess; it can be applied when all input words have
been shifted onto the stack. Note that the FINISH
action can be applied when the stack contains more
than one node, in which case the parser produces
a set of partial derivation trees, each corresponding
to a node on the stack. This sometimes happens
when a full derivation tree cannot be built due to su-
pertagging errors, and provides a graceful solution
to the problem of producing high-quality fragmen-
tary parses when necessary.
(Sagae and Lavie, 2006b) parsing is that, for CCG,
there are many more shift actions – a shift action for
each word-lexical category pair. Given the amount
of syntactic information in the lexical categories, the
choice of correct category, from those supplied by
the supertagger, is often a difficult one, and often
a choice best left to the parsing model. The C&amp;C
parser solves this problem by building the complete
packed chart consistent with the lexical categories
supplied by the supertagger, leaving the selection of
the lexical categories to the Viterbi algorithm. For
the shift-reduce parser the choice is also left to the
parsing model, but in contrast to C&amp;C the correct
lexical category could be lost at any point in the
heuristic search process. Hence it is perhaps sur-
prising that we are able to achieve a high parsing ac-
curacy of 85.5%, given a relatively small beam size.
4 Decoding
Greedy local search (Yamada and Matsumoto, 2003;
Sagae and Lavie, 2005; Nivre and Scholz, 2004)
has typically been used for decoding in shift-reduce
parsers, while beam-search has recently been ap-
plied as an alternative to reduce error-propagation
(Johansson and Nugues, 2007; Zhang and Clark,
2008; Zhang and Clark, 2009; Huang et al., 2009).
Both greedy local search and beam-search have lin-
ear time complexity. We use beam-search in our
CCG parser.
To formulate the decoding algorithm, we define a
candidate item as a tuple (5, Q, F), where 5 repre-
sents the stack with partial derivations that have been
built, Q represents the queue of incoming words that
have not been processed, and F is a boolean value
that represents whether the candidate item has been
finished. A candidate item is finished if and only if
the FINISH action has been applied to it, and no
more actions can be applied to a candidate item af-
ter it reaches the finished status. Given an input sen-
tence, we define the start item as the unfinished item
with an empty stack and the whole input sentence as
the incoming words. A derivation is built from the
start item by repeated applications of actions until
the item is finished.
To apply beam-search, an agenda is used to hold
the N-best partial (unfinished) candidate items at
each parsing step. A separate candidate output is
</bodyText>
<figureCaption confidence="0.749334">
Figure 2: An example parsing process.
Figure 2 shows the shift-reduce parsing process
</figureCaption>
<bodyText confidence="0.896405571428571">
for the example sentence “IBM bought Lotus”. First
the word “IBM” is shifted onto the stack as an NP;
then “bought” is shifted as a transitive verb look-
ing for its object NP on the right and subject NP on
the left ((S[dcl]\NP)/NP); and then “Lotus” is shifted
as an NP. Then “bought” is combined with its ob-
ject “Lotus” resulting in a verb phrase looking for its
subject on the left (S[dcl]\NP). Finally, the resulting
verb phrase is combined with its subject, resulting in
a declarative sentence (S[dcl]).
A key difference with previous work on shift-
reduce dependency (Nivre et al., 2006) and CFG
686
feature templates
</bodyText>
<table confidence="0.99387984">
1 S0wp, S0c, S0pc, S0wc,
S1wp, S1c, S1pc, S1wc,
S2pc, S2wc,
S3pc, S3wc,
2 Q0wp, Q1wp, Q2wp, Q3wp,
3 S0Lpc, S0Lwc, S0Rpc, S0Rwc,
S0Upc, S0Uwc,
S1Lpc, S1Lwc, S1Rpc, S1Rwc,
S1Upc, S1Uwc,
4 S0wcS1wc, S0cS1w, S0wS1c, S0cS1c,
S0wcQ0wp, S0cQ0wp, S0wcQ0p, S0cQ0p,
S1wcQ0wp, S1cQ0wp, S1wcQ0p, S1cQ0p,
5 S0wcS1cQ0p, S0cS1wcQ0p, S0cS1cQ0wp,
S0cS1cQ0p, S0pS1pQ0p,
S0wcQ0pQ1p, S0cQ0wpQ1p, S0cQ0pQ1wp,
S0cQ0pQ1p, S0pQ0pQ1p,
S0wcS1cS2c, S0cS1wcS2c, S0cS1cS2wc,
S0cS1cS2c, S0pS1pS2p,
6 S0cS0HcS0Lc, S0cS0HcS0Rc,
S1cS1HcS1Rc,
S0cS0RcQ0p, S0cS0RcQ0w,
S0cS0LcS1c, S0cS0LcS1w,
S0cS1cS1Rc, S0wS1cS1Rc.
function DECODE(input, agenda, list, N,
grammar, candidate output):
</table>
<figure confidence="0.715355375">
agenda.clear()
agenda.insert(GETSTARTITEM(input))
candidate output =NONE
while not agenda.empty():
list.clear()
for item in agenda:
for action in grammar.getActions(item):
item′ = item.apply(action)
if item′.� == TRUE:
if candidate output == NONE or
item′.score &gt; candidate output.score:
candidate output = item′
else:
list.append(item′)
agenda.clear()
agenda.insert(list.best(N))
</figure>
<figureCaption confidence="0.999682">
Figure 3: The decoding algorithm; N is the agenda size
</figureCaption>
<tableCaption confidence="0.979642">
Table 1: Feature templates.
</tableCaption>
<bodyText confidence="0.99993852">
used to record the current best finished item that has
been found, since candidate items can be finished at
different steps. Initially the agenda contains only the
start item, and the candidate output is set to none. At
each step during parsing, each candidate item from
the agenda is extended in all possible ways by apply-
ing one action according to the grammar, and a num-
ber of new candidate items are generated. If a newly
generated candidate is finished, it is compared with
the current candidate output. If the candidate output
is none or the score of the newly generated candi-
date is higher than the score of the candidate output,
the candidate output is replaced with the newly gen-
erated item; otherwise the newly generated item is
discarded. If the newly generated candidate is un-
finished, it is appended to a list of newly generated
partial candidates. After all candidate items from the
agenda have been processed, the agenda is cleared
and the N-best items from the list are put on the
agenda. Then the list is cleared and the parser moves
on to the next step. This process repeats until the
agenda is empty (which means that no new items
have been generated in the previous step), and the
candidate output is the final derivation. Pseudocode
for the algorithm is shown in Figure 3.
</bodyText>
<sectionHeader confidence="0.968035" genericHeader="introduction">
5 Model and Training
</sectionHeader>
<bodyText confidence="0.999983590909091">
We use a global linear model to score candidate
items, trained discriminatively with the averaged
perceptron (Collins, 2002). Features for a (finished
or partial) candidate are extracted from each ac-
tion that have been applied to build the candidate.
Following Collins and Roark (2004), we apply the
“early update” strategy to perceptron training: at any
step during decoding, if neither the candidate out-
put nor any item in the agenda is correct, decoding
is stopped and the parameters are updated using the
current highest scored item in the agenda or the can-
didate output, whichever has the higher score.
Table 1 shows the feature templates used by the
parser. The symbols S0, S1, S2 and S3 in the ta-
ble represent the top four nodes on the stack (if ex-
istent), and Q0, Q1, Q2 and Q3 represent the front
four words in the incoming queue (if existent). S0H
and S1H represent the subnodes of S0 and S1 that
have the lexical head of S0 and S1, respectively. S0L
represents the left subnode of S0, when the lexical
head is from the right subnode. S0R and S1R rep-
resent the right subnode of S0 and S1, respectively,
</bodyText>
<page confidence="0.992818">
687
</page>
<bodyText confidence="0.981383545454545">
when the lexical head is from the left subnode. If So cally assigned POS-tags, with 10-fold cross valida-
is built by a UNARY action, SOU represents the only tion used to assign POS-tags and lexical categories
subnode of So. The symbols w, p and c represent the to the training data. At the supertagging stage, mul-
word, the POS, and the CCG category, respectively. tiple lexical categories are assigned to each word in
These rich feature templates produce a large num- the input. For each word, the supertagger assigns all
ber of features: 36 million after the first training it- lexical categories whose forward-backward proba-
eration, compared to around 0.5 million in the C&amp;C bility is above Q · max, where max is the highest
parser. lexical category probability for the word, and Q is a
6 Experiments threshold parameter. To give the parser a reasonable
Our experiments were performed using CCGBank freedom in lexical category disambiguation, we used
(Hockenmaier and Steedman, 2007), which was a small Q value of 0.0001, which results in 3.6 lexi-
split into three subsets for training (Sections 02–21), cal categories being assigned to each word on aver-
development testing (Section 00) and the final test age in the training data. For training, but not testing,
(Section 23). Extracted from the training data, the we also added the correct lexical category to the list
CCG grammar used by our parser consists of 3070 of lexical categories for a word in cases when it was
binary rule instances and 191 unary rule instances. not provided by the supertagger.
We compute F-scores over labeled CCG depen- Increasing the size of the beam in the parser beam
dencies and also lexical category accuracy. CCG de- search leads to higher accuracies but slower running
pendencies are defined in terms of lexical categories, time. In our development experiments, the accu-
by numbering each argument slot in a complex cat- racy improvement became small when the beam size
egory. For example, the first NP in a transitive verb reached 16, and so we set the size of the beam to 16
category is a CCG dependency relation, correspond- for the remainder of the experiments.
ing to the subject of the verb. Clark and Curran 6.1 Development test accuracies
(2007) gives a more precise definition. We use the Table 2 shows the labeled precision (lp), recall (lr),
generate script from the C&amp;C tools3 to transform F-score (lf), sentence-level accuracy (lsent) and lex-
derivations into CCG dependencies. ical category accuracy (cats) of our parser and the
There is a mismatch between the grammar that C&amp;C parser on the development data. We ran the
generate uses, which is the same grammar as the C&amp;C parser using the normal-form model (we re-
C&amp;C parser, and the grammar we extract from CCG- produced the numbers reported in Clark and Cur-
bank, which contains more rule instances. Hence ran (2007)), and copied the results of the hybrid
generate is unable to produce dependencies for model from Clark and Curran (2007), since the hy-
some of the derivations our shift-reduce parser pro- brid model is not part of the public release.
duces. In order to allow generate to process all The accuracy of our parser is much better when
derivations from the shift-reduce parser, we repeat- evaluated on all sentences, partly because C&amp;C
edly removed rules that the generate script can- failed on 0.94% of the data due to the failure to pro-
not handle from our grammar, until all derivations duce a spanning analysis. Our shift-reduce parser
in the development data could be dealt with. In does not suffer from this problem because it pro-
fact, this procedure potentially reduces the accuracy duces fragmentary analyses for those cases. When
of the shift-reduce parser, but the effect is compar- evaluated on only those sentences that C&amp;C could
atively small because only about 4% of the devel- analyze, our parser gave 0.29% higher F-score. Our
opment and test sentences contain rules that are not shift-reduce parser also gave higher accuracies on
handled by the generate script. lexical category assignment. The sentence accuracy
All experiments were performed using automati- of our shift-reduce parser is also higher than C&amp;C,
which confirms that our shift-reduce parser produces
</bodyText>
<table confidence="0.944964833333333">
reasonable sentence-level analyses, despite the pos-
sibility for fragmentary analysis.
3Available at http://svn.ask.it.usyd.edu.au/trac/candc/wiki; we
used the generate and evaluate scripts, as well as the
C&amp;C parser, for evaluation and comparison.
688
lp. lr. lf. lsent. cats.
shift-reduce 87.15% 82.95% 85.00% 33.82% 92.77%
C&amp;C (normal-form) 85.22% 82.52% 83.85% 31.63% 92.40%
shift-reduce 87.55% 83.63% 85.54% 34.14% 93.11%
C&amp;C (hybrid) 85.25% –
C&amp;C (normal-form) 85.22% 84.29% 84.76% 31.93% 92.83%
</table>
<tableCaption confidence="0.723987571428571">
evaluated on
all sentences
all sentences
99.06% (C&amp;C coverage)
99.06% (C&amp;C coverage)
99.06% (C&amp;C coverage)
Table 2: Accuracies on the development test data.
</tableCaption>
<figure confidence="0.925740166666667">
Precision comparison by dependency length
0 5 10 15 20 25 30
dependency length (bins of 5)
Recall comparison by dependency length
0 5 10 15 20 25 30
dependency length (bins of 5)
</figure>
<figureCaption confidence="0.997795">
Figure 4: P &amp; R scores relative to dependency length.
</figureCaption>
<subsectionHeader confidence="0.668445">
6.2 Error comparison with C&amp;C parser
</subsectionHeader>
<bodyText confidence="0.999937823529412">
Our shift-reduce parser and the chart-based C&amp;C
parser offer two different solutions to the CCG pars-
ing problem. The comparison reported in this sec-
tion is similar to the comparison between the chart-
based MSTParser (McDonald et al., 2005) and shift-
reduce MaltParser (Nivre et al., 2006) for depen-
dency parsing. We follow McDonald and Nivre
(2007) and characterize the errors of the two parsers
by sentence and dependency length and dependency
type.
We measured precision, recall and F-score rel-
ative to different sentence lengths. Both parsers
performed better on shorter sentences, as expected.
Our shift-reduce parser performed consistently bet-
ter than C&amp;C on all sentence lengths, and there
was no significant difference in the rate of perfor-
mance degradation between the parsers as the sen-
tence length increased.
Figure 4 shows the comparison of labeled preci-
sion and recall relative to the dependency length (i.e.
the number of words between the head and depen-
dent), in bins of size 5 (e.g. the point at x=5 shows
the precision or recall for dependency lengths 1 – 5).
This experiment was performed using the normal-
form version of the C&amp;C parser, and the evaluation
was on the sentences for which C&amp;C gave an anal-
ysis. The number of dependencies drops when the
dependency length increases; there are 141, 180 and
124 dependencies from the gold-standard, C&amp;C out-
put and our shift-reduce parser output, respectively,
when the dependency length is between 21 and 25,
inclusive. The numbers drop to 47, 56 and 36 when
the dependency length is between 26 and 30. The
recall of our parser drops more quickly as the de-
pendency length grows beyond 15. A likely reason
is that the recovery of longer-range dependencies re-
quires more processing steps, increasing the chance
of the correct structure being thrown off the beam.
In contrast, the precision did not drop more quickly
than C&amp;C, and in fact is consistently higher than
C&amp;C across all dependency lengths, which reflects
the fact that the long range dependencies our parser
managed to recover are comparatively reliable.
Table 3 shows the comparison of labeled precision
(lp), recall (lr) and F-score (lf) for the most common
CCG dependency types. The numbers for C&amp;C are
for the hybrid model, copied from Clark and Curran
(2007). While our shift-reduce parser gave higher
precision for almost all categories, it gave higher re-
call on only half of them, but higher F-scores for all
but one dependency type.
</bodyText>
<subsectionHeader confidence="0.999033">
6.3 Final results
</subsectionHeader>
<bodyText confidence="0.999837">
Table 4 shows the accuracies on the test data. The
numbers for the normal-form model are evaluated
by running the publicly available parser, while those
for the hybrid dependency model are from Clark
and Curran (2007). Evaluated on all sentences, the
accuracies of our parser are much higher than the
C&amp;C parser, since the C&amp;C parser failed to produce
any output for 10 sentences. When evaluating both
</bodyText>
<figure confidence="0.997297818181818">
precision %
90
85
80
75
70
65
60
this paper
CSC
recall %
90
85
80
75
70
65
60
55
50
this paper
CSC
</figure>
<page confidence="0.993515">
689
</page>
<table confidence="0.999793363636364">
category arg lp. (o) lp. (C) lr. (o) lr. (C) lf. (o) lf. (C) freq.
N/N 1 95.77% 95.28% 95.79% 95.62% 95.78% 95.45% 7288
NP/N 1 96.70% 96.57% 96.59% 96.03% 96.65% 96.30% 4101
(NP\NP)/NP 2 83.19% 82.17% 89.24% 88.90% 86.11% 85.40% 2379
(NP\NP)/NP 1 82.53% 81.58% 87.99% 85.74% 85.17% 83.61% 2174
((S\NP)\(S\NP))/NP 3 77.60% 71.94% 71.58% 73.32% 74.47% 72.63% 1147
((S\NP)\(S\NP))/NP 2 76.30% 70.92% 70.60% 71.93% 73.34% 71.42% 1058
((S[dcl]\NP)/NP 2 85.60% 81.57% 84.30% 86.37% 84.95% 83.90% 917
PP/NP 1 73.76% 75.06% 72.83% 70.09% 73.29% 72.49% 876
((S[dcl]\NP)/NP 1 85.32% 81.62% 82.00% 85.55% 83.63% 83.54% 872
((S\NP)\(S\NP)) 2 84.44% 86.85% 86.60% 86.73% 85.51% 86.79% 746
</table>
<tableCaption confidence="0.995239">
Table 3: Accuracy comparison on the most common CCG dependency types. (o) – our parser; (C) – C&amp;C (hybrid)
</tableCaption>
<table confidence="0.998086875">
lp. lr. lf. lsent. cats. evaluated
shift-reduce 87.43% 83.61% 85.48% 35.19% 93.12% all sentences
C&amp;C (normal-form) 85.58% 82.85% 84.20% 32.90% 92.84% all sentences
shift-reduce 87.43% 83.71% 85.53% 35.34% 93.15% 99.58% (C&amp;C coverage)
C&amp;C (hybrid) 86.17% 84.74% 85.45% 32.92% 92.98% 99.58% (C&amp;C coverage)
C&amp;C (normal-form) 85.48% 84.60% 85.04% 33.08% 92.86% 99.58% (C&amp;C coverage)
F&amp;P (Petrov I-5)* 86.29% 85.73% 86.01% – – – (F&amp;P n C&amp;C coverage; 96.65% on dev. test)
C&amp;C hybrid* 86.46% 85.11% 85.78% – – – (F&amp;P n C&amp;C coverage; 96.65% on dev. test)
</table>
<tableCaption confidence="0.999988">
Table 4: Comparison with C&amp;C; final test. * – not directly comparable.
</tableCaption>
<bodyText confidence="0.999906222222222">
parsers on the sentences for which C&amp;C produces an
analysis, our parser still gave the highest accuracies.
The shift-reduce parser gave higher precision, and
lower recall, than C&amp;C; it also gave higher sentence-
level and lexical category accuracy.
The last two rows in the table show the accuracies
of Fowler and Penn (2010) (F&amp;P), who applied the
CFG parser of Petrov and Klein (2007) to CCG, and
the corresponding accuracies for the C&amp;C parser on
the same test sentences. F&amp;P can be treated as an-
other chart-based parser; their evaluation is based
on the sentences for which both their parser and
C&amp;C produced dependencies (or more specifically
those sentences for which generate could pro-
duce dependencies), and is not directly comparable
with ours, especially considering that their test set is
smaller and potentially slightly easier.
The final comparison is parser speed. The shift-
reduce parser is linear-time (in both sentence length
and beam size), and can analyse over 10 sentences
per second on a 2GHz CPU, with a beam of 16,
which compares very well with other constituency
parsers. However, this is no faster than the chart-
based C&amp;C parser, although speed comparisons
are difficult because of implementation differences
(C&amp;C uses heavily engineered C++ with a focus on
efficiency).
</bodyText>
<sectionHeader confidence="0.999948" genericHeader="related work">
7 Related Work
</sectionHeader>
<bodyText confidence="0.999957823529412">
Sagae and Lavie (2006a) describes a shift-reduce
parser for the Penn Treebank parsing task which
uses best-first search to allow some ambiguity into
the parsing process. Differences with our approach
are that we use a beam, rather than best-first, search;
we use a global model rather than local models
chained together; and finally, our results surpass
the best published results on the CCG parsing task,
whereas Sagae and Lavie (2006a) matched the best
PTB results only by using a parser combination.
Matsuzaki et al. (2007) describes similar work
to ours but using an automatically-extracted HPSG,
rather than CCG, grammar. They also use the gen-
eralised perceptron to train a disambiguation model.
One difference is that Matsuzaki et al. (2007) use an
approximating CFG, in addition to the supertagger,
to improve the efficiency of the parser.
</bodyText>
<page confidence="0.927925">
690
</page>
<bodyText confidence="0.94781734">
Ninomiya et al. (2009) (and Ninomiya et al. Acknowledgements
(2010)) describe a greedy shift-reduce parser for We thank the anonymous reviewers for their sugges-
HPSG, in which a single action is chosen at each tions. Yue Zhang and Stephen Clark are supported
parsing step, allowing the possibility of highly ef- by the European Union Seventh Framework Pro-
ficient parsing. Since the HPSG grammar has rela- gramme (FP7-ICT-2009-4) under grant agreement
tively tight constraints, similar to CCG, the possibil- no. 247762.
ity arises that a spanning analysis cannot be found References
for some sentences. Our approach to this problem A. E. Ades and M. Steedman. 1982. On the order of
was to allow the parser to return a fragmentary anal- words. Linguistics and Philosophy, pages 517 – 558.
ysis; Ninomiya et al. (2009) adopt a different ap- Johan Bos, Stephen Clark, Mark Steedman, James R.
proach based on default unification. Curran, and Julia Hockenmaier. 2004. Wide-coverage
Finally, our work is similar to the comparison of semantic representations from a CCG parser. In Pro-
the chart-based MSTParser (McDonald et al., 2005) ceedings of COLING-04, pages 1240–1246, Geneva,
and shift-reduce MaltParser (Nivre et al., 2006) for Switzerland.
dependency parsing. MSTParser can perform ex- Stephen Clark and James R. Curran. 2007. Wide-
haustive search, given certain feature restrictions, coverage efficient statistical parsing with CCG and
because the complexity of the parsing task is lower log-linear models. Computational Linguistics,
than for constituent parsing. C&amp;C can perform ex- 33(4):493–552.
haustive search because the supertagger has already Stephen Clark and James R. Curran. 2009. Comparing
reduced the search space. We also found that ap- the accuracy of CCG and Penn Treebank parsers. In
proximate heuristic search for shift-reduce parsing, Proceedings of ACL-2009 (short papers), pages 53–
utilising a rich feature space, can match the perfor- 56, Singapore.
mance of the optimal chart-based parser, as well as Michael Collins and Brian Roark. 2004. Incremental
similar error profiles for the two CCG parsers com- parsing with the perceptron algorithm. In Proceedings
pared to the two dependency parsers. ofACL, pages 111–118, Barcelona, Spain.
8 Conclusion Michael Collins. 2002. Discriminative training meth-
This is the first work to present competitive results ods for hidden Markov models: Theory and experi-
for CCG using a transition-based parser, filling a gap ments with perceptron algorithms. In Proceedings of
in the CCG parsing literature. Considered in terms EMNLP, pages 1–8, Philadelphia, USA.
of the wider parsing problem, we have shown that Jenny Rose Finkel, Alex Kleeman, and Christopher D.
state-of-the-art parsing results can be obtained using Manning. 2008. Feature-based, conditional random
a global discriminative model, one of the few pa- field parsing. In Proceedings of the 46th Meeting of
pers to do so without using a generative baseline as a the ACL, pages 959–967, Columbus, Ohio.
feature. The comparison with C&amp;C also allowed us Timothy A. D. Fowler and Gerald Penn. 2010. Ac-
to compare a shift-reduce parser based on heuristic curate context-free parsing with Combinatory Catego-
beam search utilising a rich feature set with an opti- rial Grammar. In Proceedings ofACL-2010, Uppsala,
mal chart-based parser whose features are restricted Sweden.
by dynamic programming, with favourable results H. Hassan, K. Sima’an, and A. Way. 2008. A syntactic
for the shift-reduce parser. language model based on incremental CCG parsing.
The complementary errors made by the chart- In Proceedings of the Second IEEE Spoken Language
based and shift-reduce parsers opens the possibil- Technology Workshop, Goa, India.
ity of effective parser combination, following sim- Julia Hockenmaier and Mark Steedman. 2007. CCG-
ilar work for dependency parsing. bank: A corpus of CCG derivations and dependency
The parser code can be downloaded at structures extracted from the Penn Treebank. Compu-
http://www.sourceforge.net/projects/zpar, tational Linguistics, 33(3):355–396.
version 0.5. Julia Hockenmaier. 2003. Data and Models for Statis-
691 tical Parsing with Combinatory Categorial Grammar.
Ph.D. thesis, University of Edinburgh.
Liang Huang, Wenbin Jiang, and Qun Liu. 2009.
Bilingually-constrained (monolingual) shift-reduce
</bodyText>
<reference confidence="0.999573786516854">
parsing. In Proceedings of the 2009 EMNLP Confer-
ence, pages 1222–1231, Singapore.
Richard Johansson and Pierre Nugues. 2007. Incre-
mental dependency parsing using online learning. In
Proceedings of the CoNLL/EMNLP Conference, pages
1134–1138, Prague, Czech Republic.
Takuya Matsuzaki, Yusuke Miyao, and Jun ichi Tsu-
jii. 2007. Efficient HPSG parsing with supertagging
and CFG-filtering. In Proceedings ofIJCAI-07, pages
1671–1676, Hyderabad, India.
Ryan McDonald and Joakim Nivre. 2007. Characteriz-
ing the errors of data-driven dependency parsing mod-
els. In Proceedings of EMNLP/CoNLL, pages 122–
131, Prague, Czech Republic.
Ryan McDonald, Koby Crammer, and Fernando Pereira.
2005. Online large-margin training of dependency
parsers. In Proceedings of the 43rd Meeting of the
ACL, pages 91–98, Michigan, Ann Arbor.
Yusuke Miyao and Jun’ichi Tsujii. 2005. Probabilistic
disambiguation models for wide-coverage HPSG pars-
ing. In Proceedings of the 43rd meeting of the ACL,
pages 83–90, University of Michigan, Ann Arbor.
Takashi Ninomiya, Takuya Matsuzaki, Nobuyuki
Shimizu, and Hiroshi Nakagawa. 2009. Deterministic
shift-reduce parsing for unification-based grammars
by using default unification. In Proceedings of
EACL-09, pages 603–611, Athens, Greece.
Takashi Ninomiya, Takuya Matsuzaki, Nobuyuki
Shimizu, and Hiroshi Nakagawa. 2010. Deter-
ministic shift-reduce parsing for unification-based
grammars. Journal ofNatural Language Engineering,
DOI:10.1017/S1351324910000240.
J. Nivre and M. Scholz. 2004. Deterministic dependency
parsing of English text. In Proceedings of COLING-
04, pages 64–70, Geneva, Switzerland.
Joakim Nivre, Johan Hall, Jens Nilsson, G¨uls¸en Eryiˇgit,
and Svetoslav Marinov. 2006. Labeled pseudo-
projective dependency parsing with support vector ma-
chines. In Proceedings of CoNLL, pages 221–225,
New York, USA.
Slav Petrov and Dan Klein. 2007. Improved infer-
ence for unlexicalized parsing. In Proceedings of
HLT/NAACL, pages 404–411, Rochester, New York,
April.
Stefan Riezler, Tracy H. King, Ronald M. Kaplan,
Richard Crouch, John T. Maxwell III, and Mark John-
son. 2002. Parsing the Wall Street Journal using a
Lexical-Functional Grammar and discriminative esti-
mation techniques. In Proceedings of the 40th Meet-
ing of the ACL, pages 271–278, Philadelphia, PA.
Laura Rimell, Stephen Clark, and Mark Steedman. 2009.
Unbounded dependency recovery for parser evalua-
tion. In Proceedings of EMNLP-09, pages 813–821,
Singapore.
Kenji Sagae and Alon Lavie. 2005. A classifier-based
parser with linear run-time complexity. In Proceed-
ings ofIWPT, pages 125–132, Vancouver, Canada.
Kenji Sagae and Alon Lavie. 2006a. A best-first
probabilistic shift-reduce parser. In Proceedings of
COLING/ACL poster session, pages 691–698, Sydney,
Australia, July.
Kenji Sagae and Alon Lavie. 2006b. Parser combination
by reparsing. In Proceedings of HLT/NAACL, Com-
panion Volume: Short Papers, pages 129–132, New
York, USA.
Mark Steedman. 2000. The Syntactic Process. The MIT
Press, Cambridge, Mass.
David Weir. 1988. Characterizing Mildly Context-
Sensitive Grammar Formalisms. Ph.D. thesis, Univer-
sity of Pennsylviania.
Michael White and Rajakrishnan Rajkumar. 2009. Per-
ceptron reranking for CCG realization. In Proceedings
of the 2009 Conference on Empirical Methods in Nat-
ural Language Processing, pages 410–419, Singapore.
H Yamada and Y Matsumoto. 2003. Statistical depen-
dency analysis using support vector machines. In Pro-
ceedings ofIWPT, Nancy, France.
Yue Zhang and Stephen Clark. 2008. A tale of
two parsers: investigating and combining graph-based
and transition-based dependency parsing using beam-
search. In Proceedings ofEMNLP-08, Hawaii, USA.
Yue Zhang and Stephen Clark. 2009. Transition-based
parsing of the Chinese Treebank using a global dis-
criminative model. In Proceedings of IWPT, Paris,
France, October.
Yi Zhang, Valia Kordoni, and Erin Fitzgerald. 2007. Par-
tial parse selection for robust deep processing. In Pro-
ceedings of the ACL 2007 Workshop on Deep Linguis-
tic Processing, Prague, Czech Republic.
</reference>
<page confidence="0.997891">
692
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.902752">
<title confidence="0.999603">Shift-Reduce CCG Parsing</title>
<author confidence="0.999316">Yue Zhang Stephen Clark</author>
<affiliation confidence="0.999895">University of Cambridge University of Cambridge Computer Laboratory Computer Laboratory</affiliation>
<email confidence="0.911192">yue.zhang@cl.cam.ac.ukstephen.clark@cl.cam.ac.uk</email>
<abstract confidence="0.999576684210526">are directly compatible with binarybranching bottom-up parsing algorithms, in shift-reduce algorithms. While the chart-based approach has been the approach for the shift-reduce method has been little explored. In this paper, develop a shift-reduce using a discriminative model and beam search, and compare its strengths and weaknesses with the chart-based C&amp;C parser. We study different errors made by the two parsers, and show that the shift-reduce parser gives competitive accuracies compared to C&amp;C. Considering our use of a small beam, and given the high ambiguity levels in an automatically-extracted gramand the amount of information in the lexical categories which form the shift actions, this is a surprising result.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>parsing</author>
</authors>
<date></date>
<booktitle>In Proceedings of the 2009 EMNLP Conference,</booktitle>
<pages>1222--1231</pages>
<marker>parsing, </marker>
<rawString>parsing. In Proceedings of the 2009 EMNLP Conference, pages 1222–1231, Singapore.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Johansson</author>
<author>Pierre Nugues</author>
</authors>
<title>Incremental dependency parsing using online learning.</title>
<date>2007</date>
<booktitle>In Proceedings of the CoNLL/EMNLP Conference,</booktitle>
<pages>1134--1138</pages>
<location>Prague, Czech Republic.</location>
<contexts>
<context position="12336" citStr="Johansson and Nugues, 2007" startWordPosition="1988" endWordPosition="1991">o the Viterbi algorithm. For the shift-reduce parser the choice is also left to the parsing model, but in contrast to C&amp;C the correct lexical category could be lost at any point in the heuristic search process. Hence it is perhaps surprising that we are able to achieve a high parsing accuracy of 85.5%, given a relatively small beam size. 4 Decoding Greedy local search (Yamada and Matsumoto, 2003; Sagae and Lavie, 2005; Nivre and Scholz, 2004) has typically been used for decoding in shift-reduce parsers, while beam-search has recently been applied as an alternative to reduce error-propagation (Johansson and Nugues, 2007; Zhang and Clark, 2008; Zhang and Clark, 2009; Huang et al., 2009). Both greedy local search and beam-search have linear time complexity. We use beam-search in our CCG parser. To formulate the decoding algorithm, we define a candidate item as a tuple (5, Q, F), where 5 represents the stack with partial derivations that have been built, Q represents the queue of incoming words that have not been processed, and F is a boolean value that represents whether the candidate item has been finished. A candidate item is finished if and only if the FINISH action has been applied to it, and no more actio</context>
</contexts>
<marker>Johansson, Nugues, 2007</marker>
<rawString>Richard Johansson and Pierre Nugues. 2007. Incremental dependency parsing using online learning. In Proceedings of the CoNLL/EMNLP Conference, pages 1134–1138, Prague, Czech Republic.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Takuya Matsuzaki</author>
<author>Yusuke Miyao</author>
<author>Jun ichi Tsujii</author>
</authors>
<title>Efficient HPSG parsing with supertagging and CFG-filtering.</title>
<date>2007</date>
<booktitle>In Proceedings ofIJCAI-07,</booktitle>
<pages>1671--1676</pages>
<location>Hyderabad, India.</location>
<contexts>
<context position="29051" citStr="Matsuzaki et al. (2007)" startWordPosition="4730" endWordPosition="4733">ntation differences (C&amp;C uses heavily engineered C++ with a focus on efficiency). 7 Related Work Sagae and Lavie (2006a) describes a shift-reduce parser for the Penn Treebank parsing task which uses best-first search to allow some ambiguity into the parsing process. Differences with our approach are that we use a beam, rather than best-first, search; we use a global model rather than local models chained together; and finally, our results surpass the best published results on the CCG parsing task, whereas Sagae and Lavie (2006a) matched the best PTB results only by using a parser combination. Matsuzaki et al. (2007) describes similar work to ours but using an automatically-extracted HPSG, rather than CCG, grammar. They also use the generalised perceptron to train a disambiguation model. One difference is that Matsuzaki et al. (2007) use an approximating CFG, in addition to the supertagger, to improve the efficiency of the parser. 690 Ninomiya et al. (2009) (and Ninomiya et al. Acknowledgements (2010)) describe a greedy shift-reduce parser for We thank the anonymous reviewers for their suggesHPSG, in which a single action is chosen at each tions. Yue Zhang and Stephen Clark are supported parsing step, all</context>
</contexts>
<marker>Matsuzaki, Miyao, Tsujii, 2007</marker>
<rawString>Takuya Matsuzaki, Yusuke Miyao, and Jun ichi Tsujii. 2007. Efficient HPSG parsing with supertagging and CFG-filtering. In Proceedings ofIJCAI-07, pages 1671–1676, Hyderabad, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryan McDonald</author>
<author>Joakim Nivre</author>
</authors>
<title>Characterizing the errors of data-driven dependency parsing models.</title>
<date>2007</date>
<booktitle>In Proceedings of EMNLP/CoNLL,</booktitle>
<pages>122--131</pages>
<location>Prague, Czech Republic.</location>
<contexts>
<context position="23179" citStr="McDonald and Nivre (2007)" startWordPosition="3763" endWordPosition="3766">st data. Precision comparison by dependency length 0 5 10 15 20 25 30 dependency length (bins of 5) Recall comparison by dependency length 0 5 10 15 20 25 30 dependency length (bins of 5) Figure 4: P &amp; R scores relative to dependency length. 6.2 Error comparison with C&amp;C parser Our shift-reduce parser and the chart-based C&amp;C parser offer two different solutions to the CCG parsing problem. The comparison reported in this section is similar to the comparison between the chartbased MSTParser (McDonald et al., 2005) and shiftreduce MaltParser (Nivre et al., 2006) for dependency parsing. We follow McDonald and Nivre (2007) and characterize the errors of the two parsers by sentence and dependency length and dependency type. We measured precision, recall and F-score relative to different sentence lengths. Both parsers performed better on shorter sentences, as expected. Our shift-reduce parser performed consistently better than C&amp;C on all sentence lengths, and there was no significant difference in the rate of performance degradation between the parsers as the sentence length increased. Figure 4 shows the comparison of labeled precision and recall relative to the dependency length (i.e. the number of words between</context>
</contexts>
<marker>McDonald, Nivre, 2007</marker>
<rawString>Ryan McDonald and Joakim Nivre. 2007. Characterizing the errors of data-driven dependency parsing models. In Proceedings of EMNLP/CoNLL, pages 122– 131, Prague, Czech Republic.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryan McDonald</author>
<author>Koby Crammer</author>
<author>Fernando Pereira</author>
</authors>
<title>Online large-margin training of dependency parsers.</title>
<date>2005</date>
<booktitle>In Proceedings of the 43rd Meeting of the ACL,</booktitle>
<pages>91--98</pages>
<location>Michigan, Ann Arbor.</location>
<contexts>
<context position="23071" citStr="McDonald et al., 2005" startWordPosition="3745" endWordPosition="3748">.06% (C&amp;C coverage) 99.06% (C&amp;C coverage) 99.06% (C&amp;C coverage) Table 2: Accuracies on the development test data. Precision comparison by dependency length 0 5 10 15 20 25 30 dependency length (bins of 5) Recall comparison by dependency length 0 5 10 15 20 25 30 dependency length (bins of 5) Figure 4: P &amp; R scores relative to dependency length. 6.2 Error comparison with C&amp;C parser Our shift-reduce parser and the chart-based C&amp;C parser offer two different solutions to the CCG parsing problem. The comparison reported in this section is similar to the comparison between the chartbased MSTParser (McDonald et al., 2005) and shiftreduce MaltParser (Nivre et al., 2006) for dependency parsing. We follow McDonald and Nivre (2007) and characterize the errors of the two parsers by sentence and dependency length and dependency type. We measured precision, recall and F-score relative to different sentence lengths. Both parsers performed better on shorter sentences, as expected. Our shift-reduce parser performed consistently better than C&amp;C on all sentence lengths, and there was no significant difference in the rate of performance degradation between the parsers as the sentence length increased. Figure 4 shows the co</context>
<context position="30500" citStr="McDonald et al., 2005" startWordPosition="4960" endWordPosition="4963">il- no. 247762. ity arises that a spanning analysis cannot be found References for some sentences. Our approach to this problem A. E. Ades and M. Steedman. 1982. On the order of was to allow the parser to return a fragmentary anal- words. Linguistics and Philosophy, pages 517 – 558. ysis; Ninomiya et al. (2009) adopt a different ap- Johan Bos, Stephen Clark, Mark Steedman, James R. proach based on default unification. Curran, and Julia Hockenmaier. 2004. Wide-coverage Finally, our work is similar to the comparison of semantic representations from a CCG parser. In Prothe chart-based MSTParser (McDonald et al., 2005) ceedings of COLING-04, pages 1240–1246, Geneva, and shift-reduce MaltParser (Nivre et al., 2006) for Switzerland. dependency parsing. MSTParser can perform ex- Stephen Clark and James R. Curran. 2007. Widehaustive search, given certain feature restrictions, coverage efficient statistical parsing with CCG and because the complexity of the parsing task is lower log-linear models. Computational Linguistics, than for constituent parsing. C&amp;C can perform ex- 33(4):493–552. haustive search because the supertagger has already Stephen Clark and James R. Curran. 2009. Comparing reduced the search spac</context>
</contexts>
<marker>McDonald, Crammer, Pereira, 2005</marker>
<rawString>Ryan McDonald, Koby Crammer, and Fernando Pereira. 2005. Online large-margin training of dependency parsers. In Proceedings of the 43rd Meeting of the ACL, pages 91–98, Michigan, Ann Arbor.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yusuke Miyao</author>
<author>Jun’ichi Tsujii</author>
</authors>
<title>Probabilistic disambiguation models for wide-coverage HPSG parsing.</title>
<date>2005</date>
<booktitle>In Proceedings of the 43rd meeting of the ACL,</booktitle>
<pages>83--90</pages>
<institution>University of Michigan,</institution>
<location>Ann Arbor.</location>
<contexts>
<context position="2872" citStr="Miyao and Tsujii, 2005" startWordPosition="437" endWordPosition="440"> of Yamada and Matsumoto (2003) and Nivre and Scholz (2004). One advantage of shift-reduce parsers is that the scoring model can be defined over actions, allowing highly efficient parsing by using a greedy algorithm in which the highest scoring action (or a small number of possible actions) is taken at each step. In addition, high accuracy can be maintained by using a model which utilises a rich set of features for making each local decision (Nivre et al., 2006). Following recent work applying global discriminative models to large-scale structured prediction problems (Collins and Roark, 2004; Miyao and Tsujii, 2005; Clark and Curran, 2007; Finkel et al., 2008), we build our shift-reduce parser using a global linear model, and compare it with the chartbased C&amp;C parser. Using standard development and test sets from CCGbank, our shift-reduce parser gives a labeled F-measure of 85.53%, which is competitive with the 85.45% F-measure of the C&amp;C parser on recovery of predicate-argument dependencies from CCGbank. Hence our work shows that Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 683–692, Portland, Oregon, June 19-24, 2011. c�2011 Association for Computationa</context>
</contexts>
<marker>Miyao, Tsujii, 2005</marker>
<rawString>Yusuke Miyao and Jun’ichi Tsujii. 2005. Probabilistic disambiguation models for wide-coverage HPSG parsing. In Proceedings of the 43rd meeting of the ACL, pages 83–90, University of Michigan, Ann Arbor.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Takashi Ninomiya</author>
<author>Takuya Matsuzaki</author>
<author>Nobuyuki Shimizu</author>
<author>Hiroshi Nakagawa</author>
</authors>
<title>Deterministic shift-reduce parsing for unification-based grammars by using default unification.</title>
<date>2009</date>
<booktitle>In Proceedings of EACL-09,</booktitle>
<pages>603--611</pages>
<location>Athens, Greece.</location>
<contexts>
<context position="29398" citStr="Ninomiya et al. (2009)" startWordPosition="4785" endWordPosition="4788">rch; we use a global model rather than local models chained together; and finally, our results surpass the best published results on the CCG parsing task, whereas Sagae and Lavie (2006a) matched the best PTB results only by using a parser combination. Matsuzaki et al. (2007) describes similar work to ours but using an automatically-extracted HPSG, rather than CCG, grammar. They also use the generalised perceptron to train a disambiguation model. One difference is that Matsuzaki et al. (2007) use an approximating CFG, in addition to the supertagger, to improve the efficiency of the parser. 690 Ninomiya et al. (2009) (and Ninomiya et al. Acknowledgements (2010)) describe a greedy shift-reduce parser for We thank the anonymous reviewers for their suggesHPSG, in which a single action is chosen at each tions. Yue Zhang and Stephen Clark are supported parsing step, allowing the possibility of highly ef- by the European Union Seventh Framework Proficient parsing. Since the HPSG grammar has rela- gramme (FP7-ICT-2009-4) under grant agreement tively tight constraints, similar to CCG, the possibil- no. 247762. ity arises that a spanning analysis cannot be found References for some sentences. Our approach to this </context>
</contexts>
<marker>Ninomiya, Matsuzaki, Shimizu, Nakagawa, 2009</marker>
<rawString>Takashi Ninomiya, Takuya Matsuzaki, Nobuyuki Shimizu, and Hiroshi Nakagawa. 2009. Deterministic shift-reduce parsing for unification-based grammars by using default unification. In Proceedings of EACL-09, pages 603–611, Athens, Greece.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Takashi Ninomiya</author>
<author>Takuya Matsuzaki</author>
<author>Nobuyuki Shimizu</author>
<author>Hiroshi Nakagawa</author>
</authors>
<title>Deterministic shift-reduce parsing for unification-based grammars.</title>
<date>2010</date>
<journal>Journal ofNatural Language Engineering,</journal>
<pages>10--1017</pages>
<marker>Ninomiya, Matsuzaki, Shimizu, Nakagawa, 2010</marker>
<rawString>Takashi Ninomiya, Takuya Matsuzaki, Nobuyuki Shimizu, and Hiroshi Nakagawa. 2010. Deterministic shift-reduce parsing for unification-based grammars. Journal ofNatural Language Engineering, DOI:10.1017/S1351324910000240.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Nivre</author>
<author>M Scholz</author>
</authors>
<title>Deterministic dependency parsing of English text.</title>
<date>2004</date>
<booktitle>In Proceedings of COLING04,</booktitle>
<pages>64--70</pages>
<location>Geneva, Switzerland.</location>
<contexts>
<context position="2309" citStr="Nivre and Scholz (2004)" startWordPosition="346" endWordPosition="349">), and unbounded dependencies (Rimell et al., 2009). The binary branching nature of CCG means that it is naturally compatible with bottom-up parsing algorithms such as shift-reduce and CKY (Ades and Steedman, 1982; Steedman, 2000). However, the parsing work by Clark and Curran (2007), and also Hockenmaier (2003) and Fowler and Penn (2010), has only considered chart-parsing. In this paper we fill a gap in the CCG literature by developing a shiftreduce parser for CCG. Shift-reduce parsers have become popular for dependency parsing, building on the initial work of Yamada and Matsumoto (2003) and Nivre and Scholz (2004). One advantage of shift-reduce parsers is that the scoring model can be defined over actions, allowing highly efficient parsing by using a greedy algorithm in which the highest scoring action (or a small number of possible actions) is taken at each step. In addition, high accuracy can be maintained by using a model which utilises a rich set of features for making each local decision (Nivre et al., 2006). Following recent work applying global discriminative models to large-scale structured prediction problems (Collins and Roark, 2004; Miyao and Tsujii, 2005; Clark and Curran, 2007; Finkel et a</context>
<context position="12156" citStr="Nivre and Scholz, 2004" startWordPosition="1962" endWordPosition="1965">r solves this problem by building the complete packed chart consistent with the lexical categories supplied by the supertagger, leaving the selection of the lexical categories to the Viterbi algorithm. For the shift-reduce parser the choice is also left to the parsing model, but in contrast to C&amp;C the correct lexical category could be lost at any point in the heuristic search process. Hence it is perhaps surprising that we are able to achieve a high parsing accuracy of 85.5%, given a relatively small beam size. 4 Decoding Greedy local search (Yamada and Matsumoto, 2003; Sagae and Lavie, 2005; Nivre and Scholz, 2004) has typically been used for decoding in shift-reduce parsers, while beam-search has recently been applied as an alternative to reduce error-propagation (Johansson and Nugues, 2007; Zhang and Clark, 2008; Zhang and Clark, 2009; Huang et al., 2009). Both greedy local search and beam-search have linear time complexity. We use beam-search in our CCG parser. To formulate the decoding algorithm, we define a candidate item as a tuple (5, Q, F), where 5 represents the stack with partial derivations that have been built, Q represents the queue of incoming words that have not been processed, and F is a</context>
</contexts>
<marker>Nivre, Scholz, 2004</marker>
<rawString>J. Nivre and M. Scholz. 2004. Deterministic dependency parsing of English text. In Proceedings of COLING04, pages 64–70, Geneva, Switzerland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
<author>G¨uls¸en Eryiˇgit</author>
<author>Svetoslav Marinov</author>
</authors>
<title>Labeled pseudoprojective dependency parsing with support vector machines.</title>
<date>2006</date>
<booktitle>In Proceedings of CoNLL,</booktitle>
<pages>221--225</pages>
<location>New York, USA.</location>
<marker>Nivre, Hall, Nilsson, Eryiˇgit, Marinov, 2006</marker>
<rawString>Joakim Nivre, Johan Hall, Jens Nilsson, G¨uls¸en Eryiˇgit, and Svetoslav Marinov. 2006. Labeled pseudoprojective dependency parsing with support vector machines. In Proceedings of CoNLL, pages 221–225, New York, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Slav Petrov</author>
<author>Dan Klein</author>
</authors>
<title>Improved inference for unlexicalized parsing.</title>
<date>2007</date>
<booktitle>In Proceedings of HLT/NAACL,</booktitle>
<pages>404--411</pages>
<location>Rochester, New York,</location>
<contexts>
<context position="27601" citStr="Petrov and Klein (2007)" startWordPosition="4497" endWordPosition="4500">F&amp;P (Petrov I-5)* 86.29% 85.73% 86.01% – – – (F&amp;P n C&amp;C coverage; 96.65% on dev. test) C&amp;C hybrid* 86.46% 85.11% 85.78% – – – (F&amp;P n C&amp;C coverage; 96.65% on dev. test) Table 4: Comparison with C&amp;C; final test. * – not directly comparable. parsers on the sentences for which C&amp;C produces an analysis, our parser still gave the highest accuracies. The shift-reduce parser gave higher precision, and lower recall, than C&amp;C; it also gave higher sentencelevel and lexical category accuracy. The last two rows in the table show the accuracies of Fowler and Penn (2010) (F&amp;P), who applied the CFG parser of Petrov and Klein (2007) to CCG, and the corresponding accuracies for the C&amp;C parser on the same test sentences. F&amp;P can be treated as another chart-based parser; their evaluation is based on the sentences for which both their parser and C&amp;C produced dependencies (or more specifically those sentences for which generate could produce dependencies), and is not directly comparable with ours, especially considering that their test set is smaller and potentially slightly easier. The final comparison is parser speed. The shiftreduce parser is linear-time (in both sentence length and beam size), and can analyse over 10 sent</context>
</contexts>
<marker>Petrov, Klein, 2007</marker>
<rawString>Slav Petrov and Dan Klein. 2007. Improved inference for unlexicalized parsing. In Proceedings of HLT/NAACL, pages 404–411, Rochester, New York, April.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan Riezler</author>
<author>Tracy H King</author>
<author>Ronald M Kaplan</author>
<author>Richard Crouch</author>
<author>John T Maxwell</author>
<author>Mark Johnson</author>
</authors>
<title>Parsing the Wall Street Journal using a Lexical-Functional Grammar and discriminative estimation techniques.</title>
<date>2002</date>
<booktitle>In Proceedings of the 40th Meeting of the ACL,</booktitle>
<pages>271--278</pages>
<location>Philadelphia, PA.</location>
<contexts>
<context position="7759" citStr="Riezler et al. (2002)" startWordPosition="1214" endWordPosition="1217">ethod used by Hockenmaier (2003) and Here we provide only a short description. is the method we adopt in this paper. During CCG parsing, adjacent categories are com- Fowler and Penn (2010) demonstrate that the secbined using CCG’s combinatory rules. For example, ond extraction method results in a context-free apa verb phrase in English (S\NP) can combine with proximation to the grammar resulting from the first 2Although the C&amp;C default mode applies a restriction for efficiency reasons in which only rule instances seen in CCGbank can be applied, making the grammar of the second type. 1See e.g. Riezler et al. (2002) and Zhang et al. (2007) for chartbased parsers which can produce fragmentary analyses. 684 method, which has the potential to produce a mildlycontext sensitive grammar (given the existence of certain combinatory rules) (Weir, 1988). However, it is important to note that the advantages of CCG, in particular the tight relationship between syntax and semantic interpretation, are still maintained with the second approach, as Fowler and Penn (2010) argue. 3 The Shift-reduce CCG Parser Given an input sentence, our parser uses a stack of partial derivations, a queue of incoming words, and a series o</context>
</contexts>
<marker>Riezler, King, Kaplan, Crouch, Maxwell, Johnson, 2002</marker>
<rawString>Stefan Riezler, Tracy H. King, Ronald M. Kaplan, Richard Crouch, John T. Maxwell III, and Mark Johnson. 2002. Parsing the Wall Street Journal using a Lexical-Functional Grammar and discriminative estimation techniques. In Proceedings of the 40th Meeting of the ACL, pages 271–278, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Rimell</author>
<author>Stephen Clark</author>
<author>Mark Steedman</author>
</authors>
<title>Unbounded dependency recovery for parser evaluation.</title>
<date>2009</date>
<booktitle>In Proceedings of EMNLP-09,</booktitle>
<pages>813--821</pages>
<contexts>
<context position="1737" citStr="Rimell et al., 2009" startWordPosition="252" endWordPosition="255">ied to a range of problems in NLP, including treebank creation (Hockenmaier and Steedman, 2007), syntactic parsing (Hockenmaier, 2003; Clark and Curran, 2007), logical form construction (Bos et al., 2004) and surface realization (White and Rajkumar, 2009). From a parsing perspective, the C&amp;C parser (Clark and Curran, 2007) has been shown to be competitive with state-of-theart statistical parsers on a variety of test suites, including those consisting of grammatical relations (Clark and Curran, 2007), Penn Treebank phrase683 structure trees (Clark and Curran, 2009), and unbounded dependencies (Rimell et al., 2009). The binary branching nature of CCG means that it is naturally compatible with bottom-up parsing algorithms such as shift-reduce and CKY (Ades and Steedman, 1982; Steedman, 2000). However, the parsing work by Clark and Curran (2007), and also Hockenmaier (2003) and Fowler and Penn (2010), has only considered chart-parsing. In this paper we fill a gap in the CCG literature by developing a shiftreduce parser for CCG. Shift-reduce parsers have become popular for dependency parsing, building on the initial work of Yamada and Matsumoto (2003) and Nivre and Scholz (2004). One advantage of shift-red</context>
</contexts>
<marker>Rimell, Clark, Steedman, 2009</marker>
<rawString>Laura Rimell, Stephen Clark, and Mark Steedman. 2009. Unbounded dependency recovery for parser evaluation. In Proceedings of EMNLP-09, pages 813–821, Singapore.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenji Sagae</author>
<author>Alon Lavie</author>
</authors>
<title>A classifier-based parser with linear run-time complexity.</title>
<date>2005</date>
<booktitle>In Proceedings ofIWPT,</booktitle>
<pages>125--132</pages>
<location>Vancouver, Canada.</location>
<contexts>
<context position="12131" citStr="Sagae and Lavie, 2005" startWordPosition="1958" endWordPosition="1961">ng model. The C&amp;C parser solves this problem by building the complete packed chart consistent with the lexical categories supplied by the supertagger, leaving the selection of the lexical categories to the Viterbi algorithm. For the shift-reduce parser the choice is also left to the parsing model, but in contrast to C&amp;C the correct lexical category could be lost at any point in the heuristic search process. Hence it is perhaps surprising that we are able to achieve a high parsing accuracy of 85.5%, given a relatively small beam size. 4 Decoding Greedy local search (Yamada and Matsumoto, 2003; Sagae and Lavie, 2005; Nivre and Scholz, 2004) has typically been used for decoding in shift-reduce parsers, while beam-search has recently been applied as an alternative to reduce error-propagation (Johansson and Nugues, 2007; Zhang and Clark, 2008; Zhang and Clark, 2009; Huang et al., 2009). Both greedy local search and beam-search have linear time complexity. We use beam-search in our CCG parser. To formulate the decoding algorithm, we define a candidate item as a tuple (5, Q, F), where 5 represents the stack with partial derivations that have been built, Q represents the queue of incoming words that have not b</context>
</contexts>
<marker>Sagae, Lavie, 2005</marker>
<rawString>Kenji Sagae and Alon Lavie. 2005. A classifier-based parser with linear run-time complexity. In Proceedings ofIWPT, pages 125–132, Vancouver, Canada.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenji Sagae</author>
<author>Alon Lavie</author>
</authors>
<title>A best-first probabilistic shift-reduce parser.</title>
<date>2006</date>
<booktitle>In Proceedings of COLING/ACL poster session,</booktitle>
<pages>691--698</pages>
<location>Sydney, Australia,</location>
<contexts>
<context position="11185" citStr="Sagae and Lavie, 2006" startWordPosition="1799" endWordPosition="1802">n the CCG grammar, which is applied to the category on top of the stack. The FINISH action terminates the parsing process; it can be applied when all input words have been shifted onto the stack. Note that the FINISH action can be applied when the stack contains more than one node, in which case the parser produces a set of partial derivation trees, each corresponding to a node on the stack. This sometimes happens when a full derivation tree cannot be built due to supertagging errors, and provides a graceful solution to the problem of producing high-quality fragmentary parses when necessary. (Sagae and Lavie, 2006b) parsing is that, for CCG, there are many more shift actions – a shift action for each word-lexical category pair. Given the amount of syntactic information in the lexical categories, the choice of correct category, from those supplied by the supertagger, is often a difficult one, and often a choice best left to the parsing model. The C&amp;C parser solves this problem by building the complete packed chart consistent with the lexical categories supplied by the supertagger, leaving the selection of the lexical categories to the Viterbi algorithm. For the shift-reduce parser the choice is also lef</context>
<context position="28546" citStr="Sagae and Lavie (2006" startWordPosition="4649" endWordPosition="4652">, and is not directly comparable with ours, especially considering that their test set is smaller and potentially slightly easier. The final comparison is parser speed. The shiftreduce parser is linear-time (in both sentence length and beam size), and can analyse over 10 sentences per second on a 2GHz CPU, with a beam of 16, which compares very well with other constituency parsers. However, this is no faster than the chartbased C&amp;C parser, although speed comparisons are difficult because of implementation differences (C&amp;C uses heavily engineered C++ with a focus on efficiency). 7 Related Work Sagae and Lavie (2006a) describes a shift-reduce parser for the Penn Treebank parsing task which uses best-first search to allow some ambiguity into the parsing process. Differences with our approach are that we use a beam, rather than best-first, search; we use a global model rather than local models chained together; and finally, our results surpass the best published results on the CCG parsing task, whereas Sagae and Lavie (2006a) matched the best PTB results only by using a parser combination. Matsuzaki et al. (2007) describes similar work to ours but using an automatically-extracted HPSG, rather than CCG, gra</context>
</contexts>
<marker>Sagae, Lavie, 2006</marker>
<rawString>Kenji Sagae and Alon Lavie. 2006a. A best-first probabilistic shift-reduce parser. In Proceedings of COLING/ACL poster session, pages 691–698, Sydney, Australia, July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kenji Sagae</author>
<author>Alon Lavie</author>
</authors>
<title>Parser combination by reparsing.</title>
<date>2006</date>
<booktitle>In Proceedings of HLT/NAACL, Companion Volume: Short Papers,</booktitle>
<pages>129--132</pages>
<location>New York, USA.</location>
<contexts>
<context position="11185" citStr="Sagae and Lavie, 2006" startWordPosition="1799" endWordPosition="1802">n the CCG grammar, which is applied to the category on top of the stack. The FINISH action terminates the parsing process; it can be applied when all input words have been shifted onto the stack. Note that the FINISH action can be applied when the stack contains more than one node, in which case the parser produces a set of partial derivation trees, each corresponding to a node on the stack. This sometimes happens when a full derivation tree cannot be built due to supertagging errors, and provides a graceful solution to the problem of producing high-quality fragmentary parses when necessary. (Sagae and Lavie, 2006b) parsing is that, for CCG, there are many more shift actions – a shift action for each word-lexical category pair. Given the amount of syntactic information in the lexical categories, the choice of correct category, from those supplied by the supertagger, is often a difficult one, and often a choice best left to the parsing model. The C&amp;C parser solves this problem by building the complete packed chart consistent with the lexical categories supplied by the supertagger, leaving the selection of the lexical categories to the Viterbi algorithm. For the shift-reduce parser the choice is also lef</context>
<context position="28546" citStr="Sagae and Lavie (2006" startWordPosition="4649" endWordPosition="4652">, and is not directly comparable with ours, especially considering that their test set is smaller and potentially slightly easier. The final comparison is parser speed. The shiftreduce parser is linear-time (in both sentence length and beam size), and can analyse over 10 sentences per second on a 2GHz CPU, with a beam of 16, which compares very well with other constituency parsers. However, this is no faster than the chartbased C&amp;C parser, although speed comparisons are difficult because of implementation differences (C&amp;C uses heavily engineered C++ with a focus on efficiency). 7 Related Work Sagae and Lavie (2006a) describes a shift-reduce parser for the Penn Treebank parsing task which uses best-first search to allow some ambiguity into the parsing process. Differences with our approach are that we use a beam, rather than best-first, search; we use a global model rather than local models chained together; and finally, our results surpass the best published results on the CCG parsing task, whereas Sagae and Lavie (2006a) matched the best PTB results only by using a parser combination. Matsuzaki et al. (2007) describes similar work to ours but using an automatically-extracted HPSG, rather than CCG, gra</context>
</contexts>
<marker>Sagae, Lavie, 2006</marker>
<rawString>Kenji Sagae and Alon Lavie. 2006b. Parser combination by reparsing. In Proceedings of HLT/NAACL, Companion Volume: Short Papers, pages 129–132, New York, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Steedman</author>
</authors>
<title>The Syntactic Process.</title>
<date>2000</date>
<publisher>The MIT Press,</publisher>
<location>Cambridge, Mass.</location>
<contexts>
<context position="1048" citStr="Steedman (2000)" startWordPosition="148" endWordPosition="149"> explored. In this paper, we develop a shift-reduce CCG parser using a discriminative model and beam search, and compare its strengths and weaknesses with the chart-based C&amp;C parser. We study different errors made by the two parsers, and show that the shift-reduce parser gives competitive accuracies compared to C&amp;C. Considering our use of a small beam, and given the high ambiguity levels in an automatically-extracted grammar and the amount of information in the CCG lexical categories which form the shift actions, this is a surprising result. 1 Introduction Combinatory Categorial Grammar (CCG; Steedman (2000)) is a lexicalised theory of grammar which has been successfully applied to a range of problems in NLP, including treebank creation (Hockenmaier and Steedman, 2007), syntactic parsing (Hockenmaier, 2003; Clark and Curran, 2007), logical form construction (Bos et al., 2004) and surface realization (White and Rajkumar, 2009). From a parsing perspective, the C&amp;C parser (Clark and Curran, 2007) has been shown to be competitive with state-of-theart statistical parsers on a variety of test suites, including those consisting of grammatical relations (Clark and Curran, 2007), Penn Treebank phrase683 s</context>
</contexts>
<marker>Steedman, 2000</marker>
<rawString>Mark Steedman. 2000. The Syntactic Process. The MIT Press, Cambridge, Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Weir</author>
</authors>
<title>Characterizing Mildly ContextSensitive Grammar Formalisms.</title>
<date>1988</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Pennsylviania.</institution>
<contexts>
<context position="7991" citStr="Weir, 1988" startWordPosition="1252" endWordPosition="1253"> rules. For example, ond extraction method results in a context-free apa verb phrase in English (S\NP) can combine with proximation to the grammar resulting from the first 2Although the C&amp;C default mode applies a restriction for efficiency reasons in which only rule instances seen in CCGbank can be applied, making the grammar of the second type. 1See e.g. Riezler et al. (2002) and Zhang et al. (2007) for chartbased parsers which can produce fragmentary analyses. 684 method, which has the potential to produce a mildlycontext sensitive grammar (given the existence of certain combinatory rules) (Weir, 1988). However, it is important to note that the advantages of CCG, in particular the tight relationship between syntax and semantic interpretation, are still maintained with the second approach, as Fowler and Penn (2010) argue. 3 The Shift-reduce CCG Parser Given an input sentence, our parser uses a stack of partial derivations, a queue of incoming words, and a series of actions—derived from the rule instances in CCGbank—to build a derivation tree. Following Clark and Curran (2007), we assume that each input word has been assigned a POS-tag (from the Penn Treebank tagset) and a set of CCG lexical </context>
</contexts>
<marker>Weir, 1988</marker>
<rawString>David Weir. 1988. Characterizing Mildly ContextSensitive Grammar Formalisms. Ph.D. thesis, University of Pennsylviania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael White</author>
<author>Rajakrishnan Rajkumar</author>
</authors>
<title>Perceptron reranking for CCG realization.</title>
<date>2009</date>
<booktitle>In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>410--419</pages>
<contexts>
<context position="1372" citStr="White and Rajkumar, 2009" startWordPosition="194" endWordPosition="197">&amp;C. Considering our use of a small beam, and given the high ambiguity levels in an automatically-extracted grammar and the amount of information in the CCG lexical categories which form the shift actions, this is a surprising result. 1 Introduction Combinatory Categorial Grammar (CCG; Steedman (2000)) is a lexicalised theory of grammar which has been successfully applied to a range of problems in NLP, including treebank creation (Hockenmaier and Steedman, 2007), syntactic parsing (Hockenmaier, 2003; Clark and Curran, 2007), logical form construction (Bos et al., 2004) and surface realization (White and Rajkumar, 2009). From a parsing perspective, the C&amp;C parser (Clark and Curran, 2007) has been shown to be competitive with state-of-theart statistical parsers on a variety of test suites, including those consisting of grammatical relations (Clark and Curran, 2007), Penn Treebank phrase683 structure trees (Clark and Curran, 2009), and unbounded dependencies (Rimell et al., 2009). The binary branching nature of CCG means that it is naturally compatible with bottom-up parsing algorithms such as shift-reduce and CKY (Ades and Steedman, 1982; Steedman, 2000). However, the parsing work by Clark and Curran (2007), </context>
</contexts>
<marker>White, Rajkumar, 2009</marker>
<rawString>Michael White and Rajakrishnan Rajkumar. 2009. Perceptron reranking for CCG realization. In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 410–419, Singapore.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Yamada</author>
<author>Y Matsumoto</author>
</authors>
<title>Statistical dependency analysis using support vector machines.</title>
<date>2003</date>
<booktitle>In Proceedings ofIWPT,</booktitle>
<location>Nancy, France.</location>
<contexts>
<context position="2281" citStr="Yamada and Matsumoto (2003)" startWordPosition="340" endWordPosition="344">re trees (Clark and Curran, 2009), and unbounded dependencies (Rimell et al., 2009). The binary branching nature of CCG means that it is naturally compatible with bottom-up parsing algorithms such as shift-reduce and CKY (Ades and Steedman, 1982; Steedman, 2000). However, the parsing work by Clark and Curran (2007), and also Hockenmaier (2003) and Fowler and Penn (2010), has only considered chart-parsing. In this paper we fill a gap in the CCG literature by developing a shiftreduce parser for CCG. Shift-reduce parsers have become popular for dependency parsing, building on the initial work of Yamada and Matsumoto (2003) and Nivre and Scholz (2004). One advantage of shift-reduce parsers is that the scoring model can be defined over actions, allowing highly efficient parsing by using a greedy algorithm in which the highest scoring action (or a small number of possible actions) is taken at each step. In addition, high accuracy can be maintained by using a model which utilises a rich set of features for making each local decision (Nivre et al., 2006). Following recent work applying global discriminative models to large-scale structured prediction problems (Collins and Roark, 2004; Miyao and Tsujii, 2005; Clark a</context>
<context position="12108" citStr="Yamada and Matsumoto, 2003" startWordPosition="1954" endWordPosition="1957">hoice best left to the parsing model. The C&amp;C parser solves this problem by building the complete packed chart consistent with the lexical categories supplied by the supertagger, leaving the selection of the lexical categories to the Viterbi algorithm. For the shift-reduce parser the choice is also left to the parsing model, but in contrast to C&amp;C the correct lexical category could be lost at any point in the heuristic search process. Hence it is perhaps surprising that we are able to achieve a high parsing accuracy of 85.5%, given a relatively small beam size. 4 Decoding Greedy local search (Yamada and Matsumoto, 2003; Sagae and Lavie, 2005; Nivre and Scholz, 2004) has typically been used for decoding in shift-reduce parsers, while beam-search has recently been applied as an alternative to reduce error-propagation (Johansson and Nugues, 2007; Zhang and Clark, 2008; Zhang and Clark, 2009; Huang et al., 2009). Both greedy local search and beam-search have linear time complexity. We use beam-search in our CCG parser. To formulate the decoding algorithm, we define a candidate item as a tuple (5, Q, F), where 5 represents the stack with partial derivations that have been built, Q represents the queue of incomin</context>
</contexts>
<marker>Yamada, Matsumoto, 2003</marker>
<rawString>H Yamada and Y Matsumoto. 2003. Statistical dependency analysis using support vector machines. In Proceedings ofIWPT, Nancy, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Zhang</author>
<author>Stephen Clark</author>
</authors>
<title>A tale of two parsers: investigating and combining graph-based and transition-based dependency parsing using beamsearch.</title>
<date>2008</date>
<booktitle>In Proceedings ofEMNLP-08,</booktitle>
<location>Hawaii, USA.</location>
<contexts>
<context position="12359" citStr="Zhang and Clark, 2008" startWordPosition="1992" endWordPosition="1995"> the shift-reduce parser the choice is also left to the parsing model, but in contrast to C&amp;C the correct lexical category could be lost at any point in the heuristic search process. Hence it is perhaps surprising that we are able to achieve a high parsing accuracy of 85.5%, given a relatively small beam size. 4 Decoding Greedy local search (Yamada and Matsumoto, 2003; Sagae and Lavie, 2005; Nivre and Scholz, 2004) has typically been used for decoding in shift-reduce parsers, while beam-search has recently been applied as an alternative to reduce error-propagation (Johansson and Nugues, 2007; Zhang and Clark, 2008; Zhang and Clark, 2009; Huang et al., 2009). Both greedy local search and beam-search have linear time complexity. We use beam-search in our CCG parser. To formulate the decoding algorithm, we define a candidate item as a tuple (5, Q, F), where 5 represents the stack with partial derivations that have been built, Q represents the queue of incoming words that have not been processed, and F is a boolean value that represents whether the candidate item has been finished. A candidate item is finished if and only if the FINISH action has been applied to it, and no more actions can be applied to a </context>
</contexts>
<marker>Zhang, Clark, 2008</marker>
<rawString>Yue Zhang and Stephen Clark. 2008. A tale of two parsers: investigating and combining graph-based and transition-based dependency parsing using beamsearch. In Proceedings ofEMNLP-08, Hawaii, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Zhang</author>
<author>Stephen Clark</author>
</authors>
<title>Transition-based parsing of the Chinese Treebank using a global discriminative model.</title>
<date>2009</date>
<booktitle>In Proceedings of IWPT,</booktitle>
<location>Paris, France,</location>
<contexts>
<context position="12382" citStr="Zhang and Clark, 2009" startWordPosition="1996" endWordPosition="1999">r the choice is also left to the parsing model, but in contrast to C&amp;C the correct lexical category could be lost at any point in the heuristic search process. Hence it is perhaps surprising that we are able to achieve a high parsing accuracy of 85.5%, given a relatively small beam size. 4 Decoding Greedy local search (Yamada and Matsumoto, 2003; Sagae and Lavie, 2005; Nivre and Scholz, 2004) has typically been used for decoding in shift-reduce parsers, while beam-search has recently been applied as an alternative to reduce error-propagation (Johansson and Nugues, 2007; Zhang and Clark, 2008; Zhang and Clark, 2009; Huang et al., 2009). Both greedy local search and beam-search have linear time complexity. We use beam-search in our CCG parser. To formulate the decoding algorithm, we define a candidate item as a tuple (5, Q, F), where 5 represents the stack with partial derivations that have been built, Q represents the queue of incoming words that have not been processed, and F is a boolean value that represents whether the candidate item has been finished. A candidate item is finished if and only if the FINISH action has been applied to it, and no more actions can be applied to a candidate item after it</context>
</contexts>
<marker>Zhang, Clark, 2009</marker>
<rawString>Yue Zhang and Stephen Clark. 2009. Transition-based parsing of the Chinese Treebank using a global discriminative model. In Proceedings of IWPT, Paris, France, October.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yi Zhang</author>
<author>Valia Kordoni</author>
<author>Erin Fitzgerald</author>
</authors>
<title>Partial parse selection for robust deep processing.</title>
<date>2007</date>
<booktitle>In Proceedings of the ACL 2007 Workshop on Deep Linguistic Processing,</booktitle>
<location>Prague, Czech Republic.</location>
<contexts>
<context position="7783" citStr="Zhang et al. (2007)" startWordPosition="1219" endWordPosition="1222">(2003) and Here we provide only a short description. is the method we adopt in this paper. During CCG parsing, adjacent categories are com- Fowler and Penn (2010) demonstrate that the secbined using CCG’s combinatory rules. For example, ond extraction method results in a context-free apa verb phrase in English (S\NP) can combine with proximation to the grammar resulting from the first 2Although the C&amp;C default mode applies a restriction for efficiency reasons in which only rule instances seen in CCGbank can be applied, making the grammar of the second type. 1See e.g. Riezler et al. (2002) and Zhang et al. (2007) for chartbased parsers which can produce fragmentary analyses. 684 method, which has the potential to produce a mildlycontext sensitive grammar (given the existence of certain combinatory rules) (Weir, 1988). However, it is important to note that the advantages of CCG, in particular the tight relationship between syntax and semantic interpretation, are still maintained with the second approach, as Fowler and Penn (2010) argue. 3 The Shift-reduce CCG Parser Given an input sentence, our parser uses a stack of partial derivations, a queue of incoming words, and a series of actions—derived from t</context>
</contexts>
<marker>Zhang, Kordoni, Fitzgerald, 2007</marker>
<rawString>Yi Zhang, Valia Kordoni, and Erin Fitzgerald. 2007. Partial parse selection for robust deep processing. In Proceedings of the ACL 2007 Workshop on Deep Linguistic Processing, Prague, Czech Republic.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>