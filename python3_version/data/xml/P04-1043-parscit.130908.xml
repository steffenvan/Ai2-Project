<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.997369">
A Study on Convolution Kernels for Shallow Semantic Parsing
</title>
<author confidence="0.997892">
Alessandro Moschitti
</author>
<affiliation confidence="0.9707015">
University of Texas at Dallas
Human Language Technology Research Institute
</affiliation>
<address confidence="0.680108">
Richardson, TX 75083-0688, USA
</address>
<email confidence="0.999162">
alessandro.moschitti@utdallas.edu
</email>
<sectionHeader confidence="0.997628" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.991062285714286">
In this paper we have designed and experi-
mented novel convolution kernels for automatic
classification of predicate arguments. Their
main property is the ability to process struc-
tured representations. Support Vector Ma-
chines (SVMs), using a combination of such ker-
nels and the flat feature kernel, classify Prop-
Bank predicate arguments with accuracy higher
than the current argument classification state-
of-the-art.
Additionally, experiments on FrameNet data
have shown that SVMs are appealing for the
classification of semantic roles even if the pro-
posed kernels do not produce any improvement.
</bodyText>
<sectionHeader confidence="0.999517" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999578878787879">
Several linguistic theories, e.g. (Jackendoff,
1990) claim that semantic information in nat-
ural language texts is connected to syntactic
structures. Hence, to deal with natural lan-
guage semantics, the learning algorithm should
be able to represent and process structured
data. The classical solution adopted for such
tasks is to convert syntax structures into flat
feature representations which are suitable for a
given learning model. The main drawback is
that structures may not be properly represented
by flat features.
In particular, these problems affect the pro-
cessing of predicate argument structures an-
notated in PropBank (Kingsbury and Palmer,
2002) or FrameNet (Fillmore, 1982). Figure
1 shows an example of a predicate annotation
in PropBank for the sentence: &amp;quot;Paul gives a
lecture in Rome&amp;quot;. A predicate may be a verb
or a noun or an adjective and most of the time
Arg 0 is the logical subject, Arg 1 is the logical
object and ArgM may indicate locations, as in
our example.
FrameNet also describes predicate/argument
structures but for this purpose it uses richer
semantic structures called frames. These lat-
ter are schematic representations of situations
involving various participants, properties and
roles in which a word may be typically used.
Frame elements or semantic roles are arguments
of predicates called target words. In FrameNet,
the argument names are local to a particular
frame.
</bodyText>
<figureCaption confidence="0.9966315">
Figure 1: A predicate argument structure in a
parse-tree representation.
</figureCaption>
<bodyText confidence="0.999237833333333">
Several machine learning approaches for argu-
ment identification and classification have been
developed (Gildea and Jurasfky, 2002; Gildea
and Palmer, 2002; Surdeanu et al., 2003; Ha-
cioglu et al., 2003). Their common characteris-
tic is the adoption of feature spaces that model
predicate-argument structures in a flat repre-
sentation. On the contrary, convolution kernels
aim to capture structural information in term
of sub-structures, providing a viable alternative
to flat features.
In this paper, we select portions of syntactic
trees, which include predicate/argument salient
sub-structures, to define convolution kernels for
the task of predicate argument classification. In
particular, our kernels aim to (a) represent the
relation between predicate and one of its argu-
ments and (b) to capture the overall argument
structure of the target predicate. Additionally,
we define novel kernels as combinations of the
above two with the polynomial kernel of stan-
dard flat features.
Experiments on Support Vector Machines us-
ing the above kernels show an improvement
</bodyText>
<figure confidence="0.99594925">
N
VP
V
Paul
PP
NP
Arg. 0
gives
Predicate
IN N
D N
Arg. 1 Arg. M
S
in
a lecture
Rome
</figure>
<bodyText confidence="0.998685615384615">
of the state-of-the-art for PropBank argument
classification. On the contrary, FrameNet se-
mantic parsing seems to not take advantage of
the structural information provided by our ker-
nels.
The remainder of this paper is organized as
follows: Section 2 defines the Predicate Argu-
ment Extraction problem and the standard so-
lution to solve it. In Section 3 we present our
kernels whereas in Section 4 we show compar-
ative results among SVMs using standard fea-
tures and the proposed kernels. Finally, Section
5 summarizes the conclusions.
</bodyText>
<sectionHeader confidence="0.969369" genericHeader="method">
2 Predicate Argument Extraction: a
standard approach
</sectionHeader>
<bodyText confidence="0.999286545454545">
Given a sentence in natural language and the
target predicates, all arguments have to be rec-
ognized. This problem can be divided into two
subtasks: (a) the detection of the argument
boundaries, i.e. all its compounding words and
(b) the classification of the argument type, e.g.
Arg0 or ArgM in PropBank or Agent and Goal
in FrameNet.
The standard approach to learn both detec-
tion and classification of predicate arguments
is summarized by the following steps:
</bodyText>
<listItem confidence="0.990534090909091">
1. Given a sentence from the training-set gene-
rate a full syntactic parse-tree;
2. let P and A be the set of predicates and
the set of parse-tree nodes (i.e. the potential
arguments), respectively;
3. for each pair &lt;p, a&gt; E P x A:
• extract the feature representation set, Fp,a;
• if the subtree rooted in a covers exactly the
words of one argument of p, put Fp,a in T+
(positive examples), otherwise put it in T −
(negative examples).
</listItem>
<bodyText confidence="0.99251945">
For example, in Figure 1, for each combina-
tion of the predicate give with the nodes N, S,
VP, V, NP, PP, D or IN the instances F”give”,a are
generated. In case the node a exactly covers
Paul, a lecture or in Rome, it will be a positive
instance otherwise it will be a negative one, e.g.
F”give”,”IN”.
To learn the argument classifiers the T + set
can be re-organized as positive T+argi and neg-
ative T−argi examples for each argument i. In
this way, an individual ONE-vs-ALL classifier
for each argument i can be trained. We adopted
this solution as it is simple and effective (Ha-
cioglu et al., 2003). In the classification phase,
given a sentence of the test-set, all its Fp ,a
are generated and classified by each individ-
argument associated with the maximum value
among the scores provided by the SVMs, i.e.
argmaxiES Ci, where S is the target set of ar-
guments.
</bodyText>
<listItem confidence="0.850064076923077">
- Phrase Type: This feature indicates the syntactic type
of the phrase labeled as a predicate argument, e.g. NP
for Arg1.
- Parse Tree Path: This feature contains the path in
the parse tree between the predicate and the argument
phrase, expressed as a sequence of nonterminal labels
linked by direction (up or down) symbols, e.g. V I VP
J NP for Arg1.
- Position: Indicates if the constituent, i.e. the potential
argument, appears before or after the predicate in the
sentence, e.g. after for Arg1 and before for Arg0.
- Voice: This feature distinguishes between active or pas-
sive voice for the predicate phrase, e.g. active for every
argument.
- Head Word: This feature contains the headword of the
evaluated phrase. Case and morphological information
are preserved, e.g. lecture for Arg1.
- Governing Category indicates if an NP is dominated by
a sentence phrase or by a verb phrase, e.g. the NP asso-
ciated with Arg1 is dominated by a VP.
ual classifier. As a final decision, we select the
- Predicate Word: This feature consists of two compo-
nents: (1) the word itself, e.g. gives for all arguments;
and (2) the lemma which represents the verb normalized
to lower case and infinitive form, e.g. give for all argu-
ments.
</listItem>
<tableCaption confidence="0.966586">
Table 1: Standard features extracted from the
parse-tree in Figure 1.
</tableCaption>
<subsectionHeader confidence="0.998537">
2.1 Standard feature space
</subsectionHeader>
<bodyText confidence="0.997139619047619">
The discovery of relevant features is, as usual, a
complex task, nevertheless, there is a common
consensus on the basic features that should be
adopted. These standard features, firstly pro-
posed in (Gildea and Jurasfky, 2002), refer to
a flat information derived from parse trees, i.e.
Phrase Type, Predicate Word, Head Word, Gov-
erning Category, Position and Voice. Table 1
presents the standard features and exemplifies
how they are extracted from the parse tree in
Figure 1.
For example, the Parse Tree Path feature rep-
resents the path in the parse-tree between a
predicate node and one of its argument nodes.
It is expressed as a sequence of nonterminal la-
bels linked by direction symbols (up or down),
e.g. in Figure 1, VTVPINP is the path between
the predicate to give and the argument 1, a lec-
ture. Two pairs &lt;p1, a1&gt; and &lt;p2, a2&gt; have
two different Path features even if the paths dif-
fer only for a node in the parse-tree. This pre-
</bodyText>
<figureCaption confidence="0.945994">
Figure 2: Structured features for Arg0, Arg1 and ArgM.
</figureCaption>
<figure confidence="0.998395529411765">
Arg. 0
D N
delivers
D N
delivers
delivers
a
jj
in
jj
in
talk
N
N
jj
a talk
in
N
a) S Fdeliver, Arg0 b) S
IN NP
Fdeliver, Arg1
c) S
a talk
Paul V
N
VP
NP
PP
Paul
N
VP
V
NP
PP
Paul
N
V
VP
NP
Fdeliver, ArgM
PP
D N IN NP
IN NP
formal
style
Arg. 1
formal
style
Arg. M
formal
style
</figure>
<bodyText confidence="0.994502">
vents the learning algorithm to generalize well
on unseen data. In order to address this prob-
lem, the next section describes a novel kernel
space for predicate argument classification.
</bodyText>
<subsectionHeader confidence="0.999725">
2.2 Support Vector Machine approach
</subsectionHeader>
<bodyText confidence="0.856550307692308">
Given a vector space in Rn and a set of posi-
tive and negative points, SVMs classify vectors
according to a separating hyperplane, H(x) =
w�x x�+ b = 0, where w� E Rn and b E Rare
learned by applying the Structural Risk Mini-
mization principle (Vapnik, 1995).
To apply the SVM algorithm to Predicate
Argument Classification, we need a function
O :F — Rn to map our features space F =
{f1, .., f|F|} and our predicate/argument pair
representation,( Fp ,a =(( Fz, into Rn, such that:
Fz — O(Fz) = (01(Fz), .., On(Fz))
From the kernel theory we have that:
</bodyText>
<equation confidence="0.9882274">
� �
�xi ·x+b =
i=1..l
�= aiO(Fi) · O(Fz) + b.
i=1..l
</equation>
<bodyText confidence="0.991347266666667">
where, Fi Vi E {1, .., l} are the training in-
stances and the product K(Fi, Fz) =&lt;O(Fi) ·
O(Fz)&gt; is the kernel function associated with
the mapping O. The simplest mapping that we
can apply is O(Fz) = z� = (z1,..., zn) where
zi = 1 if fi E Fz otherwise zi = 0, i.e.
the characteristic vector of the set Fz with re-
spect to F. If we choose as a kernel function
the scalar product we obtain the linear kernel
KL(Fx, Fz) = x�· z.
Another function which is the current state-
of-the-art of predicate argument classification is
the polynomial kernel: Kp(Fx, Fz) = (c+x·z-)d,
where c is a constant and d is the degree of the
polynom.
</bodyText>
<sectionHeader confidence="0.88202" genericHeader="method">
3 Convolution Kernels for Semantic
Parsing
</sectionHeader>
<bodyText confidence="0.999695461538461">
We propose two different convolution kernels
associated with two different predicate argu-
ment sub-structures: the first includes the tar-
get predicate with one of its arguments. We will
show that it contains almost all the standard
feature information. The second relates to the
sub-categorization frame of verbs. In this case,
the kernel function aims to cluster together ver-
bal predicates which have the same syntactic
realizations. This provides the classification al-
gorithm with important clues about the possible
set of arguments suited for the target syntactic
structure.
</bodyText>
<subsectionHeader confidence="0.9954">
3.1 Predicate/Argument Feature
</subsectionHeader>
<bodyText confidence="0.913450636363636">
(PAF)
We consider the predicate argument structures
annotated in PropBank or FrameNet as our se-
mantic space. The smallest sub-structure which
includes one predicate with only one of its ar-
guments defines our structural feature. For
example, Figure 2 illustrates the parse-tree of
the sentence &amp;quot;Paul delivers a talk in formal
style&amp;quot;. The circled substructures in (a), (b)
and (c) are our semantic objects associated
with the three arguments of the verb to de-
liver, i.e. &lt;deliver, Arg0&gt;, &lt;deliver, Arg1 &gt;
and &lt;deliver, ArgM&gt;. Note that each predi-
cate/argument pair is associated with only one
structure, i.e. Fp,a contain only one of the cir-
cled sub-trees. Other important properties are
the followings:
(1) The overall semantic feature space F con-
tains sub-structures composed of syntactic in-
formation embodied by parse-tree dependencies
and semantic information under the form of
predicate/argument annotation.
</bodyText>
<listItem confidence="0.997338375">
(2) This solution is efficient as we have to clas-
sify as many nodes as the number of predicate
arguments.
(3) A constituent cannot be part of two differ-
ent arguments of the target predicate, i.e. there
is no overlapping between the words of two ar-
guments. Thus, two semantic structures Fp1,a1
and Fp2,a21, associated with two different ar-
</listItem>
<bodyText confidence="0.8056195">
1Fp,a was defined as the set of features of the object
&lt;p, a&gt;. Since in our representations we have only one
</bodyText>
<equation confidence="0.9915028">
H(x) = � � ai
i=1..l
ai
x+b =
gi ·
</equation>
<figureCaption confidence="0.9071115">
Figure 4: All 17 valid fragments of the semantic
structure associated with Arg 1 of Figure 2.
</figureCaption>
<equation confidence="0.803099">
Y = If1, .., f
|F|I and (2) from Y to R|F|.
</equation>
<bodyText confidence="0.9997546">
An example of features in Y is given
in Figure 4 where the whole set of frag-
ments, Fdeliver,Arg1, of the argument structure
Fdeliver,Arg1, is shown (see also Figure 2).
It is worth noting that the allowed sub-trees
contain the entire (not partial) production rules.
For instance, the sub-tree [NP [D a]] is excluded
from the set of the Figure 4 since only a part of
the production NP —* D N is used in its gener-
ation. However, this constraint does not apply
to the production VP —* V NP PP along with the
fragment [VP [V NP]] as the subtree [VP [PP [...]]]
is not considered part of the semantic structure.
Thus, in step 1, an argument structure Fp,a is
mapped in a fragment set Fp,a. In step 2, this
latter is mapped into x = (x1,..,x|F|) E R|F|,
where xi is equal to the number of times that
fi occurs in Fp,a2.
In order to evaluate K((Fx), (Fz)) without
evaluating the feature vector x and z we de-
fine the indicator function Ii(n) = 1 if the sub-
structure i is rooted at node n and 0 otherwise.
It follows that i(Fx) = nNx Ii(n), where Nx
is the set of the Fx’s nodes. Therefore, the ker-
nel can be written as:
</bodyText>
<equation confidence="0.9339462">
K((Fx), (Fz)) = |F |  Ii(nz))
 ( Ii(nx))(
i=1 nxNx nzNz
=   Ii(nx)Ii(nz)
nxNx nzNz i
</equation>
<bodyText confidence="0.9980056">
where Nx and Nz are the nodes in Fx and Fz, re-
spectively. In (Collins and Duffy, 2002), it has
been shown that i Ii(nx)Ii(nz) = A(nx, nz)
can be computed in O(JNxJ x INzI) by the fol-
lowing recursive relation:
</bodyText>
<footnote confidence="0.481122">
(1) if the productions at nx and nz are different
then A(nx, nz) = 0;
2A fragment can appear several times in a parse-tree,
thus each fragment occurrence is considered as a different
element in Fp,a.
</footnote>
<figure confidence="0.994820470588235">
Fflush
Fbuckle
S
NP VP
Arg1
Arg1 (buckle)
(flush)
Arg0
(flush and buckle)
PRP
VP CC VP
He
and VBD NP
buckled PRP$ NN
VBD NP
flushed DT NN
the pan his belt
</figure>
<figureCaption confidence="0.9955285">
Figure 3: Sub-Categorization Features for two
predicate argument structures.
</figureCaption>
<bodyText confidence="0.85155675">
guments, cannot be included one in the other.
This property is important because a convolu-
tion kernel would not be effective to distinguish
between an object and its sub-parts.
</bodyText>
<subsectionHeader confidence="0.989853">
3.2 Sub-Categorization Feature (SCF)
</subsectionHeader>
<bodyText confidence="0.999915666666667">
The above object space aims to capture all
the information between a predicate and one of
its arguments. Its main drawback is that im-
portant structural information related to inter-
argument dependencies is neglected. In or-
der to solve this problem we define the Sub-
Categorization Feature (SCF). This is the sub-
parse tree which includes the sub-categorization
frame of the target verbal predicate. For
example, Figure 3 shows the parse tree of
the sentence &amp;quot;He flushed the pan and buckled
his belt&amp;quot;. The solid line describes the SCF
of the predicate flush, i.e. Fflush whereas the
dashed line tailors the SCF of the predicate
buckle, i.e. Fbuckle. Note that SCFs are features
for predicates, (i.e. they describe predicates)
whereas PAF characterizes predicate/argument
pairs.
Once semantic representations are defined,
we need to design a kernel function to esti-
mate the similarity between our objects. As
suggested in Section 2 we can map them into
vectors in Rn and evaluate implicitly the scalar
product among them.
</bodyText>
<subsectionHeader confidence="0.813413">
3.3 Predicate/Argument structure
Kernel (PAK)
</subsectionHeader>
<bodyText confidence="0.998333666666667">
Given the semantic objects defined in the previ-
ous section, we design a convolution kernel in a
way similar to the parse-tree kernel proposed
in (Collins and Duffy, 2002). We divide our
mapping  in two steps: (1) from the semantic
structure space Y (i.e. PAF or SCF objects)
to the set of all their possible sub-structures
element in Fp,a with an abuse of notation we use it to
indicate the objects themselves.
</bodyText>
<figure confidence="0.99845496969697">
Predicate 1 Predicate 2
VP
VP
VP
V
D N
D N
D N
NP
NP
NP
V
V
a talk
a talk
a talk
VP
D N
delivers
VP
VP
VP
VP
VP
VP
NP
NP
NP
D
N
a
talk
a
talk
a
D N
talk
D N
D N
D N
a talk
V
NP
V
D N
V
delivers
NP
D N
NP
NP
V
NP
V
NP
V
NP
V
delivers
D N
delivers
D N
delivers
NP
V
delivers
</figure>
<listItem confidence="0.9101032">
(2) if the productions at nx and nz are the
same, and nx and nz are pre-terminals then
0(nx, nz) = 1;
(3) if the productions at nx and nz are the same,
and nx and nz are not pre-terminals then
</listItem>
<equation confidence="0.993398666666667">
nc(nx)
A(nx, nz) = H (1 + A(ch(nx, j), ch(nz, j))),
j=1
</equation>
<bodyText confidence="0.999134">
where nc(nx) is the number of the children of nx
and ch(n, i) is the i-th child of the node n. Note
that as the productions are the same ch(nx, i) =
ch(nz, i).
This kind of kernel has the drawback of
assigning more weight to larger structures
while the argument type does not strictly
depend on the size of the argument (Moschitti
and Bejan, 2004). To overcome this prob-
lem we can scale the relative importance of
the tree fragments using a parameter A for
the cases (2) and (3), i.e. A(nx, nz) = A and
</bodyText>
<equation confidence="0.99787">
A(nx, nz) = A �nc(nx)
j=1 (1 + A(ch(nx, j), ch(nz, j)))
</equation>
<bodyText confidence="0.997625076923077">
respectively.
It is worth noting that even if the above equa-
tions define a kernel function similar to the one
proposed in (Collins and Duffy, 2002), the sub-
structures on which it operates are different
from the parse-tree kernel. For example, Figure
4 shows that structures such as [VP [V] [NP]], [VP
[V delivers ] [NP]] and [VP [V] [NP [DT] [N]]] are
valid features, but these fragments (and many
others) are not generated by a complete produc-
tion, i.e. VP —* V NP PP. As a consequence they
would not be included in the parse-tree kernel
of the sentence.
</bodyText>
<subsectionHeader confidence="0.9977355">
3.4 Comparison with Standard
Features
</subsectionHeader>
<bodyText confidence="0.999788222222222">
In this section we compare standard features
with the kernel based representation in order
to derive useful indications for their use:
First, PAK estimates a similarity between
two argument structures (i.e., PAF or SCF)
by counting the number of sub-structures that
are in common. As an example, the sim-
ilarity between the two structures in Figure
2, F”delivers”,Arg0 and F”delivers”,Arg1, is equal
to 1 since they have in common only the [V
delivers] substructure. Such low value de-
pends on the fact that different arguments tend
to appear in different structures.
On the contrary, if two structures differ only
for a few nodes (especially terminals or near
terminal nodes) the similarity remains quite
high. For example, if we change the tense of
the verb to deliver (Figure 2) in delivered, the
[VP [V delivers] [NP]] subtree will be trans-
formed in [VP [VBD delivered] [NP]], where the
NP is unchanged. Thus, the similarity with
the previous structure will be quite high as:
(1) the NP with all sub-parts will be matched
and (2) the small difference will not highly af-
fect the kernel norm and consequently the fi-
nal score. The above property also holds for
the SCF structures. For example, in Figure
3, KPAK (0(Fflush), 0(Fbuckle)) is quite high as
the two verbs have the same syntactic realiza-
tion of their arguments. In general, flat features
do not possess this conservative property. For
example, the Parse Tree Path is very sensible
to small changes of parse-trees, e.g. two predi-
cates, expressed in different tenses, generate two
different Path features.
Second, some information contained in the
standard features is embedded in PAF: Phrase
Type, Predicate Word and Head Word explicitly
appear as structure fragments. For example, in
Figure 4 are shown fragments like [NP [DT] [N]] or
[NP [DT a] [N talk]] which explicitly encode the
Phrase Type feature NP for the Arg 1 in Fig-
ure 2.b. The Predicate Word is represented by
the fragment [V delivers] and the Head Word
is encoded in [N talk]. The same is not true for
SCF since it does not contain information about
a specific argument. SCF, in fact, aims to char-
acterize the predicate with respect to the overall
argument structures rather than a specific pair
&lt;p, a&gt;.
Third, Governing Category, Position and
Voice features are not explicitly contained in
both PAF and SCF. Nevertheless, SCF may
allow the learning algorithm to detect the ac-
tive/passive form of verbs.
Finally, from the above observations follows
that the PAF representation may be used with
PAK to classify arguments. On the contrary,
SCF lacks important information, thus, alone it
may be used only to classify verbs in syntactic
categories. This suggests that SCF should be
used in conjunction with standard features to
boost their classification performance.
</bodyText>
<sectionHeader confidence="0.988676" genericHeader="method">
4 The Experiments
</sectionHeader>
<bodyText confidence="0.975107333333333">
The aim of our experiments are twofold: On
the one hand, we study if the PAF represen-
tation produces an accuracy higher than stan-
dard features. On the other hand, we study if
SCF can be used to classify verbs according to
their syntactic realization. Both the above aims
can be carried out by combining PAF and SCF
with the standard features. For this purpose
we adopted two ways to combine kernels3: (1)
K = K1 · K2 and (2) K = -yK1 + K2. The re-
sulting set of kernels used in the experiments is
the following:
</bodyText>
<listItem confidence="0.9823745">
• Kpd is the polynomial kernel with degree d
over the standard features.
• KPAF is obtained by using PAK function over
the PAF structures.
�vKPAF K
• KPAF+P = l KPAF |+|Kp d d|,i.e. the sum be-
</listItem>
<bodyText confidence="0.989438333333333">
tween the normalized4 PAF-based kernel and
the normalized polynomial kernel.
KPAF·Kpd i.e. the normalized
|KPAF|·|Kpd|,
product between the PAF-based kernel and the
polynomial kernel.
</bodyText>
<equation confidence="0.33527">
KSCF K
</equation>
<listItem confidence="0.916697">
• KSCF+P = -y|KSCF |+ |Kpd|, i.e. the summa-
</listItem>
<bodyText confidence="0.951255833333333">
tion between the normalized SCF-based kernel
and the normalized polynomial kernel.
KSCF·Kpd
|KSCF|·|Kpd|, i.e. the normal-
ized product between SCF-based kernel and the
polynomial kernel.
</bodyText>
<subsectionHeader confidence="0.997347">
4.1 Corpora set-up
</subsectionHeader>
<bodyText confidence="0.988374842105263">
The above kernels were experimented over two
corpora: PropBank (www.cis.upenn.edu/ace)
along with Penn TreeBank5 2 (Marcus et al.,
1993) and FrameNet.
PropBank contains about 53,700 sentences
and a fixed split between training and test-
ing which has been used in other researches
e.g., (Gildea and Palmer, 2002; Surdeanu et al.,
2003; Hacioglu et al., 2003). In this split, Sec-
tions from 02 to 21 are used for training, section
23 for testing and sections 1 and 22 as devel-
oping set. We considered all PropBank argu-
ments6 from Arg0 to Arg9, ArgA and ArgM for
a total of 122,774 and 7,359 arguments in train-
ing and testing respectively. It is worth noting
that in the experiments we used the gold stan-
dard parsing from Penn TreeBank, thus our ker-
nel structures are derived with high precision.
For the FrameNet corpus (www.icsi.berkeley
</bodyText>
<footnote confidence="0.881773818181818">
3It can be proven that the resulting kernels still sat-
isfy Mercer’s conditions (Cristianini and Shawe-Taylor,
2000).
4To normalize a kernel K(x, z-) we can divide it by
IK(x, x) · K(z, z-).
5We point out that we removed from Penn TreeBank
the function tags like SBJ and TMP as parsers usually
are not able to provide this information.
6We noted that only Arg0 to Arg4 and ArgM con-
tain enough training/testing data to affect the overall
performance.
</footnote>
<bodyText confidence="0.999538357142857">
.edu/framenet) we extracted all 24,558 sen-
tences from the 40 frames of Senseval 3 task
(www.senseval.org) for the Automatic Labeling
of Semantic Roles. We considered 18 of the
most frequent roles and we mapped together
those having the same name. Only verbs are se-
lected to be predicates in our evaluations. More-
over, as it does not exist a fixed split between
training and testing, we selected randomly 30%
of sentences for testing and 70% for training.
Additionally, 30% of training was used as a
validation-set. The sentences were processed us-
ing Collins’ parser (Collins, 1997) to generate
parse-trees automatically.
</bodyText>
<subsectionHeader confidence="0.991494">
4.2 Classification set-up
</subsectionHeader>
<bodyText confidence="0.9909835">
The classifier evaluations were carried out using
the SVM-light software (Joachims, 1999) avail-
able at svmlight.joachims.org with the default
polynomial kernel for standard feature evalu-
ations. To process PAF and SCF, we imple-
mented our own kernels and we used them in-
side SVM-light.
The classification performances were evalu-
ated using the f1 measure7 for single arguments
and the accuracy for the final multi-class clas-
sifier. This latter choice allows us to compare
the results with previous literature works, e.g.
(Gildea and Jurasfky, 2002; Surdeanu et al.,
2003; Hacioglu et al., 2003).
For the evaluation of SVMs, we used the de-
fault regularization parameter (e.g., C = 1 for
normalized kernels) and we tried a few cost-
factor values (i.e., j E {0.1,1, 2, 3, 4, 5}) to ad-
just the rate between Precision and Recall. We
chose parameters by evaluating SVM using Kp3
kernel over the validation-set. Both A (see Sec-
tion 3.3) and -y parameters were evaluated in a
similar way by maximizing the performance of
SVM using KPAF and -y KSCF
</bodyText>
<equation confidence="0.9173655">
|KSCF  |+Kpd
|Kpd |respec-
</equation>
<bodyText confidence="0.9992725">
tively. These parameters were adopted also for
all the other kernels.
</bodyText>
<subsectionHeader confidence="0.998309">
4.3 Kernel evaluations
</subsectionHeader>
<bodyText confidence="0.99990825">
To study the impact of our structural kernels we
firstly derived the maximal accuracy reachable
with standard features along with polynomial
kernels. The multi-class accuracies, for Prop-
Bank and FrameNet using Kpd with d = 1,.., 5,
are shown in Figure 5. We note that (a) the
highest performance is reached for d = 3, (b)
for PropBank our maximal accuracy (90.5%)
</bodyText>
<footnote confidence="0.586031">
7f1 assigns equal importance to Precision P and Re-
call R, i.e. f1 = 2P·R
</footnote>
<figure confidence="0.493661666666667">
P+R.
• KPAF·P =
• KSCF·P =
</figure>
<bodyText confidence="0.9860132">
is substantially equal to the SVM performance
(88%) obtained in (Hacioglu et al., 2003) with
degree 2 and (c) the accuracy on FrameNet
(85.2%) is higher than the best result obtained
in literature, i.e. 82.0% in (Gildea and Palmer,
2002). This different outcome is due to a differ-
ent task (we classify different roles) and a differ-
ent classification algorithm. Moreover, we did
not use the Frame information which is very im-
portant8.
</bodyText>
<figure confidence="0.687337">
1 2 d 3 4 5
</figure>
<figureCaption confidence="0.990807">
Figure 5: Multi-classifier accuracy according to dif-
ferent degrees of the polynomial kernel.
</figureCaption>
<bodyText confidence="0.999918827586207">
It is worth noting that the difference between
linear and polynomial kernel is about 3-4 per-
cent points for both PropBank and FrameNet.
This remarkable difference can be easily ex-
plained by considering the meaning of standard
features. For example, let us restrict the classi-
fication function CArg0 to the two features Voice
and Position. Without loss of generality we can
assume: (a) Voice=1 if active and 0 if passive,
and (b) Position=1 when the argument is af-
ter the predicate and 0 otherwise. To simplify
the example, we also assume that if an argu-
ment precedes the target predicate it is a sub-
ject, otherwise it is an object9. It follows that
a constituent is Arg0, i.e. CArg0 = 1, if only
one feature at a time is 1, otherwise it is not
an Arg0, i.e. CArg0 = 0. In other words, CArg0
= Position XOR Voice, which is the classical ex-
ample of a non-linear separable function that
becomes separable in a superlinear space (Cris-
tianini and Shawe-Taylor, 2000).
After it was established that the best ker-
nel for standard features is Kp3, we carried out
all the other experiments using it in the kernel
combinations. Table 2 and 3 show the single
class (f1 measure) as well as multi-class classi-
fier (accuracy) performance for PropBank and
FrameNet respectively. Each column of the two
tables refers to a different kernel defined in the
</bodyText>
<footnote confidence="0.808281333333333">
8Preliminary experiments indicate that SVMs can
reach 90% by using the frame feature.
9Indeed, this is true in most part of the cases.
</footnote>
<bodyText confidence="0.999453545454545">
previous section. The overall meaning is dis-
cussed in the following points:
First, PAF alone has good performance, since
in PropBank evaluation it outperforms the lin-
ear kernel (Kp1), 88.7% vs. 86.7% whereas in
FrameNet, it shows a similar performance 79.5%
vs. 82.1% (compare tables with Figure 5). This
suggests that PAF generates the same informa-
tion as the standard features in a linear space.
However, when a degree greater than 1 is used
for standard features, PAF is outperformed10.
</bodyText>
<table confidence="0.999784125">
Args P3 PAF PAF+P PAF·P SCF+P SCF·P
Arg0 90.8 88.3 90.6 90.5 94.6 94.7
Arg1 91.1 87.4 89.9 91.2 92.9 94.1
Arg2 80.0 68.5 77.5 74.7 77.4 82.0
Arg3 57.9 56.5 55.6 49.7 56.2 56.4
Arg4 70.5 68.7 71.2 62.7 69.6 71.1
ArgM 95.4 94.1 96.2 96.2 96.1 96.3
Acc. 90.5 88.7 90.2 90.4 92.4 93.2
</table>
<tableCaption confidence="0.995056">
Table 2: Evaluation of Kernels on PropBank.
</tableCaption>
<table confidence="0.999751272727273">
Roles P3 PAF PAF+P PAF·P SCF+P SCF·P
agent 92.0 88.5 91.7 91.3 93.1 93.9
cause 59.7 16.1 41.6 27.7 42.6 57.3
degree 74.9 68.6 71.4 57.8 68.5 60.9
depict. 52.6 29.7 51.0 28.6 46.8 37.6
durat. 45.8 52.1 40.9 29.0 31.8 41.8
goal 85.9 78.6 85.3 82.8 84.0 85.3
instr. 67.9 46.8 62.8 55.8 59.6 64.1
mann. 81.0 81.9 81.2 78.6 77.8 77.8
Acc. 85.2 79.5 84.6 81.6 83.8 84.2
18 roles
</table>
<tableCaption confidence="0.9969005">
Table 3: Evaluation of Kernels on FrameNet se-
mantic roles.
</tableCaption>
<bodyText confidence="0.930564190476191">
Second, SCF improves the polynomial kernel
(d = 3), i.e. the current state-of-the-art, of
about 3 percent points on PropBank (column
SCF·P). This suggests that (a) PAK can mea-
sure the similarity between two SCF structures
and (b) the sub-categorization information pro-
vides effective clues about the expected argu-
ment type. The interesting consequence is that
SCF together with PAK seems suitable to au-
tomatically cluster different verbs that have the
same syntactic realization. We note also that to
fully exploit the SCF information it is necessary
to use a kernel product (K1 · K2) combination
rather than the sum (K1 + K2), e.g. column
SCF+P.
Finally, the FrameNet results are completely
different. No kernel combinations with both
PAF and SCF produce an improvement. On
10Unfortunately the use of a polynomial kernel on top
the tree fragments to generate the XOR functions seems
not successful.
</bodyText>
<figure confidence="0.996013">
Accuracy
0.91
0.89
0.88
0.87
0.86
0.85
0.84
0.83
0.82
0.9
FrameNet
PropBank
</figure>
<bodyText confidence="0.999503173913044">
the contrary, the performance decreases, sug-
gesting that the classifier is confused by this
syntactic information. The main reason for the
different outcomes is that PropBank arguments
are different from semantic roles as they are
an intermediate level between syntax and se-
mantic, i.e. they are nearer to grammatical
functions. In fact, in PropBank arguments are
annotated consistently with syntactic alterna-
tions (see the Annotation guidelines for Prop-
Bank at www.cis.upenn.edu/ace). On the con-
trary FrameNet roles represent the final seman-
tic product and they are assigned according to
semantic considerations rather than syntactic
aspects. For example, Cause and Agent seman-
tic roles have identical syntactic realizations.
This prevents SCF to distinguish between them.
Another minor reason may be the use of auto-
matic parse-trees to extract PAF and SCF, even
if preliminary experiments on automatic seman-
tic shallow parsing of PropBank have shown no
important differences versus semantic parsing
which adopts Gold Standard parse-trees.
</bodyText>
<sectionHeader confidence="0.99976" genericHeader="conclusions">
5 Conclusions
</sectionHeader>
<bodyText confidence="0.9996666875">
In this paper, we have experimented with
SVMs using the two novel convolution kernels
PAF and SCF which are designed for the se-
mantic structures derived from PropBank and
FrameNet corpora. Moreover, we have com-
bined them with the polynomial kernel of stan-
dard features. The results have shown that:
First, SVMs using the above kernels are ap-
pealing for semantically parsing both corpora.
Second, PAF and SCF can be used to improve
automatic classification of PropBank arguments
as they provide clues about the predicate argu-
ment structure of the target verb. For example,
SCF improves (a) the classification state-of-the-
art (i.e. the polynomial kernel) of about 3 per-
cent points and (b) the best literature result of
about 5 percent points.
Third, additional work is needed to design
kernels suitable to learn the deep semantic con-
tained in FrameNet as it seems not sensible to
both PAF and SCF information.
Finally, an analysis of SVMs using poly-
nomial kernels over standard features has ex-
plained why they largely outperform linear clas-
sifiers based-on standard features.
In the future we plan to design other struc-
tures and combine them with SCF, PAF and
standard features. In this vision the learning
will be carried out on a set of structural features
instead of a set of flat features. Other studies
may relate to the use of SCF to generate verb
clusters.
</bodyText>
<sectionHeader confidence="0.998474" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<reference confidence="0.561955571428571">
This research has been sponsored by the ARDA
AQUAINT program. In addition, I would like to
thank Professor Sanda Harabagiu for her advice,
Adrian Cosmin Bejan for implementing the feature
extractor and Paul Mor˘arescu for processing the
FrameNet data. Many thanks to the anonymous re-
viewers for their invaluable suggestions.
</reference>
<sectionHeader confidence="0.979251" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99909914893617">
Michael Collins and Nigel Duffy. 2002. New ranking
algorithms for parsing and tagging: Kernels over
discrete structures, and the voted perceptron. In
proceeding of ACL-02.
Michael Collins. 1997. Three generative, lexicalized
models for statistical parsing. In proceedings of
the ACL-97, pages 16–23, Somerset, New Jersey.
Nello Cristianini and John Shawe-Taylor. 2000. An
introduction to Support Vector Machines. Cam-
bridge University Press.
Charles J. Fillmore. 1982. Frame semantics. In Lin-
guistics in the Morning Calm, pages 111–137.
Daniel Gildea and Daniel Jurasfky. 2002. Auto-
matic labeling of semantic roles. Computational
Linguistic.
Daniel Gildea and Martha Palmer. 2002. The neces-
sity of parsing for predicate argument recognition.
In proceedings of ACL-02, Philadelphia, PA.
R. Jackendoff. 1990. Semantic Structures, Current
Studies in Linguistics series. Cambridge, Mas-
sachusetts: The MIT Press.
T. Joachims. 1999. Making large-scale SVM learn-
ing practical. In Advances in Kernel Methods -
Support Vector Learning.
Paul Kingsbury and Martha Palmer. 2002. From
treebank to propbank. In proceedings of LREC-
02, Las Palmas, Spain.
M. P. Marcus, B. Santorini, and M. A.
Marcinkiewicz. 1993. Building a large anno-
tated corpus of english: The penn treebank.
Computational Linguistics.
Alessandro Moschitti and Cosmin Adrian Bejan.
2004. A semantic kernel for predicate argu-
ment classification. In proceedings of CoNLL-04,
Boston, USA.
Kadri Hacioglu, Sameer Pradhan, Wayne Ward,
James H. Martin, and Daniel Jurafsky. 2003.
Shallow Semantic Parsing Using Support Vector
Machines. TR-CSLR-2003-03, University of Col-
orado.
Mihai Surdeanu, Sanda M. Harabagiu, John
Williams, and John Aarseth. 2003. Using
predicate-argument structures for information ex-
traction. In proceedings of ACL-03, Sapporo,
Japan.
V. Vapnik. 1995. The Nature of Statistical Learning
Theory. Springer-Verlag New York, Inc.
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.895415">
<title confidence="0.999981">A Study on Convolution Kernels for Shallow Semantic Parsing</title>
<author confidence="0.99991">Alessandro Moschitti</author>
<affiliation confidence="0.9999445">University of Texas at Dallas Human Language Technology Research Institute</affiliation>
<address confidence="0.998416">Richardson, TX 75083-0688, USA</address>
<email confidence="0.999671">alessandro.moschitti@utdallas.edu</email>
<abstract confidence="0.992475857142857">In this paper we have designed and experimented novel convolution kernels for automatic classification of predicate arguments. Their main property is the ability to process structured representations. Support Vector Machines (SVMs), using a combination of such kernels and the flat feature kernel, classify Prop- Bank predicate arguments with accuracy higher the current argument classification state- Additionally, experiments on FrameNet data have shown that SVMs are appealing for the classification of semantic roles even if the proposed kernels do not produce any improvement.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>This research has been sponsored by the ARDA AQUAINT program. In addition, I would like to thank Professor Sanda Harabagiu for her advice, Adrian Cosmin Bejan for implementing the feature extractor and Paul Mor˘arescu for processing the FrameNet data. Many thanks to the anonymous reviewers for their invaluable suggestions.</title>
<marker></marker>
<rawString>This research has been sponsored by the ARDA AQUAINT program. In addition, I would like to thank Professor Sanda Harabagiu for her advice, Adrian Cosmin Bejan for implementing the feature extractor and Paul Mor˘arescu for processing the FrameNet data. Many thanks to the anonymous reviewers for their invaluable suggestions.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
<author>Nigel Duffy</author>
</authors>
<title>New ranking algorithms for parsing and tagging: Kernels over discrete structures, and the voted perceptron. In proceeding of ACL-02.</title>
<date>2002</date>
<contexts>
<context position="13347" citStr="Collins and Duffy, 2002" startWordPosition="2285" endWordPosition="2288"> In step 2, this latter is mapped into x = (x1,..,x|F|) E R|F|, where xi is equal to the number of times that fi occurs in Fp,a2. In order to evaluate K((Fx), (Fz)) without evaluating the feature vector x and z we define the indicator function Ii(n) = 1 if the substructure i is rooted at node n and 0 otherwise. It follows that i(Fx) = nNx Ii(n), where Nx is the set of the Fx’s nodes. Therefore, the kernel can be written as: K((Fx), (Fz)) = |F |  Ii(nz))  ( Ii(nx))( i=1 nxNx nzNz =   Ii(nx)Ii(nz) nxNx nzNz i where Nx and Nz are the nodes in Fx and Fz, respectively. In (Collins and Duffy, 2002), it has been shown that i Ii(nx)Ii(nz) = A(nx, nz) can be computed in O(JNxJ x INzI) by the following recursive relation: (1) if the productions at nx and nz are different then A(nx, nz) = 0; 2A fragment can appear several times in a parse-tree, thus each fragment occurrence is considered as a different element in Fp,a. Fflush Fbuckle S NP VP Arg1 Arg1 (buckle) (flush) Arg0 (flush and buckle) PRP VP CC VP He and VBD NP buckled PRP$ NN VBD NP flushed DT NN the pan his belt Figure 3: Sub-Categorization Features for two predicate argument structures. guments, cannot be included one in the othe</context>
<context position="15351" citStr="Collins and Duffy, 2002" startWordPosition="2618" endWordPosition="2621"> the predicate buckle, i.e. Fbuckle. Note that SCFs are features for predicates, (i.e. they describe predicates) whereas PAF characterizes predicate/argument pairs. Once semantic representations are defined, we need to design a kernel function to estimate the similarity between our objects. As suggested in Section 2 we can map them into vectors in Rn and evaluate implicitly the scalar product among them. 3.3 Predicate/Argument structure Kernel (PAK) Given the semantic objects defined in the previous section, we design a convolution kernel in a way similar to the parse-tree kernel proposed in (Collins and Duffy, 2002). We divide our mapping  in two steps: (1) from the semantic structure space Y (i.e. PAF or SCF objects) to the set of all their possible sub-structures element in Fp,a with an abuse of notation we use it to indicate the objects themselves. Predicate 1 Predicate 2 VP VP VP V D N D N D N NP NP NP V V a talk a talk a talk VP D N delivers VP VP VP VP VP VP NP NP NP D N a talk a talk a D N talk D N D N D N a talk V NP V D N V delivers NP D N NP NP V NP V NP V NP V delivers D N delivers D N delivers NP V delivers (2) if the productions at nx and nz are the same, and nx and nz are pre-terminals the</context>
<context position="16821" citStr="Collins and Duffy, 2002" startWordPosition="2935" endWordPosition="2938"> the node n. Note that as the productions are the same ch(nx, i) = ch(nz, i). This kind of kernel has the drawback of assigning more weight to larger structures while the argument type does not strictly depend on the size of the argument (Moschitti and Bejan, 2004). To overcome this problem we can scale the relative importance of the tree fragments using a parameter A for the cases (2) and (3), i.e. A(nx, nz) = A and A(nx, nz) = A �nc(nx) j=1 (1 + A(ch(nx, j), ch(nz, j))) respectively. It is worth noting that even if the above equations define a kernel function similar to the one proposed in (Collins and Duffy, 2002), the substructures on which it operates are different from the parse-tree kernel. For example, Figure 4 shows that structures such as [VP [V] [NP]], [VP [V delivers ] [NP]] and [VP [V] [NP [DT] [N]]] are valid features, but these fragments (and many others) are not generated by a complete production, i.e. VP —* V NP PP. As a consequence they would not be included in the parse-tree kernel of the sentence. 3.4 Comparison with Standard Features In this section we compare standard features with the kernel based representation in order to derive useful indications for their use: First, PAK estimat</context>
</contexts>
<marker>Collins, Duffy, 2002</marker>
<rawString>Michael Collins and Nigel Duffy. 2002. New ranking algorithms for parsing and tagging: Kernels over discrete structures, and the voted perceptron. In proceeding of ACL-02.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>Three generative, lexicalized models for statistical parsing.</title>
<date>1997</date>
<booktitle>In proceedings of the ACL-97,</booktitle>
<pages>16--23</pages>
<location>Somerset, New Jersey.</location>
<contexts>
<context position="23084" citStr="Collins, 1997" startWordPosition="3996" endWordPosition="3997">affect the overall performance. .edu/framenet) we extracted all 24,558 sentences from the 40 frames of Senseval 3 task (www.senseval.org) for the Automatic Labeling of Semantic Roles. We considered 18 of the most frequent roles and we mapped together those having the same name. Only verbs are selected to be predicates in our evaluations. Moreover, as it does not exist a fixed split between training and testing, we selected randomly 30% of sentences for testing and 70% for training. Additionally, 30% of training was used as a validation-set. The sentences were processed using Collins’ parser (Collins, 1997) to generate parse-trees automatically. 4.2 Classification set-up The classifier evaluations were carried out using the SVM-light software (Joachims, 1999) available at svmlight.joachims.org with the default polynomial kernel for standard feature evaluations. To process PAF and SCF, we implemented our own kernels and we used them inside SVM-light. The classification performances were evaluated using the f1 measure7 for single arguments and the accuracy for the final multi-class classifier. This latter choice allows us to compare the results with previous literature works, e.g. (Gildea and Jura</context>
</contexts>
<marker>Collins, 1997</marker>
<rawString>Michael Collins. 1997. Three generative, lexicalized models for statistical parsing. In proceedings of the ACL-97, pages 16–23, Somerset, New Jersey.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nello Cristianini</author>
<author>John Shawe-Taylor</author>
</authors>
<title>An introduction to Support Vector Machines.</title>
<date>2000</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="22168" citStr="Cristianini and Shawe-Taylor, 2000" startWordPosition="3837" endWordPosition="3840">eanu et al., 2003; Hacioglu et al., 2003). In this split, Sections from 02 to 21 are used for training, section 23 for testing and sections 1 and 22 as developing set. We considered all PropBank arguments6 from Arg0 to Arg9, ArgA and ArgM for a total of 122,774 and 7,359 arguments in training and testing respectively. It is worth noting that in the experiments we used the gold standard parsing from Penn TreeBank, thus our kernel structures are derived with high precision. For the FrameNet corpus (www.icsi.berkeley 3It can be proven that the resulting kernels still satisfy Mercer’s conditions (Cristianini and Shawe-Taylor, 2000). 4To normalize a kernel K(x, z-) we can divide it by IK(x, x) · K(z, z-). 5We point out that we removed from Penn TreeBank the function tags like SBJ and TMP as parsers usually are not able to provide this information. 6We noted that only Arg0 to Arg4 and ArgM contain enough training/testing data to affect the overall performance. .edu/framenet) we extracted all 24,558 sentences from the 40 frames of Senseval 3 task (www.senseval.org) for the Automatic Labeling of Semantic Roles. We considered 18 of the most frequent roles and we mapped together those having the same name. Only verbs are sel</context>
<context position="26267" citStr="Cristianini and Shawe-Taylor, 2000" startWordPosition="4539" endWordPosition="4543">nd Position. Without loss of generality we can assume: (a) Voice=1 if active and 0 if passive, and (b) Position=1 when the argument is after the predicate and 0 otherwise. To simplify the example, we also assume that if an argument precedes the target predicate it is a subject, otherwise it is an object9. It follows that a constituent is Arg0, i.e. CArg0 = 1, if only one feature at a time is 1, otherwise it is not an Arg0, i.e. CArg0 = 0. In other words, CArg0 = Position XOR Voice, which is the classical example of a non-linear separable function that becomes separable in a superlinear space (Cristianini and Shawe-Taylor, 2000). After it was established that the best kernel for standard features is Kp3, we carried out all the other experiments using it in the kernel combinations. Table 2 and 3 show the single class (f1 measure) as well as multi-class classifier (accuracy) performance for PropBank and FrameNet respectively. Each column of the two tables refers to a different kernel defined in the 8Preliminary experiments indicate that SVMs can reach 90% by using the frame feature. 9Indeed, this is true in most part of the cases. previous section. The overall meaning is discussed in the following points: First, PAF al</context>
</contexts>
<marker>Cristianini, Shawe-Taylor, 2000</marker>
<rawString>Nello Cristianini and John Shawe-Taylor. 2000. An introduction to Support Vector Machines. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Charles J Fillmore</author>
</authors>
<title>Frame semantics.</title>
<date>1982</date>
<booktitle>In Linguistics in the Morning Calm,</booktitle>
<pages>111--137</pages>
<contexts>
<context position="1527" citStr="Fillmore, 1982" startWordPosition="218" endWordPosition="219"> information in natural language texts is connected to syntactic structures. Hence, to deal with natural language semantics, the learning algorithm should be able to represent and process structured data. The classical solution adopted for such tasks is to convert syntax structures into flat feature representations which are suitable for a given learning model. The main drawback is that structures may not be properly represented by flat features. In particular, these problems affect the processing of predicate argument structures annotated in PropBank (Kingsbury and Palmer, 2002) or FrameNet (Fillmore, 1982). Figure 1 shows an example of a predicate annotation in PropBank for the sentence: &amp;quot;Paul gives a lecture in Rome&amp;quot;. A predicate may be a verb or a noun or an adjective and most of the time Arg 0 is the logical subject, Arg 1 is the logical object and ArgM may indicate locations, as in our example. FrameNet also describes predicate/argument structures but for this purpose it uses richer semantic structures called frames. These latter are schematic representations of situations involving various participants, properties and roles in which a word may be typically used. Frame elements or semantic </context>
</contexts>
<marker>Fillmore, 1982</marker>
<rawString>Charles J. Fillmore. 1982. Frame semantics. In Linguistics in the Morning Calm, pages 111–137.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Gildea</author>
<author>Daniel Jurasfky</author>
</authors>
<title>Automatic labeling of semantic roles.</title>
<date>2002</date>
<journal>Computational Linguistic.</journal>
<contexts>
<context position="2449" citStr="Gildea and Jurasfky, 2002" startWordPosition="362" endWordPosition="365">. FrameNet also describes predicate/argument structures but for this purpose it uses richer semantic structures called frames. These latter are schematic representations of situations involving various participants, properties and roles in which a word may be typically used. Frame elements or semantic roles are arguments of predicates called target words. In FrameNet, the argument names are local to a particular frame. Figure 1: A predicate argument structure in a parse-tree representation. Several machine learning approaches for argument identification and classification have been developed (Gildea and Jurasfky, 2002; Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). Their common characteristic is the adoption of feature spaces that model predicate-argument structures in a flat representation. On the contrary, convolution kernels aim to capture structural information in term of sub-structures, providing a viable alternative to flat features. In this paper, we select portions of syntactic trees, which include predicate/argument salient sub-structures, to define convolution kernels for the task of predicate argument classification. In particular, our kernels aim to (a) represent the re</context>
<context position="7355" citStr="Gildea and Jurasfky, 2002" startWordPosition="1195" endWordPosition="1198">1 is dominated by a VP. ual classifier. As a final decision, we select the - Predicate Word: This feature consists of two components: (1) the word itself, e.g. gives for all arguments; and (2) the lemma which represents the verb normalized to lower case and infinitive form, e.g. give for all arguments. Table 1: Standard features extracted from the parse-tree in Figure 1. 2.1 Standard feature space The discovery of relevant features is, as usual, a complex task, nevertheless, there is a common consensus on the basic features that should be adopted. These standard features, firstly proposed in (Gildea and Jurasfky, 2002), refer to a flat information derived from parse trees, i.e. Phrase Type, Predicate Word, Head Word, Governing Category, Position and Voice. Table 1 presents the standard features and exemplifies how they are extracted from the parse tree in Figure 1. For example, the Parse Tree Path feature represents the path in the parse-tree between a predicate node and one of its argument nodes. It is expressed as a sequence of nonterminal labels linked by direction symbols (up or down), e.g. in Figure 1, VTVPINP is the path between the predicate to give and the argument 1, a lecture. Two pairs &lt;p1, a1&gt; a</context>
<context position="23694" citStr="Gildea and Jurasfky, 2002" startWordPosition="4085" endWordPosition="4088">(Collins, 1997) to generate parse-trees automatically. 4.2 Classification set-up The classifier evaluations were carried out using the SVM-light software (Joachims, 1999) available at svmlight.joachims.org with the default polynomial kernel for standard feature evaluations. To process PAF and SCF, we implemented our own kernels and we used them inside SVM-light. The classification performances were evaluated using the f1 measure7 for single arguments and the accuracy for the final multi-class classifier. This latter choice allows us to compare the results with previous literature works, e.g. (Gildea and Jurasfky, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). For the evaluation of SVMs, we used the default regularization parameter (e.g., C = 1 for normalized kernels) and we tried a few costfactor values (i.e., j E {0.1,1, 2, 3, 4, 5}) to adjust the rate between Precision and Recall. We chose parameters by evaluating SVM using Kp3 kernel over the validation-set. Both A (see Section 3.3) and -y parameters were evaluated in a similar way by maximizing the performance of SVM using KPAF and -y KSCF |KSCF |+Kpd |Kpd |respectively. These parameters were adopted also for all the other kernels. 4.3 Kernel eva</context>
</contexts>
<marker>Gildea, Jurasfky, 2002</marker>
<rawString>Daniel Gildea and Daniel Jurasfky. 2002. Automatic labeling of semantic roles. Computational Linguistic.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Gildea</author>
<author>Martha Palmer</author>
</authors>
<title>The necessity of parsing for predicate argument recognition.</title>
<date>2002</date>
<booktitle>In proceedings of ACL-02,</booktitle>
<location>Philadelphia, PA.</location>
<contexts>
<context position="2474" citStr="Gildea and Palmer, 2002" startWordPosition="366" endWordPosition="369">redicate/argument structures but for this purpose it uses richer semantic structures called frames. These latter are schematic representations of situations involving various participants, properties and roles in which a word may be typically used. Frame elements or semantic roles are arguments of predicates called target words. In FrameNet, the argument names are local to a particular frame. Figure 1: A predicate argument structure in a parse-tree representation. Several machine learning approaches for argument identification and classification have been developed (Gildea and Jurasfky, 2002; Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). Their common characteristic is the adoption of feature spaces that model predicate-argument structures in a flat representation. On the contrary, convolution kernels aim to capture structural information in term of sub-structures, providing a viable alternative to flat features. In this paper, we select portions of syntactic trees, which include predicate/argument salient sub-structures, to define convolution kernels for the task of predicate argument classification. In particular, our kernels aim to (a) represent the relation between predicate </context>
<context position="21527" citStr="Gildea and Palmer, 2002" startWordPosition="3726" endWordPosition="3729">t between the PAF-based kernel and the polynomial kernel. KSCF K • KSCF+P = -y|KSCF |+ |Kpd|, i.e. the summation between the normalized SCF-based kernel and the normalized polynomial kernel. KSCF·Kpd |KSCF|·|Kpd|, i.e. the normalized product between SCF-based kernel and the polynomial kernel. 4.1 Corpora set-up The above kernels were experimented over two corpora: PropBank (www.cis.upenn.edu/ace) along with Penn TreeBank5 2 (Marcus et al., 1993) and FrameNet. PropBank contains about 53,700 sentences and a fixed split between training and testing which has been used in other researches e.g., (Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). In this split, Sections from 02 to 21 are used for training, section 23 for testing and sections 1 and 22 as developing set. We considered all PropBank arguments6 from Arg0 to Arg9, ArgA and ArgM for a total of 122,774 and 7,359 arguments in training and testing respectively. It is worth noting that in the experiments we used the gold standard parsing from Penn TreeBank, thus our kernel structures are derived with high precision. For the FrameNet corpus (www.icsi.berkeley 3It can be proven that the resulting kernels still satisfy Mercer’s condit</context>
<context position="25004" citStr="Gildea and Palmer, 2002" startWordPosition="4317" endWordPosition="4320">accuracy reachable with standard features along with polynomial kernels. The multi-class accuracies, for PropBank and FrameNet using Kpd with d = 1,.., 5, are shown in Figure 5. We note that (a) the highest performance is reached for d = 3, (b) for PropBank our maximal accuracy (90.5%) 7f1 assigns equal importance to Precision P and Recall R, i.e. f1 = 2P·R P+R. • KPAF·P = • KSCF·P = is substantially equal to the SVM performance (88%) obtained in (Hacioglu et al., 2003) with degree 2 and (c) the accuracy on FrameNet (85.2%) is higher than the best result obtained in literature, i.e. 82.0% in (Gildea and Palmer, 2002). This different outcome is due to a different task (we classify different roles) and a different classification algorithm. Moreover, we did not use the Frame information which is very important8. 1 2 d 3 4 5 Figure 5: Multi-classifier accuracy according to different degrees of the polynomial kernel. It is worth noting that the difference between linear and polynomial kernel is about 3-4 percent points for both PropBank and FrameNet. This remarkable difference can be easily explained by considering the meaning of standard features. For example, let us restrict the classification function CArg0</context>
</contexts>
<marker>Gildea, Palmer, 2002</marker>
<rawString>Daniel Gildea and Martha Palmer. 2002. The necessity of parsing for predicate argument recognition. In proceedings of ACL-02, Philadelphia, PA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Jackendoff</author>
</authors>
<title>Semantic Structures, Current Studies in Linguistics series.</title>
<date>1990</date>
<publisher>The MIT Press.</publisher>
<location>Cambridge, Massachusetts:</location>
<contexts>
<context position="892" citStr="Jackendoff, 1990" startWordPosition="122" endWordPosition="123">ed novel convolution kernels for automatic classification of predicate arguments. Their main property is the ability to process structured representations. Support Vector Machines (SVMs), using a combination of such kernels and the flat feature kernel, classify PropBank predicate arguments with accuracy higher than the current argument classification stateof-the-art. Additionally, experiments on FrameNet data have shown that SVMs are appealing for the classification of semantic roles even if the proposed kernels do not produce any improvement. 1 Introduction Several linguistic theories, e.g. (Jackendoff, 1990) claim that semantic information in natural language texts is connected to syntactic structures. Hence, to deal with natural language semantics, the learning algorithm should be able to represent and process structured data. The classical solution adopted for such tasks is to convert syntax structures into flat feature representations which are suitable for a given learning model. The main drawback is that structures may not be properly represented by flat features. In particular, these problems affect the processing of predicate argument structures annotated in PropBank (Kingsbury and Palmer,</context>
</contexts>
<marker>Jackendoff, 1990</marker>
<rawString>R. Jackendoff. 1990. Semantic Structures, Current Studies in Linguistics series. Cambridge, Massachusetts: The MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Joachims</author>
</authors>
<title>Making large-scale SVM learning practical.</title>
<date>1999</date>
<booktitle>In Advances in Kernel Methods -Support Vector Learning.</booktitle>
<contexts>
<context position="23239" citStr="Joachims, 1999" startWordPosition="4015" endWordPosition="4016">ic Labeling of Semantic Roles. We considered 18 of the most frequent roles and we mapped together those having the same name. Only verbs are selected to be predicates in our evaluations. Moreover, as it does not exist a fixed split between training and testing, we selected randomly 30% of sentences for testing and 70% for training. Additionally, 30% of training was used as a validation-set. The sentences were processed using Collins’ parser (Collins, 1997) to generate parse-trees automatically. 4.2 Classification set-up The classifier evaluations were carried out using the SVM-light software (Joachims, 1999) available at svmlight.joachims.org with the default polynomial kernel for standard feature evaluations. To process PAF and SCF, we implemented our own kernels and we used them inside SVM-light. The classification performances were evaluated using the f1 measure7 for single arguments and the accuracy for the final multi-class classifier. This latter choice allows us to compare the results with previous literature works, e.g. (Gildea and Jurasfky, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). For the evaluation of SVMs, we used the default regularization parameter (e.g., C = 1 for normal</context>
</contexts>
<marker>Joachims, 1999</marker>
<rawString>T. Joachims. 1999. Making large-scale SVM learning practical. In Advances in Kernel Methods -Support Vector Learning.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Paul Kingsbury</author>
<author>Martha Palmer</author>
</authors>
<title>From treebank to propbank.</title>
<date>2002</date>
<booktitle>In proceedings of LREC02,</booktitle>
<location>Las Palmas,</location>
<contexts>
<context position="1498" citStr="Kingsbury and Palmer, 2002" startWordPosition="212" endWordPosition="215">g. (Jackendoff, 1990) claim that semantic information in natural language texts is connected to syntactic structures. Hence, to deal with natural language semantics, the learning algorithm should be able to represent and process structured data. The classical solution adopted for such tasks is to convert syntax structures into flat feature representations which are suitable for a given learning model. The main drawback is that structures may not be properly represented by flat features. In particular, these problems affect the processing of predicate argument structures annotated in PropBank (Kingsbury and Palmer, 2002) or FrameNet (Fillmore, 1982). Figure 1 shows an example of a predicate annotation in PropBank for the sentence: &amp;quot;Paul gives a lecture in Rome&amp;quot;. A predicate may be a verb or a noun or an adjective and most of the time Arg 0 is the logical subject, Arg 1 is the logical object and ArgM may indicate locations, as in our example. FrameNet also describes predicate/argument structures but for this purpose it uses richer semantic structures called frames. These latter are schematic representations of situations involving various participants, properties and roles in which a word may be typically used</context>
</contexts>
<marker>Kingsbury, Palmer, 2002</marker>
<rawString>Paul Kingsbury and Martha Palmer. 2002. From treebank to propbank. In proceedings of LREC02, Las Palmas, Spain.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M P Marcus</author>
<author>B Santorini</author>
<author>M A Marcinkiewicz</author>
</authors>
<title>Building a large annotated corpus of english: The penn treebank. Computational Linguistics.</title>
<date>1993</date>
<contexts>
<context position="21354" citStr="Marcus et al., 1993" startWordPosition="3698" endWordPosition="3701">• KPAF+P = l KPAF |+|Kp d d|,i.e. the sum between the normalized4 PAF-based kernel and the normalized polynomial kernel. KPAF·Kpd i.e. the normalized |KPAF|·|Kpd|, product between the PAF-based kernel and the polynomial kernel. KSCF K • KSCF+P = -y|KSCF |+ |Kpd|, i.e. the summation between the normalized SCF-based kernel and the normalized polynomial kernel. KSCF·Kpd |KSCF|·|Kpd|, i.e. the normalized product between SCF-based kernel and the polynomial kernel. 4.1 Corpora set-up The above kernels were experimented over two corpora: PropBank (www.cis.upenn.edu/ace) along with Penn TreeBank5 2 (Marcus et al., 1993) and FrameNet. PropBank contains about 53,700 sentences and a fixed split between training and testing which has been used in other researches e.g., (Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). In this split, Sections from 02 to 21 are used for training, section 23 for testing and sections 1 and 22 as developing set. We considered all PropBank arguments6 from Arg0 to Arg9, ArgA and ArgM for a total of 122,774 and 7,359 arguments in training and testing respectively. It is worth noting that in the experiments we used the gold standard parsing from Penn TreeBank, thus</context>
</contexts>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>M. P. Marcus, B. Santorini, and M. A. Marcinkiewicz. 1993. Building a large annotated corpus of english: The penn treebank. Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alessandro Moschitti</author>
<author>Cosmin Adrian Bejan</author>
</authors>
<title>A semantic kernel for predicate argument classification.</title>
<date>2004</date>
<booktitle>In proceedings of CoNLL-04,</booktitle>
<location>Boston, USA.</location>
<contexts>
<context position="16462" citStr="Moschitti and Bejan, 2004" startWordPosition="2866" endWordPosition="2869">rs D N delivers NP V delivers (2) if the productions at nx and nz are the same, and nx and nz are pre-terminals then 0(nx, nz) = 1; (3) if the productions at nx and nz are the same, and nx and nz are not pre-terminals then nc(nx) A(nx, nz) = H (1 + A(ch(nx, j), ch(nz, j))), j=1 where nc(nx) is the number of the children of nx and ch(n, i) is the i-th child of the node n. Note that as the productions are the same ch(nx, i) = ch(nz, i). This kind of kernel has the drawback of assigning more weight to larger structures while the argument type does not strictly depend on the size of the argument (Moschitti and Bejan, 2004). To overcome this problem we can scale the relative importance of the tree fragments using a parameter A for the cases (2) and (3), i.e. A(nx, nz) = A and A(nx, nz) = A �nc(nx) j=1 (1 + A(ch(nx, j), ch(nz, j))) respectively. It is worth noting that even if the above equations define a kernel function similar to the one proposed in (Collins and Duffy, 2002), the substructures on which it operates are different from the parse-tree kernel. For example, Figure 4 shows that structures such as [VP [V] [NP]], [VP [V delivers ] [NP]] and [VP [V] [NP [DT] [N]]] are valid features, but these fragments </context>
</contexts>
<marker>Moschitti, Bejan, 2004</marker>
<rawString>Alessandro Moschitti and Cosmin Adrian Bejan. 2004. A semantic kernel for predicate argument classification. In proceedings of CoNLL-04, Boston, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kadri Hacioglu</author>
<author>Sameer Pradhan</author>
<author>Wayne Ward</author>
<author>James H Martin</author>
<author>Daniel Jurafsky</author>
</authors>
<title>Shallow Semantic Parsing Using Support Vector Machines.</title>
<date>2003</date>
<tech>TR-CSLR-2003-03,</tech>
<institution>University of Colorado.</institution>
<contexts>
<context position="2521" citStr="Hacioglu et al., 2003" startWordPosition="374" endWordPosition="378">e it uses richer semantic structures called frames. These latter are schematic representations of situations involving various participants, properties and roles in which a word may be typically used. Frame elements or semantic roles are arguments of predicates called target words. In FrameNet, the argument names are local to a particular frame. Figure 1: A predicate argument structure in a parse-tree representation. Several machine learning approaches for argument identification and classification have been developed (Gildea and Jurasfky, 2002; Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). Their common characteristic is the adoption of feature spaces that model predicate-argument structures in a flat representation. On the contrary, convolution kernels aim to capture structural information in term of sub-structures, providing a viable alternative to flat features. In this paper, we select portions of syntactic trees, which include predicate/argument salient sub-structures, to define convolution kernels for the task of predicate argument classification. In particular, our kernels aim to (a) represent the relation between predicate and one of its arguments and (b) to capture the</context>
<context position="5548" citStr="Hacioglu et al., 2003" startWordPosition="886" endWordPosition="890">− (negative examples). For example, in Figure 1, for each combination of the predicate give with the nodes N, S, VP, V, NP, PP, D or IN the instances F”give”,a are generated. In case the node a exactly covers Paul, a lecture or in Rome, it will be a positive instance otherwise it will be a negative one, e.g. F”give”,”IN”. To learn the argument classifiers the T + set can be re-organized as positive T+argi and negative T−argi examples for each argument i. In this way, an individual ONE-vs-ALL classifier for each argument i can be trained. We adopted this solution as it is simple and effective (Hacioglu et al., 2003). In the classification phase, given a sentence of the test-set, all its Fp ,a are generated and classified by each individargument associated with the maximum value among the scores provided by the SVMs, i.e. argmaxiES Ci, where S is the target set of arguments. - Phrase Type: This feature indicates the syntactic type of the phrase labeled as a predicate argument, e.g. NP for Arg1. - Parse Tree Path: This feature contains the path in the parse tree between the predicate and the argument phrase, expressed as a sequence of nonterminal labels linked by direction (up or down) symbols, e.g. V I VP</context>
<context position="21574" citStr="Hacioglu et al., 2003" startWordPosition="3734" endWordPosition="3737">l kernel. KSCF K • KSCF+P = -y|KSCF |+ |Kpd|, i.e. the summation between the normalized SCF-based kernel and the normalized polynomial kernel. KSCF·Kpd |KSCF|·|Kpd|, i.e. the normalized product between SCF-based kernel and the polynomial kernel. 4.1 Corpora set-up The above kernels were experimented over two corpora: PropBank (www.cis.upenn.edu/ace) along with Penn TreeBank5 2 (Marcus et al., 1993) and FrameNet. PropBank contains about 53,700 sentences and a fixed split between training and testing which has been used in other researches e.g., (Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). In this split, Sections from 02 to 21 are used for training, section 23 for testing and sections 1 and 22 as developing set. We considered all PropBank arguments6 from Arg0 to Arg9, ArgA and ArgM for a total of 122,774 and 7,359 arguments in training and testing respectively. It is worth noting that in the experiments we used the gold standard parsing from Penn TreeBank, thus our kernel structures are derived with high precision. For the FrameNet corpus (www.icsi.berkeley 3It can be proven that the resulting kernels still satisfy Mercer’s conditions (Cristianini and Shawe-Taylor, 2000). 4To </context>
<context position="23741" citStr="Hacioglu et al., 2003" startWordPosition="4093" endWordPosition="4096">lly. 4.2 Classification set-up The classifier evaluations were carried out using the SVM-light software (Joachims, 1999) available at svmlight.joachims.org with the default polynomial kernel for standard feature evaluations. To process PAF and SCF, we implemented our own kernels and we used them inside SVM-light. The classification performances were evaluated using the f1 measure7 for single arguments and the accuracy for the final multi-class classifier. This latter choice allows us to compare the results with previous literature works, e.g. (Gildea and Jurasfky, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). For the evaluation of SVMs, we used the default regularization parameter (e.g., C = 1 for normalized kernels) and we tried a few costfactor values (i.e., j E {0.1,1, 2, 3, 4, 5}) to adjust the rate between Precision and Recall. We chose parameters by evaluating SVM using Kp3 kernel over the validation-set. Both A (see Section 3.3) and -y parameters were evaluated in a similar way by maximizing the performance of SVM using KPAF and -y KSCF |KSCF |+Kpd |Kpd |respectively. These parameters were adopted also for all the other kernels. 4.3 Kernel evaluations To study the impact of our structural </context>
</contexts>
<marker>Hacioglu, Pradhan, Ward, Martin, Jurafsky, 2003</marker>
<rawString>Kadri Hacioglu, Sameer Pradhan, Wayne Ward, James H. Martin, and Daniel Jurafsky. 2003. Shallow Semantic Parsing Using Support Vector Machines. TR-CSLR-2003-03, University of Colorado.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mihai Surdeanu</author>
<author>Sanda M Harabagiu</author>
<author>John Williams</author>
<author>John Aarseth</author>
</authors>
<title>Using predicate-argument structures for information extraction.</title>
<date>2003</date>
<booktitle>In proceedings of ACL-03,</booktitle>
<location>Sapporo, Japan.</location>
<contexts>
<context position="2497" citStr="Surdeanu et al., 2003" startWordPosition="370" endWordPosition="373">res but for this purpose it uses richer semantic structures called frames. These latter are schematic representations of situations involving various participants, properties and roles in which a word may be typically used. Frame elements or semantic roles are arguments of predicates called target words. In FrameNet, the argument names are local to a particular frame. Figure 1: A predicate argument structure in a parse-tree representation. Several machine learning approaches for argument identification and classification have been developed (Gildea and Jurasfky, 2002; Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). Their common characteristic is the adoption of feature spaces that model predicate-argument structures in a flat representation. On the contrary, convolution kernels aim to capture structural information in term of sub-structures, providing a viable alternative to flat features. In this paper, we select portions of syntactic trees, which include predicate/argument salient sub-structures, to define convolution kernels for the task of predicate argument classification. In particular, our kernels aim to (a) represent the relation between predicate and one of its argument</context>
<context position="21550" citStr="Surdeanu et al., 2003" startWordPosition="3730" endWordPosition="3733">ernel and the polynomial kernel. KSCF K • KSCF+P = -y|KSCF |+ |Kpd|, i.e. the summation between the normalized SCF-based kernel and the normalized polynomial kernel. KSCF·Kpd |KSCF|·|Kpd|, i.e. the normalized product between SCF-based kernel and the polynomial kernel. 4.1 Corpora set-up The above kernels were experimented over two corpora: PropBank (www.cis.upenn.edu/ace) along with Penn TreeBank5 2 (Marcus et al., 1993) and FrameNet. PropBank contains about 53,700 sentences and a fixed split between training and testing which has been used in other researches e.g., (Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). In this split, Sections from 02 to 21 are used for training, section 23 for testing and sections 1 and 22 as developing set. We considered all PropBank arguments6 from Arg0 to Arg9, ArgA and ArgM for a total of 122,774 and 7,359 arguments in training and testing respectively. It is worth noting that in the experiments we used the gold standard parsing from Penn TreeBank, thus our kernel structures are derived with high precision. For the FrameNet corpus (www.icsi.berkeley 3It can be proven that the resulting kernels still satisfy Mercer’s conditions (Cristianini and S</context>
<context position="23717" citStr="Surdeanu et al., 2003" startWordPosition="4089" endWordPosition="4092"> parse-trees automatically. 4.2 Classification set-up The classifier evaluations were carried out using the SVM-light software (Joachims, 1999) available at svmlight.joachims.org with the default polynomial kernel for standard feature evaluations. To process PAF and SCF, we implemented our own kernels and we used them inside SVM-light. The classification performances were evaluated using the f1 measure7 for single arguments and the accuracy for the final multi-class classifier. This latter choice allows us to compare the results with previous literature works, e.g. (Gildea and Jurasfky, 2002; Surdeanu et al., 2003; Hacioglu et al., 2003). For the evaluation of SVMs, we used the default regularization parameter (e.g., C = 1 for normalized kernels) and we tried a few costfactor values (i.e., j E {0.1,1, 2, 3, 4, 5}) to adjust the rate between Precision and Recall. We chose parameters by evaluating SVM using Kp3 kernel over the validation-set. Both A (see Section 3.3) and -y parameters were evaluated in a similar way by maximizing the performance of SVM using KPAF and -y KSCF |KSCF |+Kpd |Kpd |respectively. These parameters were adopted also for all the other kernels. 4.3 Kernel evaluations To study the i</context>
</contexts>
<marker>Surdeanu, Harabagiu, Williams, Aarseth, 2003</marker>
<rawString>Mihai Surdeanu, Sanda M. Harabagiu, John Williams, and John Aarseth. 2003. Using predicate-argument structures for information extraction. In proceedings of ACL-03, Sapporo, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Vapnik</author>
</authors>
<title>The Nature of Statistical Learning Theory.</title>
<date>1995</date>
<publisher>Springer-Verlag</publisher>
<location>New York, Inc.</location>
<contexts>
<context position="8876" citStr="Vapnik, 1995" startWordPosition="1490" endWordPosition="1491">ul V N VP NP PP Paul N VP V NP PP Paul N V VP NP Fdeliver, ArgM PP D N IN NP IN NP formal style Arg. 1 formal style Arg. M formal style vents the learning algorithm to generalize well on unseen data. In order to address this problem, the next section describes a novel kernel space for predicate argument classification. 2.2 Support Vector Machine approach Given a vector space in Rn and a set of positive and negative points, SVMs classify vectors according to a separating hyperplane, H(x) = w�x x�+ b = 0, where w� E Rn and b E Rare learned by applying the Structural Risk Minimization principle (Vapnik, 1995). To apply the SVM algorithm to Predicate Argument Classification, we need a function O :F — Rn to map our features space F = {f1, .., f|F|} and our predicate/argument pair representation,( Fp ,a =(( Fz, into Rn, such that: Fz — O(Fz) = (01(Fz), .., On(Fz)) From the kernel theory we have that: � � �xi ·x+b = i=1..l �= aiO(Fi) · O(Fz) + b. i=1..l where, Fi Vi E {1, .., l} are the training instances and the product K(Fi, Fz) =&lt;O(Fi) · O(Fz)&gt; is the kernel function associated with the mapping O. The simplest mapping that we can apply is O(Fz) = z� = (z1,..., zn) where zi = 1 if fi E Fz otherwise </context>
</contexts>
<marker>Vapnik, 1995</marker>
<rawString>V. Vapnik. 1995. The Nature of Statistical Learning Theory. Springer-Verlag New York, Inc.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>