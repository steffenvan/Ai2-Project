<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.7085585">
Towards efficient parsing with
proof-nets
</title>
<author confidence="0.859992">
Main Lecomte
</author>
<affiliation confidence="0.597454">
GRIL
</affiliation>
<author confidence="0.843912">
Universite Blaise Pascal
</author>
<affiliation confidence="0.8087055">
63037-Clermont-Ferrand
France
</affiliation>
<email confidence="0.996705">
email: lecomte@shm.grenet.fr
</email>
<sectionHeader confidence="0.996561" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999864588235294">
This paper presents a method for parsing
associative Lambek grammars based on graph-
theoretic properties. Connection graphs, which
are a simplified version of proof-nets, are
actually a mere conservative extension of the
earlier method of syntactic connexion,
discovered by Ajducldewicz [1935]. The method
amounts to find alternating spanning trees in
graphs. A sketch of an algorithm for finding
such a tree is provided. Interesting properties of
time-complexity for this method are expected.
It has some similarities with chart-parsing
([Konig, 1991, 1992], [Hepple, 1992]) but is
different at least in the fact that intervals are
here edges and words are vertices (or trees)
instead of the contrary in classical chart-
parsing.
</bodyText>
<sectionHeader confidence="0.998883" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99997125">
In this paper, we present a method for parsing Lambek
grammars based on graph-theoretic properties. We
expect that it may be done efficiently by an algorithm
(time-polynomial even in the worst case) which aims at
finding an alternating spanning tree in a graph. We do
not give the explicit formulation of such an algorithm
in this paper: we will only give an idea and an
illustration of it. This paper is thus mostly devoted to
the properties on which the method is based. We call
connection graphs the special kind of proof-nets we
explore, just in order to make explicit some difference
with the usual method of proof-nets, as it can be found
in [Roorda, 1991; 1992] and [Moortgat 1992], but the
two concepts are very similar. In many respects,
connection graphs are a mere conservative extension of
the earlier method of syntactic connection, discovered by
Ajducldewicz [1935]. The method amounts to link the
nodes of an ordered sequence of trees in such a way that
properties of connexion, &amp;quot;non overlapping&amp;quot;, acyclicity
and &amp;quot;strong connectivity&amp;quot; are verified. Connection
graphs are simpler than proof-nets in that they loose
some information. As they are here formulated, they are
only convenient for the associative version of the
product-free Lambek calculus. One of their advantages
lies in the geometrical viewpoint they provide on the
proofs of a sequent. By means of this viewpoint,
questions of provability may be reduced to graph-
theoretical problems. For instance, every reading of a
sentence is provided by an alternating spanning tree.
In many aspects, the method resembles the well
known method of chart-parsing. Konig [1991, 1992]
was the first to apply chart-parsing to Lambek calculus.
Hepple [1992] has recently improved this application.
An obvious difference with the method proposed here
lies in the fact that, in ours, words are points and
intervals between them are edges instead of the contrary
in chart-parsing. In both cases, computational
advantages are found by keeping correct partial analyses
after they have been obtained. A chart is actually used in
both methods.
</bodyText>
<sectionHeader confidence="0.995098" genericHeader="method">
2 Connection Graphs
</sectionHeader>
<subsectionHeader confidence="0.970479">
2.1 Links and Nodes
</subsectionHeader>
<construct confidence="0.643812666666667">
Definition 1: Let S be a set of signed vertices (i-e:
labelled with letters belonging to an alphabet A and
with a + or - sign). We define three types of links:
</construct>
<listItem confidence="0.971148">
• external links:
</listItem>
<bodyText confidence="0.5518535">
+a a or -a +a, between complementary
vertices (same letter and opposite signs)
</bodyText>
<listItem confidence="0.982162">
• internal links:
</listItem>
<page confidence="0.997038">
269
</page>
<note confidence="0.981285714285714">
• type 1: left-oriented: (b) if -A is the right end just before +B, then we get
right-oriented: +B a new connection graph which links x and +(B/A)
+B ■ by the scheme:
S. +B
S. S.
-A -A S.
S.•
</note>
<figure confidence="0.5772992">
• type 2:
right-oriented: left-oriented:
-B -B
\ /
+A +A
</figure>
<subsectionHeader confidence="0.981146">
2.2 Connection Graphs (inductive definition)
</subsectionHeader>
<bodyText confidence="0.927211">
We define by induction the class of connection graphs
and the associated notions of unit and of linking a
sequence of units.
</bodyText>
<listItem confidence="0.858830285714286">
• every external link is a connection graph, which
links the units +a and -a,
• (I) if a is a connection graph which links a
sequence of units x and a unit +A and if 0 is a
connection graph which links y, -B and z (where z
z&apos; +C)1, then the following schemes define new
connection graphs:
</listItem>
<equation confidence="0.976095333333333">
y -B
+A
+A
</equation>
<bodyText confidence="0.994486666666667">
they will be noted respectively: otOr 0 and aED1 p,
and they link respectively: y, - (B/A), x, z and y, x,
z where -(B/A) and -(A\B) are new units.
</bodyText>
<listItem confidence="0.8724316">
• (II) if a is a connection graph which links -A, x
and +B, then:
(a) if -A is the left end of the linking, we get a new
connection graph which links x and +(A\B) by the
scheme:
</listItem>
<figure confidence="0.88919665">
+B
-A
1 We use small latin letters for sequences of units and
capital latin letters with a sign for units.
-A
they are respectively noted: ti(a) and tr(a).
Example:
-b +b is a connection graph which links -b and
+b, idem for -c +c.
By (Ib), we get
-bc ...c
% +b
...
+c
which is a connection graph which links -(b/c), -c
and +b
-a +a is also a connection graph and we obtain
by (la):
-a
+a +c
</figure>
<figureCaption confidence="0.365816">
which is a connection graph which links -a, -
(a\(b/c)), -c and +b
</figureCaption>
<bodyText confidence="0.678118">
and we obtain by (Ba):
.•
</bodyText>
<equation confidence="0.518711">
.-*
+a
which links - (a\,(b/c)), -c and +(a\b).
Proposition 1:for any sign ±, we have for all A, B
and C:
± (A\B)IC = ± AVBIC)
</equation>
<bodyText confidence="0.996151307692308">
Proof: assume we have a connection graph 0 which
links y, -(A\B), z and a connection graph a which links
x and +C, then, by (Ia) we obtain a connection graph
which links y, -((A\B)/C), x and z. But since 0 links
units having already a type 2 link, it necessarily comes
from a [y&apos;, -B, z] and a [x&apos;, +A] such that y&apos; x = y.
From [y&apos;, -B, z] and [x, +C] we obtain a connection
graph which links y&apos;, -(B/C), x and z and from this
graph and the graph which links [x&apos;, +A], we get a
graph which links y&apos;, x&apos;, -(PNB/C)), x and z, that means
a graph which links y, -(AN(B/C)), x and z, which is
identical to the graph which links y, -((A\B)/C), x and
z. 0
</bodyText>
<subsectionHeader confidence="0.99958">
2.3 Alternating trees
</subsectionHeader>
<bodyText confidence="0.921740833333333">
Definition 2: Let Li and L2 respectively the sets of
type 1 links and type 2 links. An alternating tree on
L1uL2 is a tree in which all the nodes at a same level
have the same sign, all the edges are type 1 or type 2
links and the sign of a node is alternatively + and -
along any path from the root to any leaf.
</bodyText>
<equation confidence="0.431814">
+C
</equation>
<page confidence="0.988912">
270
</page>
<construct confidence="0.998607">
Proposition 2: Let G be a connection graph and E be
the set of its external links. The set G—E is an ordered
set of units, each of them consisting in an alternating
tree, noted -A if the root is negative and +A if the root
is positive.
</construct>
<listItem confidence="0.8250064">
Proof by induction on building a connection graph.
1) Let G consist in a single external link, if we remove
the external link, we get two distinct vertices: +a and -a,
which are alternating trees.
2) Let us assume the property true for 13 which links y,
</listItem>
<bodyText confidence="0.944286214285714">
-B, z and for a which links x and +A. -B, as a unit, is
an alternating negative tree and +A is an alternating
positive tree. By (Ia) and (lb), a type 2 link is added
from the root of -B. We thus keep a tree the root of
which is negative and the type of the added link is the
same as that of the links at the same level. Moreover,
no cycle is added because before this operation, the two
graphs were not already connected. -(3/A) and -(A\B) are
thus alternating trees.
3) Let us assume now the property true for a which
links -A, x and +B, then it is also true for ti(a) and
tr(a) because a type 1 link is added from the positive
root of +B. Obviously, no cycle is added when we
exclude the external links. 0
</bodyText>
<subsectionHeader confidence="0.977759">
2.4 Numbering the nodes of a connection
</subsectionHeader>
<bodyText confidence="0.977173">
graph
Let r be the ordered set of alternating trees in a
connection graph G.
</bodyText>
<construct confidence="0.902436444444444">
Proposition 3: F contains one and only one positive
tree. It is the last tree of the set. Its root will be called
the positive root of G.
Proof: very easy, by induction on building a connection
graph.0
Proposition 4: Let us assume that G contains 2n
vertices. There is one and only one way of numbering
these vertices in order that the following conditions are
fullfilled:
</construct>
<listItem confidence="0.6239588">
• if X and I are alternating trees and X&lt; Y (X before
Y in the order defined on I) the set Ix of numbers
associated to X and the set ly are such that: Ix &lt; Iy
(where! &lt; l&apos; means: Vi Vi&apos; iEl and fel&apos; i&lt;i)
• type 1 links:
</listItem>
<figure confidence="0.9473046">
-i-B +B
-A -A
IA &lt; IB IA&gt;IB
• type 2 links:
-B /B
+A +A
IB &lt;IA IA&lt; IB
Proof: easy. (cf one of the several ways of enumerating
the nodes of a tree).0
Example:
</figure>
<figureCaption confidence="0.880731333333333">
Definition 3: a connection graph G is said to be well
numbered if and only if its nodes are numbered according
to Proposition 4.
</figureCaption>
<bodyText confidence="0.936386380952381">
2 . 5 Completeness of Connection Graphs
with respect to the Associative Product-free
Lambek Calculus
We show that every deduction d in the calculus A (for
Associative Product-free Lambek calculus) may be
translated into a connection graph x(d).
axiom: a —&gt; a is translated into:
-a -+a or +a a
rules:
[L/]: if x --&gt; A translates into 13 and y B z --&gt; C
translates into y, y B/A x z translates into 13 Or y
[L\]: y x A\B z translates into 13 EDI y
[R/]: translates into tr(a) where a is the translation
ofAx--&gt;B
[R\]: translates into t1(a).0
Remark: this translation is not a one-to-one mapping,
because several deductions can be translated into the
same connection graph. We assume here that connection
graphs provide a semantics for derivations. It is possible
to show that this semantics is isomorphic to the
associative directed lambda calculus (see Wansing 1990).
</bodyText>
<subsectionHeader confidence="0.8145085">
2.6 Soundness of Connection Graphs with
respect to A
</subsectionHeader>
<bodyText confidence="0.8188015">
This paragraph is very similar to Roorda 1991, chap III,
§ 4.
</bodyText>
<construct confidence="0.952822">
Lemma 1: If we remove a type 1 link from a
connection graph G, we keep a connection graph.
</construct>
<bodyText confidence="0.9776756">
Proof: we may assume that this link has been added at
the last stage of the construction.°
Definition 4: a type 2 link is called separable if it
could have been added in the last stage of the
construction.
</bodyText>
<construct confidence="0.989131625">
Lemma 2: If a connection graph, consisting of more
than one link, has no terminal type 1 link, it has a
separable type 2 link.
Proof: obvious.
Proposition 5: To every connection graph G the
units of which are: -Al -A2, ... ,-An, +B, there
corresponds a deduction in A of the sequent:
Ai*, A2*, , An* B*
</construct>
<page confidence="0.940997">
271
</page>
<equation confidence="0.8264065">
(where X* is the formula associated with the alternating
tree X)
</equation>
<bodyText confidence="0.99424975">
P roof: by induction on the structure of G. G has
necessarily a last link, in the order of the construction.
As seen in the previous lemma, it is necessarily either a
type 1 link or a type 2 link. In the first case, when
removing it, we still have a connection graph. In the
second case, when removing it, we get two connection
graphs a and (3 which correspond, by induction
hypothesis, respectively to x A and y B z--) C.
</bodyText>
<subsectionHeader confidence="0.932285">
2.7 Non-Overlapping property
</subsectionHeader>
<bodyText confidence="0.991689166666667">
Definition 5: given a connection graph G, we call
interval every set of integers [i, j] (ie: tx; i5x5j) such
that i and j are indices associated with ending points of
an external link (and i&lt;j).
Two intervals [i, j] and [1,1] do not overlap if and only
if:
</bodyText>
<listItem confidence="0.929969">
• [i, 1] n = 0
</listItem>
<bodyText confidence="0.949308444444445">
or • [i, A D [i.,1] and i # i&apos; and j j&apos;
or • [1,1] D [i, j] and i # i&apos; and j
Given a family I of intervals, we say that it satisfies the
Non Overlapping Condition (NOC) if it does not
contain any pair of intervals which overlap.
Theorem 1: in a well numbered connection graph G,
the family of intervals associated with all the external
links satisfies NOC.
Proof: easy, by induction.0
</bodyText>
<subsectionHeader confidence="0.995742">
2.8 Linking the positive root
</subsectionHeader>
<bodyText confidence="0.921168666666667">
Theorem 2: in a connection graph G, the positive root
is connected by an external link either to a negative
vertex in the same tree (just below it) or to a negative
root.
2.9 Connectivity and acyclicity by
external links and type 2 links
</bodyText>
<construct confidence="0.76045">
Theorem 3: Let G be a connection graph. Let Ll be
the set of its type 1 links. G—Ll is connected and
acyclic (it is a tree).
</construct>
<bodyText confidence="0.99896675">
Proof: a type 2 link connects two connection graphs for
the first time they meet and a type 1 link does neither
connect two graphs, nor modify the topology of type 2
links and external links. 0
</bodyText>
<sectionHeader confidence="0.372452" genericHeader="method">
2.10 One-to-one mapping between nodes
</sectionHeader>
<bodyText confidence="0.97411275">
Theorem 4:for every i in a connection graph G, let
0(i) be the node linked to i by an external link, 0 is a
one-to-one mapping from S onto S.
Proof: trivial by induction. 0
</bodyText>
<subsectionHeader confidence="0.768101">
2-11 Strong connectivity
</subsectionHeader>
<bodyText confidence="0.94402025">
Definition 6: given a graph G, a spanning tree of G
is defined as a tree on the complete set of nodes of G. A
tree is said to be alternating on L2 u E, if each of its
paths from the root to a leaf is alternatively composed
by L2-edges and E-edges.
Theorem 5: every connection graph G admits an
alternating spanning tree with the positive root of G as
the root.
</bodyText>
<listItem confidence="0.924781333333333">
Proof
• true for any axiom,
• Let us assume it is true for a and y. Then by (la) and
(Ib):
• by induction hypothesis, there is a path from the root
of +C to the root of -B which is alternating. Since it
arrives at a negative vertex, its last link cannot be of
type 2, then it is an external link.
• There is also a path from the root of +A to any leaf of
</listItem>
<bodyText confidence="0.922878">
the spanning tree of a, which is alternating. Since it
comes from a positive vertex, it cannot begin with a
type 2 link, hence it begins with an extrernal link.
Thus, by inserting a type 2 link between the external
link arriving at -B and the external link starting from
+A, we get a path starting from the positive root of +C
and arriving at any leaf of a, inserted into y, which is
alternating.
Therefore, there is an alternating path from the positive
root of +C to any leaf of ay.
Let us assume now it is true for a which links -A, x
and +B. The transformation tr or t1 does not modify the
set of paths starting from the positive root of +B. 0
</bodyText>
<figureCaption confidence="0.58275">
Definition 7: a node in a connection graph G will be
said strongly connected to another node in the same
graph if they are connected by an alternating path.
Definition 8: a link will be said to be strong if its
two ends are srongly connected.
Theorem 6: in a connection graph G, every type I
link is strong.
</figureCaption>
<bodyText confidence="0.9997576">
Proof: this is shown when installing a new type I link.
Such an installation does not modify the topology of
G—Ll. The previous graph (before applying tl or tr) was
necessarily a connection graph. Thus by Theorem 5, it
was scanned by an alternating spanning tree with as root
the positive root of the graph. This tree is preserved by
tl or tr, it contained an alternating path connecting the
two vertices which are now linked by a type 1 link. 0
As a matter of recapitulation, we enumerate now the
following properties, satisfied by any connection graph.
</bodyText>
<listItem confidence="0.999007555555555">
• one-to-one mapping by external links (CGO)
• positive root property + uniqueness of the positive
root (CG1)
• non-overlapping condition (CG2)
• strong connectivity (CG3)
• connectivity and acyclicity on L2 u E (C64)
• alternating spanning tree (CGS)
• G—E is a set of well numbered alternating trees
(CG6)
</listItem>
<bodyText confidence="0.280041">
Proposition 6: CG5 is a consequence of CGO,
CG1, CG3, CG4.
</bodyText>
<page confidence="0.985379">
272
</page>
<bodyText confidence="0.998258565217391">
Proof: By CG4, 0–L1 is a tree on S, it is therefore a
spanning tree of G. Let us consider a path a from the
positive root +b (which is the root of the positive tree
+B, and which is unique according to CG1) to a leaf a.
We must notice that a cannot be positive, because if it
was, it would necessarily be an end of a type 2 link and
this type 2 link would be the last edge on the path a,
but by CGO, it would be linked by an external link to
another node and thus it would not be a leaf. Thus, a is
necessarily negative, and we can write -a instead of a. If
-a is isolated (as a negative root of a negative tree), we
can remove the last external link and the type 2 link
before the last, we are led to the same problem: a path
a&apos; arriving at a negative leaf, but a&apos; is shorter than a.
If -a is not isolated, it is necessarily the end of a type
1 link, but by CG3, there is an alternating path joining
-a and the positive node +c which is the other end.
Removing this path and the type 2 link arriving at +c,
we still get the same problem of a path a&apos; arriving at a
negative node, but again a&apos; is shorter than a. We can
proceed like that until we have a mere external link
between the positive root +b and a vertex -b. In this
case, the path is obviously alternate.
</bodyText>
<sectionHeader confidence="0.7748" genericHeader="method">
3 Well Linked Graphs (WLG)
</sectionHeader>
<figureCaption confidence="0.8832566">
Definition 9: Let -Al, -A2.....-An, +B a sequence
of alternating trees on the set S of signed vertices. We
call Well Linked Graph on [-Al, -A2, ,-An, +B] the
result of adding external links in order that CGO, CG!,
CG2, CG3, CG4 are satisfied.
Proposition 7: every connection graph is a well
linked graph.
Proof: obvious according to the previous §.0
Theorem 7: every well linked graph is a connection
graph.
</figureCaption>
<bodyText confidence="0.84974625">
(ie: every well linked graph could be obtained by the
inductive construction of a connection graph, with the
sequence of alternating trees as G–E).
Proof: given a WLG on [-Al, -A2, ,-An, +B], it has
a unique positive root +b (the root of +B). Thus it
satisfies the property of uniqueness of the positive root.
Let us assume there is a type 1 link from +b, then let
us remove:
</bodyText>
<listItem confidence="0.823352888888889">
• if it is left-oriented: the leftmost one
• if it is right-oriented: the rightmost one.
Let us assume for instance that it is left-oriented:
• The tree below this link may be moved towards the
left end of the sequence of trees by the inverse of the
construction rule (Ha). This move preserves the
topological structure of EuL2, therefore, CGI, CG3
and CG4 are preserved. This move implies a re-
numbering but it does not destroy the non-overlapping
</listItem>
<bodyText confidence="0.961232111111111">
property. Thus CG2 is preserved. CGO is trivially
preserved. The argument is similar for a right-oriented
link. Thus after this removal, we keep a WLG.
Let us assume now there is no type 1 link from +b.
Then there is an external link which links +b to a vertex
-b situated among the negative trees. If -b is not related
to another node, we get an elementary WLG: -b ----+b,
which is obviously a connection graph. If -b is related
to another node, then by CG5, either -b is a leaf, or it is
the starting point of a type 2 link. Let us assume -b is a
leaf (of a non atomic tree), then -b is linked by a type I
link to a vertex +a (and not to +b since we have
assumed there is no longer type 1 link from +b).
Because of CG3, -b and +a are connected by an
alternating path on EuL2, thus -b is necessarily the
starting point of a type 2 link, but in this case, -b is not
a leaf. Therefore -b is not a leaf and it is the starting
point of a type 2 link. Let +c the other end of this link.
</bodyText>
<listItem confidence="0.7973625">
• Let us assume that this link is left-oriented: we
remove the leftmost one if many. In this case, the
</listItem>
<bodyText confidence="0.609489">
scanning tree is broken into two parts and the
connection graph is also separated into two pieces. One
contains +b, the other contains +c.
Let us consider the first one:
</bodyText>
<listItem confidence="0.852285">
• it keeps CG3 and CG4:
</listItem>
<bodyText confidence="0.989057297297297">
for example CG3:
- let us consider a type 1 link situated in this part. It
does not come from +b since we have assumed there is
no longer type 1 link from +b.
- its ends are linked by an alternating path. Let us
assume that the removed type 2 link belonged to this
path. By removing it, we get either a single external
link: -b +b, but such a piece does not contain any
type 1 link, or another kind of graph. If we want this
graph has a type 1 link, it necessarily must contain
another type 2 link starting from -b, and arriving, say,
at +d. But an alternating path between two ends of a
type 1 link can neither arrive by an external link at -b
since -b is already connected by such a link to the
positive root +b (and we have assumed there is no type
1 link attached to +b), nor pass through +d since, in
this case, the path would have two consecutive type 2
links, which contradicts the definition of an alternating
path. Therefore, the removed type 2 link cannot be on
the alternating path linking the ends of a type 1 link in
this part of the graph. Finally, no alternating path in the
first component is destroyed by this removal, among all
the alternating paths connecting ends of type 1 links.
Let us consider the second one:
- let us consider a type 1 link situated in this part and let
us assume that its ends are linked by an alternating path
passing through the removed type 2 link. The proof is
the same as previously: the path can neither arrive at -b
by an external link nor by a type 2 link. Moreover, it
has one and only one positive root +c, because it does
not contain +b, and +c is necessarily linked by an
external link to either a negative root or a negative
vertex just below it (if not, there would be a type 1 link
+x — -c, with -c externally linked to +c, the alternating
path from -c to +x would thus necessarily pass through
+c and -b, which is impossible according to the first
part of the proof).
</bodyText>
<page confidence="0.995864">
273
</page>
<bodyText confidence="0.984682444444445">
When all the type 2 links attached to -b are removed,
there remains only the external link -b +b which is a
WLG, and we can perform this decomposition for each
part resulting from a previous step.
It would then be possible to reconstruct the graph
accordint to the induction schemes (I) and (II), starting
only from axioms.
Corollary: well linked graphs are sound and complete
with respect to the calculus A.
</bodyText>
<subsectionHeader confidence="0.977917">
4 Method of construction of a well
linked graph
</subsectionHeader>
<bodyText confidence="0.99981925">
An alternating tree was defined by a set of signed
vertices and a set of typed links which link them. We
are now adding two new kinds of entity in order to
facilitate tree-encoding.
</bodyText>
<subsectionHeader confidence="0.950109">
4.1 Colours and anti-colours
4.1.1 Colours
</subsectionHeader>
<bodyText confidence="0.599454454545455">
Let us assign to each vertex in a sequence of trees [-Al,
-A2, ,-An, +B] a colour (originally unknown and
represented by a free variable X) in order that
a) two nodes linked by a type 2 link have same colours
b) two nodes which are not linked or which are linked
by a type-1 link have not the same colours (X Y).
Proposition 8:for every connection graph G with set
of type 1 links Li, the connectivity and acyclicity of G
— Ll translates into: every external link links two nodes
having differents colours. After linking by an external
link, the two colours are equalized (X = Y).
</bodyText>
<subsectionHeader confidence="0.877226">
4.1.2 Anticolours
</subsectionHeader>
<bodyText confidence="0.96991">
Anticolours are assigned to nodes in an alternating tree
in order that
a) two nodes linked by a type 1 link have same
anticolour,
</bodyText>
<listItem confidence="0.795201666666667">
b) if a positive node receives an anticolour a, (by (a) or
by an external link), the negated anticolour —iot is
transmitted to all other positive nodes having same
colour.
Rule:
1) When joining two nodes by an external link, which
are associated with different (positive) anticolours a and
13, a and 13 are said to be equalized, that means: put in a
same multi-set.
2) When joining a node having a negated anticolour -43
to a node having a colour X by an external link, the
anticolour —13 is transmitted to the colour X as a label.
3) When linking two ends of a type 1 link by external
links, the two occurrences of the same (positive)
anticolour a must meet only one colour, or two colours
which have been already equalized and such that one of
the two is not labelled by a negated anticolour —13 if 13 is
an anticolour already equalized to a.
</listItem>
<construct confidence="0.987104222222222">
Proposition 9: in a connection graph G, the strong
connectivity translates into: the anticolour proper to a
type 1 link meets only one colour (or colours which
have been equalized).
Corollary: Every connection graph verifies: CGO,
CG I , CG2 , CG3&apos;, CG4&apos;, CGS&apos;, CG6 where:
CG3&apos; is the condition on unifying anti-colours, CG4&apos;
the conditions on colours, CG5&apos; the fact that any
connection graph is monocoloured.
</construct>
<subsectionHeader confidence="0.9756635">
4.2 Method
4.2.1 Categories
</subsectionHeader>
<bodyText confidence="0.81859">
Definition 9: We call a category any set of 6-tuples
each consisting in:
</bodyText>
<listItem confidence="0.999960833333334">
• a label taken from an alphabet A,
• a sign (+ or -)
• an index (integer),
• a colour (free variable)
• an anticolour (free variable of a second sort)
• the indication of being a root if it is the case.
</listItem>
<bodyText confidence="0.992923">
Definition 10: We call an ordered category a category
where 6-tuples are ordered according to their index.
</bodyText>
<subsubsectionHeader confidence="0.6486705">
Proposition 10: each alternating tree has one and
only one encoding into an ordered category.
</subsubsectionHeader>
<figure confidence="0.9522532">
Examples:
-a
Olt CDFc
0
— d
translates into: [&lt;+,b,1,X,U,_&gt;, &lt;-,d,2,Y,U,_&gt;,
&lt;-,a,4,X,_,r&gt;)
—a
GY-c
— d
</figure>
<figureCaption confidence="0.6910745">
translates into: [&lt;+,b,1,X,—.11,_&gt;, &lt;-,d,2,Y,U,_&gt;,
&lt;+,c,3,X,U,_&gt;, &lt;-,a,4,X,_,r&gt;)
</figureCaption>
<bodyText confidence="0.9178575">
Definition 11: two 6-tuples are said to be mergeable
if:
</bodyText>
<listItem confidence="0.9870133">
• they have same literal label,
• they have opposite signs,
• they have different colours,
• if one of them has an anticolour a, the other must
not have a colour which has been labelled by a negated
anticolour —13 such that a and II have already been
equalized, in a same multiset.
• if one node is the positive root, the other is a
negative root or a negative node just below it in the
same tree (same anticolour).
</listItem>
<page confidence="0.996717">
274
</page>
<figureCaption confidence="0.480232">
fig 1: (three alternating spanning trees = three readings)
</figureCaption>
<figure confidence="0.99690575">
+a 12
-a 3
-a 3
-a 3
</figure>
<sectionHeader confidence="0.215468" genericHeader="method">
4-2-2 A sketch of an algorithm
</sectionHeader>
<bodyText confidence="0.997502362068966">
We scan the ordered list of nodes from left to right,
creating links at each step, between the current node and
all the possible mergeable nodes on its left or just
shifting. When nodes are shifted, they are pushed onto a
stack. Links are recorded on the chart in the following
way. Each link is a node of the chart (in consequence,
the chart has no more than n2 nodes, where n is the
number of nodes on the reading tape R). A link 1 is
joined by arcs in the chart to all links already recorded
11, ... In such that 1 makes a correct partial linking by
insertion into the linkings represented by the paths
arriving at 11, ... In. and 1 has a left extremity which
coincides with either the rightmost right extremity of a
link already recorded on such a path, or with a top of
stack attached to such a previously recorded link. Thus,
a link I may be an arriving point for several paths. In
this case, we will consider 1 as a new starting point.
That means that when joining a new link l&apos; to links
above I in the chart, we only test the correctness of
a partial linking down to the link 1. We consider here
that if 1 is in the chart at this place, there is necessarily
a correct path up to it, and all the partial paths from 1 to
the current node are, by definition, correct. Thus, when
adding a link above 1 (and before a possible new
&amp;quot;crossroads&amp;quot;), even if there are many paths joining 1 to
it, there is at least one correct path from the bottom of
the chart to the current node. Each time a link is
recorded and joined to other ones, we record for each arc
arriving at it, the possible tops of stack, the possible
rightmost right extremities, the list of nodes through
which the path has passed since the previous
embranchment, the list of equalized colours (possibly
labelled with negated anticolours) and the list of
equalized anticolours (for the piece of path coming from
the previous embranchment). When joining a new link,
we have to retrieve a new top of the stack, if added by
consuming a previous one or a previous rightmost right
extremity, and to test the correctness of the path. This
necessitates a descent along paths down to the bottom of
the chart. This descent is made deterministic because of
the informations stored on arcs. If n is the number of
nodes in the original sequent, a maximum of n2 links
may be created, and there can be a maximum of n4 arcs
in the chart. At step i, there can be a maximum of i4
arcs. We add new links on the basis of stack
informations stored on arriving arcs at each previously
recorded link. Each checking does not take more than i
steps, and there are at most i2 nodes to check at step i.
For a given link to add, when looking for new tops of
the stack and checking the correctness of the new
linking, we explore the current state of the chart by
scanning no more than twice (one in one direction, one
in the other) each arc it contains. Thus joining a new
link to previous ones entails a maximum of 217 steps.
At step i, i new links can be added. Thus step i entails a
maximum of 2i8 steps. Thus, when reaching step n, we
have done a maximum of 2Ei8 steps (i=1 to n), that is
0(n9). This is obviously a too big order. Nevertheless,
</bodyText>
<page confidence="0.991586">
275
</page>
<bodyText confidence="0.969312777777778">
the method is time-polynomial and more improvements
can be expected in the future.
Example:
Suppose we have to demonstrate the sequent:
(a/a) / (a/a) a/a a/a a a\a —3 a
(cf fig 1)
At beginning steps 1, 2, 3, 4, nodes are pushed onto the
top of the stack. At step 5, the link (4 5) is created and
recorded in the chart. The new top of stack 3 is attached
to it. At step 6, (3 6) is added (with new top of stack 2),
on the top of the previous link. At step 7, (6 7) is
created and joined to (4 5) (with top of stack 3) and not
to (3 6) (because they have the node 6 in common). (2
7) is joined to (3 6) (with top of stack 1). At step 8, (3
8) is created and joined to (6 7) (with top of stack 2),
but not to (2 7) because of anticolours (7 receives —43
and 8 receives 13 and they have same colour). (1 8) is not
created because they have same colour. At step 9, (2 9)
is created and joined to (3 8), and (8 9) is created too,
but joined to (67) and (2 7). At step 10, (110) is joined
to (8 9), (3 10) is joined to (8 9) and (6 7), (9 10) to (3
8). (7 10) is also joined to (8 9) and (3 8) because 7 is a
rightmost right extremity in paths leading to these
nodes. In such a circumstance, the node previously
linked to the released right extremity, here 2 or 6 is
pushed onto the stack. After that, (2 11) may be added to
(7 10) and (9 10) but not to (2 11) because of
anticolours. And finally, (112) may be joined to (2 11)
and (11 12) to (110). By looking at the list of nodes
attached to links installed in the chart, we see that these
last moves lead to complete linkings. By going down to
the bottom of the chart, we find the three solutions: [1
[2[3 [4 5] 6] 7] [89] 101111 12],[1 [2 [3 [4 5] 6] [7 [8
9] 10] 11] 12] and [1 [2[3 [45] [6 7] 8] [9 10] 11] 12]
(cf fig 2).
fig2: the final chart.
</bodyText>
<equation confidence="0.517725">
(112) (11 12)
/11)
</equation>
<bodyText confidence="0.999332857142857">
correct linking of nodes in an ordered sequence of types
represented as trees. Such a linking corresponds to an
alternating spanning tree in a graph. We have shown
that this method is sound and complete with respect to
the associative product free Lambek calculus and we
have given an idea of what an algorithm for finding such
a spanning tree could be.
</bodyText>
<sectionHeader confidence="0.998903" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.989164">
[Ajducldewicz,1935] K.Ajduckiewicz. Die Syntaktische
Konnexitgt, Studia Philosophica 1, 1-27, engl.
transl. &apos;Syntactic Connexion&apos;, in S. McCall
(ed)(1967), 207-231.
[Busacker and Saaty, 1965] R.Busacker and T.Saaty.
Finite Graphs and Networks, An Introduction with
Applications, McGraw-Hill, New-York.
[Hepple, 1992] Mark Hepple. Chart Parsing Lambek
Grammars: Modal extensions and Incrementality,
Proceedings of COLING, Nantes, 23-28 july.
[Kignig, 1991] Esther Konig. Parsing Categorial
Grammar, DYANA, deliverable 2.1.2.C., reproduced
in [Lecomte, 1992a].
[Ktinig, 1992] Esther Konig. Chart Parsing and the
Treatment of Word Order by Hypothetical Reasoning,
in [Lecomte, 1992a].
[Lecomte, 1992a] Alain Lecomte (ed.).Word Order in
Categorial Grammar, ADOSA, Clermont-Ferrand.
[Lecomte, 1992b] Alain Lecomte. Proof-Nets and
Dependencies, Proceedings of COLING, Nantes, 23-
28 july.
[Moortgat, 1992] Michael Moortgat. Labelled
Deductive Systems for categorial theorem proving.
Proceedings of the 8th Amsterdam Colloquium,
Dekker &amp; Stokhof (eds).
</reference>
<figure confidence="0.9700046">
(710) (310) (110)
(27)
(910)
(29)
67.)
</figure>
<reference confidence="0.860625727272727">
[Roorda, 1991] Dirk Roorda. Resource Logics: Proof-
theoretical Investigations, PhD Thesis, Faculteit van
Wiskunde en Informatica, Amsterdam.
[Roorda, 1992] Dirk Roorda. Proof Nets for Lambek
Calculus, Journal of Logic and Computation, 2(2):
211-233.
5- Conclusion (36) [Wansing, 1990] Heinrich Wansing. Form ulaes-as-
types for a Hierarchy of Sublogics of Intuitionistic
(45) Propositional Logic. Gruppe ftir Logik,
Wissentheorie und Information an der Freien
Universitat Berlin.
</reference>
<bodyText confidence="0.985953">
We have presented a conception of parsing essentially
based on a geometrical viewpoint. It amounts to build a
</bodyText>
<page confidence="0.997285">
276
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.294490">
<title confidence="0.9910905">Towards efficient parsing with proof-nets</title>
<author confidence="0.996795">Main Lecomte</author>
<affiliation confidence="0.771133666666667">GRIL Universite Blaise Pascal 63037-Clermont-Ferrand</affiliation>
<address confidence="0.816073">France</address>
<email confidence="0.99932">lecomte@shm.grenet.fr</email>
<abstract confidence="0.986858722222222">This paper presents a method for parsing associative Lambek grammars based on graphtheoretic properties. Connection graphs, which are a simplified version of proof-nets, are actually a mere conservative extension of the earlier method of syntactic connexion, discovered by Ajducldewicz [1935]. The method amounts to find alternating spanning trees in graphs. A sketch of an algorithm for finding such a tree is provided. Interesting properties of time-complexity for this method are expected. It has some similarities with chart-parsing ([Konig, 1991, 1992], [Hepple, 1992]) but is different at least in the fact that intervals are here edges and words are vertices (or trees) instead of the contrary in classical chartparsing.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>Die</author>
</authors>
<title>Syntaktische Konnexitgt,</title>
<journal>Studia Philosophica</journal>
<volume>1</volume>
<pages>1--27</pages>
<marker>[Ajducldewicz,1935]</marker>
<rawString>K.Ajduckiewicz. Die Syntaktische Konnexitgt, Studia Philosophica 1, 1-27, engl. transl. &apos;Syntactic Connexion&apos;, in S. McCall (ed)(1967), 207-231.</rawString>
</citation>
<citation valid="false">
<authors>
<author>R Busacker</author>
</authors>
<title>T.Saaty. Finite Graphs and Networks, An Introduction with Applications,</title>
<location>McGraw-Hill, New-York.</location>
<marker>[Busacker and Saaty, 1965]</marker>
<rawString>R.Busacker and T.Saaty. Finite Graphs and Networks, An Introduction with Applications, McGraw-Hill, New-York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Hepple</author>
</authors>
<title>Chart Parsing Lambek Grammars: Modal extensions and Incrementality,</title>
<date></date>
<booktitle>Proceedings of COLING,</booktitle>
<location>Nantes,</location>
<marker>[Hepple, 1992]</marker>
<rawString>Mark Hepple. Chart Parsing Lambek Grammars: Modal extensions and Incrementality, Proceedings of COLING, Nantes, 23-28 july.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Esther Konig</author>
</authors>
<title>Parsing Categorial Grammar, DYANA, deliverable 2.1.2.C., reproduced in [Lecomte,</title>
<date>1992</date>
<marker>[Kignig, 1991]</marker>
<rawString>Esther Konig. Parsing Categorial Grammar, DYANA, deliverable 2.1.2.C., reproduced in [Lecomte, 1992a].</rawString>
</citation>
<citation valid="true">
<authors>
<author>Esther Konig</author>
</authors>
<title>Chart Parsing and the Treatment of Word Order by Hypothetical Reasoning, in [Lecomte,</title>
<date>1992</date>
<marker>[Ktinig, 1992]</marker>
<rawString>Esther Konig. Chart Parsing and the Treatment of Word Order by Hypothetical Reasoning, in [Lecomte, 1992a].</rawString>
</citation>
<citation valid="false">
<booktitle>Alain Lecomte (ed.).Word Order in Categorial Grammar, ADOSA, Clermont-Ferrand.</booktitle>
<marker>[Lecomte, 1992a]</marker>
<rawString>Alain Lecomte (ed.).Word Order in Categorial Grammar, ADOSA, Clermont-Ferrand.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alain Lecomte</author>
</authors>
<title>Proof-Nets and Dependencies,</title>
<date></date>
<booktitle>Proceedings of COLING,</booktitle>
<location>Nantes,</location>
<marker>[Lecomte, 1992b]</marker>
<rawString>Alain Lecomte. Proof-Nets and Dependencies, Proceedings of COLING, Nantes, 23-28 july.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Michael Moortgat</author>
</authors>
<title>Labelled Deductive Systems for categorial theorem proving.</title>
<booktitle>Proceedings of the 8th Amsterdam Colloquium, Dekker &amp; Stokhof</booktitle>
<marker>[Moortgat, 1992]</marker>
<rawString>Michael Moortgat. Labelled Deductive Systems for categorial theorem proving. Proceedings of the 8th Amsterdam Colloquium, Dekker &amp; Stokhof (eds).</rawString>
</citation>
<citation valid="false">
<authors>
<author>Dirk Roorda</author>
</authors>
<title>Resource Logics: Prooftheoretical Investigations, PhD Thesis, Faculteit van Wiskunde en Informatica,</title>
<location>Amsterdam.</location>
<marker>[Roorda, 1991]</marker>
<rawString>Dirk Roorda. Resource Logics: Prooftheoretical Investigations, PhD Thesis, Faculteit van Wiskunde en Informatica, Amsterdam.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dirk Roorda</author>
</authors>
<title>Proof Nets for Lambek Calculus,</title>
<date>1990</date>
<journal>Journal of Logic and Computation,</journal>
<volume>2</volume>
<issue>2</issue>
<pages>211--233</pages>
<location>Berlin.</location>
<marker>[Roorda, 1992]</marker>
<rawString>Dirk Roorda. Proof Nets for Lambek Calculus, Journal of Logic and Computation, 2(2): 211-233. 5- Conclusion (36) [Wansing, 1990] Heinrich Wansing. Form ulaes-astypes for a Hierarchy of Sublogics of Intuitionistic (45) Propositional Logic. Gruppe ftir Logik, Wissentheorie und Information an der Freien Universitat Berlin.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>