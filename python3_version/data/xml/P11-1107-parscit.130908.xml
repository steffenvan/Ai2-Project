<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000402">
<title confidence="0.9886065">
Metagrammar Engineering:
Towards systematic exploration of implemented grammars
</title>
<author confidence="0.981068">
Antske Fokkens
</author>
<affiliation confidence="0.8067805">
Department of Computational Linguistics, Saarland University &amp;
German Research Center for Artificial Intelligence (DFKI) Project Office Berlin
</affiliation>
<address confidence="0.914507">
Alt-Moabit 91c, 10559 Berlin, Germany
</address>
<email confidence="0.988086">
afokkens@coli.uni-saarland.de
</email>
<page confidence="0.981351">
06
</page>
<sectionHeader confidence="0.987708" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.99989092">
When designing grammars of natural lan-
guage, typically, more than one formal anal-
ysis can account for a given phenomenon.
Moreover, because analyses interact, the
choices made by the engineer influence the
possibilities available in further grammar de-
velopment. The order in which phenomena
are treated may therefore have a major impact
on the resulting grammar. This paper proposes
to tackle this problem by using metagrammar
development as a methodology for grammar
engineering. I argue that metagrammar engi-
neering as an approach facilitates the system-
atic exploration of grammars through compar-
ison of competing analyses. The idea is illus-
trated through a comparative study of auxil-
iary structures in HPSG-based grammars for
German and Dutch. Auxiliaries form a cen-
tral phenomenon of German and Dutch and
are likely to influence many components of
the grammar. This study shows that a spe-
cial auxiliary+verb construction significantly
improves efficiency compared to the standard
argument-composition analysis for both pars-
ing and generation.
</bodyText>
<sectionHeader confidence="0.999336" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.998742948717949">
One of the challenges in designing grammars of nat-
ural language is that, typically, more than one for-
mal analysis can account for a given phenomenon.
The criteria for choosing between competing analy-
ses are fairly clear (observational adequacy, analyti-
cal clarity, efficiency), but given that analyses of dif-
ferent phenomena interact, actually evaluating anal-
yses on those criteria in a systematic manner is far1
from straightforward. The standard methodology in-
volves either picking one analysis, and seeing how
it goes, then backing out if it does not work out,
or laboriously adapting a grammar to two versions
supporting different analyses (Bender, 2010). The
former approach is not in any way systematic, in-
creasing the risk that the grammar is far from opti-
mal in terms of efficiency. The latter approach po-
tentially causes the grammar engineer an amount of
work that will not scale for considering many differ-
ent phenomena.
This paper proposes a more systematic and
tractable alternative to grammar development: meta-
grammar engineering. I use “metagrammar” as a
generic term to refer to a system that can generate
implemented grammars. The key idea is that the
grammar engineer adds alternative plausable anal-
yses for linguistic phenomena to a metagrammar.
This metagrammar can generate all possible com-
binations of these analyses automatically, creating
different versions of a grammar that cover the same
phenomena. The engineer can test directly how
competing analyses for different phenomena inter-
act, and determine which combinations are possible
(after minor adaptations) and which analyses are in-
compatible.
The idea of metagrammar engineering is illus-
trated here through a case study of word order and
auxiliaries in Germanic languages, which forms the
second goal of this paper. Auxiliaries form a central
phenomenon of German and Dutch and are likely to
</bodyText>
<footnote confidence="0.667232333333333">
influence many components of the grammar. The re-
sults show that the analysis of auxiliary+verb struc-
6tures presented in Bender (2010) significantly im-
</footnote>
<note confidence="0.986482">
Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 1066–1076,
Portland, Oregon, June 19-24, 2011. c�2011 Association for Computational Linguistics
</note>
<bodyText confidence="0.99959145">
proves efficiency of the grammar compared to the
standard argument-composition analysis within the
range of phenomena studied. Because future re-
search is needed to determine whether the auxil-
iary+verb alternative can interact properly with ad-
ditional phenomena and still lead to more efficient
results than argument-composition, it is particularly
useful to have a grammar generator that can auto-
matically create grammars with either of the two
analyses.
The remainder of this paper starts with the case
study. Section 2 provides a description of the con-
text of the study. The relevant linguistic properties
and alternative analyses are described in Sections
3 and 4. After evaluating and discussing the case
study’s results, I return to the general approach of
metagrammar engineering. Section 6 presents re-
lated work on metagrammars. It is followed by a
conclusion and discussion on using metagrammars
as a methodology for grammar engineering.
</bodyText>
<sectionHeader confidence="0.9976085" genericHeader="introduction">
2 A metagrammar for Germanic
Languages
</sectionHeader>
<subsectionHeader confidence="0.987074">
2.1 The LinGO Grammar Matrix
</subsectionHeader>
<bodyText confidence="0.999925304347826">
forth choices file). The customization system takes
this choices file as input to create grammar frag-
ments, using so-called “libraries” that contain imple-
mentations of cross-linguistically variable phenom-
ena. Depending on the definitions provided in the
choices file, different analyses are retrieved from the
customization system’s libraries. The language spe-
cific implementations inherit from a core grammar
which handles basic phrase types, semantic compo-
sitionality and general infrastructure, such as feature
geometry (Bender et al., 2002).
The present study is part of a larger effort to im-
prove the customization library for auxiliary struc-
tures in free word order and verb second languages.
It examines whether Bender’s observations concern-
ing an improved analysis for auxiliaries in Wambaya
(Bender, 2010) also hold for Germanic languages. A
more elaborate study of German and Dutch (includ-
ing both Flemish and (Northern) Dutch, which have
slightly different word order constraints) is informa-
tive, because these languages are well-described and
known to have distinctly challenging word order be-
havior.
</bodyText>
<subsectionHeader confidence="0.998323">
2.2 Germanic branch
</subsectionHeader>
<bodyText confidence="0.999664">
The LinGO Grammar Matrix (Bender et al., 2002; In order to create grammars for Germanic lan-
Bender et al., 2010) provides the main context for guages, a specialized branch of the Grammar Ma-
the experiments described in this paper. To begin trix customization system was developed. This Ger-
with, its further development plays a significant role manic grammars generator uses the Grammar Ma-
for the motivation of the present study. More impor- trix’s facilities to generate types in type description
tantly, the Germanic metagrammar is implemented language (tdl). At present, the generator uses the
as a special branch of the LinGO Grammar Matrix Grammar Matrix analyses for agreement and case
and uses a significant amount of its code. marking as well as basics from its morphotactics,
The Grammar Matrix customization system al- coordination and lexicon implementations.
lows users to derive a starter grammar for a particu- In the first stage, the word order library and aux-
lar language from a common multi-lingual resource iliary implementation were extended to cover two
by specifying linguistic properties through a web- alternative analyses for Germanic word order (see
based questionnaire. The grammars are intended for Section 4). The coordination library was adapted to
parsing and generation with the LKB (Copestake, ensure correct interactions with the new word order
2002) using Minimal Recursion Semantics (Copes- analyses and agreement. The morphotactics library
take et al., 2005, MRS) as parsing output and gener- was extended to cover Dutch and Flemish interac-
ation input. After the starter grammar has been cre- tions between word order and morphology. Finally,
ated, its development continues independently: en- the lexicon and verbal case pattern implementations
gineers can thus make modifications to their gram- were extended to cover ditransitive verbs.
mar without affecting the multi-lingual resource. Both versions of word order analyses can be
Internally, the customization system works as fol- tweaked to include or exclude a rarely occurring
lows: The web-based questionnaire registers lin- variant of partial VP fronting (see Section 4.3) re-
guistic properties in a file called “choices” (hence-10 67sulting in four distinct grammars for each of the
</bodyText>
<table confidence="0.979538222222222">
Vorfeld LB Mittelfeld RB Nachfeld
Der Mann hat den Jungen gesehen nach der Party
The man.nom has the boy.acc seen after the party
Der Mann hat den Jungen nach der Party gesehen nach der Party
Den Jungen hat der Mann gesehen
Nach der Party hat der Mann den Jungen gesehen
Den Jungen gesehen hat der Mann nach der Party
Gesehen hat der Mann den Jungen nach der Party
The man saw the boy after the party
</table>
<tableCaption confidence="0.999858">
Table 1: Basic structure of German word order (not exhaustive)
</tableCaption>
<page confidence="0.99335">
1068
</page>
<bodyText confidence="0.991297666666667">
languages under investigation. These 12 grammars
cover Dutch, Flemish and German main clauses with
up to three core arguments.1
</bodyText>
<sectionHeader confidence="0.995801" genericHeader="method">
3 Germanic word order
</sectionHeader>
<subsectionHeader confidence="0.99144">
3.1 German word order
</subsectionHeader>
<bodyText confidence="0.999214384615385">
Topological fields (Erdmann, 1886; Drach, 1937)
form the easiest way to describe German word or-
der. The sentence structure for declarative main
clauses, consists of five topological fields: Vorfeld
(“pre-field”), Left Bracket (LB), Mittelfeld (“middle
field”), Right Bracket (RB) and the Nachfeld (“after
field”). A subset of permissible alternations in Ger-
man are provided in Table 1. The last two sentences
present an example of partial VP fronting.
The fields are defined with regard to verbal forms,
which are placed in the Left and Right Brackets.
Each topological field has word order restrictions
of its own. The Vorfeld must contain exactly one
constituent in an affirmative main clause. The Left
Bracket contains the finite verb and no other ele-
ments. Other verbal forms (if not fronted to the Vor-
feld) must be placed in the Right Bracket. Most non-
verbal elements are placed in the Mittelfeld. When
main verbs are placed in the Vorfeld, their object(s)
may stay in the Mittelfeld. This kind of partial VP
fronting is illustrated by the last example in Table 1.
The Nachfeld typically contains subordinate clauses
and sometimes adverbial phrases.
In German, the respective order between the verbs
in the Right Bracket is head-final, i.e. auxiliaries fol-
low their complements. The only exception is the
</bodyText>
<footnote confidence="0.97821">
1The grammar generation system also creates Danish gram-
mars. Danish results are not presented, because the language
does not pose the challenges explained in Section 4.
</footnote>
<bodyText confidence="0.855469">
auxiliary flip: under certain conditions in subordi-
nate clauses, the finite verb precedes all other verbal
forms.
</bodyText>
<subsectionHeader confidence="0.998487">
3.2 Dutch word order
</subsectionHeader>
<bodyText confidence="0.999806666666667">
Dutch word order reveals the same topological fields
as German. There are two main differences between
the languages where word order is concerned. First,
whereas the order of arguments in the German Mit-
telfeld allows some flexibility depending on infor-
mation structure, Dutch argument order is fixed, ex-
cept for the possibility of placing any argument in
the Vorfeld. A related aspect is that Dutch is less
flexible as to what partial VPs can be placed in the
Vorfeld.
The second difference is the word order in the
Right Bracket. The order of auxiliaries and their
complements is less rigid in Dutch and typically
auxiliary-complement, the inverse of German order.
Most Dutch auxiliaries can occur in both orders, but
this may be restricted according to their verb form.
Four groups of auxiliary verbs can be distinguished
that have different syntactic restrictions.
</bodyText>
<listItem confidence="0.9961787">
1. Verbs selecting for participles which may ap-
pear on either side of their complement (e.g.
hebben (“have”), zijn (“be”)).
2. Verbs selecting for participles which prefer to
follow their complement and must do so if they
are in participle form themselves (e.g. blijven
(“remain”), krijgen (“get”)).
3. Modals selecting for infinitives which prefer to
precede their complement and must do so if
they appear in infinitive form themselves.
</listItem>
<bodyText confidence="0.753126833333333">
VF LB MF RB
De man zou haar kunnen hebben gezien
the man would her.acc can have seen
De man zou haar gezien kunnen hebben
%De man zou haar kunnen gezien hebben
The man should have been able to see her
</bodyText>
<tableCaption confidence="0.988563">
Table 2: Variations of Dutch auxiliary order
</tableCaption>
<bodyText confidence="0.992908076923077">
4. Verbs selecting for “to infinitives” which must
precede their complement.
While there is some variation among speakers,
the generalizations above are robust. The permitted
variations assuming a verb of the 3rd and 1st cate-
gory in the right bracket are presented in Table 2.2
The variant %De man zou haar kunnen gezien
hebben is typical of speakers from Belgium (Hae-
seryn, 1997); speakers from the Netherlands tend to
regard such structures as ungrammatical. Our sys-
tem can both generate a Flemish grammar accepting
all of the above and a (Northern) Dutch grammar,
rejecting the third variant.
</bodyText>
<sectionHeader confidence="0.938532" genericHeader="method">
4 Alternative auxiliary approaches
</sectionHeader>
<bodyText confidence="0.9999834">
This section presents the alternative analyses for
auxiliary-verb structures in Germanic languages
compared in this study. For reasons of space, I limit
my description to an explanation of the differences
and relevance of the compared analyses.3
</bodyText>
<subsectionHeader confidence="0.999215">
4.1 Argument-composition
</subsectionHeader>
<bodyText confidence="0.9949792">
The standard analysis for German and Dutch
auxiliaries in HPSG is a so-called “argument-
composition” analysis (Hinrichs and Nakazawa,
1994), which I will explain through the following
Dutch example:4
</bodyText>
<equation confidence="0.9601695">
(1) Ik
I
</equation>
<bodyText confidence="0.924503666666667">
“I would like to read the book.”
In the sentence above, the auxiliary willen “want”
separates the verb lezen “read” from its object het
</bodyText>
<footnote confidence="0.515109">
2Note that the same orders as in the Right Brackets may also
occur in the Vorfeld (with or without the object).
3Details of the implementations can be found by using the
metagrammar, which can be found on my homepage.
4Hinrichs and Nakazawa (1994) present an analysis for the
German auxiliary flip. The relevant observations are the same.106
</footnote>
<page confidence="0.517712">
2
</page>
<figure confidence="0.827955625">
6 6 6 6VAL
4 2 3 3
6 / 3 7 7
6HEAD verb \\ 7 7
6 COMPS 1�, 255
SUBJ 1
VAL �SUBJ
COMPS 2]
</figure>
<figureCaption confidence="0.998976">
Figure 1: Standard Auxiliary Subcategorization
</figureCaption>
<bodyText confidence="0.999952947368421">
boek “the book”. A parser respecting surface order
can thus not combine lezen and het boek before com-
bining willen and lezen.
The argument-composition analysis was intro-
duced to make sure that het boek can be picked up
as the object of the embedded verb lezen. The sub-
categorization of an auxiliary under this analysis is
presented in Figure 1. The subject of the auxiliary
is identical to the subject of the auxiliary’s com-
plement. Its complement list consists of the con-
catenation of the verbal complement and any com-
plement this verbal complement may select for. In
the sentence above, willen will add the subject and
the object of lezen to its own subcatorization lists.5
This standard solution for auxiliary-verb structures
is (with minor differences) also what is provided by
the Matrix customization system.
Argument-composition can capture the grammat-
ical behavior of auxiliaries in German and Dutch.
However, grammaticality and coverage is not all
that matters for grammars of natural language. Ef-
ficiency remains an important factor, and argument-
composition has some undesirable properties on this
level. The problem lies in the fact that lexical en-
tries of auxiliaries have underspecified elements on
their subcategorization lists. With the current chart
parsing and chart generation algorithms (Carroll and
Oepen, 2005), an auxiliary in a language with flex-
ible word order will speculatively add edges to the
chart for potential analyses with the adjacent con-
stituent as subject or complement. Because the
length of the lists are underspecified as well, it can
continue wrongly combining with all elements in the
string. In the worse case scenario, the number of
edges created by an auxiliary grows exponentially in
the number of words and constituents in the string.
The efficiency problem is even worse for generation:
while the parser is restricted by the surface order of
</bodyText>
<footnote confidence="0.9983135">
5In the semantic representation, both arguments will be di-
9rectly related to the main verb exclusively.
</footnote>
<figure confidence="0.953905545454545">
zou het boek willen lezen.
would the book want read.
#3
DˆHEAD verb˜E 5
forms in the verbal cluster, as illustrated in (2) for
Dutch:
2
`i´4VAL
&amp;quot;SUBJ ��
COMPS
(2) Gezien zou de man haar kunnen hebben.
Seen should the man her can have
“The man should have been able to see her.”
2 &amp;quot; #
SUBJ 1
6 VAL
6 COMPS 2
6 6 6HEAD-DTRIVALI COMPS 3&amp;quot;SUBJ ##
NON-HEAD-DTR 3 &amp;quot;VAL COMPS 1 2
3
5 7 7 7 7 7 7
`ii´
</figure>
<figureCaption confidence="0.999215">
Figure 2: Auxiliary lexical type (i) and Auxiliary+verb
construction (ii) under alternative analysis
</figureCaption>
<bodyText confidence="0.9995">
the string, the generator will attempt to combine all
lexical items suggested by the input semantics, as
well as lexical items with empty semantics, in ran-
dom order.
</bodyText>
<subsectionHeader confidence="0.930928">
4.2 Aux+verb construction
</subsectionHeader>
<bodyText confidence="0.999971285714286">
Bender (Bender, 2010)6 presents an alternative ap-
proach to auxiliary-verb structures for the Australian
language Wambaya. The analysis introduces auxil-
iaries that only subcategorize for one verbal com-
plement, not raising any of the complement’s ar-
guments or its subject. Auxiliaries combine with
their complement using a special auxiliary+verb
rule. Figure 2 presents this alternative solution. In
principle, the new analysis uses the same technique
as argument composition. The difference is that the
auxiliary now starts out with only one element in its
subcategorization lists and can only combine with
potential verbal complements that are appropriately
constrained. The structure that combines the auxil-
iary with its complement places the remaining ele-
ments on the complement’s SUBJ and COMPS lists
on the respective lists of the newly formed phrase,
as can be seen in Figure 2 (ii). The constraints on
raised arguments are known when the construction
applies. The efficiency problem sketched above is
thus avoided.
</bodyText>
<subsectionHeader confidence="0.985224">
4.3 A small wrinkle: partial VP fronting
</subsectionHeader>
<bodyText confidence="0.998573333333333">
In its basic form, the auxiliary+verb structure cannot
handle partial VP fronting where the main verb is
placed in first position leaving one or more verbal
</bodyText>
<footnote confidence="0.6273245">
6Bender credits the key idea behind this analysis to Dan
Flickinger (Bender, 2010). 107
</footnote>
<bodyText confidence="0.999884064516129">
The problem is that hebben “have” cannot com-
bine with gezien “seen”, because they are sepa-
rated by the head of the clause. Because the verb
hebben cannot combine with its complement, it can-
not raise its complement’s arguments either: the
auxiliary+verb analysis only permits raising when
auxiliary and complement combine.
This shortcoming is no reason to immediately dis-
miss the proposal. Structures such as (2) are ex-
tremely rare. The difference in coverage of a parser
that can and a parser that cannot handle such struc-
tures is likely to be tiny, if present at all, nor is it
vital for a sentence generator to be able to produce
them. However, a correct grammar should be able to
analyze and produce all grammatical structures.
I implemented an additional version of the aux-
iliary+verb construction using two rather complex
rules that capture examples such as (2). Because
the structure in (2) also presented difficulties for
the argument-composition analysis in Dutch, I tested
both of the analyses with and without the inclusion
of these structures. In the ideal case, the full cov-
erage version will remain efficient enough as the
grammar grows. But if this turns out not to be the
case, the decision can be made to exclude the ad-
ditional rule from the grammar or to use it as a ro-
bustness rule that is only called when regular rules
fail. Given the metagrammar engineering approach,
it will be straightforward to decide at a later point to
exclude the special rule, if corpus studies reveal this
is favourable.
</bodyText>
<sectionHeader confidence="0.978494" genericHeader="method">
5 Grammars and evaluation
</sectionHeader>
<subsectionHeader confidence="0.670576">
5.1 Experimental set-up
</subsectionHeader>
<bodyText confidence="0.9989692">
As described above, the Germanic metagrammar is
a branch of the customization system. As such, it
takes a choices file as input to create a grammar. The
basic choices files for Dutch and German were cre-
0ated through the LinGO Grammar Matrix web inter-
</bodyText>
<page confidence="0.961528">
1071
</page>
<table confidence="0.999922333333333">
Complete Set Reduced Set
Positive Total Positive Total Av.
s s s s w/s
Du 177 14654 138 14591 6.61
Fl 195 14654 156 14606 6.61
Ge 116 6926 84 6914 6.65
</table>
<tableCaption confidence="0.971185">
Table 3: Number of test examples (s) used in evaluation
and average words per sentence (w/s)
</tableCaption>
<bodyText confidence="0.999874885714286">
face.7 The choices files defined artificial grammars
with a dummy vocabulary. The system can produce
real fragments of the languages, but strings repre-
senting syntactic properties through dummy vocab-
ulary were used to give better control over ambiguity
facilitating the evaluation of coverage and overgen-
eration of the grammars. The grammars have a lexi-
con of 9-10 unambiguous dummy words.
The created choices files were extended offline to
define those properties that the Germanic metagram-
mar captures, but are not incorporated in the Matrix
customization system. This included word order of
the auxiliary and complement, fixed or free argu-
ment order, influence of inflection on word order,
a more elaborate case hierarchy, ditransitive verbs,
and the choice of auxiliary/verb analysis. Four
choices files with different combinations of analy-
ses were created for each language, resulting in 12
choices files in total.
A basic test suite was developed that covers in-
transitive, transitive and ditransitive main clauses
with up to three auxiliaries. The German set was
based on a description provided by Kathol (2000),
Dutch and Flemish were based on Haeseryn (1997).
For each verb and auxiliary combination, all permis-
sible word orders were defined based on descriptive
resources. In order to make sure the grammars do
not reveal unexpected forms of overgeneration, all
possible ungrammatical orders were automatically
generated. Table 3 provides the sizes of the test
suites. Each language has both a complete set for
the 6 grammars that provide full coverage, and a re-
duced set for the 6 grammars that can not handle
split verbal clusters (see Section 4.3 for the motiva-
tion to test grammars that do not have full coverage).
</bodyText>
<footnote confidence="0.964086">
7http://www.delph-in.net/matrix/
customize/
</footnote>
<bodyText confidence="0.999865615384615">
Each grammar was created using the metagram-
mar, ensuring that all components except the com-
peting analyses were held constant among compared
grammars. The [incr tsdbo ] competence and per-
formance profiling environment (Oepen, 2001) was
used in combination with the LKB to evaluate pars-
ing performance of the individual grammars on the
test suites. For each grammar, the number of re-
quired parsing tasks, memory (space) and CPU time
per sentence, as well as the number of passive edges
created during an average parse were compared.
Performance on language generation was evaluated
using the LKB.
</bodyText>
<subsectionHeader confidence="0.999514">
5.2 Parsing results
</subsectionHeader>
<bodyText confidence="0.999993166666667">
Table 4 presents the results from the parsing ex-
periment. Note that all directly compared gram-
mars have the same empirical coverage (100% cov-
erage and 0% overgeneration on the phenomena in-
cluded in the test suites). The comparison there-
fore addresses the effect on efficiency of the al-
ternative analyses. Three tests per grammar were
carried out: one on positive data, one on nega-
tive data and one on the complete dataset. Re-
sults were similar for all three sets, with slightly
larger differences in efficiency for negative exam-
ples. For reasons of space, only the results on pos-
itive examples are presented, which are more rele-
vant for most applications involving parsing. The
results show that the auxiliary+verb (aux+v) leads to
a more efficient grammar according to all measures
used. There is an average reduction of 73.2% in per-
formed tasks, 56.3% in produced passive edges and
32.9% in memory when parsing grammatical exam-
ples using the auxiliary+verb structure compared to
argument-composition. CPU-time per sentence also
improved significantly, but, due to the short average
sentence length (5-10 words) the value is too small
for exact comparison with [incr tsdbo ].
</bodyText>
<subsectionHeader confidence="0.993445">
5.3 Sentence generation evaluation
</subsectionHeader>
<bodyText confidence="0.9987414">
The complete coverage versions of Dutch and Ger-
man were used to create the exhaustive set of sen-
tences with an intransitive, transitive and ditransitive
verb combined with none, one or two auxiliaries but
rapidly loses ground when one or more auxiliaries8
</bodyText>
<footnote confidence="0.913378">
8All auxiliaries in the grammars contribute an ep.
</footnote>
<page confidence="0.979766">
07
</page>
<table confidence="0.999924375">
Average Performed Tasks
Compl. Cov. Gram. No Split Cl. Gram.
arg-comp aux+v arg-comp aux+v
Du 524 149 480 134
Fl 529 150 483 137
Ge 684 148 486 136
Average Created Edges
Compl. Cov. Gram. No Split Cl. Gram.
arg-comp aux+v arg-comp aux+v
Du 58 25 52 25
Fl 58 26 52 25
Ge 67 23 52 24
Average Memory Use (kb)
Compl. Cov. Gram. No Split Cl. Gram.
arg-comp aux+v arg-comp aux+v
Du 9691 6692 8944 6455
Fl 9716 6717 8989 6504
Ge 10289 5675 8315 5468
Average CPU Time (s)
Compl. Cov. Gram. No Split Cl. Gram.
arg-comp aux+v arg-comp aux+v
Du 0.04 0.02 0.03 0.01
Fl 0.04 0.02 0.03 0.01
Ge 0.06 0.01 0.04 0.01
</table>
<tableCaption confidence="0.999803">
Table 4: Parsing results positive examples
</tableCaption>
<bodyText confidence="0.999861090909091">
from a total of 18 MRSs. The input MRSs were ob-
tained by parsing a sentence with canonical word or-
der. Both versions provide the same set of sentences
as output, confirming their identical empirical cover-
age. Table 5 presents the number of edges required
by the generator to produce the full set of generated
sentences from a given MRS. The cells with no num-
ber represent conditions under which the LKB gen-
erator reaches the maximum limit of edges, set at
40,000, without completing its exhaustive search.
The grammar using argument-composition is
slightly more efficient when there are no aux-
iliaries, are added, in particular when sentence
length increases: For ditransitive verbs (dv), the
Dutch argument-composition grammar maxes out
the 40,000 edge limit with two auxiliaries, whereas
the auxiliary+verb grammar creates 910 edges, a
manageable number. Due to the more liberal order
of arguments, results are even worse for German:
the argument-composition grammar reaches its limit
with the first auxiliary for ditransitive verbs. These
results indicate that the auxiliary+verb analysis is1
</bodyText>
<table confidence="0.999222090909091">
Required edges
Du No Aux 1 Aux 2 Aux
arg-c aux+v arg-c aux+v arg-c aux+v
iv 54 57 221 99 792 248
tv 124 141 1311 211 7455 500
dv 212 230 14968 378 – 910
Ge No Aux 1 Aux 2 Aux
arg-c aux+v arg-c aux+v arg-c aux+v
iv 54 57 295 84 1082 165
tv 130 142 4001 212 18473 422
dv 306 351 – 608 – 1379
</table>
<tableCaption confidence="0.999913">
Table 5: Performance on Sentence Generation
</tableCaption>
<bodyText confidence="0.9893915">
strongly preferable where natural language genera-
tion is concerned.
</bodyText>
<subsectionHeader confidence="0.970589">
5.4 In summary
</subsectionHeader>
<bodyText confidence="0.999671244444445">
The results of the experiment presented above show
that avoiding underspecified subcategorization lists,
as found in the standard argument-composition anal-
ysis, significantly increases the efficiency of the
grammar for both parsing and generation. On av-
erage, they show a reduction of 73.2% in performed
tasks, 56.3% in produced passive edges and 32.9%
in memory for parsing. In generation experiments,
results are even more impressive: the reduction of
edges for German sentences with one auxiliary and
a ditransitve verb is at least 98.5%. These results
show that the auxiliary+verb alternative should be
considered seriously as an alternative to the HPSG
standard analysis of argument-composition, though
further investigation in a larger context is needed be-
fore final conclusions can be drawn.
Future work will focus on increasing the cover-
age of the grammars, as well as the number of al-
ternative options explored. In particular, both ap-
proaches for auxiliaries should be compared us-
ing alternative analyses for verb-second word order
found in other HPSG-based grammars, such as the
GG (M¨uller and Kasper, 2000; Crysmann, 2005),
Grammix (M¨uller, 2009; M¨uller, 2008) and Cheetah
(Cramer and Zhang, 2009) for German, and Alpino
(Bouma et al., 2001) for Dutch. These grammars
may use approaches that somewhat reduce the prob-
lem of argument-composition, leading to less sig-
nificant differences between the auxiliary+verb and
argument-composition analyses. On the other hand,
2planned extensions that cover modification and sub-
ordinate clauses will increase local ambiguities. The
advantage of the auxiliary+verb analysis is likely to
become more important as a result.
In addition to providing a clearer picture of aux-
iliary structures, these extensions will also lead to
a better insight into efforts involved in using gram-
mar generation to explore alternative versions of a
grammar over time. In particular, it should pro-
vide an indication of the feasibility of maintaining
a higher number of competing analyses as the gram-
mar grows. After providing background on related
metagrammar projects and their goals, I will elabo-
rate on the importance of systematic exploration of
grammars in the discussion.
</bodyText>
<sectionHeader confidence="0.999896" genericHeader="method">
6 Related work
</sectionHeader>
<bodyText confidence="0.999970846153846">
Metagrammars (or grammar generators) have been
established in the field for over a decade. This sec-
tion provides an overview of the goals and set-up of
some of the most notable projects.
The MetaGrammar project (Candito, 1998; de la
Clergerie, 2005; Kinyon et al., 2006) started as
an effort to encode syntactic knowledge in an ab-
stract class hierarchy. The hierarchy can contain
cross-linguistically invariable properties and syntac-
tic properties that hold across frameworks (Kinyon
et al., 2006). The factorized descriptions of Meta-
Grammar support Tree-Adjoining Grammars (Joshi
et al., 1975, TAG) as well as Lexical Functional
Grammars (Bresnan, 2001, LFG). The eXtensible
MetaGrammar (Crabb´e, 2005, XMG) defines its
MetaGrammar as classes that are part of a multiple
inheritance hierarchy. Kinyon et al. (Kinyon et al.,
2006) use XMG to perform a cross-linguistic com-
parison of verb-second structures. Their study fo-
cuses on code-sharing between the languages, but
does not address the problem of competing analyses
investigated in this paper.
The GF Resource Grammar Library (Ranta, 2009)
is a multi-lingual linguistic resource that contains a
set of syntactic analyses implemented in GF (Gram-
matical Framework). The purpose of the library is
to allow engineers working on NLP applications to
write simple grammar rules that can call more com-
plex syntactic implementations from the grammar li-
brary. The grammar library is written by researchers
with linguistic expertise. It makes extensive use
code sharing: general categories and constructions
that are used by all languages are implemented in
a core syntax grammar. Each language9 has its own
lexicon and morphology, as well as a set of language
specific syntactic structures. Code sharing also takes
place between the subset of languages explored, in
particular by means of common modules for Ro-
mance languages and for Scandanavian languages.
PAWS creates PC-PATR (McConnel, 1995) gram-
mars based on field linguists’ input. The main
purpose of PAWS lies in descriptive grammar writ-
ing and “computer-assisted related language adap-
tation”, where the grammar is used to map words
from a text in a source language to a target language.
PAWS differs from the other projects discussed here,
because grammar engineering or syntactic research
are not the main focus of the project.
The LinGO Grammar Matrix, described in Sec-
tion 2.1, is most closely related to the work pre-
sented in this paper. Like the other projects reviewed
here, the Grammar Matrix does not offer alterna-
tive analyses for the same phenomenon. Moreover,
starter grammars created by the Grammar Matrix are
developed manually and individually after their cre-
ation. The approach taken in this paper differs from
the original goal of the Grammar Matrix in that it
continues the development of new grammars within
the system, introducing a novel application for meta-
grammars. By using a metagrammar to store alter-
native analyses, grammars can be explored system-
atically over time. As such, the paper introduces a
novel methodology for grammar engineering. The
discussion and conclusion will elaborate on the ad-
vantages of the approach.
</bodyText>
<sectionHeader confidence="0.989365" genericHeader="discussions">
7 Discussion and conclusion
</sectionHeader>
<subsectionHeader confidence="0.998928">
7.1 The challenge of choosing the right analysis
</subsectionHeader>
<bodyText confidence="0.999434125">
As mentioned in the introduction, most phenomena
in natural languages can be accounted for by more
than one formal analysis. An engineer may imple-
ment alternative solutions and test the impact on the
grammar concerning interaction with other phenom-
ena (Bierwisch, 1963; M¨uller, 1999; Bender, 2008;
Bender et al., 2011) and efficiency to decide between
analyses.
</bodyText>
<footnote confidence="0.9464925">
9Ranta (Ranta, 2009) reports that GF is developed for four-
o073teen languages, and more are under development.
</footnote>
<bodyText confidence="0.999894952380952">
However, it is not feasible to carry out compara-
tive tests by manually creating different versions of a
grammar every time a decision about an implemen-
tation is made. Moreover, even if such a study were
carried out at each stage, only the interaction with
the current state of the grammar would be tested.
This has two undesirable consequences. First, op-
tions may be rejected that would have worked per-
fectly well if different decisions had been made in
the past. Second, because each decision is only
based on the current state of the grammar, the result-
ing grammar is partially (or even largely) a product
of the order in which phenomena are treated.10
For grammar engineers with practical applica-
tions in mind, this is undesirable because the re-
sulting grammar may end up far from optimal. For
grammar writers that use engineering to find valid
linguistic analyses, the problem is even more seri-
ous: if there is a truth in a declarative grammar,
surely, this should not depend on the order in which
phenomena are treated.
</bodyText>
<subsectionHeader confidence="0.992818">
7.2 Metagrammar engineering
</subsectionHeader>
<bodyText confidence="0.999995428571429">
This paper proposes to systematically explore anal-
yses throughout the development of a grammar by
writing a metagrammar (or grammar generator),
rather than directly implementing the grammar. A
metagrammar can contain several different analyses
for the same phenomenon. After adding a new phe-
nomenon to the metagrammar, the engineer can au-
tomatically generate versions of the grammar con-
taining different combinations of previous analyses.
As a result, the engineer can not only systematically
explore how alternative analyses interact with the
current grammar, but also continue to explore inter-
actions with phenomena added in the future. Espe-
cially for alternative approaches to basic properties
of the language, such as the auxiliary-verb structures
examined in this study, parallel analyses may pre-
vent the cumbersome scenario of changing a deeply
embedded property of a large grammar.
An additional advantage is that the engineer can
use the methodology to make different versions of
the grammar depending on its intended application.
</bodyText>
<footnote confidence="0.89820275">
10It is, of course, possible to go back and change old anal-
yses based on new evidence. In practice, the large effort in-
volved will only be undertaken if the advantages are apparent
beforehand. 107
</footnote>
<bodyText confidence="0.999807805555555">
For instance, it is possible to develop a highly re-
stricted version for grammar checking that provides
detailed feedback on detected errors (Bender et al.,
2004), next to a version with fewer constraints to
parse open text.
As far as finding optimal solutions is concerned,
it must be noted that this approach does not guar-
antee a perfect result, partially because there is no
guarantee the grammar engineer will think of the
perfect solution for each phenomenon, but mainly
because it is not maintainable to implement all pos-
sible alternatives for each phenomenon and make
them interact correctly with all other variations in
the grammar. The grammar engineer still needs to
decide which alternatives are the most promising
and therefore the most important to implement and
maintain. The resulting grammar therefore partially
remains a result of the order in which phenomena
are implemented. Nevertheless, the grammar engi-
neer can keep and try out solutions in parallel for
a longer time, increasing the possibility of explor-
ing more alternative versions of the grammar. These
additional investigations allow for better informed
decisions to stop exploring certain analyses. In ad-
dition, by breaking up analyses into possible alter-
natives, chances are that the resulting metagrammar
will be more modular than a directly written gram-
mar would have been, which facilitates exploring al-
ternatives further.
In sum, even though metagrammar engineering
does not completely solve the challenge of complete
explorations of a grammar’s possibilities, it does fa-
cilitate this process so that finding optimal solutions
becomes more likely, leading to better supported
choices among alternatives and a more scientific ap-
proach to grammar development.
</bodyText>
<sectionHeader confidence="0.990951" genericHeader="acknowledgments">
Acknowledgments.
</sectionHeader>
<bodyText confidence="0.9918106">
The work described in this paper has been sup-
ported by the project TAKE (Technologies for Ad-
vanced Knowledge Extraction), funded under con-
tract 01IW08003 by the German Federal Ministry
of Education and Research. Emily M. Bender, Lau-
rie Poulson, Christoph Zwirello, Bart Cramer, Kim
Gerdes and three anonymous reviewers provided
valuable feedback that resulted in significant im-
provement of the paper. Naturally, all remaining er-
4rors are my own.
</bodyText>
<page confidence="0.993968">
1075
</page>
<sectionHeader confidence="0.990047" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999455991803279">
Emily M. Bender, Dan Flickinger, and Stephan Oepen.
2002. The grammar matrix: An open-source starter-
kit for the rapid development of cross-linguistically
consistent broad-coverage precision grammars. In
John Carroll, Nelleke Oostdijk, and Richard Sutcliffe,
editors, Proceedings of the Workshop on Grammar
Engineering and Evaluation at the 19th International
Conference on Computational Linguistics, pages 8–
14, Taipei, Taiwan.
Emily M. Bender, Dan Flickinger, Stephan Oepen, An-
nemarie Walsh, and Tim Baldwin. 2004. Arboretum:
Using a precision grammar for grammar checking in
call. In Proceedings of the InSTIL/ICAL Symposium:
NLP and Speech Technologies in Advance Language
Learning Systems, Venice, Italy.
Emily M. Bender, Scott Drellishak, Antske Fokkens,
Laurie Poulson, and Safiyyah Saleem. 2010. Gram-
mar customization. Research on Language &amp; Compu-
tation, 8(1):23–72.
Emily M. Bender, Dan Flickinger, and Stephan Oepen.
2011. Grammar engineering and linguistic hypoth-
esis testing. In Emily M. Bender and Jennifer E.
Arnold, editors, Language from a Cognitive Perspec-
tive: Grammar, Usage and Processing, pages 5–29.
Stanford: CSLI Publications, Palo Alto, USA.
Emily M. Bender. 2008. Grammar engineering for
linguistic hypothesis testing. In Nicholas Gaylord,
Alexis Palmer, and Elias Ponvert, editors, Proceedings
ofthe Texas Linguistics SocietyXConference: Compu-
tational Linguistics for Less-Studied Languages, pages
16–36, Stanford. CSLI Publications.
Emily M. Bender. 2010. Reweaving a grammar for
Wambaya: A case study in grammar engineering for
linguistic hypothesis testing. Linguistic Issues in Lan-
guage Technology, 3(3):1–34.
Manfred Bierwisch. 1963. Grammatik des deutschen
Verbs, volume II of Studia Grammatica. Akademie
Verlag.
Gosse Bouma, Gertjan van Noord, and Robert Malouf.
2001. Alpino: Wide coverage computational analysis
of Dutch. In Computational Linguistics in the Nether-
lands CLIN2000.
Joan Bresnan. 2001. Lexical Functional Syntax. Black-
well Publishers, Oxford.
Marie-Helene Candito. 1998. Building parallel LTAG
for French and Italian. In Proceedings of the 36th
Annual Meeting of the Association for Computa-
tional Linguistics and 17th International Conference
on Computational Linguistics, Volume 1, pages 211–
217, Montreal, Quebec, Canada. Association for Com-
putational Linguistics.
John Carroll and Stephan Oepen. 2005. High efficiency
realization for a wide-coverage unification grammar.
In IJCNLP, Jeju Island. Springer-Verlag LNCS.
Ann Copestake, Dan Flickinger, Carl Pollard, and Ivan
Sag. 2005. Minimal recursion semantics. an introduc-
tion. Journal ofResearch on Language and Computa-
tion, 3(2–3):281 – 332.
Ann Copestake. 2002. Implementing Typed Feature
Structure Grammars. CSLI Publications, Stanford,
CA.
Benoit Crabb´e. 2005. Repr´esentation modulaire
et param´etrable de grammaires ´electroniques lexi-
calis´ees. Ph.D. thesis, Universit´e de Paris 7.
Bart Cramer and Yi Zhang. 2009. Constructon of a
German HPSG grammar from a detailed treebank. In
Proceedings of the ACL 2009 Grammar Engineering
across Frameworks workshop, pages 37–45, Singa-
pore, Singapore.
Berthold Crysmann. 2005. Relative clause extraposition
in German: An efficient and portable implementation.
Research on Language and Computation, 3(1):61–82.
´Eric Villemonte de la Clergerie. 2005. From metagram-
mars to factorized TAG/TIG parsers. In Proceedings
ofIWPT’05, pages 190–191.
Erich Drach. 1937. Grundgedanken der Deutschen Sat-
zlehre. Diesterweg, Frankfurt am Main, Germany.
Oskar Erdmann. 1886. Grundz¨uge der deutschen Syntax
nach ihrer geschichtlichen Entwicklung dargestellt.
Erste Abteilung. Verlag der Cotta’schen Buchhand-
lung, Stuttgart, Germany.
Walter Haeseryn. 1997. De gebruikswaarde van de
ans voor tekstschrijvers, taaltrainers en taaladviseurs.
Tekst[blad], 3.
Erhard Hinrichs and Tsuneko Nakazawa. 1994. Lin-
earizing auxs in German verbal complexes. In John
Nerbonne, Klaus Netter, and Carl Pollard, editors,
German in HPSG. CSLI, Stanford, USA.
Aravind K. Joshi, Leon S. Levy, and Masako Takahashi.
1975. Tree adjunct grammars. Journal of Computer
and System Sciences, 10(1):136–163.
Andreas Kathol. 2000. Linear Syntax. Oxford Press.
Alexandra Kinyon, Owen Rambow, Tatjana Scheffler,
SinWon Yoon, and Aravind K. Joshi. 2006. The meta-
grammar goes multilingual: A cross-linguistic look at
the V2-phenomenon. In Proceedings of the Eighth In-
ternational Workshop on Tree Adjoining Grammar and
Related Formalisms, pages 17–24, Sydney, Australia.
Association for Computational Linguistics.
Stephen McConnel. 1995. PC-PATR reference manual.
Stefan M¨uller and Walter Kasper. 2000. HPSG analy-
sis for German. In Wolfgang Wahlster, editor, Verb-
mobil: Foundations of Speech-to-Speech translation,
pages 238 – 253, Berlin, Germany. Springer.
Stefan M¨uller. 1999. Deutsche Syntax deklarativ. Head-
Driven Phrase Structure Grammar f¨ur das Deutsche.
Max Niemeyer Verlag, T¨ubingen.
Stefan M¨uller. 2008. Depictive secondary predicates in
german and english. In Christoph Schroeder, Gerd
Hentschel, and Winfried Boeder, editors, Secondary
Predicates in Eastern European Languages and Be-
yond, number 16 in Studia Slavica Oldenburgensia,
pages 255–273, Oldenburg, Germany. BIS-Verlag.
Stefan M¨uller. 2009. On predication. In Stefan M¨uller,
editor, Proceedings of the 16th International Con-
ference on Head-Driven Phrase Structure Grammar,
Stanford, USA. CSLI Publications.
Stephan Oepen. 2001. [incr tsdb()] — competence
and performance laboratory. Technical report, DFKI,
Saarbr¨ucken, Germany.
Aarne Ranta. 2009. The GF resource grammar library.
Linguistic Issues in Language Technology, 2(2).
</reference>
<page confidence="0.995261">
1076
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.105973">
<title confidence="0.9977545">Metagrammar Engineering: Towards systematic exploration of implemented grammars</title>
<author confidence="0.908227">Antske</author>
<affiliation confidence="0.999563">Department of Computational Linguistics, Saarland University</affiliation>
<title confidence="0.235185">German Research Center for Artificial Intelligence (DFKI) Project Office</title>
<author confidence="0.331044">c Alt-Moabit</author>
<author confidence="0.331044">Berlin</author>
<email confidence="0.948593">afokkens@coli.uni-saarland.de</email>
<date confidence="0.602754">06</date>
<abstract confidence="0.997543961538462">When designing grammars of natural language, typically, more than one formal analysis can account for a given phenomenon. Moreover, because analyses interact, the choices made by the engineer influence the possibilities available in further grammar development. The order in which phenomena are treated may therefore have a major impact on the resulting grammar. This paper proposes to tackle this problem by using metagrammar development as a methodology for grammar engineering. I argue that metagrammar engineering as an approach facilitates the systematic exploration of grammars through comparison of competing analyses. The idea is illustrated through a comparative study of auxiliary structures in HPSG-based grammars for German and Dutch. Auxiliaries form a central phenomenon of German and Dutch and are likely to influence many components of the grammar. This study shows that a special auxiliary+verb construction significantly improves efficiency compared to the standard argument-composition analysis for both parsing and generation.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>Emily M Bender</author>
<author>Dan Flickinger</author>
<author>Stephan Oepen</author>
</authors>
<title>The grammar matrix: An open-source starterkit for the rapid development of cross-linguistically consistent broad-coverage precision grammars. In</title>
<date>2002</date>
<booktitle>Proceedings of the Workshop on Grammar Engineering and Evaluation at the 19th International Conference on Computational Linguistics,</booktitle>
<pages>8--14</pages>
<editor>John Carroll, Nelleke Oostdijk, and Richard Sutcliffe, editors,</editor>
<location>Taipei, Taiwan.</location>
<contexts>
<context position="5150" citStr="Bender et al., 2002" startWordPosition="766" endWordPosition="769">eering. 2 A metagrammar for Germanic Languages 2.1 The LinGO Grammar Matrix forth choices file). The customization system takes this choices file as input to create grammar fragments, using so-called “libraries” that contain implementations of cross-linguistically variable phenomena. Depending on the definitions provided in the choices file, different analyses are retrieved from the customization system’s libraries. The language specific implementations inherit from a core grammar which handles basic phrase types, semantic compositionality and general infrastructure, such as feature geometry (Bender et al., 2002). The present study is part of a larger effort to improve the customization library for auxiliary structures in free word order and verb second languages. It examines whether Bender’s observations concerning an improved analysis for auxiliaries in Wambaya (Bender, 2010) also hold for Germanic languages. A more elaborate study of German and Dutch (including both Flemish and (Northern) Dutch, which have slightly different word order constraints) is informative, because these languages are well-described and known to have distinctly challenging word order behavior. 2.2 Germanic branch The LinGO G</context>
</contexts>
<marker>Bender, Flickinger, Oepen, 2002</marker>
<rawString>Emily M. Bender, Dan Flickinger, and Stephan Oepen. 2002. The grammar matrix: An open-source starterkit for the rapid development of cross-linguistically consistent broad-coverage precision grammars. In John Carroll, Nelleke Oostdijk, and Richard Sutcliffe, editors, Proceedings of the Workshop on Grammar Engineering and Evaluation at the 19th International Conference on Computational Linguistics, pages 8– 14, Taipei, Taiwan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
<author>Dan Flickinger</author>
<author>Stephan Oepen</author>
<author>Annemarie Walsh</author>
<author>Tim Baldwin</author>
</authors>
<title>Arboretum: Using a precision grammar for grammar checking in call.</title>
<date>2004</date>
<booktitle>In Proceedings of the InSTIL/ICAL Symposium: NLP and Speech Technologies in Advance Language Learning Systems,</booktitle>
<location>Venice, Italy.</location>
<contexts>
<context position="34042" citStr="Bender et al., 2004" startWordPosition="5455" endWordPosition="5458">arallel analyses may prevent the cumbersome scenario of changing a deeply embedded property of a large grammar. An additional advantage is that the engineer can use the methodology to make different versions of the grammar depending on its intended application. 10It is, of course, possible to go back and change old analyses based on new evidence. In practice, the large effort involved will only be undertaken if the advantages are apparent beforehand. 107 For instance, it is possible to develop a highly restricted version for grammar checking that provides detailed feedback on detected errors (Bender et al., 2004), next to a version with fewer constraints to parse open text. As far as finding optimal solutions is concerned, it must be noted that this approach does not guarantee a perfect result, partially because there is no guarantee the grammar engineer will think of the perfect solution for each phenomenon, but mainly because it is not maintainable to implement all possible alternatives for each phenomenon and make them interact correctly with all other variations in the grammar. The grammar engineer still needs to decide which alternatives are the most promising and therefore the most important to </context>
</contexts>
<marker>Bender, Flickinger, Oepen, Walsh, Baldwin, 2004</marker>
<rawString>Emily M. Bender, Dan Flickinger, Stephan Oepen, Annemarie Walsh, and Tim Baldwin. 2004. Arboretum: Using a precision grammar for grammar checking in call. In Proceedings of the InSTIL/ICAL Symposium: NLP and Speech Technologies in Advance Language Learning Systems, Venice, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
<author>Scott Drellishak</author>
<author>Antske Fokkens</author>
<author>Laurie Poulson</author>
<author>Safiyyah Saleem</author>
</authors>
<title>Grammar customization.</title>
<date>2010</date>
<journal>Research on Language &amp; Computation,</journal>
<volume>8</volume>
<issue>1</issue>
<contexts>
<context position="5850" citStr="Bender et al., 2010" startWordPosition="876" endWordPosition="880">ary for auxiliary structures in free word order and verb second languages. It examines whether Bender’s observations concerning an improved analysis for auxiliaries in Wambaya (Bender, 2010) also hold for Germanic languages. A more elaborate study of German and Dutch (including both Flemish and (Northern) Dutch, which have slightly different word order constraints) is informative, because these languages are well-described and known to have distinctly challenging word order behavior. 2.2 Germanic branch The LinGO Grammar Matrix (Bender et al., 2002; In order to create grammars for Germanic lanBender et al., 2010) provides the main context for guages, a specialized branch of the Grammar Mathe experiments described in this paper. To begin trix customization system was developed. This Gerwith, its further development plays a significant role manic grammars generator uses the Grammar Mafor the motivation of the present study. More impor- trix’s facilities to generate types in type description tantly, the Germanic metagrammar is implemented language (tdl). At present, the generator uses the as a special branch of the LinGO Grammar Matrix Grammar Matrix analyses for agreement and case and uses a significant</context>
</contexts>
<marker>Bender, Drellishak, Fokkens, Poulson, Saleem, 2010</marker>
<rawString>Emily M. Bender, Scott Drellishak, Antske Fokkens, Laurie Poulson, and Safiyyah Saleem. 2010. Grammar customization. Research on Language &amp; Computation, 8(1):23–72.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
<author>Dan Flickinger</author>
<author>Stephan Oepen</author>
</authors>
<title>Grammar engineering and linguistic hypothesis testing.</title>
<date>2011</date>
<booktitle>Language from a Cognitive Perspective: Grammar, Usage and Processing,</booktitle>
<pages>5--29</pages>
<editor>In Emily M. Bender and Jennifer E. Arnold, editors,</editor>
<publisher>CSLI Publications,</publisher>
<location>Stanford:</location>
<contexts>
<context position="31438" citStr="Bender et al., 2011" startWordPosition="5035" endWordPosition="5038">rnative analyses, grammars can be explored systematically over time. As such, the paper introduces a novel methodology for grammar engineering. The discussion and conclusion will elaborate on the advantages of the approach. 7 Discussion and conclusion 7.1 The challenge of choosing the right analysis As mentioned in the introduction, most phenomena in natural languages can be accounted for by more than one formal analysis. An engineer may implement alternative solutions and test the impact on the grammar concerning interaction with other phenomena (Bierwisch, 1963; M¨uller, 1999; Bender, 2008; Bender et al., 2011) and efficiency to decide between analyses. 9Ranta (Ranta, 2009) reports that GF is developed for fouro073teen languages, and more are under development. However, it is not feasible to carry out comparative tests by manually creating different versions of a grammar every time a decision about an implementation is made. Moreover, even if such a study were carried out at each stage, only the interaction with the current state of the grammar would be tested. This has two undesirable consequences. First, options may be rejected that would have worked perfectly well if different decisions had been </context>
</contexts>
<marker>Bender, Flickinger, Oepen, 2011</marker>
<rawString>Emily M. Bender, Dan Flickinger, and Stephan Oepen. 2011. Grammar engineering and linguistic hypothesis testing. In Emily M. Bender and Jennifer E. Arnold, editors, Language from a Cognitive Perspective: Grammar, Usage and Processing, pages 5–29. Stanford: CSLI Publications, Palo Alto, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
</authors>
<title>Grammar engineering for linguistic hypothesis testing.</title>
<date>2008</date>
<booktitle>Proceedings ofthe Texas Linguistics SocietyXConference: Computational Linguistics for Less-Studied Languages,</booktitle>
<pages>16--36</pages>
<editor>In Nicholas Gaylord, Alexis Palmer, and Elias Ponvert, editors,</editor>
<publisher>CSLI Publications.</publisher>
<location>Stanford.</location>
<contexts>
<context position="31416" citStr="Bender, 2008" startWordPosition="5033" endWordPosition="5034"> to store alternative analyses, grammars can be explored systematically over time. As such, the paper introduces a novel methodology for grammar engineering. The discussion and conclusion will elaborate on the advantages of the approach. 7 Discussion and conclusion 7.1 The challenge of choosing the right analysis As mentioned in the introduction, most phenomena in natural languages can be accounted for by more than one formal analysis. An engineer may implement alternative solutions and test the impact on the grammar concerning interaction with other phenomena (Bierwisch, 1963; M¨uller, 1999; Bender, 2008; Bender et al., 2011) and efficiency to decide between analyses. 9Ranta (Ranta, 2009) reports that GF is developed for fouro073teen languages, and more are under development. However, it is not feasible to carry out comparative tests by manually creating different versions of a grammar every time a decision about an implementation is made. Moreover, even if such a study were carried out at each stage, only the interaction with the current state of the grammar would be tested. This has two undesirable consequences. First, options may be rejected that would have worked perfectly well if differe</context>
</contexts>
<marker>Bender, 2008</marker>
<rawString>Emily M. Bender. 2008. Grammar engineering for linguistic hypothesis testing. In Nicholas Gaylord, Alexis Palmer, and Elias Ponvert, editors, Proceedings ofthe Texas Linguistics SocietyXConference: Computational Linguistics for Less-Studied Languages, pages 16–36, Stanford. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emily M Bender</author>
</authors>
<title>Reweaving a grammar for Wambaya: A case study in grammar engineering for linguistic hypothesis testing.</title>
<date>2010</date>
<journal>Linguistic Issues in Language Technology,</journal>
<volume>3</volume>
<issue>3</issue>
<contexts>
<context position="2038" citStr="Bender, 2010" startWordPosition="297" endWordPosition="298">f natural language is that, typically, more than one formal analysis can account for a given phenomenon. The criteria for choosing between competing analyses are fairly clear (observational adequacy, analytical clarity, efficiency), but given that analyses of different phenomena interact, actually evaluating analyses on those criteria in a systematic manner is far1 from straightforward. The standard methodology involves either picking one analysis, and seeing how it goes, then backing out if it does not work out, or laboriously adapting a grammar to two versions supporting different analyses (Bender, 2010). The former approach is not in any way systematic, increasing the risk that the grammar is far from optimal in terms of efficiency. The latter approach potentially causes the grammar engineer an amount of work that will not scale for considering many different phenomena. This paper proposes a more systematic and tractable alternative to grammar development: metagrammar engineering. I use “metagrammar” as a generic term to refer to a system that can generate implemented grammars. The key idea is that the grammar engineer adds alternative plausable analyses for linguistic phenomena to a metagra</context>
<context position="3384" citStr="Bender (2010)" startWordPosition="510" endWordPosition="511">ar that cover the same phenomena. The engineer can test directly how competing analyses for different phenomena interact, and determine which combinations are possible (after minor adaptations) and which analyses are incompatible. The idea of metagrammar engineering is illustrated here through a case study of word order and auxiliaries in Germanic languages, which forms the second goal of this paper. Auxiliaries form a central phenomenon of German and Dutch and are likely to influence many components of the grammar. The results show that the analysis of auxiliary+verb struc6tures presented in Bender (2010) significantly imProceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 1066–1076, Portland, Oregon, June 19-24, 2011. c�2011 Association for Computational Linguistics proves efficiency of the grammar compared to the standard argument-composition analysis within the range of phenomena studied. Because future research is needed to determine whether the auxiliary+verb alternative can interact properly with additional phenomena and still lead to more efficient results than argument-composition, it is particularly useful to have a grammar generator that can </context>
<context position="5420" citStr="Bender, 2010" startWordPosition="811" endWordPosition="812">nomena. Depending on the definitions provided in the choices file, different analyses are retrieved from the customization system’s libraries. The language specific implementations inherit from a core grammar which handles basic phrase types, semantic compositionality and general infrastructure, such as feature geometry (Bender et al., 2002). The present study is part of a larger effort to improve the customization library for auxiliary structures in free word order and verb second languages. It examines whether Bender’s observations concerning an improved analysis for auxiliaries in Wambaya (Bender, 2010) also hold for Germanic languages. A more elaborate study of German and Dutch (including both Flemish and (Northern) Dutch, which have slightly different word order constraints) is informative, because these languages are well-described and known to have distinctly challenging word order behavior. 2.2 Germanic branch The LinGO Grammar Matrix (Bender et al., 2002; In order to create grammars for Germanic lanBender et al., 2010) provides the main context for guages, a specialized branch of the Grammar Mathe experiments described in this paper. To begin trix customization system was developed. Th</context>
<context position="16247" citStr="Bender, 2010" startWordPosition="2574" endWordPosition="2575">uster, as illustrated in (2) for Dutch: 2 `i´4VAL &amp;quot;SUBJ �� COMPS (2) Gezien zou de man haar kunnen hebben. Seen should the man her can have “The man should have been able to see her.” 2 &amp;quot; # SUBJ 1 6 VAL 6 COMPS 2 6 6 6HEAD-DTRIVALI COMPS 3&amp;quot;SUBJ ## NON-HEAD-DTR 3 &amp;quot;VAL COMPS 1 2 3 5 7 7 7 7 7 7 `ii´ Figure 2: Auxiliary lexical type (i) and Auxiliary+verb construction (ii) under alternative analysis the string, the generator will attempt to combine all lexical items suggested by the input semantics, as well as lexical items with empty semantics, in random order. 4.2 Aux+verb construction Bender (Bender, 2010)6 presents an alternative approach to auxiliary-verb structures for the Australian language Wambaya. The analysis introduces auxiliaries that only subcategorize for one verbal complement, not raising any of the complement’s arguments or its subject. Auxiliaries combine with their complement using a special auxiliary+verb rule. Figure 2 presents this alternative solution. In principle, the new analysis uses the same technique as argument composition. The difference is that the auxiliary now starts out with only one element in its subcategorization lists and can only combine with potential verba</context>
<context position="17527" citStr="Bender, 2010" startWordPosition="2772" endWordPosition="2773">t combines the auxiliary with its complement places the remaining elements on the complement’s SUBJ and COMPS lists on the respective lists of the newly formed phrase, as can be seen in Figure 2 (ii). The constraints on raised arguments are known when the construction applies. The efficiency problem sketched above is thus avoided. 4.3 A small wrinkle: partial VP fronting In its basic form, the auxiliary+verb structure cannot handle partial VP fronting where the main verb is placed in first position leaving one or more verbal 6Bender credits the key idea behind this analysis to Dan Flickinger (Bender, 2010). 107 The problem is that hebben “have” cannot combine with gezien “seen”, because they are separated by the head of the clause. Because the verb hebben cannot combine with its complement, it cannot raise its complement’s arguments either: the auxiliary+verb analysis only permits raising when auxiliary and complement combine. This shortcoming is no reason to immediately dismiss the proposal. Structures such as (2) are extremely rare. The difference in coverage of a parser that can and a parser that cannot handle such structures is likely to be tiny, if present at all, nor is it vital for a sen</context>
</contexts>
<marker>Bender, 2010</marker>
<rawString>Emily M. Bender. 2010. Reweaving a grammar for Wambaya: A case study in grammar engineering for linguistic hypothesis testing. Linguistic Issues in Language Technology, 3(3):1–34.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Manfred Bierwisch</author>
</authors>
<title>Grammatik des deutschen Verbs, volume II of Studia Grammatica.</title>
<date>1963</date>
<publisher>Akademie Verlag.</publisher>
<contexts>
<context position="31387" citStr="Bierwisch, 1963" startWordPosition="5029" endWordPosition="5030">grammars. By using a metagrammar to store alternative analyses, grammars can be explored systematically over time. As such, the paper introduces a novel methodology for grammar engineering. The discussion and conclusion will elaborate on the advantages of the approach. 7 Discussion and conclusion 7.1 The challenge of choosing the right analysis As mentioned in the introduction, most phenomena in natural languages can be accounted for by more than one formal analysis. An engineer may implement alternative solutions and test the impact on the grammar concerning interaction with other phenomena (Bierwisch, 1963; M¨uller, 1999; Bender, 2008; Bender et al., 2011) and efficiency to decide between analyses. 9Ranta (Ranta, 2009) reports that GF is developed for fouro073teen languages, and more are under development. However, it is not feasible to carry out comparative tests by manually creating different versions of a grammar every time a decision about an implementation is made. Moreover, even if such a study were carried out at each stage, only the interaction with the current state of the grammar would be tested. This has two undesirable consequences. First, options may be rejected that would have wor</context>
</contexts>
<marker>Bierwisch, 1963</marker>
<rawString>Manfred Bierwisch. 1963. Grammatik des deutschen Verbs, volume II of Studia Grammatica. Akademie Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gosse Bouma</author>
<author>Gertjan van Noord</author>
<author>Robert Malouf</author>
</authors>
<title>Alpino: Wide coverage computational analysis of Dutch.</title>
<date>2001</date>
<booktitle>In Computational Linguistics in the Netherlands CLIN2000.</booktitle>
<marker>Bouma, van Noord, Malouf, 2001</marker>
<rawString>Gosse Bouma, Gertjan van Noord, and Robert Malouf. 2001. Alpino: Wide coverage computational analysis of Dutch. In Computational Linguistics in the Netherlands CLIN2000.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joan Bresnan</author>
</authors>
<title>Lexical Functional Syntax.</title>
<date>2001</date>
<publisher>Blackwell Publishers,</publisher>
<location>Oxford.</location>
<contexts>
<context position="28543" citStr="Bresnan, 2001" startWordPosition="4580" endWordPosition="4581">e been established in the field for over a decade. This section provides an overview of the goals and set-up of some of the most notable projects. The MetaGrammar project (Candito, 1998; de la Clergerie, 2005; Kinyon et al., 2006) started as an effort to encode syntactic knowledge in an abstract class hierarchy. The hierarchy can contain cross-linguistically invariable properties and syntactic properties that hold across frameworks (Kinyon et al., 2006). The factorized descriptions of MetaGrammar support Tree-Adjoining Grammars (Joshi et al., 1975, TAG) as well as Lexical Functional Grammars (Bresnan, 2001, LFG). The eXtensible MetaGrammar (Crabb´e, 2005, XMG) defines its MetaGrammar as classes that are part of a multiple inheritance hierarchy. Kinyon et al. (Kinyon et al., 2006) use XMG to perform a cross-linguistic comparison of verb-second structures. Their study focuses on code-sharing between the languages, but does not address the problem of competing analyses investigated in this paper. The GF Resource Grammar Library (Ranta, 2009) is a multi-lingual linguistic resource that contains a set of syntactic analyses implemented in GF (Grammatical Framework). The purpose of the library is to a</context>
</contexts>
<marker>Bresnan, 2001</marker>
<rawString>Joan Bresnan. 2001. Lexical Functional Syntax. Blackwell Publishers, Oxford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marie-Helene Candito</author>
</authors>
<title>Building parallel LTAG for French and Italian.</title>
<date>1998</date>
<booktitle>In Proceedings of the 36th Annual Meeting of the Association for Computational Linguistics and 17th International Conference on Computational Linguistics,</booktitle>
<volume>1</volume>
<pages>211--217</pages>
<publisher>Association for</publisher>
<institution>Computational Linguistics.</institution>
<location>Montreal, Quebec, Canada.</location>
<contexts>
<context position="28115" citStr="Candito, 1998" startWordPosition="4517" endWordPosition="4518">eration to explore alternative versions of a grammar over time. In particular, it should provide an indication of the feasibility of maintaining a higher number of competing analyses as the grammar grows. After providing background on related metagrammar projects and their goals, I will elaborate on the importance of systematic exploration of grammars in the discussion. 6 Related work Metagrammars (or grammar generators) have been established in the field for over a decade. This section provides an overview of the goals and set-up of some of the most notable projects. The MetaGrammar project (Candito, 1998; de la Clergerie, 2005; Kinyon et al., 2006) started as an effort to encode syntactic knowledge in an abstract class hierarchy. The hierarchy can contain cross-linguistically invariable properties and syntactic properties that hold across frameworks (Kinyon et al., 2006). The factorized descriptions of MetaGrammar support Tree-Adjoining Grammars (Joshi et al., 1975, TAG) as well as Lexical Functional Grammars (Bresnan, 2001, LFG). The eXtensible MetaGrammar (Crabb´e, 2005, XMG) defines its MetaGrammar as classes that are part of a multiple inheritance hierarchy. Kinyon et al. (Kinyon et al., </context>
</contexts>
<marker>Candito, 1998</marker>
<rawString>Marie-Helene Candito. 1998. Building parallel LTAG for French and Italian. In Proceedings of the 36th Annual Meeting of the Association for Computational Linguistics and 17th International Conference on Computational Linguistics, Volume 1, pages 211– 217, Montreal, Quebec, Canada. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Carroll</author>
<author>Stephan Oepen</author>
</authors>
<title>High efficiency realization for a wide-coverage unification grammar.</title>
<date>2005</date>
<booktitle>In IJCNLP, Jeju Island. Springer-Verlag LNCS.</booktitle>
<contexts>
<context position="14879" citStr="Carroll and Oepen, 2005" startWordPosition="2331" endWordPosition="2334">liary-verb structures is (with minor differences) also what is provided by the Matrix customization system. Argument-composition can capture the grammatical behavior of auxiliaries in German and Dutch. However, grammaticality and coverage is not all that matters for grammars of natural language. Efficiency remains an important factor, and argumentcomposition has some undesirable properties on this level. The problem lies in the fact that lexical entries of auxiliaries have underspecified elements on their subcategorization lists. With the current chart parsing and chart generation algorithms (Carroll and Oepen, 2005), an auxiliary in a language with flexible word order will speculatively add edges to the chart for potential analyses with the adjacent constituent as subject or complement. Because the length of the lists are underspecified as well, it can continue wrongly combining with all elements in the string. In the worse case scenario, the number of edges created by an auxiliary grows exponentially in the number of words and constituents in the string. The efficiency problem is even worse for generation: while the parser is restricted by the surface order of 5In the semantic representation, both argum</context>
</contexts>
<marker>Carroll, Oepen, 2005</marker>
<rawString>John Carroll and Stephan Oepen. 2005. High efficiency realization for a wide-coverage unification grammar. In IJCNLP, Jeju Island. Springer-Verlag LNCS.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
<author>Dan Flickinger</author>
<author>Carl Pollard</author>
<author>Ivan Sag</author>
</authors>
<title>Minimal recursion semantics. an introduction.</title>
<date>2005</date>
<journal>Journal ofResearch on Language and Computation,</journal>
<pages>3--2</pages>
<marker>Copestake, Flickinger, Pollard, Sag, 2005</marker>
<rawString>Ann Copestake, Dan Flickinger, Carl Pollard, and Ivan Sag. 2005. Minimal recursion semantics. an introduction. Journal ofResearch on Language and Computation, 3(2–3):281 – 332.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ann Copestake</author>
</authors>
<title>Implementing Typed Feature Structure Grammars.</title>
<date>2002</date>
<publisher>CSLI Publications,</publisher>
<location>Stanford, CA.</location>
<marker>Copestake, 2002</marker>
<rawString>Ann Copestake. 2002. Implementing Typed Feature Structure Grammars. CSLI Publications, Stanford, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Benoit Crabb´e</author>
</authors>
<title>Repr´esentation modulaire et param´etrable de grammaires ´electroniques lexicalis´ees.</title>
<date>2005</date>
<tech>Ph.D. thesis,</tech>
<institution>Universit´e de Paris</institution>
<marker>Crabb´e, 2005</marker>
<rawString>Benoit Crabb´e. 2005. Repr´esentation modulaire et param´etrable de grammaires ´electroniques lexicalis´ees. Ph.D. thesis, Universit´e de Paris 7.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bart Cramer</author>
<author>Yi Zhang</author>
</authors>
<title>Constructon of a German HPSG grammar from a detailed treebank.</title>
<date>2009</date>
<booktitle>In Proceedings of the ACL 2009 Grammar Engineering across Frameworks workshop,</booktitle>
<pages>37--45</pages>
<contexts>
<context position="26877" citStr="Cramer and Zhang, 2009" startWordPosition="4322" endWordPosition="4325">ernative should be considered seriously as an alternative to the HPSG standard analysis of argument-composition, though further investigation in a larger context is needed before final conclusions can be drawn. Future work will focus on increasing the coverage of the grammars, as well as the number of alternative options explored. In particular, both approaches for auxiliaries should be compared using alternative analyses for verb-second word order found in other HPSG-based grammars, such as the GG (M¨uller and Kasper, 2000; Crysmann, 2005), Grammix (M¨uller, 2009; M¨uller, 2008) and Cheetah (Cramer and Zhang, 2009) for German, and Alpino (Bouma et al., 2001) for Dutch. These grammars may use approaches that somewhat reduce the problem of argument-composition, leading to less significant differences between the auxiliary+verb and argument-composition analyses. On the other hand, 2planned extensions that cover modification and subordinate clauses will increase local ambiguities. The advantage of the auxiliary+verb analysis is likely to become more important as a result. In addition to providing a clearer picture of auxiliary structures, these extensions will also lead to a better insight into efforts invo</context>
</contexts>
<marker>Cramer, Zhang, 2009</marker>
<rawString>Bart Cramer and Yi Zhang. 2009. Constructon of a German HPSG grammar from a detailed treebank. In Proceedings of the ACL 2009 Grammar Engineering across Frameworks workshop, pages 37–45, Singapore, Singapore.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Berthold Crysmann</author>
</authors>
<title>Relative clause extraposition in German: An efficient and portable implementation.</title>
<date>2005</date>
<journal>Research on Language and Computation,</journal>
<volume>3</volume>
<issue>1</issue>
<contexts>
<context position="26800" citStr="Crysmann, 2005" startWordPosition="4313" endWordPosition="4314">erb is at least 98.5%. These results show that the auxiliary+verb alternative should be considered seriously as an alternative to the HPSG standard analysis of argument-composition, though further investigation in a larger context is needed before final conclusions can be drawn. Future work will focus on increasing the coverage of the grammars, as well as the number of alternative options explored. In particular, both approaches for auxiliaries should be compared using alternative analyses for verb-second word order found in other HPSG-based grammars, such as the GG (M¨uller and Kasper, 2000; Crysmann, 2005), Grammix (M¨uller, 2009; M¨uller, 2008) and Cheetah (Cramer and Zhang, 2009) for German, and Alpino (Bouma et al., 2001) for Dutch. These grammars may use approaches that somewhat reduce the problem of argument-composition, leading to less significant differences between the auxiliary+verb and argument-composition analyses. On the other hand, 2planned extensions that cover modification and subordinate clauses will increase local ambiguities. The advantage of the auxiliary+verb analysis is likely to become more important as a result. In addition to providing a clearer picture of auxiliary stru</context>
</contexts>
<marker>Crysmann, 2005</marker>
<rawString>Berthold Crysmann. 2005. Relative clause extraposition in German: An efficient and portable implementation. Research on Language and Computation, 3(1):61–82.</rawString>
</citation>
<citation valid="true">
<authors>
<author>´Eric Villemonte de la Clergerie</author>
</authors>
<title>From metagrammars to factorized TAG/TIG parsers.</title>
<date>2005</date>
<booktitle>In Proceedings ofIWPT’05,</booktitle>
<pages>190--191</pages>
<contexts>
<context position="28138" citStr="Clergerie, 2005" startWordPosition="4521" endWordPosition="4522">ternative versions of a grammar over time. In particular, it should provide an indication of the feasibility of maintaining a higher number of competing analyses as the grammar grows. After providing background on related metagrammar projects and their goals, I will elaborate on the importance of systematic exploration of grammars in the discussion. 6 Related work Metagrammars (or grammar generators) have been established in the field for over a decade. This section provides an overview of the goals and set-up of some of the most notable projects. The MetaGrammar project (Candito, 1998; de la Clergerie, 2005; Kinyon et al., 2006) started as an effort to encode syntactic knowledge in an abstract class hierarchy. The hierarchy can contain cross-linguistically invariable properties and syntactic properties that hold across frameworks (Kinyon et al., 2006). The factorized descriptions of MetaGrammar support Tree-Adjoining Grammars (Joshi et al., 1975, TAG) as well as Lexical Functional Grammars (Bresnan, 2001, LFG). The eXtensible MetaGrammar (Crabb´e, 2005, XMG) defines its MetaGrammar as classes that are part of a multiple inheritance hierarchy. Kinyon et al. (Kinyon et al., 2006) use XMG to perfor</context>
</contexts>
<marker>Clergerie, 2005</marker>
<rawString>´Eric Villemonte de la Clergerie. 2005. From metagrammars to factorized TAG/TIG parsers. In Proceedings ofIWPT’05, pages 190–191.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Erich Drach</author>
</authors>
<title>Grundgedanken der Deutschen Satzlehre. Diesterweg,</title>
<date>1937</date>
<location>Frankfurt am Main, Germany.</location>
<contexts>
<context position="8702" citStr="Drach, 1937" startWordPosition="1327" endWordPosition="1328">arty The man.nom has the boy.acc seen after the party Der Mann hat den Jungen nach der Party gesehen nach der Party Den Jungen hat der Mann gesehen Nach der Party hat der Mann den Jungen gesehen Den Jungen gesehen hat der Mann nach der Party Gesehen hat der Mann den Jungen nach der Party The man saw the boy after the party Table 1: Basic structure of German word order (not exhaustive) 1068 languages under investigation. These 12 grammars cover Dutch, Flemish and German main clauses with up to three core arguments.1 3 Germanic word order 3.1 German word order Topological fields (Erdmann, 1886; Drach, 1937) form the easiest way to describe German word order. The sentence structure for declarative main clauses, consists of five topological fields: Vorfeld (“pre-field”), Left Bracket (LB), Mittelfeld (“middle field”), Right Bracket (RB) and the Nachfeld (“after field”). A subset of permissible alternations in German are provided in Table 1. The last two sentences present an example of partial VP fronting. The fields are defined with regard to verbal forms, which are placed in the Left and Right Brackets. Each topological field has word order restrictions of its own. The Vorfeld must contain exactl</context>
</contexts>
<marker>Drach, 1937</marker>
<rawString>Erich Drach. 1937. Grundgedanken der Deutschen Satzlehre. Diesterweg, Frankfurt am Main, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Oskar Erdmann</author>
</authors>
<title>Grundz¨uge der deutschen Syntax nach ihrer geschichtlichen Entwicklung dargestellt. Erste Abteilung. Verlag der Cotta’schen Buchhandlung,</title>
<date>1886</date>
<location>Stuttgart, Germany.</location>
<contexts>
<context position="8688" citStr="Erdmann, 1886" startWordPosition="1325" endWordPosition="1326">ehen nach der Party The man.nom has the boy.acc seen after the party Der Mann hat den Jungen nach der Party gesehen nach der Party Den Jungen hat der Mann gesehen Nach der Party hat der Mann den Jungen gesehen Den Jungen gesehen hat der Mann nach der Party Gesehen hat der Mann den Jungen nach der Party The man saw the boy after the party Table 1: Basic structure of German word order (not exhaustive) 1068 languages under investigation. These 12 grammars cover Dutch, Flemish and German main clauses with up to three core arguments.1 3 Germanic word order 3.1 German word order Topological fields (Erdmann, 1886; Drach, 1937) form the easiest way to describe German word order. The sentence structure for declarative main clauses, consists of five topological fields: Vorfeld (“pre-field”), Left Bracket (LB), Mittelfeld (“middle field”), Right Bracket (RB) and the Nachfeld (“after field”). A subset of permissible alternations in German are provided in Table 1. The last two sentences present an example of partial VP fronting. The fields are defined with regard to verbal forms, which are placed in the Left and Right Brackets. Each topological field has word order restrictions of its own. The Vorfeld must </context>
</contexts>
<marker>Erdmann, 1886</marker>
<rawString>Oskar Erdmann. 1886. Grundz¨uge der deutschen Syntax nach ihrer geschichtlichen Entwicklung dargestellt. Erste Abteilung. Verlag der Cotta’schen Buchhandlung, Stuttgart, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Walter Haeseryn</author>
</authors>
<title>De gebruikswaarde van de ans voor tekstschrijvers, taaltrainers en taaladviseurs.</title>
<date>1997</date>
<journal>Tekst[blad],</journal>
<volume>3</volume>
<contexts>
<context position="12202" citStr="Haeseryn, 1997" startWordPosition="1899" endWordPosition="1901"> De man zou haar kunnen hebben gezien the man would her.acc can have seen De man zou haar gezien kunnen hebben %De man zou haar kunnen gezien hebben The man should have been able to see her Table 2: Variations of Dutch auxiliary order 4. Verbs selecting for “to infinitives” which must precede their complement. While there is some variation among speakers, the generalizations above are robust. The permitted variations assuming a verb of the 3rd and 1st category in the right bracket are presented in Table 2.2 The variant %De man zou haar kunnen gezien hebben is typical of speakers from Belgium (Haeseryn, 1997); speakers from the Netherlands tend to regard such structures as ungrammatical. Our system can both generate a Flemish grammar accepting all of the above and a (Northern) Dutch grammar, rejecting the third variant. 4 Alternative auxiliary approaches This section presents the alternative analyses for auxiliary-verb structures in Germanic languages compared in this study. For reasons of space, I limit my description to an explanation of the differences and relevance of the compared analyses.3 4.1 Argument-composition The standard analysis for German and Dutch auxiliaries in HPSG is a so-called </context>
<context position="20766" citStr="Haeseryn (1997)" startWordPosition="3313" endWordPosition="3314">zation system. This included word order of the auxiliary and complement, fixed or free argument order, influence of inflection on word order, a more elaborate case hierarchy, ditransitive verbs, and the choice of auxiliary/verb analysis. Four choices files with different combinations of analyses were created for each language, resulting in 12 choices files in total. A basic test suite was developed that covers intransitive, transitive and ditransitive main clauses with up to three auxiliaries. The German set was based on a description provided by Kathol (2000), Dutch and Flemish were based on Haeseryn (1997). For each verb and auxiliary combination, all permissible word orders were defined based on descriptive resources. In order to make sure the grammars do not reveal unexpected forms of overgeneration, all possible ungrammatical orders were automatically generated. Table 3 provides the sizes of the test suites. Each language has both a complete set for the 6 grammars that provide full coverage, and a reduced set for the 6 grammars that can not handle split verbal clusters (see Section 4.3 for the motivation to test grammars that do not have full coverage). 7http://www.delph-in.net/matrix/ custo</context>
</contexts>
<marker>Haeseryn, 1997</marker>
<rawString>Walter Haeseryn. 1997. De gebruikswaarde van de ans voor tekstschrijvers, taaltrainers en taaladviseurs. Tekst[blad], 3.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Erhard Hinrichs</author>
<author>Tsuneko Nakazawa</author>
</authors>
<title>Linearizing auxs in German verbal complexes. In</title>
<date>1994</date>
<editor>John Nerbonne, Klaus Netter, and Carl Pollard, editors, German in HPSG. CSLI,</editor>
<location>Stanford, USA.</location>
<contexts>
<context position="12862" citStr="Hinrichs and Nakazawa, 1994" startWordPosition="1994" endWordPosition="1997">tend to regard such structures as ungrammatical. Our system can both generate a Flemish grammar accepting all of the above and a (Northern) Dutch grammar, rejecting the third variant. 4 Alternative auxiliary approaches This section presents the alternative analyses for auxiliary-verb structures in Germanic languages compared in this study. For reasons of space, I limit my description to an explanation of the differences and relevance of the compared analyses.3 4.1 Argument-composition The standard analysis for German and Dutch auxiliaries in HPSG is a so-called “argumentcomposition” analysis (Hinrichs and Nakazawa, 1994), which I will explain through the following Dutch example:4 (1) Ik I “I would like to read the book.” In the sentence above, the auxiliary willen “want” separates the verb lezen “read” from its object het 2Note that the same orders as in the Right Brackets may also occur in the Vorfeld (with or without the object). 3Details of the implementations can be found by using the metagrammar, which can be found on my homepage. 4Hinrichs and Nakazawa (1994) present an analysis for the German auxiliary flip. The relevant observations are the same.106 2 6 6 6 6VAL 4 2 3 3 6 / 3 7 7 6HEAD verb \\ 7 7 6 C</context>
</contexts>
<marker>Hinrichs, Nakazawa, 1994</marker>
<rawString>Erhard Hinrichs and Tsuneko Nakazawa. 1994. Linearizing auxs in German verbal complexes. In John Nerbonne, Klaus Netter, and Carl Pollard, editors, German in HPSG. CSLI, Stanford, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Leon S Levy</author>
<author>Masako Takahashi</author>
</authors>
<title>Tree adjunct grammars.</title>
<date>1975</date>
<journal>Journal of Computer and System Sciences,</journal>
<volume>10</volume>
<issue>1</issue>
<contexts>
<context position="28483" citStr="Joshi et al., 1975" startWordPosition="4569" endWordPosition="4572">scussion. 6 Related work Metagrammars (or grammar generators) have been established in the field for over a decade. This section provides an overview of the goals and set-up of some of the most notable projects. The MetaGrammar project (Candito, 1998; de la Clergerie, 2005; Kinyon et al., 2006) started as an effort to encode syntactic knowledge in an abstract class hierarchy. The hierarchy can contain cross-linguistically invariable properties and syntactic properties that hold across frameworks (Kinyon et al., 2006). The factorized descriptions of MetaGrammar support Tree-Adjoining Grammars (Joshi et al., 1975, TAG) as well as Lexical Functional Grammars (Bresnan, 2001, LFG). The eXtensible MetaGrammar (Crabb´e, 2005, XMG) defines its MetaGrammar as classes that are part of a multiple inheritance hierarchy. Kinyon et al. (Kinyon et al., 2006) use XMG to perform a cross-linguistic comparison of verb-second structures. Their study focuses on code-sharing between the languages, but does not address the problem of competing analyses investigated in this paper. The GF Resource Grammar Library (Ranta, 2009) is a multi-lingual linguistic resource that contains a set of syntactic analyses implemented in GF</context>
</contexts>
<marker>Joshi, Levy, Takahashi, 1975</marker>
<rawString>Aravind K. Joshi, Leon S. Levy, and Masako Takahashi. 1975. Tree adjunct grammars. Journal of Computer and System Sciences, 10(1):136–163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andreas Kathol</author>
</authors>
<title>Linear Syntax.</title>
<date>2000</date>
<publisher>Oxford Press.</publisher>
<contexts>
<context position="20717" citStr="Kathol (2000)" startWordPosition="3305" endWordPosition="3306"> but are not incorporated in the Matrix customization system. This included word order of the auxiliary and complement, fixed or free argument order, influence of inflection on word order, a more elaborate case hierarchy, ditransitive verbs, and the choice of auxiliary/verb analysis. Four choices files with different combinations of analyses were created for each language, resulting in 12 choices files in total. A basic test suite was developed that covers intransitive, transitive and ditransitive main clauses with up to three auxiliaries. The German set was based on a description provided by Kathol (2000), Dutch and Flemish were based on Haeseryn (1997). For each verb and auxiliary combination, all permissible word orders were defined based on descriptive resources. In order to make sure the grammars do not reveal unexpected forms of overgeneration, all possible ungrammatical orders were automatically generated. Table 3 provides the sizes of the test suites. Each language has both a complete set for the 6 grammars that provide full coverage, and a reduced set for the 6 grammars that can not handle split verbal clusters (see Section 4.3 for the motivation to test grammars that do not have full </context>
</contexts>
<marker>Kathol, 2000</marker>
<rawString>Andreas Kathol. 2000. Linear Syntax. Oxford Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alexandra Kinyon</author>
<author>Owen Rambow</author>
<author>Tatjana Scheffler</author>
<author>SinWon Yoon</author>
<author>Aravind K Joshi</author>
</authors>
<title>The metagrammar goes multilingual: A cross-linguistic look at the V2-phenomenon.</title>
<date>2006</date>
<booktitle>In Proceedings of the Eighth International Workshop on Tree Adjoining Grammar and Related Formalisms,</booktitle>
<pages>17--24</pages>
<institution>Sydney, Australia. Association for Computational Linguistics.</institution>
<contexts>
<context position="28160" citStr="Kinyon et al., 2006" startWordPosition="4523" endWordPosition="4526">s of a grammar over time. In particular, it should provide an indication of the feasibility of maintaining a higher number of competing analyses as the grammar grows. After providing background on related metagrammar projects and their goals, I will elaborate on the importance of systematic exploration of grammars in the discussion. 6 Related work Metagrammars (or grammar generators) have been established in the field for over a decade. This section provides an overview of the goals and set-up of some of the most notable projects. The MetaGrammar project (Candito, 1998; de la Clergerie, 2005; Kinyon et al., 2006) started as an effort to encode syntactic knowledge in an abstract class hierarchy. The hierarchy can contain cross-linguistically invariable properties and syntactic properties that hold across frameworks (Kinyon et al., 2006). The factorized descriptions of MetaGrammar support Tree-Adjoining Grammars (Joshi et al., 1975, TAG) as well as Lexical Functional Grammars (Bresnan, 2001, LFG). The eXtensible MetaGrammar (Crabb´e, 2005, XMG) defines its MetaGrammar as classes that are part of a multiple inheritance hierarchy. Kinyon et al. (Kinyon et al., 2006) use XMG to perform a cross-linguistic c</context>
</contexts>
<marker>Kinyon, Rambow, Scheffler, Yoon, Joshi, 2006</marker>
<rawString>Alexandra Kinyon, Owen Rambow, Tatjana Scheffler, SinWon Yoon, and Aravind K. Joshi. 2006. The metagrammar goes multilingual: A cross-linguistic look at the V2-phenomenon. In Proceedings of the Eighth International Workshop on Tree Adjoining Grammar and Related Formalisms, pages 17–24, Sydney, Australia. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephen McConnel</author>
</authors>
<date>1995</date>
<note>PC-PATR reference manual.</note>
<contexts>
<context position="29830" citStr="McConnel, 1995" startWordPosition="4778" endWordPosition="4779"> that can call more complex syntactic implementations from the grammar library. The grammar library is written by researchers with linguistic expertise. It makes extensive use code sharing: general categories and constructions that are used by all languages are implemented in a core syntax grammar. Each language9 has its own lexicon and morphology, as well as a set of language specific syntactic structures. Code sharing also takes place between the subset of languages explored, in particular by means of common modules for Romance languages and for Scandanavian languages. PAWS creates PC-PATR (McConnel, 1995) grammars based on field linguists’ input. The main purpose of PAWS lies in descriptive grammar writing and “computer-assisted related language adaptation”, where the grammar is used to map words from a text in a source language to a target language. PAWS differs from the other projects discussed here, because grammar engineering or syntactic research are not the main focus of the project. The LinGO Grammar Matrix, described in Section 2.1, is most closely related to the work presented in this paper. Like the other projects reviewed here, the Grammar Matrix does not offer alternative analyses </context>
</contexts>
<marker>McConnel, 1995</marker>
<rawString>Stephen McConnel. 1995. PC-PATR reference manual.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan M¨uller</author>
<author>Walter Kasper</author>
</authors>
<title>HPSG analysis for German.</title>
<date>2000</date>
<booktitle>Verbmobil: Foundations of Speech-to-Speech translation,</booktitle>
<pages>238--253</pages>
<editor>In Wolfgang Wahlster, editor,</editor>
<publisher>Springer.</publisher>
<location>Berlin, Germany.</location>
<marker>M¨uller, Kasper, 2000</marker>
<rawString>Stefan M¨uller and Walter Kasper. 2000. HPSG analysis for German. In Wolfgang Wahlster, editor, Verbmobil: Foundations of Speech-to-Speech translation, pages 238 – 253, Berlin, Germany. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan M¨uller</author>
</authors>
<title>Deutsche Syntax deklarativ. HeadDriven Phrase Structure Grammar f¨ur das Deutsche.</title>
<date>1999</date>
<publisher>Max Niemeyer Verlag, T¨ubingen.</publisher>
<marker>M¨uller, 1999</marker>
<rawString>Stefan M¨uller. 1999. Deutsche Syntax deklarativ. HeadDriven Phrase Structure Grammar f¨ur das Deutsche. Max Niemeyer Verlag, T¨ubingen.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan M¨uller</author>
</authors>
<title>Depictive secondary predicates in german and english.</title>
<date>2008</date>
<booktitle>Secondary Predicates in Eastern European Languages and Beyond, number 16 in Studia Slavica Oldenburgensia,</booktitle>
<pages>255--273</pages>
<editor>In Christoph Schroeder, Gerd Hentschel, and Winfried Boeder, editors,</editor>
<location>Oldenburg, Germany. BIS-Verlag.</location>
<marker>M¨uller, 2008</marker>
<rawString>Stefan M¨uller. 2008. Depictive secondary predicates in german and english. In Christoph Schroeder, Gerd Hentschel, and Winfried Boeder, editors, Secondary Predicates in Eastern European Languages and Beyond, number 16 in Studia Slavica Oldenburgensia, pages 255–273, Oldenburg, Germany. BIS-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan M¨uller</author>
</authors>
<title>On predication.</title>
<date>2009</date>
<booktitle>Proceedings of the 16th International Conference on Head-Driven Phrase Structure Grammar,</booktitle>
<editor>In Stefan M¨uller, editor,</editor>
<publisher>CSLI Publications.</publisher>
<location>Stanford, USA.</location>
<marker>M¨uller, 2009</marker>
<rawString>Stefan M¨uller. 2009. On predication. In Stefan M¨uller, editor, Proceedings of the 16th International Conference on Head-Driven Phrase Structure Grammar, Stanford, USA. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stephan Oepen</author>
</authors>
<title>incr tsdb()] — competence and performance laboratory.</title>
<date>2001</date>
<tech>Technical report, DFKI,</tech>
<location>Saarbr¨ucken, Germany.</location>
<contexts>
<context position="21603" citStr="Oepen, 2001" startWordPosition="3444" endWordPosition="3445">al orders were automatically generated. Table 3 provides the sizes of the test suites. Each language has both a complete set for the 6 grammars that provide full coverage, and a reduced set for the 6 grammars that can not handle split verbal clusters (see Section 4.3 for the motivation to test grammars that do not have full coverage). 7http://www.delph-in.net/matrix/ customize/ Each grammar was created using the metagrammar, ensuring that all components except the competing analyses were held constant among compared grammars. The [incr tsdbo ] competence and performance profiling environment (Oepen, 2001) was used in combination with the LKB to evaluate parsing performance of the individual grammars on the test suites. For each grammar, the number of required parsing tasks, memory (space) and CPU time per sentence, as well as the number of passive edges created during an average parse were compared. Performance on language generation was evaluated using the LKB. 5.2 Parsing results Table 4 presents the results from the parsing experiment. Note that all directly compared grammars have the same empirical coverage (100% coverage and 0% overgeneration on the phenomena included in the test suites).</context>
</contexts>
<marker>Oepen, 2001</marker>
<rawString>Stephan Oepen. 2001. [incr tsdb()] — competence and performance laboratory. Technical report, DFKI, Saarbr¨ucken, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aarne Ranta</author>
</authors>
<title>The GF resource grammar library.</title>
<date>2009</date>
<journal>Linguistic Issues in Language Technology,</journal>
<volume>2</volume>
<issue>2</issue>
<contexts>
<context position="28984" citStr="Ranta, 2009" startWordPosition="4647" endWordPosition="4648">n et al., 2006). The factorized descriptions of MetaGrammar support Tree-Adjoining Grammars (Joshi et al., 1975, TAG) as well as Lexical Functional Grammars (Bresnan, 2001, LFG). The eXtensible MetaGrammar (Crabb´e, 2005, XMG) defines its MetaGrammar as classes that are part of a multiple inheritance hierarchy. Kinyon et al. (Kinyon et al., 2006) use XMG to perform a cross-linguistic comparison of verb-second structures. Their study focuses on code-sharing between the languages, but does not address the problem of competing analyses investigated in this paper. The GF Resource Grammar Library (Ranta, 2009) is a multi-lingual linguistic resource that contains a set of syntactic analyses implemented in GF (Grammatical Framework). The purpose of the library is to allow engineers working on NLP applications to write simple grammar rules that can call more complex syntactic implementations from the grammar library. The grammar library is written by researchers with linguistic expertise. It makes extensive use code sharing: general categories and constructions that are used by all languages are implemented in a core syntax grammar. Each language9 has its own lexicon and morphology, as well as a set o</context>
<context position="31502" citStr="Ranta, 2009" startWordPosition="5046" endWordPosition="5047">such, the paper introduces a novel methodology for grammar engineering. The discussion and conclusion will elaborate on the advantages of the approach. 7 Discussion and conclusion 7.1 The challenge of choosing the right analysis As mentioned in the introduction, most phenomena in natural languages can be accounted for by more than one formal analysis. An engineer may implement alternative solutions and test the impact on the grammar concerning interaction with other phenomena (Bierwisch, 1963; M¨uller, 1999; Bender, 2008; Bender et al., 2011) and efficiency to decide between analyses. 9Ranta (Ranta, 2009) reports that GF is developed for fouro073teen languages, and more are under development. However, it is not feasible to carry out comparative tests by manually creating different versions of a grammar every time a decision about an implementation is made. Moreover, even if such a study were carried out at each stage, only the interaction with the current state of the grammar would be tested. This has two undesirable consequences. First, options may be rejected that would have worked perfectly well if different decisions had been made in the past. Second, because each decision is only based on</context>
</contexts>
<marker>Ranta, 2009</marker>
<rawString>Aarne Ranta. 2009. The GF resource grammar library. Linguistic Issues in Language Technology, 2(2).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>