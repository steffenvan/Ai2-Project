<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000002">
<title confidence="0.597279">
Transformation-based Interpretation of Implicit Parallel Structures:
Reconstructing the meaning of vice versa and similar linguistic operators
Helmut Horacek
Fachrichtung Informatik
Universit¨at des Saarlandes
66041 Saarbr¨ucken, Germany
</title>
<email confidence="0.984247">
horacek@ags.uni-sb.de
</email>
<author confidence="0.528986">
Magdalena Wolska
</author>
<affiliation confidence="0.220007">
Fachrichtung Allgemeine Linguistik
Universit¨at des Saarlandes
</affiliation>
<address confidence="0.443407">
66041 Saarbr¨ucken, Germany
</address>
<email confidence="0.994539">
magda@coli.uni-sb.de
</email>
<sectionHeader confidence="0.995555" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999931434782609">
Successful participation in dialogue as
well as understanding written text re-
quires, among others, interpretation of
specifications implicitly conveyed through
parallel structures. While those whose re-
construction requires insertion of a miss-
ing element, such as gapping and ellip-
sis, have been addressed to a certain extent
by computational approaches, there is vir-
tually no work addressing parallel struc-
tures headed by vice versa-like operators,
whose reconstruction requires transforma-
tion. In this paper, we address the mean-
ing reconstruction of such constructs by
an informed reasoning process. The ap-
plied techniques include building deep se-
mantic representations, application of cat-
egories of patterns underlying a formal
reconstruction, and using pragmatically-
motivated and empirically justified prefer-
ences. We present an evaluation of our al-
gorithm conducted on a uniform collection
of texts containing the phrases in question.
</bodyText>
<sectionHeader confidence="0.999135" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999768836734694">
Specifications implicitly conveyed through paral-
lel structures are an effective means of human
communication. Handling these utterances ade-
quately is, however, problematic for a machine
since a formal reconstruction of the representation
may be associated with ambiguities, typically re-
quiring some degree of context understanding and
domain knowledge in their interpretation. While
parallel structures whose reconstruction mainly re-
quires insertion, such as gapping and ellipsis, have
been addressed to a certain extent by computa-
tional approaches, there is virtually no work ad-
dressing parallel structures whose reconstruction
requires transformation. Several linguistic opera-
tors create specifications of this kind, including:
the other way (a)round, vice-versa, and analo-
gously. Consider, for example, the following state-
ment made by a student in an experiment with a
simulated tutoring system for proving theorems in
elementary set theory (Benzm¨uller et al., 2003):
“If all A are contained in K(B) and this also holds
the other way round, these must be identical sets”
(K stands for set complement). The interpreta-
tion of the the other way round operator is am-
biguous here in that it may operate on immediate
dependents (“all K(B) are contained in A”) or on
the embedded dependents (“all B are contained in
K(A)”) of the verb “contain”. The fact that the
Containment relation is asymmetric and the con-
text of the task – proving that “If A C_ K(B), then
B C_ K(A)” holds – suggest that the second inter-
pretation is meant. Assuming this more plausible
reading enables a more goal-oriented dialog: the
tutorial system can focus on a response to the false
conclusion made by the student about the identity
of the sets in question, rather than starting a boring
clarification subdialog.
The above example and several similar others
motivated us to look more systematically at lexi-
cal devices that create specifications of this kind.
We address the interpretation of such structures by
a well-informed reasoning process. Applied tech-
niques include building deep semantic represen-
tations, application of patterns underlying formal
reconstruction, and using pragmatically-motivated
and empirically justified preferences.
The outline of the paper is as follows: We de-
scribe phenomena in question. Then we illustrate
our natural language analysis techniques. We cate-
</bodyText>
<page confidence="0.95138">
377
</page>
<note confidence="0.747084">
Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 377–384,
Sydney, July 2006. c�2006 Association for Computational Linguistics
</note>
<bodyText confidence="0.9173365">
gorize underlying interpretation patterns, describe
the reconstruction algorithm, and evaluate it.
</bodyText>
<sectionHeader confidence="0.934952" genericHeader="method">
2 Data Collected From Corpora
</sectionHeader>
<bodyText confidence="0.999954195652174">
In order to learn about cross-linguistic regularities
in reconstructing the underlying form of propo-
sitions specified by vice versa or similar opera-
tors, we first looked at several English and Ger-
man corpora. These included, among others, the
Negra, the Frankfurter Rundschau, the Europarl
corpora and a corpus of tutorial dialogs on math-
ematics (Wolska et al., 2004). We also performed
several internet searches. We looked at the Ger-
man phrases andersrum and umgekehrt, and their
English equivalents vice versa and the other way
(a)round. We only considered instances where the
parallel structure with a pair of items swapped is
not stated explicitly. We excluded cases of the
use of umgekehrt as a discourse marker, cases in
which the transformation needed is of purely lex-
ical nature, such as turning “augment” into “re-
duce”, and instances of andersrum as expressing a
purely physical change, such as altering the orien-
tation of an object (cf. the Bielefeld corpusl).
The classification of vice versa utterances pre-
sented in Figure 1, reflects the role of the items
that must be swapped to build the parallel propo-
sition conveyed implicitly. The examples demon-
strate that the task of reconstructing the proposi-
tion left implicit in the text may be tricky.
The first category concerns swapping two case
role fillers or Arguments of a predicate head. This
may be applied to Agent and Patient dependents,
as in (1), or to two directional roles as in (2). In
the last example in this category, complications
arise due to the fact that one of the arguments
is missing on the surface and needs to be con-
textually inserted prior to building the assertions
with exchanged directional arguments. Moreover,
the swap can also work across clauses as in (3).
Complex interrelations may occur when the fillers
themselves are composed structures, is in (4),
which also makes swapping other pairs of items
structurally possible. In this example, the need for
exchanging the persons including their mentioned
body parts rather than the mere body parts or just
the persons requires world knowledge.
The second category comprises swapping ap-
plied to modifiers of two arguments rather than the
arguments themselves. An example is (5); the ut-
</bodyText>
<footnote confidence="0.941097">
1http://www.sfb360.uni-bielefeld.de/
</footnote>
<bodyText confidence="0.999902386363636">
terance is ambiguous since, from a purely struc-
tural point of view, it could also be categorized as
an Argument swap, however, given world knowl-
edge, this interpretation is rather infelicitous. Sim-
ilarly to (3), a contextually-motivated enhance-
ment prior to applying a swapping operation is re-
quired in (6); here: a metonymic extension, i.e.
expanding the “strings” to “the strings’ tones”.
The third category comprises occurrences of a
“mixed” form of the first two with a modifier sub-
stituted for an argument which, in turn, takes the
role of the modifier in the reconstructed form. The
first example, (7), has already been discussed in
the Introduction. The next one, (8), illustrates re-
peated occurrences of the items to be swapped.
Moreover, swapping the items A and B must be
propagated to the included formula. The next ex-
ample, (9), is handled by applying the exchange
on the basis of the surface structure: swapping the
properties of a triangle for the reconstructed asser-
tion. If a deeper structure of the sentence’s mean-
ing is built, this would amount to an implication
expressing the fact that a triangle with two sides
of equal length is a triangle that has two equal
angles. For such a structure, the reconstruction
would fall into the next category, exchange of the
order of two propositions: here, reversing the im-
plication. In (10), the lexeme “Saxophonist” needs
to be expanded into “Saxophone” and “Spieler”
(“player”), prior to performing the exchange.
The fourth category involves a swap of entire
Propositions; in the domain of mathematics, this
may pertain to formulas. In (11), swapping applies
to the sides of the equation descriptively referred
to by the distributivity law. In (12), this applies to
the arguments of the set inclusion relation, when
the arguments are interpreted as propositions. The
last example, (13), requires a structural recasting
in order to apply the appropriate swapping oper-
ation. When the utterance is rebuilt around the
RESULT relation, expressed as an optional case
role on the surface, swapping the two propositions
– “branching out of languages” and “geographical
separation” – yields the desired result.
</bodyText>
<sectionHeader confidence="0.995825" genericHeader="method">
3 The Interpretation Procedure
</sectionHeader>
<bodyText confidence="0.9985558">
In this section, we illustrate our technical contri-
bution. It consists of three parts, each dealt with in
a separate subsection: (1) the linguistic/semantic
analysis, (2) definitions of rules that support build-
ing parallel structures, and (3) the algorithm.
</bodyText>
<page confidence="0.983603">
378
</page>
<figure confidence="0.817332735294118">
Argument swap (1) Technological developments influence the regulatory framework and vice versa.
(2) It discusses all modes of transport from the European Union to these third countries and vice
versa.
(3) Ok – so the affix on the verb is the trigger and the NP is the target.... No; the other way round
Unterarm auf die Hufte des r Glasgow Rangers spielenden Ukrain-
4 Da traf V¨oller mit seinem fu
O ers, oder umgekehrt
Then V¨oller with his lower arm hit the hip of the Ukrainian playing for Glasgow Rangers, or
the other way round
Modifier swap 5 Nowadays, a surgeon in Rome can operate on an ill patient – usually an elderly patient – in
O Finland or Belgium and vice versa.
6 Der Ton der Klarinette ist wirklich ganz komplement¨ar zu den Seiteninstrumenten und
O umgekehrt
The clarinet’s tone is really very complimentary to strings and vice-versa
Mixed swap Wenn alle A in K(B) enthalten sind und dies auch umgekehrt gilt, muB es sich um zwei iden-
(7) tische Mengen handeln
If all A are contained in K(B) and this also holds vice-versa, these must be identical sets
8 Dann ist das Komplement von Menge A in Bezug auf B die Differenz A/B = K(A) und
O umgekehrt
Then the complement ofset A in relation to B is the difference A/B = K(A) and vice-versa
(9) Ein Dreieck mit zwei gleichlangen Seiten hat zwei gleichgroBe Winkel und umgekehrt
A triangle with two sites of equal length has two angles of equal size, and vice-versa
(10) ... Klarinette f¨ur Saxophonist und umgekehrt ...
... a clarinet for a saxophonist and vice-versa ...
Proposition swap (11) Man muB hier das Gesetz der Distributivit¨at von Durchschnitt ¨uber Vereinigung umgekehrt
anwenden
It is necessary here to apply the law of distributivity of intersection over union in reverse
direction
(12) Es gilt: P(C U (A n B)) C P(C) U P(A n B)..... Nein, andersrum.
It holds: P(C U (A n B)) C P(C) U P(A n B)..... No, the other way round.
(13) Wir wissen, daB sich Sprachen in Folge von geographischer Separierung auseinanderentwick-
eln, und nicht umgekehrt
We know that languages branch out as a result of geographical separation, not the other way
round
</figure>
<figureCaption confidence="0.998873">
Figure 1: Examples of utterances with vice versa or similar operators
</figureCaption>
<page confidence="0.940645">
379
</page>
<figure confidence="0.450402">
contain.PRED : Containment —. E, C, C
</figure>
<figureCaption confidence="0.995056">
Figure 2: Interpreted representation of the utter-
ance “all A are contained in K(B)”
</figureCaption>
<subsectionHeader confidence="0.999813">
3.1 Linguistic Analysis
</subsectionHeader>
<bodyText confidence="0.935803666666666">
The linguistic analysis consists of semantic pars-
ing followed by contextually motivated embed-
ding and enhancements. We assume a deep se-
mantic dependency-based analysis of the source
text. The input to our reconstruction algorithm is
a relational structure representing a dependency-
based deep semantics of the utterance, e.g. in the
sense of Prague School sentence meaning, as em-
ployed in the Functional Generative Description
(FGD) at the tectogrammatical level (Sgall et al.,
1986). In FGD, the central frame unit of a clause
is the head verb which specifies the tectogram-
matical relations (TRs) of its dependents (partici-
pants/modifications). Every valency frame spec-
ifies, moreover, which modifications are obliga-
tory and which optional. For example, the utter-
ance (7) (see Figure 1.) obtains the interpretation
presented in Figure 2.2 which, in the context of
an informal verbalization of a step in a naive set
theory proof, translates into the following formal
statement: “Vx.x E A ==&gt;. x E K(B)”.
The meaning representations are embedded
within discourse context and discourse relations
between adjacent utterances are inferred where
possible, based on the linguistic indicators (dis-
course markers). The nodes (heads) and de-
pendency relations of the interpreted dependency
structures as well as discourse-level relations serve
as input to instantiate the reconstruction pat-
terns. Contextual enhancements (e.g. lexical or
metonymic extensions) driven by the reconstruc-
tion requirements may be carried out.
Based on analysis of corpora, we have iden-
tified combinations of dependency relations that
commonly participate in the swapping operation
called for by the vice versa phrases. Examples of
pairs of such relations at sentence level are shown
in Figure 3.3 Similarly, in the discourse context,
arguments in, for example, CAUSE, RESULT,
CONDITION, SEQUENCE or LIST rela-
2We present a simplified schematic representation of
the tectogrammatical representations. Where necessary, for
space reasons, irrelevant parts are omitted.
3PRED is the immediate predicate head of the corre-
sponding relation.
</bodyText>
<figure confidence="0.973404571428571">
Exchangeable(ACTOR, PATIENT)
Exchangeable(DIRECTION-WHERE-FROM,
DIRECTION-WHERE-TO)
Exchangeable(TIME-TILL-WHEN,
TIME-FROM-WHEN)
Exchangeable(CAUSE, PRED)
Exchangeable(CONDITION, PRED)
</figure>
<figureCaption confidence="0.999972">
Figure 3: Examples of exchangeable relations
</figureCaption>
<bodyText confidence="0.9998159">
tions are likely candidates for a swapping opera-
tion. During processing, we use the association
table as a preference criterion for selecting candi-
date relations to instantiate patterns. If one of the
elements of a candidate pair is an optional argu-
ment that is not realized in the given sentence, we
look at the preceding context to find the first in-
stance of the missing element. Additionally, utter-
ance (10) would call for more complex procedures
to identify the required metonymic expansion.
</bodyText>
<subsectionHeader confidence="0.997157">
3.2 Interpretation Patterns
</subsectionHeader>
<bodyText confidence="0.999967172413793">
In order to accomplish the formal reconstruction
task, we define rules that encapsulate specifica-
tions for building the implicit parallel text on the
basis of the corresponding co-text. The rules con-
sist of a pattern and an action part. Patterns are
matched against the output of a parser on a text
portion in question, by identifying relevant case
roles, and giving access to their fillers. Moreover,
the patterns test constraints on compatibility of
candidates for swapping operations. The actions
apply recasting operations on the items identified
by the patterns to build the implicit parallel text.
Within patterns, we perform category member-
ship tests on the representation. Assuming x re-
ferring to a semantic representation, Pred(x) is
a logical function that checks if x has a Pred-
feature, i.e., it is an atomic proposition. Simi-
larly, Conj(x) and Subord(x) perform more spe-
cific tests for complex propositions: coordina-
tion or subordination, respectively. Moreover,
Pred1(x, x1) accesses the first proposition and
binds it to x1, while Pred2(x, x2) does the same
for the second one. Within a proposition, argu-
ments and modifiers are accessed by Case(x, y),
where y specifies the filler of Case in x, and in-
dices express constraints on identity or distinc-
tiveness of the relations. Case+ is a generaliza-
tion of Case for iterative embeddings, where in-
dividual cases in the chain are not required to be
</bodyText>
<equation confidence="0.918195">
TERti:K(B).ACT : Container TERti:A.PAT : Containee
</equation>
<page confidence="0.784737">
380
</page>
<bodyText confidence="0.273548">
1a. Argument swap within the same clause
</bodyText>
<equation confidence="0.9935924">
Pred(x) ∧ Case1(x, y) ∧ Case2(x, z)∧
Type − compatible(y, z) ∧
Exchangeable(Case1, Case2) →
5wap(x, y, z, xp)
1b. Argument swap across two clauses
Conj(x) ∧ Case1(x, y) ∧ Case(y, u) ∧
Case2(x, z) ∧ Case(z, v) → 5wap(x, u, v, xp)
2. Modifier swap
Pred(x) ∧ Case1(x, y) ∧ Case+(y, u) ∧
Case2(x, z) ∧ Case�21(z, v)∧
¬(Case1 = Case2) ∧ Type −
compatible(u, v) → 5wap(x, u, v, xp)
3. Mixed swap
Pred(x) ∧ Case1(x, y) ∧ Case11(y, u) ∧
Case2(x, z)∧
¬(Case1 = Case2) ∧ Type −
compatible(u, z) → 5wap(x, u, z, xp)
4. Proposition swap
5ubord(x) ∧ Case1(x, y) ∧ Case2(x, z) ∧
¬(Case1 = Case2) → 5wap(x, y, z, xp)
</equation>
<figureCaption confidence="0.997786">
Figure 4: Reconstruction patterns
</figureCaption>
<bodyText confidence="0.999870222222223">
identical. In addition to access predicates, there
are test predicates that express constraints on the
identified items. The most basic one is Type-
compatible(x, y), which tests whether the types
of x and y are compatible according to an underly-
ing domain ontology. A more specific test is per-
formed by Exchangeable(Case1, Case2) to ac-
cess the associations specified in the previous sec-
tion. The action part of the patterns is realized by
5wap(x, y, z, xp) which replaces all occurrences
of x in z by y and vice-versa, binding the result to
xp. Different uses of this operation result in dif-
ferent instantiations of y and z with respect to the
overarching structure x.
There are patterns for each category introduced
in Section 2 (see Figure 4). All patterns are tested
on a structure x and, if successful, the result is
bound to xp. For Argument swap there are two
patterns. If the scope of the swap is a single
clause (1a), two arguments (case roles) identified
as exchangeable are picked. Their fillers must be
compatible in types. If the swapping overarches
two clauses (1b), the connecting relation must be
a conjunction and subject to swapping are argu-
ments in the same relations. For Modifier swap
(2), type compatible modifiers of distinct argu-
ments are picked. For Mixed swap (3), a depen-
</bodyText>
<equation confidence="0.9681048">
1. Lexical expansion
Pred(x) ∧ Case1(x, y) ∧ Lex −
Expand(y, u, Case, v)∧
Case2(x, z) ∧ ¬(Case1 =
Case2) ∧ Type − compatible(v, z) →
5wap(x, y, Case(u, v), xp) ∧ 5wap(xp, z, v, xp)
2. Recast optional case as head of an obligatory
Pred(x) ∧ Case1(x, u) ∧ Case2(x, v) ∧
Type(u, tu) ∧ Type(v, tv)∧
Recastable(tv, Case2, tu, Case3) ∧
Case3(x, w) ∧ Type − compatible(v, w)∧
¬(Case1 = Case2) ∧ ¬(Case1 =
Case3) ∧ ¬(Case2 = Case3) →
5wap(x, u, v, xp) ∧ Add(xp, Case3(v, u)) ∧
Remove(xp, Case2)
3. Recast an optional case as a discourse relation
Pred(x) ∧ Case(x, y) ∧
Member(Case, 5ubords) →
Build(Case(xp, Case2(xp, y) ∧
Case1(xp, Remove(x, y))
</equation>
<figureCaption confidence="0.997553">
Figure 5: Recasting rules
</figureCaption>
<bodyText confidence="0.999745208333333">
dent is picked, as in (1a) and a type-compatible
modifier of another argument, as in (2). Proposi-
tion swap (4) inverts the order of the two clauses.
In addition to the the pattern matching tests,
the Argument and the Proposition swap operations
undergo a feasibility test if knowledge is avail-
able about symmetry or asymmetry of the relation
(the Pred feature) whose cases are subject to the
swapping operation: if such a relation is known as
asymmetric, the result is considered implausible
due to semantic reasons, if it is symmetric, due to
pragmatic reasons since the converse proposition
conveys no new information; in both cases such a
swapping operation is not carried out.
To extend the functionality of the patterns, we
defined a set of recasting rules (Figure 5) invoked
to reorganize the semantic representation prior to
testing applicability of a suitable reconstruction
rule. In contrast to inserting incomplete informa-
tion contextually and expanding metonymic rela-
tions the recasting operations are intended purely
to accommodate semantic representations for this
purpose. We have defined three recasting rules
(numbered accordingly in Figure 5):
</bodyText>
<sectionHeader confidence="0.737728" genericHeader="method">
1. Lexical recasting
</sectionHeader>
<bodyText confidence="0.994922">
The semantics of some lexemes conflates the
meaning of two related items. If one of them
is potentially subject to swapping, it is not ac-
cessible for the operation without possibly af-
</bodyText>
<page confidence="0.992512">
381
</page>
<figure confidence="0.996305928571429">
Build-Parallel-Structure (x)
1. Determine scopes for applying swap operations
Structures +— E
if Pred(x) then Scopes +— {x} else
if Subord(x) V Conj(x) n Case2(x, z)
then Scopes +— {z, x}
endif endif
2. Match patterns and build swapped structures
forall Scope1 in Scopes do
Structures +— Structuresu
&lt; X − swap(Scope1) &gt;
&lt; X − swap(Y − recast(Scope1)) &gt;
end forall
return Sort(Apply − priorities(Structures))
</figure>
<figureCaption confidence="0.999983">
Figure 6: Reconstruction algorithm
</figureCaption>
<bodyText confidence="0.99961325">
fecting the other so closely related to it. The
representation of such lexemes is expanded,
provided there is a sister case with a filler that
is type compatible.
</bodyText>
<listItem confidence="0.56045">
2. Case recasting
</listItem>
<bodyText confidence="0.999964625">
The dependency among items may not be re-
flected by the dependencies in the linguistic
structure. Specifically, a dependent item may
appear as a sister case in overarching case
frame. The purpose of this operation is to
build a uniform representation, by removing
the dependent case role filler and inserting it
as a modifier of the item it is dependent on.
</bodyText>
<subsubsectionHeader confidence="0.568845">
3. Proposition recasting
</subsubsectionHeader>
<bodyText confidence="0.999256157894737">
Apart from expressing a discourse relation
by a connective, a proposition filling a sub-
ordinate relation may also be expressed as a
case role (argument). Again, uniformity is
obtained through lifting the argument (case
filler) and expressing the discourse relation as
a multiple clause construct.
Additional predicates are used to implement re-
casting operations. For example, the predicate
Lex−Expand(y, u, Case, v) re-expresses the se-
mantics of y by u, accompanied by a Case role
filled by v. Type(x, y) associates the type y
with x. The type information is used to access
Recastable(t1, C1, t2, C2) table to verify whether
case C1 with a t1-type filler can also be expressed
as case C2 with type t2. Build(x) creates a new
structure x. Remove(x, y) is realized as a func-
tion, deleting occurrences of y in x, and Add(x, y)
expands x by an argument y.
</bodyText>
<subsectionHeader confidence="0.999878">
3.3 The Structure Building Algorithm
</subsectionHeader>
<bodyText confidence="0.996101948717949">
In this section, we describe how we build implic-
itly conveyed parallel structures based on the def-
initions of swapping operations with optional in-
corporation of recasting operations if needed. The
procedure consists of two main parts (see Fig-
ure 6). In the first part, the scope for applying the
swapping rules defined in Figure 4 is determined,
and in the second part, the results obtained by ex-
ecuting the rules are collected. Due to practical
reasons, we introduce simplifications concerning
the scope of vice-versa in the current formulation
of the procedure. While the effect of this operator
may range over entire paragraphs in some involved
texts, we only consider single sentences with at
most two coordinated clauses or one subordinated
clause. We feel that this restriction is not severe
for uses in application-oriented systems.
The procedure Build-Parallel-Structure takes
the last input sentence x, examines its clause
structure, and binds potential scopes to vari-
able Scopes. For composed sentences, the en-
tire sentence (x) as well as the second clause
(Case2(x, z)) is a potential scope for building par-
allel structures.
In the second part of the procedure, each swap-
ping pattern is tested for the two potential scopes,
and results are accumulated in Structures. The
call &lt; X − swap(Scope1) &gt;, with X being
either Case, Argument, Mixed, or Prop ex-
presses building a set of all possible instantiations
of the pattern specified when applied to Scope1.
Some of these operations are additionally invoked
with alternative parameters which are accommo-
dated by a recasting operation fitting to the pat-
tern used, that call being &lt; X − swap(Y −
recast(Scope1)) &gt;, where Y is Case, Lex, or
Prop. Finally, if multiple readings are generated,
they are ranked according to the following priori-
tized criteria:
</bodyText>
<listItem confidence="0.949991">
1. The nearest scope is preferred;
2. Operations swapping “duals”, such as left-right, are
given priority;
3. Candidate phrases are matched against the corpus;
</listItem>
<subsectionHeader confidence="0.700818">
items with higher bigram frequencies are preferred.
</subsectionHeader>
<bodyText confidence="0.997258333333333">
Linguistic analysis, structure reconstruction
patterns, recasting rules, and the algorithms oper-
ating on top of these structures are formulated in
a domain-independent way, also taking care that
the tasks involved are clearly separated. Hence, it
is up to a concrete application to elaborate lexical
</bodyText>
<page confidence="0.995801">
382
</page>
<bodyText confidence="0.998898">
semantic definitions required (e.g. for a saxophon-
ist to capture example (10) in Figure 1) to define
the tables Exchangeable and Recastable, and to
enhance preference criteria.
</bodyText>
<sectionHeader confidence="0.994603" genericHeader="evaluation">
4 Evaluation
</sectionHeader>
<bodyText confidence="0.99997371875">
We conducted an evaluation of the parallel struc-
ture building algorithm on a sample of sentences
from Europarl (Koehn, 2002), a parallel corpus of
professionally translated proceedings of the Euro-
pean Parliament aligned at the document and sen-
tence level. At this point, we were able to conduct
only manual evaluation. This is mainly due to the
fact that we did not have access to a wide-coverage
semantic dependency parser for English and Ger-
man.4 In this section, we present our corpus sam-
ple and the evaluation results.
Evaluation sample To build the evaluation sam-
ple, we used sentence- and word-tokenized En-
glish German part of Europarl. Using regular ex-
pressions, we extracted sentences with the follow-
ing patterns: (i) for English, phrases the other way
a*round or vice versa (ii) for German: (ii-1) the
word umgekehrt preceded by a sequence of und
(“and”), oder (“or”), sondern (“but”), aber (“but”)
or comma, optional one or two tokens and op-
tional nicht (“not”), (ii-2) the word umgekehrt pre-
ceded by a sequence gilt (“holds”) and one or two
optional tokens, (ii-3): the word anders(he)*rum.
We obtained 137 sentences.
Next, given the present limitation of our algo-
rithm (see Section 3.3), we manually excluded
those whose interpretation involved the preceding
sentence or paragraph,5 as well as those in which
the interpretation was explicitly spelled out. There
were 27 such instances. Our final evaluation sam-
ple consisted of 110 sentences: 82 sentences in
English–German pairs and 28 German-only.6
</bodyText>
<footnote confidence="0.948205625">
4In the future, we are planning an automated evaluation in
which as input to the implemented algorithm we would pass
manually built dependency structures.
5For example, sentences such as: “Mr President, concern-
ing Amendment No 25 , I think the text needs to be looked
at because in the original it is the other way round to how it
appears in the English text .”
6The reason for this split is that the English equivalents
</footnote>
<subsectionHeader confidence="0.507201">
of the German sentences containing the word umgekehrt may
</subsectionHeader>
<bodyText confidence="0.956022571428571">
contain phrases other than the other way round or vice versa.
Depending on context, phrases such as conversely, in or the
reverse, the opposite, on the contrary may be used. Here, we
targeted only the other way round and vice versa phrases. If
the German translation contained the word umgekehrt, and
the English source one of the alternatives to our target, in the
evaluation we included only the German sentence.
</bodyText>
<tableCaption confidence="0.986484">
Table 1: Distribution of patterns
</tableCaption>
<bodyText confidence="0.993922666666667">
Distribution of categories We manually cate-
gorized the structures in our sample and marked
the elements of the dependency structures that par-
ticipate in the transformation. Table 1. presents
the distribution of structure categories. We ex-
plicitly included counts for alternative interpreta-
tions. For example Arg/Mod means that either
the Argument or Modifier transformation can be
applied with the same effect, as in the sentence
“External policy has become internal policy, and
vice versa”: either the words “external” and “in-
ternal” may be swapped (Modifier), or the whole
NPs “external policy” and “internal policy” (Ar-
gument). Lex means that none of the patterns was
applicable and a lexical paraphrase (such as use of
an antonym) needed to be performed in order to re-
construct the underlying semantics (i.e. no paral-
lel structure was involved). Other means that there
was a parallel structure involved, however, none of
our patterns covered the intended transformation.
Evaluation results The evaluation results are
presented in Tables 2. and 3. Table 2. shows an
overview of the results. The interpretation of the
result categories is as follows:
Correct: the algorithm returned the intended reading as
a unique interpretation (this includes correct identi-
fication of “lexical paraphrases” (the Lex category
in Table 1.);
Ambig.: multiple results were returned with the intended
reading among them;
Wrong: the algorithm returned a wrong result (if multi-
ple results, then the intended one was not included);
Failed: the algorithm failed to recognize a parallel struc-
ture where one existed because no known pattern
matched.
Table 3. shows within-category results. Here, Cor-
rect result for Other means that the algorithm cor-
rectly identified 8 cases to which no current pat-
tern applied. The two Wrong results for Other
</bodyText>
<figure confidence="0.994569590909091">
Arg
64
110
Total
Category
No. of instances
Modifier
Arg/Mod
Mixed
Arg/Mixed
Prop
Arg/Prop
Lex
Other
5
3
6
2
1
1
18
10
</figure>
<page confidence="0.997586">
383
</page>
<tableCaption confidence="0.995958">
Table 2: Evaluation results
</tableCaption>
<table confidence="0.9998719">
Category Correct Ambig. Wrong Failed Total
Arg 46 17 0 1 64
Mod 3 2 0 0 5
Arg/Mod 3 – 0 0 3
Mixed 4 2 0 0 6
Arg/Mixed 2 – 0 0 2
Prop 1 0 0 0 1
Arg/Prop 0 – 0 1 1
Lex 16 0 2 0 18
Other 8 0 2 0 10
</table>
<tableCaption confidence="0.99931">
Table 3: Within-category results
</tableCaption>
<bodyText confidence="0.999014416666667">
mean that a pattern was identified, however, this
pattern was not the intended one. In two cases
(false-negatives), the algorithm failed to identify
a pattern even though it fell into one of the known
categories (Argument and Prop).
Discussion The most frequently occurring pat-
tern in our sample is Argument. This is often a
plausible reading. However, in 3 of the 4 false-
positives (Wrong results), the resolved incorrect
structure was Arg. If we were to take Arg as base-
line, aside from missing the other categories (al-
together 12 instances), we would obtain the final
result of 63 Correct (as opposed to 96; after col-
lapsing the Correct and Ambig. categories) and
15 (as opposed to 4) Wrong results.
Let us take a closer look at the false-negative
cases and the missed patterns. Two missed known
categories involved multiple arguments of the
main head: a modal modifier (modal verb) and an
additive particles (“also”) in one case, and in the
other, rephrasing after transformation. To improve
performance on cases such as the former, we could
incorporate an exclusion list of dependents that the
transformation should disregard.
Among the patterns currently unknown to the
algorithm, we found four types (one instance of
each in the sample) that we can anticipate as fre-
quently recurring: aim and recipient constructs
involving a head and its Aim- and Beneficiary-
dependent respectively, a temporal-sequence in
which the order of the sequence elements is re-
versed, and a comparative structure with swapped
relata. The remaining 6 structures require a more
involved procedure: either the target dependent is
deeply embedded or paraphrasing and/or morpho-
logical transformation of the lexemes is required.
</bodyText>
<sectionHeader confidence="0.996977" genericHeader="conclusions">
5 Conclusions and Future Research
</sectionHeader>
<bodyText confidence="0.999959545454545">
In this paper, we presented techniques of for-
mal reconstruction of parallel structures implicitly
specified by vice versa or similar operators. We
addressed the problem by a domain-independent
analysis method that uses deep semantics and con-
textually enhanced representations, exploits re-
casting rules to accommodate linguistic variations
into uniform expressions, and makes use of pat-
terns to match parallel structure categories.
Although we dedicated a lot of effort to building
a principled method, the success is limited with
respect to the generality of the problem: in some
cases, the scope of reconstruction overarches en-
tire paragraphs and deciding about the form re-
quires considerable inferencing (cf. collection at
http://www.chiasmus.com/). For our purposes, we
are interested in expanding our method to other
kinds of implicit structures in the tutorial context,
for example, interpretations of references to analo-
gies, in the case of which structure accommoda-
tion and swapping related items should also be
prominent parts.
</bodyText>
<sectionHeader confidence="0.999263" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.98810215">
C. Benzm¨uller, A. Fiedler, M. Gabsdil, H. Horacek, I. Kruijff-
Korbayov´a, M. Pinkal, J. Siekmann, D. Tsovaltzi, B.Q.
Vo, and M. Wolska. 2003. A Wizard-of-Oz experiment
for tutorial dialogues in mathematics. In Supplementary
Proceedings of the 11th Conference on Artificial Intelli-
gence in Education (AIED-03); Vol. VIII. Workshop on
Advanced Technologies for Mathematics Education, pages
471–481, Sydney, Australia.
P. Koehn. 2002. Europarl: A multilingual corpus for evalua-
tion of machine translation, Draft, Unpublished.
P. Sgall, E. Hajiˇcov´a, and J. Panevov´a. 1986. The meaning of
the sentence in its semantic andpragmatic aspects. Reidel
Publishing Company, Dordrecht, The Netherlands.
M. Wolska, B.Q. Vo, D. Tsovaltzi, I. Kruijff-Korbayov´a,
E. Karagjosova, H. Horacek, M. Gabsdil, A. Fiedler, and
C. Benzm¨uller. 2004. An annotated corpus of tutorial
dialogs on mathematical theorem proving. In Proceed-
ings of the 4th International Conference on Language
Resources and Evaluation (LREC-04), pages 1007–1010,
Lisbon, Potugal.
</reference>
<figure confidence="0.977550083333333">
110
Total
Result
No. of instances
Correct
Ambig.
Wrong
Failed
75
21
4
10
</figure>
<page confidence="0.979674">
384
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.263129">
<title confidence="0.9971805">Transformation-based Interpretation of Implicit Parallel Structures: the meaning of versa similar linguistic operators</title>
<author confidence="0.637302">Helmut Horacek</author>
<affiliation confidence="0.657319">Fachrichtung Informatik Universit¨at des Saarlandes</affiliation>
<address confidence="0.988521">66041 Saarbr¨ucken, Germany</address>
<email confidence="0.997177">horacek@ags.uni-sb.de</email>
<author confidence="0.8468545">Magdalena Wolska Fachrichtung Allgemeine Linguistik</author>
<affiliation confidence="0.969063">Universit¨at des Saarlandes</affiliation>
<address confidence="0.992315">66041 Saarbr¨ucken, Germany</address>
<email confidence="0.999039">magda@coli.uni-sb.de</email>
<abstract confidence="0.999287041666667">Successful participation in dialogue as well as understanding written text requires, among others, interpretation of specifications implicitly conveyed through parallel structures. While those whose reconstruction requires insertion of a missing element, such as gapping and ellipsis, have been addressed to a certain extent by computational approaches, there is virtually no work addressing parallel strucheaded by operators, whose reconstruction requires transformation. In this paper, we address the meaning reconstruction of such constructs by an informed reasoning process. The applied techniques include building deep semantic representations, application of categories of patterns underlying a formal reconstruction, and using pragmaticallymotivated and empirically justified preferences. We present an evaluation of our algorithm conducted on a uniform collection of texts containing the phrases in question.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<authors>
<author>C Benzm¨uller</author>
<author>A Fiedler</author>
<author>M Gabsdil</author>
<author>H Horacek</author>
<author>I KruijffKorbayov´a</author>
<author>M Pinkal</author>
<author>J Siekmann</author>
<author>D Tsovaltzi</author>
<author>B Q Vo</author>
<author>M Wolska</author>
</authors>
<title>A Wizard-of-Oz experiment for tutorial dialogues in mathematics.</title>
<date>2003</date>
<booktitle>In Supplementary Proceedings of the 11th Conference on Artificial Intelligence in Education (AIED-03); Vol. VIII. Workshop on Advanced Technologies for Mathematics Education,</booktitle>
<pages>471--481</pages>
<location>Sydney, Australia.</location>
<marker>Benzm¨uller, Fiedler, Gabsdil, Horacek, KruijffKorbayov´a, Pinkal, Siekmann, Tsovaltzi, Vo, Wolska, 2003</marker>
<rawString>C. Benzm¨uller, A. Fiedler, M. Gabsdil, H. Horacek, I. KruijffKorbayov´a, M. Pinkal, J. Siekmann, D. Tsovaltzi, B.Q. Vo, and M. Wolska. 2003. A Wizard-of-Oz experiment for tutorial dialogues in mathematics. In Supplementary Proceedings of the 11th Conference on Artificial Intelligence in Education (AIED-03); Vol. VIII. Workshop on Advanced Technologies for Mathematics Education, pages 471–481, Sydney, Australia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Koehn</author>
</authors>
<title>Europarl: A multilingual corpus for evaluation of machine translation,</title>
<date>2002</date>
<location>Draft, Unpublished.</location>
<contexts>
<context position="23914" citStr="Koehn, 2002" startWordPosition="3821" endWordPosition="3822">stic analysis, structure reconstruction patterns, recasting rules, and the algorithms operating on top of these structures are formulated in a domain-independent way, also taking care that the tasks involved are clearly separated. Hence, it is up to a concrete application to elaborate lexical 382 semantic definitions required (e.g. for a saxophonist to capture example (10) in Figure 1) to define the tables Exchangeable and Recastable, and to enhance preference criteria. 4 Evaluation We conducted an evaluation of the parallel structure building algorithm on a sample of sentences from Europarl (Koehn, 2002), a parallel corpus of professionally translated proceedings of the European Parliament aligned at the document and sentence level. At this point, we were able to conduct only manual evaluation. This is mainly due to the fact that we did not have access to a wide-coverage semantic dependency parser for English and German.4 In this section, we present our corpus sample and the evaluation results. Evaluation sample To build the evaluation sample, we used sentence- and word-tokenized English German part of Europarl. Using regular expressions, we extracted sentences with the following patterns: (i</context>
</contexts>
<marker>Koehn, 2002</marker>
<rawString>P. Koehn. 2002. Europarl: A multilingual corpus for evaluation of machine translation, Draft, Unpublished.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Sgall</author>
<author>E Hajiˇcov´a</author>
<author>J Panevov´a</author>
</authors>
<title>The meaning of the sentence in its semantic andpragmatic aspects.</title>
<date>1986</date>
<publisher>Reidel Publishing Company,</publisher>
<location>Dordrecht, The Netherlands.</location>
<marker>Sgall, Hajiˇcov´a, Panevov´a, 1986</marker>
<rawString>P. Sgall, E. Hajiˇcov´a, and J. Panevov´a. 1986. The meaning of the sentence in its semantic andpragmatic aspects. Reidel Publishing Company, Dordrecht, The Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Wolska</author>
<author>B Q Vo</author>
<author>D Tsovaltzi</author>
<author>I Kruijff-Korbayov´a</author>
<author>E Karagjosova</author>
<author>H Horacek</author>
<author>M Gabsdil</author>
<author>A Fiedler</author>
<author>C Benzm¨uller</author>
</authors>
<title>An annotated corpus of tutorial dialogs on mathematical theorem proving.</title>
<date>2004</date>
<booktitle>In Proceedings of the 4th International Conference on Language Resources and Evaluation (LREC-04),</booktitle>
<pages>1007--1010</pages>
<location>Lisbon, Potugal.</location>
<marker>Wolska, Vo, Tsovaltzi, Kruijff-Korbayov´a, Karagjosova, Horacek, Gabsdil, Fiedler, Benzm¨uller, 2004</marker>
<rawString>M. Wolska, B.Q. Vo, D. Tsovaltzi, I. Kruijff-Korbayov´a, E. Karagjosova, H. Horacek, M. Gabsdil, A. Fiedler, and C. Benzm¨uller. 2004. An annotated corpus of tutorial dialogs on mathematical theorem proving. In Proceedings of the 4th International Conference on Language Resources and Evaluation (LREC-04), pages 1007–1010, Lisbon, Potugal.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>