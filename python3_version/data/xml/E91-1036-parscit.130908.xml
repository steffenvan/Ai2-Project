<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.583700666666667">
CLASSICAL LOGICS FOR ATTRIBUTE-VALUE LANGUAGES
Jürgen Wedekind
Xerox Palo Alto Research Center
and
C.S.L.I. - Stanford University
USA
</note>
<sectionHeader confidence="0.959807" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999968357142857">
This paper describes a classical logic for attribute-value (or fea-
ture description) languages which are used in unification gram-
mar to describe a certain kind of linguistic object commonly
called attribute-value structure (or feature structure). The al-
gorithm which is used for deciding satisfiability of a feature
description is based on a restricted deductive closure construc-
tion for sets of literals (atomic formulas and negated atomic
formulas). In contrast to the Kasper/Rounds approach (cf.
[Kasper/Rounds 90]), we can handle cyclicity, without the need
for the introduction of complexity norms, as in [Johnson 88]
and [Beierle/Pletat 88]. The deductive closure construction is
the direct proof-theoretic correlate of the congruence closure
algorithm (cf. [Nelson/Oppen 80]), if it were used in attribute-
value languages for testing satisfiability of finite sets of literals.
</bodyText>
<sectionHeader confidence="0.9988" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999821333333333">
This paper describes a classical logic for attribute-value (or fea-
ture description) languages which are used in unification gram-
mar to describe a certain kind of linguistic object commonly
called attribute-value structure (or feature structure). From a
logical point of view an attribute-value structure like e.g the
following (in matrix notation)
</bodyText>
<sectionHeader confidence="0.9736178" genericHeader="introduction">
PRED &apos;PROMISE&apos;
TENSE PAST
SUBJ PREF) &apos;JOHN&apos; I
SUBJ
PRED &apos;COME&apos;
</sectionHeader>
<bodyText confidence="0.996062395833334">
can be regarded as a graphical representation of a mini-
mal model of a satisfiable feature description. If we assume
that the attributes .(in the example: PRED, TENSE, SUBJ,
XCOMP) are unary partial function symbols and the values
(a, &apos;PROMISE&apos;, PAST, &apos;JOHN&apos;, &apos;COME&apos;) are constants then
the given feature structure represents graphically e.g. the min-
imal model of the following description: •
PREP SUBJa &apos;JOHN&apos; &amp; TENSEa PAST &amp;
PREDa &apos;PROMISE&apos; Sz SUBJa SUBJ XCOMPa
PRED XCOMPa &apos;COME&apos;.1
Note that the terms are formed without using brackets. (Since
all function symbols are unary, the introduction of brackets would
So, in the following attribute-value languages are regarded ar
quantifier-free sublanguages of classical first order languager
with equality whose (nonlogical) symbols are given by a set 0&apos;
unary partial function symbols (attributes) and a set of con-
stants (atomic and complex values). The logical vocabulary
includes all propositional connectives; negation is interpreted
chssically.2
For quantifier-free attribute-value languages L we give an ax-
iomatic or Hilbert type system 11°Av which simply results from
an ordinary first order system (with partial function symbols),
if its language were restricted to the vocabulary of L. Accord-
ing to requirements of the applications, axioms for the constant-
consistency, constant/complex-consistency and acyclicity can
be added to force these properties for the feature structures
(models).
For deciding consistency (or satisfiability) of a feature descrip-
tion, we assume first, that the conjunction of the formulas
in, the feature description is converted to disjunctive normal
form. Since a formula in disjunctive normal form is consis-
tent, ill&apos; at least one of its disjuncts is consistent, we only need
an algorithm for &apos;deciding consistency of finite sets of literals
(atomic formulas or negated atomic formulas) S. In contrast
to the reduction algorithms which normalize a set S accord-
ing to a complexity norm in a sequence of norm decreasing
rewrite steps&apos; we use a restricted deductive closure algorithm
for deciding the consistency of sets of literals.&apos; The restric-
tion results from the fact that it is sufficient for deciding the
consistency of S to consider proofs of equations from S with
a certain subterin property. For the closure construction only
those equations are derived from S whose terms are subterms of
the terms occurring in the formulas of S. This guarantees that
the construction terminates with a finite set of literals. The ad-
equacy of this subterm property restriction, which was already
shown for the number theoretic calculus K in [Kreisel/Tait 61]
by [Statman 74], is a necessary condition for the development
of more efficient Cut-free Gentzen type systems for attribute-
</bodyText>
<footnote confidence="0.8149137">
not improve the readability essentially.) Therefore we write e.g.
FRED SUBJa instead of PRED(SUBJ(a)).
2For intuitionistic negation cf. e.g. [Dawar/Vijay-Shanker 90]
and [Langhohn 89].
3Cf. e.g. [Kreisel/Tait 61], [Knuth/Bendix 70], and ap-
plied to attribute-value languages [Johnson 88], [Beierle/Pletat 88].
[Smolka 89].
4Since we allow cyclicity, unrestricted deductive closure algo-
rithms (cf. e.g. [Kasper/Rounds 86] and [Kasper/Rounds 90]) can-
not be applied.
</footnote>
<equation confidence="0.84184475">
a
XCOMP
- 204 -
value languages.5
</equation>
<bodyText confidence="0.9899248">
Moreover, this closure construction is the direct proof-
theoretic correlate of the congruence closure algorithm (cf.
Itirlson/Oppen 80)), if it were used for testing satisfiability of
finite sets of literals in inv. As it is shown there, the congru-
ence closure algorithm can be used to test consistency if the
terms of the equations are represented as labeled graphs and
the equations as a relation on the nodes of that graph.
00 thie basis of the algorithm for deciding satisfiability of finite
sets of formulas we then show the completeness and decid ability
of ir;tv.
</bodyText>
<sectionHeader confidence="0.991473" genericHeader="method">
2 Attribute-Value Languages
</sectionHeader>
<bodyText confidence="0.9927715">
In this section we define the type of language we want to con-
sider and introduce some additional notation.
</bodyText>
<sectionHeader confidence="0.706704" genericHeader="method">
2] Syntax
</sectionHeader>
<listItem confidence="0.964900333333333">
2.1. DEFINITION. A quantifier-free attribute-value language
(44v) consists of the logical connectives 1 (false), (nega-
tion), D (implication), the equality symbol Pe, and the paren-
theses (,). The nonlogical vocabulary is given by a finite set of
constants C and a finite set of unary partial function symbols
F1 (C n =0).
</listItem>
<bodyText confidence="0.767221666666667">
2.2. DEFINITION. The class of terms (T) of L is recursively
defined as follows: each constant is a term; if f is a function
symbol and r is a term, then f r is a term.
</bodyText>
<subsectionHeader confidence="0.492884">
2.3. DEFINITION. The set of atomic formulas of L is
</subsectionHeader>
<bodyText confidence="0.955438">
fl T? ri,r2(7&amp;quot;) L1{1).
</bodyText>
<subsectionHeader confidence="0.90361">
2.4. DEFINITION. The formulas of L are the atomic formulas
</subsectionHeader>
<bodyText confidence="0.954287363636364">
and, whenever 0 and 0 are formulas, then so are 0) and
(0 D
2.5. DEFINITION. If a is a well-formed expression (term or
formula), then a[rar2] is used to designate an expression ob-
tained from a by replacing some (possibly all or none) occur-
rences of r1 in a by r2.
We assume that the connectives V (disjunction), Sz(conjunc-
Hon) and (equivalence) are introduced by their usual defi-
nitions, Furthermore, we write sometimes 71 r2 instead of
- rz and drop the parentheses according to, the usual
conventions.6
</bodyText>
<subsectionHeader confidence="0.881824">
212 Semantics
</subsectionHeader>
<bodyText confidence="0.913209666666667">
A model for L consists of a nonempty universe U and an inter-
preOlion function 9. Since not every term denotes an element
in U lithe function symbols are interpreted as unary partial
functions, we generalize the partiality of the denotation by as-
surpiag that 0 itself is a partial function. Thus in general not
$Cf. also (Statman 77).
</bodyText>
<subsectionHeader confidence="0.3220915">
6W5 drop the outermost brackets, ass ttttt e that the connectives
have the precedence ••••&gt; &amp; &gt; v &gt;D, and are left associative.
</subsectionHeader>
<bodyText confidence="0.999886428571429">
all of the constants and function symbols are interpreted by 9.
Redundancies which result from the fact that non-interpreted
function symbols and function symbols interpreted as empty
functions are then regarded as distinct are removed by requiring
these partial functions to be nonempty. Suppose [X 1,4, no
designates the set of all (partial) functions from X to y, then
a model is defined as follows:
</bodyText>
<listItem confidence="0.984781166666667">
2.6. DEFINITION. A model for L is a pair M = (U,9), con-
sisting of a nonempty set U and an interpretation function
9 = 9c U W„ such that
(i) e`ce[C 1-+ tip
(ii) 9,, CV&apos; 1—* 1—*
(iii) V f t Ti(f(Doin(a) --+ Nf) 0 0).
</listItem>
<bodyText confidence="0.974709454545455">
The (partial) denotation function for terms -§ (Uc[r 1-4 U]r)
induced by is defined as follows:7
{2.7. DEFINITION. For every ccC and frcT (f F1),
9(c) if ccDom(9)
undefined otherwise
{q(f )(N) if fc-Dom() A -6(r) definedA
U(r)cDom(9(f ))
undefined otherwise.
2.8. DEFINITION. The satisfaction relation between models
M and formulas 0 (1,1 0, read: M satisfies 0, M is a model
of 0, 0 is true in M) is defined recursively:
</bodyText>
<equation confidence="0.6341984">
&amp;/4
1=m r r&apos; 9(r), 9(r&apos;) defined A 9(r) = 9(r&apos;)
M&apos;&amp;quot; q —6 -41=/4 di)
D X
JMb4MX.
</equation>
<bodyText confidence="0.9960715">
A formula 0 is valid (1= 0), ill 0 is true in all models. A
formula 0 is satisfiable, iff it has at least one model. Given
a set of formulas 1, we say that M satisfies r (kr,, r), iff M
satisfies each formula 0 in r. r is satisfiable, ill there is a model
that satisfies each formula in I&apos;. 0 is logical consequence of r
(r if every model that satisfies r is a model of 0.
</bodyText>
<sectionHeader confidence="0.955305" genericHeader="method">
3 The System Hiqv
</sectionHeader>
<bodyText confidence="0.9997724">
In this section we describe an axiomatic or Hilbert type system
H,?sv for quantifier-free attribute-value languages L. We give a
decision procedure for the satisfiability of finite sets of formulas
and show the completeness and decid ability of .Iffly on the basis
of that procedure.
</bodyText>
<subsectionHeader confidence="0.999722">
3.1 Axioms and Inference Rules
</subsectionHeader>
<bodyText confidence="0.97240575">
If L is a fixed attribute-value language, then the system consists
of a traditional axiomatic propositional calculus for L and two
additional equality axioms. For any formulas 0, 0,r, terms
71n the text following the definition we drop the overline.
</bodyText>
<equation confidence="0.990087">
b.&amp;quot; (c) =
U(fr) =
- 205 -
</equation>
<bodyText confidence="0.99950475">
r, r&apos;, and every sequence of functors cr (acF;&apos;) of L the formulas
under Al - A4 are propositional axioms&amp;quot; and the formulas under
El and E2 are equality axioms.&apos; The Modus Ponens (MP) is
the only inference rule.10
</bodyText>
<equation confidence="0.988465285714286">
Al 1
A2 F D 46)
A3
A4 F (^&amp;quot;fr D~ D (V) D
El I- ar rs D r r
E2 F r (rkj /4r/r&apos;])
MP OpikArk1-0
</equation>
<bodyText confidence="0.915181125">
A formula is derivable from a set of formulas r (r iff
there is a finite sequence of formulas such that r/r„ =
and every 44 is an axiom, one of the formulas in r or follows by
MP from two previous formulas of the sequence. rk is a theorem
(4), if rk is derivable from the empty set. A is derivable from
F (r FA), if each formula of A is derivable from I&apos;. I&apos; and A
are deductively equivalent (I&apos; -II- A), if r FA and A F
The system is sound:&amp;quot;
</bodyText>
<subsubsectionHeader confidence="0.383507">
3.1. THEOREM. For every formula 0: If I- 0, then F--- (1).
</subsubsectionHeader>
<bodyText confidence="0.847658">
Beside this weak version also the strong soundness theorem is
provable for Inv:
</bodyText>
<listItem confidence="0.5351405">
3.2. THEOREM. For every set of formulas r and every for-
mula it,: If r F 0, then r 0.
</listItem>
<subsectionHeader confidence="0.9896">
3.2 Satisfiability
</subsectionHeader>
<bodyText confidence="0.994095">
We now prove
</bodyText>
<figureCaption confidence="0.4413685">
3.3. THEOREM. The satisfiability of a finite set of formulas
F is decidable.
</figureCaption>
<bodyText confidence="0.939054">
by providing a terminating procedure: First the conjunction of
all formulas in r (denoted by A r) is converted into disjunctive
normal form (DNF) using the well-known standard techniques.
Then A r is equivalent with a DNF
</bodyText>
<equation confidence="0.937507">
F A&amp;quot; E (4&apos;&amp;44&amp;...&amp;4&apos;,,) v (4&apos;7&amp;...&amp;4)
</equation>
<bodyText confidence="0.9975385">
where the conjuncts oi; = 1, ..,n; j = 1, .., ki) are either
atomic formulas or negations of atomic formulas, henceforth
called literals. By the definition of the satisfiability we get:
&apos;Cf. e.g. [Church 54
</bodyText>
<footnote confidence="0.663960333333333">
9Axiom El restricts the reflexivity of identity to denoting terms:
if a term denotes, then also its subterms do (cf. the definition of
Thus equality is not a reflexive, but only a subterm reflexive relation.
</footnote>
<page confidence="0.459292">
1011
</page>
<bodyText confidence="0.825669333333333">
constant-consistency and (ii.) constant/complex-
consistency are to be guaranteed for a set Of atomic values V (V C C),
for each a, kV (a 6) and fePI, axioms of the form (i.) F a and
(ii.) fa* fa have to be added (a finite set). If also acyclicity has
to be ensured, axioms of the form (iii.) 1 CT r, with oc.Fit ire?,
have to be added. Although this set is infinite, we only need a finite
subset for the satisfiability test and for dechlability (see below).
11 For the propositional calculus cf. the standard proofs. For ax-
loins El and E2 cf. [Johnson 88].
</bodyText>
<note confidence="0.558305">
3.4. LEMMA. Let A .51 v A s&apos; v v A S&amp;quot; be a DNF Of A r
consisting of conjunctions A Si of the literals in S&apos;, then A r
is satisfiable, iff at least one disjunct A si is satisfiable.
</note>
<bodyText confidence="0.999866">
We complete the proof of Theorem 3.3 by an algorithm that
converts a finite set of literals S&apos; into a deductively equivalent
set of literals in normal form S, which is satisfiable if it is not
equal to (I).
</bodyText>
<subsectionHeader confidence="0.927904">
3.2.1 A Normal Form for Sets of Literals
</subsectionHeader>
<bodyText confidence="0.99865125">
The normal form is constructed by closing S deductively by
those equations whose terms are subterms of the terms occur-
ring in S. For the construction we use the following derived
rules:
</bodyText>
<equation confidence="0.885266666666667">
RI ar r&apos; F r r Subterm Reflexivity
R2 r r&apos; A OF 4&apos;[r /r&apos;] Substitutivity
R3 r r&apos; F r Symmetry.
</equation>
<bodyText confidence="0.923758888888889">
We get RI and R2 from El and E2 by the deduction theorem.
113 is derivable from RI and R2, since we get from r r&apos; first
r r by RI and then r1 r by 112.
If Ts denotes the set of terms occurring in the formulas of S
(Ts . {r, r&apos; I (,..)r ricS)), and SUB(Ts) denotes the set of
all subterms of the terms in Ts&amp;quot;
SUB(Ts) = arers, with ercFni
then the normal form is constructed according to the following
inductive definition.
</bodyText>
<listItem confidence="0.911566166666666">
3.5. DEFINITION. For a given set of literals S we define a
sequence of sets Si (i &gt; 0) by induction:
With S = S U {r&apos; r I 7&apos; rscS},
(1) if IcS; otherwise
So
• U r I or Po ricSa
</listItem>
<equation confidence="0.907877">
((I) if 34(.94,-, rkcSi); otherwise
.5; U Ur, Pt: r2)(r/r11 ri. PJ r2, r ricSiA
SUB(Ts)
Since S, C S,+1, for SH.1 {1.), the construction terminates
</equation>
<bodyText confidence="0.897213076923077">
on the basis of the subterm condition either with a finite set of
literals or with DJ. If each term of the equations in Si+i is a
subterm of the terms in Ts, no term of the equations in S,4.2
can be longer than the longest term in Ts.
EXAMPLE 1. Assume that L consists of the constants a, b, c, e
and the function symbols f ,g, h, in, n,p. Then, for the set of
literals
S=
ga ha, a f f a, ng f f a e
the following sequence of sets is constructed. We represent
the equations of a set Si by the system of sets of equivalent
terms induced by Si. I.e.: If 0 is a set of terms under Si and
ge pmb, e me, mb ng f f c, c Per a,
</bodyText>
<equation confidence="0.961423333333333">
127-s C SUB(Ts) holds by definition.
S,+1 =
- 206 -
</equation>
<bodyText confidence="0.956897333333333">
ric0, then r z r&apos;eS,. Furthermore, we mark by an arrow
that a set under Si is also induced (without modifications) by
the equations in S.+1.
</bodyText>
<construct confidence="0.76944775">
SI S2 =
(c, a, f fa, f fc)
(mb, ng f f c,ng f fa)
(fc, fa)
{g f fc, g f fa) )
(go, ha, g f fa)
3.0. DEFINITION. Let S,, = Si; with I = min (i I =
3.7. LEMMA. For S,, holds: S S,,.
</construct>
<bodyText confidence="0.986232933333333">
PROOF. If S,, 0 (1), then S and S„ are deductively equiva-
lent, since S is a subset of Sy and S,, only contains formulas
derivable from S. For Si, = (1) the same holds for S„._1. Since
is inconsistent, S is deductively equivalent with (1). 0
Note that for each equation in Si (S, (1)) there is a proof
from S with the subterm property, as defined below. This fol-
lows from the subterm condition in the inductive construction.
3.8. DEFINITION. A proof of an equation from S has the
subterm property, if each term occurring in the equations of
that proof is a subterm of the terms in TS, i.e. an element of
SUB(Ts).
So, if S is not trivially inconsistent (.1. not in S), the con-
struction terminates with (1), since there exists a proof of an
equation from S with the subterm property, whose negation is
in S.
</bodyText>
<equation confidence="0.9206562">
EXAMPLE 2. For the inconsistent set
S&apos; = S U {gmme pnh f f a) the construction terminates after
4 steps (S.; = (I)), since there is a proof of gmme pnhf fa
from S&apos; with the subterm property of depth 3.
e 7.1 Me e Ps me mb ng f c ca ga ha affa
</equation>
<bodyText confidence="0.893927">
ge pmb e mme mb ngf fa gf fasts h/ Jo
gmme z pmb mb nhf fa
</bodyText>
<subsectionHeader confidence="0.536406">
gmme pnhf fa
</subsectionHeader>
<bodyText confidence="0.988547928571428">
The deductive closure construction restricted by the subterm
property is a proof-theoretic simulation of the congruence clo-
sure algorithm (cf. [Nelson/Oppen 80)13), if used for testing
satisfiability of finite sets of literals in inv. Strictly speaking,
if
i. the congruence closure algorithm is weakened for partial
functions,
S is not trivially inconsistent (1 not in S), and
iii. the failure in the induction step of 3.5. is overruled,
&apos;Cf. also [Gallier 81.
then r r&apos; is in Si, iff the nodes which represent the terms r
and r&apos; in the graph constructed for S are congruent.&amp;quot; More-
over, for unary partial functions the algorithm is simpler, since
the arity does not have to be controlled.
</bodyText>
<note confidence="0.7502805">
3.9. LEMMA. The set of all equations in S,, is closed under
subterm reflexivity, symmetry and transitivity.
</note>
<bodyText confidence="0.999466333333333">
PROOF. For Si, = (1) trivial. If S,, 0 (1), then Sy is
closed under subterm reflexivity and symmetry, since these
properties are inherited from So to its successor sets. S,, is
closed under transitivity, since we first get rscSUB(Ts) from
r2, r2 r3rS,, and then according to the construction also
^$ r2(r2/r3]cS,,+1 = Si., with r2[r2/7-3) = r3.
</bodyText>
<subsectionHeader confidence="0.994005">
3.2.2 Satisfiability of Sets of Literals
</subsectionHeader>
<bodyText confidence="0.991991588235294">
For the proof that the satisfiability of a finite set of literals is
decidable we first show that a set of literals in normal form is
satisfiable, if the set is not equal to (1). For Si. = {J..) we get
trivially:
3.10. LEMMA. S,, = (1) —■ --.11/(Ai Sy).
Otherwise we can show the satisfiability of Sy by the construc-
tion of a canonical model that satisfies S,,.
Let Ey be the set of all (nonnegated) equations in S,„ TE„ the
set of terms occurring in E,, and E, the relation induced by
E., on TE,, (((r, r&apos;) I r ricE„)). Then, we choose as the
universe of the canonical model M„ = (1.1„, am) the set of all
equivalence classes of E,, on TE„, if To,, 0 6. By Lemma 3.9
this set exists. If S,, contains no (unnegated) equation, we set
= (0), since the universe has to be nonempty.
3.11. DEFINITION. For a set of literals 5,, in normal form, the
canonical term model for S,, is given by the pair M,, =
consisting of the universe
</bodyText>
<figure confidence="0.692472">
{Mai Ps1 Em if TA. 0 0
111,
(0) otherwise
</figure>
<figureCaption confidence="0.436917">
and the interpretation function which is defined for erC,
</figureCaption>
<equation confidence="0.913284">
feFi and [r]t11,, by:&amp;quot;
(c) if ceTE.,
undefined otherwise
[1 r if ric(r) and fricTE„
Fl (f)([7]) und&apos;elfined otherwise.
</equation>
<bodyText confidence="0.999396333333333">
It follows from the definition that %, is a partial function. Sup-
pose further for F, (f) that [rd = (2-2) and that ap,(f)(Erd)
is defined. Then
</bodyText>
<subsectionHeader confidence="0.386868">
Wl(f)([7.11) =Wl(f)(Er2]).
</subsectionHeader>
<bodyText confidence="0.944438333333333">
For this, suppose 9F1(f)([ri]) = (fel, with r&apos;e[rd. Since
E. is an equivalence relation we get rie[r2] and thus
qPi .1)&amp;2D = Vet
</bodyText>
<footnote confidence="0.7943945">
&apos;4C1. [Wedekind 90].
15We drop the .E.,,-index of the equivalence classes.
</footnote>
<figure confidence="0.980772133333333">
So
ng f f a e
{e, me)
{b)
{c,a)
(a, Jo)
life)
(ge,pmb)
{mb, ng f fc}
(k) )(fa)
(g f f c)
(go, ha)
{g f fc, g f Jo, go, ha)
£c(c)
- 207 -
</figure>
<figureCaption confidence="0.562243">
EXAMPLE 3. The canonical model for S of Example
is constructed using S2 = S., is given by:
</figureCaption>
<equation confidence="0.978804416666667">
(emu!), (b), (c,a, I fa, f
= pmb), (mb,ng f f c,ng f f a),
{ f c, fa), (g f f c, g f f a, ga, ha)
qP(e) =[e]
9,(b) = [b]
n (rai,EI al),
qu(&amp;quot; t(Lf f al) J
, (([e], [ge]),1
= 1 ([a], [ga]) f
9,,(n) = ((Nab [ngf f c])}
For each term r in Ta., it follows from the definition of 9c and
9F2 : 9,,(r) = [r].
</equation>
<bodyText confidence="0.951323230769231">
By the following lemma we show in addition that the domain
of 9,, restricted to is,, is equal to TE,,.
3.12. LEMMA. For each term r in Ts„: If 9y is defined for
r, then 9„(r) = [r], with rcTE„.
PROOF. (By induction on the length of r.) Suppose first that
9,, is defined for r. For every constant c it follows from the
definition of 9c that 9c(c) = [c], with ccTE,,. Assume for f r by
inductive hypothesis 9,,(r) = [r], with r(Tp„, then it follows
from the definition of 9F, (1) that 9p, (f)([r]) = [f r&apos;], with
fecTE„ and r&apos;c[r]. Since r&apos; is a subterm of fr&apos;, we first get
ricTE, and by Lemma 3.9 Jr&apos; f r&apos;, • rtSu. Because of
frcSUB(Ts), then also Jr freSy. So, Jr must also be in
TE., and hence 9 p,(f)([r]) = [f r].
Next we show for the model M,,:
3.13. LEMMA. Sy 0 (1) --+km„ Sy.
PROOF. (We prove I=M,. 0, for every 0 in Sy by induction on
the structure of 0.)
1 is not element of S,,. If 1 were in S,,, we would get by the
definition of Su S., = {I} which contradicts our assumption.
For 0 .L, J.. holds trivially.
Suppose 0 = r r&apos;, then r, r&apos; are in TE„, 9,, is defined for
r and r&apos;, and 9„(r) = [r], 9„(e) = [e]. Because of r
r&apos;eS,,, it follows that [r] = [r&apos;]. So 9u(r) = 9,,(e) and hence
IM r T.
Assume that 0 is (r r&apos;). If r r&apos; were satisfied by M,,,
9u(r) would be equal to 9,,(r&apos;). By Lemma 3.12 we would
then get 9u(r) = [r] and 9,,(r&apos;) = [71, with r, ricTE„. Since
is an equivalence relation on TB&amp;quot; r ▪ ricS,, would follow
from [r] = [e], and, contradicting the assumption, we would
get Sy = (1) by the definition of Su.
It can be easily shown that lify is a unique (up to isomorphism)
minimal model for Su.&amp;quot; Strictly speaking, if M is a model for
mit can be verified very easily by using this fact that we need to
add to a set of literals S only a finite number of axioms to ensure the
acyclicity. All axioms of the form or ijd T (ac.F1+ ,reT), with lorl &lt;
ISUB(TE)i, are e.g. more than enough, since from a consistent but
cyclic set of literals S must follow an equation or P.: r (a tFif ,r(7),
with loll &lt; I/4,1, and 114,1 &lt; ISUBCTE)1 holds by the construction of
14.
</bodyText>
<note confidence="0.489061">
3.14. LEMMA. Sy 0 {I} &amp;quot; 111.(m
</note>
<bodyText confidence="0.565942142857143">
PROOF. (—•) If Su 0 (1), we know by Lemma 3.13 that My
is a model for S„. Then, by the soundness Sy F S ---• VM(Hu
S). Since S is derivable from Sy, it follows Haw S
and thus Su 0 {1} 3M(A.f S).
(4-) If Sy = (1), then for each model M [km S,,. From the
soundness we get S F Su -4 VM(kAf S SO. Since S,,
is derivable from S, it follows siM(14m Sy —461,4 S) and hence
</bodyText>
<sectionHeader confidence="0.557297" genericHeader="conclusions">
(1) VM(11,4 S).
</sectionHeader>
<subsectionHeader confidence="0.995947">
3.3 Completeness and Decidability
</subsectionHeader>
<bodyText confidence="0.728172695652174">
Using the procedure for deciding satisfiability we can easily
show the completeness and decidability of Inv.
3.15. THEOREM. For every finite set of formulas r, and/or
each formula 0: If r =0, then r
PROOF. By definition 0 is a logical consequence of r, if!
F U 0) is unsatisfiable. Using the equivalences of Theorem
3.3, we first get:
U {A{r u OD).
Suppose, that As&apos; v,.. v A sn is a DNF of A(rui— OD, then
r u {— 66) -IF (AS&apos; V ... v AS&amp;quot;)
and by the decision procedure
r u {i) A ... A ={.L).
If r u {— is unsatisfiable, it follows that r u 4)) -11^
(I) , since each Si is deductively equivalent with (1).
From r u {— 4)) k 1 it follows by the deduction theorem first
F D 1 and thus F .1 j 0. From I&apos; I-, 1 D # and
F 1 by MP then r F 0. 0
3.16. COROLLARY. For every finite set of formulas I&apos; and
each formula cb, r F 4&apos; is decidable.
PROOF. By the completeness and soundness we know F
r = 0. Since 0 is a logical consequence of r, if! F U 0),
we can decide I&apos; I- 0 by the procedure for deciding rut— 0.
0
</bodyText>
<sectionHeader confidence="0.997566" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9866185">
The author has been supported during the writing of the sub-
mated draft version of this paper by the EEC Esprit project
</bodyText>
<figure confidence="0.985689">
9„(c)
9,,(a) = [c]
£1v(m) fae],[ine]),1
([6],[mb]) f
• = {([a], [ha]))
• = {([mb],[pmb])) .
1 which S., homomorphic to M,„ then every minimal submodel of M
that satisfies S„ is &apos;isomorphic to Mu.
</figure>
<bodyText confidence="0.960251538461538">
From the two lemmata above it follows first that the satisfia-
bility of sets of formulas in normal form is decidable:
Sy 0 (1) 44 3M(A.,/ S,,).
Since Su and S are deductively equivalent, we can establish by
the ,following lemma that the satisfiability of arbitrary finite
sets of literals S is decidable.
- 208 -
DYANA at the Institut für maschinelle Sprachverarbeitung,
Universitat Stuttgart. The author would like to thank Jochen
Dorm, Mark Johnson, Bans Kamp, Iton Kaplan, Paul King,
John Maxwell and Stefan Momma as well as an anonymous
reviewer for their comments on earlier versions of this paper.
All remaining errors are of course my own.
</bodyText>
<sectionHeader confidence="0.998377" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.991971380952381">
[Beierle/Pletat 88] Beierle, C., U. Pletat: Feature Graphs and
Abstract Data Types: A Unifying Approach. Proceedings
of COLING 88, Budapest 1988
[Church 56] Church, A.: Introduction to Mathematical Logic,
Princeton 1956
[Dawar/Vijay-Shanker 90] Dawar, A., K. Vijay-Shanker: An
Interpretation of Negation in Feature Structure Descrip-
tions. Computational Linguistics, 16, 11-21
[Gamer 87) Gather, J.: Logic for Computer Science: Founda-
tions of Automatic Theorem Proving, New York 1987
[Johnson 88] Johnson, M.: Attribute-Value Logic and the The-
ory of Grammar. PhD thesis, Stanford University, Stan-
ford 1988
[Kasper/Rounds 86] Kasper, It., W. Rounds: A Logical Se-
mantics for Feature Structures. Proceedings of the 24th
Annual Meeting of the ACL, New York 1986
[Kasper/Rounds 90] Kasper, R., W. Rounds: The Logic of
Unification in Grammar. Linguistics and Philosophy, 13,
35-58
[Knuth/Bendix 70] Knuth, D., P. Bendix: Simple Word Prob-
lems in Universal Algebra. In: J. Leech (ed.): Compu-
tational Problems in Universal Algebra, Elmsford, N.Y.,
1970
[Kreisel/Tait 61] Kreisel, G., W. Tait: Finite Definability of
Number-theoretic Functions and Parametric Complete-
ness of Equational Calculi. Z. Math. Logik Grundlagen
Math., 7, 28-38.
[Langholm 89] Langholm, T.: How to Say No with Feature
Structures. COSMOS-Report No. 13, Oslo 1989
[Nelson/Oppen 801 Nelson, G., D. Oppen: Fast Decision Pro-
cedures Based on Congruence Closure. ACM, 27, 356-364
[Smolka 89] Smolka, G.: Feature Constraint Logics for Unifi-
cation Grammars. IWBS Report 93, Stuttgart 1989
[Statman 741 Statman, R.: Structural Complexity of Proofs.
PhD thesis, Stanford University, Stanford 1974
[Statman 77] Statman, It.: Ilerbrand&apos;s Theorem
and Gentzen&apos;s Notion of a Direct Proof. In: J. Barwise
(ed.): Handbook of Mathematical Logic, Amsterdam 1977
[Wedekind 90] Wedekind, J.: Unifikationsgrammatiken und
ihre Logik. PhD thesis, Universitat Stuttgart, Stuttgart
1990
- 209 -
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.872166">
<title confidence="0.995903">CLASSICAL LOGICS FOR ATTRIBUTE-VALUE LANGUAGES</title>
<author confidence="0.994318">Jürgen Wedekind</author>
<affiliation confidence="0.98529">Xerox Palo Alto Research Center and C.S.L.I. - Stanford University</affiliation>
<address confidence="0.999468">USA</address>
<abstract confidence="0.999744">This paper describes a classical logic for attribute-value (or feature description) languages which are used in unification grammar to describe a certain kind of linguistic object commonly called attribute-value structure (or feature structure). The algorithm which is used for deciding satisfiability of a feature description is based on a restricted deductive closure construction for sets of literals (atomic formulas and negated atomic formulas). In contrast to the Kasper/Rounds approach (cf.</abstract>
<intro confidence="0.915724">[Kasper/Rounds 90]), we can handle cyclicity, without the need</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>C Beierle</author>
<author>U Pletat</author>
</authors>
<title>Feature Graphs and Abstract Data Types: A Unifying Approach.</title>
<date>1988</date>
<booktitle>Proceedings of COLING 88,</booktitle>
<location>Budapest</location>
<marker>[Beierle/Pletat 88]</marker>
<rawString>Beierle, C., U. Pletat: Feature Graphs and Abstract Data Types: A Unifying Approach. Proceedings of COLING 88, Budapest 1988</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Church</author>
</authors>
<title>Introduction to Mathematical Logic,</title>
<date>1956</date>
<location>Princeton</location>
<marker>[Church 56]</marker>
<rawString>Church, A.: Introduction to Mathematical Logic, Princeton 1956</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Dawar</author>
<author>K</author>
</authors>
<title>Vijay-Shanker: An Interpretation of Negation in Feature Structure Descriptions.</title>
<date>1987</date>
<journal>Computational Linguistics,</journal>
<volume>16</volume>
<pages>11--21</pages>
<location>New York</location>
<marker>[Dawar/Vijay-Shanker 90]</marker>
<rawString>Dawar, A., K. Vijay-Shanker: An Interpretation of Negation in Feature Structure Descriptions. Computational Linguistics, 16, 11-21 [Gamer 87) Gather, J.: Logic for Computer Science: Foundations of Automatic Theorem Proving, New York 1987</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Johnson</author>
</authors>
<title>Attribute-Value Logic and the Theory of Grammar.</title>
<date>1988</date>
<tech>PhD thesis,</tech>
<institution>Stanford University,</institution>
<location>Stanford</location>
<marker>[Johnson 88]</marker>
<rawString>Johnson, M.: Attribute-Value Logic and the Theory of Grammar. PhD thesis, Stanford University, Stanford 1988</rawString>
</citation>
<citation valid="true">
<authors>
<author>It Kasper</author>
<author>W Rounds</author>
</authors>
<title>A Logical Semantics for Feature Structures.</title>
<date>1986</date>
<booktitle>Proceedings of the 24th Annual Meeting of the ACL,</booktitle>
<location>New York</location>
<marker>[Kasper/Rounds 86]</marker>
<rawString>Kasper, It., W. Rounds: A Logical Semantics for Feature Structures. Proceedings of the 24th Annual Meeting of the ACL, New York 1986</rawString>
</citation>
<citation valid="false">
<authors>
<author>R Kasper</author>
<author>W</author>
</authors>
<title>Rounds: The Logic of Unification in Grammar.</title>
<journal>Linguistics and Philosophy,</journal>
<volume>13</volume>
<pages>35--58</pages>
<marker>[Kasper/Rounds 90]</marker>
<rawString>Kasper, R., W. Rounds: The Logic of Unification in Grammar. Linguistics and Philosophy, 13, 35-58</rawString>
</citation>
<citation valid="false">
<authors>
<author>D Knuth</author>
<author>P Bendix</author>
</authors>
<title>Simple Word Problems in Universal Algebra. In:</title>
<booktitle>Computational Problems in Universal Algebra,</booktitle>
<editor>J. Leech (ed.):</editor>
<location>Elmsford, N.Y.,</location>
<marker>[Knuth/Bendix 70]</marker>
<rawString>Knuth, D., P. Bendix: Simple Word Problems in Universal Algebra. In: J. Leech (ed.): Computational Problems in Universal Algebra, Elmsford, N.Y.,</rawString>
</citation>
<citation valid="false">
<authors>
<author>G Kreisel</author>
<author>W Tait</author>
</authors>
<title>Finite Definability of Number-theoretic Functions and Parametric Completeness of Equational Calculi.</title>
<journal>Z. Math. Logik Grundlagen Math.,</journal>
<volume>7</volume>
<pages>28--38</pages>
<marker>[Kreisel/Tait 61]</marker>
<rawString>Kreisel, G., W. Tait: Finite Definability of Number-theoretic Functions and Parametric Completeness of Equational Calculi. Z. Math. Logik Grundlagen Math., 7, 28-38.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Langholm</author>
</authors>
<title>How to Say No with Feature Structures.</title>
<date>1989</date>
<journal>Nelson/Oppen</journal>
<tech>COSMOS-Report No. 13,</tech>
<volume>801</volume>
<pages>356--364</pages>
<location>Oslo</location>
<marker>[Langholm 89]</marker>
<rawString>Langholm, T.: How to Say No with Feature Structures. COSMOS-Report No. 13, Oslo 1989 [Nelson/Oppen 801 Nelson, G., D. Oppen: Fast Decision Procedures Based on Congruence Closure. ACM, 27, 356-364</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Smolka</author>
</authors>
<title>Feature Constraint Logics for Unification Grammars.</title>
<date>1989</date>
<booktitle>Statman 741 Statman, R.: Structural Complexity of Proofs. PhD thesis,</booktitle>
<tech>IWBS Report 93,</tech>
<institution>Stanford University,</institution>
<location>Stuttgart</location>
<marker>[Smolka 89]</marker>
<rawString>Smolka, G.: Feature Constraint Logics for Unification Grammars. IWBS Report 93, Stuttgart 1989 [Statman 741 Statman, R.: Structural Complexity of Proofs. PhD thesis, Stanford University, Stanford 1974</rawString>
</citation>
<citation valid="true">
<authors>
<author>It Statman</author>
</authors>
<title>Ilerbrand&apos;s Theorem and Gentzen&apos;s Notion of a Direct Proof. In:</title>
<date>1977</date>
<booktitle>Handbook of Mathematical Logic,</booktitle>
<editor>J. Barwise (ed.):</editor>
<location>Amsterdam</location>
<marker>[Statman 77]</marker>
<rawString>Statman, It.: Ilerbrand&apos;s Theorem and Gentzen&apos;s Notion of a Direct Proof. In: J. Barwise (ed.): Handbook of Mathematical Logic, Amsterdam 1977</rawString>
</citation>
<citation valid="false">
<authors>
<author>J Wedekind</author>
</authors>
<title>Unifikationsgrammatiken und ihre Logik.</title>
<tech>PhD thesis,</tech>
<pages>209</pages>
<institution>Universitat Stuttgart,</institution>
<location>Stuttgart -</location>
<marker>[Wedekind 90]</marker>
<rawString>Wedekind, J.: Unifikationsgrammatiken und ihre Logik. PhD thesis, Universitat Stuttgart, Stuttgart - 209 -</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>