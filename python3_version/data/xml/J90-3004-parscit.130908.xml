<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000260">
<sectionHeader confidence="0.855499" genericHeader="abstract">
DISJUNCTION WITHOUT TEARS
</sectionHeader>
<author confidence="0.458015">
Allan Ramsay
</author>
<affiliation confidence="0.739035">
Department of Computer Science
University College Dublin
</affiliation>
<sectionHeader confidence="0.7247085" genericHeader="keywords">
Belfield, DUBLIN 4,
Ireland
</sectionHeader>
<bodyText confidence="0.999882571428571">
It is now common practice to use structured sets of features to describe syntactic structures, and to compare
such structured sets by some form of unification. It is extremely tempting to try to encode disjunctive
information within this framework; unfortunately, general unification of disjunctive structures is NP-
complete, which is not a desirable property for the basic operation involved in comparing descriptions. We
note that certain kinds of disjunctive specifications can be converted to conjunctive ones. This enables us to
describe a restricted set of disjunctive phenomena without incurring the costs associated with general
disjunctive unification.
</bodyText>
<sectionHeader confidence="0.9965815" genericHeader="method">
1 UNIFICATION AND SYNTACTIC
DESCRIPTION
</sectionHeader>
<bodyText confidence="0.999990617647058">
We assume that the use of lattices and directed acyclic
graphs (DAGs) for describing properties of syntactic struc-
tures, and of unification for combining such descriptions, is
too well known to require justification at this point. A wide
variety of notations have been used in this context—
PROLOG terms, PATR-II specifications, FUG functional
descriptors, GPSG category specifications, and so on
(Pereira and Warren 1980; Shieber 1986; Kay 1985; Gaz-
dar et al. 1985). The discussion below is couched in a
FUG-like notation for concreteness, but the argument is
equally applicable to any of the other standard formalisms
(except perhaps GPSG).
We can use our notation for characterizing objects in
terms of their properties. We will generally be talking
about linguistic objects such as words or phrases, though
there is nothing that restricts this kind of description to
such objects. We start by considering the word providing.
We know various things about this word, including the fact
that it is a present participle. We can represent this specific
piece of information with the descriptor shown in Figure 1.
We have included some negative information in this descrip-
tion, namely the fact the word in question is not tensed, is
not an infinitive, and is not a past participle or a passive one.
This information is generally omitted from FUG specifica-
tions, since it seems to be redundant. In fact it is not
redundant unless we have specified elsewhere that being a
participle, being tensed, and being an infinitive are mutu-
ally exclusive, and similarly for present, past, and passive
participles. We will continue to include this kind of informa-
tion locally within specifications, rather than appealing to
some externally specified set of constraints. In subsequent
descriptors we will generally write --TENSED for
TENSED = 1, though we will continue to spell out
positive specifications such as PRESENT = Tin full.
</bodyText>
<sectionHeader confidence="0.983169" genericHeader="method">
2 Two USES OF DISJUNCTION
</sectionHeader>
<bodyText confidence="0.998485416666667">
The kind of representation in Figure 1 is appropriate when
some specific piece of information about some item is
known—in Figure 1, for instance, the fact that the word in
question is a present participle. It often happens, however,
that we know that some item can be described in several
ways, but that we are not sure which is correct in the
present circumstances. Consider for instance the word
provided. This might be a past tense form, or a past
participle, or a passive participle. There is nothing about
the word itself that can help us decide which it is, though in
any actual context only one of these descriptions will be
appropriate.
</bodyText>
<listItem confidence="0.999561">
(1) He provided us with everything we needed.
(2) He has provided us with everything we needed.
(3) Everything we needed has been provided.
</listItem>
<bodyText confidence="0.827807615384616">
We could produce three descriptions of the kind in Figure
1, one for each case. If we did this, however, we would find
ourselves repeating all sorts of information—the fact that
it&apos;s a verb, for instance, plus whatever we know about its
subcategorization frame, and so on. It is therefore tempting
to try to adapt our notation so that it allows disjunctive
specifications for feature values, as shown in Figure 2.
Figure 2 represents a description of an item that is either a
past tense verb or a past or passive participle, with the curly
bracket {used to indicate a range of options. This kind of
Computational Linguistics Volume 16, Number 3, September 1990 171
Allan Ramsay Disjunction without Tears
SYNTAX.&apos;
</bodyText>
<equation confidence="0.966858142857143">
SYNTAX =
FORM =
MINOR= HEAD=
TENSED = _L
[PRESENT = T
PARTICIPLE = PAST = _L
PASSIVE = 1
INFINITIVE = 1
SYNTAX..
Figure 1 Present Participle, e.g. providing.
[CAT =VERB
[MAJOR=
BAR = 2
MINOR = [HEAD = ?H
[CAT =VERB
[MAJOR =
BAR =0
MINOR = [HEAD -= 7H
[CAT = VERB
MAJOR =
BAR = 0
</equation>
<bodyText confidence="0.999929806451613">
disjunctive specification is widespread in unification gram-
mer—the curly bracket, for instance, is standard notation
in FUG, and most other notations provide some way of
talking about disjunction. Kasper and Rounds (1986),
among others, have taken up the question of exactly what
such notations mean. We are more interested here in
investigating the circumstances under which they are really
necessary, and in trying to remove them wherever we can.
Much the same sort of issue arises when we consider
syntactic rules, particularly when we consider rules repre-
senting information about subcategorization frames. Con-
sider, for instance, the interpretation of the verb be as an
auxiliary. Be, as an auxiliary, can be combined with either
a VP whose main verb is a present participle or one whose
main verb is a passive participle. We might try to represent
this information with the rule shown in Figure 3. Figures 2
and 3 are very perspicuous. Figure 2 describes a word that
is a past tense verb, a past participle, or a passive participle.
Figure 3 describes a grammatical constraint, namely that
be may be followed by a VP whose main verb is either a
present participle or a passive one. The placeholder ?H is
used to indicate that the form of the VP that results from
combining an instance of be with a suitable complement
has the same HEAD features as the instance of be. Unfor-
tunately, the introduction of disjunctions into our descrip-
tions has drastic effects on the computational properties of
unification, particularly when it is combined with the use of
placeholders or other ways of specifying reentrance. To see
this, suppose we want to see whether some VP whose main
verb has the properties ascribed to provided fits the con-
straints imposed by be (in other words, we are trying to
</bodyText>
<table confidence="0.846331411764706">
MAJOR= [CAT =VERB -&apos;PRESENT
BAR = 0 (TENSED =
PAST = T
-.PARTICIPLE
-&apos;INFINITIVE
-&amp;quot;TENSED
-&apos;PRESENT
SYNTAX =
PARTICIPLE = PAST =T
MINOR = HEAD -= FORM =
-&apos;PASSIVE
-&apos;INFINITIVE
-&apos;TENSED
-.PRESENT
PARTICIPLE = -.PAST
PASSIVE = T
-INFINITIVE
</table>
<figureCaption confidence="0.998973">
Figure 2 Underdetermined Verb
Form, e.g. provided.
</figureCaption>
<figure confidence="0.6827605">
CAT =VERB
•
MAJOR=
BAR = 2
-,TENSED
[PRESENT =T
PARTICIPLE =-- -&amp;quot;PAST
-&apos;PASSIVE
-&apos;INFINITIVE
-&amp;quot;TENSED
[-.PRESENT
PARTICIPLE = -.PAST
. PASS IV E =T
-&apos;INFINITIVE
Figure 3 Underdetermined
Rule—Subcategorization Frame for be.
parse (3)). At some point we will have to compare
[—PRESENT
TENSED =
PAST = T
—PARTICIPLE
---,TENSED
[—PRESENT
PARTICIPLE = PAST = T
—PASSIVE
--TENSED
[—PRESENT
PARTICIPLE = —PAST
PASSIVE ----- T
with
--1TENSED
[PRESENT — T
PARTICIPLE = —PAST
—PASSIVE
---,TENSED
[—PRESENT
PARTICIPLE = --PAST
PASSIVE--- T
—INFINITIVE
We will have to try various possibilities—is
[—PRESENT
TENSED
PAST = T
—PARTICIPLE
SYNTAX&amp;quot;
MINOR= HEAD = FORM =
172 Computational Linguistics Volume 16, Number 3, September 1990
Allan Ramsay Disjunction without Tears
</figure>
<bodyText confidence="0.999836567567568">
If we know what values it doesn&apos;t have, we can infer the
range that the value it does have must be drawn from.
When we attempt to unify these two specifications, we find
that they lead to the following more precise description:
The only way for this to be compatible with the general
constraint that the value of FORM must be drawn from the
values in Figure 4 is if it is in fact a passive participle. We
have obtained the required effect without complicating our
unification algorithm, simply by making use of the extra
information that the value in question must be drawn from
a known finite range. Note that we do not need to refer
explicitly to the information in Figure 4 when we want to
know whether two specifications for FORM are compati-
ble. Rather we have used this information to construct our
specifications, which can be compared directly using ordi-
nary unification.
Many of the situations that seem to call for disjunctive
descriptions can be dealt with this way. The NP the sheep
could be either third person singular or third person plural?
Then describe it as not first person singular or first person
plural or second person singular or second person plural.
The pronoun he is nominative, whereas it may be either
nominative or accusative? Then describe he as not accusa-
tive, and say nothing about it. When we can replace
disjunctive descriptions by ones that embody a conjunction
of negations, we can save a considerable amount of work,
since our unification algorithm no longer needs to plod
through a series of possible analyses, keeping track of the
options that have been tried and possibly backtracking
when some analysis that looked plausible leads to a dead
end. We cannot hope to eliminate disjunction from our
grammar entirely, since if we could then parsing would
become a trivial deterministic task, which it does not look
like becoming. We can, however, eliminate it in a lot of
places where it looks as though it would be useful; which
doesn&apos;t make parsing a trivial task, but it does mean that
we can avoid doing more work than we really need.
</bodyText>
<sectionHeader confidence="0.999884" genericHeader="method">
4 LIMITATIONS
</sectionHeader>
<bodyText confidence="0.99983925">
The example discussed above shows how we can replace
disjunctive descriptions by conjunctive ones in two specific
cases, namely in the description of the FORMs of lexical
items and VP complements. We further suggested that this
technique might be extendable to other uses of disjunctive
specifications, such as the agreement properties of the NP
the sheep or the case marking of the pronoun it. We have
not, however, banished disjunction from the grammar of
</bodyText>
<figure confidence="0.665343571428571">
the same as
—1TENSED
[PRESENT = T
PARTICIPLE = —PAST
—PASSIVE
--INFINITIVE
-
</figure>
<bodyText confidence="0.877796230769231">
and so on. Eventually we will compare the part of the
description of solved that says it might be a passive partici-
ple with the part of the rule that says that a VP whose main
verb is a passive participle is acceptable here. At this point
we will realize that the given text fits the rule, but only after
trying out numerous options that led nowhere.
Worse than this, there may be several locally compatible
sets of options, only one of which may lead to a globally
coherent description of the complete text being examined.
If this is a possibility then the process of unifying two
structures turns out to be NP-complete, a most undesirable
consequence of our decision to allow disjunctive feature
descriptions.
</bodyText>
<sectionHeader confidence="0.98448" genericHeader="method">
3 EXTRA CONSTRAINTS
</sectionHeader>
<bodyText confidence="0.999980727272727">
If we look again at the descriptions in Figures 2 and 3 we
see that we know rather more about the FORM part of
these descriptions than is explicitly stated. In particular, we
know that the FORM of any verb whatsoever is drawn from
the range of options shown in Figure 4. Given this extra
information, we see that a disjunctive description such as
the one we have been using for provided can be replaced by
a conjunctive one containing nothing but negative informa-
tion. The descriptions of the FORM of the lexical item
provided and the complement of be, for instance, can be
replaced by the following purely conjunctive descriptions:
</bodyText>
<equation confidence="0.9729474">
TENSED = [—PRESENT
PARTICIPLE = [—IPRESENT
and
TENSED {---1PRESENT
PARTICIPLE = --PAST
</equation>
<bodyText confidence="0.993161">
The equivalence depends on the fact that in any specific
case FORM has exactly one of the values given in Figure 4.
</bodyText>
<equation confidence="0.985745333333333">
TENSED = [PRESENT =T PARTICIPLE = [PRESENT =T
TENSED = [PAST =T PARTICIPLE = [PAST = T
INFINITIVE =T PARTICIPLE = [PASSIVE =T
</equation>
<figureCaption confidence="0.992204">
Figure 4 Possible Values for FORM for Verbs.
</figureCaption>
<figure confidence="0.9887395">
T .= [—PRESENT
TENSED
—PAST
[—PRESENT
PARTICIPLE =
—PAST
Computational Linguistics Volume 16, Number 3, September 1990 173
Allan Ramsay Disjunction without Tears
</figure>
<bodyText confidence="0.997770866666667">
English. We could hardly expect to, given that in some
versions of unification grammar, e.g. FUG, the entire
grammar is specified by a single disjunctive descriptor,
which is required to unify with the description of any legal
sentence. Just what are the limits of our technique?
The following two restrictions seem crucial. (i) The
elements of the disjunction must pick out points in some
finite partition of the space of possibilities, preferably a
small finite partition. (ii) The disjunction must not contain
any placeholders (reentrance conditions). Consider for in-
stance the word changes. For the sake of argument we will
assume that this item has exactly two interpretations, as a
plural noun and as a third person singular verb. We could
represent the fact that it can be seen either as a noun or as a
verb as follows:
</bodyText>
<sectionHeader confidence="0.64253" genericHeader="method">
SYNTAX = MAJOR= CAT= -,ADJECTIVE
MINOR BAR =0 ---,ADVERB
{ --,PREPOSITION
</sectionHeader>
<bodyText confidence="0.99985623255814">
This indicates that we can specify the major category of
changes in terms of what it is not, though it does seem that
this may be too cumbersome to be worthwhile. The real
problem, however, is that the MINOR features will be
expected to specify some value for AGR; but the value of
AGR for this word depends on whether it is in fact a noun
or a verb—it is plural as a noun, but singular as a verb. We
simply cannot deal with this within our framework, and if
we try to adapt the framework to accommodate it, then all
the computational complexity will return.
This is particularly significant when we consider informa-
tion about subcategorization. It is widely, and very sensi-
bly, argued that as much information as possible about
constituent structure should be associated directly with
lexical items. FUG, for instance, permits the description of
a lexical item to contain a pattern that describes its comple-
ments, and UCG (Calder 1988) even goes so far as to
specify that for many lexical items the major category is
the subcategorization frame. It is clear that the range of
possible subcategorization frames cannot effectively be
expressed in terms of a small finite set; and even if it could,
our technique would be inapplicable because of the com-
plex dependencies between the choice of subcategorization
frame and the values of other features. This is the critical
restriction on our technique—that it cannot be used to
eliminate the disjunctions that arise from different subcate-
gorization frames and different phrase structure rules. Our
aim is to replace unnecessary disjunctions, not to eliminate
them from syntactic description entirely.
We end by returning to our earlier remark that &amp;quot;the
argument is equally applicable to any of the other standard
formalisms (except perhaps GPSG).&amp;quot; Our analysis of our
main example depended on the fact that we have general
knowledge about the range of possible values for the fea-
ture FORM, which we used to modify local descriptions of
this feature. In GPSG, however, local information about
feature structures is not complete, since there is a full
default logic specifying possible restrictions on what values
are possible or mandatory in various circumstances. It
seems likely that the interactions between this logic and our
use of general knowledge about features will interact in
ways that are at best hard to predict, and may even make
our approach completely infeasible.
</bodyText>
<sectionHeader confidence="0.998824" genericHeader="references">
REFERENCES
</sectionHeader>
<reference confidence="0.997401117647059">
Calder J., Klein, E., and Zeevat, H. 1988 Unification Categorial Gram-
mar: A Concise, Extendable Grammar for Natural Language Process-
ing. Proceedings of the 12th International Conference on Computa-
tional Linguistics, 83-86.
Gazdar, G., Klein, E., Pullum, G., and Sag, I. 1985 Generalised Phrase
Structure Grammar. Basil Blackwell, Oxford, U.K.
Kasper, R. and Rounds, W. 1986 A Logical Semantics for Feature
Structures. Proceedings of the 24th Annual Meeting of the Association
for Computational Linguistics 24,257-266.
Kay, M. 1985 Parsing in Functional Unification Grammar. In: Dowty,
DR., Karttunen, L., and Zwicky, AIM. (eds.) Natural Language
Parsing. Cambridge University Press, Cambridge.
Pereira, F.C.N. and Warren, D.H.D. 1980 Definite Clause Grammars for
Language Analysis—A Survey of the Formalism and a Comparison
with ATNs. Artificial Intelligence 13(3): 231-278.
Shieber, S. M. 1986 An Introduction to Unification-Based Approaches to
Grammar. University of Chicago Press, Chicago.
</reference>
<page confidence="0.919383">
174 Computational Linguistics Volume 16, Number 3, September 1990
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000605">
<title confidence="0.999704">DISJUNCTION WITHOUT TEARS</title>
<author confidence="0.999994">Allan Ramsay</author>
<affiliation confidence="0.9999805">Department of Computer University College</affiliation>
<address confidence="0.6395435">Belfield, DUBLIN Ireland</address>
<abstract confidence="0.997433086956522">It is now common practice to use structured sets of features to describe syntactic structures, and to compare such structured sets by some form of unification. It is extremely tempting to try to encode disjunctive information within this framework; unfortunately, general unification of disjunctive structures is NPcomplete, which is not a desirable property for the basic operation involved in comparing descriptions. We note that certain kinds of disjunctive specifications can be converted to conjunctive ones. This enables us to describe a restricted set of disjunctive phenomena without incurring the costs associated with general disjunctive unification. 1 UNIFICATION AND DESCRIPTION We assume that the use of lattices and directed acyclic graphs (DAGs) for describing properties of syntactic structures, and of unification for combining such descriptions, is too well known to require justification at this point. A wide variety of notations have been used in this context— PROLOG terms, PATR-II specifications, FUG functional descriptors, GPSG category specifications, and so on (Pereira and Warren 1980; Shieber 1986; Kay 1985; Gazdar et al. 1985). The discussion below is couched in a FUG-like notation for concreteness, but the argument is equally applicable to any of the other standard formalisms (except perhaps GPSG). We can use our notation for characterizing objects in terms of their properties. We will generally be talking about linguistic objects such as words or phrases, though there is nothing that restricts this kind of description to objects. We start by considering the word We know various things about this word, including the fact that it is a present participle. We can represent this specific piece of information with the descriptor shown in Figure 1. have included some in this description, namely the fact the word in question is not tensed, is not an infinitive, and is not a past participle or a passive one. This information is generally omitted from FUG specifications, since it seems to be redundant. In fact it is not redundant unless we have specified elsewhere that being a participle, being tensed, and being an infinitive are mutually exclusive, and similarly for present, past, and passive participles. We will continue to include this kind of information locally within specifications, rather than appealing to some externally specified set of constraints. In subsequent we will generally write = 1, we will continue to spell out specifications such as = full. 2 Two USES OF DISJUNCTION The kind of representation in Figure 1 is appropriate when some specific piece of information about some item is known—in Figure 1, for instance, the fact that the word in question is a present participle. It often happens, however, that we know that some item can be described in several ways, but that we are not sure which is correct in the present circumstances. Consider for instance the word might be a past tense form, or a past participle, or a passive participle. There is nothing about the word itself that can help us decide which it is, though in any actual context only one of these descriptions will be appropriate. (1) He provided us with everything we needed. (2) He has provided us with everything we needed. (3) Everything we needed has been provided. We could produce three descriptions of the kind in Figure 1, one for each case. If we did this, however, we would find ourselves repeating all sorts of information—the fact that it&apos;s a verb, for instance, plus whatever we know about its subcategorization frame, and so on. It is therefore tempting to try to adapt our notation so that it allows disjunctive specifications for feature values, as shown in Figure 2. Figure 2 represents a description of an item that is either a past tense verb or a past or passive participle, with the curly bracket {used to indicate a range of options. This kind of</abstract>
<note confidence="0.447715">Computational Linguistics Volume 16, Number 3, September 1990 171</note>
<title confidence="0.9002385">Allan Ramsay Disjunction without Tears SYNTAX.&apos; SYNTAX = FORM =</title>
<author confidence="0.98194">MINOR HEAD</author>
<abstract confidence="0.617337857142857">TENSED = _L [PRESENT = T PARTICIPLE = PAST = _L PASSIVE = 1 INFINITIVE = 1 SYNTAX.. 1 e.g.</abstract>
<title confidence="0.5530656">CAT =VERB [MAJOR= = MINOR = [HEAD = ?H [CAT =VERB</title>
<title confidence="0.559763">CAT = VERB</title>
<author confidence="0.936187">MAJOR</author>
<abstract confidence="0.98028516">is widespread in unification grammer—the curly bracket, for instance, is standard notation in FUG, and most other notations provide some way of talking about disjunction. Kasper and Rounds (1986), among others, have taken up the question of exactly what such notations mean. We are more interested here in investigating the circumstances under which they are really necessary, and in trying to remove them wherever we can. Much the same sort of issue arises when we consider syntactic rules, particularly when we consider rules representing information about subcategorization frames. Confor instance, the interpretation of the verb an an auxiliary, can be combined with either a VP whose main verb is a present participle or one whose main verb is a passive participle. We might try to represent this information with the rule shown in Figure 3. Figures 2 and 3 are very perspicuous. Figure 2 describes a word that is a past tense verb, a past participle, or a passive participle. Figure 3 describes a grammatical constraint, namely that be followed by a VP whose main verb is either a participle or a passive one. The placeholder used to indicate that the form of the VP that results from an instance of a suitable complement the same as the instance of Unfor-</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Calder</author>
<author>E Klein</author>
<author>H Zeevat</author>
</authors>
<title>Unification Categorial Grammar: A Concise, Extendable Grammar for Natural Language Processing.</title>
<date>1988</date>
<booktitle>Proceedings of the 12th International Conference on Computational Linguistics,</booktitle>
<pages>83--86</pages>
<marker>Calder, Klein, Zeevat, 1988</marker>
<rawString>Calder J., Klein, E., and Zeevat, H. 1988 Unification Categorial Grammar: A Concise, Extendable Grammar for Natural Language Processing. Proceedings of the 12th International Conference on Computational Linguistics, 83-86.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gazdar</author>
<author>E Klein</author>
<author>G Pullum</author>
<author>I Sag</author>
</authors>
<title>Generalised Phrase Structure Grammar. Basil Blackwell,</title>
<date>1985</date>
<location>Oxford, U.K.</location>
<contexts>
<context position="1291" citStr="Gazdar et al. 1985" startWordPosition="185" endWordPosition="189">ricted set of disjunctive phenomena without incurring the costs associated with general disjunctive unification. 1 UNIFICATION AND SYNTACTIC DESCRIPTION We assume that the use of lattices and directed acyclic graphs (DAGs) for describing properties of syntactic structures, and of unification for combining such descriptions, is too well known to require justification at this point. A wide variety of notations have been used in this context— PROLOG terms, PATR-II specifications, FUG functional descriptors, GPSG category specifications, and so on (Pereira and Warren 1980; Shieber 1986; Kay 1985; Gazdar et al. 1985). The discussion below is couched in a FUG-like notation for concreteness, but the argument is equally applicable to any of the other standard formalisms (except perhaps GPSG). We can use our notation for characterizing objects in terms of their properties. We will generally be talking about linguistic objects such as words or phrases, though there is nothing that restricts this kind of description to such objects. We start by considering the word providing. We know various things about this word, including the fact that it is a present participle. We can represent this specific piece of infor</context>
</contexts>
<marker>Gazdar, Klein, Pullum, Sag, 1985</marker>
<rawString>Gazdar, G., Klein, E., Pullum, G., and Sag, I. 1985 Generalised Phrase Structure Grammar. Basil Blackwell, Oxford, U.K.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kasper</author>
<author>W Rounds</author>
</authors>
<title>A Logical Semantics for Feature Structures.</title>
<date>1986</date>
<booktitle>Proceedings of the 24th Annual Meeting of the Association for Computational Linguistics</booktitle>
<pages>24--257</pages>
<contexts>
<context position="4768" citStr="Kasper and Rounds (1986)" startWordPosition="777" endWordPosition="780">s kind of Computational Linguistics Volume 16, Number 3, September 1990 171 Allan Ramsay Disjunction without Tears SYNTAX.&apos; SYNTAX = FORM = MINOR= HEAD= TENSED = _L [PRESENT = T PARTICIPLE = PAST = _L PASSIVE = 1 INFINITIVE = 1 SYNTAX.. Figure 1 Present Participle, e.g. providing. [CAT =VERB [MAJOR= BAR = 2 MINOR = [HEAD = ?H [CAT =VERB [MAJOR = BAR =0 MINOR = [HEAD -= 7H [CAT = VERB MAJOR = BAR = 0 disjunctive specification is widespread in unification grammer—the curly bracket, for instance, is standard notation in FUG, and most other notations provide some way of talking about disjunction. Kasper and Rounds (1986), among others, have taken up the question of exactly what such notations mean. We are more interested here in investigating the circumstances under which they are really necessary, and in trying to remove them wherever we can. Much the same sort of issue arises when we consider syntactic rules, particularly when we consider rules representing information about subcategorization frames. Consider, for instance, the interpretation of the verb be as an auxiliary. Be, as an auxiliary, can be combined with either a VP whose main verb is a present participle or one whose main verb is a passive parti</context>
</contexts>
<marker>Kasper, Rounds, 1986</marker>
<rawString>Kasper, R. and Rounds, W. 1986 A Logical Semantics for Feature Structures. Proceedings of the 24th Annual Meeting of the Association for Computational Linguistics 24,257-266.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kay</author>
</authors>
<title>Parsing in Functional Unification Grammar.</title>
<date>1985</date>
<editor>In: Dowty, DR., Karttunen, L., and Zwicky, AIM. (eds.)</editor>
<publisher>Cambridge University Press,</publisher>
<location>Cambridge.</location>
<contexts>
<context position="1270" citStr="Kay 1985" startWordPosition="183" endWordPosition="184">ibe a restricted set of disjunctive phenomena without incurring the costs associated with general disjunctive unification. 1 UNIFICATION AND SYNTACTIC DESCRIPTION We assume that the use of lattices and directed acyclic graphs (DAGs) for describing properties of syntactic structures, and of unification for combining such descriptions, is too well known to require justification at this point. A wide variety of notations have been used in this context— PROLOG terms, PATR-II specifications, FUG functional descriptors, GPSG category specifications, and so on (Pereira and Warren 1980; Shieber 1986; Kay 1985; Gazdar et al. 1985). The discussion below is couched in a FUG-like notation for concreteness, but the argument is equally applicable to any of the other standard formalisms (except perhaps GPSG). We can use our notation for characterizing objects in terms of their properties. We will generally be talking about linguistic objects such as words or phrases, though there is nothing that restricts this kind of description to such objects. We start by considering the word providing. We know various things about this word, including the fact that it is a present participle. We can represent this sp</context>
</contexts>
<marker>Kay, 1985</marker>
<rawString>Kay, M. 1985 Parsing in Functional Unification Grammar. In: Dowty, DR., Karttunen, L., and Zwicky, AIM. (eds.) Natural Language Parsing. Cambridge University Press, Cambridge.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F C N Pereira</author>
<author>D H D Warren</author>
</authors>
<title>Definite Clause Grammars for Language Analysis—A Survey of the Formalism and a Comparison with ATNs.</title>
<date>1980</date>
<journal>Artificial Intelligence</journal>
<volume>13</volume>
<issue>3</issue>
<pages>231--278</pages>
<contexts>
<context position="1246" citStr="Pereira and Warren 1980" startWordPosition="177" endWordPosition="180">junctive ones. This enables us to describe a restricted set of disjunctive phenomena without incurring the costs associated with general disjunctive unification. 1 UNIFICATION AND SYNTACTIC DESCRIPTION We assume that the use of lattices and directed acyclic graphs (DAGs) for describing properties of syntactic structures, and of unification for combining such descriptions, is too well known to require justification at this point. A wide variety of notations have been used in this context— PROLOG terms, PATR-II specifications, FUG functional descriptors, GPSG category specifications, and so on (Pereira and Warren 1980; Shieber 1986; Kay 1985; Gazdar et al. 1985). The discussion below is couched in a FUG-like notation for concreteness, but the argument is equally applicable to any of the other standard formalisms (except perhaps GPSG). We can use our notation for characterizing objects in terms of their properties. We will generally be talking about linguistic objects such as words or phrases, though there is nothing that restricts this kind of description to such objects. We start by considering the word providing. We know various things about this word, including the fact that it is a present participle. </context>
</contexts>
<marker>Pereira, Warren, 1980</marker>
<rawString>Pereira, F.C.N. and Warren, D.H.D. 1980 Definite Clause Grammars for Language Analysis—A Survey of the Formalism and a Comparison with ATNs. Artificial Intelligence 13(3): 231-278.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S M Shieber</author>
</authors>
<title>An Introduction to Unification-Based Approaches to Grammar.</title>
<date>1986</date>
<publisher>University of Chicago Press,</publisher>
<location>Chicago.</location>
<contexts>
<context position="1260" citStr="Shieber 1986" startWordPosition="181" endWordPosition="182">es us to describe a restricted set of disjunctive phenomena without incurring the costs associated with general disjunctive unification. 1 UNIFICATION AND SYNTACTIC DESCRIPTION We assume that the use of lattices and directed acyclic graphs (DAGs) for describing properties of syntactic structures, and of unification for combining such descriptions, is too well known to require justification at this point. A wide variety of notations have been used in this context— PROLOG terms, PATR-II specifications, FUG functional descriptors, GPSG category specifications, and so on (Pereira and Warren 1980; Shieber 1986; Kay 1985; Gazdar et al. 1985). The discussion below is couched in a FUG-like notation for concreteness, but the argument is equally applicable to any of the other standard formalisms (except perhaps GPSG). We can use our notation for characterizing objects in terms of their properties. We will generally be talking about linguistic objects such as words or phrases, though there is nothing that restricts this kind of description to such objects. We start by considering the word providing. We know various things about this word, including the fact that it is a present participle. We can represe</context>
</contexts>
<marker>Shieber, 1986</marker>
<rawString>Shieber, S. M. 1986 An Introduction to Unification-Based Approaches to Grammar. University of Chicago Press, Chicago.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>