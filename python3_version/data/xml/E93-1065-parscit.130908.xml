<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.016867">
<title confidence="0.926775">
INSYST: An Automatic Inserter System for Hierarchical Lexica
</title>
<author confidence="0.86778">
Marc Light Sabine Reinhard Marie Boyle-Hinrichs
</author>
<bodyText confidence="0.328781333333333">
Universitat Tubingen, Seminar fiir Sprachwissenschaft
Kleine Wilhelmstr. 113, D-7400 Tiibingen
light,reinhard,meb J @arbuckle.sns.neuphilologie.uni-tuebingen.de
</bodyText>
<sectionHeader confidence="0.99395" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.9999154">
When using hierarchical formalisms for lexical infor-
mation, the need arises to insert (i.e. classify) lexical
items into these hierarchies. This includes at least the
following two situations: (1) testing generalizations
when designing a lexical hierarchy; (2) transferring
large numbers of lexical items from raw data files to a
finished lexical hierarchy when using it to build a large
lexicon. Up until now, no automated system for these
insertion tasks existed. INSYST (INserter SYSTem),
we describe here, can efficiently insert lexical items
under the appropriate nodes in hierarchies. It currently
handles hierarchies specified in the DATR formalism
(Evans and Gazdar 1989, 1990). The system uses a
classification algorithm that maximizes the number of
inherited features for each entry.
</bodyText>
<sectionHeader confidence="0.993038" genericHeader="categories and subject descriptors">
2. The INSYST-Architecture
</sectionHeader>
<bodyText confidence="0.999990090909091">
The following information is required by the INSYST-
Classifier module: i) the features that can be inherited
from each node of the hierarchy, and ii) the features of
the item to be inserted. Since the answer to i) is not
explicitly stated in the DATR specification of a node,
three modules preprocess the input DATR theory: the
INSYST-Compiler and the INS YST-Inheritance
Closure modules. The INSYST-Interface to the
database answers question (ii). The modules are
implemented in C. Figure 1 presents a pictoral view of
the interactions between INSYST modules.
</bodyText>
<subsectionHeader confidence="0.813076">
2.1 The INSYST-Compiler and Inheritance Closure
modules
</subsectionHeader>
<bodyText confidence="0.999889529411765">
The INSYST-Compiler reads the input DATR theory
from a file, creates nodes and inserts the path-value
pairs into them as they are encountered.
The Inheritance Closure module loops through the
node list provided by the Compiler, calling a recursive
function that &amp;quot;expands&amp;quot; path-value pairs, for each path-
value pair in each node. This &amp;quot;expansion&amp;quot; is necessary
because of the complex DATR inheritance
mechanisms: default inheritance (a node inherits all the
values for paths that start with a certain prefix from a
parent node), global inheritance, embedded paths, lists,
etc. In a first pass (Inheritance Closure I), all inheri-
tances are resolved and listed, except for the global
(quoted) paths. These are resolved on a second pass
(Inheritance Closure II), when a node is being inserted,
because the values for the global paths are taken from
that node currently being inserted.
</bodyText>
<subsectionHeader confidence="0.992152">
2.2 The INSYST-Classifier
</subsectionHeader>
<bodyText confidence="0.999935818181818">
The INSYST-Classifier algorithm (s. Light, forthc.)
strives to maximize the number of path-value pairs a
new entry node inherits while minimizing the number
of parents. It uses the following heuristic: choose the
parent from which the node being inserted can inherit
the most path-value pairs while counting clashes
between a potential parent node path-value pair and a
new entry path-value pair. The algorithm is computa-
tionally tractable and always produces a reasonable
solution. However, a solution involving fewer parents
may exist.
</bodyText>
<sectionHeader confidence="0.984285" genericHeader="conclusions">
3. Conclusion
</sectionHeader>
<bodyText confidence="0.999913">
By building an inserter system for DATR with its
particulary complex inheritance features (default inhe-
ritance, embedded paths, etc.), we have shown the
plausibility of our design. We feel that INSYST or
systems like it will become a standard tool for
researchers using or designing lexical hierarchies.
</bodyText>
<sectionHeader confidence="0.980769" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.5540756">
[Evans and Gazdar, 1989, 1990] Evans, Roger and Gerald
Gazdar (eds.). &amp;quot;The DATR Papers&amp;quot;, Cognitive Science
Research Papers, U Sussex, 1989 and 1990.
[Light, forthc.] Light, Marc. &amp;quot;A Classifier Algorithm for
Default Hierarchies&amp;quot;, SfS-Report, U Tubingen, forthc.
</reference>
<figureCaption confidence="0.997744">
Figure 1: Internal Structure of INSYST
</figureCaption>
<figure confidence="0.919572227272727">
DATR
Compiler
(created by
yacc &amp; lex)
INSYST
inheritance
pecifications
interface to
the database
features of
objects to be
classified
Classifier System
Inheritance
Closure II
Inheritance
Closure I
membership
restrictions
for the
theory nodes
Classifier
</figure>
<footnote confidence="0.393466666666667">
classifications
specified in the
DATR notation
</footnote>
<page confidence="0.996084">
471
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.270974">
<title confidence="0.998442">INSYST: An Automatic Inserter System for Hierarchical Lexica</title>
<author confidence="0.975872">Marc Light Sabine Reinhard Marie Boyle-Hinrichs</author>
<affiliation confidence="0.790857">Universitat Tubingen, Seminar fiir Sprachwissenschaft</affiliation>
<address confidence="0.35279">Kleine Wilhelmstr. 113, D-7400 Tiibingen</address>
<intro confidence="0.809691">J@arbuckle.sns.neuphilologie.uni-tuebingen.de</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<title>The DATR Papers&amp;quot;, Cognitive Science Research Papers, U Sussex,</title>
<date>1989</date>
<editor>Evans, Roger and Gerald Gazdar (eds.).</editor>
<marker>[Evans and Gazdar, 1989, 1990]</marker>
<rawString>Evans, Roger and Gerald Gazdar (eds.). &amp;quot;The DATR Papers&amp;quot;, Cognitive Science Research Papers, U Sussex, 1989 and 1990.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Marc Light</author>
</authors>
<title>A Classifier Algorithm for Default Hierarchies&amp;quot;,</title>
<tech>SfS-Report, U Tubingen, forthc.</tech>
<marker>[Light, forthc.]</marker>
<rawString>Light, Marc. &amp;quot;A Classifier Algorithm for Default Hierarchies&amp;quot;, SfS-Report, U Tubingen, forthc.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>