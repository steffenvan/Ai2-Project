<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000585">
<title confidence="0.998744">
Semantic-driven Generation with LFG-
and PATR-style Grammars
</title>
<author confidence="0.999">
Jurgen Wedekind*
</author>
<affiliation confidence="0.945995">
University of Stuttgart
</affiliation>
<bodyText confidence="0.99948625">
To find an appropriate utterance for a semantic representation is a problem normally
treated in the domain of (tactical) natural language generation. For unification-based
approaches, like LFG, PATR, or HPSG (Kaplan and Bresnan 1982; Shieber et al. 1983;
Pollard and Sag 1994), this problem turns out to be a formal problem of the underlying
grammar formalism, when the mapping between strings and semantic representations
is defined by the grammar. Semantic representations are then encoded in a separate
part of the feature structures (henceforth f-structures) that are assigned to the sen-
tences by the grammar. This is normally achieved by a distinct attribute SEM (or an
additional a-projection that is formally reconstructable by such an attribute) whose
value is intended to represent the semantics of the sentence the f-structure is assigned
to. The f-structure given in (1), which might be assigned to the sentence John arrives
by a unification grammar for English, is a simple example.
</bodyText>
<sectionHeader confidence="0.955144666666667" genericHeader="method">
PRED &apos;ARRIVE((SUBJ))&apos;
TENSE PRES
SUBJ [PRED &apos;JOHN&apos;]
I
[REL arrive
ARG1 john
</sectionHeader>
<bodyText confidence="0.998787166666667">
Since the f-structures assigned to the sentences are always subsumed by the se-
mantic representations they contain, a semantic-driven generator has to compute for a
given semantic representation 4)1 a sentence with an f-structure 1) that is subsumed by
the input (in the following, notated by 4)&apos; (I)). To state the underlying decidability
problem more formally, we need the fact that a unification grammar G defines a binary
relation AG between terminal strings w and f-structures 4), as given in (2)
</bodyText>
<listItem confidence="0.882378">
(2) AG (W, ) iff G assigns 4) tow.
</listItem>
<bodyText confidence="0.993241333333333">
The problem of determining for a given semantic representation 4)&apos; whether there is a
sentence with an f-structure 4) that is subsumed by the input turns out then to be an
instance of the problem of whether we can decide (3)
</bodyText>
<listItem confidence="0.645953">
(3) 2z041)(4,&apos; L 4&gt; A AG(W,I3D))
</listItem>
<bodyText confidence="0.791487333333333">
for any given input 4)&apos;.
The undecidability of the generation problem in (3) was shown for definite clause
grammars by Dymetman (1991), who reduced the problem to Hilbert&apos;s Tenth Prob-
</bodyText>
<footnote confidence="0.9023065">
* Institute for Natural Language Processing, University of Stuttgart, Azenbergstr. 12, D-70174 Stuttgart,
Germany. E-mail: juergen@ims.uni-stuttgart.de
</footnote>
<figure confidence="0.63747175">
(1)
SEM
C) 1999 Association for Computational Linguistics
Computational Linguistics Volume 25, Number 2
</figure>
<bodyText confidence="0.994719181818182">
tern. Van Noord (1993) provided a proof for PATR-style grammars using a reduction to
Post&apos;s Correspondence Problem. Moreover, a reduction to Hilbert&apos;s Tenth Problem was
also used by Roach (1983) to show the undecidability of the emptiness problem of lexical-
functional languages, a result that was later shown by Nishino (1991) using a reduction
to Post&apos;s Correspondence Problem. In this brief note, we want to investigate the close
relationship between the emptiness problem of lexical-functional and PATR languages
and the generation problem in (3). We give a much simpler undecidability proof of the
emptiness problem using a reduction to the emptiness problem of the intersection of
arbitrary context-free languages, a reduction that Wedekind and Kaplan (1996) used
to show the undecidability of ambiguity-preserving generation. The close connection
of the problems—already indicated by the fact that their undecidability proofs were
achieved by the same reductions—results, then, from the fact that the undecidability
of the emptiness problem trivially implies the undecidability of semantic-driven gen-
eration. This result also applies to other unification-based formalisms such as HPSG,
since they are powerful enough to simulate context-free derivations.
We begin our construction by defining for each context-free language L a unifica-
tion grammar that generates L and that associates with each derivable terminal string
an f-structure consisting of the string&apos;s difference list encoding (plus concatenation
information)! For the association of the annotated information with the constituents
described by a context-free rule of the form A w, we use—similar to PATR—a set
of distinct metavariables {xo, , x1w1}; xo refers to the mother and x, (i = 1, . . . , Iwl) to
the ith daughter.
</bodyText>
<subsectionHeader confidence="0.89898">
Definition
</subsectionHeader>
<bodyText confidence="0.999915666666667">
Let G be a context-free grammar in Chomsky normal form whose nonterminal vo-
cabulary, terminal vocabulary start-symbol, and rules are given by (VN, VT, S. R). I.e.,
each rule has the form A –÷ E, A ---+ a or A -- BC with A, B, C E VN, a E VT and E de-
noting the empty string. A string grammar String(G) for G is a unification grammar
(VN, VT, S. R,) whose rule set is determined as follows. In the first step we construct
for each context-free rule r = A —+ w a set of annotations Sr:
</bodyText>
<equation confidence="0.993859666666667">
{ (x0 IN) P-.- (zo ouT)}
1 if w = E
Sr = {(Xo IN FIRST) r-.::: a, (X0 IN REST) ^,--:: (X0 OUT)} if w = a
</equation>
<bodyText confidence="0.971587352941177">
{(x0 IN)&apos;,-,-,- (xi IN), (xi our) :---- (x2 IN), (xo ouT)r-:.; (x2 our)} if w = BC.
The set of rules is then given by Rs = {(r, Sr) I r E R}.2
Figure 1 illustrates the f-structure encoding of a terminal string generated by a
simple string grammar. By induction on the depth of the derivation trees, it can eas-
ily be shown that G and String(G) have the same language and that the f-structure
assigned to a terminal string w encodes w, as stated more precisely in the following
Lemma:
1 We separated this construction out of the main proof, since it might be useful for analyzing other
problems.
2 We used PATR-style notation, since it facilitates the construction of string grammars. For LFG
grammars where we do not have the possibility to refer from one daughter to her sister (necessary for
(xi OUT) (x2 IN)) we need a slightly more complex construction. If w BC then B has to be
annotated by (1 B1) and (T IN) (1 IN) and C by (1 c2) 1, (1 OUT) (1 OUT), and
Bi ouT) (1 IN). w = a we need (1 IN FIRST) a and (T IN REST) (i OUT) and for w = E
the equation (1 IN) (1 OUT). With this construction we get the same undecidability results for
classical LFG grammars. The only difference is that the constructed grammars are tree grammars rather
than string grammars.
</bodyText>
<page confidence="0.963688">
278
</page>
<figure confidence="0.965936">
Wedekind Semantic-driven Generation
IN ao OUT
al OUT
a3a4a2
IN OUT IN OUT IN OUT
REST REST REST
FIRST FIRST1 FIRST1
</figure>
<figureCaption confidence="0.708149">
Figure 1
A sample constituent structure and the associated f-structure provided by a simple string
grammar. The metavariables of the rules are instantiated by the variables attached to the
nodes of the constituent structure. To each variable xr is assigned the f-structure element at.
</figureCaption>
<subsectionHeader confidence="0.682688">
Lemma
</subsectionHeader>
<bodyText confidence="0.9644045">
Let String(G) be a string grammar. Then L(G) = L(String(G)) and if there is a deriva-
tion of a terminal string w with root S„0 and f-structure (13 then the substructure of
1, which comprises the elements accessible from ao in is a minimal solution of
{(x0 IN RESTI-1 FIRST) Zi.7, I 1 &lt; i &lt; Iwi} U {(xo ouT) (xo IN RESTIw1)}.3
If we combine two arbitrary string grammars in such a way that the string encod-
ings of the derived terminal strings get unified, we can show the undecidability of the
emptiness problem by a simple reduction to the emptiness problem of the intersection
of arbitrary context-free languages.
</bodyText>
<subsectionHeader confidence="0.773325">
Theorem
</subsectionHeader>
<bodyText confidence="0.993809">
It is undecidable for an arbitrary unification grammar G whether L(G) = 0.
</bodyText>
<subsectionHeader confidence="0.792257">
Proof
</subsectionHeader>
<bodyText confidence="0.9992712">
Let G1 = (V1v, 171, S1. R1) and G2 = (1712,7, Vi, S2, R2) be context-free grammars for two
arbitrary context-free languages. Without loss of generality we can assume that
n vi2„ = 0 and that each rule in Ri (i = 1,2) is in Chomsky normal form. On the ba-
sis of String(G1) and String(G2) we construct a unification grammar G = (VN, VT, S, R)
with
</bodyText>
<equation confidence="0.9792665">
-= (S Sis2, {xo Pz-i xo _IR
(X0 OUT FIRST) # )1 U Rsi U
</equation>
<bodyText confidence="0.998759">
such that # is a new atomic value not in VT. If we assume for G constant-consistency
(i.e., axioms of the form H a b for all atomic values a, b E VT U {#} with a b) then
the problem whether L(G) = 0 reduces to the undecidable problem whether
L(G1) n L(G2) = 0. In order to get a derivation of a well-formed terminal string w1w2
from S with w1 derived from 51 and w2 from S2, w1 must be identical with w2, since
both string encodings get unified by the S-rule and (X0 OUT FIRST) # ensures that
one string is not a proper prefix of the other.&apos; Thus, L(G) -= {ww W E L(G1) n L(G2)}
and L(G) = 0 iff L(G1) n L(G2) = 0. •
</bodyText>
<footnote confidence="0.6323624">
3 The whole f-structure encodes the complete difference list derivation of wx — x, which is induced by
the derivation tree by relabeling each (nonterminal) node dominating substring v of uvz --= w by
vzx — zx, since the annotations of each rule of the form A —&gt; BC encode the difference list of the
mother as the concatenation of the lists of its daughters (X — X2 = X XI ± X2).
4 The annotation (X0 OUT FIRST) # is not necessary if acyclicity is assumed.
</footnote>
<equation confidence="0.6970175">
Sxo
Ax1 Dx2
Bx3 Cx4
d
VN = U Vi2v U {S} and S U V72„
VT = V U
</equation>
<page confidence="0.937859">
279
</page>
<note confidence="0.605497">
Computational Linguistics Volume 25, Number 2
</note>
<bodyText confidence="0.996977">
By taking the smallest f-structure I as an input the undecidability of our generation
problem reduces trivially to the undecidability of the emptiness problem, since
</bodyText>
<equation confidence="0.716772">
L(G) = {w 343(AG(w,4)))} = fiv I AG(w,43))}.
</equation>
<bodyText confidence="0.981727">
That is, if the emptiness problem of L(G) is undecidable for a unification grammar G
then G&apos;s generation problem in (3) must be undecidable too. (The other direction does
not hold, of course.)
</bodyText>
<sectionHeader confidence="0.687858" genericHeader="conclusions">
Corollary
</sectionHeader>
<bodyText confidence="0.982989111111111">
For an arbitrary unification grammar G and an arbitrary f-structure 43&apos; it is undecidable
whether there is an f-structure and a terminal string w such that 43&apos; E I. and
AG (W, 11).
Although it might be argued that we show the undecidability on the basis of a
rather special case, namely the smallest f-structure, the undecidability of the empti-
ness problem is nevertheless sufficient, since we always get a (superficially) less triv-
ial direct proof of the corollary by using any proof of the theorem and adding some
(new) nontrivial input information to the S-rule. If we add, for example, the equation
(xo SEM) P.,.% 1 to the S-rule of our proof
</bodyText>
<equation confidence="0.998934">
1 X0 Xi, X0 %.------&amp;quot;, X2,
(S -iS1S2, (Xo OUT FIRST) `&apos;,-*---: #, )
(X0 SEM) P--: 1
</equation>
<bodyText confidence="0.999444315789474">
then the problem whether we can find for [SEM 1] (= V) an f-structure (D and a
terminal string w such that [SEM 1] C (i) and AG (w, (13) reduces to the undecidable
problem whether L(G) -= 0 as wel1.5
Our construction shows that an LFG or PAIR grammar G can simulate the valid
computations of an arbitrary Turing machine M, since they are known to be speci-
fiable by the intersection of two context-free languages. Since L(M) = 0 is undecid-
able, the emptiness problem of L(G) must be undecidable too. By adding a bit of
semantic representation 43&apos; to the S-rule these properties are trivially carried over
from L(G) to the set of possible realizations assigned to 43&apos; by G, given by the lan-
guage { w I]43 (43&apos; E 43 A AG(w,43))}. Our proof construction works, of course, even if
the grammatical formalisms satisfy the off-line parsability restriction.6 Thus, the decid-
ability of the membership problem—similar to context-sensitive grammars—does not
imply the decidability of the emptiness (and the semantic-driven generation) problem.7
From a cognitive point of view it seems quite unrealistic that our language gen-
eration capabilities require mathematical models of Turing machine power. Hence,
natural language grammars (of the LFG and PATR formalisms) must satisfy condi-
tions that do not allow us to show the undecidability of the problem. We assumed
the semantic representations to be structurally unrelated to the f-structures they sub-
sume. It seems more plausible that there is a proportion k that bounds the size of an
</bodyText>
<footnote confidence="0.964245833333333">
5 Van Noord (1993) used the equation (X0 SOLUTION) &amp;quot;-:./ yes in his proof.
6 If the context-free grammars G1 and G2 are off-line parsable then the unification grammars G used in
the undecidability proofs are off-line parsable as well. Since we can decide E E L(G&apos;) for any
context-free grammar G&apos; and can reduce G&apos; to an off-line parsable grammar G&amp;quot; with
L(G&apos;) — fel = L(G&amp;quot;), L(G1) n L(G2) = 0 and hence L(G) = 0 must be undecidable even if the
grammars satisfy the off-line parsability restriction.
</footnote>
<page confidence="0.99002">
280
</page>
<note confidence="0.760452">
Wedekind Semantic-driven Generation
</note>
<bodyText confidence="0.998688666666667">
f-structure 4&gt; assigned to a string by the size of its subsuming semantic representa-
tion 4&gt;&apos;: 14&gt;l &lt; I. This would force the f-structures of the surface realizations of a
semantic representation given by I C 4&gt; A 3W(AG(W, 43))) to be included in a
finite and computable set of structurally related f-structures {(D I (1)&apos; E &apos;I&apos; A 14&gt;1 &lt; kl43/ If.
Since the generation problem is decidable (Wedekind 1995), i.e., { w G(7,0 , 43)} = 0 is
decidable for any given f-structure IP, and only a finite number of structurally related
f-structures 4) has to be tested for {w AG (W , 43)1 = 0, semantic-driven generation must
be decidable. But we must, of course, admit that it is far from being evident yet, how
this structural relation is realized in natural language grammars.
</bodyText>
<sectionHeader confidence="0.98287" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9994234">
Ron Kaplan had the idea that the proof
construction which we used in Wedekind
and Kaplan (1996) might be useful for other
purposes. Thanks to him for valuable
suggestions.
</bodyText>
<sectionHeader confidence="0.994154" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.981107695652174">
Dymetman, M. 1991. Inherently reversible
grammars, logic programming and
computability. In Proceedings of the ACL
Workshop: Reversible Grammar in Natural
Language Processing. Berkeley, CA, pages
20-30.
Kaplan, R. M. and J. Bresnan. 1982.
Lexical-Functional Grammar: A formal
system for grammatical representation. In
J. Bresnan, editor, The Mental
Representation of Grammatical Relations. MIT
Press, Cambridge, MA, pages 173-281.
Nishino, T. 1991. Mathematical analysis of
lexical-functional grammars. Language
Research, 27(1): 119-141.
Pollard, C. and I. Sag. 1994. Head-Driven
Phrase Structure Grammar. The University
of Chicago Press, Chicago, IL.
Roach, K. 1983. LFG languages over a
one-letter alphabet. Manuscript, Xerox
PARC, Palo Alto, CA.
Shieber, S., H. Uszkoreit, F. Pereira, J.
Robinson, and M. Tyson. 1983. The
formalism and implementation of
PATR-II. In B. Grosz and M. Stickel,
editors, Research on Interactive Acquisition
and Use of Knowledge. SRI Final Report
1894. SRI International, Menlo Park, CA,
pages 39-79.
van Noord, G. 1993. Reversibility in Natural
Language Processing. Ph.D. thesis,
Rijksuniversiteit Utrecht.
Wedekind, J. 1995. Some remarks on the
decidability of the generation problem in
LFG- and PATR-style unification
grammars. In Proceedings of the 7th
Conference of the European Chapter of the
Association for Computational Linguistics.
Dublin, pages 45-52.
Wedekind, J. and R. M. Kaplan. 1996.
Ambiguity-preserving generation with
LFG- and PATR-style grammars.
Computational Linguistics, 22(4): 555-558.
7 This fact is already illustrated by the languages of the grammars we used in the undecidability proofs;
they all have a decidable membership problem, since w E L(G1) n L(G2) is decidable for arbitrary
context-free grammars G1 and G2.
</reference>
<page confidence="0.996417">
281
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000275">
<title confidence="0.999529">Semantic-driven Generation with LFGand PATR-style Grammars</title>
<author confidence="0.999692">Jurgen Wedekind</author>
<affiliation confidence="0.998982">University of Stuttgart</affiliation>
<abstract confidence="0.928366166666667">To find an appropriate utterance for a semantic representation is a problem normally treated in the domain of (tactical) natural language generation. For unification-based approaches, like LFG, PATR, or HPSG (Kaplan and Bresnan 1982; Shieber et al. 1983; and Sag 1994), turns out to be a formal problem of grammar formalism, when the mapping between strings and semantic representations is defined by the grammar. Semantic representations are then encoded in a separate of the feature structures (henceforth f-structures) that are assigned to senthe grammar. This is normally achieved by a distinct attribute SEM (or an additional a-projection that is formally reconstructable by such an attribute) whose value is intended to represent the semantics of the sentence the f-structure is assigned The f-structure given in (1), which might be assigned to the sentence arrives by a unification grammar for English, is a simple example. PRED &apos;ARRIVE((SUBJ))&apos; TENSE PRES SUBJ [PRED &apos;JOHN&apos;] I Since the f-structures assigned to the sentences are always subsumed by the semantic representations they contain, a semantic-driven generator has to compute for a semantic representation a sentence with an f-structure 1) that is subsumed by input (in the following, notated by 4)&apos; state the underlying decidability more formally, we need the fact that a unification grammar a binary between terminal strings w and f-structures 4), as given in (2) (2) (W, ) iff 4) tow. The problem of determining for a given semantic representation 4)&apos; whether there is a sentence with an f-structure 4) that is subsumed by the input turns out then to be an instance of the problem of whether we can decide (3) (3) L 4&gt; for any given input 4)&apos;. undecidability of the problem (3) was shown for definite clause by Dymetman (1991), who reduced the problem to Hilbert&apos;s Tenth Prob-</abstract>
<affiliation confidence="0.924605">Institute for Natural Language Processing, University of Stuttgart, Azenbergstr. 12, D-70174 Stuttgart,</affiliation>
<address confidence="0.804845">Germany. E-mail: juergen@ims.uni-stuttgart.de</address>
<note confidence="0.683632">(1) SEM C) 1999 Association for Computational Linguistics Computational Linguistics Volume 25, Number 2</note>
<abstract confidence="0.986424044871796">tern. Van Noord (1993) provided a proof for PATR-style grammars using a reduction to Post&apos;s Correspondence Problem. Moreover, a reduction to Hilbert&apos;s Tenth Problem was used by Roach (1983) to show the undecidability of the problem lexicalfunctional languages, a result that was later shown by Nishino (1991) using a reduction to Post&apos;s Correspondence Problem. In this brief note, we want to investigate the close relationship between the emptiness problem of lexical-functional and PATR languages and the generation problem in (3). We give a much simpler undecidability proof of the emptiness problem using a reduction to the emptiness problem of the intersection of arbitrary context-free languages, a reduction that Wedekind and Kaplan (1996) used to show the undecidability of ambiguity-preserving generation. The close connection of the problems—already indicated by the fact that their undecidability proofs were achieved by the same reductions—results, then, from the fact that the undecidability of the emptiness problem trivially implies the undecidability of semantic-driven generation. This result also applies to other unification-based formalisms such as HPSG, since they are powerful enough to simulate context-free derivations. We begin our construction by defining for each context-free language L a unificagrammar that generates that associates with each derivable terminal string an f-structure consisting of the string&apos;s difference list encoding (plus concatenation information)! For the association of the annotated information with the constituents described by a context-free rule of the form A w, we use—similar to PATR—a set distinct metavariables {xo, , x1w1}; xo refers to the mother and (i = 1, . . . , Iwl) the ith daughter. Definition a context-free grammar in Chomsky normal form whose nonterminal voterminal vocabulary start-symbol, and rules are given by VT, R). I.e., rule has the form A –÷ ---+ a or A -- BC with A, E deempty string. A grammar a unification grammar VT, R,) whose rule set is determined as follows. In the first step we construct each context-free rule A —+ w a set of annotations Sr: IN) P-.ouT)} if w = = FIRST) r-.::: (X0 IN REST) ^,--:: (X0 OUT)} w = a IN), our) :---- IN), ouT)r-:.; our)} w = set of rules is then given by = I r Figure 1 illustrates the f-structure encoding of a terminal string generated by a simple string grammar. By induction on the depth of the derivation trees, it can easbe shown that the same language and that the f-structure assigned to a terminal string w encodes w, as stated more precisely in the following Lemma: 1 We separated this construction out of the main proof, since it might be useful for analyzing other problems. 2 We used PATR-style notation, since it facilitates the construction of string grammars. For LFG grammars where we do not have the possibility to refer from one daughter to her sister (necessary for (xi OUT) (x2 IN)) we need a slightly more complex construction. If w BC then B has to be by (T IN) (1 IN) and C by (1 c2) 1, (1 OUT) (1 OUT), and ouT) (1 IN). w = a we need (1 FIRST) and (T REST) (i OUT) for w = the equation (1 IN) (1 OUT). With this construction we get the same undecidability results for classical LFG grammars. The only difference is that the constructed grammars are tree grammars rather than string grammars. 278 Wedekind Semantic-driven Generation al a3a4a2 IN OUT IN OUT IN OUT REST REST FIRST FIRST1 FIRST1 A sample constituent structure and the associated f-structure provided by a simple string grammar. The metavariables of the rules are instantiated by the variables attached to the of the constituent structure. To each variable is assigned the f-structure element Lemma a string grammar. Then = L(String(G)) if there is a derivaof a terminal string w with root and f-structure (13 then the substructure of which comprises the elements accessible from in is a minimal solution of FIRST) Zi.7, I &lt; Iwi} ouT) (xo RESTIw1)}.3 If we combine two arbitrary string grammars in such a way that the string encodings of the derived terminal strings get unified, we can show the undecidability of the emptiness problem by a simple reduction to the emptiness problem of the intersection of arbitrary context-free languages. Theorem undecidable for an arbitrary unification grammar = 0. Proof = S1. R1) = Vi, context-free grammars for two arbitrary context-free languages. Without loss of generality we can assume that = 0 that each rule in Ri = is in Chomsky normal form. On the baof construct a unification grammar G VT, with {xo xo OUT FIRST) # )1 U that # is a new atomic value not in we assume for axioms of the form H b all atomic values b U with b) problem whether = 0 to the undecidable problem whether 0. In order to get a derivation of a well-formed terminal string S with derived from and from must be identical with since string encodings get unified by the S-rule and FIRST) # that string is not a proper prefix of the other.&apos; Thus, -= {ww E = 0 = 0. • The whole f-structure encodes the complete difference list derivation of is induced by the derivation tree by relabeling each (nonterminal) node dominating substring v of uvz --= w by zx, since the annotations of each rule of the form A —&gt; BC encode the difference list of the mother as the concatenation of the lists of its daughters (X — X2 = X XI ± X2). The annotation (X0 OUT FIRST) not necessary if acyclicity is assumed. d = U U and S U = V U 279 Computational Linguistics Volume 25, Number 2 taking the smallest f-structure an input the undecidability of our generation problem reduces trivially to the undecidability of the emptiness problem, since = {w = fiv I is, if the emptiness problem of undecidable for a unification grammar then G&apos;s generation problem in (3) must be undecidable too. (The other direction does not hold, of course.) Corollary an arbitrary unification grammar an arbitrary f-structure 43&apos; it is undecidable there is an f-structure and a terminal string w such that 43&apos; I. Although it might be argued that we show the undecidability on the basis of a rather special case, namely the smallest f-structure, the undecidability of the emptiness problem is nevertheless sufficient, since we always get a (superficially) less trivial direct proof of the corollary by using any proof of the theorem and adding some (new) nontrivial input information to the S-rule. If we add, for example, the equation SEM) P.,.% 1 to the S-rule of our proof Xi, X0 %.------&amp;quot;, X2, OUT FIRST) `&apos;,-*---: #, ) SEM) P--: 1 the problem whether we can find for [SEM (= V) f-structure (D and a string w such that [SEM C (i) (w, (13) reduces to the undecidable whether 0 construction shows that an LFG or PAIR grammar simulate the valid computations of an arbitrary Turing machine M, since they are known to be speciby the intersection of two context-free languages. Since = 0 undecidthe emptiness problem of be undecidable too. By adding a bit of semantic representation 43&apos; to the S-rule these properties are trivially carried over the set of possible realizations assigned to 43&apos; by the lan- { w I]43 (43&apos; E 43 proof construction works, of course, even if grammatical formalisms satisfy the off-line parsability Thus, the decidability of the membership problem—similar to context-sensitive grammars—does not the decidability of the emptiness (and the semantic-driven generation) From a cognitive point of view it seems quite unrealistic that our language generation capabilities require mathematical models of Turing machine power. Hence, natural language grammars (of the LFG and PATR formalisms) must satisfy conditions that do not allow us to show the undecidability of the problem. We assumed the semantic representations to be structurally unrelated to the f-structures they sub- It seems more plausible that there is a proportion bounds the size of an Van Noord (1993) used the equation SOLUTION) &amp;quot;-:./ his proof. If the context-free grammars and are off-line parsable then the unification grammars in undecidability proofs are off-line parsable as well. Since we can decide any grammar can reduce an off-line parsable grammar — fel = L(G&amp;quot;), = 0 and hence = 0 be undecidable even if the grammars satisfy the off-line parsability restriction. 280 Wedekind Semantic-driven Generation 4&gt; assigned to a string by the size of its subsuming semantic representation 4&gt;&apos;: 14&gt;l &lt; I. This would force the f-structures of the surface realizations of a representation given by I A be included in and computable set of structurally related f-structures {(D I(1)&apos; E &apos;I&apos; A &lt; If. the generation problem is decidable (Wedekind 1995), i.e., { w = 0 decidable for any given f-structure IP, and only a finite number of structurally related 4) has to be tested for {w (W = 0, semantic-driven generation must be decidable. But we must, of course, admit that it is far from being evident yet, how this structural relation is realized in natural language grammars. Acknowledgments Ron Kaplan had the idea that the proof construction which we used in Wedekind and Kaplan (1996) might be useful for other purposes. Thanks to him for valuable suggestions.</abstract>
<note confidence="0.850067416666667">References Dymetman, M. 1991. Inherently reversible grammars, logic programming and In of the ACL Workshop: Reversible Grammar in Natural Processing. CA, pages 20-30. Kaplan, R. M. and J. Bresnan. 1982. Lexical-Functional Grammar: A formal system for grammatical representation. In editor, Mental of Grammatical Relations. Press, Cambridge, MA, pages 173-281. Nishino, T. 1991. Mathematical analysis of grammars. 119-141. C. and I. Sag. 1994. Structure Grammar. University of Chicago Press, Chicago, IL. Roach, K. 1983. LFG languages over a one-letter alphabet. Manuscript, Xerox PARC, Palo Alto, CA. Shieber, S., H. Uszkoreit, F. Pereira, J. Robinson, and M. Tyson. 1983. The</note>
<title confidence="0.846053">formalism and implementation of</title>
<author confidence="0.950657">In B Grosz</author>
<author confidence="0.950657">M Stickel</author>
<affiliation confidence="0.60386">on Interactive Acquisition</affiliation>
<note confidence="0.70739280952381">Use of Knowledge. Final Report 1894. SRI International, Menlo Park, CA, pages 39-79. Noord, G. 1993. in Natural Processing. Rijksuniversiteit Utrecht. Wedekind, J. 1995. Some remarks on the of problem in LFGand PATR-style unification In of the 7th Conference of the European Chapter of the Association for Computational Linguistics. Dublin, pages 45-52. Wedekind, J. and R. M. Kaplan. 1996. Ambiguity-preserving generation with LFGand PATR-style grammars. Linguistics, 555-558. 7 This fact is already illustrated by the languages of the grammars we used in the undecidability proofs; all have a decidable membership problem, since w E n is decidable for arbitrary grammars and 281</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M Dymetman</author>
</authors>
<title>Inherently reversible grammars, logic programming and computability.</title>
<date>1991</date>
<booktitle>In Proceedings of the ACL Workshop: Reversible Grammar in Natural Language Processing.</booktitle>
<pages>20--30</pages>
<location>Berkeley, CA,</location>
<contexts>
<context position="2099" citStr="Dymetman (1991)" startWordPosition="336" endWordPosition="337">e underlying decidability problem more formally, we need the fact that a unification grammar G defines a binary relation AG between terminal strings w and f-structures 4), as given in (2) (2) AG (W, ) iff G assigns 4) tow. The problem of determining for a given semantic representation 4)&apos; whether there is a sentence with an f-structure 4) that is subsumed by the input turns out then to be an instance of the problem of whether we can decide (3) (3) 2z041)(4,&apos; L 4&gt; A AG(W,I3D)) for any given input 4)&apos;. The undecidability of the generation problem in (3) was shown for definite clause grammars by Dymetman (1991), who reduced the problem to Hilbert&apos;s Tenth Prob* Institute for Natural Language Processing, University of Stuttgart, Azenbergstr. 12, D-70174 Stuttgart, Germany. E-mail: juergen@ims.uni-stuttgart.de (1) SEM C) 1999 Association for Computational Linguistics Computational Linguistics Volume 25, Number 2 tern. Van Noord (1993) provided a proof for PATR-style grammars using a reduction to Post&apos;s Correspondence Problem. Moreover, a reduction to Hilbert&apos;s Tenth Problem was also used by Roach (1983) to show the undecidability of the emptiness problem of lexicalfunctional languages, a result that wa</context>
</contexts>
<marker>Dymetman, 1991</marker>
<rawString>Dymetman, M. 1991. Inherently reversible grammars, logic programming and computability. In Proceedings of the ACL Workshop: Reversible Grammar in Natural Language Processing. Berkeley, CA, pages 20-30.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R M Kaplan</author>
<author>J Bresnan</author>
</authors>
<title>Lexical-Functional Grammar: A formal system for grammatical representation.</title>
<date>1982</date>
<booktitle>The Mental Representation of Grammatical Relations.</booktitle>
<pages>173--281</pages>
<editor>In J. Bresnan, editor,</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA,</location>
<marker>Kaplan, Bresnan, 1982</marker>
<rawString>Kaplan, R. M. and J. Bresnan. 1982. Lexical-Functional Grammar: A formal system for grammatical representation. In J. Bresnan, editor, The Mental Representation of Grammatical Relations. MIT Press, Cambridge, MA, pages 173-281.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Nishino</author>
</authors>
<title>Mathematical analysis of lexical-functional grammars.</title>
<date>1991</date>
<journal>Language Research,</journal>
<volume>27</volume>
<issue>1</issue>
<pages>119--141</pages>
<contexts>
<context position="2730" citStr="Nishino (1991)" startWordPosition="425" endWordPosition="426"> problem to Hilbert&apos;s Tenth Prob* Institute for Natural Language Processing, University of Stuttgart, Azenbergstr. 12, D-70174 Stuttgart, Germany. E-mail: juergen@ims.uni-stuttgart.de (1) SEM C) 1999 Association for Computational Linguistics Computational Linguistics Volume 25, Number 2 tern. Van Noord (1993) provided a proof for PATR-style grammars using a reduction to Post&apos;s Correspondence Problem. Moreover, a reduction to Hilbert&apos;s Tenth Problem was also used by Roach (1983) to show the undecidability of the emptiness problem of lexicalfunctional languages, a result that was later shown by Nishino (1991) using a reduction to Post&apos;s Correspondence Problem. In this brief note, we want to investigate the close relationship between the emptiness problem of lexical-functional and PATR languages and the generation problem in (3). We give a much simpler undecidability proof of the emptiness problem using a reduction to the emptiness problem of the intersection of arbitrary context-free languages, a reduction that Wedekind and Kaplan (1996) used to show the undecidability of ambiguity-preserving generation. The close connection of the problems—already indicated by the fact that their undecidability p</context>
</contexts>
<marker>Nishino, 1991</marker>
<rawString>Nishino, T. 1991. Mathematical analysis of lexical-functional grammars. Language Research, 27(1): 119-141.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Pollard</author>
<author>I Sag</author>
</authors>
<title>Head-Driven Phrase Structure Grammar.</title>
<date>1994</date>
<publisher>The University of Chicago Press,</publisher>
<location>Chicago, IL.</location>
<marker>Pollard, Sag, 1994</marker>
<rawString>Pollard, C. and I. Sag. 1994. Head-Driven Phrase Structure Grammar. The University of Chicago Press, Chicago, IL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Roach</author>
</authors>
<title>LFG languages over a one-letter alphabet. Manuscript, Xerox PARC,</title>
<date>1983</date>
<location>Palo Alto, CA.</location>
<contexts>
<context position="2598" citStr="Roach (1983)" startWordPosition="404" endWordPosition="405">)&apos;. The undecidability of the generation problem in (3) was shown for definite clause grammars by Dymetman (1991), who reduced the problem to Hilbert&apos;s Tenth Prob* Institute for Natural Language Processing, University of Stuttgart, Azenbergstr. 12, D-70174 Stuttgart, Germany. E-mail: juergen@ims.uni-stuttgart.de (1) SEM C) 1999 Association for Computational Linguistics Computational Linguistics Volume 25, Number 2 tern. Van Noord (1993) provided a proof for PATR-style grammars using a reduction to Post&apos;s Correspondence Problem. Moreover, a reduction to Hilbert&apos;s Tenth Problem was also used by Roach (1983) to show the undecidability of the emptiness problem of lexicalfunctional languages, a result that was later shown by Nishino (1991) using a reduction to Post&apos;s Correspondence Problem. In this brief note, we want to investigate the close relationship between the emptiness problem of lexical-functional and PATR languages and the generation problem in (3). We give a much simpler undecidability proof of the emptiness problem using a reduction to the emptiness problem of the intersection of arbitrary context-free languages, a reduction that Wedekind and Kaplan (1996) used to show the undecidabilit</context>
</contexts>
<marker>Roach, 1983</marker>
<rawString>Roach, K. 1983. LFG languages over a one-letter alphabet. Manuscript, Xerox PARC, Palo Alto, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Shieber</author>
<author>H Uszkoreit</author>
<author>F Pereira</author>
<author>J Robinson</author>
<author>M Tyson</author>
</authors>
<title>The formalism and implementation of PATR-II.</title>
<date>1983</date>
<booktitle>Research on Interactive Acquisition and Use of Knowledge. SRI Final Report 1894. SRI International,</booktitle>
<pages>39--79</pages>
<editor>In B. Grosz and M. Stickel, editors,</editor>
<location>Menlo Park, CA,</location>
<marker>Shieber, Uszkoreit, Pereira, Robinson, Tyson, 1983</marker>
<rawString>Shieber, S., H. Uszkoreit, F. Pereira, J. Robinson, and M. Tyson. 1983. The formalism and implementation of PATR-II. In B. Grosz and M. Stickel, editors, Research on Interactive Acquisition and Use of Knowledge. SRI Final Report 1894. SRI International, Menlo Park, CA, pages 39-79.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G van Noord</author>
</authors>
<title>Reversibility in Natural Language Processing.</title>
<date>1993</date>
<tech>Ph.D. thesis,</tech>
<institution>Rijksuniversiteit Utrecht.</institution>
<marker>van Noord, 1993</marker>
<rawString>van Noord, G. 1993. Reversibility in Natural Language Processing. Ph.D. thesis, Rijksuniversiteit Utrecht.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Wedekind</author>
</authors>
<title>Some remarks on the decidability of the generation problem in LFG- and PATR-style unification grammars.</title>
<date>1995</date>
<booktitle>In Proceedings of the 7th Conference of the European Chapter of the Association for Computational Linguistics.</booktitle>
<pages>45--52</pages>
<location>Dublin,</location>
<marker>Wedekind, 1995</marker>
<rawString>Wedekind, J. 1995. Some remarks on the decidability of the generation problem in LFG- and PATR-style unification grammars. In Proceedings of the 7th Conference of the European Chapter of the Association for Computational Linguistics. Dublin, pages 45-52.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Wedekind</author>
<author>R M Kaplan</author>
</authors>
<title>Ambiguity-preserving generation with LFG- and PATR-style grammars.</title>
<date>1996</date>
<journal>Computational Linguistics,</journal>
<volume>22</volume>
<issue>4</issue>
<pages>555--558</pages>
<contexts>
<context position="3167" citStr="Wedekind and Kaplan (1996)" startWordPosition="488" endWordPosition="491"> to Hilbert&apos;s Tenth Problem was also used by Roach (1983) to show the undecidability of the emptiness problem of lexicalfunctional languages, a result that was later shown by Nishino (1991) using a reduction to Post&apos;s Correspondence Problem. In this brief note, we want to investigate the close relationship between the emptiness problem of lexical-functional and PATR languages and the generation problem in (3). We give a much simpler undecidability proof of the emptiness problem using a reduction to the emptiness problem of the intersection of arbitrary context-free languages, a reduction that Wedekind and Kaplan (1996) used to show the undecidability of ambiguity-preserving generation. The close connection of the problems—already indicated by the fact that their undecidability proofs were achieved by the same reductions—results, then, from the fact that the undecidability of the emptiness problem trivially implies the undecidability of semantic-driven generation. This result also applies to other unification-based formalisms such as HPSG, since they are powerful enough to simulate context-free derivations. We begin our construction by defining for each context-free language L a unification grammar that gene</context>
</contexts>
<marker>Wedekind, Kaplan, 1996</marker>
<rawString>Wedekind, J. and R. M. Kaplan. 1996. Ambiguity-preserving generation with LFG- and PATR-style grammars. Computational Linguistics, 22(4): 555-558.</rawString>
</citation>
<citation valid="false">
<title>7 This fact is already illustrated by the languages of the grammars we used in the undecidability proofs; they all have a decidable membership problem, since w E L(G1) n L(G2) is decidable for arbitrary context-free grammars G1 and G2.</title>
<marker></marker>
<rawString>7 This fact is already illustrated by the languages of the grammars we used in the undecidability proofs; they all have a decidable membership problem, since w E L(G1) n L(G2) is decidable for arbitrary context-free grammars G1 and G2.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>