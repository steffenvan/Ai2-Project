<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.416391">
<title confidence="0.914294">
Commentary on Kaplan and Kay
</title>
<author confidence="0.992232">
Mark Liberman&apos;
</author>
<affiliation confidence="0.934664">
(University of Pennsylvania)
</affiliation>
<bodyText confidence="0.999934057142857">
Anyone with a fundamental interest in morphology and phonology, either from a
scientific or a computational perspective, will want to study this long-awaited paper
carefully.
Kaplan and Kay (henceforth K&amp;K) announce two goals: &amp;quot;to provide the core of
a mathematical framework for phonology&amp;quot; and &amp;quot;to establish a solid basis for com-
putation in the domain of phonological and orthographic systems.&amp;quot; They show how
the algebra of regular relations, with their corresponding automata, can be used to
compile systems of phonological rules in the style of SPE, including directionality,
optionality, and ordering. They sketch mechanisms for incorporating a lexicon and
for dealing with exceptional forms, thus providing a complete treatment in a unified
framework.
This accomplishment in itself will not compel the attention of many working pho-
nologists, who have found good reasons to replace the SPE framework (see Kenstowicz
[19941 for a survey of modern practice), and whose efforts since 1975 have been aimed
mainly at finding representational primitives to explain typological generalizations,
support accounts of learning, generalization and change, and provide one end of the
mapping between symbols and speech. In this effort, there has been little emphasis on
SPE&apos;s goal of giving phonological descriptions an algorithmically specified denotation.
Perhaps this paper, despite its superficial lack of connection to contemporary work in
phonology, will set in motion a discussion that will ultimately redress the balance.
On the computational side, practitioners of practical NLP will be happy to make
extensive use of the algebra of regular relations, since it provides a truly elegant
engineering solution to a wide range of problems. However, although direct interpre-
tation of some simple FSTs can be efficient (e.g. Feigenbaum et al. 1991), and although
Koskenniemi has documented efficient implementation techniques for his two-level
systems, the overall architecture presented in this paper is not practically usable as
written, because of either the size of the resulting automata or the time needed for
(unwisely implemented) nondeterminism, or both.
A range of well-known techniques enable programs based on the algebraic com-
bination of (unary) FSAs to make efficient use of both time and space. Although these
methods do not apply to FSTs in general, we may presume that K&amp;K have developed
analogous techniques for the crucial range of cases. With the growing interest in this
technology, we can expect that either K&amp;K will publish their work or others will reca-
pitulate it, so that the algebra of regular relations can take its proper and prominent
place in the toolkit of computational linguistics.
</bodyText>
<sectionHeader confidence="0.983604" genericHeader="abstract">
References
</sectionHeader>
<reference confidence="0.999254625">
Feigenbaum, J.; Liberman, M. Y; and Wright,
R. N. (1991). &amp;quot;Cryptographic protection of
databases and software.&amp;quot; In Distributed
Computing and Cryptography,
edited by J. Feigenbaum and M. Merritt,
161-172. DIMACS Series, AMS and ACM.
Kenstowicz, M. (1994). Phonology in
Generative Grammar. Blackwell.
</reference>
<affiliation confidence="0.499217">
1 University of Pennsylvania, 619 Williams Hall, Philadelphia, PA 19104-6305.
</affiliation>
<page confidence="0.998943">
379
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.230460">
<title confidence="0.998522">Commentary on Kaplan and Kay</title>
<author confidence="0.999993">Mark Liberman&apos;</author>
<affiliation confidence="0.988856">(University of Pennsylvania)</affiliation>
<abstract confidence="0.997222371428572">Anyone with a fundamental interest in morphology and phonology, either from a scientific or a computational perspective, will want to study this long-awaited paper carefully. Kaplan and Kay (henceforth K&amp;K) announce two goals: &amp;quot;to provide the core of a mathematical framework for phonology&amp;quot; and &amp;quot;to establish a solid basis for computation in the domain of phonological and orthographic systems.&amp;quot; They show how the algebra of regular relations, with their corresponding automata, can be used to systems of phonological rules in the style of directionality, optionality, and ordering. They sketch mechanisms for incorporating a lexicon and for dealing with exceptional forms, thus providing a complete treatment in a unified framework. This accomplishment in itself will not compel the attention of many working phowho have found good reasons to replace the (see Kenstowicz [19941 for a survey of modern practice), and whose efforts since 1975 have been aimed mainly at finding representational primitives to explain typological generalizations, support accounts of learning, generalization and change, and provide one end of the mapping between symbols and speech. In this effort, there has been little emphasis on of giving phonological descriptions an algorithmically specified denotation. Perhaps this paper, despite its superficial lack of connection to contemporary work in phonology, will set in motion a discussion that will ultimately redress the balance. On the computational side, practitioners of practical NLP will be happy to make extensive use of the algebra of regular relations, since it provides a truly elegant engineering solution to a wide range of problems. However, although direct interpretation of some simple FSTs can be efficient (e.g. Feigenbaum et al. 1991), and although Koskenniemi has documented efficient implementation techniques for his two-level systems, the overall architecture presented in this paper is not practically usable as written, because of either the size of the resulting automata or the time needed for (unwisely implemented) nondeterminism, or both. A range of well-known techniques enable programs based on the algebraic combination of (unary) FSAs to make efficient use of both time and space. Although these methods do not apply to FSTs in general, we may presume that K&amp;K have developed analogous techniques for the crucial range of cases. With the growing interest in this technology, we can expect that either K&amp;K will publish their work or others will recapitulate it, so that the algebra of regular relations can take its proper and prominent place in the toolkit of computational linguistics.</abstract>
<note confidence="0.723503">References Feigenbaum, J.; Liberman, M. Y; and Wright, R. N. (1991). &amp;quot;Cryptographic protection of and software.&amp;quot; In Computing and Cryptography, edited by J. Feigenbaum and M. Merritt, 161-172. DIMACS Series, AMS and ACM. M. (1994). in Grammar. 1 University of Pennsylvania, 619 Williams Hall, Philadelphia, PA 19104-6305. 379</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>J Feigenbaum</author>
<author>M Y Liberman</author>
<author>R N Wright</author>
</authors>
<title>Cryptographic protection of databases and software.&amp;quot;</title>
<date>1991</date>
<booktitle>In Distributed Computing and Cryptography,</booktitle>
<note>edited by</note>
<contexts>
<context position="1916" citStr="Feigenbaum et al. 1991" startWordPosition="284" endWordPosition="287">effort, there has been little emphasis on SPE&apos;s goal of giving phonological descriptions an algorithmically specified denotation. Perhaps this paper, despite its superficial lack of connection to contemporary work in phonology, will set in motion a discussion that will ultimately redress the balance. On the computational side, practitioners of practical NLP will be happy to make extensive use of the algebra of regular relations, since it provides a truly elegant engineering solution to a wide range of problems. However, although direct interpretation of some simple FSTs can be efficient (e.g. Feigenbaum et al. 1991), and although Koskenniemi has documented efficient implementation techniques for his two-level systems, the overall architecture presented in this paper is not practically usable as written, because of either the size of the resulting automata or the time needed for (unwisely implemented) nondeterminism, or both. A range of well-known techniques enable programs based on the algebraic combination of (unary) FSAs to make efficient use of both time and space. Although these methods do not apply to FSTs in general, we may presume that K&amp;K have developed analogous techniques for the crucial range </context>
</contexts>
<marker>Feigenbaum, Liberman, Wright, 1991</marker>
<rawString>Feigenbaum, J.; Liberman, M. Y; and Wright, R. N. (1991). &amp;quot;Cryptographic protection of databases and software.&amp;quot; In Distributed Computing and Cryptography, edited by J. Feigenbaum and M. Merritt, 161-172. DIMACS Series, AMS and ACM.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Kenstowicz</author>
</authors>
<title>Phonology in Generative Grammar.</title>
<date>1994</date>
<publisher>Blackwell.</publisher>
<marker>Kenstowicz, 1994</marker>
<rawString>Kenstowicz, M. (1994). Phonology in Generative Grammar. Blackwell.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>