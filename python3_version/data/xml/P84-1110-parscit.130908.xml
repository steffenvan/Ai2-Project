<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<note confidence="0.954405">
SEMANTIC PARSING AS GRAPH LANGUAGE TRANSFORMATION -
</note>
<title confidence="0.438401">
A MULTIDIMENSIONAL APPROACH TO PARSING HIGHLY INFLECTIONAL LANGUAGES
</title>
<author confidence="0.565495">
Eero Hyvanen
</author>
<affiliation confidence="0.6465765">
Helsinki University of Technology
Digital Systems Laboratory
</affiliation>
<sectionHeader confidence="0.46633575" genericHeader="abstract">
Dtakaari 5A
021511 Espoo 15
FINLAND
ABSTRACT
</sectionHeader>
<bodyText confidence="0.96384805882353">
The structure of many languages with
&amp;quot;free&amp;quot; word order and rich morphology like
Finnish is rather configurational than
linear. Although non-linear structures
can be represented by linear formalisms it
is often more natural to study
multidimensional arrangement of symbols.
Graph grammars are a multidimensional
generalization of linear string grammars.
In graph grammars string rewrite rules are
generalized into graph rewrite rules.
This paper presents a graph grammar
formalism and parsing scheme for parsing
languages with inherent configurational
flavor. A small experimental Finnish
parsing system has been implemented
(Hyvbnen 1983).
</bodyText>
<sectionHeader confidence="0.9432365" genericHeader="method">
1 A SIMPLE GRAPH GRAMMAR FORMALISM
WITH A CONTROL FACILITY
</sectionHeader>
<bodyText confidence="0.79504775">
In applying string grammars to parsing
natural Finnish several problems arise in
representing complex word structures,
argeements, &amp;quot;free&amp;quot; word ordering,
discontinuity, and intermediate depencies
between morphology, syntax and semantics.
A strong, multidimensional formalism that
can cope with different levels of language
seems necessary. In this chapter a graph
grammar formalism based on the notions of
relational graph grammars (Rajlich 1975)
and attributed programmed graph grammars
(Bunke 1982) is developed for parsing
languages with configurational structure.
Definition 1.1 (relational graph, r-graph)
Let ARCS, NODES, and PROPS be finite sets
of symbols. A relational graph (r-graph)
RG is pair RG = (EDOES, NP) consisting of
a set of edges
EDGES, ARCSxNODESxNODES
</bodyText>
<footnote confidence="0.9077654">
and a function NP that associates each
node in EDGES to a set of labeled
property values:
NP: NODESxPROPS -&gt; PVALUES
PVALUES is the set of possible node
</footnote>
<figureCaption confidence="0.9142195">
property values. They are represented as
sets of symbols or lists.
Example: Figure 1.1 depicts the
morphological r-graph representation of
Finnish word &amp;quot;ihmisten&amp;quot; (the humans&apos;) and
its edges as a list. EXT-property
expresses the set of symbols the node
currently refers to (extension); CAT
tells the syntactico-semantic category of
the node.
</figureCaption>
<figure confidence="0.999147777777778">
Enqam
((NOUN Ni N2)
(CASE Ni N3)
(NR Ni N4)
(PERS Ni N5)
(PS Ni N6)
(EP Ni 117))
EANIHNINEN)
CANSUBST-IHMINEN)
</figure>
<figureCaption confidence="0.997729">
Fig. 1.1. Morphological r-graph
</figureCaption>
<bodyText confidence="0.9305325">
representation of word &amp;quot;ihmisten&amp;quot; (the
humans).
</bodyText>
<equation confidence="0.912816333333333">
Definition 1.2 (r-production)
An r-production RP is a pair:
RP = (LS, RS)
</equation>
<bodyText confidence="0.7201496">
LS (left side) and RS (right side) are
r-graphs. An RP is said to be applicable
to an r-graph G if f EDGESLccEDGESG and the
values in NP,,are subsets 0 corresponding
values in NPGfor each node in LS.
</bodyText>
<subsectionHeader confidence="0.416772">
Definition 1.3 (direct r-derivation)
</subsectionHeader>
<bodyText confidence="0.822068666666667">
The direct r-derivation of r-graph H from
r-graph G via an r-production RP = (LS,
RS) is defined by the following algorithm:
</bodyText>
<footnote confidence="0.6080708">
Algorithm 1.1 (Direct r-derivation)
Input: An r-graph G and
an r-production RP = (LS, RS)
Output: An r-graph H derived via RP
from G
</footnote>
<equation confidence="0.967473076923077">
EAT.(PL)
EXT-(3)
517
PROCEDURE Direct-r-derivation:
BEGIN
IF RP is applicable to G (see text)
THEN
EDGESG := EDGESG - EDGESLS
H := G U RS
RETURN H
ELSE
RETURN &amp;quot;Not applicable&amp;quot;
END
</equation>
<bodyText confidence="0.931074833333333">
is a set of r-graphs.
An r-graph language (RGL) generated by an
r-graph grammar is the set of all
derivable r-graphs from any r-graph in
START by any sequence of applicable
r-productions of PROD:
</bodyText>
<equation confidence="0.968048714285714">
RGL =fR-graphISTART &apos;R-graph
EXT.(PL) PL)
Here 11 is an operation defined for two
r-graphs RG1 and RG2 as follows:
H = RG1 U RG2
iff
EDGESH = EDGESRG1 U EDGESRG2 and
</equation>
<bodyText confidence="0.991202043478261">
NPH(ni, propj) = NP,„(ni, propj) for any
property propj in eMy node ni in RG2.
Time complexity: Direct r-derivations are
essentially set operations and can be
performed efficiently. By using a hash
table the expected time complexity is 0(n)
with respect to the size of the production
(it does not depend on the size of the
object graph). The worst case complexity
is 0(n**2).
Example: Figure 1.2 represents an
r-production and figure 1.3 its
application to an r-graph. We have
designed a meta-production description
facility for r-productions by which
match-predicates can be attached to nodes
and arcs in order to test and modify node
properies. The instantiation of a
meta-production is found
context-dependently while matching the
production left side. It is also possible
to specify some special modifications to
the derivation graph by meta-productions.
</bodyText>
<figureCaption confidence="0.787472">
Fig. 1.2. Production ADJ-ATTR to
</figureCaption>
<table confidence="0.584619777777778">
identify adjective attributes.
Definition 1.4 (r-graph grammar and
r-graph language)
An r-graph grammar (RGG) is a pair:
RGG = (PROD, START)
PROD is a set of r-productions and START
CAT.OUANTIF CAT.ANECilVE CAT.NOUN-PBST
EXT=(&apos;07:-ALL) EXT.031G) EXT.(PACG.
(Node properties as above)
</table>
<figureCaption confidence="0.958542">
Fig. 1.3. The effect of applying
</figureCaption>
<bodyText confidence="0.78285275">
production ADJ-ATTR (fig. 1.2) to an
r-graph.
1.5 (controlled r-graph
A controlled r-graph grammar (CRG) is a
</bodyText>
<equation confidence="0.467971">
pair:
CRG = (CG, RGG)
CG is an r-graph called control graph
</equation>
<bodyText confidence="0.829504153846154">
(c-graph). Its interpretation is defined
very much in the same way as with
ATN-networks. The actions associated to
arcs are direct r-derivations (def. 1.3).
RGG is an r-graph grammar (def. 1.4).
Example: Figure 1.4 illustrates a c-graph
expressing potential attribute
configurations of nouns belonging to
category NOUN-HUMAN. Adjective, pronoun
and genetive attributes and a quantifier
may be identified by corresponding
r-productions (the meaning of (READWOR0)-
and (PUT-LAST)-arcs is not relevant here).
</bodyText>
<figure confidence="0.9423945">
Definition
grammar)
518
SOURCE GRAPH LANGUAGE
GOAL GRAPH LANGUAGE
SEMANTICS
MORPHOLOGY
DERIVATION GRAPH
ERROR1
PUT-LAST) GEN-ATTR?•
ADJ-ATTR
POOR-ATTR
PP (REAORD),0ON-AT TR OUANTir DW
ERROR2
</figure>
<figureCaption confidence="0.868597">
Fig. 1.4. A control graph expressing
attribute configurations of
</figureCaption>
<bodyText confidence="0.919236111111111">
syntactico- semantic word category
NOUN-HUMAN.
Definition 1.6 (Controlled graph language)
A controlled graph language (CGL)
corresponding to a controlled r-graph
grammar CRC = (CG, RGG) is the set of
r-graphs derived by the CG using the start
graphs START and the productions of the
grammar RGG.
</bodyText>
<listItem confidence="0.3047205">
2 A GRAPH GRAMMAR PARSING -SCHEME
2.1 Function and structure
</listItem>
<figureCaption confidence="0.608297">
Figure 2.1 depicts a RGG-based parsing
</figureCaption>
<bodyText confidence="0.948720243243243">
scheme that we have applied to natural
language parsing. Roughly spoken, the
input of the parser, i.e. the set START
of a CRG, is the morphological
representation(s) of a sentence. The
output is a set of corresponding semantic
deep case representations. Parsing is
seen as a multidimensional transformation
between the morphological and semantic
levels of a language. These levels are
seen as graph languages. The parser
essentially defines a &amp;quot;meaning preserving&amp;quot;
mapping from the morphological
representations of a sentence into its
semantic representations. The
transformation is specified by a
controlled r-graph grammar. The control
graph is not predefined but is constructed
dynamically according to the individual
words of the current sentence. During
parsing morphological and semantic
representations are generated in parallel
as words are read from left to right.
2.2 Specification of the morphological
and semantic graph languages
Morphological level. The morphological
representation of a sentence consists of
star-like morphological representations of
the words (fig. 1.1) that are glued
together by sequential &gt;- and &lt;-relations
(fig. 1.3).
Semantic level. The semantic
representatien of a sentence consists of a
semantic deep case structure corresponding
tc the main verb. Deep case constituents
have their own semantic case structures
corresponding to their main words.
</bodyText>
<figureCaption confidence="0.979683">
Fig. 2.1. A parsing scheme for transforming
graph languages.
</figureCaption>
<bodyText confidence="0.946926210526316">
Example: Figure 2.2 illustrates the
semantic representation of question &amp;quot; Kuka
luennoitsija on luennoinut jonkun
seminaarimaisen kurssin
tietojenkasittelyteoriasta syksylla 1981&amp;quot;
(&amp;quot;Which lecturer has lectured some
seminar-type course on computer science in
the autumn 1981).
Fig. 2.2. Semantic graph representation of
a Finnish question. Node properties
are not shown.
2.3 Specification of the graph language
transformation
The transformation is specified by an
agenda of prioritized c-graphs.
Initially, the agenda consists of a set of
sentence independent &amp;quot;transformational&amp;quot;
c-graphs (that, for example, transform
passive clauses into active ones) and
</bodyText>
<figure confidence="0.998021">
Controlled r-graph
grammar
(CRC
\a,
C-GRAPH
mnpramR
C_GRAPP PRODUCTIONS
</figure>
<page confidence="0.996346">
519
</page>
<bodyText confidence="0.999865933333333">
sentence dependent c-graphs corresponding
to the syntactico-semantic categories of
the individual words in the sentence. For
example, the c-graph of fig. 1.4
corresponds to nouns belonging to category
NOUN-HUMAN. It tries to identify semantic
case constituents by the productions
corresponding to the arcs. Fig. 1.2
illustrates the production ADJ-ATTR
(adjective attribute) used in the c-graph
of fig. 1.4. The interpretation of the
production is: If there is an adjective
preceeding a noun in the same case and
number the words are in semantic KIND
relation with each other. As a whole, the
agenda constitutes a modular, sentence
dependent c-graph.
Parsing is performed by interpreting the
agenda. Different strategies could be
applied here; the structure of the
c-graphs depend on the choice. In our
experimental system parsing is performed
by interpreting the first c-graph in the
agenda. The c-graohs are defined in such
way that they intepret each other and glue
morphological representations of words
into the derivation graph (arcs (READWORD)
and (PUTLAST) in fig. 1.4) until a
grammatical semantic representation (or in
ambiguous cases several ones) is reached.
</bodyText>
<subsectionHeader confidence="0.779574">
2.4 Linguistic and computational
</subsectionHeader>
<bodyText confidence="0.996453229166667">
motivations
Most influential linguistic theories and
ideas behind our parser are dependence
grammar, semantic case grammar, and the
notion of &amp;quot;word expert&amp;quot; parsing. The idea
is that the c-graphs of word categories
actively try to find the dependents of the
main words and identify in what semantic
roles they are (cf. the
ADJ-ATTR-production of fig. 1.2). In
some cases it it useful to assign active
role to dependents. The c-graphs serve as
illustrative linguistic descriptions of
the syntactico-semantic features of word
categories and other fenomena.
Computationally, our formalism and parsing
scheme gives high expressive power but its
time complexity is not high. Only
potentially relevant productions are tried
to use during parsing. Graphs are
illustrative and can be used to express
both procedural and declarative knowledge.
New word category models can be added to
the parser rather independently from the
other models.
Our small experimental graph grammar
parser for Finnish (Hyvonen 1983) is still
liguistically quite naive containing some
150 lexical entries, 50 productions, and
50 c-graphs. A larger subset of Finnish
needs to be modelled in order to evaluate
the approach properly. We are currently
developing the graph grammar approch
further by generalizing the formalism into
hierarchic graphs. By this way, for
example, large graph structures could be
manipulated more easily as single entities
and identical structures could have
different interpretations in different
contexts. Also, a more elaborate
coroutine based control structure for
interpreting the c-graphs is under
developement. We feel that the idea of
seeing parsing as a multidimensional
transformation of relational graphs in
stead of as a delinearization process of a
string into a parse tree is worth
investicating further.
</bodyText>
<sectionHeader confidence="0.999886" genericHeader="conclusions">
3 ACKNOWLEDGEMENTS
</sectionHeader>
<reference confidence="0.7979635">
Thanks are due to Rauno Heinonen, Harri
Jappinen, Leo Ojala, Jouko Seppanen and
the personnel of Digital Systems
Laboratory for fruitful discussions.
Finnish Academy, Finnish Cultural
Foundation, Siemens Foundation, and
Technical Foundation of Finland have
supported our work financially.
</reference>
<sectionHeader confidence="0.595998" genericHeader="references">
4 REFERENCES
</sectionHeader>
<bodyText confidence="0.949535923076923">
Bunke H. (1982): Attributed graph
grammars and their application to
schematic diagram interpretation. IEEE
Trans. of pattern analysis and machine
intelligence, No 6, pp. 574-582.
Hyvonen E. (1983): Graph grammar
approach to natural language parsing and
understanding. Proceedings of IJCAI-83,
Karlsruhe.
Rajlich V. (1975): Dynamics of discrete
structures and pattern reproduction.
Journal of computer and system sciences,
No 11, pp. 186-202.
</bodyText>
<page confidence="0.993717">
520
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000003">
<title confidence="0.999607">SEMANTIC PARSING AS GRAPH LANGUAGE TRANSFORMATION - A MULTIDIMENSIONAL APPROACH TO PARSING HIGHLY INFLECTIONAL LANGUAGES</title>
<author confidence="0.998034">Eero Hyvanen</author>
<affiliation confidence="0.999954">Helsinki University of Technology Digital Systems Laboratory</affiliation>
<address confidence="0.801969333333333">Dtakaari 5A 021511 Espoo 15 FINLAND</address>
<abstract confidence="0.997899218181818">The structure of many languages with &amp;quot;free&amp;quot; word order and rich morphology like Finnish is rather configurational than linear. Although non-linear structures can be represented by linear formalisms it is often more natural to study multidimensional arrangement of symbols. Graph grammars are a multidimensional generalization of linear string grammars. In graph grammars string rewrite rules are generalized into graph rewrite rules. This paper presents a graph grammar formalism and parsing scheme for parsing languages with inherent configurational flavor. A small experimental Finnish parsing system has been implemented (Hyvbnen 1983). 1 A SIMPLE GRAPH GRAMMAR FORMALISM WITH A CONTROL FACILITY In applying string grammars to parsing natural Finnish several problems arise in representing complex word structures, argeements, &amp;quot;free&amp;quot; word ordering, discontinuity, and intermediate depencies between morphology, syntax and semantics. A strong, multidimensional formalism that can cope with different levels of language seems necessary. In this chapter a graph grammar formalism based on the notions of relational graph grammars (Rajlich 1975) and attributed programmed graph grammars (Bunke 1982) is developed for parsing languages with configurational structure. Definition 1.1 (relational graph, r-graph) Let ARCS, NODES, and PROPS be finite sets of symbols. A relational graph (r-graph) RG is pair RG = (EDOES, NP) consisting of a set of edges ARCSxNODESxNODES and a function NP that associates each node in EDGES to a set of labeled property values: NP: NODESxPROPS -&gt; PVALUES the set of possible node property values. They are represented as sets of symbols or lists. Figure 1.1 the morphological r-graph representation of Finnish word &amp;quot;ihmisten&amp;quot; (the humans&apos;) and its edges as a list. EXT-property expresses the set of symbols the node currently refers to (extension); CAT tells the syntactico-semantic category of the node.</abstract>
<note confidence="0.820219888888889">Enqam ((NOUN Ni N2) (CASE Ni N3) (NR Ni N4) (PERS Ni N5) (PS Ni N6) (EP Ni 117)) EANIHNINEN) CANSUBST-IHMINEN</note>
<abstract confidence="0.935119418518518">Fig. 1.1. Morphological r-graph representation of word &amp;quot;ihmisten&amp;quot; (the humans). Definition 1.2 (r-production) An r-production RP is a pair: RP = (LS, RS) LS (left side) and RS (right side) are r-graphs. An RP is said to be applicable an r-graph G if f and the values in NP,,are subsets 0 corresponding in each node in LS. Definition 1.3 (direct r-derivation) The direct r-derivation of r-graph H from r-graph G via an r-production RP = (LS, RS) is defined by the following algorithm: Algorithm 1.1 (Direct r-derivation) Input: An r-graph G and r-production = (LS, RS) An r-graph H derived via from G EAT.(PL) EXT-(3) 517 PROCEDURE Direct-r-derivation: BEGIN IF RP is applicable to G (see text) THEN H := G U RS RETURN H ELSE RETURN &amp;quot;Not applicable&amp;quot; END is a set of r-graphs. An r-graph language (RGL) generated by an r-graph grammar is the set of all derivable r-graphs from any r-graph in START by any sequence of applicable r-productions of PROD: RGL =fR-graphISTART &apos;R-graph EXT.(PL) PL) Here 11 is an operation defined for two r-graphs RG1 and RG2 as follows: H = RG1 U RG2 iff U propj) = NP,„(ni, propj) for any property propj in eMy node ni in RG2. Time complexity: Direct r-derivations are essentially set operations and can be performed efficiently. By using a hash table the expected time complexity is 0(n) with respect to the size of the production (it does not depend on the size of the object graph). The worst case complexity is 0(n**2). Example: Figure 1.2 represents an r-production and figure 1.3 its application to an r-graph. We have designed a meta-production description facility for r-productions by which match-predicates can be attached to nodes and arcs in order to test and modify node properies. The instantiation of a meta-production is found context-dependently while matching the production left side. It is also possible to specify some special modifications to the derivation graph by meta-productions. Fig. 1.2. Production ADJ-ATTR to identify adjective attributes. Definition 1.4 (r-graph grammar and r-graph language) An r-graph grammar (RGG) is a pair: RGG = (PROD, START) PROD is a set of r-productions and START CAT.OUANTIF CAT.ANECilVE CAT.NOUN-PBST EXT.(PACG. EXT=(&apos;07:-ALL) EXT.031G) (Node properties as above) Fig. 1.3. The effect of applying production ADJ-ATTR (fig. 1.2) to an r-graph. 1.5 (controlled r-graph A controlled r-graph grammar (CRG) is a pair: CRG = (CG, RGG) CG is an r-graph called control graph (c-graph). Its interpretation is defined very much in the same way as with ATN-networks. The actions associated to arcs are direct r-derivations (def. 1.3). RGG is an r-graph grammar (def. 1.4). Example: Figure 1.4 illustrates a c-graph expressing potential attribute configurations of nouns belonging to category NOUN-HUMAN. Adjective, pronoun and genetive attributes and a quantifier may be identified by corresponding (the meaning of and (PUT-LAST)-arcs is not relevant here). Definition grammar) 518 SOURCE GRAPH LANGUAGE GOAL GRAPH LANGUAGE SEMANTICS MORPHOLOGY DERIVATION GRAPH ERROR1 ADJ-ATTR POOR-ATTR TROUANTir DW ERROR2 Fig. 1.4. A control graph expressing attribute configurations of syntacticosemantic word category NOUN-HUMAN. Definition 1.6 (Controlled graph language) A controlled graph language (CGL) corresponding to a controlled r-graph grammar CRC = (CG, RGG) is the set of r-graphs derived by the CG using the start graphs START and the productions of the grammar RGG. 2 A GRAPH GRAMMAR PARSING -SCHEME 2.1 Function and structure Figure 2.1 depicts a RGG-based parsing scheme that we have applied to natural language parsing. Roughly spoken, the input of the parser, i.e. the set START of a CRG, is the morphological representation(s) of a sentence. The output is a set of corresponding semantic deep case representations. Parsing is seen as a multidimensional transformation between the morphological and semantic levels of a language. These levels are seen as graph languages. The parser essentially defines a &amp;quot;meaning preserving&amp;quot; mapping from the morphological representations of a sentence into its semantic representations. The transformation is specified by a controlled r-graph grammar. The control graph is not predefined but is constructed dynamically according to the individual words of the current sentence. During parsing morphological and semantic representations are generated in parallel as words are read from left to right. 2.2 Specification of the morphological and semantic graph languages Morphological level. The morphological representation of a sentence consists of star-like morphological representations of the words (fig. 1.1) that are glued together by sequential &gt;and &lt;-relations (fig. 1.3). Semantic level. The semantic representatien of a sentence consists of a semantic deep case structure corresponding main verb. Deep case constituents have their own semantic case structures corresponding to their main words. Fig. 2.1. A parsing scheme for transforming graph languages. Example: Figure 2.2 illustrates the semantic representation of question &amp;quot; Kuka luennoitsija on luennoinut jonkun seminaarimaisen kurssin tietojenkasittelyteoriasta syksylla 1981&amp;quot; (&amp;quot;Which lecturer has lectured some seminar-type course on computer science in the autumn 1981). Fig. 2.2. Semantic graph representation of a Finnish question. Node properties are not shown. 2.3 Specification of the graph language transformation The transformation is specified by an agenda of prioritized c-graphs. Initially, the agenda consists of a set of sentence independent &amp;quot;transformational&amp;quot; c-graphs (that, for example, transform passive clauses into active ones) and Controlled r-graph grammar (CRC C-GRAPH mnpramR C_GRAPP PRODUCTIONS 519 sentence dependent c-graphs corresponding to the syntactico-semantic categories of the individual words in the sentence. For example, the c-graph of fig. 1.4 corresponds to nouns belonging to category NOUN-HUMAN. It tries to identify semantic case constituents by the productions corresponding to the arcs. Fig. 1.2 illustrates the production ADJ-ATTR (adjective attribute) used in the c-graph of fig. 1.4. The interpretation of the production is: If there is an adjective preceeding a noun in the same case and number the words are in semantic KIND relation with each other. As a whole, the agenda constitutes a modular, sentence dependent c-graph. Parsing is performed by interpreting the agenda. Different strategies could be applied here; the structure of the c-graphs depend on the choice. In our experimental system parsing is performed by interpreting the first c-graph in the agenda. The c-graohs are defined in such way that they intepret each other and glue morphological representations of words into the derivation graph (arcs (READWORD) and (PUTLAST) in fig. 1.4) until a grammatical semantic representation (or in ambiguous cases several ones) is reached. 2.4 Linguistic and computational motivations Most influential linguistic theories and ideas behind our parser are dependence grammar, semantic case grammar, and the notion of &amp;quot;word expert&amp;quot; parsing. The idea is that the c-graphs of word categories actively try to find the dependents of the main words and identify in what semantic roles they are (cf. the ADJ-ATTR-production of fig. 1.2). In some cases it it useful to assign active role to dependents. The c-graphs serve as illustrative linguistic descriptions of the syntactico-semantic features of word categories and other fenomena. Computationally, our formalism and parsing scheme gives high expressive power but its time complexity is not high. Only potentially relevant productions are tried to use during parsing. Graphs are illustrative and can be used to express both procedural and declarative knowledge. New word category models can be added to the parser rather independently from the other models. Our small experimental graph grammar parser for Finnish (Hyvonen 1983) is still liguistically quite naive containing some 150 lexical entries, 50 productions, and 50 c-graphs. A larger subset of Finnish needs to be modelled in order to evaluate the approach properly. We are currently developing the graph grammar approch further by generalizing the formalism into hierarchic graphs. By this way, for example, large graph structures could be manipulated more easily as single entities and identical structures could have different interpretations in different contexts. Also, a more elaborate coroutine based control structure for interpreting the c-graphs is under developement. We feel that the idea of seeing parsing as a multidimensional transformation of relational graphs in stead of as a delinearization process of a string into a parse tree is worth investicating further.</abstract>
<note confidence="0.857173">3 ACKNOWLEDGEMENTS Thanks are due to Rauno Heinonen, Harri Jappinen, Leo Ojala, Jouko Seppanen and the personnel of Digital Systems Laboratory for fruitful discussions. Finnish Academy, Finnish Cultural Foundation, Siemens Foundation, and Technical Foundation of Finland have supported our work financially. 4 REFERENCES Bunke H. (1982): Attributed graph</note>
<abstract confidence="0.9108658">grammars and their application to schematic diagram interpretation. IEEE Trans. of pattern analysis and machine intelligence, No 6, pp. 574-582. Hyvonen E. (1983): Graph grammar approach to natural language parsing and understanding. Proceedings of IJCAI-83, Karlsruhe. Rajlich V. (1975): Dynamics of discrete structures and pattern reproduction.</abstract>
<note confidence="0.696870666666667">Journal of computer and system sciences, No 11, pp. 186-202. 520</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>Thanks are due to Rauno Heinonen, Harri Jappinen, Leo Ojala, Jouko Seppanen and the personnel of Digital Systems Laboratory for fruitful discussions. Finnish Academy, Finnish Cultural Foundation, Siemens Foundation, and Technical Foundation of Finland have supported our work financially.</title>
<marker></marker>
<rawString>Thanks are due to Rauno Heinonen, Harri Jappinen, Leo Ojala, Jouko Seppanen and the personnel of Digital Systems Laboratory for fruitful discussions. Finnish Academy, Finnish Cultural Foundation, Siemens Foundation, and Technical Foundation of Finland have supported our work financially.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>