<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000224">
<note confidence="0.25409">
Book Reviews
</note>
<title confidence="0.68681">
Computational Linguistics and Formal Semantics
</title>
<note confidence="0.93933">
Michael Rosner and Roderick Johnson (editors)
(IDSIA)
</note>
<table confidence="0.271980428571429">
Cambridge, England: Cambridge
University Press (Studies in Natural
Language Processing, edited by
Branimir K. Boguraev), 1992,
xix+321 pp.
Hardbound, ISBN 0-521-41959-X,
$74.95; Paperbound, ISBN
</table>
<figure confidence="0.829117666666667">
0-521-42988-9, $24.95
Reviewed by
John Nerbonne
</figure>
<affiliation confidence="0.47461">
University of Groningen
</affiliation>
<bodyText confidence="0.999652266666667">
This is a collection of excellent papers from a workshop, chaired by the editors, held in
Lugano at IDSIA, an institute of the DaIle Molle Foundation. I believe the workshop
was held in September 1988, but the book is not explicit.
The &amp;quot;formal semantics&amp;quot; (FS) of the title refers to the theories of NL meaning
derived from model theory and in standard use in theoretical linguistics. The title
(and the preface) suggest a thematic cohesion among papers that is actually lacking.
Only some of the papers actually focus on relating FS to computational linguistics.
There are honorable exceptions, however (which this review pays the most attention
to), and the papers are generally of excellent quality, but on computational linguistics
or formal semantics.
&amp;quot;Unification&amp;quot; by Martin Kay is a lucid introduction to feature-based linguistic de-
scription, with Prolog examples included. It is additionally interesting for Kay&apos;s history
of unification-based theories, which he traces not to the use of feature-based linguistic
theories but rather to the difficulties of using a single grammatical specification for
parsing and generation in ATNs.
&amp;quot;Representations and Interpretations&amp;quot; by Jens Erik Fenstad, Tore Langholm, and
Espen Vestre is best read as two papers. There is first a 40-page overview of the math-
ematics of feature structures (graphs), feature description languages (terms), and the
attempt to find canonical data structures for these that allow the definition of efficient
algorithms. This half of the paper is marred by incoherence in the only complicated
example (2.48-49 on p. 52), but it is one of the best articles at an accessible level on this
still very current topic. An updated version with discussion of typed theories would
be welcome.
The second half of Fenstad et al.&apos;s paper is a 24-page development of situation
semantics. It first introduces a proof theory for a situation-theoretic logic using a
generalization of a Gentzen calculus (needed to deal with strong and weak negation
simultaneously). The theorem prover is put to use in a question-answering system, but
the report on the nonsemantic details of the system (morphology, parser, generator)
unfortunately leaves little room for the development of a number of intriguing points
on the potential and implementation of situation theory for computational semantics.
</bodyText>
<page confidence="0.994568">
131
</page>
<note confidence="0.565399">
Computational Linguistics Volume 20, Number 1
</note>
<bodyText confidence="0.999613862745098">
These concern the Prolog implementation of partial logics, the treatment of quantifiers
and questions, and how complete and partial information may be integrated.
Perhaps the most interesting suggestion here is that situation theory could provide
an improved characterization of pragmatic notions such as relevance and informative-
ness. It might have enhanced the programmatic goals of this book (delineating the
division of labor between linguistics and artificial intelligence; see below) if Fenstad
et al. had elaborated on such points, since they potentially bear on the question of
where labor is to be divided. Fenstad et al.&apos;s ideas clearly come from linguistics and
they clearly encroach on the usual border, i.e., the one that charges linguistics with
specifying conventional content and AT with interpreting it (see below for further
discussion).
&amp;quot;Syntactic Categories and Semantic Type&amp;quot; by Barbara H. Partee, advances the
argument that the strict typing commonly found in Montague grammar must be re-
laxed to admit polymorphism. Partee first demonstrates that the typing postulated
for transitive verbs must be modified in order to account for the truth conditions of
conjoined transitive verbs, and proceeds to note that this leaves conjunctions of unlike-
typed verbs unexplained. This motivates a very general account of (infinite) semantic
polymorphism and some remarks about how to control the process, postulating the
minimally required types.
&amp;quot;Fine Structure in Categorial Semantics,&amp;quot; by Johan van Benthem, begins from the
overly general account in categorial grammar and asks how restrictions might be
mathematically interesting and linguistically motivated. He leaves the impression that
the mathematicians have anticipated many of the linguistic questions—and that little
new mathematics is required to model NL phenomena.
&amp;quot;Properties, Propositions and Semantic Theory,&amp;quot; by Raymond Turner, is a tutorial
on property theory that postulates that properties are primitive individuals rather
than defined entities (defined by extension or intension). The ideas are motivated
both by the need to make finer-grained distinctions than is possible in possible worlds
semantics and also by cardinality paradoxes that arise on views where properties are
defined as sets of individuals (relative to possible worlds).
&amp;quot;Algorithms for Semantic Interpretation,&amp;quot; by Per-Kristian Halvorsen, is a brief
overview explaining the use of feature formalisms for semantic interpretation—espec-
ially the relaxation of compositionality and the exploitation of semantic underspecifi-
cation.
A further attractive practical aspect of Halvorsen&apos;s work (shared by Fenstad et al.
and Rupp et al.) is the fact that their semantic representations are written in the same
formalism as their syntax. As anyone with experience in practical development knows,
one of the most time-consuming problems in system maintenance is the existence of
multiple representational systems, which inevitably mean varied data structures, more
interfaces, complexity of interaction, decreased modifiability, and increased training
times for new users. All of these problems increase when the different representational
systems do not have entirely well-defined domains—when, for example, there are
different lexical, syntactic, and semantic representations and where there are competing
accounts of a given phenomenon, something that is not uncommon. The feature-based
formulations manipulate syntax and semantics in exactly the same way, eliminating
these difficulties.
&amp;quot;Situation Schemata and Linguistic Representation&amp;quot; by C. J. Rupp, Roderick John-
son, and Michael Rosner, is an excellent companion piece to Halvorsen&apos;s. They discuss
the feature formalism as a metalanguage for interpretation, further emphasizing its dif-
ference from the Montague grammar approach, and they provide a very useful illus-
tration of the techniques in a fragment used in a prototype for machine translation. The
</bodyText>
<page confidence="0.987795">
132
</page>
<subsectionHeader confidence="0.46617">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.988879142857143">
metalanguage view makes it clear that the approach comes at the cost of some indirec-
tion, but Rupp et al. find engineering reasons for preferring the approach—essentially,
it insulates some parts of the system from changes in others.
&amp;quot;Application-Oriented Computational Semantics,&amp;quot; by Sergei Nirenburg and Chris-
tine Defrise, is a further view from the perspective of machine translation, which, next
to natural language understanding, is probably the most important application of
computational semantics. But Nirenburg and Defrise are attempting to bring FS to
bear not in prototypes but in genuine applications, so their perspective is new. They
catalogue a number of interpretation problems in enough detail to sober any overzeal-
ous hopes that all-encompassing solutions to applications problems are likely to come
from FS, and they emphasize their own pragmatic openness to solutions from any
provenance. They see FS as the supplier of &amp;quot;microtheories&amp;quot; for areas such as tense or
quantification. This is all encouraging coming from an applications group (at CMU
and Brussels). But the system they sketch in the body of the paper appears ill-suited
to the accommodation of resources from linguistic semantics. The representation lan-
guage, in particular, is a mixture of so many levels that one would despair of defining
a consequence relation, syntactic or semantic, on it. A comparison to the papers by
Fenstad et al., Halvorsen, and Rupp et al. suggests that these papers, in adapting the
feature language of syntactic description to semantic purposes, have a better design
for &amp;quot;NL in the large.&amp;quot;
&amp;quot;Form and Content in Semantics,&amp;quot; by Yorick Wilks, assesses the role of FS in
computational semantics most directly and most negatively. The contribution is an
imaginative (and at times entertaining) reconstruction of debates on the role of logic
in AT with appropriate morals drawn about the superiority of commonsense semantics
(CSS) over FS for NLP. A sample:
[...I recent discussions in Al concerned with inheritance systems, in
particular, tend to confirm my hunch on this issue, in that the most
useful ones at the moment, such as Touretsky&apos;s [sic], are CSS systems,
and attempts to formalize systems fully has made them intractable.
(p. 263)
But Touretzky&apos;s contribution (Touretzky 1986) was exactly the formalization of inheri-
tance as originally used in Fahlman&apos;s NETL! It indeed turned up inconsistencies (and
proposed remedies), but in general the work might be taken as a paradigm of how
formal theory and practical application cooperate to mutual benefit (see Thomason
[1992] for a history of this effort). Wilks&apos;s last aside, about formalization degrading
performance, makes as much sense as criticism ruining art. Formalization clarifies
what a system does, but has no effect on its algorithmic complexities.
Wilks spends two pages misrepresenting FS as offering nothing but &amp;quot;symbol-to-
symbol transformations,&amp;quot; whereas its actual task is to relate symbols to mathematical
structures, for example, propositional logic expressions to the elements of a Boolean
algebra, lambda calculus expressions to functions of various types, and so on. FS does
this in order to characterize the relation of logical consequence. Its practical utility
lies in defining a consequence relation that we might otherwise intuit broadly but fail
to define precisely. And a well-defined consequence relation is useful if you wish to
build systems that infer.
But Wilks misses this point, goes on to conflate decidability and definability
(p. 265), savage the issue of scope ambiguity (whose existence he seems to deny,
p. 266), and then heap abuse on McDermott, apparently for agreeing with him too
unenthusiastically. It is all written in a wide-ranging and pleasantly flippant style,
</bodyText>
<page confidence="0.992253">
133
</page>
<figure confidence="0.332456">
Computational Linguistics Volume 20, Number 1
</figure>
<figureCaption confidence="0.3277305">
and, if it were only about someone else&apos;s field, one might enjoy reading it in the New
York Review of Books.
</figureCaption>
<bodyText confidence="0.99982487755102">
But the paper also asks the wrong questions. Wilks lists application areas to which
he would like to apply semantics (p. 263); these include &amp;quot;large-scale&amp;quot; lexical ambigu-
ity and problems &amp;quot;collected around the notions of expertise, plans, intentions, [and]
goals&amp;quot; (among others). It is clear that FS alone is hopelessly insufficient in dealing
with these (but still necessary for many, since it best provides the meaning of NL
expressions about these matters). The lack of complete solutions is beside the point,
however. We don&apos;t dismiss theories because of areas to which they do not apply. FS is
valuable because of the areas to which it does apply: it has produced treatments of NL
conjunction, negation, quantification, anaphora, temporal and locative reference, col-
lective and distributive predication, mass terms, comparatives, presupposition, focus,
and the syntax/semantics interface. Even where they are incomplete (e.g., anaphora
resolution is never sufficiently treated by purely logical means), these treatments de-
liver constraints inaccessible to alternative approaches. Wilks&apos;s advocacy of CSS instead
of FS might be tested against these phenomena—the proper areas of application for FS.
Although Wilks recommends CSS as a semantic theory at the beginning of his es-
say, his contribution closes with an admonition to get back to programming in order to
derive NL semantic theory from successful programs ca la Scott–Strachey &amp;quot;denotational
semantics&amp;quot;), but one might hope that theory would inform practice, and not merely
legitimize it retrospectively. Wilks&apos;s reminder that application is important is certainly
a propos in discussing computational semantics. But we should not be trapped into a
false dichotomy between theory and practice.
&amp;quot;Epilogue: On the Relation between Computational Linguistics and Formal Se-
mantics,&amp;quot; by Margaret King, warns us from facile formulations of the issues separat-
ing AT and linguistics views of semantics and closes the book with a reminder from
Pollard and Sag (1987) that debates about relative superiority of two approaches may
be infected by the different perspectives being taken.
So where is computational semantics if this book may be taken as indicative?
In their preface, Rosner and Johnson explain that the workshop was part of a
project with the aim of promoting more &amp;quot;constructive interaction&amp;quot; between computa-
tional linguistics and artificial intelligence. FS may play the role of an intermediary
here, it is suggested, defining meaning representations and suggesting canonical in-
terpretations. The task of relating representations to syntactic expression would then
fall to CL, and that of interpreting representations in a larger context of use and com-
munication to Al.
This view of computational semantics is of course standard in much earlier, very
well respected work, e.g., that of Scha (1976), Hobbs and Rosenschein (1978), Gawron
et al. (1982), Schubert and Pelletier (1982), Halvorsen (1983), or Hirst (1987). It would
nonetheless be useful to see its consequences systematically developed and elaborated
on—after all, a great deal of work, practical and theoretical, depends on it, but that
will await another book.
It makes as much good sense to exploit the results of linguistic research in seman-
tics as it does in syntax or morphology—more so, perhaps, given the rather higher
standards of precision of semanticists. But linguistic semantics does not furnish a
characterization of the interpretation of utterances in use, which is what one finally
needs for natural language understanding applications—rather, it (mostly) provides
a characterization of conventional content, that part of meaning determined by linguis-
tic form. Interpretation is not determined by form, however, nor by its derivative
content. In order to interpret correctly, one must exploit further knowledge sources
and processes that are not studied linguistically and probably are not linguistic at all:
</bodyText>
<page confidence="0.996225">
134
</page>
<subsectionHeader confidence="0.92774">
Book Reviews
</subsectionHeader>
<bodyText confidence="0.999977529411765">
domain knowledge, common sense, communicative purpose, extralinguistic tasks, as-
sumptions of interlocutors about each other. AT probably has the best theories about
how to make sense of this, and certainly the best theories about how to make sense of
it computationally (but see Partee&apos;s contribution for references to linguistic work on
context change potential in dynamic logic and discourse representation theory).
So the division of labor looks like it makes sense. Then why aren&apos;t we understand-
ing better?
There are difficulties on both sides, but this is a book on FS, so let&apos;s concentrate on
that. Here we see a fundamental equivocation in using the word theory as in &apos;applying
semantic theory,&apos; and sensitivity to it leads to an appreciation of the greatest difficulty
in applying FS in practical systems. This is the equivocation between &apos;an abstract
study&apos; and &apos;a complete account.&apos; FS provides a theory of NL meaning only in the first
sense. In the second sense, it might be regarded as a theory in statu nascendi, but it
is not a closed body of doctrine. There are innumerable areas (types of lexical items,
grammatical structures, contextual dependence) where it has not been developed or
at best has only been addressed in a single article or thesis. There are even more areas
where no consensus exists.
The areas of linguistic theory that have been most enthusiastically accepted in
CL (e.g., GPSG) have been unusual not only in their computational properties but
also in their willingness to provide extended and detailed analyses of substantial NL
fragments. While early Montague grammar attempted comprehensive fragments, more
recent linguistic semantics has not, and this makes it harder to apply.
If FS had very comprehensive and detailed theories of NL meaning, the only issue
for most pragmatically oriented systems builders would be how and not whether to
use them. (Conversely, if we had excellent working systems based on AT principles,
formal semanticists would wish to study them on their own terms.) In the current
situation, computational linguists who wish to apply FS will have to work in it to
some extent. This can be fruitful for theory as well as practice, but it slows things
down.
There can be substantive debate about how best to integrate the linguistic and
nonlinguistic tasks in NLU, but it is unproductive to characterize the issue as a sim-
ple choice between AT or linguistic views. There is something of a consensus along
the lines sketched by Rosner and Johnson, but the contemporary consensus is also
noteworthy for its silence about the actual computation with semantics: it is one thing
to map a syntactic form to (or from) a meaning representation, and quite another to
characterize and control the processes of inference that one may need. There are fur-
ther important issues almost never raised. What kinds of inference do we need for the
semantic tasks of NLU? How sensible is the difference in methodologies between the
CL and AT camps: if the CL/AI arrangement entails handing a carefully derived logi-
cal characterization of meaning over to a marker-passing algorithm whose properties
are logically opaque, how much sense does it really make? (I am aware that &apos;neater&apos;
alternatives are available, but the situation is not uncommon that logical representa-
tions are massaged by very &apos;scruffy&apos; techniques.) Can one usefully characterize the
expressive capacity of a domain of discourse—say, that needed to obtain schedule in-
formation for trains or planes—and thus restrain overly sensitive linguistic semantics
in a principled way?
There are linguistic and cognitive motivations for pursuing semantics computa-
tionally, since both linguistics and cognitive science benefit from the exact modeling
possible using computers. And there is the practical motivation of wanting successful
NLU systems. All of these purposes might be enhanced by further attention to the
issues raised by Rosner and Johnson.
</bodyText>
<page confidence="0.995748">
135
</page>
<note confidence="0.800793">
Computational Linguistics Volume 20, Number 1
</note>
<bodyText confidence="0.999096333333333">
The book lacks an index, although one is promised in the table of contents, but is
otherwise competently produced. The overall high quality of the contributions should
make it valuable to all computational linguists interested in semantics.
</bodyText>
<sectionHeader confidence="0.878159" genericHeader="abstract">
References
</sectionHeader>
<reference confidence="0.999559266666667">
Gawron, Jean Mark; King, Jonathan J.;
Lamping, John; Loebner, Egon E.; Paulson,
Elizabeth Anne; Pullum, Geoffrey K.; Sag,
Ivan A.; and Wasow, Thomas A. (1982).
&amp;quot;Processing English with a generalized
phrase structure grammar.&amp;quot; In Proceedings,
20th Annual Meeting of the Association for
Computational Linguistics, 74-81, Toronto.
Halvorsen, Per-Kristian (1983). &amp;quot;Semantics
for lexical-functional grammar.&amp;quot; Linguistic
Inquiry, 14(4), 567-615.
Hirst, Graeme (1987). Semantic Interpretation
and the Resolution of Ambiguity. Cambridge
University Press.
Hobbs, Jerry, and Rosenschein, Stanley
(1978). &amp;quot;Making computational sense of
Montague&apos;s intensional logic.&amp;quot; Artificial
Intelligence, 9(3), 287-306.
Pollard, Carl, and Sag, Ivan A. (1987).
Information-Based Syntax and Semantics,
Volume I. Stanford: Center for the Study
of Language and Information.
Scha, Remko (1976). &amp;quot;Semantic types in
PHLIQA1.&amp;quot; In Preprints, 6th International
Conference on Computational Linguistics
(COLING-76), Ottawa.
Schubert, Lenhart K., and Pelletier, Francis
Jeffry (1982). &amp;quot;From English to logic:
Context-free computation of
&apos;conventional&apos; logic translation.&amp;quot; American
Journal of Computational Linguistics, 8(1),
27-44.
Thomason, Richmond (1992). &amp;quot;NETL and
subsequent path-based inheritance
theory.&amp;quot; Computers and Mathematics with
Applications, 23,179-204. Reprinted in
Semantic Networks in Artificial Intelligence,
edited by Fritz Lehmann. Pergamon Press.
Touretzky, David (1986). The Mathematics of
Inheritance Systems. Morgan Kaufmann.
John Nerbonne has written on semantics in constraint-based theories (HPSG) and is the co-
developer (with Joachim Laubsch) of ACCL, a software package for semantic representation, syn-
tax/semantics interfaces, and interfacing to NLU applications. His address is alfa-informatica,
P.O. Box 716, Oude Kijk in &apos;t Jatstraat, Rijksuniversiteit Groningen, NL 9700 AS Groningen, The
Netherlands; e-mail: nerbonne@letsug.nl.
</reference>
<page confidence="0.998799">
136
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.403147">
<title confidence="0.9915795">Book Reviews Computational Linguistics and Formal Semantics</title>
<author confidence="0.99933">Michael Rosner</author>
<author confidence="0.99933">Roderick Johnson</author>
<affiliation confidence="0.9007">(IDSIA)</affiliation>
<address confidence="0.973241">Cambridge, England: Cambridge</address>
<note confidence="0.958983125">University Press (Studies in Natural Language Processing, edited by Branimir K. Boguraev), 1992, xix+321 pp. Hardbound, ISBN 0-521-41959-X, $74.95; Paperbound, ISBN 0-521-42988-9, $24.95 Reviewed by</note>
<author confidence="0.997005">John Nerbonne</author>
<affiliation confidence="0.987586">University of Groningen</affiliation>
<abstract confidence="0.9276687">This is a collection of excellent papers from a workshop, chaired by the editors, held in Lugano at IDSIA, an institute of the DaIle Molle Foundation. I believe the workshop was held in September 1988, but the book is not explicit. The &amp;quot;formal semantics&amp;quot; (FS) of the title refers to the theories of NL meaning derived from model theory and in standard use in theoretical linguistics. The title (and the preface) suggest a thematic cohesion among papers that is actually lacking. Only some of the papers actually focus on relating FS to computational linguistics. There are honorable exceptions, however (which this review pays the most attention to), and the papers are generally of excellent quality, but on computational linguistics semantics.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Jean Mark Gawron</author>
<author>Jonathan J King</author>
<author>John Lamping</author>
<author>Egon E Loebner</author>
<author>Elizabeth Anne Paulson</author>
<author>Geoffrey K Pullum</author>
<author>Ivan A Sag</author>
<author>Thomas A Wasow</author>
</authors>
<title>Processing English with a generalized phrase structure grammar.&amp;quot;</title>
<date>1982</date>
<booktitle>In Proceedings, 20th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>74--81</pages>
<location>Toronto.</location>
<contexts>
<context position="13592" citStr="Gawron et al. (1982)" startWordPosition="2046" endWordPosition="2049">ject with the aim of promoting more &amp;quot;constructive interaction&amp;quot; between computational linguistics and artificial intelligence. FS may play the role of an intermediary here, it is suggested, defining meaning representations and suggesting canonical interpretations. The task of relating representations to syntactic expression would then fall to CL, and that of interpreting representations in a larger context of use and communication to Al. This view of computational semantics is of course standard in much earlier, very well respected work, e.g., that of Scha (1976), Hobbs and Rosenschein (1978), Gawron et al. (1982), Schubert and Pelletier (1982), Halvorsen (1983), or Hirst (1987). It would nonetheless be useful to see its consequences systematically developed and elaborated on—after all, a great deal of work, practical and theoretical, depends on it, but that will await another book. It makes as much good sense to exploit the results of linguistic research in semantics as it does in syntax or morphology—more so, perhaps, given the rather higher standards of precision of semanticists. But linguistic semantics does not furnish a characterization of the interpretation of utterances in use, which is what on</context>
</contexts>
<marker>Gawron, King, Lamping, Loebner, Paulson, Pullum, Sag, Wasow, 1982</marker>
<rawString>Gawron, Jean Mark; King, Jonathan J.; Lamping, John; Loebner, Egon E.; Paulson, Elizabeth Anne; Pullum, Geoffrey K.; Sag, Ivan A.; and Wasow, Thomas A. (1982). &amp;quot;Processing English with a generalized phrase structure grammar.&amp;quot; In Proceedings, 20th Annual Meeting of the Association for Computational Linguistics, 74-81, Toronto.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Per-Kristian Halvorsen</author>
</authors>
<title>Semantics for lexical-functional grammar.&amp;quot;</title>
<date>1983</date>
<journal>Linguistic Inquiry,</journal>
<volume>14</volume>
<issue>4</issue>
<pages>567--615</pages>
<contexts>
<context position="13641" citStr="Halvorsen (1983)" startWordPosition="2054" endWordPosition="2055">eraction&amp;quot; between computational linguistics and artificial intelligence. FS may play the role of an intermediary here, it is suggested, defining meaning representations and suggesting canonical interpretations. The task of relating representations to syntactic expression would then fall to CL, and that of interpreting representations in a larger context of use and communication to Al. This view of computational semantics is of course standard in much earlier, very well respected work, e.g., that of Scha (1976), Hobbs and Rosenschein (1978), Gawron et al. (1982), Schubert and Pelletier (1982), Halvorsen (1983), or Hirst (1987). It would nonetheless be useful to see its consequences systematically developed and elaborated on—after all, a great deal of work, practical and theoretical, depends on it, but that will await another book. It makes as much good sense to exploit the results of linguistic research in semantics as it does in syntax or morphology—more so, perhaps, given the rather higher standards of precision of semanticists. But linguistic semantics does not furnish a characterization of the interpretation of utterances in use, which is what one finally needs for natural language understandin</context>
</contexts>
<marker>Halvorsen, 1983</marker>
<rawString>Halvorsen, Per-Kristian (1983). &amp;quot;Semantics for lexical-functional grammar.&amp;quot; Linguistic Inquiry, 14(4), 567-615.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Graeme Hirst</author>
</authors>
<title>Semantic Interpretation and the Resolution of Ambiguity.</title>
<date>1987</date>
<publisher>Cambridge University Press.</publisher>
<contexts>
<context position="13658" citStr="Hirst (1987)" startWordPosition="2057" endWordPosition="2058">putational linguistics and artificial intelligence. FS may play the role of an intermediary here, it is suggested, defining meaning representations and suggesting canonical interpretations. The task of relating representations to syntactic expression would then fall to CL, and that of interpreting representations in a larger context of use and communication to Al. This view of computational semantics is of course standard in much earlier, very well respected work, e.g., that of Scha (1976), Hobbs and Rosenschein (1978), Gawron et al. (1982), Schubert and Pelletier (1982), Halvorsen (1983), or Hirst (1987). It would nonetheless be useful to see its consequences systematically developed and elaborated on—after all, a great deal of work, practical and theoretical, depends on it, but that will await another book. It makes as much good sense to exploit the results of linguistic research in semantics as it does in syntax or morphology—more so, perhaps, given the rather higher standards of precision of semanticists. But linguistic semantics does not furnish a characterization of the interpretation of utterances in use, which is what one finally needs for natural language understanding applications—ra</context>
</contexts>
<marker>Hirst, 1987</marker>
<rawString>Hirst, Graeme (1987). Semantic Interpretation and the Resolution of Ambiguity. Cambridge University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jerry Hobbs</author>
<author>Stanley Rosenschein</author>
</authors>
<title>Making computational sense of Montague&apos;s intensional logic.&amp;quot;</title>
<date>1978</date>
<journal>Artificial Intelligence,</journal>
<volume>9</volume>
<issue>3</issue>
<pages>287--306</pages>
<contexts>
<context position="13570" citStr="Hobbs and Rosenschein (1978)" startWordPosition="2042" endWordPosition="2045">the workshop was part of a project with the aim of promoting more &amp;quot;constructive interaction&amp;quot; between computational linguistics and artificial intelligence. FS may play the role of an intermediary here, it is suggested, defining meaning representations and suggesting canonical interpretations. The task of relating representations to syntactic expression would then fall to CL, and that of interpreting representations in a larger context of use and communication to Al. This view of computational semantics is of course standard in much earlier, very well respected work, e.g., that of Scha (1976), Hobbs and Rosenschein (1978), Gawron et al. (1982), Schubert and Pelletier (1982), Halvorsen (1983), or Hirst (1987). It would nonetheless be useful to see its consequences systematically developed and elaborated on—after all, a great deal of work, practical and theoretical, depends on it, but that will await another book. It makes as much good sense to exploit the results of linguistic research in semantics as it does in syntax or morphology—more so, perhaps, given the rather higher standards of precision of semanticists. But linguistic semantics does not furnish a characterization of the interpretation of utterances in</context>
</contexts>
<marker>Hobbs, Rosenschein, 1978</marker>
<rawString>Hobbs, Jerry, and Rosenschein, Stanley (1978). &amp;quot;Making computational sense of Montague&apos;s intensional logic.&amp;quot; Artificial Intelligence, 9(3), 287-306.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan A Sag</author>
</authors>
<title>Information-Based Syntax and Semantics, Volume I. Stanford: Center for the Study of Language and Information.</title>
<date>1987</date>
<contexts>
<context position="12697" citStr="Pollard and Sag (1987)" startWordPosition="1908" endWordPosition="1911">om successful programs ca la Scott–Strachey &amp;quot;denotational semantics&amp;quot;), but one might hope that theory would inform practice, and not merely legitimize it retrospectively. Wilks&apos;s reminder that application is important is certainly a propos in discussing computational semantics. But we should not be trapped into a false dichotomy between theory and practice. &amp;quot;Epilogue: On the Relation between Computational Linguistics and Formal Semantics,&amp;quot; by Margaret King, warns us from facile formulations of the issues separating AT and linguistics views of semantics and closes the book with a reminder from Pollard and Sag (1987) that debates about relative superiority of two approaches may be infected by the different perspectives being taken. So where is computational semantics if this book may be taken as indicative? In their preface, Rosner and Johnson explain that the workshop was part of a project with the aim of promoting more &amp;quot;constructive interaction&amp;quot; between computational linguistics and artificial intelligence. FS may play the role of an intermediary here, it is suggested, defining meaning representations and suggesting canonical interpretations. The task of relating representations to syntactic expression </context>
</contexts>
<marker>Pollard, Sag, 1987</marker>
<rawString>Pollard, Carl, and Sag, Ivan A. (1987). Information-Based Syntax and Semantics, Volume I. Stanford: Center for the Study of Language and Information.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Remko Scha</author>
</authors>
<title>Semantic types in PHLIQA1.&amp;quot;</title>
<date>1976</date>
<booktitle>In Preprints, 6th International Conference on Computational Linguistics (COLING-76),</booktitle>
<location>Ottawa.</location>
<contexts>
<context position="13540" citStr="Scha (1976)" startWordPosition="2040" endWordPosition="2041">explain that the workshop was part of a project with the aim of promoting more &amp;quot;constructive interaction&amp;quot; between computational linguistics and artificial intelligence. FS may play the role of an intermediary here, it is suggested, defining meaning representations and suggesting canonical interpretations. The task of relating representations to syntactic expression would then fall to CL, and that of interpreting representations in a larger context of use and communication to Al. This view of computational semantics is of course standard in much earlier, very well respected work, e.g., that of Scha (1976), Hobbs and Rosenschein (1978), Gawron et al. (1982), Schubert and Pelletier (1982), Halvorsen (1983), or Hirst (1987). It would nonetheless be useful to see its consequences systematically developed and elaborated on—after all, a great deal of work, practical and theoretical, depends on it, but that will await another book. It makes as much good sense to exploit the results of linguistic research in semantics as it does in syntax or morphology—more so, perhaps, given the rather higher standards of precision of semanticists. But linguistic semantics does not furnish a characterization of the i</context>
</contexts>
<marker>Scha, 1976</marker>
<rawString>Scha, Remko (1976). &amp;quot;Semantic types in PHLIQA1.&amp;quot; In Preprints, 6th International Conference on Computational Linguistics (COLING-76), Ottawa.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lenhart K Schubert</author>
<author>Francis Jeffry Pelletier</author>
</authors>
<title>From English to logic: Context-free computation of &apos;conventional&apos; logic translation.&amp;quot;</title>
<date>1982</date>
<journal>American Journal of Computational Linguistics,</journal>
<volume>8</volume>
<issue>1</issue>
<pages>27--44</pages>
<contexts>
<context position="13623" citStr="Schubert and Pelletier (1982)" startWordPosition="2050" endWordPosition="2053">romoting more &amp;quot;constructive interaction&amp;quot; between computational linguistics and artificial intelligence. FS may play the role of an intermediary here, it is suggested, defining meaning representations and suggesting canonical interpretations. The task of relating representations to syntactic expression would then fall to CL, and that of interpreting representations in a larger context of use and communication to Al. This view of computational semantics is of course standard in much earlier, very well respected work, e.g., that of Scha (1976), Hobbs and Rosenschein (1978), Gawron et al. (1982), Schubert and Pelletier (1982), Halvorsen (1983), or Hirst (1987). It would nonetheless be useful to see its consequences systematically developed and elaborated on—after all, a great deal of work, practical and theoretical, depends on it, but that will await another book. It makes as much good sense to exploit the results of linguistic research in semantics as it does in syntax or morphology—more so, perhaps, given the rather higher standards of precision of semanticists. But linguistic semantics does not furnish a characterization of the interpretation of utterances in use, which is what one finally needs for natural lan</context>
</contexts>
<marker>Schubert, Pelletier, 1982</marker>
<rawString>Schubert, Lenhart K., and Pelletier, Francis Jeffry (1982). &amp;quot;From English to logic: Context-free computation of &apos;conventional&apos; logic translation.&amp;quot; American Journal of Computational Linguistics, 8(1), 27-44.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richmond Thomason</author>
</authors>
<title>NETL and subsequent path-based inheritance theory.&amp;quot;</title>
<date>1992</date>
<journal>Computers and Mathematics with Applications,</journal>
<pages>23--179</pages>
<publisher>Pergamon Press.</publisher>
<note>Reprinted in Semantic Networks in Artificial Intelligence, edited by</note>
<marker>Thomason, 1992</marker>
<rawString>Thomason, Richmond (1992). &amp;quot;NETL and subsequent path-based inheritance theory.&amp;quot; Computers and Mathematics with Applications, 23,179-204. Reprinted in Semantic Networks in Artificial Intelligence, edited by Fritz Lehmann. Pergamon Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Touretzky</author>
</authors>
<title>The Mathematics of Inheritance Systems.</title>
<date>1986</date>
<publisher>Morgan Kaufmann.</publisher>
<contexts>
<context position="9043" citStr="Touretzky 1986" startWordPosition="1350" endWordPosition="1351">omputational semantics most directly and most negatively. The contribution is an imaginative (and at times entertaining) reconstruction of debates on the role of logic in AT with appropriate morals drawn about the superiority of commonsense semantics (CSS) over FS for NLP. A sample: [...I recent discussions in Al concerned with inheritance systems, in particular, tend to confirm my hunch on this issue, in that the most useful ones at the moment, such as Touretsky&apos;s [sic], are CSS systems, and attempts to formalize systems fully has made them intractable. (p. 263) But Touretzky&apos;s contribution (Touretzky 1986) was exactly the formalization of inheritance as originally used in Fahlman&apos;s NETL! It indeed turned up inconsistencies (and proposed remedies), but in general the work might be taken as a paradigm of how formal theory and practical application cooperate to mutual benefit (see Thomason [1992] for a history of this effort). Wilks&apos;s last aside, about formalization degrading performance, makes as much sense as criticism ruining art. Formalization clarifies what a system does, but has no effect on its algorithmic complexities. Wilks spends two pages misrepresenting FS as offering nothing but &amp;quot;symb</context>
</contexts>
<marker>Touretzky, 1986</marker>
<rawString>Touretzky, David (1986). The Mathematics of Inheritance Systems. Morgan Kaufmann.</rawString>
</citation>
<citation valid="false">
<authors>
<author>John</author>
</authors>
<title>Nerbonne has written on semantics in constraint-based theories (HPSG) and is the codeveloper (with Joachim Laubsch) of ACCL, a software package for semantic representation, syntax/semantics interfaces, and interfacing to NLU applications.</title>
<booktitle>His address is alfa-informatica, P.O. Box 716, Oude Kijk in &apos;t Jatstraat, Rijksuniversiteit Groningen, NL 9700 AS Groningen, The Netherlands; e-mail:</booktitle>
<pages>nerbonne@letsug.nl.</pages>
<marker>John, </marker>
<rawString>John Nerbonne has written on semantics in constraint-based theories (HPSG) and is the codeveloper (with Joachim Laubsch) of ACCL, a software package for semantic representation, syntax/semantics interfaces, and interfacing to NLU applications. His address is alfa-informatica, P.O. Box 716, Oude Kijk in &apos;t Jatstraat, Rijksuniversiteit Groningen, NL 9700 AS Groningen, The Netherlands; e-mail: nerbonne@letsug.nl.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>