<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000001">
<title confidence="0.996526">
Dialogue Modelling and the Remit
of Core Grammar
</title>
<author confidence="0.9990745">
Eleni Gregoromichelaki†, Yo Sato‡, Ruth Kempson†
Andrew Gargett†, Christine Howes‡
</author>
<affiliation confidence="0.979251">
†King’s College London, ‡Queen Mary University of London
</affiliation>
<sectionHeader confidence="0.988755" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.99999094117647">
In confronting the challenge of providing formal models of dialogue, with
its plethora of fragments and rich variation in modes of context-dependent
construal, it might seem that linguists face two types of methodological
choice: either (a) conversation employs dialogue-specific mechanisms, for
which a grammar specific to such activity must be constructed; or (b) vari-
ation arises due to independent parsing/production systems which invoke
a process-neutral grammar. However, as dialogue research continues to de-
velop, there are intermediate possibilities, and in this paper we discuss the
approach developed within Dynamic Syntax (DS, Kempson et al. 2001,
Cann et al. 2005), a grammar framework within which, not only the parser,
but indeed “syntax” itself are just a single mechanism allowing the pro-
gressive construction of semantic representations in context. Here we take
as a case study the set of phenomena classifiable as clarifications, reformu-
lations, fragment requests and corrections accompanied by extensions, and
argue that though these may seem to be uniquely constitutive of dialogue,
they are grounded in the mechanisms of apposition equivalently usable in
monologue for presenting reformulations, extensions, self-corrections etc.
</bodyText>
<sectionHeader confidence="0.94458" genericHeader="keywords">
2 Background
</sectionHeader>
<bodyText confidence="0.9976395">
The data we focus on are non-repetitive fragment forms of acknowledge-
ments, clarifications and corrections (henceforth, A female, B male):
</bodyText>
<listItem confidence="0.8705715">
(1) A: Bob left.
B: (Yeah,) the accounts guy.
</listItem>
<bodyText confidence="0.6994274">
A: They X-rayed me, and took a urine sample, took a blood sample.
Er, the doctor
B: Chorlton?
A: Chorlton, mhm, he examined me, erm, he, he said now they
were on about a slight [shadow] on my heart.
</bodyText>
<page confidence="0.962215">
128
</page>
<bodyText confidence="0.3522915">
Proceedings of the 8th International Conference on Computational Semantics, pages 128–139,
Tilburg, January 2009. c�2009 International Conference on Computational Semantics
</bodyText>
<listItem confidence="0.500671">
(3) A: Bob left.
B: Rob?
A: (No,) (Bob,) the accounts guy.
</listItem>
<bodyText confidence="0.999973525">
Even though in the literature the fragments in (2)-(3) might be characterised
as illustrating distinct construction-types, in our view, they all illustrate how
speakers and hearers may contribute, in some sense to be made precise, to
the joint enterprise of establishing some shared communicative content, in
what might be loosely called split utterances. Even (1), an acknowledgement,
can be seen this way upon analysis: B’s addition is similar in structure to
an afterthought extension that might have been added by A herself to A’s
fully sentential utterance. It can be seen in (2) that such joint construction
of content can proceed incrementally: the clarification request in the form of
a reformulation is provided by B and resolved by A within the construction
of a single proposition. In (3) the fragment reply can be taken to involve
correction, in the sense that, according to the DS analysis of B’s fragment
question, he has provided content construable as equivalent to that derived
by processing Rob left? (see Kempson et al. (2007)). Nevertheless such
corrections can also incorporate extensions in the above sense, enabling a
single conjoined propositional content to be derived in a single step.
It might seem that such illustration of diversity of fragment usage is am-
ple evidence of the need for conversation-specific rules. Indeed, Fern´andez
(2006) presents a thorough taxonomy, as well as detailed formal modelling
of Non-Sentential Utterances (NSUs), referring to contributions such as (1)
as repeated acknowledgements involving reformulation. Fern´andez models
such constructions via type-specific “accommodation rules” which make a
constituent of the antecedent utterance “topical”. The semantic effect of
acknowledgement is then derived by applying an appropriately defined ut-
terance type for such fragments to the newly constructed context. A distinct
form of contextual accommodation is employed to model so-called helpful
rejection fragments, as in (3) (without the reformulation), whereby a wh-
question is accommodated in the context by abstracting over the content
of one of the sub-constituents of the previous utterance. The content of
the correction is derived by applying this wh-question in the context to the
content of the fragment (see also Schlangen (2003) for another classification
and analysis).
In contrast, the alternative explored here is whether phenomena such
as (1)-(2), both of which are non-repetitive next-speaker contributions, can
be handled uniformly using the mechanisms for structure-building made
available in the core grammar, without recourse to construction-specific ex-
tensions of that grammar and contextual accommodation rules. This is
because, in our view, the range of interpretations these fragments receive
in actual dialogue seem to form continua with no well-defined boundaries
and mixing of functions (see also comments in Schlangen (2003)). Thus we
</bodyText>
<page confidence="0.997879">
129
</page>
<bodyText confidence="0.99992680952381">
propose that the grammar itself simply provides mechanisms for process-
ing/integrating such fragments in the current structure while their precise
contribution to the interaction can be calculated by pragmatic inferencing
if needed (as in e.g. Schlangen (2003)) or, as seems most often to be the
case, be left underspecified without disruption to the dialogue.
One bonus of the stance taken here is the promise it offers for elucidating
the grammar-parser contribution to the disambiguation task. Part of the
challenge of modelling dialogue is the apparent multiplicity of interpretive
and structural options opened up during processing by the recurrent, of-
ten overlapping fragments as seen in (2) above. Thus, it might seem that
the rich array of elliptical fragments available in dialogue adds to its com-
plexity. However, an alternative point of view is to see such phenomena as
providing a window on how interlocutors exploit the incrementality afforded
by the grammar. The reliance of fragments on context for interpretation,
when employed incrementally, enables the hearer to immediately respond to
a previous utterance at any relevant point, in a constrained manner, with-
out ‘recovering’ a propositional unit. Three features of the Dynamic Syntax
model of dialogue (Purver et al. (2006)), presented below, provide the flex-
ible control required for such processing: (a) word-by-word incrementality
(b) interaction with contextually provided information at every step of the
construction process (c) tight coordination of parsing and production.
</bodyText>
<sectionHeader confidence="0.994069" genericHeader="introduction">
3 Dynamic Syntax: A Sketch
</sectionHeader>
<bodyText confidence="0.999654157894737">
Dynamic Syntax (DS) is a parsing-based framework, involving strictly se-
quential interpretation of linguistic strings. The model is implemented via
goal-directed growth of tree structures and their annotations formalised us-
ing LOFT (Blackburn and Meyer-Viol (1994)), with modal operators (T), (I)
to define concepts of mother and daughter, and their iterated counterparts,
(T∗), (I∗), to define the notions be dominated by and dominate. Under-
specification and update are core aspects of the grammar itself and involve
strictly monotonic information growth for any dimension of tree structures
and annotations. Underspecification is employed at all levels of tree rela-
tions (mother, daughter etc.), as well as formulae and type values, each
having an associated requirement that drives the goal-directed process of
update. For example, an underspecified subject node of a tree may have a
requirement expressed in DS with the node annotation ?Ty(e), for which
the only legitimate updates are logical expressions of type entity (Ty(e));
but requirements may also take a modal form, e.g. ?(T)Ty(e —* t), a con-
straint that the mother node be annotated with a formula of predicate type.
Requirements are essential to the dynamics informing the DS account: all
requirements must be satisfied if the construction process is to lead to a
successful outcome.
</bodyText>
<page confidence="0.994483">
130
</page>
<bodyText confidence="0.997777333333333">
Semantic structure is built from lexical and general computational ac-
tions. Computational actions govern general tree-constructional processes,
such as introducing and updating nodes, as well as compiling interpretation
for all non-terminal nodes in the tree. Construction of only weakly spec-
ified tree relations (unfixed nodes) can also be induced, characterised only
as dominance by some current node, with subsequent update required. In-
dividual lexical items also provide procedures for building structure in the
form of lexical actions, inducing both nodes and annotations. Thus partial
trees grow incrementally, driven by procedures associated with particular
words as they are encountered, with a pointer, ♦, recording the parser’s
progress (unlike van Leusen and Muskens (2003), partial trees are part of
the model and, unlike in other frameworks, incrementality is word-by-word
rather than sentence-by-sentence).
Complete individual trees are taken to correspond to predicate-argument
structures (with an event term associated with tense, suppressed in this
paper). The epsilon calculus (see e.g. Meyer-Viol (1995)) provides the se-
mantic representation language. Complex structures are obtained via a gen-
eral tree-adjunction operation licensing the construction of so-called linked
trees, hosting information that is eventually transferred onto the tree FROM
which the link is made (Kempson et al 2001). Structures projected as such
paired trees range over restrictive relatives, nonrestrictive relatives, condi-
tionals, topic structures and appositions as here. As the semantic represen-
tations employ the epsilon calculus, eventual compound epsilon terms (e.g.
c, x, P(x)) are constructed incrementally through link-adjunction:
</bodyText>
<listItem confidence="0.509064">
(4) A consultant, a friend of Jo’s, is retiring
</listItem>
<equation confidence="0.989212142857143">
T y(t), Retire′((ǫ, x, Consultant′(x) n Friend′(Jo′)(x)))
Ty(e), (ǫ, x, Consultant′(x) n Friend′(Jo′)(x)) Ty(e → t), Retire′
Ty(e), (ǫ, x, Friend′(Jo′)(x))
Ty(cn), (x, Friend′(Jo′)(x))
x Friend′(Jo′)
Jo′ Friend′
Ty(cn → e), AP.ǫ, P
</equation>
<bodyText confidence="0.999877625">
Underspecification of content as well as structure are central to facilitat-
ing successful linguistic interaction, our primary concern here. Pronouns,
the prototypical case, contribute a place-holding metavariable, noted as e.g.
U, plus an associated requirement for update by an appropriate term value:
?∃x.Fo(x). Equally, definite NPs contribute place-holders plus a constraint
providing a restriction/”presupposition” on the kind of entity picked out,
e.g., the man contributes the annotation UMan′(U),Ty(e). The subscript
specification is shorthand for a transition to a linked tree whose root node is
</bodyText>
<page confidence="0.992125">
131
</page>
<bodyText confidence="0.968695352941176">
annotated with a formula Man′(U)1. The update of metavariables can be
accomplished if the context contains an appropriate term for substitution:
context involves storage of parse states, i.e., storing of partial tree, word se-
quence to date, plus the actions used in building up the partial tree (Purver
et al 2006).
Scope dependencies between constructed terms or the index of evalua-
tion (e.g. S) are defined on completed propositional formulae, relative to
incrementally collected scope constraints (of the form x &lt; y for constructed
terms containing variables x and y respectively). Constraints reflect on-line
processing considerations modulo over-riding lexical stipulations. For ex-
ample, proper names contribute as iota terms, i.e, epsilon terms reflecting
uniqueness in the context, ι, x, Bob′(x), and these project a scope depen-
dency solely on the index of evaluation reflecting their widest scope property
(cf Kamp and Reyle 1994). The structure projected from A’s utterance in
(1) is thus (5) (note that trees are the RESULT of processing words but do
not encode the structure of strings, word order etc., only semantic content
derived in interaction with context, thus are the equivalents of DRSs):
</bodyText>
<equation confidence="0.997206">
S &lt; x Ty(t), Leave′((ι, x, Bob′(x)))
Ty(e), (ι, x, Bob′(x)) Ty(e → t), Leave′
</equation>
<bodyText confidence="0.998857666666667">
The scope evaluation rule reflects the predicate-logic/epsilon-calculus equiv-
alence ∃xF(x) ≡ F(c, x, F(x)) so evaluated terms eventually reflect their
containing structure. Hence, evaluation of (5) yields:
</bodyText>
<listItem confidence="0.950759">
(6) Ty(t), Leave′(ι, x, Bob′(x) ∧ Leave′(x))
</listItem>
<bodyText confidence="0.985463764705882">
A major aspect of the DS dialogue model is that both generation and
parsing are goal-directed and INCREMENTAL, and hence are governed by es-
sentially the same mechanism. Under this model, a human hearer-parser
builds a succession of partial parse trees based on what (s)he has heard
thus far. Importantly, however, unlike the conventional bottom-up parsing,
the DS model assumes a strong predictive element in parsing: a hearer is
assumed to entertain some goal to be reached eventually at any stage of
parsing. In (1), for example, as soon as the hearer encounters Bob, an un-
derspecified propositional tree is constructed, as in the first simplified and
schematised tree in Figure 1. Then the tree ‘grows’ monotonically, i.e. such
that at each word input, it is ‘updated’ to an ‘incremented’ tree that is
subsumed by the original tree, as depicted in the same Figure. This can be
described as a process of specifying the relevant nodes towards a complete
tree. This predictive element in DS allows a speaker-generator to be mod-
elled as doing exactly the same, i.e. going through monotonically updated
partial trees, the only difference being that (s)he also has available a more
&apos;These linked structures are suppressed in all diagrams.
</bodyText>
<page confidence="0.990924">
132
</page>
<bodyText confidence="0.998468125">
fully specified goal tree representing what (s)he wishes to say, corresponding
to the rightmost tree in the Figure (with ‘0’ in the ‘generation’ row at the
bottom indicating it is entertained before utterance). Each licensed step in
generation, i.e. the utterance of a word, is governed by whatever step is
licensed by the parsing formalism, constrained via a required subsumption
relation of the goal tree. By updating their growing “parse” tree relative
to the goal tree, speakers are licensed to produce the associated natural
language string.
</bodyText>
<table confidence="0.548563625">
Parsing: 1 2 3
?Ty(t) ?Ty(t) Ty(t),
������� ������� ������� ������� Leave’(Bob’), ♦
7→ ������� �������
7→
Ty(e), ?Ty(e → t) Ty(e), Ty(e → t), Ty(e), Ty(e → t),
Bob′, ♦ Bob’ Leave′, ♦ Bob’ Leave’
Generation: 1 2 0,3
</table>
<figureCaption confidence="0.999158">
Figure 1: Parallel parsing and generation in DS
</figureCaption>
<bodyText confidence="0.999985736842105">
This architecture allows for a dialogue model in which generation (what
a speaker does) and parsing (what a hearer does) function in parallel. The
speaker goes through partial trees subsuming a specified goal tree, while
the hearer attempts to ‘mirror’ the same series of partial trees, albeit not
knowing what the content of the unspecified nodes will be. For the dialogues
in (1)-(3), therefore, B as the hearer will have the partial representation of
what he has successfully parsed, required also for generation. This provides
him with the ability at any stage to become the speaker, interrupting to
ask for clarification, reformulating, or providing a correction, as and when
necessary. As we shall see, B’s parse tree reveals where need of clarifica-
tion or miscommunication occurs, as it will be at that node from which a
sub-routine extending it takes place2. According to our model of dialogue,
repeating or extending a constituent of A’s utterance by B is licensed only
if B, the hearer of A turned now a speaker, entertains currently a goal tree
that matches or extends the parse tree of what he has heard in a monotonic
fashion, although he only utters the relevant subpart of A’s utterance. In-
deed, this update is what B is seeking to clarify, correct or acknowledge. In
DS, B can reuse the already constructed (partial) parse tree in his context,
rather than having to rebuild an entire propositional tree or subtree3.
</bodyText>
<footnote confidence="0.988181">
2The account extends the implementation reported in Purver et al. (2006)
3Given the DS concept of linked trees projecting propositional content, we anticipate
that this mechanism will be extendable to fragment construal involving inference (see e.g.
Schlangen (2003), Schlangen and Lascarides (2003))
</footnote>
<page confidence="0.995572">
133
</page>
<sectionHeader confidence="0.857854" genericHeader="method">
4 NSU fragments in Dynamic Syntax
</sectionHeader>
<subsectionHeader confidence="0.669049">
4.1 Non-repetitive Acknowledgement
</subsectionHeader>
<bodyText confidence="0.99977172">
From a DS perspective, phenomena like reformulations as in (1), or exten-
sions to what one understands of the other speaker’s utterance, (2), can
be handled with exactly the same mechanisms as the sentence-internal phe-
nomenon independently identifiable as apposition, as in (4), and equally
usable by a single individual as a means of incrementally reformulating, cor-
recting or extending what they have just uttered. The update rule for such
structures, applicable to all terms, takes the two type e terms so formed and
yields a new term whose compound content is a combination of both.
We now have the basis for analysing extensions potentially functioning
as acknowledgements which build on what has been previously said as a way
of confirming the previous utterance. Recall (1), (2). There are two ways for
fragments which reformulate an interlocutor A’s utterance to occur: (a) as
interruptions of A’s utterance with immediate confirmation of identification
of the individual concerned, see (2); (b) as confirmations/extensions of A’s
utterance after the whole of her utterance has been integrated, see (1). Both
are modelled by DS as incremental additions.
Turning to (1), B’s response (Yeah,) the accounts guy constitutes a re-
formulation of A’s utterance and an extension of A’s referring expression,
yielding a similar content as that of an appositive expression Bob, the ac-
counts guy in this case jointly constructed. B’s reformulation/extension
counts in effect as an acknowledgement in virtue of signalling successful
processing of A’s utterance without objection raised. Thus there is no need
for a separate grammatical mechanism to process these structures. In DS
terms, after processing A’s utterance, B’s context consists of the following
tree:
</bodyText>
<equation confidence="0.977531666666667">
(7) B’s Context for producing ‘Yeah’
Ty(t), Leave′(ι, x, Bob′(x) ∧ Leave′(x)), ♦
(ι, x, Bob′(x)) Leave′
</equation>
<bodyText confidence="0.99986325">
B, as a speaker, can now re-use this representation as point of departure
for generating the expression the accounts guy. In this case his goal tree,
the message to be expressed, will now be annotated with a composite term
made up from both the term recovered from parsing A’s utterance and the
new addition. This requires attaching a linked tree to the correct node
and an appropriate update of the context tree (for reasons of space, the
exact structure of the linked tree is condensed below, with subscripting as
shorthand):
</bodyText>
<page confidence="0.974441">
134
</page>
<equation confidence="0.85573">
(8) B’s GOAL TREE:
Ty(t), Leave′((ι, x, Bob′(x) ∧ Acc.guy′(x))) ∧ Leave′(x))
(ι, x, Bob′(x))Acc.guy′(x)
(ι, x, Bob′(x) ∧ Acc.guy′(x)) Leave′
</equation>
<bodyText confidence="0.999949777777778">
In order to license generation of the expression the accounts guy, B now
needs to verify that processing these words in the context provided by the
tree in (7) will produce a tree that matches this goal tree in (8). To achieve
this, starting from (7), a series of simulated “parse” trees are generated
which indeed result in the requisite matching. Steps include shifting the
pointer to the appropriate node, projection of a linked tree from that node
and test-processing the words the accounts guy, each step checking against
the goal tree that a subsumption relation between the current “parse” tree
and the goal tree is always maintained:
</bodyText>
<equation confidence="0.9002925">
(9) B’s PARSE TREE licensing production of the accounts guy: LINK adjunction
Ty(t), Leave′(ι, x, Bob′(x) ∧ Leave′(x))
UAcc.guy′(U), ♦
(ι, x, Bob′(x)) Leave′
</equation>
<bodyText confidence="0.9990088">
The only way to update this representation relative to both the restriction
on the metavariable and monotonicity of growth on any one node in a tree
involves replacing the metavariable with (ι, x, Bob′(x)), as this is commen-
surate with an extension of the term annotating the node from which the
link transition was constructed:
</bodyText>
<equation confidence="0.975129333333333">
(10) Updating B’s PARSE TREE licensing production of the accounts guy
Ty(t), Leave′(ι, x, Bob′(x) ∧ Acc.guy′(x) ∧ Leave′(x)), ♦
(ι, x, Bob′(x) ∧ Acc.guy′(x)) Leave′
</equation>
<bodyText confidence="0.999918333333333">
Finally, the information is passed up to the top node of the main tree,
completing the parse tree to match B’s GOAL TREE, (8), thus licensing the
utterance of the expression the accounts guy.
</bodyText>
<subsectionHeader confidence="0.915145">
4.2 Non-repetitive Clarification
</subsectionHeader>
<bodyText confidence="0.999824083333333">
In the acknowledgement case above, the proposition relative to which the
linked structure is built is completed (with an already extended epsilon
term); but the same mechanism can be used when the interlocutor needs
clarification, prior to any such completion of the tree. In (2), B again, as
the speaker, takes as his goal tree a tree annotated with an expansion of the
term constructed from parsing A’s utterance but nevertheless picking out
the same individual. Using the very same mechanism as in (1) of building a
linked structure, B, interrupting A, provides a distinct expression, the name
Chorlton, this time before he has completed the parse tree for A’s utterance.
All that has been achieved at this point is the definite’s contribution of a
meta-variable with the restriction that the individual picked out must be a
doctor:
</bodyText>
<equation confidence="0.445773">
(ι, x, Bob′(x))Acc.guy′(x)
</equation>
<page confidence="0.994018">
135
</page>
<bodyText confidence="0.999951166666667">
As in the acknowledgement case, but this time at the node INITIATING the
link transition, the only possible value to provide for the metavariable U
compatible both with its restriction and the monotoniticity constraint is
the composite term (ι, x, Doctor′(x) ∧ Chorlton′(x)). The mechanism of
constructing paired structures involving type e terms across linked trees
is identical to that employed in B’s utterance in (1), though to a rather
different effect at this intermediate stage in the interpretation process. This
extension of the term is confirmed by A, this time replicating the composite
term which processing B’s utterance has led to. The eventual effect of the
process of inducing linked structures to be annotated by coreferential type e
terms may thus vary across monologue and different dialogue applications,
yielding different interpretations, but the mechanism is the same.
</bodyText>
<subsectionHeader confidence="0.99637">
4.3 Correction
</subsectionHeader>
<bodyText confidence="0.99886512">
It might be argued nonetheless that correction is intrinsically a dialogue
phenomenon. Consider (3), for example. One of the possible interpretations
of (3), according to the DS analysis, is that B has offered the equivalent of the
content derived by processing Rob left?. That is, let’s assume here that B has
misheard and requests confirmation of what he has perceived A as saying.
A in turn rejects B’s understanding of her utterance and provides more
information. Presuming rejection as simple disagreement (i.e. the utterance
has been understood, but judged as incorrect), in DS terms, this means that
A has in mind a goal tree that licensed what she had produced, which is
distinct from the one derived by processing B’s clarification. As shown in
Kempson et al. (2007), this means that A has been unable to process B’s
clarification request as an extension of her own context. Instead, she has to
parse the clarification by exploiting the potential for introducing an initially
structurally underspecified tree-node to accommodate the contribution of
the word Rob. Subsequently, by re-running the actions stored in context
previously by processing her own utterance of the word left, she is able to
complete the integration of the fragment in a new propositional structure.
Now, in order for A to produce the following correction, what is required
is for A to establish as the current most recent representation in context her
ORIGINAL. goal tree. This can be monotonically achieved by recovering and
copying this original goal tree to serve as the current most immediate con-
text4. An option available to A at this point is to introduce, in addition
or exclusively, a reformulation of her original utterance in order to facilitate
¢Mistaken representations must be maintained in the context as they can provide an-
tecedents for subsequent anaphoric expressions.
</bodyText>
<equation confidence="0.83685025">
(11) A/B’s PARSE TREE for Chorlton:
?Ty(t)
(ι, x, Chorlton′(x))
UDoctor′(U), ♦ ?Ty(e → t)
</equation>
<page confidence="0.994698">
136
</page>
<bodyText confidence="0.999343857142857">
identification of the named individual which proved problematic for B previ-
ously. She can answer B’s utterance of Rob? with (No,) Bob, the accounts
guy, as in (3) or simply with (No,) the accounts guy. Both are licensed
by the DS parsing mechanism without more ado. For both, the goal tree
will be as follows and it will always be the point of reference for checking
the subsumption relation relative to the simulated parsing steps described
further below:
</bodyText>
<equation confidence="0.822799333333333">
(12) A’s GOAL TREE
Ty(t), Leave′((ι, x, Bob′(x) ∧ Acc.guy′(x)))
(ι, x, Bob′(x) ∧ Acc.guy′(x)) Leave′
</equation>
<bodyText confidence="0.999739">
Under these circumstances, given the DS grammar-as-parser perspective,
several strategies are now available for the licensing of generation of the
fragment. A is licensed to repeat the name Bob by locally extending the
node in the context tree where the representation of the individual referred to
is located by using the rule of LATE*ADJUNCTION, a process which involves
building a node of type e from a dominating node of that type (illustrated in
Kempson et al. 2007). An alternative way of licensing repetition of the word
Bob is to employ one of the strategies generally available for the parsing of
long distance dependencies i.e. constructing initial tree nodes as unfixed
(*ADJUNCTION). We show here how the latter strategy can be exploited to
license the production of the fragment by A.
</bodyText>
<listItem confidence="0.922409">
(13) Parsing simulation licensing generation of Bob, the accounts guy
</listItem>
<figureCaption confidence="0.271876">
Step 1: *Adjunction Step 2: LINK-Adjuction + testing the accounts guy
</figureCaption>
<equation confidence="0.959373666666667">
?Ty(t)
(ι, x, Bob′(x)), Q
UAcc.guy′(U)
</equation>
<bodyText confidence="0.9999892">
The only way to develop the constructed tree at Step 2 commensurate with
the goal tree (12) is to identify the value of U as (ι, x, Bob′(x)), so this
is what is entered at the newly constructed linked tree, duly leading to
extension of the term originally given as annotating the unfixed node as
(ι, x, Bob′(x) ∧ Acc.guy′(x)). The structures derived by processing such an
extension is exactly that of (1) above (compare goal tree in (12) above
and tree in (8)). Now, as mentioned before, context, as defined in DS,
keeps track not only of tree representations and words but also of actions
contributed by the words and utilised in building up the tree representations.
Here, according to DS, production of the correction in (3) is licensed to be
</bodyText>
<footnote confidence="0.709499">
5Again note that DS trees represent derived content rather than structure over natural
language strings.
</footnote>
<equation confidence="0.882303666666667">
(ι, x, Bob′(x))Acc.guy′(x)
?Ty(t)
(ι, x, Bob′(x)), Q
</equation>
<page confidence="0.986905">
137
</page>
<bodyText confidence="0.9999285">
fragmental only because the original actions for parsing/producing the word
left are available in the context and can be recalled to complete the structure
initiated by processing/producing the name Bob. Now these stored actions
can be retrieved to develop the tree further:
</bodyText>
<listItem confidence="0.6449435">
(14) Parsing simulation licensing generation of Bob, the accounts guy
Step 3: test-processing stored actions for left
</listItem>
<equation confidence="0.838297">
?Ty(t)
(ι, x, Bob′(x) ∧ Acc.guy′(x)) ?Ty(e), ♦ Leave’
(ι, x, Bob′(x))Acc.guy′(ι,x,Bob′(x))
</equation>
<bodyText confidence="0.999885428571429">
With this partial tree being commensurate with the goal tree, all actions that
follow are general computational processes for completing the tree: unifying
the unfixed node to determine the subject argument, applying the subject
to the predicate, evaluating the quantified terms. Nothing specific to this
structure is needed. Indeed, all these mechanisms are equally applicable by
an individual speaker, perhaps more familiar as right dislocation phenomena,
but equally available incrementally:
</bodyText>
<listItem confidence="0.42426">
(15) Bob left, (Bob) the accounts guy.
</listItem>
<sectionHeader confidence="0.993718" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999923095238095">
As these fragments and their construal have demonstrated, despite serving
distinct functions in dialogue, the mechanisms which make such diversity
possible are general strategies for tree growth. In all cases, the advantage
which use of fragments provides is a “least effort” means of re-employing
previous content/structure/actions which constitute the minimal local con-
text. As modelled in DS, it is more economical to reuse information from
this local context rather than constructing representations afresh (via costly
processes of lexical retrieval, choice of alternative parsing strategies, etc.).
A further quandary in dialogue construal is that, despite such avenues
for economising their efforts, interlocutors are nevertheless faced with an
increasing set of interpretive options at any point during the construction
of representations. One strategy available to hearers is to delay a disam-
biguating move until further input potentially resolves the uncertainty. How-
ever, as further input is processed and parsing/interpretive options increase
rapidly, the human processor struggles. The incremental definition of the
DS formalism allows for the modelling of an alternative strategy available
to hearers: at any (sub-sentential) point they could opt to intervene imme-
diately, and make a direct appeal to the speaker for more information as
illustrated by the clause-medial fragment interruption (2). It seems clear
that the grammar should allow the resources for modelling this behaviour
without any complications.
</bodyText>
<page confidence="0.994628">
138
</page>
<bodyText confidence="0.999982777777778">
The phenomena examined here are also cases where speakers’ and hear-
ers’ representations, despite attempts at coordination, may nevertheless sep-
arate sufficiently for them to have to seek “repair” (see especially (3)). In
the model presented here, the dynamics of interaction allow fully incremen-
tal generation and integration of fragmental utterances so that interlocutors
can be taken to constantly provide optimal evidence of each other’s represen-
tations with necessary adjuncts being able to be incrementally introduced.
But such mechanisms apply equally within an individual utterance, with self-
correction, extension, elaboration, repetition etc. The effect is that all the de-
vices which seem so characteristic of dialogue involve mechanisms invariably
available within an individual’s core grammar. This suggests a new inverse
methodology: it is the challenge of modelling dialogue that can be used as
a point of departure for modelling grammars for individual speakers, rather
than the other, more familiar, way round (see also Ginzburg (forthcmg)).
This reversibility is, notably, straightforwardly available to grammar for-
malisms in which the incremental dynamics of information growth is the
core structural concept because emergent dialogue structure crucially ex-
hibits and interpretively relies on such incrementality.
</bodyText>
<sectionHeader confidence="0.992735" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.927821">
This work was supported by grants ESRC RES-062-23-0962 and Leverhulme F07-
04OU. We are grateful for comments to: Robin Cooper, Alex Davies, Arash Eshghi,
Jonathan Ginzburg, Pat Healey, Greg Mills. Normal disclaimers apply.
</bodyText>
<sectionHeader confidence="0.985973" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999335333333333">
Patrick Blackburn and Wilfried Meyer-Viol. Linguistics, logic and finite trees.
Bulletin of the IGPL, 2:3–31, 1994.
Raquel Fern´andez. Non-Sentential Utterances in Dialogue: Classification, Resolu-
tion and Use. PhD thesis, King’s College London, University of London, 2006.
Jonathan Ginzburg. Semantics for Conversation. CSLI, forthcmg.
Ruth Kempson, Andrew Gargett, and Eleni Gregoromichelaki. Clarification re-
quests: An incremental account. In Proceedings of the 11th Workshop on the
Semantics and Pragmatics of Dialogue (DECALOG), 2007.
Wilfried Meyer-Viol. Instantial Logic. PhD thesis, University of Utrecht, 1995.
Matthew Purver, Ronnie Cann, and Ruth Kempson. Grammars as parsers: Meeting
the dialogue challenge. Research on Language and Computation, 4(2-3):289–326,
2006.
David Schlangen. A Coherence-Based Approach to the Interpretation of Non-
Sentential Utterances in Dialogue. PhD thesis, University of Edinburgh, 2003.
David Schlangen and Alex Lascarides. The interpretation of non-sentential utter-
ances in dialogue. In Proceedings of the 4th SIGdial Workshop on Discourse and
Dialogue, pages 62–71, Sapporo, Japan, July 2003. Association for Computa-
tional Linguistics.
Noor van Leusen and Reinhard Muskens. Construction by description in discourse
representation. In J. Peregrin, editor, Meaning: The Dynamic Turn, chapter 12,
pages 33–65. 2003.
</reference>
<page confidence="0.998866">
139
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.751665">
<title confidence="0.9793475">Dialogue Modelling and the Remit of Core Grammar</title>
<author confidence="0.917983">Yo Ruth Christine</author>
<affiliation confidence="0.926681">College London, Mary University of London</affiliation>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Patrick Blackburn</author>
<author>Wilfried Meyer-Viol</author>
</authors>
<title>Linguistics, logic and finite trees.</title>
<date>1994</date>
<journal>Bulletin of the IGPL,</journal>
<volume>2</volume>
<contexts>
<context position="6849" citStr="Blackburn and Meyer-Viol (1994)" startWordPosition="1021" endWordPosition="1024"> unit. Three features of the Dynamic Syntax model of dialogue (Purver et al. (2006)), presented below, provide the flexible control required for such processing: (a) word-by-word incrementality (b) interaction with contextually provided information at every step of the construction process (c) tight coordination of parsing and production. 3 Dynamic Syntax: A Sketch Dynamic Syntax (DS) is a parsing-based framework, involving strictly sequential interpretation of linguistic strings. The model is implemented via goal-directed growth of tree structures and their annotations formalised using LOFT (Blackburn and Meyer-Viol (1994)), with modal operators (T), (I) to define concepts of mother and daughter, and their iterated counterparts, (T∗), (I∗), to define the notions be dominated by and dominate. Underspecification and update are core aspects of the grammar itself and involve strictly monotonic information growth for any dimension of tree structures and annotations. Underspecification is employed at all levels of tree relations (mother, daughter etc.), as well as formulae and type values, each having an associated requirement that drives the goal-directed process of update. For example, an underspecified subject nod</context>
</contexts>
<marker>Blackburn, Meyer-Viol, 1994</marker>
<rawString>Patrick Blackburn and Wilfried Meyer-Viol. Linguistics, logic and finite trees. Bulletin of the IGPL, 2:3–31, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Raquel Fern´andez</author>
</authors>
<title>Non-Sentential Utterances in Dialogue: Classification, Resolution and Use.</title>
<date>2006</date>
<tech>PhD thesis,</tech>
<institution>King’s College London, University of London,</institution>
<marker>Fern´andez, 2006</marker>
<rawString>Raquel Fern´andez. Non-Sentential Utterances in Dialogue: Classification, Resolution and Use. PhD thesis, King’s College London, University of London, 2006. Jonathan Ginzburg. Semantics for Conversation. CSLI, forthcmg.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ruth Kempson</author>
<author>Andrew Gargett</author>
<author>Eleni Gregoromichelaki</author>
</authors>
<title>Clarification requests: An incremental account.</title>
<date>2007</date>
<booktitle>In Proceedings of the 11th Workshop on the Semantics and Pragmatics of Dialogue (DECALOG),</booktitle>
<contexts>
<context position="3133" citStr="Kempson et al. (2007)" startWordPosition="477" endWordPosition="480">s addition is similar in structure to an afterthought extension that might have been added by A herself to A’s fully sentential utterance. It can be seen in (2) that such joint construction of content can proceed incrementally: the clarification request in the form of a reformulation is provided by B and resolved by A within the construction of a single proposition. In (3) the fragment reply can be taken to involve correction, in the sense that, according to the DS analysis of B’s fragment question, he has provided content construable as equivalent to that derived by processing Rob left? (see Kempson et al. (2007)). Nevertheless such corrections can also incorporate extensions in the above sense, enabling a single conjoined propositional content to be derived in a single step. It might seem that such illustration of diversity of fragment usage is ample evidence of the need for conversation-specific rules. Indeed, Fern´andez (2006) presents a thorough taxonomy, as well as detailed formal modelling of Non-Sentential Utterances (NSUs), referring to contributions such as (1) as repeated acknowledgements involving reformulation. Fern´andez models such constructions via type-specific “accommodation rules” wh</context>
<context position="22559" citStr="Kempson et al. (2007)" startWordPosition="3492" endWordPosition="3495">3), according to the DS analysis, is that B has offered the equivalent of the content derived by processing Rob left?. That is, let’s assume here that B has misheard and requests confirmation of what he has perceived A as saying. A in turn rejects B’s understanding of her utterance and provides more information. Presuming rejection as simple disagreement (i.e. the utterance has been understood, but judged as incorrect), in DS terms, this means that A has in mind a goal tree that licensed what she had produced, which is distinct from the one derived by processing B’s clarification. As shown in Kempson et al. (2007), this means that A has been unable to process B’s clarification request as an extension of her own context. Instead, she has to parse the clarification by exploiting the potential for introducing an initially structurally underspecified tree-node to accommodate the contribution of the word Rob. Subsequently, by re-running the actions stored in context previously by processing her own utterance of the word left, she is able to complete the integration of the fragment in a new propositional structure. Now, in order for A to produce the following correction, what is required is for A to establis</context>
<context position="24775" citStr="Kempson et al. 2007" startWordPosition="3852" endWordPosition="3855">imulated parsing steps described further below: (12) A’s GOAL TREE Ty(t), Leave′((ι, x, Bob′(x) ∧ Acc.guy′(x))) (ι, x, Bob′(x) ∧ Acc.guy′(x)) Leave′ Under these circumstances, given the DS grammar-as-parser perspective, several strategies are now available for the licensing of generation of the fragment. A is licensed to repeat the name Bob by locally extending the node in the context tree where the representation of the individual referred to is located by using the rule of LATE*ADJUNCTION, a process which involves building a node of type e from a dominating node of that type (illustrated in Kempson et al. 2007). An alternative way of licensing repetition of the word Bob is to employ one of the strategies generally available for the parsing of long distance dependencies i.e. constructing initial tree nodes as unfixed (*ADJUNCTION). We show here how the latter strategy can be exploited to license the production of the fragment by A. (13) Parsing simulation licensing generation of Bob, the accounts guy Step 1: *Adjunction Step 2: LINK-Adjuction + testing the accounts guy ?Ty(t) (ι, x, Bob′(x)), Q UAcc.guy′(U) The only way to develop the constructed tree at Step 2 commensurate with the goal tree (12) is</context>
</contexts>
<marker>Kempson, Gargett, Gregoromichelaki, 2007</marker>
<rawString>Ruth Kempson, Andrew Gargett, and Eleni Gregoromichelaki. Clarification requests: An incremental account. In Proceedings of the 11th Workshop on the Semantics and Pragmatics of Dialogue (DECALOG), 2007.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wilfried Meyer-Viol</author>
</authors>
<title>Instantial Logic. PhD thesis,</title>
<date>1995</date>
<journal>Research on Language and Computation,</journal>
<pages>4--2</pages>
<institution>University of Utrecht,</institution>
<contexts>
<context position="9060" citStr="Meyer-Viol (1995)" startWordPosition="1353" endWordPosition="1354">ure in the form of lexical actions, inducing both nodes and annotations. Thus partial trees grow incrementally, driven by procedures associated with particular words as they are encountered, with a pointer, ♦, recording the parser’s progress (unlike van Leusen and Muskens (2003), partial trees are part of the model and, unlike in other frameworks, incrementality is word-by-word rather than sentence-by-sentence). Complete individual trees are taken to correspond to predicate-argument structures (with an event term associated with tense, suppressed in this paper). The epsilon calculus (see e.g. Meyer-Viol (1995)) provides the semantic representation language. Complex structures are obtained via a general tree-adjunction operation licensing the construction of so-called linked trees, hosting information that is eventually transferred onto the tree FROM which the link is made (Kempson et al 2001). Structures projected as such paired trees range over restrictive relatives, nonrestrictive relatives, conditionals, topic structures and appositions as here. As the semantic representations employ the epsilon calculus, eventual compound epsilon terms (e.g. c, x, P(x)) are constructed incrementally through lin</context>
</contexts>
<marker>Meyer-Viol, 1995</marker>
<rawString>Wilfried Meyer-Viol. Instantial Logic. PhD thesis, University of Utrecht, 1995. Matthew Purver, Ronnie Cann, and Ruth Kempson. Grammars as parsers: Meeting the dialogue challenge. Research on Language and Computation, 4(2-3):289–326, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Schlangen</author>
</authors>
<title>A Coherence-Based Approach to the Interpretation of NonSentential Utterances in Dialogue.</title>
<date>2003</date>
<tech>PhD thesis,</tech>
<institution>University of Edinburgh,</institution>
<contexts>
<context position="4382" citStr="Schlangen (2003)" startWordPosition="660" endWordPosition="661">ecedent utterance “topical”. The semantic effect of acknowledgement is then derived by applying an appropriately defined utterance type for such fragments to the newly constructed context. A distinct form of contextual accommodation is employed to model so-called helpful rejection fragments, as in (3) (without the reformulation), whereby a whquestion is accommodated in the context by abstracting over the content of one of the sub-constituents of the previous utterance. The content of the correction is derived by applying this wh-question in the context to the content of the fragment (see also Schlangen (2003) for another classification and analysis). In contrast, the alternative explored here is whether phenomena such as (1)-(2), both of which are non-repetitive next-speaker contributions, can be handled uniformly using the mechanisms for structure-building made available in the core grammar, without recourse to construction-specific extensions of that grammar and contextual accommodation rules. This is because, in our view, the range of interpretations these fragments receive in actual dialogue seem to form continua with no well-defined boundaries and mixing of functions (see also comments in Sch</context>
<context position="15849" citStr="Schlangen (2003)" startWordPosition="2417" endWordPosition="2418">e parse tree of what he has heard in a monotonic fashion, although he only utters the relevant subpart of A’s utterance. Indeed, this update is what B is seeking to clarify, correct or acknowledge. In DS, B can reuse the already constructed (partial) parse tree in his context, rather than having to rebuild an entire propositional tree or subtree3. 2The account extends the implementation reported in Purver et al. (2006) 3Given the DS concept of linked trees projecting propositional content, we anticipate that this mechanism will be extendable to fragment construal involving inference (see e.g. Schlangen (2003), Schlangen and Lascarides (2003)) 133 4 NSU fragments in Dynamic Syntax 4.1 Non-repetitive Acknowledgement From a DS perspective, phenomena like reformulations as in (1), or extensions to what one understands of the other speaker’s utterance, (2), can be handled with exactly the same mechanisms as the sentence-internal phenomenon independently identifiable as apposition, as in (4), and equally usable by a single individual as a means of incrementally reformulating, correcting or extending what they have just uttered. The update rule for such structures, applicable to all terms, takes the two </context>
</contexts>
<marker>Schlangen, 2003</marker>
<rawString>David Schlangen. A Coherence-Based Approach to the Interpretation of NonSentential Utterances in Dialogue. PhD thesis, University of Edinburgh, 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Schlangen</author>
<author>Alex Lascarides</author>
</authors>
<title>The interpretation of non-sentential utterances in dialogue.</title>
<date>2003</date>
<booktitle>In Proceedings of the 4th SIGdial Workshop on Discourse and Dialogue,</booktitle>
<pages>62--71</pages>
<location>Sapporo, Japan,</location>
<contexts>
<context position="15882" citStr="Schlangen and Lascarides (2003)" startWordPosition="2419" endWordPosition="2422">at he has heard in a monotonic fashion, although he only utters the relevant subpart of A’s utterance. Indeed, this update is what B is seeking to clarify, correct or acknowledge. In DS, B can reuse the already constructed (partial) parse tree in his context, rather than having to rebuild an entire propositional tree or subtree3. 2The account extends the implementation reported in Purver et al. (2006) 3Given the DS concept of linked trees projecting propositional content, we anticipate that this mechanism will be extendable to fragment construal involving inference (see e.g. Schlangen (2003), Schlangen and Lascarides (2003)) 133 4 NSU fragments in Dynamic Syntax 4.1 Non-repetitive Acknowledgement From a DS perspective, phenomena like reformulations as in (1), or extensions to what one understands of the other speaker’s utterance, (2), can be handled with exactly the same mechanisms as the sentence-internal phenomenon independently identifiable as apposition, as in (4), and equally usable by a single individual as a means of incrementally reformulating, correcting or extending what they have just uttered. The update rule for such structures, applicable to all terms, takes the two type e terms so formed and yields</context>
</contexts>
<marker>Schlangen, Lascarides, 2003</marker>
<rawString>David Schlangen and Alex Lascarides. The interpretation of non-sentential utterances in dialogue. In Proceedings of the 4th SIGdial Workshop on Discourse and Dialogue, pages 62–71, Sapporo, Japan, July 2003. Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noor van Leusen</author>
<author>Reinhard Muskens</author>
</authors>
<title>Construction by description in discourse representation.</title>
<date>2003</date>
<booktitle>Meaning: The Dynamic Turn, chapter 12,</booktitle>
<pages>33--65</pages>
<editor>In J. Peregrin, editor,</editor>
<marker>van Leusen, Muskens, 2003</marker>
<rawString>Noor van Leusen and Reinhard Muskens. Construction by description in discourse representation. In J. Peregrin, editor, Meaning: The Dynamic Turn, chapter 12, pages 33–65. 2003.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>