<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000012">
<title confidence="0.963938">
Tagging and Morphological Disambiguation of Turkish Text
</title>
<author confidence="0.930072">
Kemal Oflazer and ilker Kuruaz
</author>
<affiliation confidence="0.871225">
Department of Computer Engineering and Information Science
Bilkent University
Bilkent, Ankara, TURKEY
</affiliation>
<email confidence="0.9932">
fko,kuruozl@cs.bilkent.edu.tr
</email>
<sectionHeader confidence="0.993796" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999956171428572">
Automatic text tagging is an important
component in higher level analysis of text
corpora, and its output can be used in
many natural language processing applica-
tions. In languages like Turkish or Finnish,
with agglutinative morphology, morpholog-
ical disambiguation is a very crucial pro-
cess in tagging, as the structures of many
lexical forms are morphologically ambigu-
ous. This paper describes a POS tagger for
Turkish text based on a full-scale two-level
specification of Turkish morphology that is
based on a lexicon of about 24,000 root
words. This is augmented with a multi-
word and idiomatic construct recognizer,
and most importantly morphological dis-
ambiguator based on local neighborhood
constraints, heuristics and limited amount
of statistical information. The tagger also
has functionality for statistics compilation
and fine tuning of the morphological an-
alyzer, such as logging erroneous morpho-
logical parses, commonly used roots, etc.
Preliminary results indicate that the tag-
ger can tag about 98-99% of the texts ac-
curately with very minimal user interven-
tion. Furthermore for sentences morpho-
logically disambiguated with the tagger, an
LFG parser developed for Turkish, gener-
ates, on the average, 50% less ambiguous
parses and parses almost 2.5 times faster.
The tagging functionality is not specific to
Turkish, and can be applied to any lan-
guage with a proper morphological analysis
interface.
</bodyText>
<sectionHeader confidence="0.999336" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999809666666667">
As a part of large scale project on natural language
processing for Turkish, we have undertaken the de-
velopment of a number of tools for analyzing Turk-
ish text. This paper describes one such tool — a text
tagger for Turkish. The tagger is based on a full
scale two-level morphological specification of Turk-
ish (Oflazer, 1993), implemented on the PC-KIMMO
environment (Antworth, 1990). In this paper, we de-
scribe the functionality and the performance of our
tagger along with various techniques that we have
employed to deal with various sources of ambigui-
ties.
</bodyText>
<sectionHeader confidence="0.954725" genericHeader="method">
2 Tagging Text
</sectionHeader>
<bodyText confidence="0.999103434782609">
Automatic text tagging is an important step in dis-
covering the linguistic structure of large text cor-
pora. Basic tagging involves annotating the words
in a given text with various pieces of information,
such as part-of-speech and other lexical features.
Part-of-speech tagging facilitates higher-level analy-
sis, such as parsing, essentially by performing a cer-
tain amount of ambiguity resolution using relatively
cheaper methods.
The most important functionality of a tagger is
the resolution of the structure and parts-of-speech of
the lexical items in the text. This, however, is not a
very trivial task since many words are in general am-
biguous in their part-of-speech for various reasons.
In English, for example a word such as make can
be verb or a noun. In Turkish, even though there
are ambiguities of such sort, the agglutinative na-
ture of the language usually helps resolution of such
ambiguities due to morphotactical restrictions. On
the other hand, this very nature introduces another
kind of ambiguity, where a lexical form can be mor-
phologically interpreted in many ways. For example,
the word evin, can be broken down as:1
</bodyText>
<sectionHeader confidence="0.361783" genericHeader="method">
evin POS English
</sectionHeader>
<listItem confidence="0.839324714285714">
1. N(ev)-1-2SG-POSS (your) house
2. N (ev)+GEN of the house
3. N(evin) wheat germ
If, however, the local context is considered, it may
be possible to resolve the ambiguity as in:
1 Output of the morphological analyzer is edited for
clarity.
</listItem>
<page confidence="0.977195">
144
</page>
<equation confidence="0.603845">
sen-in ev-in
PN(you)-I-GEN N(ev)-F2SG-POSS
your house
evin
N(ev)+GEN N(door)+3SG-POSS
</equation>
<bodyText confidence="0.71764725">
door of the house
using genitive-possessive agreement constraints.
As a more complex case we can give the following:
ahnmi
</bodyText>
<equation confidence="0.889515928571429">
1 ADJ(a1)+2SG-POSS+NtoVO+NARR+3SG2
(V) (it) was your red (one)
2 ADJ(a1)+GEN+NtoVO+NARR+3SG
(V) (it) belongs to the red (one)
3 N(ahn)+NtoVO+NARR+3SG
(V) (it) was a forehead
4 V(a1)+PASS+VtoAdj(mis)
(ADJ) (a) taken (object)
5 V(a1)+PASS+NARR+3SG
(V) (it) was taken
6 V(ahn)+VtoAdj(mis)
(ADJ) (an) offended (person)
7 V(ahn)+NARR+3SG
(V) (s/he) was offended
</equation>
<bodyText confidence="0.971879444444444">
It is in general rather hard to select one of these
interpretations without doing substantial analysis of
the local context, and even then one can not fully
resolve such (usually semantic) ambiguities.
An additional problem that can be off-loaded to
the tagger is the recognition of multi-word or id-
iomatic constructs. In Turkish, which abounds with
such forms, such a recognizer can recognize these
very productive multi-word constructs, like
</bodyText>
<equation confidence="0.96957275">
ko§-a ko§-a
rund-OPT+3SG rund-OPT+3SG
yap-ar yap-ma-z
do+AOR+3SG do-I-NEG+AOR+3SG
</equation>
<bodyText confidence="0.959159194444444">
where both components are verbal but the com-
pound construct is a manner or temporal adverb.
This relieves the parser from dealing with them at
the syntactic level. Furthermore, it is also possible
to recognize various proper nouns with this func-
tionality. Such help from a tagging functionality
would simplify the development of parsers for Turk-
ish (Demir, 1993; Giingiirdii, 1993).
Researchers have used a number of different ap-
proaches for building text taggers. Karlsson (Karls-
son, 1990) has used a rule-based approach where
the central idea is to maximize the use of mor-
phological information. Local constraints expressed
as rules basically discard many alternative parses
whenever possible. Brill (Brill, 1992) has designed
a rule-based tagger for English. The tagger works
by automatically recognizing rules and remedying
its weaknesses, thereby incrementally improving its
performance. More recently, there has been a rule-
&apos;In Turkish, all adjectives can be used as nouns, hence
with very minor differences adjectives have the same
morphotactics as nouns.
based approach implemented with finite-state ma-
chines (Koskenniemi et al., 1992; Voutilainen and
Tapanainen, 1993).
A completely different approach to tagging uses
statistical methods, (e.g., (Church, 1988; Cutting et
al., 1993)). These systems essentially train a statis-
tical model using a previously hand-tagged corpus
and provide the capability of resolving ambiguity on
the basis of most likely interpretation. The models
that have been widely used assume that the part-of-
speech of a word depends on the categories of the two
preceding words. However, the applicability of such
approaches to word-order free languages remains to
be seen.
</bodyText>
<subsectionHeader confidence="0.999424">
2.1 An example
</subsectionHeader>
<bodyText confidence="0.963608">
We can describe the process of tagging by showing
the analysis for the sentence:
4ten diiner anmez evimizin yakintnda bulunan
derin Olde yizerek gev§emek en biiyiik zevkimdi.
(Relaxing by swimming the deep lake near our
house, as soon as I return from work was my greatest
pleasure.)
which we assume has been processed by the morpho-
logical analyzer with the following output:
</bodyText>
<table confidence="0.763172702702703">
i0en POS
1. N(i§)+ABL N+
(loner
N(dOner)
V(don)+AOR+3SG V+
V(dOn)+VtoAdj(er) ADJ
clonmez
V(don)+NEG+AOR+3SG V+
V(don)+VtoAdj(mez) ADJ
evimizin
1. N(ev)+1PL—POSS+GEN N+
yakxninda
ADJ(yalun)+3SG—POSS+LOC N+
ADJ(yakin)+2SG—POSS+LOC N
bulunan
V(bul)+PASS+VtoADJ(yan) ADJ
V(bulun)+VtoADJ(yan) ADJ+
derin
N(deri)+2SG—POSS
ADJ(derin) ADJ+
V(der)+IMP+2PL V
V(de)+VtoADJ(er)+2SG—POSS N
V(de)+VtoADJ(er)+GEN
golde
1. N(gii1)+LOC N+
yilzerek
1. V(yilz)+VtoADV(yerek) ADV+
gevemek
1. V(gev§e)+VtoINF(mak) V+
en
N(en)
ADV(en) ADV+
büyük
1. ADJ(biiyiik) ADJ+
zevkimdi
1. N(zevk)+1SG—POSS+ V+
NtoVO+PAST+3SG
</table>
<page confidence="0.996691">
145
</page>
<bodyText confidence="0.999584">
Although there are a number of choices for tags
for the lexical items in the sentence, almost all ex-
cept one set of choices give rise to ungrammatical or
implausible sentence structures.&apos; There are number
of points that are of interest here:
</bodyText>
<listItem confidence="0.999474230769231">
• the construct diiner danmez formed by two
tensed verbs, is actually a temporal adverb
meaning ... as soon as .. return(s), hence these
two lexical items can be coalesced into a single
lexical item and tagged as a temporal adverb.
• The second person singular possessive interpre-
tation of yakzninda is not possible since this
word forms a simple compound noun phrase
with the previous lexical item and the third per-
son singular possessive morpheme functions as
the compound marker, agreeing with the agree-
ment of the previous genitive case-marked form.
• The word derin (deep) is the modifier of a sim-
ple compound noun derin 01 (deep lake) hence
the second choice can safely be selected. The
verbal root in the third interpretation is very
unlikely to be used in text, let alone in sec-
ond person imperative form. The fourth and
the fifth interpretations are not very plausible
either. The first interpretation (meaning your
skin) may be a possible choice but can be dis-
carded in the middle of a longer compound noun
phrase.
• The word en preceding an adjective indicates
a superlative construction and hence the noun
reading can be discarded.
</listItem>
<sectionHeader confidence="0.925354" genericHeader="method">
3 The Tagging Tool
</sectionHeader>
<bodyText confidence="0.999253">
The tagging tool that we have developed integrates
the following functionality with a user interface, as
shown in Figure 1, implemented under X-windows.
It can be used interactively, though user interaction
is very rare and (optionally) occurs only when the
disambiguation can not be done by the tagger.
</bodyText>
<listItem confidence="0.999844">
1. Morphological analysis with error logging,
2. Multi-word and idiomatic construct recogni-
tion,
3. Morphological disambiguation by using con-
straints, heuristics and certain statistics,
4. Root and lexical form statistics compilation,
</listItem>
<bodyText confidence="0.994967666666667">
The second and the third functionalities are imple-
mented by a rule-base subsystem which allows one
to write rules of the following form:
</bodyText>
<equation confidence="0.52675">
Ci:Al; C2:A2; Cfl:An.
</equation>
<bodyText confidence="0.96927425">
where each Ci is a set of constraints on a lexical form,
and the corresponding Ai is an action to be executed
on the set of parses associated with that lexical form,
only when all The conditions are satisfied.
</bodyText>
<footnote confidence="0.872514">
3The correct choices of tags are marked with
</footnote>
<bodyText confidence="0.997551">
The conditions refer to any available morpholog-
ical or positional feature associated with a lexical
form such as:
</bodyText>
<listItem confidence="0.99829125">
• Absolute or relative lexical position (e.g., sen-
tence initial or final, or 1 after the current word,
etc.)
• root and final POS category,
• derivation type,
• case, agreement (number and person), and cer-
tain semantic markers, for nominal forms,
• aspect and tense, subcategorization require-
ments, verbal voice, modality,and sense for ver-
bal forms
• subcategorization requirements for postposi-
tions.
</listItem>
<bodyText confidence="0.989922727272727">
Conditions may refer to absolute feature values or
variables (as in Prolog, denoted by the prefix _ in the
following examples) which are then used to link con-
ditions. All occurrences of a variable have to unify
for the match to be considered successful. This fea-
ture is powerful and and lets us specify in a rather
general way, (possibly long distance) feature con-
straints in complex NPs, PPs and VPs. This is a
part of our approach that distinguishes it from other
constraint-based approaches.
The actions are of the following types:
</bodyText>
<listItem confidence="0.9965671">
• Null action: Nothing is done on the matching
parse.
• Delete: Removes the matching parse if more
than one parse for the lexical form are still in
the set associated with the lexical form.
• Output: Removes all but the matching parse
from the set effectively tagging the lexical form
with the matching parse.
• Compose: Composes a new parse from various
matching parses, for multi-word constructs.
</listItem>
<bodyText confidence="0.787533">
These rules are ordered, and applied in the given
order and actions licensed by any matching rule are
applied. One rule formalism is used to encode both
multi-word constructs and constraints.
</bodyText>
<subsectionHeader confidence="0.998433">
3.1 The Multi-word Construct Processor
</subsectionHeader>
<bodyText confidence="0.999863545454546">
As mentioned before, tagging text on lexical item ba-
sis may generate spurious or incorrect results when
multiple lexical items act as single syntactic or se-
mantic entity. For example, in the sentence 5irin mi
irin bir kopek koqa koqa geldi (A very cute dog came
running) the fragment qirin mi qirin constitutes a
duplicated emphatic adjective in which there is an
embedded question suffix mi (written separately in
Turkish),4 and the fragment koqa koqa is a dupli-
cated verbal construction, which has the grammat-
ical role of manner adverb in the sentence, though
</bodyText>
<footnote confidence="0.8770055">
4 If, however, the adjective Orin was not repeated,
then we would have a question formation.
</footnote>
<page confidence="0.99695">
146
</page>
<figureCaption confidence="0.999505">
Figure 1: User interface of tagging tool
</figureCaption>
<figure confidence="0.507343404255319">
(Filo o Tagged File Stat file o) Statistics File Global ( Tagging Rules
doGrusu
krtsgf
Arr.&apos;
key
burada
gOrmUS
;rrertka
yerlilerint
adamdan
rirenTe&apos;
gOre
mINIr
bundle&amp;quot;
— mls/rIn [4 CPIS Cla Cla C9333 .• CinTstrielln&amp;quot; ((*CAT• N) CR •mIsIr&apos;)(•PGR. 3SG)(rCA5Er GEN)))
— anavatanI [3 CONS C933 C5a) Canavatiant-Pi• ((CAT• N) (R&apos; &apos;enavatan•)(rAGR* 3SG)f•P0SS•
3SG)C•CASEr NOM)))
olarak [11 (oloyerrik• al•C•r• (.1) C8 &apos;ol&apos;)(rSUliCAT• NOM)(•COMV• 0811 &amp;quot; yar ) (•SUB• ATT)))
900terllen [2 CCriS C93131 .• (gOsterfilityrin- firCAT• V)(.11. •gOster&amp;quot;)(•VOICEr PASS)(•CON, POI
Yan•)(l•AGR•• 3SG)f•C05E* NOM)))
per IS CONS C930 C930 C930 C22a1 (*yet. ((°CATT N) CR &amp;quot;yer&amp;quot;)(AGR. 3SC)C.CASE. NOM)))
, [11 : (Cofer. PUNCT)(*R• •.•)))
bugUnkU [2 CONS C93b1 CbugUnkli• ((CAT• N)(eR. &amp;quot;bugUN -)(•SUB. TE111)(vCONV• ADZ
k( )(ACR 35G)C•CASE• 9C40))
adIyia [11 • CadIryle ((CAT• N)(1R. &apos;ad/narria•)f*POSS. 3SG)(*C05E0 /NS)))
(bra (pier [RULE m271 : ((*CAT. N) (R •karay(pler&apos;)(eSUB* PROP))
, [11 •• C. ((rCAT• PUNCT)C.R. •••n)
Paha [11 : (&amp;quot;Paha&amp;quot; (OlCAT. POW Coli• &amp;quot; doh ) (*SUB&apos; COPINVIAT(VE)(••SUB* TESP)))
doGrusu (2 CCMS C93b) : CrioGrutsir ((CATo 027) CR doG r u&amp;quot; ) (*SUB. QUAL)(*AGR* 3SG)f*POSS•
3SG)(•C05Er NOM)))
— . [11 C, f(rCAT* PUNC0011* &amp;quot;..&amp;quot;)))
— kristof kolomb [RULE 0271 : ((CAP N)foRo •kristof kalterb.)C4508 PRCP))
Skip Parses Less Than 2 CI=1 Text Processed (e■
100
Stat. 0.0% Rule. 5.7% Cons. 58.5% User 0.0% Unamb. 35.8% Amb. 0.0%
(Statist(cs Setup)
Errors
o MSTA 65 (0.67) crnisir*sH&amp;quot; (MAT., fl)(•ft• &amp;quot;rnislr)(MGR* 350)(•P055. 3SG)f*GASE* 8090)
o M 0 (0.33) Callsirroir 5oc0r.(4)(.6*-n000I(e000. 3505•1205E. ACc)))
o•••• None ••■•
(01594. Inter KURUOZ Bilkent University
No of parses: 0 7(13.2*) 1 19(35.00&gt;
Word Parsed nese! Star
2 16 (30.20) 3 7(13.2*) • El (15.1e) Sand more 1 (1.9e)
Ste% 0 OH 11.1.0 65 On Cons, On User 55 On
IrA
113111311=Ell
</figure>
<bodyText confidence="0.997941454545454">
both of the constituent forms are verbal construc-
tions. The purpose of the multi-word construct pro-
cessor is to detect and tag such productive con-
structs in addition to various other semantically co-
alesced forms such as proper nouns, etc.
The following is a set of multi-word constructs for
Turkish that we handle in our tagger. This list is
not meant to be comprehensive, and new construct
specifications can easily be added. It is conceivable
that such a functionality can be used in almost any
language.
</bodyText>
<listItem confidence="0.981910722222222">
1. duplicated optative and 3SG verbal forms func-
tioning as manner adverb, e.g., ko§a ko§a, aorist
verbal forms with root duplications and sense
negation functioning as temporal adverbs, e.g.,
yapar yapmaz, and duplicated verbal and de-
rived adverbial forms with the same verbal root
acting as temporal adverbs, e.g., gitti gideli,
2. duplicated compound nominal form construc-
tions that act as adjectives, e.g., giizeller giizeli,
and emphatic adjectival forms involving the
question suffix, e.g., glad mi
3. adjective or noun duplications that act as man-
ner adverbs, e.g., hzzlz hzzlz, ev ev,
4. idiomatic word sequences with specific usage
whose semantics is not compositional, e.g., yanz
szra, hig olmazsa, and idiomatic forms which are
never used singularly, e.g., giiriil giiriil,
5. proper nouns, e.g., Jimmy Carter, Topkapz
</listItem>
<subsectionHeader confidence="0.357172">
Sarayz (Topkapi Palace).
</subsectionHeader>
<bodyText confidence="0.858732333333333">
6. compound verb formations which are formed by
a lexically adjacent, direct or oblique object and
a verb, which for the purposes of syntactic anal-
ysis, may be considered as single lexical item.
We can give the following example for specifying
a multi-word construct:5
</bodyText>
<equation confidence="0.5486645">
Lex=_Wl, Root=_R1, Cat=V, Aspect=AOR, Agr=3SG,
Sense=POS: ;
Lex=_W2, Root=_R1, Cat=V, Aspect=AOR, Agr=3SG,
Sense = NEG:
Compose=((*CAT* ADV)(*R* n_Wl _W2 (_R1)&amp;quot;)
(*SUB* TEMP)).
</equation>
<bodyText confidence="0.999604333333333">
This rule would match any adjacent verbal lexical
forms with the same root, both with the aorist as-
pect, and 3SG agreement. The first verb has to be
positive and the second one negated. When found,
a composite lexical form with an temporal adverb
part-of-speech, is then generated. The original ver-
bal root may be recovered from the root of the com-
posed form for any subcategorization checks, at the
syntactic level.
</bodyText>
<subsectionHeader confidence="0.9982935">
3.2 Using constraints for morphological
ambiguity resolution
</subsectionHeader>
<bodyText confidence="0.8432925">
Morphological analysis does not have access to syn-
tactic context, so when the morphological structure
</bodyText>
<footnote confidence="0.989956">
5The output of the morphological analyzer is actually
a feature-value list in the standard LISP format.
</footnote>
<page confidence="0.996691">
147
</page>
<bodyText confidence="0.999926714285714">
of a lexical form has several distinct analyses, it
is not possible to disambiguate such cases except
maybe by using root usage frequencies. For disam-
biguation one may have to use information provided
by sentential position and the local morphosyntac-
tic context. Voutilainen and Heikkila (Voutilainen et
al., 1992) have proposed a constraint grammar ap-
proach where one specifies constraints on the local
context of a word to disambiguate among multiple
readings of a word. Their approach has, however,
been applied to English where morphological infor-
mation has rather little use in such resolution.
In our tagger, constraints are applied on each
word, and check if the forms within a specified neigh-
borhood of the word satisfy certain morphosyntactic
or positional restrictions, and/or agreements. Our
constraint pattern specification is very similar to
multi-word construct specification. Use of variables,
operators and actions, are same except that the com-
pose actions does not make sense here. The follow-
ing is an example constraint that is used to select
the postpositional reading of certain word when it is
preceded by a yet unresolved nominal form with a
certain case. The only requirement is that the case
of the nominal form agrees with the case subcatego-
rization requirement of the following postposition.
(LP = 0 refers to current word, LP = 1 refers to
next word.)
</bodyText>
<equation confidence="0.968648">
LP = 0, Case = _C : Output;
LP = 1, Cat = POSTP, Subcat = _C : Output.
</equation>
<bodyText confidence="0.977883923076923">
When a match is found, the matching parses from
both words are selected and the others are discarded.
This one constraint disambiguates almost all of the
postpositions and their arguments, the exceptions
being nominal words which semantically convey the
information provided by the case (such as words in-
dicating direction, which may be used as if they have
a dative case).
Finally the following example constraint deletes
the sentence final adjectival readings derived from
verbs, effectively preferring the verbal reading (as
Turkish is a SOV language.)
Cat = V, Finalcat = ADJ, SP = END : Delete.
</bodyText>
<sectionHeader confidence="0.965732" genericHeader="evaluation">
4 Performance of the Tagger
</sectionHeader>
<bodyText confidence="0.9999868">
We have performed some preliminary experiments
to assess the effectiveness of our tagger. We have
used about 250 constraints for Turkish. Some of
these constraints are very general as the postposition
rule above, while some are geared towards recogni-
tion of NP&apos;s of various sorts and a small number ap-
ply certain syntactic heuristics. In this section, we
summarize our preliminary results. Table 1 presents
some preliminary results about the our tagging ex-
periments.
Although the texts that we have experimented
with are rather small, the results indicate that our
approach is effective in disambiguating morpholog-
ical structures, and hence POS, with minimal user
intervention. Currently, the speed of the tagger is
limited by essentially that of the morphological ana-
lyzer, but we have ported the morphological analyzer
to the XEROX TWOL system developed by Kart-
tunen and Beesley (Karttunen and Beesley, 1992).
This system can analyze Turkish word forms at
about 1000 forms/sec on SparcStation 10&apos;s. We in-
tend to integrate this to our tagger soon, improving
its speed performance considerably.
We have tested the impact of morphological dis-
ambiguation on the performance of a LFG parser
developed for Turkish (Giingordii, 1993; GiingOrdii
and Oflazer, 1994). The input to the parser was dis-
ambiguated using the tool developed and the results
were compared to the case when the parser had to
consider all possible morphological ambiguities it-
self. For a set of 80 sentences considered, it can be
seen that (Table 2), morphological disambiguation
enables almost a factor of two reduction in the av-
erage number of parses generated and over a factor
of two speed-up in time.
</bodyText>
<sectionHeader confidence="0.999575" genericHeader="conclusions">
5 Conclusions
</sectionHeader>
<bodyText confidence="0.999937523809524">
This paper has presented an overview of a tool for
tagging text along with various issues that have
come up in disambiguating morphological parses of
Turkish words. We have noted that the use of con-
straints is very effective in morphological disam-
biguation. Preliminary results indicate that the tag-
ger can tag about 98-99% of the texts accurately
with very minimal user intervention, though it is
conceivable that it may do worse on more substantial
text — but there is certainly room for improvement in
the mechanisms provided. The tool also provides for
recognition of multi-word constructs that behave as
a single syntactic and semantic entity in higher level
analysis, and the compilation of information for fine-
tuning of the morphological analyzer and the tagger
itself. We, however, feel that our approach does not
deal satisfactorily with most aspects of word-order
freeness. We are currently working on an extension
whereby the rules do not apply immediately but vote
on their preferences and a final global vote tally de-
termines the assignments.
</bodyText>
<sectionHeader confidence="0.999003" genericHeader="acknowledgments">
6 Acknowledgment
</sectionHeader>
<bodyText confidence="0.945615">
This research was supported in part by a NATO Sci-
ence for Stability Program Grant, TU-LANGUAGE.
</bodyText>
<sectionHeader confidence="0.999148" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.993461">
E. L. Antworth. 1990. PC-KIMMO: A Two-level
Processor for Morphological Analysis. Summer In-
stitute of Linguistics, Dallas, Texas.
</reference>
<page confidence="0.999373">
148
</page>
<tableCaption confidence="0.999636">
Table 1: Statistics on texts tagged, and tagging and disambiguation results
</tableCaption>
<table confidence="0.9997545">
Text Words Morphological Parse Distribution
0 1 2 3 4 &gt; 5
1 468 7.3% 28.7% 41.1% 11.1% 7.1 % 4.7%
2 573 1.0% 30.2% 37.3% 13.1% 11.1% 7.3%
3 533 3.8% 24.8% 38.1% 19.1% 9.2 % 5.0%
4 7004 3.9% 17.2% 41.5% 15.6% 11.7% 10.1%
Note: Words with zero parses are proper names which are not in the lexicon of the morphological analyzer.
Text % Correctly % Tagged % Correctly Automatic Disambiguation by
Tagged by Tagged
Automatically User Total
Multi-word Constraints
Rules
1 98.5 1.0 99.1 10.1 67.7
2 98.5 0.3 98.8 7.5 74.4
3 97.8 1.1 98.9 3.1 74.5
4 95.4 1.7 97.1 4.2 76.4
</table>
<tableCaption confidence="0.971714">
Table 2: Impact of disambiguation on parsing performance
</tableCaption>
<table confidence="0.8366238">
No disambiguation With disambiguation Ratios
Avg. Length Avg. Avg. Avg. Avg. parses speed-up
(words) parses time (sec) parses time (sec)
5.7 5.78 29.11 3.30 11.91 1.97 2.38
Note: The ratios are the averages of the sentence by sentence ratios.
</table>
<reference confidence="0.999220102040816">
E. Brill. 1992. A simple rule-based part-of-speech
tagger. In Proceedings of the Third Conference on
Applied Computational Linguistics, Trento, Italy.
K. W. Church. 1988. A stochastic parts program
and noun phrase parser for unrestricted text. In
Proceedings of the Second Conference on Applied
Natural Language Processing (ACL), pages 136-
143.
D. Cutting, J. Kupiec, J. Pedersen, and P. Sibun.
1993. A practical part-of-speech tagger. Technical
report, Xerox Palo Alto Research Center.
C. Demir. 1993. An ATN grammar for Turkish.
Master&apos;s thesis, Department of Computer Engi-
neering and Information Sciences, Bilkent Univer-
sity, Ankara, Turkey, July.
Z. GiingOrdii and K. Oflazer. 1994. Parsing Turkish
using the Lexical-Functional Grammar formalism.
In Proceedings of COLING-94, the 15th Interna-
tional Conference on Computational Linguistics,
Kyoto, Japan.
Z. Giingordii. 1993. A Lexical-Functional Gram-
mar for Turkish. Master&apos;s thesis, Department of
Computer Engineering and Information Sciences,
Bilkent University, Ankara, Turkey, July.
F. Karlsson. 1990. Constraint grammar as a frame-
work for parsing running text. In Proceedings of
COLING-90, the 13th International Conference
on Computational Linguistics, volume 3, pages
168-173, Helsinki, Finland.
L. Karttunen and K. R. Beesley. 1992. Two-level
rule compiler. Technical Report, XEROX Palo
Alto Research Center.
K. Koskenniemi, P. Tapanainen, and A. Voutilainen.
1992. Compiling and using finite-state syntactic
rules. In Proceedings of COLING-92, the 14th
International Conference on Computational Lin-
guistics, volume 1, pages 156-162, Nantes, France.
K. Oflazer. 1993. Two-level description of Turkish
morphology. In Proceedings of the Sixth Confer-
ence of the European Chapter of the Association
for Computational Linguistics, April. A full ver-
sion appears in Literary and Linguistic Comput-
ing, Vol.9 No.2, 1994.
A. Voutilainen and P. Tapanainen. 1993. Ambiguity
resolution in a reductionistic parser. In Proceed-
ings of EACL&apos;93, Utrecht, Holland.
A. Voutilainen, J. Heikkila, and A. Anttila. 1992.
Constraint Grammar of English. University of
Helsinki.
</reference>
<page confidence="0.99894">
149
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.913718">
<title confidence="0.999315">Tagging and Morphological Disambiguation of Turkish Text</title>
<author confidence="0.97726">Oflazer Kuruaz</author>
<affiliation confidence="0.9999215">Department of Computer Engineering and Information Science Bilkent University</affiliation>
<address confidence="0.999656">Bilkent, Ankara, TURKEY</address>
<email confidence="0.99523">fko,kuruozl@cs.bilkent.edu.tr</email>
<abstract confidence="0.998279916666667">Automatic text tagging is an important component in higher level analysis of text corpora, and its output can be used in many natural language processing applications. In languages like Turkish or Finnish, with agglutinative morphology, morphological disambiguation is a very crucial process in tagging, as the structures of many lexical forms are morphologically ambiguous. This paper describes a POS tagger for Turkish text based on a full-scale two-level specification of Turkish morphology that is based on a lexicon of about 24,000 root words. This is augmented with a multiword and idiomatic construct recognizer, and most importantly morphological disambiguator based on local neighborhood constraints, heuristics and limited amount of statistical information. The tagger also has functionality for statistics compilation and fine tuning of the morphological analyzer, such as logging erroneous morphological parses, commonly used roots, etc. Preliminary results indicate that the tagger can tag about 98-99% of the texts accurately with very minimal user intervention. Furthermore for sentences morphologically disambiguated with the tagger, an LFG parser developed for Turkish, generates, on the average, 50% less ambiguous parses and parses almost 2.5 times faster. The tagging functionality is not specific to Turkish, and can be applied to any language with a proper morphological analysis interface.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>E L Antworth</author>
</authors>
<title>PC-KIMMO: A Two-level Processor for Morphological Analysis. Summer Institute of Linguistics,</title>
<date>1990</date>
<location>Dallas, Texas.</location>
<contexts>
<context position="2040" citStr="Antworth, 1990" startWordPosition="307" endWordPosition="308">, on the average, 50% less ambiguous parses and parses almost 2.5 times faster. The tagging functionality is not specific to Turkish, and can be applied to any language with a proper morphological analysis interface. 1 Introduction As a part of large scale project on natural language processing for Turkish, we have undertaken the development of a number of tools for analyzing Turkish text. This paper describes one such tool — a text tagger for Turkish. The tagger is based on a full scale two-level morphological specification of Turkish (Oflazer, 1993), implemented on the PC-KIMMO environment (Antworth, 1990). In this paper, we describe the functionality and the performance of our tagger along with various techniques that we have employed to deal with various sources of ambiguities. 2 Tagging Text Automatic text tagging is an important step in discovering the linguistic structure of large text corpora. Basic tagging involves annotating the words in a given text with various pieces of information, such as part-of-speech and other lexical features. Part-of-speech tagging facilitates higher-level analysis, such as parsing, essentially by performing a certain amount of ambiguity resolution using relat</context>
</contexts>
<marker>Antworth, 1990</marker>
<rawString>E. L. Antworth. 1990. PC-KIMMO: A Two-level Processor for Morphological Analysis. Summer Institute of Linguistics, Dallas, Texas.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Brill</author>
</authors>
<title>A simple rule-based part-of-speech tagger.</title>
<date>1992</date>
<booktitle>In Proceedings of the Third Conference on Applied Computational Linguistics,</booktitle>
<location>Trento, Italy.</location>
<contexts>
<context position="5440" citStr="Brill, 1992" startWordPosition="832" endWordPosition="833">es the parser from dealing with them at the syntactic level. Furthermore, it is also possible to recognize various proper nouns with this functionality. Such help from a tagging functionality would simplify the development of parsers for Turkish (Demir, 1993; Giingiirdii, 1993). Researchers have used a number of different approaches for building text taggers. Karlsson (Karlsson, 1990) has used a rule-based approach where the central idea is to maximize the use of morphological information. Local constraints expressed as rules basically discard many alternative parses whenever possible. Brill (Brill, 1992) has designed a rule-based tagger for English. The tagger works by automatically recognizing rules and remedying its weaknesses, thereby incrementally improving its performance. More recently, there has been a rule&apos;In Turkish, all adjectives can be used as nouns, hence with very minor differences adjectives have the same morphotactics as nouns. based approach implemented with finite-state machines (Koskenniemi et al., 1992; Voutilainen and Tapanainen, 1993). A completely different approach to tagging uses statistical methods, (e.g., (Church, 1988; Cutting et al., 1993)). These systems essentia</context>
</contexts>
<marker>Brill, 1992</marker>
<rawString>E. Brill. 1992. A simple rule-based part-of-speech tagger. In Proceedings of the Third Conference on Applied Computational Linguistics, Trento, Italy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K W Church</author>
</authors>
<title>A stochastic parts program and noun phrase parser for unrestricted text.</title>
<date>1988</date>
<booktitle>In Proceedings of the Second Conference on Applied Natural Language Processing (ACL),</booktitle>
<pages>136--143</pages>
<contexts>
<context position="5992" citStr="Church, 1988" startWordPosition="910" endWordPosition="911">ny alternative parses whenever possible. Brill (Brill, 1992) has designed a rule-based tagger for English. The tagger works by automatically recognizing rules and remedying its weaknesses, thereby incrementally improving its performance. More recently, there has been a rule&apos;In Turkish, all adjectives can be used as nouns, hence with very minor differences adjectives have the same morphotactics as nouns. based approach implemented with finite-state machines (Koskenniemi et al., 1992; Voutilainen and Tapanainen, 1993). A completely different approach to tagging uses statistical methods, (e.g., (Church, 1988; Cutting et al., 1993)). These systems essentially train a statistical model using a previously hand-tagged corpus and provide the capability of resolving ambiguity on the basis of most likely interpretation. The models that have been widely used assume that the part-ofspeech of a word depends on the categories of the two preceding words. However, the applicability of such approaches to word-order free languages remains to be seen. 2.1 An example We can describe the process of tagging by showing the analysis for the sentence: 4ten diiner anmez evimizin yakintnda bulunan derin Olde yizerek gev</context>
</contexts>
<marker>Church, 1988</marker>
<rawString>K. W. Church. 1988. A stochastic parts program and noun phrase parser for unrestricted text. In Proceedings of the Second Conference on Applied Natural Language Processing (ACL), pages 136-143.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Cutting</author>
<author>J Kupiec</author>
<author>J Pedersen</author>
<author>P Sibun</author>
</authors>
<title>A practical part-of-speech tagger.</title>
<date>1993</date>
<tech>Technical report,</tech>
<institution>Xerox Palo Alto Research Center.</institution>
<contexts>
<context position="6015" citStr="Cutting et al., 1993" startWordPosition="912" endWordPosition="915"> parses whenever possible. Brill (Brill, 1992) has designed a rule-based tagger for English. The tagger works by automatically recognizing rules and remedying its weaknesses, thereby incrementally improving its performance. More recently, there has been a rule&apos;In Turkish, all adjectives can be used as nouns, hence with very minor differences adjectives have the same morphotactics as nouns. based approach implemented with finite-state machines (Koskenniemi et al., 1992; Voutilainen and Tapanainen, 1993). A completely different approach to tagging uses statistical methods, (e.g., (Church, 1988; Cutting et al., 1993)). These systems essentially train a statistical model using a previously hand-tagged corpus and provide the capability of resolving ambiguity on the basis of most likely interpretation. The models that have been widely used assume that the part-ofspeech of a word depends on the categories of the two preceding words. However, the applicability of such approaches to word-order free languages remains to be seen. 2.1 An example We can describe the process of tagging by showing the analysis for the sentence: 4ten diiner anmez evimizin yakintnda bulunan derin Olde yizerek gev§emek en biiyiik zevkim</context>
</contexts>
<marker>Cutting, Kupiec, Pedersen, Sibun, 1993</marker>
<rawString>D. Cutting, J. Kupiec, J. Pedersen, and P. Sibun. 1993. A practical part-of-speech tagger. Technical report, Xerox Palo Alto Research Center.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Demir</author>
</authors>
<title>An ATN grammar for Turkish.</title>
<date>1993</date>
<tech>Master&apos;s thesis,</tech>
<institution>Department of Computer Engineering and Information Sciences, Bilkent University,</institution>
<location>Ankara, Turkey,</location>
<contexts>
<context position="5086" citStr="Demir, 1993" startWordPosition="780" endWordPosition="781">ion of multi-word or idiomatic constructs. In Turkish, which abounds with such forms, such a recognizer can recognize these very productive multi-word constructs, like ko§-a ko§-a rund-OPT+3SG rund-OPT+3SG yap-ar yap-ma-z do+AOR+3SG do-I-NEG+AOR+3SG where both components are verbal but the compound construct is a manner or temporal adverb. This relieves the parser from dealing with them at the syntactic level. Furthermore, it is also possible to recognize various proper nouns with this functionality. Such help from a tagging functionality would simplify the development of parsers for Turkish (Demir, 1993; Giingiirdii, 1993). Researchers have used a number of different approaches for building text taggers. Karlsson (Karlsson, 1990) has used a rule-based approach where the central idea is to maximize the use of morphological information. Local constraints expressed as rules basically discard many alternative parses whenever possible. Brill (Brill, 1992) has designed a rule-based tagger for English. The tagger works by automatically recognizing rules and remedying its weaknesses, thereby incrementally improving its performance. More recently, there has been a rule&apos;In Turkish, all adjectives can </context>
</contexts>
<marker>Demir, 1993</marker>
<rawString>C. Demir. 1993. An ATN grammar for Turkish. Master&apos;s thesis, Department of Computer Engineering and Information Sciences, Bilkent University, Ankara, Turkey, July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Z GiingOrdii</author>
<author>K Oflazer</author>
</authors>
<title>Parsing Turkish using the Lexical-Functional Grammar formalism.</title>
<date>1994</date>
<booktitle>In Proceedings of COLING-94, the 15th International Conference on Computational Linguistics, Kyoto,</booktitle>
<contexts>
<context position="19831" citStr="GiingOrdii and Oflazer, 1994" startWordPosition="3110" endWordPosition="3113">, and hence POS, with minimal user intervention. Currently, the speed of the tagger is limited by essentially that of the morphological analyzer, but we have ported the morphological analyzer to the XEROX TWOL system developed by Karttunen and Beesley (Karttunen and Beesley, 1992). This system can analyze Turkish word forms at about 1000 forms/sec on SparcStation 10&apos;s. We intend to integrate this to our tagger soon, improving its speed performance considerably. We have tested the impact of morphological disambiguation on the performance of a LFG parser developed for Turkish (Giingordii, 1993; GiingOrdii and Oflazer, 1994). The input to the parser was disambiguated using the tool developed and the results were compared to the case when the parser had to consider all possible morphological ambiguities itself. For a set of 80 sentences considered, it can be seen that (Table 2), morphological disambiguation enables almost a factor of two reduction in the average number of parses generated and over a factor of two speed-up in time. 5 Conclusions This paper has presented an overview of a tool for tagging text along with various issues that have come up in disambiguating morphological parses of Turkish words. We have</context>
</contexts>
<marker>GiingOrdii, Oflazer, 1994</marker>
<rawString>Z. GiingOrdii and K. Oflazer. 1994. Parsing Turkish using the Lexical-Functional Grammar formalism. In Proceedings of COLING-94, the 15th International Conference on Computational Linguistics, Kyoto, Japan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Z Giingordii</author>
</authors>
<title>A Lexical-Functional Grammar for Turkish.</title>
<date>1993</date>
<tech>Master&apos;s thesis,</tech>
<institution>Department of Computer Engineering and Information Sciences, Bilkent University,</institution>
<location>Ankara, Turkey,</location>
<contexts>
<context position="19800" citStr="Giingordii, 1993" startWordPosition="3108" endWordPosition="3109">logical structures, and hence POS, with minimal user intervention. Currently, the speed of the tagger is limited by essentially that of the morphological analyzer, but we have ported the morphological analyzer to the XEROX TWOL system developed by Karttunen and Beesley (Karttunen and Beesley, 1992). This system can analyze Turkish word forms at about 1000 forms/sec on SparcStation 10&apos;s. We intend to integrate this to our tagger soon, improving its speed performance considerably. We have tested the impact of morphological disambiguation on the performance of a LFG parser developed for Turkish (Giingordii, 1993; GiingOrdii and Oflazer, 1994). The input to the parser was disambiguated using the tool developed and the results were compared to the case when the parser had to consider all possible morphological ambiguities itself. For a set of 80 sentences considered, it can be seen that (Table 2), morphological disambiguation enables almost a factor of two reduction in the average number of parses generated and over a factor of two speed-up in time. 5 Conclusions This paper has presented an overview of a tool for tagging text along with various issues that have come up in disambiguating morphological p</context>
</contexts>
<marker>Giingordii, 1993</marker>
<rawString>Z. Giingordii. 1993. A Lexical-Functional Grammar for Turkish. Master&apos;s thesis, Department of Computer Engineering and Information Sciences, Bilkent University, Ankara, Turkey, July.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Karlsson</author>
</authors>
<title>Constraint grammar as a framework for parsing running text.</title>
<date>1990</date>
<booktitle>In Proceedings of COLING-90, the 13th International Conference on Computational Linguistics,</booktitle>
<volume>3</volume>
<pages>168--173</pages>
<location>Helsinki, Finland.</location>
<contexts>
<context position="5215" citStr="Karlsson, 1990" startWordPosition="798" endWordPosition="800">ery productive multi-word constructs, like ko§-a ko§-a rund-OPT+3SG rund-OPT+3SG yap-ar yap-ma-z do+AOR+3SG do-I-NEG+AOR+3SG where both components are verbal but the compound construct is a manner or temporal adverb. This relieves the parser from dealing with them at the syntactic level. Furthermore, it is also possible to recognize various proper nouns with this functionality. Such help from a tagging functionality would simplify the development of parsers for Turkish (Demir, 1993; Giingiirdii, 1993). Researchers have used a number of different approaches for building text taggers. Karlsson (Karlsson, 1990) has used a rule-based approach where the central idea is to maximize the use of morphological information. Local constraints expressed as rules basically discard many alternative parses whenever possible. Brill (Brill, 1992) has designed a rule-based tagger for English. The tagger works by automatically recognizing rules and remedying its weaknesses, thereby incrementally improving its performance. More recently, there has been a rule&apos;In Turkish, all adjectives can be used as nouns, hence with very minor differences adjectives have the same morphotactics as nouns. based approach implemented w</context>
</contexts>
<marker>Karlsson, 1990</marker>
<rawString>F. Karlsson. 1990. Constraint grammar as a framework for parsing running text. In Proceedings of COLING-90, the 13th International Conference on Computational Linguistics, volume 3, pages 168-173, Helsinki, Finland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Karttunen</author>
<author>K R Beesley</author>
</authors>
<title>Two-level rule compiler.</title>
<date>1992</date>
<tech>Technical Report,</tech>
<institution>XEROX Palo Alto Research Center.</institution>
<contexts>
<context position="19483" citStr="Karttunen and Beesley, 1992" startWordPosition="3056" endWordPosition="3059">d a small number apply certain syntactic heuristics. In this section, we summarize our preliminary results. Table 1 presents some preliminary results about the our tagging experiments. Although the texts that we have experimented with are rather small, the results indicate that our approach is effective in disambiguating morphological structures, and hence POS, with minimal user intervention. Currently, the speed of the tagger is limited by essentially that of the morphological analyzer, but we have ported the morphological analyzer to the XEROX TWOL system developed by Karttunen and Beesley (Karttunen and Beesley, 1992). This system can analyze Turkish word forms at about 1000 forms/sec on SparcStation 10&apos;s. We intend to integrate this to our tagger soon, improving its speed performance considerably. We have tested the impact of morphological disambiguation on the performance of a LFG parser developed for Turkish (Giingordii, 1993; GiingOrdii and Oflazer, 1994). The input to the parser was disambiguated using the tool developed and the results were compared to the case when the parser had to consider all possible morphological ambiguities itself. For a set of 80 sentences considered, it can be seen that (Tab</context>
</contexts>
<marker>Karttunen, Beesley, 1992</marker>
<rawString>L. Karttunen and K. R. Beesley. 1992. Two-level rule compiler. Technical Report, XEROX Palo Alto Research Center.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Koskenniemi</author>
<author>P Tapanainen</author>
<author>A Voutilainen</author>
</authors>
<title>Compiling and using finite-state syntactic rules.</title>
<date>1992</date>
<booktitle>In Proceedings of COLING-92, the 14th International Conference on Computational Linguistics,</booktitle>
<volume>1</volume>
<pages>156--162</pages>
<location>Nantes, France.</location>
<contexts>
<context position="5866" citStr="Koskenniemi et al., 1992" startWordPosition="892" endWordPosition="895">oach where the central idea is to maximize the use of morphological information. Local constraints expressed as rules basically discard many alternative parses whenever possible. Brill (Brill, 1992) has designed a rule-based tagger for English. The tagger works by automatically recognizing rules and remedying its weaknesses, thereby incrementally improving its performance. More recently, there has been a rule&apos;In Turkish, all adjectives can be used as nouns, hence with very minor differences adjectives have the same morphotactics as nouns. based approach implemented with finite-state machines (Koskenniemi et al., 1992; Voutilainen and Tapanainen, 1993). A completely different approach to tagging uses statistical methods, (e.g., (Church, 1988; Cutting et al., 1993)). These systems essentially train a statistical model using a previously hand-tagged corpus and provide the capability of resolving ambiguity on the basis of most likely interpretation. The models that have been widely used assume that the part-ofspeech of a word depends on the categories of the two preceding words. However, the applicability of such approaches to word-order free languages remains to be seen. 2.1 An example We can describe the pr</context>
</contexts>
<marker>Koskenniemi, Tapanainen, Voutilainen, 1992</marker>
<rawString>K. Koskenniemi, P. Tapanainen, and A. Voutilainen. 1992. Compiling and using finite-state syntactic rules. In Proceedings of COLING-92, the 14th International Conference on Computational Linguistics, volume 1, pages 156-162, Nantes, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Oflazer</author>
</authors>
<title>Two-level description of Turkish morphology.</title>
<date>1993</date>
<booktitle>In Proceedings of the Sixth Conference of the European Chapter of the Association for Computational Linguistics, April. A full version appears in Literary and Linguistic Computing, Vol.9 No.2,</booktitle>
<contexts>
<context position="1982" citStr="Oflazer, 1993" startWordPosition="300" endWordPosition="301">he tagger, an LFG parser developed for Turkish, generates, on the average, 50% less ambiguous parses and parses almost 2.5 times faster. The tagging functionality is not specific to Turkish, and can be applied to any language with a proper morphological analysis interface. 1 Introduction As a part of large scale project on natural language processing for Turkish, we have undertaken the development of a number of tools for analyzing Turkish text. This paper describes one such tool — a text tagger for Turkish. The tagger is based on a full scale two-level morphological specification of Turkish (Oflazer, 1993), implemented on the PC-KIMMO environment (Antworth, 1990). In this paper, we describe the functionality and the performance of our tagger along with various techniques that we have employed to deal with various sources of ambiguities. 2 Tagging Text Automatic text tagging is an important step in discovering the linguistic structure of large text corpora. Basic tagging involves annotating the words in a given text with various pieces of information, such as part-of-speech and other lexical features. Part-of-speech tagging facilitates higher-level analysis, such as parsing, essentially by perfo</context>
</contexts>
<marker>Oflazer, 1993</marker>
<rawString>K. Oflazer. 1993. Two-level description of Turkish morphology. In Proceedings of the Sixth Conference of the European Chapter of the Association for Computational Linguistics, April. A full version appears in Literary and Linguistic Computing, Vol.9 No.2, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Voutilainen</author>
<author>P Tapanainen</author>
</authors>
<title>Ambiguity resolution in a reductionistic parser.</title>
<date>1993</date>
<booktitle>In Proceedings of EACL&apos;93,</booktitle>
<location>Utrecht, Holland.</location>
<contexts>
<context position="5901" citStr="Voutilainen and Tapanainen, 1993" startWordPosition="896" endWordPosition="899">a is to maximize the use of morphological information. Local constraints expressed as rules basically discard many alternative parses whenever possible. Brill (Brill, 1992) has designed a rule-based tagger for English. The tagger works by automatically recognizing rules and remedying its weaknesses, thereby incrementally improving its performance. More recently, there has been a rule&apos;In Turkish, all adjectives can be used as nouns, hence with very minor differences adjectives have the same morphotactics as nouns. based approach implemented with finite-state machines (Koskenniemi et al., 1992; Voutilainen and Tapanainen, 1993). A completely different approach to tagging uses statistical methods, (e.g., (Church, 1988; Cutting et al., 1993)). These systems essentially train a statistical model using a previously hand-tagged corpus and provide the capability of resolving ambiguity on the basis of most likely interpretation. The models that have been widely used assume that the part-ofspeech of a word depends on the categories of the two preceding words. However, the applicability of such approaches to word-order free languages remains to be seen. 2.1 An example We can describe the process of tagging by showing the ana</context>
</contexts>
<marker>Voutilainen, Tapanainen, 1993</marker>
<rawString>A. Voutilainen and P. Tapanainen. 1993. Ambiguity resolution in a reductionistic parser. In Proceedings of EACL&apos;93, Utrecht, Holland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Voutilainen</author>
<author>J Heikkila</author>
<author>A Anttila</author>
</authors>
<date>1992</date>
<institution>Constraint Grammar of English. University of Helsinki.</institution>
<contexts>
<context position="16809" citStr="Voutilainen et al., 1992" startWordPosition="2619" endWordPosition="2622">ization checks, at the syntactic level. 3.2 Using constraints for morphological ambiguity resolution Morphological analysis does not have access to syntactic context, so when the morphological structure 5The output of the morphological analyzer is actually a feature-value list in the standard LISP format. 147 of a lexical form has several distinct analyses, it is not possible to disambiguate such cases except maybe by using root usage frequencies. For disambiguation one may have to use information provided by sentential position and the local morphosyntactic context. Voutilainen and Heikkila (Voutilainen et al., 1992) have proposed a constraint grammar approach where one specifies constraints on the local context of a word to disambiguate among multiple readings of a word. Their approach has, however, been applied to English where morphological information has rather little use in such resolution. In our tagger, constraints are applied on each word, and check if the forms within a specified neighborhood of the word satisfy certain morphosyntactic or positional restrictions, and/or agreements. Our constraint pattern specification is very similar to multi-word construct specification. Use of variables, opera</context>
</contexts>
<marker>Voutilainen, Heikkila, Anttila, 1992</marker>
<rawString>A. Voutilainen, J. Heikkila, and A. Anttila. 1992. Constraint Grammar of English. University of Helsinki.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>