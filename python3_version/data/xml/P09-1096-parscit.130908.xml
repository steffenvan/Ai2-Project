<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000036">
<title confidence="0.975535">
SMS based Interface for FAQ Retrieval
</title>
<author confidence="0.963475">
Govind Kothari
</author>
<affiliation confidence="0.935153">
IBM India Research Lab
</affiliation>
<email confidence="0.970752">
gokothar@in.ibm.com
</email>
<author confidence="0.885961">
Sumit Negi
</author>
<affiliation confidence="0.864828">
IBM India Research Lab
</affiliation>
<email confidence="0.95995">
sumitneg@in.ibm.com
</email>
<author confidence="0.478012">
Tanveer A. Faruquie
</author>
<affiliation confidence="0.481046">
IBM India Research Lab
</affiliation>
<email confidence="0.918378">
ftanveer@in.ibm.com
</email>
<author confidence="0.886978">
Venkatesan T. Chakaravarthy
</author>
<affiliation confidence="0.898121">
IBM India Research Lab
</affiliation>
<email confidence="0.995813">
vechakra@in.ibm.com
</email>
<sectionHeader confidence="0.993723" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999003545454546">
Short Messaging Service (SMS) is popu-
larly used to provide information access to
people on the move. This has resulted in
the growth of SMS based Question An-
swering (QA) services. However auto-
matically handling SMS questions poses
significant challenges due to the inherent
noise in SMS questions. In this work we
present an automatic FAQ-based question
answering system for SMS users. We han-
dle the noise in a SMS query by formu-
lating the query similarity over FAQ ques-
tions as a combinatorial search problem.
The search space consists of combinations
of all possible dictionary variations of to-
kens in the noisy query. We present an ef-
ficient search algorithm that does not re-
quire any training data or SMS normaliza-
tion and can handle semantic variations in
question formulation. We demonstrate the
effectiveness of our approach on two real-
life datasets.
</bodyText>
<sectionHeader confidence="0.999133" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999941625">
The number of mobile users is growing at an
amazing rate. In India alone a few million sub-
scribers are added each month with the total sub-
scriber base now crossing 370 million. The any-
time anywhere access provided by mobile net-
works and portability of handsets coupled with the
strong human urge to quickly find answers has fu-
eled the growth of information based services on
mobile devices. These services can be simple ad-
vertisements, polls, alerts or complex applications
such as browsing, search and e-commerce. The
latest mobile devices come equipped with high
resolution screen space, inbuilt web browsers and
full message keypads, however a majority of the
users still use cheaper models that have limited
screen space and basic keypad. On such devices,
</bodyText>
<note confidence="0.6379305">
L. Venkata Subramaniam
IBM India Research Lab
</note>
<email confidence="0.971241">
lvsubram@in.ibm.com
</email>
<bodyText confidence="0.999786921052632">
SMS is the only mode of text communication.
This has encouraged service providers to build in-
formation based services around SMS technology.
Today, a majority of SMS based information ser-
vices require users to type specific codes to re-
trieve information. For example to get a duplicate
bill for a specific month, say June, the user has
to type DUPBILLJUN. This unnecessarily con-
straints users who generally find it easy and intu-
itive to type in a “texting” language.
Some businesses have recently allowed users to
formulate queries in natural language using SMS.
For example, many contact centers now allow cus-
tomers to “text” their complaints and requests for
information over SMS. This mode of communica-
tion not only makes economic sense but also saves
the customer from the hassle of waiting in a call
queue. Most of these contact center based services
and other regular services like “AQA 63336”1 by
Issuebits Ltd, GTIP2 by AlienPant Ltd., “Tex-
perts”3 by Number UK Ltd. and “ChaCha”4 use
human agents to understand the SMS text and re-
spond to these SMS queries. The nature of tex-
ting language, which often as a rule rather than ex-
ception, has misspellings, non-standard abbrevia-
tions, transliterations, phonetic substitutions and
omissions, makes it difficult to build automated
question answering systems around SMS technol-
ogy. This is true even for questions whose answers
are well documented like a FAQ database. Un-
like other automatic question answering systems
that focus on generating or searching answers, in
a FAQ database the question and answers are al-
ready provided by an expert. The task is then
to identify the best matching question-answer pair
for a given query.
In this paper we present a FAQ-based ques-
tion answering system over a SMS interface. Our
</bodyText>
<footnote confidence="0.999981">
1http://www.aqa.63336.com/
2http://www.gtip.co.uk/
3http://www.texperts.com/
4http://www.chacha.com/
</footnote>
<page confidence="0.911488">
852
</page>
<note confidence="0.998901">
Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 852–860,
Suntec, Singapore, 2-7 August 2009. c�2009 ACL and AFNLP
</note>
<bodyText confidence="0.999969357142857">
system allows the user to enter a question in
the SMS texting language. Such questions are
noisy and contain spelling mistakes, abbrevia-
tions, deletions, phonetic spellings, translitera-
tions etc. Since mobile handsets have limited
screen space, it necessitates that the system have
high accuracy. We handle the noise in a SMS
query by formulating the query similarity over
FAQ questions as a combinatorial search prob-
lem. The search space consists of combinations
of all possible dictionary variations of tokens in
the noisy query. The quality of the solution, i.e.
the retrieved questions is formalized using a scor-
ing function. Unlike other SMS processing sys-
tems our model does not require training data or
human intervention. Our system handles not only
the noisy variations of SMS query tokens but also
semantic variations. We demonstrate the effective-
ness of our system on real-world data sets.
The rest of the paper is organized as follows.
Section 2 describes the relevant prior work in this
area and talks about our specific contributions.
In Section 3 we give the problem formulation.
Section 4 describes the Pruning Algorithm which
finds the best matching question for a given SMS
query. Section 5 provides system implementation
details. Section 6 provides details about our exper-
iments. Finally we conclude in Section 7.
</bodyText>
<sectionHeader confidence="0.99472" genericHeader="introduction">
2 Prior Work
</sectionHeader>
<bodyText confidence="0.999970944444444">
There has been growing interest in providing ac-
cess to applications, traditionally available on In-
ternet, on mobile devices using SMS. Examples
include Search (Schusteritsch et al., 2005), access
to Yellow Page services (Kopparapu et al., 2007),
Email 5, Blog 6 , FAQ retrieval 7 etc. As high-
lighted earlier, these SMS-based FAQ retrieval ser-
vices use human experts to answer questions.
There are other research and commercial sys-
tems which have been developed for general ques-
tion and answering. These systems generally
adopt one of the following three approaches:
Human intervention based, Information Retrieval
based, or Natural language processing based. Hu-
man intervention based systems exploit human
communities to answer questions. These sys-
tems 8 are interesting because they suggest simi-
lar questions resolved in the past. Other systems
</bodyText>
<footnote confidence="0.99995225">
5http://www.sms2email.com/
6http://www.letmeparty.com/
7http://www.chacha.com/
8http://www.answers.yahoo.com/
</footnote>
<bodyText confidence="0.999784097560976">
like Chacha and Askme9 use qualified human ex-
perts to answer questions in a timely manner. The
information retrieval based system treat question
answering as an information retrieval problem.
They search large corpus of text for specific text,
phrases or paragraphs relevant to a given question
(Voorhees, 1999). In FAQ based question answer-
ing, where FAQ provide a ready made database of
question-answer, the main task is to find the clos-
est matching question to retrieve the relevant an-
swer (Sneiders, 1999) (Song et al., 2007). The
natural language processing based system tries to
fully parse a question to discover semantic struc-
ture and then apply logic to formulate the answer
(Molla et al., 2003). In another approach the ques-
tions are converted into a template representation
which is then used to extract answers from some
structured representation (Sneiders, 2002) (Katz et
al., 2002). Except for human intervention based
QA systems most of the other QA systems work
in restricted domains and employ techniques such
as named entity recognition, co-reference resolu-
tion, logic form transformation etc which require
the question to be represented in linguistically cor-
rect format. These methods do not work for SMS
based FAQ answering because of the high level of
noise present in SMS text.
There exists some work to remove noise from
SMS (Choudhury et al., 2007) (Byun et al., 2007)
(Aw et al., 2006) (Kobus et al., 2008). How-
ever, all of these techniques require aligned cor-
pus of SMS and conventional language for train-
ing. Building this aligned corpus is a difficult task
and requires considerable human effort. (Acharya
et al., 2008) propose an unsupervised technique
that maps non-standard words to their correspond-
ing conventional frequent form. Their method can
identify non-standard transliteration of a given to-
ken only if the context surrounding that token is
frequent in the corpus. This might not be true in
all domains.
</bodyText>
<subsectionHeader confidence="0.966585">
2.1 Our Contribution
</subsectionHeader>
<bodyText confidence="0.999959625">
To the best of our knowledge we are the first to
handle issues relating to SMS based automatic
question-answering. We address the challenges
in building a FAQ-based question answering sys-
tem over a SMS interface. Our method is unsu-
pervised and does not require aligned corpus or
explicit SMS normalization to handle noise. We
propose an efficient algorithm that handles noisy
</bodyText>
<footnote confidence="0.960478">
9http://www.askmehelpdesk.com/
</footnote>
<page confidence="0.998221">
853
</page>
<bodyText confidence="0.763237">
lexical and semantic variations.
</bodyText>
<sectionHeader confidence="0.9515" genericHeader="method">
3 Problem Formulation
</sectionHeader>
<bodyText confidence="0.999962">
We view the input SMS S as a sequence of tokens
S = s1, s2, ... , sn. Let Q denote the set of ques-
tions in the FAQ corpus. Each question Q E Q
is also viewed as a sequence of terms. Our goal
is to find the question Q* from the corpus Q that
best matches the SMS S. As mentioned in the in-
troduction, the SMS string is bound to have mis-
spellings and other distortions, which needs to be
taken care of while performing the match.
In the preprocessing stage, we develop a Do-
main dictionary D consisting of all the terms that
appear in the corpus Q. For each term t in the dic-
tionary and each SMS token si, we define a simi-
larity measure α(t, si) that measures how closely
the term t matches the SMS token si. We say that
the term t is a variant of si, if α(t, si) &gt; 0; this is
denoted as t — si. Combining the similarity mea-
sure and the inverse document frequency (idf) of t
in the corpus, we define a weight function ω(t, si).
The similarity measure and the weight function are
discussed in detail in Section 5.1.
Based on the weight function, we define a scor-
ing function for assigning a score to each question
in the corpus Q. The score measures how closely
the question matches the SMS string S. Consider
a question Q E Q. For each token si, the scor-
ing function chooses the term from Q having the
maximum weight; then the weight of the n chosen
terms are summed up to get the score.
</bodyText>
<figureCaption confidence="0.999366">
Figure 1: Ranked List of Variations
</figureCaption>
<bodyText confidence="0.998513772727273">
in Figure 1. The process of creating the lists is
speeded up using suitable indices, as explained in
detail in Section 5.
Now, we assume that the lists L1, L2, ... , Ln
are created and explain the algorithms for com-
puting the maximum scoring question Q*. We de-
scribe two algorithms for accomplishing the above
task. The two algorithms have the same function-
ality i.e. they compute Q*, but the second algo-
rithm called the Pruning algorithm has a better
run time efficiency compared to the first algorithm
called the naive algorithm. Both the algorithms re-
quire an index which takes as input a term t from
the dictionary and returns Qt, the set of all ques-
tions in the corpus that contain the term t. We
call the above process as querying the index on
the term t. The details of the index creation is dis-
cussed in Section 5.2.
Naive Algorithm: In this algorithm, we scan
each list Li and query the index on each term ap-
pearing in Li. The returned questions are added to
a collection C. That is,
</bodyText>
<equation confidence="0.992649333333333">
Score(Q) = i I max ω(t, si)J (1) C = n IU Qt
t:tEQ and t—si U ELi
i=1 i=1
</equation>
<bodyText confidence="0.9946005">
Our goal is to efficiently find the question Q* hav-
ing the maximum score.
</bodyText>
<sectionHeader confidence="0.965818" genericHeader="method">
4 Pruning Algorithm
</sectionHeader>
<bodyText confidence="0.99094237037037">
We now describe algorithms for computing the
maximum scoring question Q*. For each token
si, we create a list Li consisting of all terms from
the dictionary that are variants of si. Consider a
token si. We collect all the variants of si from the
dictionary and compute their weights. The vari-
ants are then sorted in the descending order of
their weights. At the end of the process we have n
ranked lists. As an illustration, consider an SMS
query “gud plc buy 10s strng on9”. Here, n = 6
and six lists of variants will be created as shown
The collection C is called the candidate set. No-
tice that any question not appearing in the candi-
date set has a score 0 and thus can be ignored. It
follows that the candidate set contains the maxi-
mum scoring question Q*. So, we focus on the
questions in the collection C, compute their scores
and find the maximum scoring question Q*. The
scores of the question appearing in C can be com-
puted using Equation 1.
The main disadvantage with the naive algorithm
is that it queries each term appearing in each list
and hence, suffers from high run time cost. We
next explain the Pruning algorithm that avoids this
pitfall and queries only a substantially small subset
of terms appearing in the lists.
Pruning Algorithm: The pruning algorithm
</bodyText>
<page confidence="0.994535">
854
</page>
<bodyText confidence="0.993397885714286">
is inspired by the Threshold Algorithm (Fagin et
al., 2001). The Pruning algorithm has the prop-
erty that it queries fewer terms and ends up with
a smaller candidate set as compared to the naive
algorithm. The algorithm maintains a candidate
set C of questions that can potentially be the max-
imum scoring question. The algorithm works in
an iterative manner. In each iteration, it picks
the term that has maximum weight among all the
terms appearing in the lists L1, L2, ... , Ln. As
the lists are sorted in the descending order of the
weights, this amounts to picking the maximum
weight term amongst the first terms of the n lists.
The chosen term t is queried to find the set Qt. The
set Qt is added to the candidate set C. For each
question Q E Qt, we compute its score Score(Q)
and keep it along with Q. The score can be com-
puted by Equation 1 (For each SMS token si, we
choose the term from Q which is a variant of si
and has the maximum weight. The sum of the
weights of chosen terms yields Score(Q)). Next,
the chosen term t is removed from the list. Each
iteration proceeds as above. We shall now develop
a thresholding condition such that when it is sat-
isfied, the candidate set C is guaranteed to contain
the maximum scoring question Q*. Thus, once the
condition is met, we stop the above iterative pro-
cess and focus only on the questions in C to find
the maximum scoring question.
Consider end of some iteration in the above pro-
cess. Suppose Q is a question not included in C.
We can upperbound the score achievable by Q, as
follows. At best, Q may include the top-most to-
ken from every list L1, L2,. . . , Ln. Thus, score of
Q is bounded by
</bodyText>
<equation confidence="0.994420666666667">
n
Score(Q) G E w(Li[1]).
i=0
</equation>
<bodyText confidence="0.9955575">
(Since the lists are sorted Li[1] is the term having
the maximum weight in Li). We refer to the RHS
of the above inequality as UB.
Let Q be the question in C having the maximum
score. Notice that if Q &gt; UB, then it is guaranteed
that any question not included in the candidate set
C cannot be the maximum scoring question. Thus,
the condition “ Q� &gt; UB” serves as the termination
condition. At the end of each iteration, we check
if the termination condition is satisfied and if so,
we can stop the iterative process. Then, we simply
pick the question in C having the maximum score
and return it. The algorithm is shown in Figure 2.
In this section, we presented the Pruning algo-
</bodyText>
<table confidence="0.888263">
Procedure Pruning Algorithm
Input: SMS S = s1, s2, . . . , sn
Output: Maximum scoring question Q*.
Begin
Construct lists L1, L2, ... ,Ln //(see Section 5.3).
// Li lists variants of si in descending
//order of weight.
Candidate list C = 0.
repeat
</table>
<equation confidence="0.960434">
j* = argmaxiω(Li[1])
t* = Lj*[1]
// t* is the term having maximum weight among
</equation>
<figure confidence="0.8060202">
// all terms appearing in the n lists.
Delete t* from the list Lj*.
Query the index and fetch Qt*
// Qt*: the set of all questions in Q
//having the term t*
For each Q E Qt*
Compute Score(Q) and
add Q with its score into C
UB = E 1 ω(Li[1])
Q = argmaxQECScore(Q).
if Score(Q) &gt; UB, then
// Termination condition satisfied
Output Q and exit.
forever
End
</figure>
<figureCaption confidence="0.999722">
Figure 2: Pruning Algorithm
</figureCaption>
<bodyText confidence="0.9999656">
rithm that efficiently finds the best matching ques-
tion for the given SMS query without the need to
go through all the questions in the FAQ corpus.
The next section describes the system implemen-
tation details of the Pruning Algorithm.
</bodyText>
<sectionHeader confidence="0.995487" genericHeader="method">
5 System Implementation
</sectionHeader>
<bodyText confidence="0.998751333333333">
In this section we describe the weight function,
the preprocessing step and the creation of lists
L1, L2, ... , Ln.
</bodyText>
<subsectionHeader confidence="0.991117">
5.1 Weight Function
</subsectionHeader>
<bodyText confidence="0.999616714285714">
We calculate the weight for a term t in the dic-
tionary w.r.t. a given SMS token si. The weight
function is a combination of similarity measure
between t and si and Inverse Document Frequency
(idf) of t. The next two subsections explain the
calculation of the similarity measure and the idf in
detail.
</bodyText>
<subsubsectionHeader confidence="0.903845">
5.1.1 Similarity Measure
</subsubsectionHeader>
<bodyText confidence="0.977095666666667">
Let D be the dictionary of all the terms in the cor-
pus Q. For term t E D and token si of the SMS,
the similarity measure α(t, si) between them is
</bodyText>
<page confidence="0.988916">
855
</page>
<figure confidence="0.940156625">
LCSRatio(t,si)
EditDistanceSMS(t,si) if t and si share same
starting character *
0 otherwise
(2)
where LCSRatio(t, si) = length(LCS(t,si)) and LCS(t, si) is
length(t)
the Longest common subsequence between t and si.
</figure>
<bodyText confidence="0.900929">
* The rationale behind this heuristic is that while typing a SMS, people
typically type the first few characters correctly. Also, this heuristic helps limit
the variants possible for a given token.
The Longest Common Subsequence Ratio
(LCSR) (Melamed, 1999) of two strings is the ra-
tio of the length of their LCS and the length of the
longer string. Since in SMS text, the dictionary
term will always be longer than the SMS token,
the denominator of LCSR is taken as the length of
the dictionary term. We call this modified LCSR
as the LCSRatio.
</bodyText>
<figure confidence="0.990988923076923">
Procedure EditDistanceSMS
Input: term t, token si
Output: Consonant Skeleton Edit distance
Begin
return LevenshteinDistance(CS(si), CS(t)) + 1
// 1 is added to handle the case where
// Levenshtein Distance is 0
End
Consonant Skeleton Generation (CS)
1. remove consecutive repeated characters
// (call --+ cal)
2. remove all vowels
//(waiting --+ wtng, great --+ grt)
</figure>
<figureCaption confidence="0.999891">
Figure 3: EditDistanceSMS
</figureCaption>
<bodyText confidence="0.999622764705882">
The EditDistanceSMS shown in Figure 3
compares the Consonant Skeletons (Prochasson et
al., 2007) of the dictionary term and the SMS to-
ken. If the consonant keys are similar, i.e. the Lev-
enshtein distance between them is less, the simi-
larity measure defined in Equation 2 will be high.
We explain the rationale behind using the
EditDistanceSMS in the similarity measure
α(t, si) through an example. For the SMS
token “gud” the most likely correct form is
“good”. The two dictionary terms “good” and
“guided” have the same LCSRatio of 0.5 w.r.t
“gud”, but the EditDistanceSMS of “good” is
1 which is less than that of “guided”, which has
EditDistanceSMS of 2 w.r.t “gud”. As a result
the similarity measure between “gud” and “good”
will be higher than that of “gud” and “guided”.
</bodyText>
<subsubsectionHeader confidence="0.614128">
5.1.2 Inverse Document Frequency
</subsubsectionHeader>
<bodyText confidence="0.999628333333333">
If f number of documents in corpus Q contain a
term t and the total number of documents in Q is
N, the Inverse Document Frequency (idf) of t is
</bodyText>
<equation confidence="0.9131568">
idf (t) = log f (3)
Combining the similarity measure and the idf
of t in the corpus, we define the weight function
w(t, si) as
w(t, si) = α(t, si) * idf(t) (4)
</equation>
<bodyText confidence="0.853846761904762">
The objective behind the weight function is
1. We prefer terms that have high similarity
measure i.e. terms that are similar to the
SMS token. Higher the LCSRatio and lower
the EditDistanceSMS, higher will be the
similarity measure. Thus for example, for a
given SMS token “byk”, similarity measure
of word “bike“ is higher than that of “break”.
2. We prefer words that are highly discrimi-
native i.e. words with a high idf score.
The rationale for this stems from the fact
that queries, in general, are composed of in-
formative words. Thus for example, for a
given SMS token “byk”, idf of “bike” will
be more than that of commonly occurring
word “back”. Thus, even though the similar-
ity measure of “bike” and “back” are same
w.r.t. “byk”, “bike” will get a higher weight
than “back” due to its idf.
We combine these two objectives into a single
weight function multiplicatively.
</bodyText>
<subsectionHeader confidence="0.998788">
5.2 Preprocessing
</subsectionHeader>
<bodyText confidence="0.9998305">
Preprocessing involves indexing of the FAQ cor-
pus, formation of Domain and Synonym dictionar-
ies and calculation of the Inverse Document Fre-
quency for each term in the Domain dictionary.
As explained earlier the Pruning algorithm re-
quires retrieval of all questions Qt that contains a
given term t. To do this efficiently we index the
FAQ corpus using Lucene10. Each question in the
FAQ corpus is treated as a Document; it is tok-
enized using whitespace as delimiter and indexed.
</bodyText>
<equation confidence="0.898439">
10http://lucene.apache.org/java/docs/
α(t, si) = I
</equation>
<page confidence="0.993071">
856
</page>
<bodyText confidence="0.999720823529412">
The Domain dictionary D is built from all terms
that appear in the corpus Q.
The weight calculation for Pruning algorithm
requires the idf for a given term t. For each term t
in the Domain dictionary, we query the Lucene in-
dexer to get the number of Documents containing
t. Using Equation 3, the idf(t) is calculated. The
idf for each term t is stored in a Hashtable, with t
as the key and idf as its value.
Another key step in the preprocessing stage is
the creation of the Synonym dictionary. The Prun-
ing algorithm uses this dictionary to retrieve se-
mantically similar questions. Details of this step is
further elaborated in the List Creation sub-section.
The Synonym Dictionary creation involves map-
ping each word in the Domain dictionary to it’s
corresponding Synset obtained from WordNet11.
</bodyText>
<subsectionHeader confidence="0.997703">
5.3 List Creation
</subsectionHeader>
<bodyText confidence="0.9722854">
Given a SMS S, it is tokenized using white-spaces
to get a sequence of tokens s1, s2, ... , sn. Digits
occurring in SMS token (e.g ‘10s’ , “4get”) are re-
placed by string based on a manually crafted digit-
to-string mapping (“10” —* “ten”). A list Li is
setup for each token si using terms in the domain
dictionary. The list for a single character SMS to-
ken is set to null as it is most likely to be a stop
word . A term t from domain dictionary is in-
cluded in Li if its first character is same as that of
the token si and it satisfies the threshold condition
length(LCS(t, si)) &gt; 1.
Each term t that is added to the list is assigned a
weight given by Equation 4.
Terms in the list are ranked in descending or-
der of their weights. Henceforth, the term “list”
implies a ranked list.
For example the SMS query “gud plc 2 buy 10s
strng on9” (corresponding question “Where is a
good place to buy tennis strings online?”), is to-
kenized to get a set of tokens {‘gud’, ‘plc’, ‘2’,
‘buy’, ‘10s’, ‘strng’, ‘on9’}. Single character to-
kens such as ‘2’ are neglected as they are most
likely to be stop words. From these tokens cor-
responding lists are setup as shown in Figure 1.
</bodyText>
<subsectionHeader confidence="0.878774">
5.3.1 Synonym Dictionary Lookup
</subsectionHeader>
<bodyText confidence="0.9954854">
To retrieve answers for SMS queries that are
semantically similar but lexically different from
questions in the FAQ corpus we use the Synonym
dictionary described in Section 5.2. Figure 4 illus-
trates some examples of such SMS queries.
</bodyText>
<footnote confidence="0.794377">
11http://wordnet.princeton.edu/
</footnote>
<figureCaption confidence="0.99989">
Figure 4: Semantically similar SMS and questions
Figure 5: Synonym Dictionary LookUp
</figureCaption>
<bodyText confidence="0.999885909090909">
For a given SMS token si, the list of variations
Li is further augmented using this Synonym dic-
tionary. For each token si a fuzzy match is per-
formed between si and the terms in the Synonym
dictionary and the best matching term from the
Synonym dictionary, S is identified. As the map-
pings between the Synonym and the Domain dic-
tionary terms are maintained, we obtain the corre-
sponding Domain dictionary term Q for the Syn-
onym term S and add that term to the list Li. Q is
assigned a weight given by
</bodyText>
<equation confidence="0.930167">
w(Q, si) = α(S, si) * idf(Q) (5)
</equation>
<bodyText confidence="0.999786818181818">
It should be noted that weight for Q is based on
the similarity measure between Synonym dictio-
nary term S and SMS token si.
For example, the SMS query “hw2 countr quik
srv”( corresponding question “How to return a
very fast serve?”) has two terms “countr” —*
“counter” and “quik” —* “quick” belonging to
the Synonym dictionary. Their associated map-
pings in the Domain dictionary are “return” and
“fast” respectively as shown in Figure 5. During
the list setup process the token “countr” is looked
</bodyText>
<page confidence="0.994657">
857
</page>
<bodyText confidence="0.999922785714286">
up in the Domain dictionary. Terms from the Do-
main dictionary that begin with the same character
as that of the token “countr” and have a LCS &gt; 1
such as “country”,“count”, etc. are added to the
list and assigned a weight given by Equation 4.
After that, the token “countr” is looked up in the
Synonym dictionary using Fuzzy match. In this
example the term “counter” from the Synonym
dictionary fuzzy matches the SMS token. The Do-
main dictionary term corresponding to the Syn-
onym dictionary term “counter” is looked up and
added to the list. In the current example the cor-
responding Domain dictionary term is “return”.
This term is assigned a weight given by Equation
</bodyText>
<sectionHeader confidence="0.543049" genericHeader="method">
5 and is added to the list as shown in Figure 5.
</sectionHeader>
<subsectionHeader confidence="0.992437">
5.4 FAQ retrieval
</subsectionHeader>
<bodyText confidence="0.999872142857143">
Once the lists are created, the Pruning Algorithm
as shown in Figure 2 is used to find the FAQ ques-
tion Q* that best matches the SMS query. The cor-
responding answer to Q* from the FAQ corpus is
returned to the user.
The next section describes the experimental
setup and results.
</bodyText>
<sectionHeader confidence="0.998786" genericHeader="evaluation">
6 Experiments
</sectionHeader>
<bodyText confidence="0.9999248">
We validated the effectiveness and usability of
our system by carrying out experiments on two
FAQ data sets. The first FAQ data set, referred
to as the Telecom Data-Set, consists of 1500 fre-
quently asked questions, collected from a Telecom
service provider’s website. The questions in this
data set are related to the Telecom providers prod-
ucts or services. For example queries about call
rates/charges, bill drop locations, how to install
caller tunes, how to activate GPRS etc. The sec-
ond FAQ corpus, referred to as the Yahoo DataSet,
consists of 7500 questions from three Yahoo!
Answers12 categories namely Sports.Swimming,
Sports.Tennis, Sports.Running.
To measure the effectiveness of our system, a
user evaluation study was performed. Ten human
evaluators were asked to choose 10 questions ran-
domly from the FAQ data set. None of the eval-
uators were authors of the paper. They were pro-
vided with a mobile keypad interface and asked to
“text” the selected 10 questions as SMS queries.
Through that exercise 100 relevant SMS queries
per FAQ data set were collected. Figure 6 shows
sample SMS queries. In order to validate that the
system was able to handle queries that were out of
</bodyText>
<footnote confidence="0.798023">
12http://answers.yahoo.com/
</footnote>
<figureCaption confidence="0.92387">
Figure 6: Sample SMS queries
</figureCaption>
<table confidence="0.999541666666667">
Data Set Relevant Queries Irrelevant Queries
Telecom 100 50
Yahoo 100 50
</table>
<tableCaption confidence="0.999605">
Table 1: SMS Data Set.
</tableCaption>
<bodyText confidence="0.999442105263158">
the FAQ domain, we collected 5 irrelevant SMS
queries from each of the 10 human-evaluators for
both the data sets. Irrelevant queries were (a)
Queries out of the FAQ domain e.g. queries re-
lated to Cricket, Billiards, activating GPS etc (b)
Absurd queries e.g. “ama ameyu tuem” (sequence
of meaningless words) and (c) General Queries
e.g. “what is sports”. Table 1 gives the number
of relevant and irrelevant queries used in our ex-
periments.
The average word length of the collected SMS
messages for Telecom and Yahoo datasets was 4
and 7 respectively. We manually cleaned the SMS
query data word by word to create a clean SMS
test-set. For example, the SMS query ”h2 mke a
pdl bke fstr” was manually cleaned to get ”how
to make pedal bike faster”. In order to quantify
the level of noise in the collected SMS data, we
built a character-level language model(LM)13 us-
ing the questions in the FAQ data-set (vocabulary
size is 44 characters) and computed the perplex-
ity14 of the language model on the noisy and the
cleaned SMS test-set. The perplexity of the LM on
a corpus gives an indication of the average num-
ber of bits needed per n-gram to encode the cor-
pus. Noise will result in the introduction of many
previously unseen n-grams in the corpus. Higher
number of bits are needed to encode these improb-
able n-grams which results in increased perplexity.
From Table 2 we can see the difference in perplex-
ity for noisy and clean SMS data for the Yahoo
and Telecom data-set. The high level of perplexity
in the SMS data set indicates the extent of noise
present in the SMS corpus.
To handle irrelevant queries the algorithm de-
scribed in Section 4 is modified. Only if the
Score(Q*) is above a certain threshold, it’s answer
is returned, else we return “null”. The threshold
</bodyText>
<footnote confidence="0.998132">
13http://en.wikipedia.org/wiki/Language model
14bits = lo92(perplexity)
</footnote>
<page confidence="0.985666">
858
</page>
<table confidence="0.9987602">
Cleaned SMS Noisy SMS
Yahoo bigram 14.92 74.58
trigram 8.11 93.13
Telecom bigram 17.62 59.26
trigram 10.27 63.21
</table>
<tableCaption confidence="0.963615">
Table 2: Perplexity for Cleaned and Noisy SMS
</tableCaption>
<figureCaption confidence="0.997334">
Figure 7: Accuracy on Telecom FAQ Dataset
</figureCaption>
<bodyText confidence="0.9995950625">
was determined experimentally.
To retrieve the correct answer for the posed
SMS query, the SMS query is matched against
questions in the FAQ data set and the best match-
ing question(Q*) is identified using the Pruning al-
gorithm. The system then returns the answer to
this best matching question to the human evalua-
tor. The evaluator then scores the response on a bi-
nary scale. A score of 1 is given if the returned an-
swer is the correct response to the SMS query, else
it is assigned 0. The scoring procedure is reversed
for irrelevant queries i.e. a score of 0 is assigned
if the system returns an answer and 1 is assigned
if it returns “null” for an “irrelevant” query. The
result of this evaluation on both data-sets is shown
in Figure 7 and 8.
</bodyText>
<figureCaption confidence="0.999034">
Figure 8: Accuracy on Yahoo FAQ Dataset
</figureCaption>
<bodyText confidence="0.9971102">
In order to compare the performance of our sys-
tem, we benchmark our results against Lucene’s
15 Fuzzy match feature. Lucene supports fuzzy
searches based on the Levenshtein Distance, or
Edit Distance algorithm. To do a fuzzy search
</bodyText>
<footnote confidence="0.676282">
15http://lucene.apache.org
</footnote>
<bodyText confidence="0.99716644">
we specify the — symbol at the end of each to-
ken of the SMS query. For example, the SMS
query “romg actvt” on the FAQ corpus is refor-
mulated as “romg— 0.3 actvt— 0.3”. The param-
eter after the — specifies the required similarity.
The parameter value is between 0 and 1, with a
value closer to 1 only terms with higher similar-
ity will be matched. These queries are run on the
indexed FAQs. The results of this evaluation on
both data-sets is shown in Figure 7 and 8. The
results clearly demonstrate that our method per-
forms 2 to 2.5 times better than Lucene’s Fuzzy
match. It was observed that with higher values
of similarity parameter (— 0.6, — 0.8), the num-
ber of correctly answered queries was even lower.
In Figure 9 we show the runtime performance of
the Naive vs Pruning algorithm on the Yahoo FAQ
Dataset for 150 SMS queries. It is evident from
Figure 9 that not only does the Pruning Algorithm
outperform the Naive one but also gives a near-
constant runtime performance over all the queries.
The substantially better performance of the Prun-
ing algorithm is due to the fact that it queries much
less number of terms and ends up with a smaller
candidate set compared to the Naive algorithm.
</bodyText>
<figureCaption confidence="0.929374">
Figure 9: Runtime of Pruning vs Naive Algorithm
for Yahoo FAQ Dataset
</figureCaption>
<sectionHeader confidence="0.998118" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.999751777777778">
In recent times there has been a rise in SMS based
QA services. However, automating such services
has been a challenge due to the inherent noise in
SMS language. In this paper we gave an efficient
algorithm for answering FAQ questions over an
SMS interface. Results of applying this on two
different FAQ datasets shows that such a system
can be very effective in automating SMS based
FAQ retrieval.
</bodyText>
<page confidence="0.998366">
859
</page>
<sectionHeader confidence="0.99587" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999829">
Rudy Schusteritsch, Shailendra Rao, Kerry Rodden.
2005. Mobile Search with Text Messages: Design-
ing the User Experience for Google SMS. CHI,
Portland, Oregon.
Sunil Kumar Kopparapu, Akhilesh Srivastava and Arun
Pande. 2007. SMS based Natural Language Inter-
face to Yellow Pages Directory, In Proceedings of
the 4th International conference on mobile technol-
ogy, applications, and systems and the 1st Interna-
tional symposium on Computer human interaction
in mobile technology, Singapore.
Monojit Choudhury, Rahul Saraf, Sudeshna Sarkar, Vi-
jit Jain, and Anupam Basu. 2007. Investigation and
Modeling of the Structure of Texting Language, In
Proceedings of IJCAI-2007 Workshop on Analytics
for Noisy Unstructured Text Data, Hyderabad.
E. Voorhees. 1999. The TREC-8 question answering
track report.
D. Molla. 2003. NLP for Answer Extraction in Tech-
nical Domains, In Proceedings of EACL, USA.
E. Sneiders. 2002. Automated question answering
using question templates that cover the conceptual
model of the database, In Proceedings of NLDB,
pages 235−239.
B. Katz, S. Felshin, D. Yuret, A. Ibrahim, J. Lin, G.
Marton, and B. Temelkuran. 2002. Omnibase: Uni-
form access to heterogeneous data for question an-
swering, Natural Language Processing and Infor-
mation Systems, pages 230−234.
E. Sneiders. 1999. Automated FAQ Answering: Con-
tinued Experience with Shallow Language Under-
standing, Question Answering Systems. Papers from
the 1999 AAAI Fall Symposium. Technical Report
FS-99−02, November 5−7, North Falmouth, Mas-
sachusetts, USA, AAAI Press, pp.97−107
W. Song, M. Feng, N. Gu, and L. Wenyin. 2007.
Question similarity calculation for FAQ answering,
In Proceeding of SKG 07, pages 298−301.
Aiti Aw, Min Zhang, Juan Xiao, and Jian Su. 2006.
A phrase-based statistical model for SMS text nor-
malization, In Proceedings of COLING/ACL, pages
33−40.
Catherine Kobus, Franois Yvon and Graldine Damnati.
2008. Normalizing SMS: are two metaphors bet-
ter than one?, In Proceedings of the 22nd Inter-
national Conference on Computational Linguistics,
pages 441−448 Manchester.
Jeunghyun Byun, Seung-Wook Lee, Young-In Song,
Hae-Chang Rim. 2008. Two Phase Model for SMS
Text Messages Refinement, Association for the Ad-
vancement ofArtificial Intelligence. AAAI Workshop
on Enhanced Messaging
Ronald Fagin , Amnon Lotem , Moni Naor. 2001.
Optimal aggregation algorithms for middleware, In
Proceedings of the 20th ACM SIGMOD-SIGACT-
SIGART symposium on Principles of database sys-
tems.
I. Dan Melamed. 1999. Bitext maps and alignment via
pattern recognition, Computational Linguistics.
E. Prochasson, Christian Viard-Gaudin, Emmanuel
Morin. 2007. Language Models for Handwritten
Short Message Services, In Proceedings of the 9th
International Conference on DocumentAnalysis and
Recognition.
Sreangsu Acharya, Sumit Negi, L. V. Subramaniam,
Shourya Roy. 2008. Unsupervised learning of mul-
tilingual short message service (SMS) dialect from
noisy examples, In Proceedings of the second work-
shop on Analytics for noisy unstructured text data.
</reference>
<page confidence="0.997672">
860
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.934007">
<title confidence="0.996411">SMS based Interface for FAQ Retrieval</title>
<author confidence="0.999674">Govind Kothari</author>
<affiliation confidence="0.999949">IBM India Research Lab</affiliation>
<email confidence="0.998747">gokothar@in.ibm.com</email>
<author confidence="0.980891">Sumit Negi</author>
<affiliation confidence="0.999682">IBM India Research Lab</affiliation>
<email confidence="0.998597">sumitneg@in.ibm.com</email>
<author confidence="0.999722">Tanveer A Faruquie</author>
<affiliation confidence="0.999424">IBM India Research Lab</affiliation>
<email confidence="0.998957">ftanveer@in.ibm.com</email>
<author confidence="0.999632">Venkatesan T Chakaravarthy</author>
<affiliation confidence="0.999511">IBM India Research Lab</affiliation>
<email confidence="0.998335">vechakra@in.ibm.com</email>
<abstract confidence="0.998365956521739">Short Messaging Service (SMS) is popularly used to provide information access to people on the move. This has resulted in the growth of SMS based Question Answering (QA) services. However automatically handling SMS questions poses significant challenges due to the inherent noise in SMS questions. In this work we present an automatic FAQ-based question answering system for SMS users. We handle the noise in a SMS query by formulating the query similarity over FAQ questions as a combinatorial search problem. The search space consists of combinations of all possible dictionary variations of tokens in the noisy query. We present an efficient search algorithm that does not require any training data or SMS normalization and can handle semantic variations in question formulation. We demonstrate the effectiveness of our approach on two reallife datasets.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Rudy Schusteritsch</author>
<author>Shailendra Rao</author>
<author>Kerry Rodden</author>
</authors>
<title>Mobile Search with Text Messages: Designing the User Experience for Google SMS. CHI,</title>
<date>2005</date>
<location>Portland, Oregon.</location>
<contexts>
<context position="5556" citStr="Schusteritsch et al., 2005" startWordPosition="881" endWordPosition="884">est of the paper is organized as follows. Section 2 describes the relevant prior work in this area and talks about our specific contributions. In Section 3 we give the problem formulation. Section 4 describes the Pruning Algorithm which finds the best matching question for a given SMS query. Section 5 provides system implementation details. Section 6 provides details about our experiments. Finally we conclude in Section 7. 2 Prior Work There has been growing interest in providing access to applications, traditionally available on Internet, on mobile devices using SMS. Examples include Search (Schusteritsch et al., 2005), access to Yellow Page services (Kopparapu et al., 2007), Email 5, Blog 6 , FAQ retrieval 7 etc. As highlighted earlier, these SMS-based FAQ retrieval services use human experts to answer questions. There are other research and commercial systems which have been developed for general question and answering. These systems generally adopt one of the following three approaches: Human intervention based, Information Retrieval based, or Natural language processing based. Human intervention based systems exploit human communities to answer questions. These systems 8 are interesting because they sug</context>
</contexts>
<marker>Schusteritsch, Rao, Rodden, 2005</marker>
<rawString>Rudy Schusteritsch, Shailendra Rao, Kerry Rodden. 2005. Mobile Search with Text Messages: Designing the User Experience for Google SMS. CHI, Portland, Oregon.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sunil Kumar Kopparapu</author>
<author>Akhilesh Srivastava</author>
<author>Arun Pande</author>
</authors>
<title>SMS based Natural Language Interface to Yellow Pages Directory,</title>
<date>2007</date>
<booktitle>In Proceedings of the 4th International conference on mobile technology, applications, and systems and the 1st International symposium on Computer human interaction in mobile technology,</booktitle>
<contexts>
<context position="5613" citStr="Kopparapu et al., 2007" startWordPosition="890" endWordPosition="893"> the relevant prior work in this area and talks about our specific contributions. In Section 3 we give the problem formulation. Section 4 describes the Pruning Algorithm which finds the best matching question for a given SMS query. Section 5 provides system implementation details. Section 6 provides details about our experiments. Finally we conclude in Section 7. 2 Prior Work There has been growing interest in providing access to applications, traditionally available on Internet, on mobile devices using SMS. Examples include Search (Schusteritsch et al., 2005), access to Yellow Page services (Kopparapu et al., 2007), Email 5, Blog 6 , FAQ retrieval 7 etc. As highlighted earlier, these SMS-based FAQ retrieval services use human experts to answer questions. There are other research and commercial systems which have been developed for general question and answering. These systems generally adopt one of the following three approaches: Human intervention based, Information Retrieval based, or Natural language processing based. Human intervention based systems exploit human communities to answer questions. These systems 8 are interesting because they suggest similar questions resolved in the past. Other system</context>
</contexts>
<marker>Kopparapu, Srivastava, Pande, 2007</marker>
<rawString>Sunil Kumar Kopparapu, Akhilesh Srivastava and Arun Pande. 2007. SMS based Natural Language Interface to Yellow Pages Directory, In Proceedings of the 4th International conference on mobile technology, applications, and systems and the 1st International symposium on Computer human interaction in mobile technology, Singapore.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Monojit Choudhury</author>
<author>Rahul Saraf</author>
<author>Sudeshna Sarkar</author>
<author>Vijit Jain</author>
<author>Anupam Basu</author>
</authors>
<title>Investigation and Modeling of the Structure of Texting Language,</title>
<date>2007</date>
<booktitle>In Proceedings of IJCAI-2007 Workshop on Analytics for Noisy Unstructured Text Data,</booktitle>
<location>Hyderabad.</location>
<contexts>
<context position="7697" citStr="Choudhury et al., 2007" startWordPosition="1209" endWordPosition="1212">rted into a template representation which is then used to extract answers from some structured representation (Sneiders, 2002) (Katz et al., 2002). Except for human intervention based QA systems most of the other QA systems work in restricted domains and employ techniques such as named entity recognition, co-reference resolution, logic form transformation etc which require the question to be represented in linguistically correct format. These methods do not work for SMS based FAQ answering because of the high level of noise present in SMS text. There exists some work to remove noise from SMS (Choudhury et al., 2007) (Byun et al., 2007) (Aw et al., 2006) (Kobus et al., 2008). However, all of these techniques require aligned corpus of SMS and conventional language for training. Building this aligned corpus is a difficult task and requires considerable human effort. (Acharya et al., 2008) propose an unsupervised technique that maps non-standard words to their corresponding conventional frequent form. Their method can identify non-standard transliteration of a given token only if the context surrounding that token is frequent in the corpus. This might not be true in all domains. 2.1 Our Contribution To the b</context>
</contexts>
<marker>Choudhury, Saraf, Sarkar, Jain, Basu, 2007</marker>
<rawString>Monojit Choudhury, Rahul Saraf, Sudeshna Sarkar, Vijit Jain, and Anupam Basu. 2007. Investigation and Modeling of the Structure of Texting Language, In Proceedings of IJCAI-2007 Workshop on Analytics for Noisy Unstructured Text Data, Hyderabad.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Voorhees</author>
</authors>
<title>The TREC-8 question answering track report.</title>
<date>1999</date>
<contexts>
<context position="6636" citStr="Voorhees, 1999" startWordPosition="1037" endWordPosition="1038">based. Human intervention based systems exploit human communities to answer questions. These systems 8 are interesting because they suggest similar questions resolved in the past. Other systems 5http://www.sms2email.com/ 6http://www.letmeparty.com/ 7http://www.chacha.com/ 8http://www.answers.yahoo.com/ like Chacha and Askme9 use qualified human experts to answer questions in a timely manner. The information retrieval based system treat question answering as an information retrieval problem. They search large corpus of text for specific text, phrases or paragraphs relevant to a given question (Voorhees, 1999). In FAQ based question answering, where FAQ provide a ready made database of question-answer, the main task is to find the closest matching question to retrieve the relevant answer (Sneiders, 1999) (Song et al., 2007). The natural language processing based system tries to fully parse a question to discover semantic structure and then apply logic to formulate the answer (Molla et al., 2003). In another approach the questions are converted into a template representation which is then used to extract answers from some structured representation (Sneiders, 2002) (Katz et al., 2002). Except for hum</context>
</contexts>
<marker>Voorhees, 1999</marker>
<rawString>E. Voorhees. 1999. The TREC-8 question answering track report.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Molla</author>
</authors>
<title>NLP for Answer Extraction in Technical Domains,</title>
<date>2003</date>
<booktitle>In Proceedings of EACL,</booktitle>
<location>USA.</location>
<marker>Molla, 2003</marker>
<rawString>D. Molla. 2003. NLP for Answer Extraction in Technical Domains, In Proceedings of EACL, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Sneiders</author>
</authors>
<title>Automated question answering using question templates that cover the conceptual model of the database,</title>
<date>2002</date>
<booktitle>In Proceedings of NLDB,</booktitle>
<pages>235--239</pages>
<contexts>
<context position="7200" citStr="Sneiders, 2002" startWordPosition="1129" endWordPosition="1130">raphs relevant to a given question (Voorhees, 1999). In FAQ based question answering, where FAQ provide a ready made database of question-answer, the main task is to find the closest matching question to retrieve the relevant answer (Sneiders, 1999) (Song et al., 2007). The natural language processing based system tries to fully parse a question to discover semantic structure and then apply logic to formulate the answer (Molla et al., 2003). In another approach the questions are converted into a template representation which is then used to extract answers from some structured representation (Sneiders, 2002) (Katz et al., 2002). Except for human intervention based QA systems most of the other QA systems work in restricted domains and employ techniques such as named entity recognition, co-reference resolution, logic form transformation etc which require the question to be represented in linguistically correct format. These methods do not work for SMS based FAQ answering because of the high level of noise present in SMS text. There exists some work to remove noise from SMS (Choudhury et al., 2007) (Byun et al., 2007) (Aw et al., 2006) (Kobus et al., 2008). However, all of these techniques require a</context>
</contexts>
<marker>Sneiders, 2002</marker>
<rawString>E. Sneiders. 2002. Automated question answering using question templates that cover the conceptual model of the database, In Proceedings of NLDB, pages 235−239.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Katz</author>
<author>S Felshin</author>
<author>D Yuret</author>
<author>A Ibrahim</author>
<author>J Lin</author>
<author>G Marton</author>
<author>B Temelkuran</author>
</authors>
<title>Omnibase: Uniform access to heterogeneous data for question answering, Natural Language Processing and Information Systems,</title>
<date>2002</date>
<pages>230--234</pages>
<contexts>
<context position="7220" citStr="Katz et al., 2002" startWordPosition="1131" endWordPosition="1134"> a given question (Voorhees, 1999). In FAQ based question answering, where FAQ provide a ready made database of question-answer, the main task is to find the closest matching question to retrieve the relevant answer (Sneiders, 1999) (Song et al., 2007). The natural language processing based system tries to fully parse a question to discover semantic structure and then apply logic to formulate the answer (Molla et al., 2003). In another approach the questions are converted into a template representation which is then used to extract answers from some structured representation (Sneiders, 2002) (Katz et al., 2002). Except for human intervention based QA systems most of the other QA systems work in restricted domains and employ techniques such as named entity recognition, co-reference resolution, logic form transformation etc which require the question to be represented in linguistically correct format. These methods do not work for SMS based FAQ answering because of the high level of noise present in SMS text. There exists some work to remove noise from SMS (Choudhury et al., 2007) (Byun et al., 2007) (Aw et al., 2006) (Kobus et al., 2008). However, all of these techniques require aligned corpus of SMS</context>
</contexts>
<marker>Katz, Felshin, Yuret, Ibrahim, Lin, Marton, Temelkuran, 2002</marker>
<rawString>B. Katz, S. Felshin, D. Yuret, A. Ibrahim, J. Lin, G. Marton, and B. Temelkuran. 2002. Omnibase: Uniform access to heterogeneous data for question answering, Natural Language Processing and Information Systems, pages 230−234.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Sneiders</author>
</authors>
<title>Automated FAQ Answering: Continued Experience with Shallow Language Understanding, Question Answering Systems. Papers from the 1999 AAAI Fall Symposium.</title>
<date>1999</date>
<tech>Technical Report FS-99−02,</tech>
<pages>97--107</pages>
<publisher>AAAI Press,</publisher>
<location>North Falmouth, Massachusetts, USA,</location>
<contexts>
<context position="6834" citStr="Sneiders, 1999" startWordPosition="1071" endWordPosition="1072">p://www.sms2email.com/ 6http://www.letmeparty.com/ 7http://www.chacha.com/ 8http://www.answers.yahoo.com/ like Chacha and Askme9 use qualified human experts to answer questions in a timely manner. The information retrieval based system treat question answering as an information retrieval problem. They search large corpus of text for specific text, phrases or paragraphs relevant to a given question (Voorhees, 1999). In FAQ based question answering, where FAQ provide a ready made database of question-answer, the main task is to find the closest matching question to retrieve the relevant answer (Sneiders, 1999) (Song et al., 2007). The natural language processing based system tries to fully parse a question to discover semantic structure and then apply logic to formulate the answer (Molla et al., 2003). In another approach the questions are converted into a template representation which is then used to extract answers from some structured representation (Sneiders, 2002) (Katz et al., 2002). Except for human intervention based QA systems most of the other QA systems work in restricted domains and employ techniques such as named entity recognition, co-reference resolution, logic form transformation et</context>
</contexts>
<marker>Sneiders, 1999</marker>
<rawString>E. Sneiders. 1999. Automated FAQ Answering: Continued Experience with Shallow Language Understanding, Question Answering Systems. Papers from the 1999 AAAI Fall Symposium. Technical Report FS-99−02, November 5−7, North Falmouth, Massachusetts, USA, AAAI Press, pp.97−107</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Song</author>
<author>M Feng</author>
<author>N Gu</author>
<author>L Wenyin</author>
</authors>
<title>Question similarity calculation for FAQ answering,</title>
<date>2007</date>
<booktitle>In Proceeding of SKG 07,</booktitle>
<pages>298--301</pages>
<contexts>
<context position="6854" citStr="Song et al., 2007" startWordPosition="1073" endWordPosition="1076">.com/ 6http://www.letmeparty.com/ 7http://www.chacha.com/ 8http://www.answers.yahoo.com/ like Chacha and Askme9 use qualified human experts to answer questions in a timely manner. The information retrieval based system treat question answering as an information retrieval problem. They search large corpus of text for specific text, phrases or paragraphs relevant to a given question (Voorhees, 1999). In FAQ based question answering, where FAQ provide a ready made database of question-answer, the main task is to find the closest matching question to retrieve the relevant answer (Sneiders, 1999) (Song et al., 2007). The natural language processing based system tries to fully parse a question to discover semantic structure and then apply logic to formulate the answer (Molla et al., 2003). In another approach the questions are converted into a template representation which is then used to extract answers from some structured representation (Sneiders, 2002) (Katz et al., 2002). Except for human intervention based QA systems most of the other QA systems work in restricted domains and employ techniques such as named entity recognition, co-reference resolution, logic form transformation etc which require the </context>
</contexts>
<marker>Song, Feng, Gu, Wenyin, 2007</marker>
<rawString>W. Song, M. Feng, N. Gu, and L. Wenyin. 2007. Question similarity calculation for FAQ answering, In Proceeding of SKG 07, pages 298−301.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aiti Aw</author>
<author>Min Zhang</author>
<author>Juan Xiao</author>
<author>Jian Su</author>
</authors>
<title>A phrase-based statistical model for SMS text normalization,</title>
<date>2006</date>
<booktitle>In Proceedings of COLING/ACL,</booktitle>
<pages>33--40</pages>
<contexts>
<context position="7735" citStr="Aw et al., 2006" startWordPosition="1217" endWordPosition="1220">then used to extract answers from some structured representation (Sneiders, 2002) (Katz et al., 2002). Except for human intervention based QA systems most of the other QA systems work in restricted domains and employ techniques such as named entity recognition, co-reference resolution, logic form transformation etc which require the question to be represented in linguistically correct format. These methods do not work for SMS based FAQ answering because of the high level of noise present in SMS text. There exists some work to remove noise from SMS (Choudhury et al., 2007) (Byun et al., 2007) (Aw et al., 2006) (Kobus et al., 2008). However, all of these techniques require aligned corpus of SMS and conventional language for training. Building this aligned corpus is a difficult task and requires considerable human effort. (Acharya et al., 2008) propose an unsupervised technique that maps non-standard words to their corresponding conventional frequent form. Their method can identify non-standard transliteration of a given token only if the context surrounding that token is frequent in the corpus. This might not be true in all domains. 2.1 Our Contribution To the best of our knowledge we are the first </context>
</contexts>
<marker>Aw, Zhang, Xiao, Su, 2006</marker>
<rawString>Aiti Aw, Min Zhang, Juan Xiao, and Jian Su. 2006. A phrase-based statistical model for SMS text normalization, In Proceedings of COLING/ACL, pages 33−40.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Catherine Kobus</author>
<author>Franois Yvon</author>
<author>Graldine Damnati</author>
</authors>
<title>Normalizing SMS: are two metaphors better than one?,</title>
<date>2008</date>
<booktitle>In Proceedings of the 22nd International Conference on Computational Linguistics,</booktitle>
<pages>441--448</pages>
<location>Manchester.</location>
<contexts>
<context position="7756" citStr="Kobus et al., 2008" startWordPosition="1221" endWordPosition="1224">ct answers from some structured representation (Sneiders, 2002) (Katz et al., 2002). Except for human intervention based QA systems most of the other QA systems work in restricted domains and employ techniques such as named entity recognition, co-reference resolution, logic form transformation etc which require the question to be represented in linguistically correct format. These methods do not work for SMS based FAQ answering because of the high level of noise present in SMS text. There exists some work to remove noise from SMS (Choudhury et al., 2007) (Byun et al., 2007) (Aw et al., 2006) (Kobus et al., 2008). However, all of these techniques require aligned corpus of SMS and conventional language for training. Building this aligned corpus is a difficult task and requires considerable human effort. (Acharya et al., 2008) propose an unsupervised technique that maps non-standard words to their corresponding conventional frequent form. Their method can identify non-standard transliteration of a given token only if the context surrounding that token is frequent in the corpus. This might not be true in all domains. 2.1 Our Contribution To the best of our knowledge we are the first to handle issues rela</context>
</contexts>
<marker>Kobus, Yvon, Damnati, 2008</marker>
<rawString>Catherine Kobus, Franois Yvon and Graldine Damnati. 2008. Normalizing SMS: are two metaphors better than one?, In Proceedings of the 22nd International Conference on Computational Linguistics, pages 441−448 Manchester.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeunghyun Byun</author>
<author>Seung-Wook Lee</author>
</authors>
<title>Young-In Song, Hae-Chang Rim.</title>
<date>2008</date>
<marker>Byun, Lee, 2008</marker>
<rawString>Jeunghyun Byun, Seung-Wook Lee, Young-In Song, Hae-Chang Rim. 2008. Two Phase Model for SMS Text Messages Refinement, Association for the Advancement ofArtificial Intelligence. AAAI Workshop on Enhanced Messaging</rawString>
</citation>
<citation valid="true">
<authors>
<author>Amnon Lotem</author>
</authors>
<title>Optimal aggregation algorithms for middleware,</title>
<date>2001</date>
<booktitle>In Proceedings of the 20th ACM SIGMOD-SIGACTSIGART symposium on Principles of database systems.</booktitle>
<marker>Lotem, 2001</marker>
<rawString>Ronald Fagin , Amnon Lotem , Moni Naor. 2001. Optimal aggregation algorithms for middleware, In Proceedings of the 20th ACM SIGMOD-SIGACTSIGART symposium on Principles of database systems.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Dan Melamed</author>
</authors>
<title>Bitext maps and alignment via pattern recognition,</title>
<date>1999</date>
<journal>Computational Linguistics.</journal>
<contexts>
<context position="17027" citStr="Melamed, 1999" startWordPosition="2928" endWordPosition="2929">the dictionary of all the terms in the corpus Q. For term t E D and token si of the SMS, the similarity measure α(t, si) between them is 855 LCSRatio(t,si) EditDistanceSMS(t,si) if t and si share same starting character * 0 otherwise (2) where LCSRatio(t, si) = length(LCS(t,si)) and LCS(t, si) is length(t) the Longest common subsequence between t and si. * The rationale behind this heuristic is that while typing a SMS, people typically type the first few characters correctly. Also, this heuristic helps limit the variants possible for a given token. The Longest Common Subsequence Ratio (LCSR) (Melamed, 1999) of two strings is the ratio of the length of their LCS and the length of the longer string. Since in SMS text, the dictionary term will always be longer than the SMS token, the denominator of LCSR is taken as the length of the dictionary term. We call this modified LCSR as the LCSRatio. Procedure EditDistanceSMS Input: term t, token si Output: Consonant Skeleton Edit distance Begin return LevenshteinDistance(CS(si), CS(t)) + 1 // 1 is added to handle the case where // Levenshtein Distance is 0 End Consonant Skeleton Generation (CS) 1. remove consecutive repeated characters // (call --+ cal) 2</context>
</contexts>
<marker>Melamed, 1999</marker>
<rawString>I. Dan Melamed. 1999. Bitext maps and alignment via pattern recognition, Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Prochasson</author>
<author>Christian Viard-Gaudin</author>
<author>Emmanuel Morin</author>
</authors>
<title>Language Models for Handwritten Short Message Services,</title>
<date>2007</date>
<booktitle>In Proceedings of the 9th International Conference on DocumentAnalysis and Recognition.</booktitle>
<contexts>
<context position="17805" citStr="Prochasson et al., 2007" startWordPosition="3055" endWordPosition="3058">than the SMS token, the denominator of LCSR is taken as the length of the dictionary term. We call this modified LCSR as the LCSRatio. Procedure EditDistanceSMS Input: term t, token si Output: Consonant Skeleton Edit distance Begin return LevenshteinDistance(CS(si), CS(t)) + 1 // 1 is added to handle the case where // Levenshtein Distance is 0 End Consonant Skeleton Generation (CS) 1. remove consecutive repeated characters // (call --+ cal) 2. remove all vowels //(waiting --+ wtng, great --+ grt) Figure 3: EditDistanceSMS The EditDistanceSMS shown in Figure 3 compares the Consonant Skeletons (Prochasson et al., 2007) of the dictionary term and the SMS token. If the consonant keys are similar, i.e. the Levenshtein distance between them is less, the similarity measure defined in Equation 2 will be high. We explain the rationale behind using the EditDistanceSMS in the similarity measure α(t, si) through an example. For the SMS token “gud” the most likely correct form is “good”. The two dictionary terms “good” and “guided” have the same LCSRatio of 0.5 w.r.t “gud”, but the EditDistanceSMS of “good” is 1 which is less than that of “guided”, which has EditDistanceSMS of 2 w.r.t “gud”. As a result the similarity</context>
</contexts>
<marker>Prochasson, Viard-Gaudin, Morin, 2007</marker>
<rawString>E. Prochasson, Christian Viard-Gaudin, Emmanuel Morin. 2007. Language Models for Handwritten Short Message Services, In Proceedings of the 9th International Conference on DocumentAnalysis and Recognition.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sreangsu Acharya</author>
<author>Sumit Negi</author>
<author>L V Subramaniam</author>
<author>Shourya Roy</author>
</authors>
<title>Unsupervised learning of multilingual short message service (SMS) dialect from noisy examples,</title>
<date>2008</date>
<booktitle>In Proceedings of the</booktitle>
<contexts>
<context position="7972" citStr="Acharya et al., 2008" startWordPosition="1256" endWordPosition="1259"> as named entity recognition, co-reference resolution, logic form transformation etc which require the question to be represented in linguistically correct format. These methods do not work for SMS based FAQ answering because of the high level of noise present in SMS text. There exists some work to remove noise from SMS (Choudhury et al., 2007) (Byun et al., 2007) (Aw et al., 2006) (Kobus et al., 2008). However, all of these techniques require aligned corpus of SMS and conventional language for training. Building this aligned corpus is a difficult task and requires considerable human effort. (Acharya et al., 2008) propose an unsupervised technique that maps non-standard words to their corresponding conventional frequent form. Their method can identify non-standard transliteration of a given token only if the context surrounding that token is frequent in the corpus. This might not be true in all domains. 2.1 Our Contribution To the best of our knowledge we are the first to handle issues relating to SMS based automatic question-answering. We address the challenges in building a FAQ-based question answering system over a SMS interface. Our method is unsupervised and does not require aligned corpus or expl</context>
</contexts>
<marker>Acharya, Negi, Subramaniam, Roy, 2008</marker>
<rawString>Sreangsu Acharya, Sumit Negi, L. V. Subramaniam, Shourya Roy. 2008. Unsupervised learning of multilingual short message service (SMS) dialect from noisy examples, In Proceedings of the second workshop on Analytics for noisy unstructured text data.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>