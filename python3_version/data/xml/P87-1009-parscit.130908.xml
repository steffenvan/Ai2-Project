<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000076">
<title confidence="0.961914">
Phrasal Analysis of Long Noun Sequences
</title>
<author confidence="0.983898">
Yigal Arens, John J. Granacki, and Alice C. Parker
</author>
<affiliation confidence="0.997925">
University of Southern California
</affiliation>
<address confidence="0.936037">
Los Angeles, CA 90089-0782
</address>
<email confidence="0.801351">
ABSTRACT
</email>
<bodyText confidence="0.999924739130435">
Noun phrases consisting of a sequence of nouns
(sometimes referred to as nominal compounds) pose
considerable difficulty for language analyzers but
are common in many technical domains. The
problems are compounded when some of the nouns
in the sequence are ambiguously also verbs. The
phrasal approach to language analysis, as imple-
mented in PHRAN (PHRasal ANalyzer), has been
extended to handle the recognition and partial
analysis of such constructions. The phrasal
analysis of a noun sequence is performed to an
extent sufficient for continued analysis of the sen-
tence in which it appears. PHRAN is currently
being used as part of the SPAN (SPecification
ANalysis) natural language interface to the USC
Advanced Design AutoMation system (ADAM)
(Granacki et al, 1985). PHRAN-SPAN is an inter-
face for entering and interpreting digital system
specifications, in which long noun sequences occur
often. The extensions to PHRAN&apos;s knowledge base
to recognize these constructs are described, along
with the algorithm used to detect and resolve
ambiguities which arise in the noun sequences.
</bodyText>
<sectionHeader confidence="0.99836" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.946056666666666">
In everyday language we routinely encounter
noun phrases consisting of an article and a head
noun, possibly modified by one or more adjectives.
Noun-noun pairs, e. g., park bench, atom bomb,
and computer programmer, are also common. It is
rare, however, to encounter noun phrases consisting
of three or more nouns in sequence. Consequently,
research in natural language analysis has not con-
centrated on parsing such constructions.
The situation in many technical fields is quite
different. For example, when describing the
specifications of electronic systems, designers com-
monly use expressions such as:
bus request cycle
transfer block size
segment trap request
interrupt vector transfer phase
arithmetic register transfer instruction.
During design specification such phrases are
often constructed by the specifier in order to refer-
ence a particular entity: a piece of hardware, an
activity, or a range of time. In most cases • the
nouns preceding the last one are used as modifiers,
and idiomatic expressions are very rare. In almost
all cases the meaning of noun sequences can there-
fore be inferred largely based on the last noun in
the sequence*. (But see Finin (1980) for in-depth
treatment of the meaning of such constructions).
The process of recognizing the presence of
these expressions is, however, complicated by the
fact that many of the words used are syntactically
ambiguous. Almost every single word used in the
examples above belongs to both the syntactic
categories of noun and verb. As a result,
bus request cycle
may conceivably be understood either as a corn-
</bodyText>
<table confidence="0.332288714285714">
* When a sequence has length three or more the order of
modification may vary. Consider:
[engine damage[ report
January [aircraft repairs]
[boron epoxy[ [[rocket motor] chambers]
1970 [ [balloon Right)
I [solar-cell standardization] program[ 1.
</table>
<tableCaption confidence="0.155844">
But the last noun is still the modified one. These
examples are from (Rhyne, 1976) and (Marcus, 1979).
</tableCaption>
<page confidence="0.997364">
59
</page>
<bodyText confidence="0.999569090909091">
mand (to bus the request cycle) or as a noun
phrase.
Considerable knowledge of the semantics of
the domain is necessary to decide the correct
interpretation of a nominal compound and the
natural language analyzer must ultimately have
access to it. But before complete semantic
interpretation of such a noun phrase can even be
attempted the analyzer must have a method of
recognizing its presence in a sentence and determin-
ing its boundaries.
</bodyText>
<subsectionHeader confidence="0.996524">
1.1. The Rest of this Paper
</subsectionHeader>
<bodyText confidence="0.999972666666667">
The rest of this paper is structured as fol-
lows: In the next section, Section 2., we describe
the phrasal analysis approach used by our system
to process input sentences. In Section 3. we discuss
the problems involved in the recognition of long
noun sequences, and in Section 4. we present our
proposed solution and describe its implementation.
Sections 5. and 6. are devoted to related work and
to our conclusions, respectively.
</bodyText>
<sectionHeader confidence="0.915286" genericHeader="method">
2. The PHRAN-SPAN System
</sectionHeader>
<bodyText confidence="0.9998551">
PHRAN, a PHRasal ANalysis program,
(Arens, 1986) (Wilensky and Arens, 1980), is an
implementation of a knowledge-based approach to
natural language understanding. The knowledge
PHRAN has of the language is stored in the form
of pattern-concept pairs (PCPs). The linguistic
component of a pattern-concept pair is called a
phrasal pattern and describes an utterance at one
of various different levels of abstraction. It may be
a single word, or a literal string like
</bodyText>
<listItem confidence="0.5495975">
Digital Equipment Corporation,
or it may be a general phrase such as
</listItem>
<equation confidence="0.8278125">
(1) &lt;component&gt; &lt;send&gt; &lt;data&gt;
to &lt;component&gt;
</equation>
<bodyText confidence="0.9996275">
which allows any object belonging to the semantic
category component to appear as the first and last
constituents, anything in the semantic category
data as the third constituent, any form of the verb
send as the second, while the lexical item to must
appear as the fourth constituent.
Associated with each phrasal pattern is a
conceptual template, which describes the meaning
of the phrasal pattern, usually with references to
the constituents of the associated phrase. Each
PCP encodes a single piece of knowledge about the
language the database is describing.
For the purpose of describing design
specifications and requirements a declarative
representation language was devised, called SRL
(Specification and Requirements Language). In
SRL the conceptual template associated with
phrasal pattern (1) above is a form of unidirec-
tional value transfer. In this specific case it denotes
the transfer of the data described by the third con-
stituent of the pattern by the controlling agent
described by the first constituent to the component
described by the fifth. For further details of the
representation language used see (Granacld et al,
1987).
PHRAN analyzes input by searching for
phrasal patterns that match fragments of it and
replacing such fragments with the conceptual tem-
plate associated with the pattern. The result of
matching a pattern may in turn be present as a
constituent in a larger pattern. Finally, the con-
ceptual template associated with a pattern that
accounts for all the input is used to generate a
structure denoting the meaning of the complete
utterance.
A slightly more involved version of the PCP
discussed above is used by PHRAN-SPAN to
analyze the sentence:
The cpu transfers the code word from the
controller to the peripheral device.
</bodyText>
<sectionHeader confidence="0.899756" genericHeader="method">
3. The Problem with Long Noun Sequences
</sectionHeader>
<bodyText confidence="0.996254444444445">
Long noun sequences pose considerable
difficulty to a natural language analyzer. The
problems will be described and treated in this sec-
tion in terms of phrasal analysis, but they are not
artifacts of this approach. A comparison with
other approaches to such constructs, mentioned
later in this paper, also makes this clear.
The main difficulties with multiple noun
sequences are:
</bodyText>
<listItem confidence="0.7539148">
• Determination of their length. One must
make sure that the first few nouns are not
taken to constitute the first noun phrase,
ignoring the words that follow. For example,
upon reading bus request cycle we do not
</listItem>
<page confidence="0.98104">
60
</page>
<bodyText confidence="0.949206">
want the analyzer to conclude that the first
noun phrase is simply bus, or bus request.
</bodyText>
<listItem confidence="0.822245">
• Interpretation of ambiguous noun/verbs. A
</listItem>
<bodyText confidence="0.859890625">
large portion of the vocabulary used in digi-
tal system specification consists of words
which are both nouns and verbs. Conse-
quently the phrase interrupt vector transfer
phase, for example, might be interpreted as a
command to interrupt the vector transfer
phase, or (unless we are careful about
number agreement) as the claim that phase is
transferred by interrupt vectors.
In spoken language stress is sometimes used
to &amp;quot;adjective-ize&amp;quot; nouns used as modifiers.
For example, the spoken form would be
&amp;quot;arithmetic register transfer&amp;quot; rather than
&amp;quot;arithmetic register transfer&amp;quot;. Obviously,
such a device is not available in our case,
where specifications are typed.
</bodyText>
<listItem confidence="0.932365416666667">
• Determination of enough about their mean-
ing to permit further analysis of the input.
Full understanding of such expressions
requires more domain knowledge than one
would wish to employ at this point in the
analysis process (Cf. Finin (1980)). However,
at least a minimal understanding of the
semantics of the noun phrase is necessary for
testing selectional restrictions of higher level
phrasal patterns. This is required, in turn, in
order to provide a correct representation of
the meaning of the complete input.
</listItem>
<bodyText confidence="0.989248444444444">
The phrasal approach utilizes the phrasal
pattern as the primary means of recognizing
expressions, and in particular noun sequences. In
effect, a phrasal pattern is a sequence of restrictions
that constituents must satisfy in order to match
the pattern. The most common restrictions on a
constituent in a PHRAN phrasal pattern, and the
ones relevant in our case, are of the following three
types:
</bodyText>
<listItem confidence="0.99457">
1. The constituent must be a particular word;
2. It must belong to a particular semantic
category; or,
3. It must belong to a particular syntactic
category.
</listItem>
<bodyText confidence="0.996602263157895">
In addition, simple lookahead restrictions
may be attached to any constituent of the pattern.
In the original version of PHRAN such restrictions
were limited to demanding that the following word
be of a certain syntactic category.
Simple phrasal patterns are clearly not capa-
ble of solving the problem of recognizing multiple
noun sequences. It is not possible to anticipate all
such sequences and specify them literally, word for
word, since they are often generated on the fly by
the system specifier.
For a similar reason phrasal patterns describ-
ing the sequence of semantic categories that the
nouns belong to are, as a rule, inadequate.
Finally, from the syntactic point of view all
these constructions are just sequences of nouns. A
pattern simply specifying such a sequence provides
little of the information needed to decide which
expression is present and what it might refer to.
</bodyText>
<sectionHeader confidence="0.972856" genericHeader="method">
4. A Heuristic Solution
</sectionHeader>
<bodyText confidence="0.999348833333333">
PHRAN&apos;s inherent priority scheme was used
to solve part of the problem. If a word can be
used either as a noun or a verb, it is recognized
first as a noun, all other things being equal. This
simple approach was modified to be subject to the
following rules:
</bodyText>
<listItem confidence="0.875317157894737">
1. If the current word is a noun, and the next
word may be either a noun or a verb, test it
for number agreement (as a verb). If the test
is unsuccessful do not end the noun phrase.
2. If the current word is a noun, and the next
word may be either a noun or a verb, test if
the current word* is a possible active agent
with respect to the next (as a verb). If not,
do not end the noun phrase.
3. If the current word is a noun, and the next
word may be either a noun or a verb, check
the word after the next one. If it is (unambi-
guously) a verb, end the noun phrase with
the next word. If it is (unambiguously) a
noun, do not end the noun phrase. If the
second word away may be either a noun or a
verb, treat the utterance as potentially ambi-
guous, with a noun phrase ending either at
the current word or with the next word.
</listItem>
<bodyText confidence="0.9949684">
Once a complete noun phrase is detected a
new token is created to represent its referent.
The current word may be the last in a sequence of
nouns; we are again assuming that its meaning can be
used to approximate the meaning of the noun sequence.
</bodyText>
<page confidence="0.998431">
61
</page>
<bodyText confidence="0.99965784">
While all nouns used in its construction are noted,
it inherits the semantics of the last noun in the
sequence. This information may be used in later
stages of the analysis. Other programs which
receive the analyzer&apos;s output will inspect the
representation of the noun phrase again later to
determine its meaning more precisely.
The heuristic described above has been found
to be sufficient to deal with all inputs our system
has received up until now. It detects as ambiguous
a sentence such as the following:
The cpu signal interrupts transfer activity.
When looking at the word cpu PHRAN-SPAN
finds that Rule 1. can be used. Since number
agreement is absent between cpu and signal (used
as a verb), the noun phrase cannot be considered
complete yet. When the word signal is processed,
the system notes that interrupts may be either a
(plural) noun or a verb. Number agreement is
found, and it is also the case that a signal may act
as an agent in an action of interruption, so rules 1.
and 2. provide no information. Using Rule 3. we
find that the following word, transfer is an ambi-
guous noun/verb. Thus the result of the analysis
to this point is indicated as ambiguous, possibly
</bodyText>
<listItem confidence="0.731986">
a. [the cpu signal] [interrupts] [transfer
activity], or
b. [the cpu signal interrupts] [transfer]
[activity] .
</listItem>
<bodyText confidence="0.9977805">
The type of ambiguity detected by Rule 3.
can often be eliminated by instructing the users of
the specification system to use modals when possi-
ble. In case of the example above, to force one of
the two readings for the sentence, a user might
type the cpu signal will interrupt transfer activity,
or the cpu signal interrupts will transfer activity, as
appropriate.
</bodyText>
<subsectionHeader confidence="0.998931">
4.1. Requesting User Assistance
</subsectionHeader>
<bodyText confidence="0.9998965">
When Rule 3. detects an ambiguity, the sys-
tem presents both alternatives to the user and asks
for an indication of the intended one.
PCPs encode in their phrasal pattern descrip-
tions, among other things, selectional restrictions
that at times allow the system to rule out some of
the ambiguities detected by Rule 3. For example,
it is conceivable that interrupts might not be
acceptable as agents in a transfer. PHRAN-SPAN
would thus be capable of eventually ruling out
analysis b. above on its own.
However, more often than not it is the case
that both interpretations provided by Rule 3. are
sensible. We decided that the risk of a wrong
specification being produced required that in cases
of potential ambiguity the system request immedi-
ate aid from the user. Therefore, when sentences
like the one in the example above are typed and
processed, PHRAN-SPAN will present both possi-
ble readings to the user and request that the
intended one be pointed out before analysis
proceeds.
</bodyText>
<subsectionHeader confidence="0.9781">
4.2. Rule Implementation
</subsectionHeader>
<bodyText confidence="0.945832266666667">
The rules described above are implemented in
several pattern-concept pairs and are incorporated
into the standard PHRAN knowledge base of
PCPs. For example, one of the PCPs used to
detect the situation described in Rule 1. while tak-
ing into consideration Rule 3. is (in simplified
form):
Pattern:
{&lt;article&gt; &lt;sing-noun &amp; next N/V &amp;
next non-sing &amp;
after-next verb&gt;)
Concept
{part of speech: noun phrase
semantics: inherit from (second noun)
modifiers: (first noun))
</bodyText>
<subsectionHeader confidence="0.999529">
4.3. Current Status
</subsectionHeader>
<bodyText confidence="0.9997765">
The system currently processes specifications
associated with all primitive concepts of the
specification language, which are sufficient to
describe behavior in the domain of digital systems.
Pattern-concept pairs have been written for 25
basic verbs common in specifications and for over
100 nouns. This is in addition to several hundred
PCPs supplied with the original PHRAN system.
The system is coded in Franz LISP and runs
on SUN/2 under UNIX 4.2 BSD. In interpreted
mode a typical specification sentence will take 20
cpu seconds to process. No attempt has been made
to optimize the code, compile it, or port it to a
LISP processor. Any of these should result in an
</bodyText>
<page confidence="0.998177">
62
</page>
<bodyText confidence="0.981737">
interface which could operate in near real-time.
</bodyText>
<sectionHeader confidence="0.998765" genericHeader="related work">
5. Related Work
</sectionHeader>
<bodyText confidence="0.997017060606061">
The problem of noun sequences of the kind
common in technical fields like digital system
specification has received only limited treatment in
the literature. Winograd (Winograd, 1972)
presents a more general discussion of Noun Groups,
but the type of utterances his system expects does
not include extended sequences of nouns as are
common in our domain. Winograd therefore does
not address the specific ambiguity problems raised
here.
Gershman&apos;s Noun Group Parser (NGP)
(Gershman, 1979) dealt, among other things, with
multiple noun sequences. While our algorithm is
consistent with his, our approach differs from NGP
in major respects. NGP contains what amount to
several different programs for various types of
noun groups, while we treat the information
needed to analyze these structures as data.
PHRAN embodies a general approach to language
analysis that does not require components special-
ized to different types of utterances. A clear
separation of processing strategies from knowledge
about the language has numerous advantages that
have been listed elsewhere (Arens, 1986). In addi-
tion, our treatment of noun groups as a whole is
integrated into PHRAN and not a separate
module, as NGP is.
In evaluating the two systems, however, one
must keep in mind that the choice of domain
greatly influences the areas of emphasis and
interest in language analysis. NGP is capable of
handling several forms of noun groups that we
have not attempted to deal with.
Marcus (1979) describes a parsing algorithm*
for long noun sequences of the type discussed in
this paper. It is interesting to note that the lim-
ited lookahead added to the original PHRAN for
the purpose of noun sequence recognition is con-
sistent with Marcus&apos; three-place constituent buffer.
The major difference between Marcus&apos; algorithm
and ours is that the former requires a semantic
component that can judge the relative &amp;quot;goodness&amp;quot;
of two possible noun-noun modifier pairs. For
* Discovered by Finin (1980) to be erroneous in some
cases.
example, given the expression transfer block size,
this component would be responsible for determin-
ing whether block size is semantically superior to
transfer block.
Such a powerful component is not necessary
for achieving our present objective — recognizing
the presence and boundaries of a noun sequence.
Our heuristic does not require it.
A complementary but largely orthogonal
effort is the complete semantic interpretation of
long noun sequences. There have been several
attempts to deal with the problem of producing a
meaning representation for a given string of nouns.
See (Finin, 19$0) and (ReimoId, 1976) for extensive
work in this area, and also (Brachman, 1978) and
(Borgida, 1975). Such work by and large assumes
that the noun sequence has already been recognized
as such. I. e., it requires the existence of a com-
ponent much like the one described in this paper
from which to receive a noun sequence for process-
ing.
</bodyText>
<sectionHeader confidence="0.978703" genericHeader="conclusions">
8. Conclusions
</sectionHeader>
<bodyText confidence="0.999991333333333">
We have presented a heuristic approach to
the understanding of long noun sequences. The
heuristics have been incorporated into the PHRasal
ANalyzer by adding to its declarative knowledge
base of pattern-concept pairs. These additions pro-
vide the PHRAN-SPAN system with the capability
to translate digital system specifications input in
English into correct representations for use by
other programs.
</bodyText>
<sectionHeader confidence="0.9745" genericHeader="acknowledgments">
7. Acknowledgements
</sectionHeader>
<bodyText confidence="0.999722666666667">
We wish to thank the anonymous reviewers
of this paper for several helpful comments.
This research was supported in part by the
National Science Foundation under computer
engineering grant #DMC-8310744. John Granacki
was partially supported by the Hughes Aircraft Co.
</bodyText>
<sectionHeader confidence="0.926144" genericHeader="references">
8. Bibliography
</sectionHeader>
<reference confidence="0.971776333333333">
Arens, Y. CLUSTER: An approach to Contextual
Language Understanding. Ph.D. thesis, University
of California at Berkeley, 1986.
</reference>
<page confidence="0.987557">
63
</page>
<reference confidence="0.998597925">
Borgida, A. T. Topics in the Understanding of
English Sentences by Computer. Ph.D. thesis,
Department of Computer Science, University of
Toronto, 1975.
Brachman, R. J. Theoretical Studies in Natural
Language Understanding. Report No. 3833, Bolt
Beranek and Newman, May 1978.
Finin, T. W. The Semantic Interpretation of Com-
pound Nominals. Ph.D. thesis, University of Illi-
nois at Urbana-Champaign, 1980.
Gershman, A. V. Knowledge-Based Parsing.
Ph.D. thesis, Yale University, April 1979.
Granacki, J., D. Knapp, and A. Parker. The
ADAM Design Automation System: Overview,
Planner and Natural Language Interface. In
Proceedings of the 22nd ACM/IEEE Design Auto-
mation Conference, pp. 727-730. ACM/IEEE,
June, 1985.
Granacki, J., A. Parker, and Y. Arens. Under-
standing System Specifications Written in Natural
Language. In Proceedings of IJCAI-87, the Tenth
International Joint Conference on Artificial Intelli-
gence. Milan, Italy. July 1987.
Marcus, M. P. A Theory of Syntactic Recognition
for Natural Language. The MIT Press, Cambridge,
Mass. and London, England, 1979.
Reimold, P. M. An Integrated System of Percep-
tual Strategies: Syntactic and Semantic Interpreta-
tion of English Sentences. Ph.D. thesis, Columbia
University, 1976.
Rhyne, J. R. A Lexical Process Model of Nominal
Compounding in English. American Journal of
Computational Linguistics, microfiche 33. 1976.
Wilensky, R., and Y. Arens. PHRAN: A
Knowledge-Based Natural Language Understander.
In Proceedings of the 18th Annual Meeting of the
Association for Computational Linguistics. Phi-
ladelphia, PA. June 1980.
Winograd, T. Understanding Natural Language.
Academic Press, 1972.
</reference>
<page confidence="0.999418">
64
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.991708">
<title confidence="0.999199">Phrasal Analysis of Long Noun Sequences</title>
<author confidence="0.99876">Yigal Arens</author>
<author confidence="0.99876">John J Granacki</author>
<author confidence="0.99876">Alice C Parker</author>
<affiliation confidence="0.999914">University of Southern California</affiliation>
<address confidence="0.999834">Los Angeles, CA 90089-0782</address>
<abstract confidence="0.999727041666667">Noun phrases consisting of a sequence of nouns referred to as compounds) considerable difficulty for language analyzers but are common in many technical domains. The problems are compounded when some of the nouns in the sequence are ambiguously also verbs. The phrasal approach to language analysis, as implemented in PHRAN (PHRasal ANalyzer), has been extended to handle the recognition and partial analysis of such constructions. The phrasal analysis of a noun sequence is performed to an extent sufficient for continued analysis of the sentence in which it appears. PHRAN is currently being used as part of the SPAN (SPecification ANalysis) natural language interface to the USC Advanced Design AutoMation system (ADAM) (Granacki et al, 1985). PHRAN-SPAN is an interface for entering and interpreting digital system specifications, in which long noun sequences occur often. The extensions to PHRAN&apos;s knowledge base to recognize these constructs are described, along with the algorithm used to detect and resolve ambiguities which arise in the noun sequences.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Y Arens</author>
</authors>
<title>CLUSTER: An approach to Contextual Language Understanding.</title>
<date>1986</date>
<tech>Ph.D. thesis,</tech>
<institution>University of California at Berkeley,</institution>
<contexts>
<context position="4167" citStr="Arens, 1986" startWordPosition="660" endWordPosition="661">method of recognizing its presence in a sentence and determining its boundaries. 1.1. The Rest of this Paper The rest of this paper is structured as follows: In the next section, Section 2., we describe the phrasal analysis approach used by our system to process input sentences. In Section 3. we discuss the problems involved in the recognition of long noun sequences, and in Section 4. we present our proposed solution and describe its implementation. Sections 5. and 6. are devoted to related work and to our conclusions, respectively. 2. The PHRAN-SPAN System PHRAN, a PHRasal ANalysis program, (Arens, 1986) (Wilensky and Arens, 1980), is an implementation of a knowledge-based approach to natural language understanding. The knowledge PHRAN has of the language is stored in the form of pattern-concept pairs (PCPs). The linguistic component of a pattern-concept pair is called a phrasal pattern and describes an utterance at one of various different levels of abstraction. It may be a single word, or a literal string like Digital Equipment Corporation, or it may be a general phrase such as (1) &lt;component&gt; &lt;send&gt; &lt;data&gt; to &lt;component&gt; which allows any object belonging to the semantic category component </context>
<context position="16220" citStr="Arens, 1986" startWordPosition="2669" endWordPosition="2670">(Gershman, 1979) dealt, among other things, with multiple noun sequences. While our algorithm is consistent with his, our approach differs from NGP in major respects. NGP contains what amount to several different programs for various types of noun groups, while we treat the information needed to analyze these structures as data. PHRAN embodies a general approach to language analysis that does not require components specialized to different types of utterances. A clear separation of processing strategies from knowledge about the language has numerous advantages that have been listed elsewhere (Arens, 1986). In addition, our treatment of noun groups as a whole is integrated into PHRAN and not a separate module, as NGP is. In evaluating the two systems, however, one must keep in mind that the choice of domain greatly influences the areas of emphasis and interest in language analysis. NGP is capable of handling several forms of noun groups that we have not attempted to deal with. Marcus (1979) describes a parsing algorithm* for long noun sequences of the type discussed in this paper. It is interesting to note that the limited lookahead added to the original PHRAN for the purpose of noun sequence r</context>
</contexts>
<marker>Arens, 1986</marker>
<rawString>Arens, Y. CLUSTER: An approach to Contextual Language Understanding. Ph.D. thesis, University of California at Berkeley, 1986.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A T Borgida</author>
</authors>
<title>Topics in the Understanding of English Sentences by Computer.</title>
<date>1975</date>
<tech>Ph.D. thesis,</tech>
<institution>Department of Computer Science, University of Toronto,</institution>
<contexts>
<context position="17833" citStr="Borgida, 1975" startWordPosition="2931" endWordPosition="2932">onsible for determining whether block size is semantically superior to transfer block. Such a powerful component is not necessary for achieving our present objective — recognizing the presence and boundaries of a noun sequence. Our heuristic does not require it. A complementary but largely orthogonal effort is the complete semantic interpretation of long noun sequences. There have been several attempts to deal with the problem of producing a meaning representation for a given string of nouns. See (Finin, 19$0) and (ReimoId, 1976) for extensive work in this area, and also (Brachman, 1978) and (Borgida, 1975). Such work by and large assumes that the noun sequence has already been recognized as such. I. e., it requires the existence of a component much like the one described in this paper from which to receive a noun sequence for processing. 8. Conclusions We have presented a heuristic approach to the understanding of long noun sequences. The heuristics have been incorporated into the PHRasal ANalyzer by adding to its declarative knowledge base of pattern-concept pairs. These additions provide the PHRAN-SPAN system with the capability to translate digital system specifications input in English into</context>
</contexts>
<marker>Borgida, 1975</marker>
<rawString>Borgida, A. T. Topics in the Understanding of English Sentences by Computer. Ph.D. thesis, Department of Computer Science, University of Toronto, 1975.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R J Brachman</author>
</authors>
<title>Theoretical Studies in Natural Language Understanding.</title>
<date>1978</date>
<tech>Report No. 3833,</tech>
<institution>Bolt Beranek and Newman,</institution>
<contexts>
<context position="17813" citStr="Brachman, 1978" startWordPosition="2928" endWordPosition="2929">mponent would be responsible for determining whether block size is semantically superior to transfer block. Such a powerful component is not necessary for achieving our present objective — recognizing the presence and boundaries of a noun sequence. Our heuristic does not require it. A complementary but largely orthogonal effort is the complete semantic interpretation of long noun sequences. There have been several attempts to deal with the problem of producing a meaning representation for a given string of nouns. See (Finin, 19$0) and (ReimoId, 1976) for extensive work in this area, and also (Brachman, 1978) and (Borgida, 1975). Such work by and large assumes that the noun sequence has already been recognized as such. I. e., it requires the existence of a component much like the one described in this paper from which to receive a noun sequence for processing. 8. Conclusions We have presented a heuristic approach to the understanding of long noun sequences. The heuristics have been incorporated into the PHRasal ANalyzer by adding to its declarative knowledge base of pattern-concept pairs. These additions provide the PHRAN-SPAN system with the capability to translate digital system specifications i</context>
</contexts>
<marker>Brachman, 1978</marker>
<rawString>Brachman, R. J. Theoretical Studies in Natural Language Understanding. Report No. 3833, Bolt Beranek and Newman, May 1978.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T W Finin</author>
</authors>
<title>The Semantic Interpretation of Compound Nominals.</title>
<date>1980</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Illinois at Urbana-Champaign,</institution>
<contexts>
<context position="2437" citStr="Finin (1980)" startWordPosition="377" endWordPosition="378">esigners commonly use expressions such as: bus request cycle transfer block size segment trap request interrupt vector transfer phase arithmetic register transfer instruction. During design specification such phrases are often constructed by the specifier in order to reference a particular entity: a piece of hardware, an activity, or a range of time. In most cases • the nouns preceding the last one are used as modifiers, and idiomatic expressions are very rare. In almost all cases the meaning of noun sequences can therefore be inferred largely based on the last noun in the sequence*. (But see Finin (1980) for in-depth treatment of the meaning of such constructions). The process of recognizing the presence of these expressions is, however, complicated by the fact that many of the words used are syntactically ambiguous. Almost every single word used in the examples above belongs to both the syntactic categories of noun and verb. As a result, bus request cycle may conceivably be understood either as a corn* When a sequence has length three or more the order of modification may vary. Consider: [engine damage[ report January [aircraft repairs] [boron epoxy[ [[rocket motor] chambers] 1970 [ [balloon</context>
<context position="8137" citStr="Finin (1980)" startWordPosition="1296" endWordPosition="1297">ut number agreement) as the claim that phase is transferred by interrupt vectors. In spoken language stress is sometimes used to &amp;quot;adjective-ize&amp;quot; nouns used as modifiers. For example, the spoken form would be &amp;quot;arithmetic register transfer&amp;quot; rather than &amp;quot;arithmetic register transfer&amp;quot;. Obviously, such a device is not available in our case, where specifications are typed. • Determination of enough about their meaning to permit further analysis of the input. Full understanding of such expressions requires more domain knowledge than one would wish to employ at this point in the analysis process (Cf. Finin (1980)). However, at least a minimal understanding of the semantics of the noun phrase is necessary for testing selectional restrictions of higher level phrasal patterns. This is required, in turn, in order to provide a correct representation of the meaning of the complete input. The phrasal approach utilizes the phrasal pattern as the primary means of recognizing expressions, and in particular noun sequences. In effect, a phrasal pattern is a sequence of restrictions that constituents must satisfy in order to match the pattern. The most common restrictions on a constituent in a PHRAN phrasal patter</context>
<context position="17108" citStr="Finin (1980)" startWordPosition="2818" endWordPosition="2819">ysis. NGP is capable of handling several forms of noun groups that we have not attempted to deal with. Marcus (1979) describes a parsing algorithm* for long noun sequences of the type discussed in this paper. It is interesting to note that the limited lookahead added to the original PHRAN for the purpose of noun sequence recognition is consistent with Marcus&apos; three-place constituent buffer. The major difference between Marcus&apos; algorithm and ours is that the former requires a semantic component that can judge the relative &amp;quot;goodness&amp;quot; of two possible noun-noun modifier pairs. For * Discovered by Finin (1980) to be erroneous in some cases. example, given the expression transfer block size, this component would be responsible for determining whether block size is semantically superior to transfer block. Such a powerful component is not necessary for achieving our present objective — recognizing the presence and boundaries of a noun sequence. Our heuristic does not require it. A complementary but largely orthogonal effort is the complete semantic interpretation of long noun sequences. There have been several attempts to deal with the problem of producing a meaning representation for a given string o</context>
</contexts>
<marker>Finin, 1980</marker>
<rawString>Finin, T. W. The Semantic Interpretation of Compound Nominals. Ph.D. thesis, University of Illinois at Urbana-Champaign, 1980.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A V Gershman</author>
</authors>
<title>Knowledge-Based Parsing.</title>
<date>1979</date>
<tech>Ph.D. thesis,</tech>
<institution>Yale University,</institution>
<contexts>
<context position="15624" citStr="Gershman, 1979" startWordPosition="2579" endWordPosition="2580">rt it to a LISP processor. Any of these should result in an 62 interface which could operate in near real-time. 5. Related Work The problem of noun sequences of the kind common in technical fields like digital system specification has received only limited treatment in the literature. Winograd (Winograd, 1972) presents a more general discussion of Noun Groups, but the type of utterances his system expects does not include extended sequences of nouns as are common in our domain. Winograd therefore does not address the specific ambiguity problems raised here. Gershman&apos;s Noun Group Parser (NGP) (Gershman, 1979) dealt, among other things, with multiple noun sequences. While our algorithm is consistent with his, our approach differs from NGP in major respects. NGP contains what amount to several different programs for various types of noun groups, while we treat the information needed to analyze these structures as data. PHRAN embodies a general approach to language analysis that does not require components specialized to different types of utterances. A clear separation of processing strategies from knowledge about the language has numerous advantages that have been listed elsewhere (Arens, 1986). In</context>
</contexts>
<marker>Gershman, 1979</marker>
<rawString>Gershman, A. V. Knowledge-Based Parsing. Ph.D. thesis, Yale University, April 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Granacki</author>
<author>D Knapp</author>
<author>A Parker</author>
</authors>
<title>The ADAM Design Automation System: Overview, Planner and Natural Language Interface.</title>
<date>1985</date>
<booktitle>In Proceedings of the 22nd ACM/IEEE Design Automation Conference,</booktitle>
<pages>727--730</pages>
<publisher>ACM/IEEE,</publisher>
<contexts>
<context position="930" citStr="Granacki et al, 1985" startWordPosition="140" endWordPosition="143">are common in many technical domains. The problems are compounded when some of the nouns in the sequence are ambiguously also verbs. The phrasal approach to language analysis, as implemented in PHRAN (PHRasal ANalyzer), has been extended to handle the recognition and partial analysis of such constructions. The phrasal analysis of a noun sequence is performed to an extent sufficient for continued analysis of the sentence in which it appears. PHRAN is currently being used as part of the SPAN (SPecification ANalysis) natural language interface to the USC Advanced Design AutoMation system (ADAM) (Granacki et al, 1985). PHRAN-SPAN is an interface for entering and interpreting digital system specifications, in which long noun sequences occur often. The extensions to PHRAN&apos;s knowledge base to recognize these constructs are described, along with the algorithm used to detect and resolve ambiguities which arise in the noun sequences. 1. Introduction In everyday language we routinely encounter noun phrases consisting of an article and a head noun, possibly modified by one or more adjectives. Noun-noun pairs, e. g., park bench, atom bomb, and computer programmer, are also common. It is rare, however, to encounter </context>
</contexts>
<marker>Granacki, Knapp, Parker, 1985</marker>
<rawString>Granacki, J., D. Knapp, and A. Parker. The ADAM Design Automation System: Overview, Planner and Natural Language Interface. In Proceedings of the 22nd ACM/IEEE Design Automation Conference, pp. 727-730. ACM/IEEE, June, 1985.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Granacki</author>
<author>A Parker</author>
<author>Y Arens</author>
</authors>
<title>Understanding System Specifications Written in Natural Language.</title>
<date>1987</date>
<booktitle>In Proceedings of IJCAI-87, the Tenth International Joint Conference on Artificial Intelligence.</booktitle>
<location>Milan, Italy.</location>
<marker>Granacki, Parker, Arens, 1987</marker>
<rawString>Granacki, J., A. Parker, and Y. Arens. Understanding System Specifications Written in Natural Language. In Proceedings of IJCAI-87, the Tenth International Joint Conference on Artificial Intelligence. Milan, Italy. July 1987.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M P Marcus</author>
</authors>
<title>A Theory of Syntactic Recognition for Natural Language.</title>
<date>1979</date>
<publisher>The MIT Press,</publisher>
<location>Cambridge, Mass. and London, England,</location>
<contexts>
<context position="3189" citStr="Marcus, 1979" startWordPosition="497" endWordPosition="498">mplicated by the fact that many of the words used are syntactically ambiguous. Almost every single word used in the examples above belongs to both the syntactic categories of noun and verb. As a result, bus request cycle may conceivably be understood either as a corn* When a sequence has length three or more the order of modification may vary. Consider: [engine damage[ report January [aircraft repairs] [boron epoxy[ [[rocket motor] chambers] 1970 [ [balloon Right) I [solar-cell standardization] program[ 1. But the last noun is still the modified one. These examples are from (Rhyne, 1976) and (Marcus, 1979). 59 mand (to bus the request cycle) or as a noun phrase. Considerable knowledge of the semantics of the domain is necessary to decide the correct interpretation of a nominal compound and the natural language analyzer must ultimately have access to it. But before complete semantic interpretation of such a noun phrase can even be attempted the analyzer must have a method of recognizing its presence in a sentence and determining its boundaries. 1.1. The Rest of this Paper The rest of this paper is structured as follows: In the next section, Section 2., we describe the phrasal analysis approach u</context>
<context position="16612" citStr="Marcus (1979)" startWordPosition="2739" endWordPosition="2740">does not require components specialized to different types of utterances. A clear separation of processing strategies from knowledge about the language has numerous advantages that have been listed elsewhere (Arens, 1986). In addition, our treatment of noun groups as a whole is integrated into PHRAN and not a separate module, as NGP is. In evaluating the two systems, however, one must keep in mind that the choice of domain greatly influences the areas of emphasis and interest in language analysis. NGP is capable of handling several forms of noun groups that we have not attempted to deal with. Marcus (1979) describes a parsing algorithm* for long noun sequences of the type discussed in this paper. It is interesting to note that the limited lookahead added to the original PHRAN for the purpose of noun sequence recognition is consistent with Marcus&apos; three-place constituent buffer. The major difference between Marcus&apos; algorithm and ours is that the former requires a semantic component that can judge the relative &amp;quot;goodness&amp;quot; of two possible noun-noun modifier pairs. For * Discovered by Finin (1980) to be erroneous in some cases. example, given the expression transfer block size, this component would </context>
</contexts>
<marker>Marcus, 1979</marker>
<rawString>Marcus, M. P. A Theory of Syntactic Recognition for Natural Language. The MIT Press, Cambridge, Mass. and London, England, 1979.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P M Reimold</author>
</authors>
<title>An Integrated System of Perceptual Strategies: Syntactic and Semantic Interpretation of English Sentences.</title>
<date>1976</date>
<tech>Ph.D. thesis,</tech>
<institution>Columbia University,</institution>
<marker>Reimold, 1976</marker>
<rawString>Reimold, P. M. An Integrated System of Perceptual Strategies: Syntactic and Semantic Interpretation of English Sentences. Ph.D. thesis, Columbia University, 1976.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J R Rhyne</author>
</authors>
<title>A Lexical Process Model of Nominal Compounding in English.</title>
<date>1976</date>
<journal>American Journal of Computational Linguistics, microfiche</journal>
<volume>33</volume>
<contexts>
<context position="3170" citStr="Rhyne, 1976" startWordPosition="494" endWordPosition="495">ns is, however, complicated by the fact that many of the words used are syntactically ambiguous. Almost every single word used in the examples above belongs to both the syntactic categories of noun and verb. As a result, bus request cycle may conceivably be understood either as a corn* When a sequence has length three or more the order of modification may vary. Consider: [engine damage[ report January [aircraft repairs] [boron epoxy[ [[rocket motor] chambers] 1970 [ [balloon Right) I [solar-cell standardization] program[ 1. But the last noun is still the modified one. These examples are from (Rhyne, 1976) and (Marcus, 1979). 59 mand (to bus the request cycle) or as a noun phrase. Considerable knowledge of the semantics of the domain is necessary to decide the correct interpretation of a nominal compound and the natural language analyzer must ultimately have access to it. But before complete semantic interpretation of such a noun phrase can even be attempted the analyzer must have a method of recognizing its presence in a sentence and determining its boundaries. 1.1. The Rest of this Paper The rest of this paper is structured as follows: In the next section, Section 2., we describe the phrasal </context>
</contexts>
<marker>Rhyne, 1976</marker>
<rawString>Rhyne, J. R. A Lexical Process Model of Nominal Compounding in English. American Journal of Computational Linguistics, microfiche 33. 1976.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Wilensky</author>
<author>Y Arens</author>
</authors>
<title>PHRAN: A Knowledge-Based Natural Language Understander.</title>
<date>1980</date>
<booktitle>In Proceedings of the 18th Annual Meeting of the Association for Computational Linguistics.</booktitle>
<location>Philadelphia, PA.</location>
<contexts>
<context position="4194" citStr="Wilensky and Arens, 1980" startWordPosition="662" endWordPosition="665">gnizing its presence in a sentence and determining its boundaries. 1.1. The Rest of this Paper The rest of this paper is structured as follows: In the next section, Section 2., we describe the phrasal analysis approach used by our system to process input sentences. In Section 3. we discuss the problems involved in the recognition of long noun sequences, and in Section 4. we present our proposed solution and describe its implementation. Sections 5. and 6. are devoted to related work and to our conclusions, respectively. 2. The PHRAN-SPAN System PHRAN, a PHRasal ANalysis program, (Arens, 1986) (Wilensky and Arens, 1980), is an implementation of a knowledge-based approach to natural language understanding. The knowledge PHRAN has of the language is stored in the form of pattern-concept pairs (PCPs). The linguistic component of a pattern-concept pair is called a phrasal pattern and describes an utterance at one of various different levels of abstraction. It may be a single word, or a literal string like Digital Equipment Corporation, or it may be a general phrase such as (1) &lt;component&gt; &lt;send&gt; &lt;data&gt; to &lt;component&gt; which allows any object belonging to the semantic category component to appear as the first and </context>
</contexts>
<marker>Wilensky, Arens, 1980</marker>
<rawString>Wilensky, R., and Y. Arens. PHRAN: A Knowledge-Based Natural Language Understander. In Proceedings of the 18th Annual Meeting of the Association for Computational Linguistics. Philadelphia, PA. June 1980.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Winograd</author>
</authors>
<title>Understanding Natural Language.</title>
<date>1972</date>
<publisher>Academic Press,</publisher>
<contexts>
<context position="15320" citStr="Winograd, 1972" startWordPosition="2532" endWordPosition="2533"> in addition to several hundred PCPs supplied with the original PHRAN system. The system is coded in Franz LISP and runs on SUN/2 under UNIX 4.2 BSD. In interpreted mode a typical specification sentence will take 20 cpu seconds to process. No attempt has been made to optimize the code, compile it, or port it to a LISP processor. Any of these should result in an 62 interface which could operate in near real-time. 5. Related Work The problem of noun sequences of the kind common in technical fields like digital system specification has received only limited treatment in the literature. Winograd (Winograd, 1972) presents a more general discussion of Noun Groups, but the type of utterances his system expects does not include extended sequences of nouns as are common in our domain. Winograd therefore does not address the specific ambiguity problems raised here. Gershman&apos;s Noun Group Parser (NGP) (Gershman, 1979) dealt, among other things, with multiple noun sequences. While our algorithm is consistent with his, our approach differs from NGP in major respects. NGP contains what amount to several different programs for various types of noun groups, while we treat the information needed to analyze these s</context>
</contexts>
<marker>Winograd, 1972</marker>
<rawString>Winograd, T. Understanding Natural Language. Academic Press, 1972.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>