<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000028">
<title confidence="0.982537">
Multi-Modal Combinatory Categorial Grammar
</title>
<author confidence="0.967774">
Jason Baldridge
</author>
<affiliation confidence="0.950695">
ICCS
School of Informatics
2 Buccleuch Place
University of Edinburgh
</affiliation>
<address confidence="0.947259">
Edinburgh EH8 9LW, UK
</address>
<email confidence="0.997192">
]mb@cogsci.ed.ac.uk
</email>
<author confidence="0.936885">
Geert-Jan M. Kruijff
</author>
<affiliation confidence="0.880117">
Universitat des Saarlandes
Computational Linguistics
</affiliation>
<address confidence="0.820266333333333">
Lehrstuhl Uszkoreit
Building 17, Postfach 15 11 50
66041 Saarbriicken, Germany
</address>
<email confidence="0.991327">
gj@coli. uni—sb.de
</email>
<sectionHeader confidence="0.998536" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999137277777778">
The paper shows how Combinatory Cat-
egorial Grammar (CCG) can be adapted
to take advantage of the extra resource-
sensitivity provided by the Categorial
Type Logic framework. The resulting
reformulation, Multi-Modal CCG, sup-
ports lexically specified control over the
applicability of combinatory rules, per-
mitting a universal rule component and
shedding the need for language-specific
restrictions on rules. We discuss some
of the linguistic motivation for these
changes, define the Multi-Modal CCG
system and demonstrate how it works
on some basic examples. We further-
more outline some possible extensions
and address computational aspects of
Multi-Modal CCG.
</bodyText>
<sectionHeader confidence="0.999468" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999906565217391">
The family of categorial grammar frameworks
contains a diverse set of formalisms committed to
many of the same core principles, such as compo-
sitionality, a strong degree of lexicalism, and se-
mantic transparency. Nonetheless, each formalism
has its own characteristics with respect to the cate-
gory constructors and rules of combination it em-
ploys and the differing kinds of linguistic explana-
tions which arise from its unique assumptions.
A formalism&apos;s category constructors and com-
bination rules together define its resource-
sensitivity: given the resources we have (i.e. ex-
pressions and their associated categories) we can,
or can not, apply particular rules to form more
complex expressions. It is particularly this idea
of resource-sensitivity that is realized differently
across different formalisms.
In this paper, we explain how two prominent
categorial grammar frameworks, namely Com-
binatory Categorial Grammar (CCG, Steedman
(2000)) and Categorial Type Logic (CTL, Mor-
rill (1994); Moortgat (1997); Oehrle (to appear)),
can be integrated to create a hybrid categorial
framework, Multi-Modal Combinatory Categorial
Grammar (Baldridge, 2002), that inherits the at-
tractive properties of both. Specifically, Multi-
Modal CCG retains the favorable computional as-
pects of CCG whilst incorporating the approach to
resource-sensitivity taken in CTL. At the theoret-
ical level, we discuss how this form of resource-
sensitivity enables us to replace the rather ad
hoc rule-specific constraints found in CCG with
a clean resource-management regime, leading to
more parsimonious linguistic analyses. We also
discuss some of the benefits of modalized CCG
for computational processing.
Although Multi-Modal CCG has the same set
of rules as standard CCG, its improved resource-
sensitivity enables it to have a universal rule com-
ponent. It places all cross-linguistic variation
in the lexicon, leading to a typological perspec-
tive on grammar that not only describes, but can
also make predictions about, syntactic structure:
Multi-Modal CCG provides a new view on how
a typological perspective can be incorporated in a
lexicalized, non-transformational setting.
</bodyText>
<page confidence="0.996977">
211
</page>
<bodyText confidence="0.999023714285714">
Overview. We introduce CCG in §2, and then mo-
tivate the need for a revised notion of resource-
sensitivity in CCG in §3. In §4, we introduce
Multi-Modal CCG and present possible extensions
in §5. Finally, we discuss the computational ad-
vantages of Multi-Modal CCG in §6 and then close
with conclusions.
</bodyText>
<sectionHeader confidence="0.970272" genericHeader="method">
2 Combinatory Categorial Grammar
</sectionHeader>
<bodyText confidence="0.999666857142857">
CCG&apos;s grammatical objects are categories which
may be either atomic elements or (curried) func-
tions which specify the canonical linear direction
in which they seek their arguments. Lexical en-
tries are specified by pairing words with categories
via the I- operator. Some simplified example en-
tries are given below:1
</bodyText>
<equation confidence="0.843223">
(1) (a) Ed I- np, (b) Ann I- np, (c) saw I- (s\np)/np
The basic rules for combining categories are
forward (&gt;) and backward (&lt;) application:
(&gt;) X/Y Y = X
(&lt;) Y X \Y = X
</equation>
<bodyText confidence="0.999581071428571">
With these rules and the categories given in (1),
we can provide the derivation (2) for a simple sen-
tence such as Ed saw Ann. Because of CCG&apos;s
semantic transparency, a logical form for the sen-
tence can be built compositionally and in parallel
to the syntactic derivation. We will, however, sup-
press semantics in this paper.
These additional rules induce associativity in
derivations, which is crucial for building the non-
standard constituents for which categorial gram-
mars are well-known. For example, we can now
provide the following alternative derivation to (2),
in which the verb combines with its subject before
applying to its object:
</bodyText>
<listItem confidence="0.511914">
(3) Ed saw Ann
</listItem>
<equation confidence="0.959389">
npT (s\ np)/np
s/(s\n&gt;p)
s/np
&gt;
</equation>
<bodyText confidence="0.998946384615385">
Note that the combinatory rules have an invariant
type-driven semantics, so this derivation produces
precisely the same logical form as (2).
Arguably, one of CCG&apos;s greatest successes has
been in demonstrating that the behavior of un-
bounded dependencies in syntax can be explained
in a purely type-driven fashion in which the same
lexical types that are responsible for bounded de-
pendencies interact with CCG&apos;s combinatory rules
to generalize to unbounded phenomena. For ex-
ample, the same category (lc) given for saw is im-
plicated in the derivation of not only Ed saw Ann,
but also in the relative clause object extraction that
</bodyText>
<figure confidence="0.968927428571429">
I think that Ed saw.
np
&gt;13
(4) that think that Ed saw
(n \ n)/(s/np) npT (s \ np)/s s/s
sgs \ rip)
&gt;13
SiS
npT (s \ np)/np
sgs \ rip)
s/np
s/np
&gt;13
s/np
</figure>
<bodyText confidence="0.995829">
CCG also utilizes further rules based on the
composition (B), type-raising (T), and substitu-
tion (S) combinators of combinatory logic, each
of which gives rise to several directionally-distinct
rules. For example, there are forward and back-
ward rules for both composition and type-raising:
</bodyText>
<equation confidence="0.99995775">
(&gt;B) X/Y Y/Z = X/Z
(&lt;B) Y\Z X \Y X \ Z
(&gt;T) X = YAY \X)
(&lt;T) X = Y\ (Y/X)
</equation>
<bodyText confidence="0.946279315789474">
&apos;We use Steedman&apos;s argument rightmost notation for cat-
egories. It is common in some traditions to use an alternative
notation in which arguments sought to the left are placed on
the left of the functor, e.g. saw I— (np\s)/np.
n\n
Other frameworks typically rely on empty ele-
ments or extra lexical assignments to handle such
relative clauses. Such strategies are often specific
to the construction in question, whereas CCG sup-
ports a uniform treatment of phenomena as diverse
as relativization, coordination, topicalization, in-
tonational phrasing, and incremental processing
(Steedman, 2000).
The rules introduced above are all harmonic, or
order preserving. Thus, they are unhelpful when
we consider sentences in which certain elements
have &amp;quot;moved&amp;quot; with respect to their canonical po-
sition, such as in English heavy-NP shift, where
an adverb comes between a verb and its object:
</bodyText>
<figure confidence="0.8922265">
(5) Ed saw briefly his old friend from Skye.
(2) Ed saw Ann
np (s\np)/np np
s\ np
</figure>
<page confidence="0.997922">
212
</page>
<bodyText confidence="0.999966166666667">
To handle such sentences without relying on cate-
gorial ambiguity, rules are needed to combine the
adverb with the verb before the latter consumes
its object argument. CCG makes available two
permutation-inducing composition rules that pro-
vide exactly the required functionality:
</bodyText>
<equation confidence="0.960096">
(&gt;Bx) X/Y Y\Z = X\Z
(&lt;Bx) Y/Z X\Y X/Z
</equation>
<bodyText confidence="0.998911666666667">
As can be seen from the form of these rules, the
primary functor composes with the secondary one
in a manner that puts it between the secondary
functor and its argument Z. This is precisely what
is needed for (5): &lt;B , permits a derivation us-
ing the same categories necessary for capturing the
non-shifted version. The non-order-preserving na-
ture of these rules is what boosts CCG&apos;s generative
strength beyond context-free.
</bodyText>
<sectionHeader confidence="0.990657" genericHeader="method">
3 Rule restrictions
</sectionHeader>
<bodyText confidence="0.999926833333333">
CCG uses a limited number of rules which work
in conjunction with complex lexical categories to
provide grammatical analyses, leaving the bulk of
cross-linguistic variation in the lexicon. Even so,
any given rule can be banned or restricted in any
given grammar, so variation can thus arise in the
rule component as well. For example, Steedman
(2000) argues that the permutation-inducing rule
&gt;Bx must be banned from the grammar of En-
glish to avoid derivations such as (6), where &gt;B „
would allow the subject of the embedded verb saw
to scramble into the higher clause.
</bodyText>
<equation confidence="0.903951857142857">
(6) */ Ed think that saw Ann
np .2 (s\ nip/)/s s/s s\nP2
* * *_&gt;gx * **
s\npo
* * * &gt;Bx * **
(s\npi)\npo
s\np,
</equation>
<bodyText confidence="0.9961055">
By banning &gt;B „ from the grammar of English,
Steedman not only ensures that such scrambled or-
ders do not arise, but also correctly predicts that
embedded subjects cannot be extracted:
</bodyText>
<listItem confidence="0.675159">
(7) *man. that I think that t, saw Ann
</listItem>
<bodyText confidence="0.9994472">
The extraction of an object is performed with
only the harmonic rules, as shown in (4). Provid-
ing a derivation for (7), however, relies on &gt;B
and thus fails under the assumption that &gt;Bx is
banned, as shown in (8).
</bodyText>
<figure confidence="0.643006">
(8) *man that I think that saw Ann
n (n \n)/(s\np) s/s s/s s\np
&gt;B
SiS
</figure>
<bodyText confidence="0.999903888888889">
The rules of a given grammar can also be re-
stricted to apply only to particular types. This is
necessary in English for &lt;Bx, which is needed
for phenomena such as heavy-NP shift, as in (5),
but which also can lead to lead to ungrammatical
scrambled orders inside noun phrases. For exam-
ple, consider (9), in which the category of a post-
nominal prepositional phrase composes into that
of a pre-nominal adjective.
</bodyText>
<figure confidence="0.686161571428571">
(9) *a nice in Edinburgh pub
np/n n/n (n\n)/np np
n\n
&lt;B x
n/n
&gt;
np
</figure>
<bodyText confidence="0.967940961538462">
To block such derivations, Steedman (2000) re-
stricts the rule &lt;B for English as follows:2
(&lt;Bx) Y/Z X\Y = X/Z
where X = Y = s$
Furthermore, multiple versions of a given com-
binatory rule, each having its own restrictions, can
be employed. For example, Steedman&apos;s analysis
of Dutch utilizes two restricted versions of each
of the rules &gt;B, &gt;B, and &lt;B.
The use of rule restrictions is unappealing for
a number of reasons. First and foremost, the re-
strictions themselves are often ad hoc and can
lead to the abuse of grammatical features. For ex-
ample, Steedman&apos;s restricted version of &gt;B for
Dutch can only apply when the secondary functor
is a category that will ultimately produce a matrix
clause (i.e., s_ SUBS), whereas we wish to avoid us-
ing such features to enforce combinatory control.
That is, the formal system should not have to refer
to grammar specific properties. Another ad hoc
use of features with rule restrictions is that some
analyses utilize features on categories that have the
sole function of controlling the applicability of a
single rule, such as [±FORWARD COMPOSITION]
2The $ notation used in the restriction schematizes over
all functions into the target category s.
</bodyText>
<page confidence="0.995713">
213
</page>
<bodyText confidence="0.997187578947369">
(Trechsel, 2000). A further unappealing aspect of
rule restrictions is that they are at times not sim-
ple declarations of categories with particular fea-
tures, but can also involve modified forms of the
rule schemata, such as one of Steedman&apos;s versions
of &gt;B for Dutch:
(&gt;B) X/Y Y/(Y\Z) = X/(Y\Z)
where Y = s$
None of these ways of restricting rules is cross-
linguistically motivated — they are employed to
obtain control over very specific aspects of a par-
ticular analysis of a particular language. Also,
they can be arbitrarily sensitive to particular cat-
egories, such that in the most extreme case, we
could imagine writing a combinatory rule for ev-
ery possible combination we want our grammar to
handle. This would amount to using the categorial
grammar system as a kind of specialized phrase
structure grammar — at which point we lose the
appeal of the purely type-driven nature of catego-
rial grammar.
These problems can be solved by incorporating
the more fine-grained slash types of the Categorial
Type Logic (CTL) tradition into CCG to produce a
system with just as much control, but which has a
rule component that is universal to all grammars
Even though CTL already has a clean resource-
management regime that can deal with the prob-
lems mentioned in this section, we choose to adapt
CCG because of its far more attractive compu-
tational properties. No efficient algorithms exist
that solve the NP-hard search problem in pars-
ing CTL grammars, whereas realistic CCG gram-
mars can be parsed with much greater efficiency.
As we show in the next section, CCG&apos;s resource-
sensitivity can be straightforwardly enhanced, and
§6 shows that we do not give up CCG&apos;s computa-
tional attractiveness in doing so.
</bodyText>
<sectionHeader confidence="0.995508" genericHeader="method">
4 Improved resource-management
</sectionHeader>
<bodyText confidence="0.9999816">
The main reason why CCG has needed rule re-
strictions is that it has an impoverished notion of
the categorial slash. CCG uses a single pair of
slashes -R, /1, which allows it only to distinguish
between arguments found to the left or the right,
respectively. The rules make reference to these
slashes, which in the case of the composition rules
gives rise to a spectrum of four distinct rules.3
There is, however, no way to discrimate between
the primary functors X\Y of the backward rules:
</bodyText>
<equation confidence="0.999282666666667">
(&lt;) Y X\Y = X
(&lt;B) Y\Z X\Y = X\Z
(&lt;Bx) Y/Z X\Y = X/Z
</equation>
<bodyText confidence="0.999112875">
This fact means that there is no lexical way of
specifying that a particular functor can only be
used with a particular one of these rules. For
example, if we give the category (10) to the co-
ordinator, it can act as the primary functor in
the &lt;B rule (after consuming its first argument),
and thereby produce derivations for ungrammati-
cal strings as shown in (11).
</bodyText>
<listItem confidence="0.934900666666667">
(10) and I- (s\s)/s
(11) *man that sleeps and he talks
(n\n)/(s\np) s\np (s\s)/s np s\np
</listItem>
<equation confidence="0.94779425">
S &lt;
s\&lt;sB
s\np
n \n
</equation>
<bodyText confidence="0.999957458333333">
To avoid such derivations, Steedman (2000) em-
ploys a ternary rule of coordination that ensures
that coordinating particles cannot behave in this
manner. However, this strategy threatens to in-
crease the size of the rule base as the semantics and
usage of different coordinators are accommodated.
In the context of providing a universal rule base,
it would thus be preferable to be able to deal with
different kinds of coordination in a lexical manner.
The Categorial Type Logic tradition (CTL,
Morrill (1994); Moortgat (1997); Oehrle (to ap-
pear)) provides a very clean solution to the lack
of discrimination noted above. The fundamental
idea is that not all slashes are the same; that is, we
should be able to distinguish any number of slash
types, each of which exhibits its own particular be-
havior. Rather than having just { \ , /} like in CCG,
CTL distinguishes multiple modes for combining
categories and each mode i is associated with its
own leftward and rightward slashes M-.4 As
with CCG, there are basic rules for string-adjacent,
non-associative combination which allow a func-
tor category to consume its arguments respecting
the directionality of the slash, but unlike CCG,
</bodyText>
<footnote confidence="0.999749333333333">
3The Principles of Consistency and Inheritance fi Iter out
other possible rules based on the composition combinator.
4We ignore the product oi and unary modes here.
</footnote>
<page confidence="0.997161">
214
</page>
<bodyText confidence="0.992694136363636">
these rules build logical structures that record the
modes through which constituents have combined.
These structures can then be subsequently recon-
figured by more powerful structural rules that al-
low specific ways of rebracketing (associativity),
reordering (permutativity), or both.
Unlike CCG&apos;s rules, the structural rules of CTL
cannot be restricted by imposing extra-logical
constraints. Instead, they are sensitive to the
modes by which sub-structures have been built and
therefore cannot apply in all contexts. The typed
slashes of CTL project their modes into struc-
tures and thereby limit or enable the application of
structural rules to their local context. Thus, con-
trary to CCG, there are no rule-constraints acting
as absolute and global choices; instead, paramet-
ric options regarding the way in which expressions
can be combined are selectively invoked via the
appropriate category assignments in the lexicon.
Despite the overall architectures of CCG and
CTL being quite different, the use of modalized
slashes to control combinatory behavior can be
incorporated in CCG to enable cleaner resource-
management and render rule restrictions unneces-
sary. The basic intuition is that each of the differ-
ent combinatory rules will be sensitive to particu-
lar modes and thus apply only to input categories
which have the appropriate slash types. To start,
we assume four modes governing different levels
of associativity and permutativity, as follows:
non-permutative permutative
non-associative * x
associative o •
Furthermore, we organize these modes into
the type hierarchy shown on the right.
The most limited mode * is
thus the top of the hierarchy,
whereas the most permissive
one • inherits the properties
of all the others.
With these modes, we can make use of their cor-
responding slash types, such as A and \x , in the
categories of the combinatory rules. For example,
we can now state the application rules as follows:
</bodyText>
<equation confidence="0.803483">
(&gt;) XAY Y = X
(&lt;) Y XVY = X
</equation>
<bodyText confidence="0.9738715">
Because the mode * is the root of the hierarchy,
these rules are thus available to categories with any
slash type. However, now consider the modalized
composition rules:
</bodyText>
<equation confidence="0.9979805">
(&gt;B) X/0Y Y/oZ = X/oZ
(&lt;B) Y\oZ XVY XVZ
(&gt;Bx) X/xY YVZ = X\xZ
(&lt;B y) Y/x Z X \xY X/x Z
</equation>
<bodyText confidence="0.9999586">
The first ramification of these formulations is that
categories defined with the slashes \* and 1 will
not be able to serve as input to these rules since
the mode * is not a subtype of either o or x. This
is precisely what is needed to provide lexical cate-
gories for coordinating particles without enabling
illicit derivations such as (11). We now can simply
assign the category (12) to and, with the result that
the category s Vs of and he talks cannot compose
with that of sleeps, as shown in (13).
</bodyText>
<listItem confidence="0.9938345">
(12) and H (sVs)/,,s
(13) sleeps and he
</listItem>
<bodyText confidence="0.9797948">
sVs.
Note that the fact that the category of intransitive
verbs has the \. slash allows it to serve as the pri-
mary functor in all the backward rules, since the
mode • is a subtype of all the other modes.
A second effect of the modalized composition
rules is that the modes 0 and x can now be used
to discriminate between the harmonic and the
crossed rules, giving Multi-Modal CCG a lexical
handle on permutation. This means that it is no
longer necessary to ban &gt;B x in English since we
can instead assign the complementizer the cate-
gory (14). This category can only compose asso-
ciatively, thereby allowing extraction of embedded
objects while blocking that of subjects.
</bodyText>
<listItem confidence="0.868376">
(14) that H s/os
</listItem>
<bodyText confidence="0.990238142857143">
Similarly, we get lexical control over &lt;B&gt;&lt; and
the permutation of elements within noun phrases
(9). Whereas standard CCG requires a rule restric-
tion to avoid such derivations, the applicability of
the &lt;B&gt;&lt; rule can be blocked by the use of the
modes * and 0 on the categories of pre-nominal
and post-nominal modifiers:
</bodyText>
<listItem confidence="0.73001">
(15) &amp;quot;a nice in Edinburgh pub
</listItem>
<table confidence="0.3643404">
np/on n/on (n\*n)/np np
&gt;
n
talks
s\.np (s\s)/„s np s\.np
</table>
<page confidence="0.993091">
215
</page>
<bodyText confidence="0.99998875862069">
Note that the categories n /.o.n and n \,,n cannot com-
bine through either &gt;B or &lt;B.
Although the mode x (non-associative &amp; per-
mutative) does not appear necessary for English,
it is needed in the grammar of Dutch. The CCG
account given by Steedman (2000) for crossing
dependencies in Dutch subordinate clauses relies
crucially on &gt;B . However, Steedman must re-
strict the harmonic rule &gt;B in order to block some
ungrammatical orders. With the multi-modal set-
ting, Baldridge (2002) shows that such restrictions
are unnecessary because the same slash /x that al-
lows two subordinate verbs to combine through
&gt;B&gt;&lt; also correctly blocks &gt;B from applying.
The encoding of Steedman&apos;s analysis into Multi-
Modal CCG thus predicts that certain word orders
are ungrammatical, whereas this must be stipu-
lated in standard CCG. The encoding also has no
need of the restrictions Steedman places on sev-
eral other rules — instead it uses exactly the same
rules that are used for English.
The input to the type-raising rules does not
make reference to any slashes, but there are two
slashes in the output category. Type-raising is ac-
tually provable in the most basic CTL system, and
any mode can decorate the output slashes; how-
ever, it must be the same mode on both slashes.
We use a variable mode i for the modalized ver-
sions of the type-raising rules:
</bodyText>
<equation confidence="0.9999265">
(&gt;T) X = YA(Y\iX)
(&lt;T) X = Y\i(Y/iX)
</equation>
<bodyText confidence="0.99994525">
There is no modal control over the applicability of
type-raising, but the combinatory potential of the
output category will be subject to constraints made
on the category it applies to.
The core aspect of the multi-modal extension
of CCG is thus the simple, but powerful ability
to stratify the rules so that lexical items can be
declared suitable or unsuitable as inputs to dif-
ferent rules. We have outlined here just a few
of the motivating examples that demonstrate the
utility of this ability and the manner in which it
allows us to cast aside rule restrictions for con-
trolling the grammar. This is a principled move
which replaces arbitrary, globally declared restric-
tions with a small set of cross-linguistically moti-
vated distinctions encoded in terms of the multiple
slash types utilized in CTL. Baldridge (2002) sup-
ports this formulation with multi-modal analyses
for a wide range of phenomena in English, Dutch,
Turkish, Tagalog, and Toba Batak.
</bodyText>
<sectionHeader confidence="0.96584" genericHeader="method">
5 Extensions
</sectionHeader>
<bodyText confidence="0.994323209302325">
Modes lead not only to a very clean formaliza-
tion of resource-sensitivity, but also give rise to
an interesting linguistic perspective. As e.g. Hep-
ple (1995) notes, each pair of decorated slashes
{ \„ /i} can correspond to a particular grammati-
cal phenomenon. Rules then model how different
phenomena can be combined to form larger gram-
matical structures.
For example, one way we can use modal deco-
ration is to model dependency, the asymmetry be-
tween heads and dependents, which has been used
in CTL to give accounts of coordination and word
order, e.g. (Moortgat and Morrill, 1991; Kruijff,
2001). Observe that we really need modes here:
function-argument structure does not correspond
to dependency. For example, a sentential adjunct
can have the category s \ s where the adjunct acts
as the function, taking a verb (s) as its argument.
However, the adjunct itself is the dependent of the
verbal head, and not vice versa.
Adopting notation common in dependency
grammar, we use as our basic modes a pair of ar-
rows &lt;—, that point from head (h) to dependent
(d): (d h) or (h d). Additionally, we use
n to handle headless constructions (e.g. coordi-
nation), and H as analogous to •. The issue that
now arises is how to integrate these modes with
{*, o, x , .1: the latter modes control adjacency, and
we would like to keep adjacency and dependency
as separate (orthogonal) dimensions.
Therefore, we propose to keep these dimensions
as separate decorations on slashes as well, as fol-
lows: given dependency mode d, and adjacency
mode a, we can form slashes \ ad versus /ad. Com-
binatory rules can operate on either dimension or
on both, e.g. consider (&lt;B ) with dependency:
(&lt;13,) Z X Y Z
Another modal dimension is one which distin-
guishes a slash as being suitable or unsuitable as
the primary functor in a combinatory rule. This
can be used to implement the notion of antecedent
government discussed by Steedman (2000) for al-
lowing some arguments to be extractable but not
</bodyText>
<page confidence="0.997327">
216
</page>
<bodyText confidence="0.992539206896552">
movable. Encoding this modally avoids the need
to require all lexical noun phrases to be declared as
not antecedent governed and maintains the separa-
tion we desire between features that control com-
bination and features for agreement, tense, etc.
Though we have not made use of CTL&apos;s unary
modes in the presentation of Multi-Modal CCG
given here, they could prove useful in limiting
the applicability of type-raising rules. Following
CTL, we introduce 0.i and its residuated counter-
part DI. such that we have, for an arbitrary cate-
gory A, 111;k&gt;iA= A and A =&lt;&gt;i ELIA. Having
unary modes would remove the need under some
analyses to make type-raising of all argument cat-
egories obligatory. Thus, &gt;T would appear as fol-
lows:
(&gt;T) EX = Y/i(Y\iX)
As such, &gt;T can only apply to air &apos;d categories:
the categories for determiners and noun phrases
would then be (111-ItArnp)kn and 111,&lt;&gt;trn p, re-
spectively. Because of residuation, we can drop
CIL&lt;&gt;tr if we do not need to type-raise.
Finally, the multi-modal setting also enables us
to introduce more powerful combinators into the
grammar, possibly taking it beyond mild context-
sensitivity. Precisely because of the tight resource-
sensitive control over the applicability of combi-
natory rules, we can avoid a collapse to a situation
where &amp;quot;anything goes&amp;quot;.
</bodyText>
<sectionHeader confidence="0.998694" genericHeader="method">
6 Computational aspects and
implementation
</sectionHeader>
<bodyText confidence="0.999886222222222">
CCG has mildly context-sensitive generative
power and CCG grammars can be parsed in worst-
case polynomial time by using a structure sharing
algorithm (Vijay-Shanker and Weir, 1990). This
algorithm does incur some computational over-
head, and Komagata (1999) shows that the per-
formance of a worst-case exponential CKY parser
with a semantic equivalency check is cubic in the
average case (tested on Japanese sentences averag-
ing 20 words in length). This a major attraction of
CCG over CTL, for which no reasonably efficient
parsers have been constructed that can handle re-
alistic grammars
Multi-Modal CCG inherits CCG&apos;s attractive
computational properties and adds the possibility
to take advantage of some new strategies. Most
importantly, it remains mildly context-sensitive.
We have not added any new rules of combina-
tion; instead, we employ the standardly assumed
rules and make them sensitive to particular kinds
of slashes. A Multi-Modal CCG grammar can be
simulated with standard CCG by adding a mode
feature to the ultimate targets of (possibly com-
plex) categories and then formulating the rules
with restrictions that reference those features. For
example, the multi-modal category (16) would be
converted into (17).
</bodyText>
<listItem confidence="0.8055535">
(16) (s\. np)/x (s\. nip)
(17) (s\nPmode= )1 (Smode=X\ nPmode=-)
</listItem>
<bodyText confidence="0.998153666666667">
The rule &gt;B would then be formulated as fol-
lows, where a and b are variables standing for any
atomic category.
</bodyText>
<equation confidence="0.943573">
(&lt;B) Y/Z X\Y = X/Z
</equation>
<bodyText confidence="0.999932931034483">
where Y = a mode= X $i and Z = Lode= X $2
Using restrictions in this manner in standard CCG
would technically provide the same advantages as
Multi-Modal CCG, but is a less clean formulation.
Furthermore, by using modally decorated slashes
to enforce these effects, we have a clear separa-
tion between specifications that control category
combining operations and more standard features
which encode distinctions such as number, gender,
verbal voice, tense, etc.
It is straightforward to adapt an existing CCG
parser to deal with modally decorated slashes as
they are a simple, non-recursive feature added to
the slash specification. Though there are no reduc-
tions in overall parsing complexity, we nonethe-
less obtain several advantages by using Multi-
Modal CCG. One is that the invariant rule com-
ponent makes it possible to implement the combi-
natory rules as hard-coded procedures that are the
same for all grammars (Baldridge, 2002). With
standard CCG rules, it may be necessary to unify
the input categories against several restrictions in
order to verify that a rule can even be applied,
whereas a multi-modal rule needs only to inspect
the simple slash data structures of the input cat-
egories to do the same. Also, a standard CCG
rule may need to check that the X portion of a
combinatory rule satisfies some restriction (e.g.,
the restricted &lt;Bx rule for English). A multi-
</bodyText>
<page confidence="0.991188">
217
</page>
<bodyText confidence="0.999984434782609">
modal rule can instead ignore the X and just en-
sure that the Y portion of both inputs unify. Fi-
nally, CCG grammars typically need multiple ver-
sions of the same rule, whereas only one version
of each is necessary in Multi-Modal CCG. The ex-
tra resource-sensitivity of multi-modal rules thus
allows us to pack the functionality of several stan-
dard CCG rules into a single procedure, again cut-
ting down on the number of unifications which are
necessary in applying a grammar&apos;s rules.
The fact that slashes are more refined could
make it seem that writing grammars would be-
come more difficult since we must make choices
about the modes. Our experience, however, is that
the task becomes easier since different construc-
tions can be dealt with on their own terms without
worrying about complex interactions with rule re-
strictions that are already in place for other aspects
of the grammar. We can further reduce the &amp;quot;bur-
den&amp;quot; of specifying modes by defining the grammar
as a lexical inheritance hierarchy along the lines
of Villavicencio (2002), thereby exploiting redun-
dancy between different classes of lexical items.
</bodyText>
<sectionHeader confidence="0.999086" genericHeader="conclusions">
7 Conclusions
</sectionHeader>
<bodyText confidence="0.912238714285714">
We have presented an adaptation of CCG in which
the applicability of combinatory rules is controlled
directly through lexically assigned categories. Us-
ing modally decorated slashes as in CTL, we ob-
tain a fine-grained form of derivational control in a
purely lexicalized fashion. Consequently, we can
assume all combinatory rule schemas to be ac-
tive universally. Grammars need to differ in the
types of lexical categories only, i.e. what types of
modalized slashes they use, and thus what rules
they make applicable. We motivated the basic the-
ory on data from English and Dutch, and discussed
several possible extensions. Further linguistic evi-
dence and more in-depth Multi-Modal CCG anal-
yses for English, Dutch, Turkish, Tagalog, and
Toba Batak are provided in Baldridge (2002).
In this paper, we have omitted semantics. See
Steedman (2000) or Baldridge and Kruijff (2002)
for different ways of constructing logical forms
compositionally with CCG.
Acknowledgements. We would like to thank
Cern Bozsahin, Mark McConville, Mark Steed-
man and the EACL reviewers for comments. Ja-
son Baldridge&apos;s work is supported by Edinburgh-
Stanford Link R36763, ROSIE project. Geert-Jan
KruijIT&apos;s work is supported by the DFG SFB 378
Resource-Sensitive Cognitive Processes, Project
NEGRA EM6.
</bodyText>
<sectionHeader confidence="0.924808" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999537522727273">
Jason Baldridge and Geert-Jan Kruijff. 2002. Coupling CCG
and hybrid logic dependency semantics. In Proceedings of
40th Annual Meeting of the Association for Computational
Linguistics, pages 319-326, Philadelphia, Pennsylvania.
Jason Baldridge. 2002. Lexically Specified Derivational
Control in Combinatorial Categorial Grammar. Ph.D.
thesis, University of Edinburgh.
Mark Hepple. 1995. Mixing modes of linguistic description
in categorial grammar. In Proc. EACL-7, Dublin Ireland.
Nobo Komagata. 1999. Information Structure in Texts:A
Computational Analysis of Contextual Appropriateness in
English and Japanese. Ph.D. thesis, University of Penn-
sylvania.
Geert-Jan M. Kruijff. 2001. A Categorial Modal Architec-
ture of Informativity: Dependency Grammar Logic &amp; In-
formation Structure. Ph.D. thesis, Institute of Formal and
Applied Linguistics (UFAL), Faculty of Mathematics and
Physics, Charles University, Prague, Czech Republic.
Michael Moortgat and Glyn Morrill. 1991. Heads
and phrases: Type calculus for dependency and con-
stituent structure. Unpublished manuscript. Available
from http://www-lsi.upc.esrglyn/.
Michael Moortgat. 1997. Categorial type logics. In Johan
van Benthem and Alice ter Meulen, editors, Handbook of
Logic and Language. Elsevier Science B.V.
Glyn V. Morrill. 1994. Type Logical Grammar: Categorial
Logic of Signs. Kluwer Academic Publishers, Dordrecht,
Boston, London.
Richard T. Oehrle. to appear. Multi-modal type-logical
grammar. In Robert D. Borsley &amp; Kersti Borjars, editor,
Non-transformational Syntax: A Guide to Current Debate.
Basil Blackwell, Oxford, United Kingdom.
Mark Steedman. 2000. The Syntactic Process. The MIT
Press, Cambridge Mass.
Frank Trechsel. 2000. A CCG account of Tzotzil pied pip-
ing. Natural Language and Linguistic Theory, 18:611-
663.
K. Vijay-Shanker and David Weir. 1990. Polynomial time
parsing of combinatory categorial grammars. In Proceed-
ings of the 28th Annual Meeting of the Association for
Computational Linguistics, Pittsburgh, pages 1-8, June.
Aline Villavicencio. 2002. The Acquisition of a Unification-
Based Generalised Categorial Grammar. Ph.D. thesis,
University of Cambridge.
</reference>
<page confidence="0.997189">
218
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.448180">
<title confidence="0.999612">Multi-Modal Combinatory Categorial Grammar</title>
<author confidence="0.999975">Jason Baldridge</author>
<affiliation confidence="0.9794955">ICCS School of Informatics 2 Buccleuch Place University of Edinburgh</affiliation>
<address confidence="0.999149">Edinburgh EH8 9LW, UK</address>
<email confidence="0.993357">]mb@cogsci.ed.ac.uk</email>
<author confidence="0.999078">Geert-Jan M Kruijff</author>
<affiliation confidence="0.979644666666667">Universitat des Saarlandes Computational Linguistics Lehrstuhl Uszkoreit</affiliation>
<address confidence="0.96172">Building 17, Postfach 15 11 50 66041 Saarbriicken, Germany</address>
<abstract confidence="0.997884111111111">The paper shows how Combinatory Categorial Grammar (CCG) can be adapted to take advantage of the extra resourcesensitivity provided by the Categorial Type Logic framework. The resulting reformulation, Multi-Modal CCG, supports lexically specified control over the applicability of combinatory rules, permitting a universal rule component and shedding the need for language-specific restrictions on rules. We discuss some of the linguistic motivation for these changes, define the Multi-Modal CCG system and demonstrate how it works on some basic examples. We furthermore outline some possible extensions and address computational aspects of</abstract>
<intro confidence="0.564261">Multi-Modal CCG.</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Jason Baldridge</author>
<author>Geert-Jan Kruijff</author>
</authors>
<title>Coupling CCG and hybrid logic dependency semantics.</title>
<date>2002</date>
<booktitle>In Proceedings of 40th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>319--326</pages>
<location>Philadelphia, Pennsylvania.</location>
<marker>Baldridge, Kruijff, 2002</marker>
<rawString>Jason Baldridge and Geert-Jan Kruijff. 2002. Coupling CCG and hybrid logic dependency semantics. In Proceedings of 40th Annual Meeting of the Association for Computational Linguistics, pages 319-326, Philadelphia, Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jason Baldridge</author>
</authors>
<title>Lexically Specified Derivational Control in Combinatorial Categorial Grammar.</title>
<date>2002</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Edinburgh.</institution>
<contexts>
<context position="2169" citStr="Baldridge, 2002" startWordPosition="306" endWordPosition="307">tivity: given the resources we have (i.e. expressions and their associated categories) we can, or can not, apply particular rules to form more complex expressions. It is particularly this idea of resource-sensitivity that is realized differently across different formalisms. In this paper, we explain how two prominent categorial grammar frameworks, namely Combinatory Categorial Grammar (CCG, Steedman (2000)) and Categorial Type Logic (CTL, Morrill (1994); Moortgat (1997); Oehrle (to appear)), can be integrated to create a hybrid categorial framework, Multi-Modal Combinatory Categorial Grammar (Baldridge, 2002), that inherits the attractive properties of both. Specifically, MultiModal CCG retains the favorable computional aspects of CCG whilst incorporating the approach to resource-sensitivity taken in CTL. At the theoretical level, we discuss how this form of resourcesensitivity enables us to replace the rather ad hoc rule-specific constraints found in CCG with a clean resource-management regime, leading to more parsimonious linguistic analyses. We also discuss some of the benefits of modalized CCG for computational processing. Although Multi-Modal CCG has the same set of rules as standard CCG, its</context>
<context position="18850" citStr="Baldridge (2002)" startWordPosition="3152" endWordPosition="3153">es of pre-nominal and post-nominal modifiers: (15) &amp;quot;a nice in Edinburgh pub np/on n/on (n\*n)/np np &gt; n talks s\.np (s\s)/„s np s\.np 215 Note that the categories n /.o.n and n \,,n cannot combine through either &gt;B or &lt;B. Although the mode x (non-associative &amp; permutative) does not appear necessary for English, it is needed in the grammar of Dutch. The CCG account given by Steedman (2000) for crossing dependencies in Dutch subordinate clauses relies crucially on &gt;B . However, Steedman must restrict the harmonic rule &gt;B in order to block some ungrammatical orders. With the multi-modal setting, Baldridge (2002) shows that such restrictions are unnecessary because the same slash /x that allows two subordinate verbs to combine through &gt;B&gt;&lt; also correctly blocks &gt;B from applying. The encoding of Steedman&apos;s analysis into MultiModal CCG thus predicts that certain word orders are ungrammatical, whereas this must be stipulated in standard CCG. The encoding also has no need of the restrictions Steedman places on several other rules — instead it uses exactly the same rules that are used for English. The input to the type-raising rules does not make reference to any slashes, but there are two slashes in the o</context>
<context position="20563" citStr="Baldridge (2002)" startWordPosition="3445" endWordPosition="3446"> the multi-modal extension of CCG is thus the simple, but powerful ability to stratify the rules so that lexical items can be declared suitable or unsuitable as inputs to different rules. We have outlined here just a few of the motivating examples that demonstrate the utility of this ability and the manner in which it allows us to cast aside rule restrictions for controlling the grammar. This is a principled move which replaces arbitrary, globally declared restrictions with a small set of cross-linguistically motivated distinctions encoded in terms of the multiple slash types utilized in CTL. Baldridge (2002) supports this formulation with multi-modal analyses for a wide range of phenomena in English, Dutch, Turkish, Tagalog, and Toba Batak. 5 Extensions Modes lead not only to a very clean formalization of resource-sensitivity, but also give rise to an interesting linguistic perspective. As e.g. Hepple (1995) notes, each pair of decorated slashes { \„ /i} can correspond to a particular grammatical phenomenon. Rules then model how different phenomena can be combined to form larger grammatical structures. For example, one way we can use modal decoration is to model dependency, the asymmetry between </context>
<context position="26374" citStr="Baldridge, 2002" startWordPosition="4404" endWordPosition="4405">that control category combining operations and more standard features which encode distinctions such as number, gender, verbal voice, tense, etc. It is straightforward to adapt an existing CCG parser to deal with modally decorated slashes as they are a simple, non-recursive feature added to the slash specification. Though there are no reductions in overall parsing complexity, we nonetheless obtain several advantages by using MultiModal CCG. One is that the invariant rule component makes it possible to implement the combinatory rules as hard-coded procedures that are the same for all grammars (Baldridge, 2002). With standard CCG rules, it may be necessary to unify the input categories against several restrictions in order to verify that a rule can even be applied, whereas a multi-modal rule needs only to inspect the simple slash data structures of the input categories to do the same. Also, a standard CCG rule may need to check that the X portion of a combinatory rule satisfies some restriction (e.g., the restricted &lt;Bx rule for English). A multi217 modal rule can instead ignore the X and just ensure that the Y portion of both inputs unify. Finally, CCG grammars typically need multiple versions of t</context>
</contexts>
<marker>Baldridge, 2002</marker>
<rawString>Jason Baldridge. 2002. Lexically Specified Derivational Control in Combinatorial Categorial Grammar. Ph.D. thesis, University of Edinburgh.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Hepple</author>
</authors>
<title>Mixing modes of linguistic description in categorial grammar.</title>
<date>1995</date>
<booktitle>In Proc. EACL-7,</booktitle>
<location>Dublin</location>
<contexts>
<context position="20869" citStr="Hepple (1995)" startWordPosition="3493" endWordPosition="3495">n which it allows us to cast aside rule restrictions for controlling the grammar. This is a principled move which replaces arbitrary, globally declared restrictions with a small set of cross-linguistically motivated distinctions encoded in terms of the multiple slash types utilized in CTL. Baldridge (2002) supports this formulation with multi-modal analyses for a wide range of phenomena in English, Dutch, Turkish, Tagalog, and Toba Batak. 5 Extensions Modes lead not only to a very clean formalization of resource-sensitivity, but also give rise to an interesting linguistic perspective. As e.g. Hepple (1995) notes, each pair of decorated slashes { \„ /i} can correspond to a particular grammatical phenomenon. Rules then model how different phenomena can be combined to form larger grammatical structures. For example, one way we can use modal decoration is to model dependency, the asymmetry between heads and dependents, which has been used in CTL to give accounts of coordination and word order, e.g. (Moortgat and Morrill, 1991; Kruijff, 2001). Observe that we really need modes here: function-argument structure does not correspond to dependency. For example, a sentential adjunct can have the category</context>
</contexts>
<marker>Hepple, 1995</marker>
<rawString>Mark Hepple. 1995. Mixing modes of linguistic description in categorial grammar. In Proc. EACL-7, Dublin Ireland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nobo Komagata</author>
</authors>
<date>1999</date>
<booktitle>Information Structure in Texts:A Computational Analysis of Contextual Appropriateness in English and Japanese. Ph.D. thesis,</booktitle>
<institution>University of Pennsylvania.</institution>
<contexts>
<context position="24280" citStr="Komagata (1999)" startWordPosition="4066" endWordPosition="4067">lly, the multi-modal setting also enables us to introduce more powerful combinators into the grammar, possibly taking it beyond mild contextsensitivity. Precisely because of the tight resourcesensitive control over the applicability of combinatory rules, we can avoid a collapse to a situation where &amp;quot;anything goes&amp;quot;. 6 Computational aspects and implementation CCG has mildly context-sensitive generative power and CCG grammars can be parsed in worstcase polynomial time by using a structure sharing algorithm (Vijay-Shanker and Weir, 1990). This algorithm does incur some computational overhead, and Komagata (1999) shows that the performance of a worst-case exponential CKY parser with a semantic equivalency check is cubic in the average case (tested on Japanese sentences averaging 20 words in length). This a major attraction of CCG over CTL, for which no reasonably efficient parsers have been constructed that can handle realistic grammars Multi-Modal CCG inherits CCG&apos;s attractive computational properties and adds the possibility to take advantage of some new strategies. Most importantly, it remains mildly context-sensitive. We have not added any new rules of combination; instead, we employ the standardl</context>
</contexts>
<marker>Komagata, 1999</marker>
<rawString>Nobo Komagata. 1999. Information Structure in Texts:A Computational Analysis of Contextual Appropriateness in English and Japanese. Ph.D. thesis, University of Pennsylvania.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Geert-Jan M Kruijff</author>
</authors>
<title>A Categorial Modal Architecture of Informativity: Dependency Grammar Logic</title>
<date>2001</date>
<booktitle>Information Structure. Ph.D. thesis, Institute of Formal and Applied Linguistics (UFAL), Faculty of Mathematics</booktitle>
<institution>and Physics, Charles University,</institution>
<location>Prague, Czech Republic.</location>
<contexts>
<context position="21309" citStr="Kruijff, 2001" startWordPosition="3568" endWordPosition="3569">ak. 5 Extensions Modes lead not only to a very clean formalization of resource-sensitivity, but also give rise to an interesting linguistic perspective. As e.g. Hepple (1995) notes, each pair of decorated slashes { \„ /i} can correspond to a particular grammatical phenomenon. Rules then model how different phenomena can be combined to form larger grammatical structures. For example, one way we can use modal decoration is to model dependency, the asymmetry between heads and dependents, which has been used in CTL to give accounts of coordination and word order, e.g. (Moortgat and Morrill, 1991; Kruijff, 2001). Observe that we really need modes here: function-argument structure does not correspond to dependency. For example, a sentential adjunct can have the category s \ s where the adjunct acts as the function, taking a verb (s) as its argument. However, the adjunct itself is the dependent of the verbal head, and not vice versa. Adopting notation common in dependency grammar, we use as our basic modes a pair of arrows &lt;—, that point from head (h) to dependent (d): (d h) or (h d). Additionally, we use n to handle headless constructions (e.g. coordination), and H as analogous to •. The issue that no</context>
</contexts>
<marker>Kruijff, 2001</marker>
<rawString>Geert-Jan M. Kruijff. 2001. A Categorial Modal Architecture of Informativity: Dependency Grammar Logic &amp; Information Structure. Ph.D. thesis, Institute of Formal and Applied Linguistics (UFAL), Faculty of Mathematics and Physics, Charles University, Prague, Czech Republic.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Moortgat</author>
<author>Glyn Morrill</author>
</authors>
<title>Heads and phrases: Type calculus for dependency and constituent structure. Unpublished manuscript. Available from http://www-lsi.upc.esrglyn/.</title>
<date>1991</date>
<contexts>
<context position="21293" citStr="Moortgat and Morrill, 1991" startWordPosition="3564" endWordPosition="3567">rkish, Tagalog, and Toba Batak. 5 Extensions Modes lead not only to a very clean formalization of resource-sensitivity, but also give rise to an interesting linguistic perspective. As e.g. Hepple (1995) notes, each pair of decorated slashes { \„ /i} can correspond to a particular grammatical phenomenon. Rules then model how different phenomena can be combined to form larger grammatical structures. For example, one way we can use modal decoration is to model dependency, the asymmetry between heads and dependents, which has been used in CTL to give accounts of coordination and word order, e.g. (Moortgat and Morrill, 1991; Kruijff, 2001). Observe that we really need modes here: function-argument structure does not correspond to dependency. For example, a sentential adjunct can have the category s \ s where the adjunct acts as the function, taking a verb (s) as its argument. However, the adjunct itself is the dependent of the verbal head, and not vice versa. Adopting notation common in dependency grammar, we use as our basic modes a pair of arrows &lt;—, that point from head (h) to dependent (d): (d h) or (h d). Additionally, we use n to handle headless constructions (e.g. coordination), and H as analogous to •. T</context>
</contexts>
<marker>Moortgat, Morrill, 1991</marker>
<rawString>Michael Moortgat and Glyn Morrill. 1991. Heads and phrases: Type calculus for dependency and constituent structure. Unpublished manuscript. Available from http://www-lsi.upc.esrglyn/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Moortgat</author>
</authors>
<title>Categorial type logics.</title>
<date>1997</date>
<booktitle>In Johan van Benthem and Alice ter Meulen, editors, Handbook of Logic and Language. Elsevier Science B.V.</booktitle>
<contexts>
<context position="2027" citStr="Moortgat (1997)" startWordPosition="288" endWordPosition="289">anations which arise from its unique assumptions. A formalism&apos;s category constructors and combination rules together define its resourcesensitivity: given the resources we have (i.e. expressions and their associated categories) we can, or can not, apply particular rules to form more complex expressions. It is particularly this idea of resource-sensitivity that is realized differently across different formalisms. In this paper, we explain how two prominent categorial grammar frameworks, namely Combinatory Categorial Grammar (CCG, Steedman (2000)) and Categorial Type Logic (CTL, Morrill (1994); Moortgat (1997); Oehrle (to appear)), can be integrated to create a hybrid categorial framework, Multi-Modal Combinatory Categorial Grammar (Baldridge, 2002), that inherits the attractive properties of both. Specifically, MultiModal CCG retains the favorable computional aspects of CCG whilst incorporating the approach to resource-sensitivity taken in CTL. At the theoretical level, we discuss how this form of resourcesensitivity enables us to replace the rather ad hoc rule-specific constraints found in CCG with a clean resource-management regime, leading to more parsimonious linguistic analyses. We also discu</context>
<context position="13687" citStr="Moortgat (1997)" startWordPosition="2272" endWordPosition="2273">s (11) *man that sleeps and he talks (n\n)/(s\np) s\np (s\s)/s np s\np S &lt; s\&lt;sB s\np n \n To avoid such derivations, Steedman (2000) employs a ternary rule of coordination that ensures that coordinating particles cannot behave in this manner. However, this strategy threatens to increase the size of the rule base as the semantics and usage of different coordinators are accommodated. In the context of providing a universal rule base, it would thus be preferable to be able to deal with different kinds of coordination in a lexical manner. The Categorial Type Logic tradition (CTL, Morrill (1994); Moortgat (1997); Oehrle (to appear)) provides a very clean solution to the lack of discrimination noted above. The fundamental idea is that not all slashes are the same; that is, we should be able to distinguish any number of slash types, each of which exhibits its own particular behavior. Rather than having just { \ , /} like in CCG, CTL distinguishes multiple modes for combining categories and each mode i is associated with its own leftward and rightward slashes M-.4 As with CCG, there are basic rules for string-adjacent, non-associative combination which allow a functor category to consume its arguments r</context>
</contexts>
<marker>Moortgat, 1997</marker>
<rawString>Michael Moortgat. 1997. Categorial type logics. In Johan van Benthem and Alice ter Meulen, editors, Handbook of Logic and Language. Elsevier Science B.V.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Glyn V Morrill</author>
</authors>
<title>Type Logical Grammar: Categorial Logic of Signs.</title>
<date>1994</date>
<publisher>Kluwer Academic Publishers,</publisher>
<location>Dordrecht, Boston, London.</location>
<contexts>
<context position="2010" citStr="Morrill (1994)" startWordPosition="285" endWordPosition="287"> linguistic explanations which arise from its unique assumptions. A formalism&apos;s category constructors and combination rules together define its resourcesensitivity: given the resources we have (i.e. expressions and their associated categories) we can, or can not, apply particular rules to form more complex expressions. It is particularly this idea of resource-sensitivity that is realized differently across different formalisms. In this paper, we explain how two prominent categorial grammar frameworks, namely Combinatory Categorial Grammar (CCG, Steedman (2000)) and Categorial Type Logic (CTL, Morrill (1994); Moortgat (1997); Oehrle (to appear)), can be integrated to create a hybrid categorial framework, Multi-Modal Combinatory Categorial Grammar (Baldridge, 2002), that inherits the attractive properties of both. Specifically, MultiModal CCG retains the favorable computional aspects of CCG whilst incorporating the approach to resource-sensitivity taken in CTL. At the theoretical level, we discuss how this form of resourcesensitivity enables us to replace the rather ad hoc rule-specific constraints found in CCG with a clean resource-management regime, leading to more parsimonious linguistic analys</context>
<context position="13670" citStr="Morrill (1994)" startWordPosition="2270" endWordPosition="2271">0) and I- (s\s)/s (11) *man that sleeps and he talks (n\n)/(s\np) s\np (s\s)/s np s\np S &lt; s\&lt;sB s\np n \n To avoid such derivations, Steedman (2000) employs a ternary rule of coordination that ensures that coordinating particles cannot behave in this manner. However, this strategy threatens to increase the size of the rule base as the semantics and usage of different coordinators are accommodated. In the context of providing a universal rule base, it would thus be preferable to be able to deal with different kinds of coordination in a lexical manner. The Categorial Type Logic tradition (CTL, Morrill (1994); Moortgat (1997); Oehrle (to appear)) provides a very clean solution to the lack of discrimination noted above. The fundamental idea is that not all slashes are the same; that is, we should be able to distinguish any number of slash types, each of which exhibits its own particular behavior. Rather than having just { \ , /} like in CCG, CTL distinguishes multiple modes for combining categories and each mode i is associated with its own leftward and rightward slashes M-.4 As with CCG, there are basic rules for string-adjacent, non-associative combination which allow a functor category to consum</context>
</contexts>
<marker>Morrill, 1994</marker>
<rawString>Glyn V. Morrill. 1994. Type Logical Grammar: Categorial Logic of Signs. Kluwer Academic Publishers, Dordrecht, Boston, London.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Richard T Oehrle</author>
</authors>
<title>to appear. Multi-modal type-logical grammar.</title>
<booktitle>Non-transformational Syntax: A Guide to Current Debate. Basil Blackwell,</booktitle>
<editor>In Robert D. Borsley &amp; Kersti Borjars, editor,</editor>
<location>Oxford, United Kingdom.</location>
<marker>Oehrle, </marker>
<rawString>Richard T. Oehrle. to appear. Multi-modal type-logical grammar. In Robert D. Borsley &amp; Kersti Borjars, editor, Non-transformational Syntax: A Guide to Current Debate. Basil Blackwell, Oxford, United Kingdom.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Steedman</author>
</authors>
<title>The Syntactic Process.</title>
<date>2000</date>
<publisher>The MIT Press,</publisher>
<location>Cambridge Mass.</location>
<contexts>
<context position="1962" citStr="Steedman (2000)" startWordPosition="278" endWordPosition="279">combination it employs and the differing kinds of linguistic explanations which arise from its unique assumptions. A formalism&apos;s category constructors and combination rules together define its resourcesensitivity: given the resources we have (i.e. expressions and their associated categories) we can, or can not, apply particular rules to form more complex expressions. It is particularly this idea of resource-sensitivity that is realized differently across different formalisms. In this paper, we explain how two prominent categorial grammar frameworks, namely Combinatory Categorial Grammar (CCG, Steedman (2000)) and Categorial Type Logic (CTL, Morrill (1994); Moortgat (1997); Oehrle (to appear)), can be integrated to create a hybrid categorial framework, Multi-Modal Combinatory Categorial Grammar (Baldridge, 2002), that inherits the attractive properties of both. Specifically, MultiModal CCG retains the favorable computional aspects of CCG whilst incorporating the approach to resource-sensitivity taken in CTL. At the theoretical level, we discuss how this form of resourcesensitivity enables us to replace the rather ad hoc rule-specific constraints found in CCG with a clean resource-management regime</context>
<context position="6417" citStr="Steedman, 2000" startWordPosition="1009" endWordPosition="1010">AY \X) (&lt;T) X = Y\ (Y/X) &apos;We use Steedman&apos;s argument rightmost notation for categories. It is common in some traditions to use an alternative notation in which arguments sought to the left are placed on the left of the functor, e.g. saw I— (np\s)/np. n\n Other frameworks typically rely on empty elements or extra lexical assignments to handle such relative clauses. Such strategies are often specific to the construction in question, whereas CCG supports a uniform treatment of phenomena as diverse as relativization, coordination, topicalization, intonational phrasing, and incremental processing (Steedman, 2000). The rules introduced above are all harmonic, or order preserving. Thus, they are unhelpful when we consider sentences in which certain elements have &amp;quot;moved&amp;quot; with respect to their canonical position, such as in English heavy-NP shift, where an adverb comes between a verb and its object: (5) Ed saw briefly his old friend from Skye. (2) Ed saw Ann np (s\np)/np np s\ np 212 To handle such sentences without relying on categorial ambiguity, rules are needed to combine the adverb with the verb before the latter consumes its object argument. CCG makes available two permutation-inducing composition r</context>
<context position="7903" citStr="Steedman (2000)" startWordPosition="1256" endWordPosition="1257"> precisely what is needed for (5): &lt;B , permits a derivation using the same categories necessary for capturing the non-shifted version. The non-order-preserving nature of these rules is what boosts CCG&apos;s generative strength beyond context-free. 3 Rule restrictions CCG uses a limited number of rules which work in conjunction with complex lexical categories to provide grammatical analyses, leaving the bulk of cross-linguistic variation in the lexicon. Even so, any given rule can be banned or restricted in any given grammar, so variation can thus arise in the rule component as well. For example, Steedman (2000) argues that the permutation-inducing rule &gt;Bx must be banned from the grammar of English to avoid derivations such as (6), where &gt;B „ would allow the subject of the embedded verb saw to scramble into the higher clause. (6) */ Ed think that saw Ann np .2 (s\ nip/)/s s/s s\nP2 * * *_&gt;gx * ** s\npo * * * &gt;Bx * ** (s\npi)\npo s\np, By banning &gt;B „ from the grammar of English, Steedman not only ensures that such scrambled orders do not arise, but also correctly predicts that embedded subjects cannot be extracted: (7) *man. that I think that t, saw Ann The extraction of an object is performed with </context>
<context position="9264" citStr="Steedman (2000)" startWordPosition="1512" endWordPosition="1513">nned, as shown in (8). (8) *man that I think that saw Ann n (n \n)/(s\np) s/s s/s s\np &gt;B SiS The rules of a given grammar can also be restricted to apply only to particular types. This is necessary in English for &lt;Bx, which is needed for phenomena such as heavy-NP shift, as in (5), but which also can lead to lead to ungrammatical scrambled orders inside noun phrases. For example, consider (9), in which the category of a postnominal prepositional phrase composes into that of a pre-nominal adjective. (9) *a nice in Edinburgh pub np/n n/n (n\n)/np np n\n &lt;B x n/n &gt; np To block such derivations, Steedman (2000) restricts the rule &lt;B for English as follows:2 (&lt;Bx) Y/Z X\Y = X/Z where X = Y = s$ Furthermore, multiple versions of a given combinatory rule, each having its own restrictions, can be employed. For example, Steedman&apos;s analysis of Dutch utilizes two restricted versions of each of the rules &gt;B, &gt;B, and &lt;B. The use of rule restrictions is unappealing for a number of reasons. First and foremost, the restrictions themselves are often ad hoc and can lead to the abuse of grammatical features. For example, Steedman&apos;s restricted version of &gt;B for Dutch can only apply when the secondary functor is a c</context>
<context position="13205" citStr="Steedman (2000)" startWordPosition="2194" endWordPosition="2195">e primary functors X\Y of the backward rules: (&lt;) Y X\Y = X (&lt;B) Y\Z X\Y = X\Z (&lt;Bx) Y/Z X\Y = X/Z This fact means that there is no lexical way of specifying that a particular functor can only be used with a particular one of these rules. For example, if we give the category (10) to the coordinator, it can act as the primary functor in the &lt;B rule (after consuming its first argument), and thereby produce derivations for ungrammatical strings as shown in (11). (10) and I- (s\s)/s (11) *man that sleeps and he talks (n\n)/(s\np) s\np (s\s)/s np s\np S &lt; s\&lt;sB s\np n \n To avoid such derivations, Steedman (2000) employs a ternary rule of coordination that ensures that coordinating particles cannot behave in this manner. However, this strategy threatens to increase the size of the rule base as the semantics and usage of different coordinators are accommodated. In the context of providing a universal rule base, it would thus be preferable to be able to deal with different kinds of coordination in a lexical manner. The Categorial Type Logic tradition (CTL, Morrill (1994); Moortgat (1997); Oehrle (to appear)) provides a very clean solution to the lack of discrimination noted above. The fundamental idea i</context>
<context position="18625" citStr="Steedman (2000)" startWordPosition="3117" endWordPosition="3118">e permutation of elements within noun phrases (9). Whereas standard CCG requires a rule restriction to avoid such derivations, the applicability of the &lt;B&gt;&lt; rule can be blocked by the use of the modes * and 0 on the categories of pre-nominal and post-nominal modifiers: (15) &amp;quot;a nice in Edinburgh pub np/on n/on (n\*n)/np np &gt; n talks s\.np (s\s)/„s np s\.np 215 Note that the categories n /.o.n and n \,,n cannot combine through either &gt;B or &lt;B. Although the mode x (non-associative &amp; permutative) does not appear necessary for English, it is needed in the grammar of Dutch. The CCG account given by Steedman (2000) for crossing dependencies in Dutch subordinate clauses relies crucially on &gt;B . However, Steedman must restrict the harmonic rule &gt;B in order to block some ungrammatical orders. With the multi-modal setting, Baldridge (2002) shows that such restrictions are unnecessary because the same slash /x that allows two subordinate verbs to combine through &gt;B&gt;&lt; also correctly blocks &gt;B from applying. The encoding of Steedman&apos;s analysis into MultiModal CCG thus predicts that certain word orders are ungrammatical, whereas this must be stipulated in standard CCG. The encoding also has no need of the restr</context>
<context position="22626" citStr="Steedman (2000)" startWordPosition="3799" endWordPosition="3800">e would like to keep adjacency and dependency as separate (orthogonal) dimensions. Therefore, we propose to keep these dimensions as separate decorations on slashes as well, as follows: given dependency mode d, and adjacency mode a, we can form slashes \ ad versus /ad. Combinatory rules can operate on either dimension or on both, e.g. consider (&lt;B ) with dependency: (&lt;13,) Z X Y Z Another modal dimension is one which distinguishes a slash as being suitable or unsuitable as the primary functor in a combinatory rule. This can be used to implement the notion of antecedent government discussed by Steedman (2000) for allowing some arguments to be extractable but not 216 movable. Encoding this modally avoids the need to require all lexical noun phrases to be declared as not antecedent governed and maintains the separation we desire between features that control combination and features for agreement, tense, etc. Though we have not made use of CTL&apos;s unary modes in the presentation of Multi-Modal CCG given here, they could prove useful in limiting the applicability of type-raising rules. Following CTL, we introduce 0.i and its residuated counterpart DI. such that we have, for an arbitrary category A, 111</context>
</contexts>
<marker>Steedman, 2000</marker>
<rawString>Mark Steedman. 2000. The Syntactic Process. The MIT Press, Cambridge Mass.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Frank Trechsel</author>
</authors>
<title>A CCG account of Tzotzil pied piping. Natural Language and Linguistic Theory,</title>
<date>2000</date>
<pages>18--611</pages>
<contexts>
<context position="10431" citStr="Trechsel, 2000" startWordPosition="1710" endWordPosition="1711">can only apply when the secondary functor is a category that will ultimately produce a matrix clause (i.e., s_ SUBS), whereas we wish to avoid using such features to enforce combinatory control. That is, the formal system should not have to refer to grammar specific properties. Another ad hoc use of features with rule restrictions is that some analyses utilize features on categories that have the sole function of controlling the applicability of a single rule, such as [±FORWARD COMPOSITION] 2The $ notation used in the restriction schematizes over all functions into the target category s. 213 (Trechsel, 2000). A further unappealing aspect of rule restrictions is that they are at times not simple declarations of categories with particular features, but can also involve modified forms of the rule schemata, such as one of Steedman&apos;s versions of &gt;B for Dutch: (&gt;B) X/Y Y/(Y\Z) = X/(Y\Z) where Y = s$ None of these ways of restricting rules is crosslinguistically motivated — they are employed to obtain control over very specific aspects of a particular analysis of a particular language. Also, they can be arbitrarily sensitive to particular categories, such that in the most extreme case, we could imagine </context>
</contexts>
<marker>Trechsel, 2000</marker>
<rawString>Frank Trechsel. 2000. A CCG account of Tzotzil pied piping. Natural Language and Linguistic Theory, 18:611-663.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Vijay-Shanker</author>
<author>David Weir</author>
</authors>
<title>Polynomial time parsing of combinatory categorial grammars.</title>
<date>1990</date>
<booktitle>In Proceedings of the 28th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>1--8</pages>
<location>Pittsburgh,</location>
<contexts>
<context position="24204" citStr="Vijay-Shanker and Weir, 1990" startWordPosition="4053" endWordPosition="4056">ctively. Because of residuation, we can drop CIL&lt;&gt;tr if we do not need to type-raise. Finally, the multi-modal setting also enables us to introduce more powerful combinators into the grammar, possibly taking it beyond mild contextsensitivity. Precisely because of the tight resourcesensitive control over the applicability of combinatory rules, we can avoid a collapse to a situation where &amp;quot;anything goes&amp;quot;. 6 Computational aspects and implementation CCG has mildly context-sensitive generative power and CCG grammars can be parsed in worstcase polynomial time by using a structure sharing algorithm (Vijay-Shanker and Weir, 1990). This algorithm does incur some computational overhead, and Komagata (1999) shows that the performance of a worst-case exponential CKY parser with a semantic equivalency check is cubic in the average case (tested on Japanese sentences averaging 20 words in length). This a major attraction of CCG over CTL, for which no reasonably efficient parsers have been constructed that can handle realistic grammars Multi-Modal CCG inherits CCG&apos;s attractive computational properties and adds the possibility to take advantage of some new strategies. Most importantly, it remains mildly context-sensitive. We h</context>
</contexts>
<marker>Vijay-Shanker, Weir, 1990</marker>
<rawString>K. Vijay-Shanker and David Weir. 1990. Polynomial time parsing of combinatory categorial grammars. In Proceedings of the 28th Annual Meeting of the Association for Computational Linguistics, Pittsburgh, pages 1-8, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aline Villavicencio</author>
</authors>
<title>The Acquisition of a UnificationBased Generalised Categorial Grammar.</title>
<date>2002</date>
<tech>Ph.D. thesis,</tech>
<institution>University of Cambridge.</institution>
<contexts>
<context position="27858" citStr="Villavicencio (2002)" startWordPosition="4660" endWordPosition="4661">unifications which are necessary in applying a grammar&apos;s rules. The fact that slashes are more refined could make it seem that writing grammars would become more difficult since we must make choices about the modes. Our experience, however, is that the task becomes easier since different constructions can be dealt with on their own terms without worrying about complex interactions with rule restrictions that are already in place for other aspects of the grammar. We can further reduce the &amp;quot;burden&amp;quot; of specifying modes by defining the grammar as a lexical inheritance hierarchy along the lines of Villavicencio (2002), thereby exploiting redundancy between different classes of lexical items. 7 Conclusions We have presented an adaptation of CCG in which the applicability of combinatory rules is controlled directly through lexically assigned categories. Using modally decorated slashes as in CTL, we obtain a fine-grained form of derivational control in a purely lexicalized fashion. Consequently, we can assume all combinatory rule schemas to be active universally. Grammars need to differ in the types of lexical categories only, i.e. what types of modalized slashes they use, and thus what rules they make applic</context>
</contexts>
<marker>Villavicencio, 2002</marker>
<rawString>Aline Villavicencio. 2002. The Acquisition of a UnificationBased Generalised Categorial Grammar. Ph.D. thesis, University of Cambridge.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>