<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.991627">
Ambiguous Noun Phrases in Logical Form
</title>
<author confidence="0.994972">
Mary P. Harper*
</author>
<affiliation confidence="0.870335">
Purdue University
</affiliation>
<bodyText confidence="0.996982636363636">
In this paper, logical form representations for pronouns, singular definite noun phrases (NPs),
and singular indefinite NPs are developed. These representations allow decisions about the precise
meaning of a sentence to be postponed until the required information becomes available. Three
computational constraints for this logical form are proposed: compactness, modularity, and formal
consistency. Initially, NPs are represented using a composite representation for all allowable
meanings, conforming with the compactness constraint. This representation is provided using
only syntactic and sentence level information, consistent with the modularity constraint. When
an ambiguity can be resolved, the precise behavior is specified in a way compatible with the initial
representation, conforming with the formal consistency constraint. The scope of this approach is
demonstrated by using a wide variety of examples, and a computer implementation is described.
Related approaches are also discussed.
</bodyText>
<sectionHeader confidence="0.990241" genericHeader="abstract">
1. Introduction
</sectionHeader>
<bodyText confidence="0.99781428">
A goal of natural language research is to provide a computer model capable of gen-
erating an internal representation for the meaning of each sentence processed. The
building of this representation can be approached in two ways.
The first approach requires the generation of an unambiguous internal representa-
tion for each sentence before attempting to represent subsequent sentences. There are,
however, several problems with this approach. First, the enumeration and testing of
each possible reading of an ambiguous sentence to determine which is correct can re-
quire significant computational resources. Second, an application may not require the
precise meaning for a sentence; hence, determining a single meaning would be a waste
of resources. Third, many times an ambiguous sentence cannot be disambiguated until
information contained in subsequent sentences has been processed.
Another approach, the one adopted in this paper, is to use an intermediate rep-
resentation called logical form (LF) (Schubert and Pelletier 1984; Allen 1987; Harper
1988) to avoid immediately committing to a single meaning of an ambiguous sentence.
LF partially specifies the meaning of a sentence based on syntactic and sentence-level
information, without considering the effects of pragmatics and context. This partial
specification of meaning allows us to process additional sentences before further lim-
iting the meaning of an ambiguous sentence. Later, as relevant information becomes
available (from a context processing module), the intermediate representation of the
ambiguous sentence can be incrementally updated. This process can continue until all
of the ambiguities are resolved and an unambiguous internal representation of the sen-
tence is generated (although this is not a requirement of the approach). The process of
mapping a sentence to an unambiguous internal representation is shown in Figure 1.
Because LF is a component of a computer model for language comprehension,
it must be designed with two goals in mind. First, it should accurately model the
</bodyText>
<note confidence="0.869367333333333">
* School of Electrical Engineering, Purdue University, West Lafayette, IN 47907.
© 1992 Association for Computational Linguistics
Computational Linguistics Volume 18, Number 4
Process to
Update
Logical Form
</note>
<sectionHeader confidence="0.5124955" genericHeader="keywords">
Contextual
Information
</sectionHeader>
<figureCaption confidence="0.881519">
Figure 1
</figureCaption>
<bodyText confidence="0.99881925">
An architecture for language processing.
linguistic behavior of language. Second, it should be computationally tractable. In
fact, we have defined three constraints for using LF in a computational framework
(Harper 1988, 1990).
</bodyText>
<listItem confidence="0.994356739130435">
1. Compactness Constraint: The compactness constraint, which captures
the spirit of LF as presented by Allen (1987), is important in a computer
model of language comprehension because of the need to postpone
decisions about ambiguity without large storage requirements. LF should
compactly represent the underdetermined meaning of a
sentence—underdetermined in that ambiguities and anaphora are not
resolved. Ideally, LF should only require polynomial (in the number of
words in a sentence) space.
2. Modularity Constraint: The modularity constraint requires LF to be
initially computable from syntax and local (sentence-level) semantics
only. In particular, it should not be initially dependent on contextual
information, which requires significantly more computational resources
to extract.
3. Formal Consistency Constraint: The formal consistency constraint
requires that any update to the meaning of LF should be a refinement of
the original meaning. Initially, LF provides a composite representation
for a sentence. However, as more information becomes available, the
meaning of the sentence is incrementally updated (without contradicting
the composite meaning) until all ambiguity is resolved. To obey the
formal consistency constraint, it is important to explicitly detail the
syntax and semantics of the LF (see Appendix A for the syntax and
semantics of the LF we are about to describe) and to indicate how formal
consistency would be violated.
</listItem>
<figure confidence="0.998648909090909">
Parse
Tree
Initial
Logical
Parse Tr Form
to Logical
Form
H Unambiguous
Internal
Representation
Sentence
</figure>
<page confidence="0.993451">
420
</page>
<note confidence="0.881231">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.999891714285714">
In the next section, we describe how LF has been used to represent quantifier scope
ambiguity and how this representation conforms to our computational constraints.
Then, we introduce our LF representations for pronouns, singular definite NPs, and
singular indefinite NPs, considering how to update each representation when new in-
formation becomes available (though not how to determine that information). We also
discuss an implementation that uses our representations and compare our approach
with related work.
</bodyText>
<sectionHeader confidence="0.832751" genericHeader="method">
2. Quantifier Scope Ambiguity in Logical Form
</sectionHeader>
<bodyText confidence="0.9903146">
Quantifier scope ambiguity has been handled by some researchers by using an inter-
mediate scope-neutral LF (e.g., Hobbs 1983; Schubert and Pelletier 1984; Allen 1987)
for the initial representation of sentences. Hence, sentences like Someone loves everyone
are initially represented without committing to one particular meaning, as shown in
Example 1.
</bodyText>
<subsectionHeader confidence="0.500892">
Example 1
</subsectionHeader>
<bodyText confidence="0.882061">
Someone loves everyone.
</bodyText>
<listItem confidence="0.579194333333333">
Possible Meanings: 1. 2x Vy (love x y)
2. Vy 2x (love x y)
Scope-neutral Form: (love [2x xl [Vy yl)
</listItem>
<bodyText confidence="0.999850962962963">
Initially, in scope-neutral LF, the quantifiers are stored in the predicate argument-
structure with no scoping preference indicated, hence the representation does not
commit to a specific meaning for the sentence; it is simply a compact way of express-
ing the set of all possible readings. Another type of scope-neutral form initially gives
universal quantifiers scope over all existentials. This solution provides a general read-
ing that in many cases subsumes readings where the existential is outside of the scope
of the universal. However, if we are to handle NPs containing pronouns and sentences
with verb phrase ellipsis, this solution is inadequate.
An LF that avoids committing to a single meaning must be capable of being up-
dated once information is available to limit the scoping possibilities. There are a variety
of mechanisms for expressing scoping decisions. For example, Schubert and Pelletier
(1984) indicate quantifier scoping by extracting and linearly ordering the quantifiers
to the left of the predicate-argument structure. Allen (1987) indicates for each pair
of quantifiers which one has scope over the other; a method that is not limited to a
linear sequence of operators. Finally, Creaney and McTear (1990) use constraints to
limit scope possibilities. Hintikka (1979) has noted that the linear ordering of quan-
tifiers is not sufficient to capture all possible meanings of a sentence when four or
more quantifiers occur in the sentence. Consider a sentence with four quantifiers, two
universals and two existentials: Every boyi wanted every girl I to introduce a friend of his,
to a friend of hersj. It should be possible for every boy to have scope over a friend of his,
without having scope over a friend of hers. Similarly, every girl could have scope over a
friend of hers, but not a friend of his. There is no way to express this with a linear quan-
tifier scoping string, but Allen and Creaney and McTear have no trouble indicating
nonlinear scoping using their approaches.
A scope-neutral LF compactly represents a sentence. Since the size of the scope-
neutral representation is directly proportional to the length of the sentence, it is con-
sistent with the compactness constraint. This representation also avoids committing to
</bodyText>
<page confidence="0.995692">
421
</page>
<note confidence="0.820231">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.998788173913044">
a single meaning by separating the process of making a scoping decision from the pro-
cess of constructing the initial representation for a sentence and its constituents (this
separation is consistent with the modularity constraint). Later, when enough informa-
tion becomes available to make a scoping decision, there are several different methods
for indicating which quantifier has scope over the other. These modifications commit
to one of the meanings encoded in the scope-neutral form and so are compatible with
the formal consistency constraint.
There are other types of semantic ambiguities in addition to quantifier scope am-
biguity that can be handled by using LF. For example, the meanings of pronouns, sin-
gular definite NPs, and singular indefinite NPs often cannot be determined without
additional contextual information. Postponing decisions about the precise meanings
of sentences containing these types of constituents could be extremely useful, as the
following example illustrates: Every man showed a boy a picture of his mother. The precise
meaning of the sentence cannot be specified until information is available to select the
pronoun&apos;s antecedent and to determine the quantifier scoping. The pronoun his can
have many different antecedents, including: every man, a boy, some entity introduced in
other sentences, or some individual in the environment of the speaker or hearer. The
meaning of his mother is ambiguous because it depends on the pronoun&apos;s antecedent.
Also, a picture of his mother is ambiguous; its meaning cannot be determined until we
determine the meaning of his mother and decide whether the universally quantified
NP has scope over the indefinite. Notice that quantifier scoping decisions are affected
by the choice of antecedent for his. If every man is the antecedent then it must have
scope over a picture of his.
</bodyText>
<sectionHeader confidence="0.815444" genericHeader="method">
3. Pronouns in Logical Form
</sectionHeader>
<bodyText confidence="0.9998185">
Pronouns are a source of underspecification in a sentence: the antecedent of a pronoun
cannot be determined using syntactic information alone, but requires a combination
of syntactic, semantic, and contextual information. We divide the process of determin-
ing the meaning of a pronoun into two phases. First, we provide the pronoun&apos;s LF,
using only syntactic and sentence-level information. This LF constrains the possible
antecedents to be those NPs that are consistent with this local information. The LF
is also a flag indicating that the sentence is underspecified because more than one
antecedent for the pronoun is possible. Later, when the antecedent is determined, a
task that often requires contextual information found in surrounding sentences, we
provide a way to update our LF to include this information.
In the rest of this section, we discuss the linguistic behaviors of pronouns we want
to model, introduce their LF representation, discuss how that representation is updated
once contextual information isolates antecedents for the pronouns, and describe how
the approach models verb phrase ellipsis (VPE).
</bodyText>
<subsectionHeader confidence="0.995201">
3.1 Pronouns: Linguistic Behavior
</subsectionHeader>
<bodyText confidence="0.97899775">
Pronouns either have linguistic antecedents or refer to salient objects in the environ-
ment of the speaker or hearer (deictic use). Pronouns with linguistic antecedents can
be categorized in two ways: either their antecedents occur in the same sentence (in-
trasentential reference&apos;) or in other sentences (intersentential reference).
</bodyText>
<footnote confidence="0.9538265">
1 By reference, we do not mean that the pronoun denotes its linguistic antecedent; rather, that it adopts
the behavior of its antecedent.
</footnote>
<page confidence="0.974762">
422
</page>
<note confidence="0.886667">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.99951">
When a pronoun&apos;s intrasentential antecedent is a universal NP, that pronoun takes
on the behavior of the universal&apos;s variable. Consider the sentence Fred showed every girl
her picture. Given that the antecedent for her is every girl, the pronoun adopts the
behavior of a variable bound by the universal quantifier of its antecedent, as shown
in Example 2.
</bodyText>
<subsectionHeader confidence="0.750764">
Example 2
</subsectionHeader>
<bodyText confidence="0.998219352941176">
Fred, showed every girl, her, picture.
Vx (if (girl x) (show Fred (x&apos;s picture) x))
In contrast, if a pronoun has an intersentential antecedent, then that pronoun
cannot act like a bound variable, since quantifiers do not have scope across sentences
in English. Consider the following two sentences: Fred likes everyone. But, he doesn&apos;t
return the sentiment. The pronoun in the second sentence cannot be bound by the
quantifier corresponding to everyone in the first sentence. However, a quantified NP in
one sentence can be the antecedent for a pronoun in another sentence, as in Fred likes
everyone. But, they don&apos;t return the sentiment. In this case, they adopts the discourse entity
for the group of individuals that everyone quantifies over. Webber (1978) discusses
how to construct discourse entities for nonanaphoric NPs in a sentence (both for
quantified NPs and definite NPs that are quantified over) once that sentence has been
disambiguated. A discourse entity is a designator for the entity or set of entities the
NP evokes in the discourse model of the speaker or hearer. If an NP in one sentence is
the antecedent for a pronoun in another, the pronoun is replaced with the antecedent&apos;s
discourse entity.
Pronouns have also been classified as bound variable pronouns or referential pro-
nouns. The antecedent for a bound variable pronoun occurs in the same sentence as
the pronoun and the meaning of the pronoun is represented as a variable bound
by the operator associated with its antecedent. In contrast, the meaning of a ref-
erential pronoun is the discourse entity evoked by its antecedent. The bound ver-
sus referential dichotomy divides the world of pronouns differently than does the
intrasentential—intersentential dichotomy. Pronouns with intersentential antecedents
are typically referential.&apos; However, pronouns with intrasentential antecedents can be
bound or referential (Webber 1978; Reinhart 1983).
The bound—referential dichotomy doesn&apos;t cover the entire range of behaviors possi-
ble for pronouns. There is another category of pronoun that Evans (1980) dubs E-type
pronouns and that appears to be a bound variable, but on closer inspection is not.
Donkey sentences (originally noticed by Geach [19621) can be used to demonstrate
this difficulty, for example: Every miner who owns a donkey beats it. Given that every miner
has scope over a donkey, the indefinite cannot be referential and the existential opera-
tor is blocked from binding the pronoun because of the scope island; quantified NPs
embedded in a relative clause attached to an NP cannot bind pronouns outside of the
relative clause environment.&apos; However, a donkey can be the antecedent for the pronoun.
</bodyText>
<footnote confidence="0.954934666666667">
2 The only exception are pronouns like those in paycheck sentences (first noticed by Kartunnen [1969]).
Consider the sentence Fred gave his paycheck to his wife. George gave it to his mistress. The pronoun it is not
referential. For that matter, it is not bound. The pronoun seems to take his paycheck as its antecedent
where the pronoun is instantiated to a different individual than in the original sentence.
3 This is related to the Complex NP Constraint introduced by Ross (1967), which prevents wh-movement
out of a relative clause attached to an NP.
</footnote>
<page confidence="0.995626">
423
</page>
<note confidence="0.803967">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.8407175">
Donkey sentences provide evidence that all of the following cannot be simultaneously
true (adapted from Heim [1982, p. 102]).
</bodyText>
<listItem confidence="0.999552">
1. Indefinites should be represented using existential quantifiers.
2. Indefinites obey the same scope-island restriction as universals.
3. Pronouns are either bound variables or referential.
</listItem>
<bodyText confidence="0.9170982">
Many researchers have attacked one or more of these assumptions, but we prefer to
modify the third by adding an additional type of pronoun: pronouns that adopt the
functional behavior of their antecedents. The first two assumptions, together with our
modification of the third, allows us to build a simpler LF for a sentence and also
handle donkey sentences (as described in Section 5.2).
Pronouns are a source of ambiguity in verb phrase ellipsis (VPE). To signal a VPE,
a full verb phrase (VP) is replaced with an auxiliary, as in the second sentence of
Example 3. A sentence with VPE is called an elided sentence. The index on Fred and
his indicates that they are co-referential.
Example 3
</bodyText>
<listItem confidence="0.598738">
Trigger Sentence: Fred, loves his, wife.
Elided Sentence: Georgej does too.
Possible Meanings: 1. George loves Fred&apos;s wife. (strict meaning)
2. George loves George&apos;s wife. (sloppy meaning)
</listItem>
<bodyText confidence="0.999699416666667">
The elided sentence has little meaning independent of the first sentence, called a
trigger sentence. Hence, before determining the meaning of the elided sentence, the
meaning of the trigger sentence must be completely determined. Even though the
antecedent of the pronoun in the trigger sentence is Fred, the meaning of that pronoun
is still ambiguous because pronouns in a trigger VP can refer to a subject NP either
directly or indirectly. This example indicates that care is needed to design a pronoun
representation capable of handling VPE since the representation must be compatible
with the two behaviors of a pronoun whose antecedent is the syntactic subject of a
trigger sentence. It also demonstrates how the meaning assigned to the trigger VP
limits the possible meanings of the elided sentence. Though the meaning of the elided
sentence is ambiguous, it cannot mean George loves some other person&apos;s wife (other than
Fred&apos;s or George&apos;s).
</bodyText>
<subsectionHeader confidence="0.999447">
3.2 Pronouns: The Initial Representation
</subsectionHeader>
<bodyText confidence="0.999721">
Before introducing our LF for pronouns, we briefly describe the LF for the rest of
a sentence. A sentence is represented as a predicate-argument structure, with sub-
jects lambda abstracted to handle VPE (following Sag [1976]; Williams [1977]; Webber
[1978]; and Partee and Bach [1981]). By lambda abstracting syntactic subjects in LF,
a pronoun whose antecedent is a syntactic subject can refer to that subject in two
different ways, either directly by using a value depending on the type of the subject
NP or indirectly by using the subject&apos;s lambda variable. The logical roles of all NPs in
a sentence are indicated by position in LF (logical subject first, logical object second,
logical indirect object third, etc.). Following Webber [1978], we represent universal NPs
as universally quantified and restricted variables (as in 4a) and existentially quantified
NPs as existentially quantified and restricted variables (as in 4b). The colon between
the quantifier and its restriction expands differently depending on the type of the
quantifier.
</bodyText>
<page confidence="0.996474">
424
</page>
<note confidence="0.703171">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
Example 4
</note>
<listItem confidence="0.942572166666667">
a. Sentence: Every man is happy.
Representation: Vx: (man x) (happy x)
Meaning: Vx (if (man x) (happy x))
b. Sentence: A man is happy.
Representation: 3x: (man x) (happy x)
Meaning: Ic (and (man x) (happy x))
</listItem>
<bodyText confidence="0.995386465116279">
Quantifier scoping is handled in the same way as in Section 2. Initially, quantifiers
are placed in the predicate-argument structure for the sentence, except for subjects,
which are necessarily abstracted. Abstraction of a quantified subject does not imply
that it must have scope over quantifiers placed in the lambda function corresponding
to the VP. Later, when information becomes available for making scoping decisions,
quantifier scoping is indicated using a method similar to Allen&apos;s (1987) (described in
Section 5.2). Possessive NPs are represented as functions of the possessive nouns (fol-
lowing Webber [1978]) and proper nouns as skolem constants (i.e., skolem functions
without arguments). These representations will be replaced with a general represen-
tation for definite NPs in Section 4.
The LF representation for a pronoun must be compatible with our computational
constraints. To be consistent with the modularity constraint, a pronoun&apos;s representation
must be generated without utilizing the contextual information needed to select its
antecedent. To obey the compactness and formal consistency constraints, a pronoun
must be represented using a single representation that is consistent with the ways the
pronoun can act given its position in a sentence. To conform with these constraints,
we represent a pronoun as a pronoun function in LF. This representation of pronouns
is similar in spirit to the representation of pronouns as unique skolem constants in
Charniak and McDermott (1985). Their representation allows the construction of basic
logical structure of the sentence to precede pronoun resolution, a division consistent
with our compactness and modularity constraints. However, because a constant is
incompatible with a variable, their pronoun representation is incompatible with a
bound variable meaning.
A pronoun function is a composite representation reminiscent of a skolem function.
Its role is to limit the range of possible antecedents for the pronoun without committing
to one in particular. Each pronoun function is assigned a unique name (supplied by
adding a unique number to the pronoun to distinguish it from other pronouns), and
its argument list is specified using only syntax and sentence-level semantics to avoid
violating the modularity constraint.
A pronoun should be represented as a function of all the variables corresponding
to quantified NPs that can affect its meaning (because they are representations for pos-
sible antecedents or can affect the meanings of other nonquantified antecedents such as
definite NPs). By concentrating on variables of possible antecedents, we automatically
include those variables that affect potential nonquantified antecedents. The argument
list should also contain the variables of lambda operators that have scope over the
position that the pronoun function fills in LF (in order to allow sloppy readings of
elided sentences).
To provide an algorithm for automatically generating the LF for a pronoun, we
must develop a mechanism for specifying its argument list. This mechanism should not
automatically assign all of the variables associated with quantified NPs in the sentence
to the argument list of a pronoun function because, in English, some quantified NPs
are syntactically incompatible antecedents for the pronoun. Consider, for example,
He loves every man, in which the antecedent for he cannot be every man. To determine
</bodyText>
<page confidence="0.997837">
425
</page>
<figure confidence="0.9937519">
Computational Linguistics Volume 18, Number 4
Si
NP1 VP
Det Noun S2 Virb NP4
I I
Every man NP2 VP kicked Det Noun
I /N
who Verb NP3 his dog
saw De It Nolun
every boy
</figure>
<figureCaption confidence="0.920585">
Figure 2
</figureCaption>
<subsubsectionHeader confidence="0.334082">
Parse tree for Every man who saw every boy kicked his dog.
</subsubsectionHeader>
<bodyText confidence="0.99927875">
which NPs can bind a pronoun in a sentence, we adapt Reinhart&apos;s (1983) c-command
(or constituent-command), which is a relation on nodes in the sentence&apos;s parse tree.
Node A c(constituent)-commands node B iff the branching node al
most immediately dominating A either dominates B or is immediately
dominated by a node a2 which dominates B, and a2 is of the same
category type as ai . (Reinhart 1983, p. 23)
To illustrate the concept of c-command, consider the parse tree for the sentence in
Example 5, shown in Figure 2.
</bodyText>
<subsectionHeader confidence="0.785157">
Example 5
</subsectionHeader>
<bodyText confidence="0.9980435625">
Every man who saw every boy kicked his dog.
In Figure 2, NP1 c-commands his, but NP2 and NP3 do not. Reinhart claims that a
pronoun can be bound by an NP if and only if the NP c-commands the pronoun.
Hence, every man who saw every boy can bind his, but every boy cannot.
C-command is very useful for ruling out incorrect antecedents for pronouns, as
illustrated by Example 5. Unfortunately, it also makes some incorrect predictions. For
example, it does not allow every man&apos;s to bind him in Every man&apos;s mother loves him
or each candidate to bind him in A friend of each candidate supported him, even though
the universal variables provide reasonable meanings for the pronouns. The difference
between Example 5 and the previous two sentences is that in 5 the quantified NP
in question is contained in a relative clause attached to an NP, whereas in the other
two sentences they are not. A quantified NP is prevented from binding any pronoun
outside of the clause even though the NP containing it c-commands the pronoun.
Hence, we adapt Reinhart&apos;s binding rule&apos; to allow quantified NPs to bind a pronoun
if they c-command the pronoun or are embedded in another c-commanding NP but
not contained in a relative clause.
</bodyText>
<footnote confidence="0.519759">
4 We could have also adapted the binding constraints found in Bach and Partee (1980).
</footnote>
<page confidence="0.995688">
426
</page>
<note confidence="0.486958">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.98961375">
Armed with this syntactic rule for determining which quantified NPs can have an
impact on the meaning of a pronoun, we can now specify a pronoun&apos;s representation. A
pronoun is represented as a uniquely named function of all the variables corresponding
to operators that can have scope over it. These operators include:
</bodyText>
<listItem confidence="0.906847666666667">
• any lambda operator that has scope over the pronoun function in LF,
• any nonsubject quantified variable corresponding to an NP that can bind
the pronoun given our modification of Reinhart&apos;s binding rule.
</listItem>
<bodyText confidence="0.997569142857143">
Because a quantified subject&apos;s variable is abstracted by the sentence&apos;s lambda opera-
tor, the lambda variable subsumes the quantified variable as the only subject-related
variable required in the argument list. The lambda variable makes available both the
direct quantified variable meaning as well as the indirect lambda variable meaning
since we can choose to apply the quantified variable or not, depending on our need.
Now that the initial representation for pronouns has been specified, consider a
series of examples, beginning with Example 6:
</bodyText>
<subsectionHeader confidence="0.838624">
Example 6
</subsectionHeader>
<bodyText confidence="0.990058133333333">
Fred loves himself.
Fred22, A(x)(love x (himselfi x))
The subject Fred is represented as the skolem constant Fred22 and the VP as the lambda
function, A(x)(love x (himselfi x)). To create a representation for the entire sentence, we
apply the subject to the lambda function; this is indicated by placing the subject to the
left of the function. Though it is more traditional to apply the term to the right of the
function, we chose this method to make it easier to see the correspondence between
the sentence and its representation (following Sag [1976]). The logical subject fills the
first slot after the predicate in the VP and the logical object fills the second. Since the
sentence in Example 6 contains no universal or indefinite NPs, himself is represented
simply as a pronoun function of the lambda variable x. And as we mentioned previ-
ously, the name of this function is created by concatenating a unique integer onto the
end of the pronoun string (i.e., himselfi).
In the next example, the representation of the pronoun is affected by universal
and indefinite NPs in the sentence.
</bodyText>
<subsectionHeader confidence="0.973072">
Example 7
</subsectionHeader>
<bodyText confidence="0.997522636363636">
Every man showed a boy his picture.
Vx: (man x) x, A(y)(show y (picture-of (his2 y z)) [3z: (boy z) z1)
The syntactic subject of the sentence is universally quantified, the indirect object is
existentially quantified, and the logical direct object his picture is represented as a
function of the pronoun. As discussed above, the subject&apos;s larribda variable subsumes
the universal variable; hence his is represented as a function of the subject&apos;s lambda
variable plus the existential variable for a boy. The reader should note that there is no
order implied by quantifiers in our LF (following Allen [19871) and so the quantifiers
can be ordered in two different ways to provide two possible final meanings for the
sentence.
Next, consider Example 8.
</bodyText>
<page confidence="0.993324">
427
</page>
<figure confidence="0.6686945">
Computational Linguistics Volume 18, Number 4
Example 8
Fred believes he must speak to every woman.
Fred22, A(x)(believe x Rhei x), A(z)(speak z (to [Vy: (woman y) OA)
</figure>
<bodyText confidence="0.97636">
Although this sentence contains a universal NP, he is represented as a pronoun function
of the lambda variable x alone. The pronoun function&apos;s argument list does not include
the variable y because every woman neither c-commands nor is embedded in an NP
that c-commands the pronoun.
Finally, consider a sentence containing only pronouns and definite NPs.
Example 9
Fred showed his mother her picture.
Fred22, A(x)(show x (picture-of (hen i x)) (mother-of (his2 x)))
Both of the pronouns are represented as functions of the lambda variable x.
</bodyText>
<subsectionHeader confidence="0.931965">
3.3 Pronouns: Updating Logical Form
</subsectionHeader>
<bodyText confidence="0.939612555555555">
When a pronoun&apos;s antecedent is known,&apos; the LF containing it must be updated in a
way compatible with its initial representation (to conform with the formal consistency
constraint). To augment LF with antecedent information without creating an ill-formed
LF (i.e., a LF with unbound variables), we assert equality statements in the lambda
environment containing the pronoun function and limit the types of updates allowed.
A pronoun function constrains its possible antecedents, and depending on the type
and location of its antecedent, the pronoun function is equated with four different
values.
Pronoun Update Cases:
</bodyText>
<listItem confidence="0.996268882352941">
1. If a universal or indefinite NP is the intrasentential antecedent for the
pronoun, and its variable is an argument of the pronoun function (or is
abstracted by a lambda operator whose variable is an argument of the
function), then equate the pronoun function with that quantified variable.
2. If an NP represented as a function (i.e., a pronoun or definite) is the
intrasentential antecedent for a pronoun, and its argument list is
compatible with that of the pronoun function (either immediately or
after more is known about its meaning), then equate the pronoun
function with that function.
3. If a syntactic subject of a sentence is the intrasentential antecedent for
the pronoun, and the lambda variable is an argument of the pronoun
function, then equate the pronoun function with either the subject&apos;s
lambda variable or some other value depending on the subject&apos;s type.
4. If an NP in a different sentence or some nonlinguistic entity is the
antecedent for the pronoun (and it is compatible in number and gender
with the pronoun), then equate the pronoun function with the discourse
entity created for the antecedent.
</listItem>
<footnote confidence="0.453291">
5 In this paper, we are not concerned with how the correct antecedent for a pronoun is determined.
However, our LF provides useful hooks for an implementation to request information of either a user
or a pronoun resolution module in order to resolve ambiguity.
</footnote>
<page confidence="0.990078">
428
</page>
<note confidence="0.480278">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.998427">
Some updates to logical form must be postponed until more is known about the
meaning of a possible antecedent (as we will show in Section 4.3.2).
Consider some examples of how LF is refined following pronoun resolution. Sup-
pose, for example, that we decide that the antecedent for his, in Example 7, is a boy,
then the LF for the sentence is modified as follows:
</bodyText>
<subsectionHeader confidence="0.669096">
Example 10
</subsectionHeader>
<bodyText confidence="0.849580133333333">
Every man, showed a boy, his, picture.
Vx: (man x) x, A(y)(and (show y (picture-of (his2 y z)) [az: (boy z)
(--= (his2 y z) z))
Simplification:
Vx: (man x) x, A(y)(show y (picture-of z) [az: (boy z)
To indicate that the antecedent for his is a boy, the pronoun function (his2 y z) is equated
with the existentially quantified variable z (by pronoun update case 1). Notice that the
equality statement is placed in the environment of the A(y) operator. If we had placed
it outside of this environment, the variable y would have been unbound. The variable
z is compatible with the pronoun&apos;s initial representation because we are limiting the
function of y and z to be the identity function on z. Once the equality statement is
asserted, we can simplify the LF as shown above. Notice that the meaning of the
sentence is still underspecified since quantifier scoping has not been determined.
Next, consider how the representation in Example 6 is augmented, given that the
antecedent for himself is the subject Fred.
</bodyText>
<subsectionHeader confidence="0.575139">
Example 11
</subsectionHeader>
<bodyText confidence="0.909752470588235">
Fred, loves himself,.
Fred22, A(x)(and (love x (himself]. x))
(or, (= (himselfi x) x) (himselfi x) Fred22)))
The pronoun can refer to the subject either directly or indirectly, so its function is
equated with Fred22 (by pronoun update case 2) or x (by case 3), respectively. Notice
that we use ora as a meta-or to annotate our logical form with multiple possible mean-
ings for the pronoun (outside of the logical system for mapping to truth value, see
Appendix A). No simplification of the LF is possible until one of the alternatives is
chosen, but by using this device we can at least compactly represent the ambiguous
ways that pronouns refer to syntactic subjects. In fact, if there are n pronouns whose
antecedents are subjects, we can specify this ambiguity with 0(n) updates, compared
with providing 2n different representations for the sentence. This allows us to more
easily put off decisions about the pronoun&apos;s intended meaning until we process the
required information, in contrast to an approach that uses an exponential amount of
memory.
Finally, consider how the LF in Example 9 is updated given that Fred is the an-
tecedent of his and his mother is the antecedent for her.
</bodyText>
<subsectionHeader confidence="0.920625">
Example 12
</subsectionHeader>
<bodyText confidence="0.8335015">
Fred, showed (his, mother), her, picture.
Fred22, A(x)(and (show x (picture-of (heri x)) (mother-of (his2 x)))
</bodyText>
<equation confidence="0.687109">
(or, (= (his2 x) x) (= (his2 x) Fred22))
(= (heri x) (mother-of (his2 x))))
</equation>
<page confidence="0.995166">
429
</page>
<figure confidence="0.388708">
Computational Linguistics Volume 18, Number 4
</figure>
<listItem confidence="0.871207666666667">
Possible Meanings:
1. Fred22, A(x) (show x (picture-of (mother-of x)) (mother-of x))
2. Fred22, A(x) (show x (picture-of (mother-of Fred22)) (mother-of Fred22))
</listItem>
<bodyText confidence="0.987013">
Note that (his2 x) is equated with Fred (by case 2) or x (by case 3) since it is compatible
with those values. Also (heri x) is equated with (mother-of (his2 x)) (by case 2) since the
functions are compatible.
</bodyText>
<subsectionHeader confidence="0.99709">
3.4 Pronouns and Verb Phrase Ellipsis
</subsectionHeader>
<bodyText confidence="0.904417333333333">
In this section, we discuss how to handle VPE, using Example 3 to illustrate our
approach.
Example 3
</bodyText>
<listItem confidence="0.978786">
Trigger Sentence: Fred, loves his, wife.
Elided Sentence: George) does too.
Possible Meanings: 1. George loves Fred&apos;s wife. (strict meaning)
2. George loves George&apos;s wife. (sloppy meaning)
</listItem>
<bodyText confidence="0.954852">
The trigger sentence in Example 3 is initially represented as shown below.
</bodyText>
<subsectionHeader confidence="0.484159">
Example 13
</subsectionHeader>
<bodyText confidence="0.905295428571429">
Fred loves his wife.
Fred22, A(x)(love x (wife-of (hisi x)))
Because the meaning of an elided VP is constrained by the meaning of the trigger VP,
the trigger&apos;s meaning must be fixed before we provide the meaning of the elided VP.
In particular, we must locate the antecedent for his; otherwise, the final meaning of the
pronoun function in the trigger cannot limit the meaning of the pronoun in the elided
sentence. Given that the antecedent for his is Fred, we augment the LF as shown in 14.
</bodyText>
<equation confidence="0.8632005">
Example 14
Fred, loves his, wife.
Fred22, A(x)(and (love x (wife-of (hisi x)))
(ora (= (hisi x) x) (= (hisi x) Fred22)))
</equation>
<bodyText confidence="0.995807">
The initial representation for the elided sentence from Example 3 contains a place
holder for the missing VP, as shown below.
</bodyText>
<equation confidence="0.726522">
Example 15
George does too.
George35, A(y)(Dummy2 y)
</equation>
<bodyText confidence="0.996737777777778">
To determine the intended meaning of the elided sentence, we must locate the trigger
sentence, select a single meaning for that sentence, and replace the dummy lambda
function with the lambda function representing the trigger VP. The trigger sentence&apos;s
VP, shown in Example 14, contains a meta-or of equality statements signalling an
ambiguity in the pronoun&apos;s meaning; hence, before providing the meaning of the
elided VP, we must select a single meaning for the pronoun.
The procedure for choosing between the two meanings is beyond the scope of this
work; consequently, we will demonstrate that for each choice, we are able to provide a
reasonable meaning for the elided sentence. If the pronoun his refers indirectly to the
</bodyText>
<page confidence="0.97586">
430
</page>
<note confidence="0.463521">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.959946">
subject of the trigger sentence, the first disjunct in 14 is selected. This choice provides
the sloppy reading of the elided sentence, as shown below.
</bodyText>
<table confidence="0.445897">
Example 16
Trigger Sentence Representation:
Fred22, A(x)(and (love x (wife-of (hisi x))) (= (hisi x) x))
Elided Sentence Representation:
George35, A(x)(and (love x (wife-of (hisi x))) (= (Iasi x) x))
</table>
<bodyText confidence="0.824727">
On the other hand, if the pronoun his refers directly to Fred, the second disjunct is
chosen, giving the strict reading of the elided sentence.
</bodyText>
<subsectionHeader confidence="0.435115">
Example 17
</subsectionHeader>
<bodyText confidence="0.818995928571429">
Trigger Sentence Representation:
Fred22, A(x)(and (love x (wife-of (hisi x))) (hisi x) Fred22))
Elided Sentence Representation:
George35, A(x)(and (love x (wife-of (hisi x))) (= (hisi x) Fred22))
There is no way to determine whether a particular sentence will be a trigger
sentence until an elided sentence is processed, so all sentences are treated as poten-
tial trigger sentences. Later, when an elided sentence is detected, its trigger sentence
must be located and disambiguated. Contextual information is needed to select trigger
sentences, to choose antecedents for pronouns, and to select a single meaning for a
pronoun function whose antecedent is a syntactic subject.
We have described our LF representation of pronouns, which allows us to model
pronoun behaviors both in normal use and in VPE and is compatible with our com-
putational constraints. Next, we discuss the LF for singular definite NPs, which is
slightly more complex than the logical form for pronouns.
</bodyText>
<sectionHeader confidence="0.698771" genericHeader="method">
4. Singular Definite NPs in LF
</sectionHeader>
<bodyText confidence="0.999943">
In this section, we develop an LF representation for singular definite NPs. As with
pronouns, we wish to obey our computational constraints while providing a model of
definite behavior. First, we discuss the behaviors we wish to model.
</bodyText>
<subsectionHeader confidence="0.999547">
4.1 Definites: Linguistic Behavior
</subsectionHeader>
<bodyText confidence="0.999949133333333">
Like pronouns, definite NPs can be anaphoric. Anaphoric definites either depend
on linguistic antecedents or denote salient individuals in the environment of the
speaker/hearer. An anaphoric definite&apos;s antecedent can be found in previous sentences
as in Fredi saw (his, cat)). The cat, was chasing a mouse, or within the same sentence as in
Every boy, who loves (hisi cat), takes care of the animal,. In the first example, the antecedent
for the cat is his cat, found in the previous sentence, hence, the cat adopts the discourse
entity assigned to his cat. In the second, the animal cannot take a discourse entity as its
meaning because its antecedent is his cat, which does not denote a particular cat.
Definites, unlike pronouns, can have a complex syntactic structure. A definite NP&apos;s
meaning can be affected by embedded NPs. While simple nonanaphoric definites (i.e.,
they contain no embedded NPs) act like constants when included in sentences with
universal NPs, as in Every boy loves the woman; definite NPs containing pronouns often
cannot be described as constants, as in Every boy loves his mother. The meaning of his
mother depends on how the pronoun is resolved. If the antecedent for his is found
in another sentence, then his mother could be represented as a constant, but if every
</bodyText>
<page confidence="0.986873">
431
</page>
<note confidence="0.318175">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.999834083333333">
boy is the antecedent for his, then the universal quantifier corresponding to every boy
distributes over his mother. When a quantifier distributes over a definite, the definite
denotes different entities depending on the values assigned to the quantified variable.
Any pronoun embedded in a definite NP can affect the definite&apos;s meaning: a possessive
pronoun, one contained in a prepositional phrase (PP), or one contained in a relative
clause attached to the definite.
A quantified possessive in a definite NP always distributes over the NP, preventing
it from acting like a constant, as in Every man&apos;s mother loves him. It can also bind any
pronouns the definite NP c-commands. Quantified NPs contained in a PP attached to a
definite NP can also distribute over the definite, as in The head of every public authority in
New York is rich, though the meaning of the definite NP is ambiguous. If the universal
distributes over the head of every public authority in New York, then its denotation depends
on which public authority is considered. But if the universal does not distribute over
the definite, then there is one particular person who heads all of the public authorities.
Our initial representation must be compatible with either possibility.
Not all embedded quantified NPs can distribute over a definite. Quantified NPs
embedded in relative clauses attached to a definite NP are unable to distribute over
the definite. This constraint prevents every boy from quantifying over the child who cares
for every man, so the definite can only denote one particular child. Universal NPs that
cannot distribute over a definite NP are also unable to bind a pronoun outside that
phrase, as noted by May (1985) and Roberts (1987).
We must also consider the behavior of definite NPs in VPE. The meaning of a
definite NP is ambiguous whenever it contains a pronoun whose antecedent is the
subject of the sentence,&apos; as in the following example.
</bodyText>
<subsectionHeader confidence="0.892662">
Example 18
</subsectionHeader>
<bodyText confidence="0.969935571428571">
The postman, saw his, dog.
The policemanj did too.
Possible Meanings: 1. The policeman saw the postman&apos;s dog. (strict reading)
2. The policeman saw his own dog. (sloppy reading)
We must also provide a good representation for a definite subject, one that will ac-
count for the differences between universal and definite subjects in VPE (compare
Example 19 with 18).
</bodyText>
<subsectionHeader confidence="0.948793">
Example 19
</subsectionHeader>
<bodyText confidence="0.966745636363636">
Every postman, saw his, dog.
Every policeman] did too.
Possible Meanings: Every policeman saw his own dog. (sloppy reading only)
Universal quantifiers cannot bind across sentences, so the only possible meaning for
the elided sentence in 19 is the sloppy one. However, definite subjects support both
sloppy and strict meanings (as shown in 18). If we choose a quantified variable to
represent a definite subject, we would have to allow its quantifier to bind across
sentences.
The meaning of a definite NP is affected by its structure and the meanings of
embedded NPs, as well as its potential anaphoric use. In the remainder of this sec-
tion, we introduce our LF representation for definites, describe ways to update this
</bodyText>
<page confidence="0.7654265">
6 Or whenever it contains an embedded indefinite. We consider sloppy indefinites in Section 5.3.
432
</page>
<note confidence="0.553997">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.996989">
representation once ambiguity is resolved, and discuss how the representation is used
in VPE.
</bodyText>
<subsectionHeader confidence="0.998381">
4.2 Definite NPs: An Initial Representation
</subsectionHeader>
<bodyText confidence="0.996872625">
We represent definite NPs as functions of all of the variables that can affect their
meanings. This representation satisfies our constraints by combining the advantages of
definite descriptions (Russell 1971) (discussed in Section 7.2.1) with the functional no-
tation we introduced to represent pronouns. A definite function is assigned a unique
name (i.e., def with a unique integer subscript) to distinguish two occurrences of the
same definite NP, has a restriction consisting of a single predicate or a conjunction of
predicates derived from information contained in the NP, and has a (possibly empty)
list of arguments containing:
</bodyText>
<listItem confidence="0.9967958">
• any variables associated with lambda operators that have scope over it,
• any variables associated with nonsubject quantified NPs that could bind
a pronoun in that position,
• any quantified variables associated with embedded quantified NPs that
are not also embedded in a relative clause.&apos;
</listItem>
<bodyText confidence="0.986782">
To illustrate our representation for definite NPs, consider the initial representation
of the following sentence.
</bodyText>
<subsectionHeader confidence="0.885888">
Example 20
</subsectionHeader>
<bodyText confidence="0.98983716">
Every man showed a boy his picture.
Vx: (man x) x, A(y)(show y ((defi y z) I (and (picture (defi y
(possess (his2 y (defi y z))))
[az: (boy z)
This representation is very similar to Example 7 except for the definite NP, his picture,
which is represented as the function (defi y z). The definite function&apos;s argument list
consists of the variables y and z, just like the pronoun his. As in the representation of
pronouns, we omit the variable x from the argument list because the lambda operator
for y abstracts x, so y is the more general argument. Anything that affects the meaning
of the pronoun also affects the meaning of the definite. The function&apos;s restriction is the
conjunction of statements following the vertical bar. The vertical bar in the function
serves two purposes: it is used to distinguish the function&apos;s definition (on the left) from
references to it (on the right), and it indicates that the function&apos;s restriction should be
expanded just like the restriction on an existential operator.
This representation for definite NPs accounts for quantified NPs embedded in
a definite. There are three cases to consider. The first is exemplified by Every man&apos;s
mother loves him. The NP every man&apos;s mother does not denote a single mother; every man
distributes over the definite noun phrase. A possessive quantified NP embedded in a
definite NP always distributes over the definite. Hence, its variable must be included in
the argument list of the definite function plus any other functions that the quantifier
can affect (e.g., the pronoun function for him). Additionally, its quantifier must be
moved to indicate that it has scope over the function, as shown below.
7 We should also add that a sententially attached PP with a quantified object can quantify over a definite
as well (e.g., In every car, the driver turned the steering wheel, in which the universal distributes over both
definites).
</bodyText>
<page confidence="0.997411">
433
</page>
<figure confidence="0.9193315">
Computational Linguistics Volume 18, Number 4
Example 21
Every man&apos;s mother loves him.
Vx: (man x) ((deft x) I (and (mother (defi x)) (possess x&amp;quot;(defi x)))), A(y)(love y (him2 x y))
</figure>
<bodyText confidence="0.9988776">
The second case concerns quantified NPs contained in a relative clause attached
to a definite NP. They cannot have scope over the definite so their variables are auto-
matically excluded from the definite&apos;s argument list. Furthermore, they cannot affect
the meaning of any other NP outside of the relative clause. The following example
uses these facts to represent The child who cares for every man visits him.&apos;
</bodyText>
<subsectionHeader confidence="0.584811">
Example 22
</subsectionHeader>
<bodyText confidence="0.9865265">
The child who cares for every man visits him.
((defi) I (and (child (defi)) ((defi), A(x)(care x (for [Vy: (man y) yl))))), A(z)(visit z (him2 z))
The third case concerns quantified objects of PPs attached to a definite NP. These
quantified NPs optionally have scope over the definite, and so our representation
must be consistent with both possibilities. To avoid making decisions about whether a
quantified object of a PP attached to a definite distributes over the definite, we include
its variable in the function&apos;s argument list but leave the quantifier inside the function&apos;s
restriction. This representation is shown below:
</bodyText>
<subsectionHeader confidence="0.457416">
Example 23
</subsectionHeader>
<bodyText confidence="0.938607">
The head of every public authority in New York is rich.
</bodyText>
<listItem confidence="0.90699075">
((defi x) I (head-of [Vx: (and (public-authority x) (in x New York)) x] (defi x))), A(y)(rich y)
Possible Meanings:
1. ((defi) I (head-of Vx: (and (public-authority x) (in x New York)) x (defi x))), A(y)(rich y)
2. Vx: (and (public-authority x) (in x New York)) ((defi x) I (head-of x (deli x))), A(y)(rich y))
</listItem>
<bodyText confidence="0.999746823529412">
Notice that the quantifier is placed inside the restriction of deft, and the variable x is
placed in the argument list (for the semantics of such a function, see Appendix A).
Later, after we decide whether or not the quantifier distributes over the definite, the
initial representation will be updated, as discussed in the next section.
The decision about whether a quantified object of a PP attached to a definite dis-
tributes over it cannot be made at the level of LF, though it has an impact on the
quantifier&apos;s ability to bind pronouns (or anaphoric definites) in the sentence. Quanti-
fied objects of prepositions attached to a definite NP can bind pronouns in the sentence
only when they distribute over the definite (Roberts 19879; May 1985). For example, in
The secretary of every spy keeps an eye on him, the NP every spy can bind the pronoun him
only when it has scope over the definite NP, giving it a distributive reading. However,
we cannot make our representation of the pronoun him contingent on quantifier scop-
ing decisions. Hence, we must include the variable in the argument list of the pronoun,
and add a constraint to the pronoun resolution module preventing a pronoun function
from being bound by a quantifier unless it distributes over the NP containing it.
Because a definite function is initially a composite representation for all possible
meanings of a definite NP, as appropriate information becomes available, we repeat-
</bodyText>
<footnote confidence="0.5927232">
8 We do not provide an explicit representation for who; instead we represent it by borrowing the relative
head&apos;s representation. In 22, who is represented as a definite function. If the relative head was
quantified, we would have represented the relative pronoun using the quantified variable.
9 Roberts modifies the definition of c-command to allow a PP-attached quantified NP to optionally
c-command the same NPs as the containing NP.
</footnote>
<page confidence="0.992549">
434
</page>
<note confidence="0.556497">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.999798666666667">
edly update the function, refining its range of possible meanings. This process contin-
ues until there is no longer any ambiguity in the intended meaning of the definite. In
the next section, we will discuss two methods for achieving this.
</bodyText>
<subsectionHeader confidence="0.982939">
4.3 Definite NPs: Two Ways to Update the Initial Representation
</subsectionHeader>
<bodyText confidence="0.987621428571429">
4.3.1 Updating Anaphoric Definites. If a definite is used anaphorically, it is equated
with some value depending on its antecedent (as in the case of the pronoun function).
For example, if the antecedent for a definite noun phrase occurs in another sentence
and they are compatible in number and gender, then we would equate the definite
function with the antecedent&apos;s discourse entity. Otherwise, the update is not allowed.
Antecedents for definite NPs can also be found in the same sentence. For example,
consider the initial representation of the following sentence.
</bodyText>
<subsectionHeader confidence="0.383159">
Example 24
</subsectionHeader>
<bodyText confidence="0.991030375">
The owner of every dog is afraid of the animal.
((defi x) I (and (owner (defi x)) (of (defi x) [Vx: (dog x) xl))),
A(y)(afraid y (of ((def2 x y) I (animal (def2 x y)))))
Because the representation of every dog is formally consistent with the definite function
and additional definite constraints hold (e.g., number and gender agreement holds, the
antecedent does not c-command the anaphoric definite, and the universal quantifier
distributes over the subject so it can bind the anaphoric definite), the definite function
can be equated with the antecedent&apos;s representation, as shown in 25.
</bodyText>
<subsectionHeader confidence="0.473274">
Example 25
</subsectionHeader>
<bodyText confidence="0.996662958333333">
(The owner of every dog)/ is afraid of the animal,
Vx: (dog x) adefi x) I (and (owner (defi x)) (of (defi x) x))),
A(y)(and (afraid y (of ((def2 x y) I (animal (def2 x y)))) (= (def2 x y) x)))
This example would be problematic for approaches using either definite descriptions
or definite quantifiers, which provide no mechanism for handling bound variable,
anaphoric definites.
4.3.2 Updating Structurally Complex Definites. To determine the meaning of a struc-
turally complex definite NP (i.e., an NP containing embedded pronouns and quanti-
fied NPs), we must: 1) determine the meanings for all embedded NPs and 2) decide
whether quantifiers corresponding to embedded quantified NPs not contained in rel-
ative clauses distribute over the definite. Given this information, we can refine the
meaning of a definite function using the behavior of definite descriptions (Russell
1971) as our model. Any definite description that does not contain variables bound
by outside quantifiers acts like a constant because of the uniqueness assumption (see
Section 7.2.1 for a discussion of definite descriptions). On the other hand, if a quan-
tifier has scope over the definite description (either because an embedded quantified
NP distributes over it or the antecedent for an embedded pronoun is quantified), it
denotes different individuals depending on the instantiation of that variable.
Once we determine the meanings of the NPs contained in a definite function&apos;s re-
striction and decide whether any extractable embedded quantifiers should distribute
over it, we examine the function&apos;s restriction to determine whether it contains any nec-
essary arguments, i.e., variables bound by operators outside of the restriction. When
the necessary arguments for a definite function are determined, its meaning can be
refined in two different ways. A definite function can be anaphoric only if it does not
</bodyText>
<page confidence="0.990294">
435
</page>
<note confidence="0.319314">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.999934583333333">
contain any necessary arguments. Hence, if a definite function contains no necessary
arguments and is anaphoric, then it is equated with its antecedent (as in the previous
section). However, if the definite function contains any necessary arguments or if it
contains no necessary arguments but is nonanaphoric, then we limit the argument list
to precisely the necessary arguments. By equating the original function with a new
function over the necessary arguments, a process which we call argument simplifica-
tion, we limit the initial composite representation of a nonanaphoric definite NP to its
final meaning.
For example, consider the initial representation of the sentence in Example 20.
Notice that deli is defined as a function of all of the variables that could potentially
cause it to change. Given that the antecedent for his is a boy, the LE is updated as
follows.
</bodyText>
<equation confidence="0.968407">
Example 26
Every man showed a boy, his, picture.
Vx: (man x) x, A(y) (show y ((def, y z) I (and (picture (def, y))
(possess (his2 y z) (def, y z))
(= (his2 y z) z)))
Hz: (boy z) zl)
</equation>
<bodyText confidence="0.996691833333333">
After (his2 y z) is replaced with the variable z, the only necessary argument for (defi y z)
is z. Since the restriction of the function is bound by an outside operator, the definite
cannot be anaphoric. Hence, to provide the final meaning of the definite, we apply
argument simplification to replace the function (defi y z) with a more precise function
of z, as shown in Example 27. Because of the meanings of equality and the vertical bar
in the restriction of the function, this representation is simplified, as shown below.
</bodyText>
<equation confidence="0.862781666666667">
Example 27
Every man showed a boy, his, picture.
Vx: (man x) x, A(y)(and (show y ((clef, y z) I (and (picture (dell y z))
(possess (his2 y z) (def, y z))
(= (his2 y z) z)))
Hz: (boy z) z1)
(= (defi y z) (def3 z)))
Simplification:
Vx: (man x) x, A(y)(and (show y (def3 z) Hz: (boy z) z]) (picture (def3 z)) (possess z (def3 z)))
</equation>
<bodyText confidence="0.99953075">
Also consider how we update the initial representation of the sentence in Exam-
ple 23. If every public authority in New York distributes over the definite function, then
the universal quantifier Vx is extracted from the restriction prior to applying argument
simplification, as shown below.
</bodyText>
<subsectionHeader confidence="0.928059">
Example 28
</subsectionHeader>
<bodyText confidence="0.993833666666667">
The head of every public authority in New York is rich.
Vx: (and (public-authority x) (in x New York)) ((defi x) I (head-of x (defi x))), A(y)(rich y)
Given this scoping decision, the variable x is free in the restriction of (defi x) and
so the function must retain the argument. On the other hand, if every public authority
in New York does not distribute over the function, then the quantifier remains in the
restriction, as shown in 29.
</bodyText>
<page confidence="0.984801">
436
</page>
<note confidence="0.513969">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<subsectionHeader confidence="0.428523">
Example 29
</subsectionHeader>
<bodyText confidence="0.9380052">
The head of every public authority in New York is rich.
((def.&apos; x) I (head-of Pk: (and (public-authority x) (in x New York)) xl (defi x))), A(y)(rich y)
Because the restriction of (den x) contains no free variables, we must decide whether
the definite is anaphoric or not. Assuming it is not, argument simplification is applied
as shown below.
</bodyText>
<subsectionHeader confidence="0.906138">
Example 30
</subsectionHeader>
<bodyText confidence="0.986049">
The head of every public authority in New York is rich.
</bodyText>
<equation confidence="0.983295">
(and ((defi x) I (head-of [Vx: (and (public-authority x) (in x New York)) xi (defi x))),
A(y)(rich y)
(= (defi x) (def2)))
Simplification:
((def2) I (head-of [Vx: (and (public-authority x) (in x New York)) xl (def2))),
A(y)(rich y)
</equation>
<bodyText confidence="0.998727375">
Hence, we can systematically derive both of the possible meanings for the definite NP
the head of every public authority.
The availability of a definite NP as an antecedent for a pronoun depends on
its intended meaning, which cannot be determined using only syntactic information.
Hence, c-command does not always correctly predict when definites are accessible
as antecedents for anaphoric expressions. To determine the intended meaning of a
definite, we must determine the meanings of all embedded NPs and decide whether
any embedded quantified NPs distribute over the definite. Consider Example 31.
</bodyText>
<subsectionHeader confidence="0.689712">
Example 31
</subsectionHeader>
<bodyText confidence="0.834846">
Fred told the teacher who discussed every student with his mother to examine her educational
</bodyText>
<equation confidence="0.9400538">
history.
((defi) I (name (defi) Fred)),
A(x)(tell x ((def2 x) I (and (teacher (def2 x))
(def2 x), A(y)(discuss y [V(z): (student z) z]
(with ((def3 x y z)
(and (mother (def3 x y z))
(possess (hist x y z)
(def3 x y z))))))))
[(def2 x), A(w)(examine w ((clefs x w) I (and (ed-history (def5 x w))
(possess (hers x w) (clefs x w)))))1)
</equation>
<bodyText confidence="0.999943444444444">
What are the legal antecedents for her in this sentence? Certainly, the teacher is a can-
didate, but consider his mother. We cannot immediately determine whether his mother
is a legal antecedent for her because (her6 x w) is not immediately compatible with the
representation for his mother (i.e., (def3 x y z)). We must first determine the meaning
of his mother by selecting the antecedent for his. Depending on the outcome, the final
meaning of his mother may or may not be accessible to the pronoun. If the antecedent
for his is Fred or the teacher, then his mother can be the antecedent for her (following
argument simplification). However, if the antecedent is every student, then his mother
cannot be the antecedent for her.
</bodyText>
<subsectionHeader confidence="0.986495">
4.4 Definites and Verb Phrase Ellipsis
</subsectionHeader>
<bodyText confidence="0.978981333333333">
To handle VPE, we first determine the meanings of definite functions contained in a
trigger VP before providing the meaning of an elided sentence. Consider the following
example in which the dog must denote the same dog in the trigger and elided sentences.
</bodyText>
<page confidence="0.98477">
437
</page>
<figure confidence="0.81485572">
Computational Linguistics Volume 18, Number 4
Example 32
Fred saw the dog.
George did too.
Possible Meanings: George saw the same dog that Fred saw.
The initial representation of the trigger sentence is as follows.
Example 33
Fred saw the dog.
((defi) I (name (defi) Fred)), A(x)(see x ((def2 x) I (dog (def2 x)))
Before deriving the meaning of the elided sentence from this representation of the trig-
ger, we must apply argument simplification to the definite function (def2 x) (assuming
that it is nonanaphoric).
Example 34
Fred saw the dog.
((defi) I (name (defi) Fred)), A(x)(and (see x ((def2 x) I (dog (def2 x)))) (= (def2 x) (def3)))
Simplification:
((defi) I (name (defi) Fred)), A(x)(and (see x (def3)) (dog (def3)))
Once the meaning of the definite function is determined, we derive the meaning of
the elided sentence by using the VP representation from 34.
Example 35
George did too. (George saw the same dog as Fred did.)
((def4) I (name (def4) George)), A(x)(and (see x ((def2 x) I (dog (def2 x))))
(= (def2 x) (def3)))
Simplification:
((def4) I (name (def4) George)), A(x)(and (see x (def3)) (dog (def3)))
</figure>
<figureCaption confidence="0.254468666666667">
Because the final meaning for the dog is (def3) in 34 and 35, it denotes the same dog.
Consider how we can use definite functions to handle Example 3, discussed in
Section 3.4. The initial representation of the trigger sentence is shown in 36.
</figureCaption>
<table confidence="0.585216875">
Example 36
Fred loves his wife.
((defi) I (name (defi) Fred)), A(x)(love x ((def2 x) I (and (wife (def2 x))
(possess (his3 x) (def2 x)))))
If the pronoun resolution module determines that the antecedent for his is Fred, then
the trigger LF form is modified as follows.
Example 37
Fred, loves his, wife.
</table>
<equation confidence="0.847234">
((defi) I (name (defi) Fred)), A(x)(love x ((def2 x) I (and (wife (def2 x))
(possess (his3 x) (def2 x))
(ora (= (his3 x) (defi))
(= (his3 x) x)))))
</equation>
<page confidence="0.749341">
438
</page>
<note confidence="0.558565">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.9581205">
Depending on the meaning selected for the pronoun his, there are two different read-
ings for the elided sentence.
If his refers indirectly to Fred, the intended meaning for the trigger sentence is
shown in 38.
</bodyText>
<equation confidence="0.548014625">
Example 38
Fred, loves his1 wife.
((defi) I (name (defi) Fred)), A(x)(love x ((def2 x) I (and (wife (def2 x))
(possess (his3 x) (def2 x))
(his3 x) x))))
Simplification:
((defi) I (name (defi) Fred)), A(x)(love x ((def2 x) I (and (wife (def2 x))
(possess x (def2 x)))))
</equation>
<bodyText confidence="0.447535333333333">
Notice that def2&apos;s restriction contains a free variable x and so its argument list is
unchanged by argument simplification. Hence, the representation of the VP in 38
is used to derive the sloppy reading of the elided sentence shown in 39.
</bodyText>
<equation confidence="0.638949625">
Example 39
George does too. (George loves George&apos;s wife.)
((clefs) I (name (def5) George)), A(x)(love x ((def2 x) I (and (wife (def2 x))
(possess (his3 x) (def2 x))
(= (his3 x) x))))
Simplification:
((clefs) I (name (def5) George)), A(x)(love x ((def2 x) I (and (wife (def2 x))
(possess x (def2 x)))))
</equation>
<bodyText confidence="0.99175825">
Notice that the function def2 denotes a different individual in the trigger and elided
sentences, depending on the value of x.
On the other hand, suppose that his refers directly to Fred. Then the intended
meaning of the trigger sentence is shown in 40.
</bodyText>
<equation confidence="0.891329875">
Example 40
Fred, loves his, wife.
((defi) I (name (defi) Fred)), A(x)(love x ((def2 x) I (and (wife (def2 x))
(possess (his3 x) (def2 x))
(= (his3 x) (defi)))))
Simplification:
((defi) I (name (defi) Fred)), A(x)(love x ((def2 x) I (and (wife (def2 x))
(possess (defi) (def2 x)))))
</equation>
<footnote confidence="0.847039333333333">
Notice that once the pronoun function is replaced by (defi), the restriction of (def2 x)
contains no free variables except those in the argument list of the function itself. Hence
we update the LF as follows.
</footnote>
<page confidence="0.987548">
439
</page>
<table confidence="0.768464">
Computational Linguistics Volume 18, Number 4
Example 41
Fred, loves his, wife.
((defi) I (name (def.&apos;) Fred)), A(x)(and (love x ((def2 x) I (and (wife (def2 x))
(possess (his3 x) (def2 x))
(= (his3 x) (defi)))))
(= (def2 (deft)))
Simplification:
((defi) I (name (def) Fred)), A(x)(and (love x (deft)) (wife (def4)) (possess (deli) (def4))
Using this representation of the VP, we derive the strict reading of the elided sentence.
Example 42
George does too. (George loves Fred&apos;s wife.)
</table>
<equation confidence="0.9581655">
((clefs) I (name (clefs) George)), A(x)(and (love x ((def2 x) I (and (wife (def2 x))
(possess (his3 x) (def2 x))
(= (his3 x) (defi)))))
(= (def2 x) (def4)))
Simplification:
((clefs) I (name (clefs) George)), A(x)(and (love x (def4)) (wife (def4)) (possess (defi) (def4))
</equation>
<bodyText confidence="0.998031363636364">
Notice that (def4) denotes the same individual in the trigger and elided sentences.
Hence, our general LF representation of definite NPs allows us to derive both the
sloppy and strict readings of the elided sentence.
We have introduced a composite representation for definite NPs along with a
way to update its meaning as more information becomes available. Our approach has
several strengths: It is consistent with the three computational constraints discussed
in Section 1; it handles a variety of definite behaviors with one mechanism; and it
provides useful constraints on intrasentential antecedents for definites (in addition
to traditional constraints like number and gender agreement) and a more flexible
mechanism than c-command for determining whether a definite noun phrase is a
possible antecedent for an anaphoric expression.
</bodyText>
<sectionHeader confidence="0.962068" genericHeader="method">
5. Indefinites in Logical Form
</sectionHeader>
<bodyText confidence="0.9981595">
In this section, we develop an initial LF representation for singular indefinite NPs and
provide a mechanism for updating it once additional information is processed.
</bodyText>
<subsectionHeader confidence="0.994526">
5.1 Indefinites: Linguistic Behavior and Initial Representation
</subsectionHeader>
<bodyText confidence="0.978515">
Singular indefinite NPs share many behaviors with singular definites, including the
fact that the final meanings of both are affected by the meanings of embedded NPs.
However, unlike definites, the meanings of indefinites are affected by negation, and
so they cannot be initially represented as functions in LF. For example:
</bodyText>
<subsectionHeader confidence="0.493514">
Example 43
</subsectionHeader>
<bodyText confidence="0.411327">
Fred did not see a woman.
Possible Meanings:
</bodyText>
<listItem confidence="0.7144045">
a. 3x: (woman x) Not(see Fred x)
b. Not 3x: (woman x) (see Fred x) Vx: (woman x) Not(see Fred x)
</listItem>
<bodyText confidence="0.9364785">
Whenever there is negation in a sentence containing an indefinite, two meanings of
the sentence are possible. If the negation does not have scope over the indefinite,
</bodyText>
<page confidence="0.978664">
440
</page>
<note confidence="0.735484">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.899412647058824">
then the indefinite is represented as an existential outside the scope of the negation
as shown in 43a (and could be represented as a function). In contrast, if the negation
has scope over the indefinite, then it has scope over the existential operator making
it equivalent to a universal (as shown in 43b). If we represent the indefinite in 43 as
a function before deciding whether the negation has scope over it, then the second
reading could not be expressed. Thus, we represent indefinites initially as existentially
quantified and restricted variables, as in Example 44.
Example 44
Fred saw a dog.
((defi) I (name (defi) Fred)), A(x)(saw x Hy: (dog y) yl)
To provide a scope-neutral form, we place the quantified term [2y: (dog y) y] directly
into the predicate-argument structure (see Appendix A). This initial representation
of the indefinite is provided using only syntactic information and knowledge about
how to map arguments into the predicate-argument structure, obeying the modularity
constraint. Once quantifier scoping information is available, we update the sentence&apos;s
LF, using a mechanism that also allows us to account for several interesting indefinite
behaviors.
</bodyText>
<subsectionHeader confidence="0.978752">
5.2 Indefinites: Updating the Initial Representation
</subsectionHeader>
<bodyText confidence="0.998291">
An approach that models indefinites solely as existentially quantified variables cannot
account for the variety of behaviors of indefinite NPs, since quantifiers cannot have
scope over variables in other sentences. This accounts for the fact that the quantified
NP cannot be the antecedent for the pronoun she in: The boy kissed every girl. She slapped
him. However, in The boy kissed a girl. She slapped him, the antecedent for she can be a girl.
A similar problem arises in VPE. If the trigger VP contains a pronoun whose
antecedent is an indefinite subject, two possible meanings for the elided sentence are
possible, as in Example 45.
</bodyText>
<subsectionHeader confidence="0.786363">
Example 45
</subsectionHeader>
<bodyText confidence="0.9969245">
A postman, saw his, dog.
A policeman] did too.
</bodyText>
<listItem confidence="0.49503">
Possible Meanings: a. A policeman saw the postman&apos;s dog. (strict reading)
b. A policeman saw his own dog. (sloppy reading)
</listItem>
<bodyText confidence="0.9989129">
When the antecedent for his is a postman, the elided sentence has two possible mean-
ings, but a quantified representation for the indefinite can only account for one of
them.i° Given that the antecedent for his is a dog, there are two possible representa-
tions for the trigger VP. The pronoun function is either replaced with the lambda or
the existential variable corresponding to the subject. If we use the first representation
of the pronoun, we are able to derive the sloppy reading. But, if we use the second,
then the meaning for the elided sentence would contain an unbound variable because
existential quantifiers do not have scope across sentences.
Donkey sentences (originally noticed by Geach [1962]) suffer a similar difficulty. A
typical donkey sentence is Every miner who owns a donkey, beats it,. Though the existential
</bodyText>
<footnote confidence="0.673213">
10 This example is in sharp contrast with Every postmani saw hisi dog. Every policeman did too. The elided
sentence can only mean Every policeman saw his own dog.
</footnote>
<page confidence="0.985354">
441
</page>
<note confidence="0.521189">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.9973096875">
operator corresponding to a donkey cannot have scope over the pronoun it, the NP a
donkey can be its antecedent. In contrast, in Every miner who brushed every donkey beat it,
the NP every donkey cannot be the antecedent for it.
These examples indicate that our initial representation of a singular indefinite is
insufficient for modeling the variety of linguistic behaviors exhibited. However, the
existential operator is only necessary until we can determine that the indefinite is not
in the scope of a negation and can decide what has scope over the indefinite. After
this information is available, it is desirable to transform the initial representation into
a form more compatible with the behaviors of indefinites, especially if that transfor-
mation refines the meaning of the indefinite (conforming with the formal consistency
constraint). Our solution is to eliminate the existential operator and replace the exis-
tential&apos;s variables with skolem functions.
Once scoping is specified, each existentially quantified variable is replaced by a
function whose argument list consists of all of the universally quantified variables that
have scope over the existential operator. To demonstrate how existential variables are
replaced by functions during skolemization, consider Example 46.
</bodyText>
<figure confidence="0.715058857142857">
Example 46
Some man saw every woman.
Possible Meanings:
la. (man x) Vy: (woman y) (see x y)
b. Vy (and (man (indef34)) (if (woman y) (see (indef34) y)))
2a. Vy: (woman y) a: (man x) (see x y)
b. Vy (if (woman y) (and (man (indef35 y)) (see (indef35 y) y)))
</figure>
<bodyText confidence="0.997420714285714">
There are two meanings for the sentence in 46, indicated in la and 2a, and these mean-
ings are preserved when the existential variables are replaced by skolem functions, as
shown in lb and 2b.
When an indefinite is represented as an existentially quantified variable and is
not in the scope of negation, it can be replaced by an indefinite function. However,
additional information about the indefinite noun phrase must be gathered before such
a transformation is performed. We need to:
</bodyText>
<listItem confidence="0.974594266666667">
1. Determine the antecedents of embedded pronouns and anaphoric
definites.
2. Determine the meanings of embedded definite and indefinite NPs.
3. Determine whether any embedded universally quantified NPs, not
contained in a relative clause, distribute over the indefinite. (The
operators that bind the variables contained in the restriction of the
existential operator, but that are not themselves contained in the
restriction, necessarily have scope over the existential operator, as in the
case of definite functions).
4. Determine whether quantifiers within the sentence have scope over the
indefinite, even if those quantifiers do not bind a variable contained in
the indefinite&apos;s restriction. (The final meaning of an indefinite is affected
by quantifiers that could never affect the meaning of a definite. Consider
the sentence, His mother saw every boy. Despite the fact that his needs an
antecedent, syntactic constraints eliminate every boy from the list of
</listItem>
<page confidence="0.988696">
442
</page>
<note confidence="0.738662">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.834363363636364">
possible candidates. Hence, his mother acts as a constant in the sentence.
Compare this sentence with A friend of his saw every boy. Despite the fact
that the antecedent for his cannot be every boy, a friend of his could still be
in the scope of every boy).
5. Determine whether lambda operators have scope over the indefinite,
even if they do not bind a variable contained in the indefinite&apos;s
restriction. (We discuss why lambda operator scope over an indefinite is
an issue for handling VPE in the next section).
To demonstrate how much information is necessary to determine the final meaning
of an indefinite NP, consider the initial representation for the sentence Every man showed
every boy a picture of his mother.
</bodyText>
<equation confidence="0.690710428571429">
Example 47
Every man showed every boy a picture of his mother.
)(show y l3w: (and (picture w)
(of w ((clefi w y z) I (and (mother (defi w y z))
(possess (his2 w y z)
(defi w y z)))))) wl
[Vz: (boy z) z])
</equation>
<bodyText confidence="0.995890666666667">
Before determining the final meaning of the indefinite, we must determine the meaning
of the definite NP his mother and decide whether Vx, Vz, or A(y) has scope over it. If
the antecedent for his is every boy, the updated LF is shown in Example 48.
</bodyText>
<subsectionHeader confidence="0.740634">
Example 48
</subsectionHeader>
<bodyText confidence="0.904753333333333">
Every man showed every boy a picture of his mother.
Vx: (man x) x, A(y)(show y l3w: (and (picture w)
(of w ((deft w y z) I (and (mother (defi w y z))
</bodyText>
<equation confidence="0.94602325">
(possess (his2 w y z)
(defi w y z))
(= (his2 w y z) z))))) w]
[&apos;viz: (boy z) z1)
</equation>
<bodyText confidence="0.972278">
Since the restriction on (defi w y z) contains only the unbound variable z, we replace it
with a function of z.
</bodyText>
<equation confidence="0.7312278">
Example 49
Every man showed every boy a picture of his mother.
Vx: (man x) x, A(y)(and (show y l3w: (and (picture w)
(of w ((defi w y z) I (and (mother (defi w y z))
(possess (his2 w y z)
(defi w y z))
(= (his2 w y z) z))))) wl
[Vz: (boy z) a
(= (defi w y z) (def3 z))
Because z is unbound in the restriction of the existential, Vz must have scope over
</equation>
<bodyText confidence="0.750179666666667">
3w; however, we must still determine whether Vx or A(y) also have scope over the
existential. If they do not, we update the LF by replacing the existential variable w
with a function of z.
</bodyText>
<page confidence="0.997778">
443
</page>
<figure confidence="0.556967">
Computational Linguistics Volume 18, Number 4
Example 50
Every man showed every boy a picture of his mother.
</figure>
<equation confidence="0.973107222222222">
Vx: (man x) x, A(y)(and (show y ((indef4 z) I (and (picture (indef4 z))
(of (indef4 z)
((defl (indef4 z) y z) I
(and (mother (clef, (indef4 z) y z))
(possess (his2 (indef4 z) y z)
(clef, (indef4 z) y z))
(= (his 2 (indef4 z) y z) z))))))
EVz: (boy z) zl)
(= (clef]. (indef4 z) y z) (def3 z))
</equation>
<bodyText confidence="0.999847523809524">
By replacing the existential variables with a function of z, we indicate that only Vz
has scope over the existential. This final meaning is compatible with the initial rep-
resentation of the indefinite in 47, but we have constrained the initial meaning with
additional information.
There are several advantages gained by replacing existential variables by functions.
First, it provides a way to indicate quantifier scoping in a representation containing
only universal and existential quantifiers. Second, the method of indicating scope
is similar to Allen&apos;s (1987) method since we are not limited to expressing scope as a
linear string of operators. Third, universal variables cannot be replaced with functions.
Hence, skolemization may be useful for modeling the differences between universals
and indefinites in English. Fourth, once quantifier scoping information is available, the
replacement of existential variables with functions is a meaning preserving operation
as required by the formal consistency constraint. Finally, a functional representation
for an indefinite allows us to account for several behaviors that are poorly modeled
using an existential variable representation of indefinites alone.
The functional representation for an indefinite provides a mechanism for deter-
mining whether a singular indefinite can be the antecedent for a singular pronoun in
a subsequent sentence. Consider the example: Every woman saw a dog. It bit the tallest
woman. The antecedent for the pronoun it can be a dog only if the universal operator
corresponding to every woman does not have scope over the existential. Consider the
initial representation of the first sentence.
</bodyText>
<subsectionHeader confidence="0.877527">
Example 51
</subsectionHeader>
<bodyText confidence="0.9763845">
Every woman saw a dog.
Vx: (woman x) x, A(y)(see y [az: (dog z) z1)
Now, suppose that the universal has scope over the indefinite, then the LF would be
updated as follows.
</bodyText>
<subsectionHeader confidence="0.773422">
Example 52
</subsectionHeader>
<bodyText confidence="0.949626">
Vx: (woman x) x, A(y)(see y ((indefm x) I (dog (indef34 x))))
A consequence of this scoping decision is that a dog cannot be the antecedent for it,
without causing a violation of the formal consistency constraint.&apos; On the other hand,
</bodyText>
<footnote confidence="0.985067333333333">
11 Even if we construct a discourse entity for a dog, following Webber (1978), the discourse entity for
(indef34 x) would denote a set of dogs, and the pronoun resolution module would not allow a plural
entity to be the antecedent for a singular pronoun.
</footnote>
<page confidence="0.996111">
444
</page>
<note confidence="0.696788">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.979008">
if the universal does not have scope over a dog, then the LF for the first sentence
(shown in 51) is updated as shown in 53.
</bodyText>
<equation confidence="0.4550625">
Example 53
Vx: (woman x) x, A(y)(see y ((indef37) I (dog (indef37))))
</equation>
<bodyText confidence="0.999823555555556">
Because a dog is represented as a function with no arguments, it is compatible with
the pronoun function representing it.&apos;
The representation is also useful for handling the donkey sentence Every miner who
owns a donkey, beats it,. The antecedent for it is a donkey, yet in English, a quantified NP
contained in a relative clause attached to an NP cannot bind a pronoun outside of that
clause. Hence, it cannot be bound by the existential quantifier corresponding to a don-
key. However, once the meaning of the indefinite has been determined it may become
formally consistent with the pronoun function. Consider the initial representation of
this sentence.
</bodyText>
<subsectionHeader confidence="0.737784">
Example 54
</subsectionHeader>
<bodyText confidence="0.988304916666667">
Every miner who owns a donkey beats it.
Vx: (and (miner x) x, A(y)(own y [az: (donkey z) z[)) x, A(w)(beat w (it58 w))
The pronoun it is represented as a function of w only and cannot be equated with
z. However, by replacing the existential term in the relative clause with a functional
term, we will be able to assert that the antecedent for it is a donkey.
To replace the variables corresponding to the existential operator with a function,
we must determine whether the existential quantifier is in the scope of negation.
Assuming that the negation introduced by the restriction on the universal operator
does not have scope over a donkey, we replace the existential term with a function
whose arguments are the variables corresponding to operators that have scope over it.
If only Vx has scope over the existential (i.e., )(y) does not have scope), we can assert
the anaphoric relationship between it and a donkey.
</bodyText>
<subsectionHeader confidence="0.376638">
Example 55
</subsectionHeader>
<bodyText confidence="0.694757">
Every miner who owns a donkey, beats iti.
Skolemization:
Vx (if (and (miner x) x, A(y)(own y ((indef22 x) I (donkey (indef22 x))))) x, A(w)(beat w (itss w)))
Pronoun Update:
Vx (if (and (miner x) x, )l(y)(own y ((indef22 x) I (donkey (indef22 x)))))
x, A(w)(and (beat w (it,58 w)) (= (it5s w) (indef22 x))))
Since (it58 w) is consistent with a function of x (because A(w) abstracts the variable x),
we can assert the anaphoric relationship, as shown above.13
It is important to note that the initial type of a quantified NP determines whether
skolemization can make it accessible to a pronoun function whose argument list does
not contain that NP&apos;s variable. If an NP is initially represented as a universal, then
unless the universal variable is included in the argument list of the pronoun, it cannot
be the antecedent for that pronoun even if it is in the scope of negation. For example,
</bodyText>
<page confidence="0.541283">
12 It could also be used to create a singular discourse entity compatible with the singular pronoun.
</page>
<tableCaption confidence="0.766306666666667">
13 Our solution has much in common with Webber&apos;s (1978) parameterized individuals. Webber introduces
a parameterized individual (which looks much like an indefinite function) as the antecedent for it.
However, she does not modify the initial representation of the indefinite.
</tableCaption>
<page confidence="0.99597">
445
</page>
<note confidence="0.48813">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.89442075">
in Every miner who did not see every donkey beat it, the antecedent for it cannot be not every
donkey. In contrast, so long as an indefinite remains an existential, even if it cannot
bind the pronoun, it may become accessible to the pronoun once we determine its
precise behavior and convert it into a functional term.
</bodyText>
<subsectionHeader confidence="0.977546">
5.3 Indefinites and Verb Phrase Ellipsis
</subsectionHeader>
<bodyText confidence="0.904558090909091">
The representation of an indefinite as a function is also very useful for modeling
indefinite subjects in VPE. Consider Example 45 again. By converting existentially
quantified variables into functions, we are able to provide the strict meaning for the
elided sentence without creating an ill-formed representation; we simply replace the
subject&apos;s existential variables with a skolem constant (assuming it is not in the scope
of another quantifier).
To properly model indefinite NPs contained in a trigger VP for VPE, we must con-
sider whether the lambda operators in a VP representation have scope over indefinites
represented as existentially quantified variables. Consider Example 56.
Example 56
Fred saw a dog.
George did too.
Possible Meanings: 1. George saw the same dog that Fred saw.
2. George saw a different dog than Fred saw.
When an indefinite NP occurs in the trigger VP, the elided sentence is ambiguous.
This is in contrast to Example 32 discussed in Section 4.4: Fred saw the dog. George did
too, in which the elided sentence can only mean George saw the same dog that Fred saw. By
ignoring lambda operators when converting existential variables to skolem functions,
we would be unable to provide the second meaning for the elided sentence in this
example.
To illustrate this point further, consider how we determine the three meanings of
the elided sentence in Example 57.
</bodyText>
<subsectionHeader confidence="0.443886">
Example 57
</subsectionHeader>
<bodyText confidence="0.9883205">
Fred, saw a friend of his,.
George, did too.
</bodyText>
<listItem confidence="0.889315333333333">
Possible Meanings: 1. George saw the same friend of Fred&apos;s.
2. George saw a different friend of Fred&apos;s.
3. George saw a friend of George&apos;s.
</listItem>
<bodyText confidence="0.877344285714286">
The initial representation for the trigger sentence is shown in 58.
Example 58
Fred saw a friend of his.
((def97) I (name (def97) Fred)), A(x)(see x [3y: (and (friend y) (possess (his% x) y)) yl)
Given that the antecedent for his is Fred, this LF is updated as shown in 59.
Example 59
Fred, saw a friend of his,.
</bodyText>
<equation confidence="0.973493333333333">
((def97) I (name (def97) Fred)), A(x)(see x Hy: (and (friend y)
(possess (his98 x) y)
(ora (= (his% x) (= (his98 (def97)))) yl)
</equation>
<page confidence="0.82117">
446
</page>
<note confidence="0.57544">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.989096">
Now, before converting the existential into its functional form, we must determine
which meaning of the pronoun is intended.
Suppose that the pronoun his refers indirectly to the subject; then, the trigger LF
is refined as shown in 60.
</bodyText>
<subsectionHeader confidence="0.498918">
Example 60
</subsectionHeader>
<bodyText confidence="0.537307">
Fred, saw a friend of his,.
</bodyText>
<equation confidence="0.950182">
((def97) I (name (def97) Fred)), A(x)(see x Hy: (and (friend y)
(possess (his98
(= (his98 x)) yl)
</equation>
<bodyText confidence="0.984529">
Since A(x) must have scope over the existential to bind the variable x in its restriction,
the existential must be a function of that variable and can be used to provide the third
meaning of the elided sentence in 57, as shown in 61.
</bodyText>
<equation confidence="0.985770111111111">
Example 61
Trigger: Fred, saw a friend of his,.
((def97) I (name (def97) Fred)), A(x)(see x ((indef99 x) I (and (friend (indef99 x))
(possess (his98 x) (indef99 x))
(= (his98 x) x))))
Ellipsis: George did too. (George saw a friend of George&apos;s.)
((defioo) I (name (defioo) George)), A(x)(see x ((indef99 x) I (and (friend (indef99 x))
(possess (his98 x) (indef99 x))
(= (his98 x) x))))
</equation>
<bodyText confidence="0.9983775">
In contrast, assume that the pronoun his refers directly to Fred. This choice is reflected
in the LF shown in 62.
</bodyText>
<subsectionHeader confidence="0.709046">
Example 62
</subsectionHeader>
<bodyText confidence="0.837437">
Fred, saw a friend of his,.
</bodyText>
<equation confidence="0.97569625">
(and (frien
((def97) I (name (def97) Fred)), A(x)(see x [3y: d y)
(possess (his98 x)
(= (his98 x) (def97))) y])
</equation>
<bodyText confidence="0.999956333333333">
We must still determine whether A(x) has scope over the existential. If it does, we
replace the existential variables with a function of x as shown in 63, allowing us to
provide the second reading of the elided sentence in 57.
</bodyText>
<equation confidence="0.950465444444445">
Example 63
Trigger: Fred, saw a friend of his,.
((def97) I (name (def97) Fred)), A(x)(see x ((indefloo x) I (and (friend (indefwo x))
(possess (his98 x) (indefloo x))
(= (his98 x) (def97)))))
Ellipsis: George did too. (George saw a different friend of Fred&apos;s.)
((defioo) I (name (defioo) George)), A(x)(see x ((indefloo x) I (and (friend (indefloo x))
(possess (his98 x) (indefloo x))
(= (his98 x) (def97)))))
</equation>
<bodyText confidence="0.922692">
Finally, if A(x) does not have scope over the existential, then we replace the existential
variable with a skolem constant, allowing us to provide the first reading of the elided
sentence in 57.
</bodyText>
<page confidence="0.993582">
447
</page>
<figure confidence="0.894293">
Computational Linguistics Volume 18, Number 4
</figure>
<figureCaption confidence="0.429007">
Figure 3
</figureCaption>
<bodyText confidence="0.320183">
Flow of control for VPE program.
</bodyText>
<equation confidence="0.767235777777778">
Example 64
Trigger: Fred, saw a friend of his,.
((def97) I (name (def97) Fred)), A(x)(see x ((indef102) I (and (friend (indefio2))
(possess (his% x) (indefio2))
(= (his% (def97)))))
Ellipsis: George did too. (George saw the same friend of Fred&apos;s.)
((defioo) I (name (defioo) George)), A(x)(see x ((indefio2) I (and (friend (indefio2))
(possess (his% x) (indefi02))
(--= (his% x) (def97)))))
</equation>
<bodyText confidence="0.9987178">
Hence, we are able to provide all three readings for the elided sentence in 57.
We have described an initial representation for indefinite NPs along with a way to
update the representation after more information becomes available. Our approach is
consistent with the three computational constraints discussed in Section 1 and models
a variety of indefinite behaviors.
</bodyText>
<sectionHeader confidence="0.977107" genericHeader="method">
6. Implementation
</sectionHeader>
<bodyText confidence="0.999640571428571">
In this section, we describe the operation of a program to generate the meanings for
sentences that contain intersentential VPE. This implementation demonstrates that the
LF described in this paper can be automatically generated during sentence parsing and
that the intended meaning of the LF can be determined through a series of machine
guided steps (see Figure 3).
The program parses the sentences in the following example, starting with the
trigger sentence.
</bodyText>
<figure confidence="0.915808464285715">
Prompt user to
select trigger LF
from the stack
Prompt user to
select LF
( Start
•
Parse next
sentence and
generate LFs
Push LF on
stack
no
Select trigger VP
and determine
elided VP&apos;s meaning
Determine
trigger &apos;s
meaning
•
no
448
Mary P. Harper Ambiguous Noun Phrases in Logical Form
Example 65
Fred, saw (his, mother&apos;s)/ picturek.
George/ did too.
Possible Meanings: 1. George saw Fred&apos;s mother&apos;s picture.
2. George saw George&apos;s mother&apos;s picture.
</figure>
<bodyText confidence="0.9828735">
If there are multiple parses for a sentence, there will be multiple LFs with each LF
corresponding to a different parse tree. In such a case, the user is prompted to select
the intended parse (and hence, the intended LF). The trigger sentence in Example 65
has a single parse tree and the parser produces the single LF shown in 66.
</bodyText>
<equation confidence="0.936978125">
Example 66
Fred saw his mother&apos;s picture.
((defi) I (name (defi) Fred),
A(y)(see (subject y) (object ((clef,&apos; y) I (and (picture (def4 y))
(possess ((def3 y) (and (mother (def3 y))
(possess (his2 y)
(def3 y))))
(clef4 y))))))
</equation>
<bodyText confidence="0.982727066666667">
In this program, we label the roles of the noun phrases to keep track of logical subjects
and objects in order to prevent a passive voice sentence from becoming the trigger for
an active voice sentence (or vice versa). We label the subject&apos;s lambda variable as the
logical subject for a sentence with active voice or as the logical object for a sentence
with passive voice. We do not specify case roles like agent in our LF because their
determination may require contextual information. Also, the case role of a subject need
not be the same in the trigger and elided sentences, e.g., Fred hit the window. The hammer
did too. The subject in the first sentence is probably filling the role of agent, whereas
the subject of the second fills the role of instrument.
Because our program is designed to provide meanings of sentences with VPE, it
examines each LF provided by the parser to see if it contains an elided VP. If it does
not contain one, then additional processing of the potential trigger sentence is put off
until the final meaning of the sentence is needed. Ideally, processing should be done
as information becomes available; however, for the purpose of this implementation,
it is conceptually simpler to refine the trigger LF only when its meaning must be
determined to disambiguate an elided VP. Hence, the LF in 66 is saved on a stack of
recently processed sentences.
To determine the meaning of an elided sentence (a process depicted in Figure 4),
the program must first locate the trigger sentence. (The fact that the representation
contains an elided VP is indicated by the dummy predicate in 67.)
Example 67
George did too.
((def5) I (name (def5) George)), A(w)(dummy33 (subject w))
To accomplish this, the program has the user select the LF for the trigger sentence from
the LFs stored on the stack (assume the user selects the LF in 66). Since the meaning
of the trigger sentence is underspecified, the meaning of the elided sentence is also
ambiguous. Thus, the program must next determine the trigger sentence&apos;s meaning.
To do this, the program must find antecedents for all of the pronoun functions. Once
the pronouns have antecedents, it handles all definites, and then all quantified NPs.
This sequence occurs unless the antecedent for a pronoun is an NP in the sentence
</bodyText>
<page confidence="0.99761">
449
</page>
<table confidence="0.966822285714286">
Computational Linguistics Volume 18, Number 4
Elided Sentence: George did too. 4&apos; ((def.5) I (name (d4) George)), X(w)(dumtnyn (subject w))
Find Trigger
Trigger Sentence: Fred saw his mother&apos;s picture.
replace dummy
lambda function
Fred&apos; (def5) saw his mother&apos;s picture (Y)(see (subject y) (object -.))
his mother&apos;s picture Oda y)
2 necessary variables: y
his mother&apos;s 12 (def3 Y)
Inecessary variables: y
his — • rY) • replace pronoun
function with y
User Input: y
</table>
<figureCaption confidence="0.927876">
Figure 4
</figureCaption>
<bodyText confidence="0.9926354">
Evaluation of the elided sentence for Example 65.
that is not immediately compatible with the pronoun, in which case, the program
attempts to refine the NP&apos;s meaning to determine whether it is formally consistent
with the pronoun. In our example, the program begins disambiguating the trigger
sentence by searching for antecedents of the pronoun function (his2 y). The user is
asked to determine whether the antecedent occurs in another sentence. Assuming it
doesn&apos;t, the pronoun compatibility routine prompts the user to select an antecedent
NP from the sentence, using information about the type and location of the pronoun
to eliminate impossibilities.&apos; If a possible antecedent is a definite or indefinite, even if
it is not formally consistent with a pronoun function, it may still become compatible
with the pronoun once its meaning is determined.
To refine the meaning of definite noun phrases with embedded NPs, the program
must first determine the meanings of embedded pronouns, definites, and indefinites,
and then determine whether any embedded quantifiers have scope over the definite.
For example, to determine the meaning of (def3 y), the meaning of (his2 y) must be
determined. If the user selects Fred as the antecedent, then the program also prompts
the user to select either the lambda variable y or (defi). If the user picks the lambda
variable (as shown in Figure 4) then the variable replaces the pronoun function in
LF. Given this choice, y is a necessary argument for (def3 y), so the definite cannot be
anaphoric and cannot be further simplified. Since y is a necessary argument for (def4
y), there is no modification of that function.
The program continues processing the meanings of the noun phrases in the sen-
tence until the meanings of all constituent NPs are determined (or until an error
occurs). Assume, in our example, that the program produces the following refined LF
for the trigger sentence in Example 68.
</bodyText>
<footnote confidence="0.7318885">
14 If the pronoun is reflexive, its antecedent must occur in the same clause and cannot be embedded in an
NP. On the other hand, if the pronoun is not reflexive, its antecedent cannot be in the same clause
unless the pronoun or its antecedent is embedded in another noun phrase. Finally, potential
antecedents must be formally consistent with the pronoun function.
</footnote>
<note confidence="0.481893">
George saw George&apos;s mother&apos;s picture.
</note>
<page confidence="0.920203">
450
</page>
<equation confidence="0.563606875">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
Example 68
Fred, saw his, mother&apos;s picture.
((defi) I (name (defi) Fred),
A(y)(see (subject y) (object ((def4 y) I (and (picture (def4 y))
(possess ((def3 y) I (and (mother (def3 y))
(possess y (def3 y))))
(def4 y))))))
</equation>
<bodyText confidence="0.999757">
In the event that the trigger sentence contains more than one VP, the program
prompts the user to select the trigger VP. Since there is only one VP in 68, the program
checks it to ensure that it contains no free variables,&apos; is compatible with the voice of the
elided VP, and that a trigger sentence with more than one pronoun whose antecedent is
the same syntactic subject obeys the multiple pronoun constraint discussed in Harper
(1990). Notice that the VP in 68 contains no free variables and is compatible in voice
to the elided VP in 67. Hence, the program replaces the elided VP with the trigger VP
as shown in 69, and the meaning of the elided sentence is determined.
</bodyText>
<subsectionHeader confidence="0.448559">
Example 69
</subsectionHeader>
<bodyText confidence="0.373964">
Sentence: George did too.
Meaning: George saw George&apos;s mother&apos;s pict ure.
</bodyText>
<equation confidence="0.8256664">
((def7) I (name (def7) George)),
A(y)(see (subject y) (object ((clef,&apos; y) I (and (picture (def4 y))
(possess ((def3 y) I (and (mother (def3 y))
(possess y (def3 y))))
(def4 y))))))
</equation>
<sectionHeader confidence="0.963487" genericHeader="method">
7. Related Work
</sectionHeader>
<bodyText confidence="0.999930636363636">
Other researchers have developed an intermediate representation for a sentence from
syntactic information (Pollack and Pereira 1988; Alshawi and van Eijck 1989). These
approaches agree that in order to determine the meaning of a sentence, it is useful
to build a partial meaning that is augmented once contextual information becomes
available. These approaches, however, use a different scheme for indicating the final
meaning of a sentence and do not handle VPE.
In the rest of this section, we review past representations of pronouns, definite
NPs, and indefinite NPs. We emphasize VPE research because it considers not only
the representation of sentences in general, but also the representation of trigger sen-
tences. Each approach is examined in the light of its modeling capability and our
computational constraints.
</bodyText>
<subsectionHeader confidence="0.999713">
7.1 Verb Phrase Ellipsis and Models of Pronouns
</subsectionHeader>
<bodyText confidence="0.999871">
Pronouns are often classified as either bound variable or referential pronouns (Sag
1976; Webber 1978; Reinhart 1983; Partee and Bach 1981), but the adequacy of this
dichotomy is questionable (as discussed in Section 3.1). Models of VPE must consider
not only pronouns in normal sentences but also pronouns in trigger sentences, and
must account for the ambiguity that arises when a pronoun&apos;s antecedent is the syntac-
tic subject of a trigger sentence. Sag (1976) and Webber (1978) handle this ambiguity by
introducing a rule to replace a pronoun whose antecedent is known to be the syntactic
</bodyText>
<footnote confidence="0.955933">
15 This program only deals with intersentential VPE. Hence, all variables in the trigger VP must be bound
in the VP, otherwise the elided sentence cannot receive a meaning. If we augment our approach to
handle antecedent-contained ellipsis, we would have to allow variables bound by an operator outside
of the VP but inside the meaning of the sentence.
</footnote>
<page confidence="0.991574">
451
</page>
<note confidence="0.633909">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.99722175">
subject of a trigger sentence with the lambda variable corresponding to that subject.
They also assume that a pronoun whose antecedent is a nonsubject definite is neces-
sarily referential. But a problem arises when a pronoun&apos;s antecedent is a nonsubject,
nonreferential definite, as in Example 70.
</bodyText>
<subsectionHeader confidence="0.44742">
Example 70
</subsectionHeader>
<listItem confidence="0.839770625">
Trigger Sentence: Fred, showed (his, mother), her, dog.
Elided Sentence: George/ did too.
Possible Readings:
1. George showed Fred&apos;s mother Fred&apos;s mother&apos;s dog.
2. George showed George&apos;s mother George&apos;s mother&apos;s dog.
Impossible Readings:
3. *George showed George&apos;s mother Fred&apos;s mother&apos;s dog.
4. *George showed Fred&apos;s mother George&apos;s mother&apos;s dog.
</listItem>
<bodyText confidence="0.999456095238095">
Given the indices on the NPs, the elided sentence has meanings 1 and 2, shown in 70.
Sag&apos;s and Webber&apos;s models correctly allow meaning 1 and incorrectly allow meaning
3 at the expense of meaning 2 (because Fred&apos;s mother can be the only meaning for her
given their approach).
Reinhart (1983) also indicates that pronouns are either bound variables or refer-
ential, providing a syntactic rule for determining when a pronoun can be bound by
its antecedent: a pronoun can be bound by an NP if and only if it c-commands the
pronoun. Reinhart does not represent pronouns or definites as quantified terms, yet
she claims that when a pronoun&apos;s antecedent is a definite NP or a pronoun that c-
commands the pronoun, then the pronoun is bound by a lambda operator abstracting
the antecedent. At first glance, the idea of binding a pronoun with the lambda oper-
ator of its antecedent (given that the NP c-commands the pronoun) seems promising;
it can be used to handle Example 70. However, in English, a nonreferential definite
can be a pronoun&apos;s antecedent even if it does not c-command the pronoun, as in Every
man, gave the psychiatrist who cares for (his, mother), her, diary. Reinhart can only provide
the pronoun her with a referential meaning, which is inappropriate in this case. Also,
Reinhart assumes that the lambda variable is the only nonreferential representation
for a pronoun whose antecedent is a definite NP in the same sentence. If this is cor-
rect, then there should only be one meaning for a pronoun whose antecedent is a
nonreferential definite subject. However, consider Example 71 (which was inspired by
an example in Sells, Zaenen, and Zec [19891).
</bodyText>
<subsectionHeader confidence="0.907534">
Example 71
</subsectionHeader>
<bodyText confidence="0.81602">
Every man, believes that (his, wife), can defend herself, better than he, can.
Possible Meanings:
</bodyText>
<listItem confidence="0.999614333333333">
1. Every man believes that his wife can defend herself better than he can defend
himself.
2. Every man believes that his wife can defend herself better than he can defend her.
</listItem>
<bodyText confidence="0.988883428571429">
Reinhart&apos;s approach can only provide the first meaning of the elided sentence in 71.
This example suggests that pronouns can refer to definite subjects in two nonreferential
ways; lambda abstraction accounts for only one of them.
Partee and Bach (1981) attempt to dispense with LF in translating from syntax to
final interpretation, building on Montague&apos;s (1970) general theory (with a few modifi-
cations to get around the strict compositionality of that approach). All of the possible
representations for ambiguous sentences are simultaneously generated, avoiding the
</bodyText>
<page confidence="0.994809">
452
</page>
<note confidence="0.810063">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.999964612903226">
need for an intermediate level of representation. They directly provide model-theoretic
interpretations for sentences containing pronouns and elided VPs. In their approach,
null or elided VPs and pronouns are initially represented as variables. Pronouns are
represented as variables that are either bound by some operator or remain free within
the representation of the sentence. If a pronoun variable is unbound, it is assigned
some value by a context assignment function, that is, a function that maps the vari-
able to the individual that the pronoun denotes. In other words, pronouns are either
bound variables in this model or they are referential. An elided VP is represented as
a free property variable, typed to receive a value corresponding to a VP already in
discourse. It receives its interpretation in much the same way as an unbound pronoun
variable, with the exception that its antecedent must be available in linguistic con-
text. Once the value of the null VP is specified, the meaning of the elided sentence is
determined.
Bach and Partee point out a variety of examples for which their approach fails. Be-
cause there is no mechanism for ensuring that a pronoun bound in the trigger sentence
is bound by the same operator in the elided sentence, their approach provides a host of
impossible interpretations for elided sentences. For example, their approach provides
an impossible interpretation for the elided sentence in No man believes that Mary loves
him. But she does, given that no man is the antecedent for him and the meaning of the
null VP is loves him. Since the variable for him is unbound in the elided interpretation,
it must be assigned a value (e.g., Fred) by the context assignment function. Partee
and Bach also discuss examples in which an elided sentence receives an impossible
interpretation when a free pronoun variable in the trigger VP becomes accidentally
bound by a quantifier in the elided sentence. In addition to the problems pointed out
by Partee and Bach, others arise if we assume that definite NPs are quantified.
The above approaches also do not adhere to all of our computational constraints,
which are essential in any computer model. For example, Sag&apos;s (1976), Webber&apos;s (1978),
and Reinhart&apos;s (1983) approaches do not conform with the formal consistency con-
straint (because they replace pronoun strings with a variable to account for bound
variable meanings of a pronoun) and Partee and Bach&apos;s approach (1981) does not
conform with the compactness constraint.
</bodyText>
<subsectionHeader confidence="0.999939">
7.2 Past Representations of Definites and Indefinites
</subsectionHeader>
<bodyText confidence="0.999858">
In this section, we examine previous representations of definite NPs. In particular,
we review definite descriptions and definite quantifiers. We also examine some recent
work that departs from traditional representations of definite NPs (e.g., Heim [1982];
Roberts [1987]; Kamp [19811; Klein [19871).
</bodyText>
<subsubsectionHeader confidence="0.570268">
7.2.1 Definite Descriptions and Definite Quantifiers. Many researchers have attempted
</subsubsectionHeader>
<bodyText confidence="0.960766666666667">
to represent definite NPs using definite descriptions or definite quantifiers. Russell
(1971) introduced definite descriptions to capture the meaning of definite NPs like the
dog in Example 72.
</bodyText>
<subsectionHeader confidence="0.953124">
Example 72
</subsectionHeader>
<bodyText confidence="0.8995955">
The dog barked.: (barked (tx)(dog x))
which means:
Ax (and (Dog x) ; The dog exists.
Vy ((dog y) 4- x=y) ; It is the one-and-only dog.
</bodyText>
<equation confidence="0.603219">
(barked x)) ; It barked.
</equation>
<page confidence="0.997137">
453
</page>
<note confidence="0.636561">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.989392647058824">
The definite description, (a)(dog x), which stands for the object x such that the property (dog
x) is true names a unique object, and hence, is translated into the formula, 3x (and (dog x)
Vy ((dog y) 4-+(= x y))). Notice three important features of the meaning of the sentence
in Example 72: the dog described by the definite NP is assumed to exist, is assumed
to be unique, and fills some role in the sentence.
Definite descriptions suffer from several problems. First, there is no role speci-
fied for the effect of context on the uniqueness statement (a problem noted by many
people, including Allen [1987] and Hintikka and Kulas [19851). For example, the dog
in 72 is described as the-one-and-only the dog, regardless of context. Second, definite
descriptions do not adequately model anaphoric definites (as noted by Hintikka and
Kulas [1985]), which need not be unique and seem to adapt to the behavior dictated
by their antecedents, as in Every boy, saw (his, dog), before the beast, saw him,. To cover
this example, the definite description for the beast could be replaced by some value
consistent with the representation of its antecedent, but not without violating the for-
mal consistency constraint, or another representation for anaphoric definites could be
devised, but this might violate our compactness constraint. Another difficulty involves
the representation of Bach—Peters sentences, like (The boy who wrote herd, kissed (the girl
who loved himi),, which cannot be represented without infinite recursion (as noted by
Hintikka and Kulas [1985]).
Other researchers have represented definites using the quantificational meaning
of a definite description directly (e.g., Webber [1983] and Montague [1970]). While
an in-place definite description simply fills an argument slot in a predicate-argument
structure representing the sentence, a quantifier scopes an open sentence. For example,
the sentence, The dog barked, could be represented as shown in 73 (along with a short-
hand notation, where the quantifier 3! reads there exists a unique).
Example 73
The dog barked.
]x: (and (dog x) (Vy ((dog y) x=y))) (barked x)
Short hand notation: 3!x: (dog x) (barked x)
A quantificational representation for definites suffers from several problems. First,
as one might guess, it suffers from the same uniqueness problem that in-place definite
descriptions have.&apos; Second, definite noun phrases do not exhibit the same type of
quantifier scope ambiguity that other quantified NPs have. Compare the two sentences
below.
</bodyText>
<equation confidence="0.296718">
Example 74
</equation>
<listItem confidence="0.973740166666667">
a. Every man loves a woman.
1. Vx: (man x) 3y: (woman y) (loves x y)
2. 3y: (woman y) Vx: (man x) (loves x y)
b. Every man loves the woman.
1. Vx: (man x) 3!y: (woman y) (loves x y)
2. 3!y: (woman y) Vx: (man x) (loves x y)
</listItem>
<page confidence="0.600888">
16 Dowty, Wall, and Peters (1981) suggest a nice way to fix the uniqueness problem. They eliminate the
</page>
<bodyText confidence="0.921829">
one-and-only aspect of a definite quantifier by relativizing uniqueness to a context of utterance (much
as the domain of a universal NP must be relativized to a context of utterance). Though their solution
improves definite quantifiers, it does not eliminate the problem with definite anaphora.
</bodyText>
<page confidence="0.997473">
454
</page>
<note confidence="0.810453">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.987619304347827">
While the sentence in 74a has two different meanings and two representations, the sen-
tence in 74b expresses one meaning, but has two representations. Definite descriptions,
on the other hand, provide only a single representation for Every man loves the woman
while providing multiple representations for sentences with definite scope ambiguity,
as in The mechanic adjusted the steering wheel in each car. Third, as we have already dis-
cussed in Section 4.1, the strict reading of the elided sentence in Example 18 is difficult
for a quantified definite representation to account for. Finally, pronoun references to
definites are not constrained in the way that pronoun references to other quantified
NPs are. For example, when a quantifier is embedded in a relative clause attached
to a noun phrase, it cannot bind a pronoun outside of that clause, as in Fred gave the
psychiatrist who cares for every woman her diary. In contrast, the pronoun her in Every man
gave the psychiatrist who cares for his mother her diary can have his mother as its antecedent.
One might, like Hornstein (1984), assume that definites are quantified but have differ-
ent properties than universal quantifiers. However, this assumption does not correct
some of the problems of definite quantifiers, such as uniqueness or their inability to
model anaphoric definites.
Rather than modifying definite quantifiers, it seems appropriate to represent defi-
nites as functions and gain four immediate benefits. First, the representation of a def-
inite NP as a uniquely named function provides a mechanism for handling anaphoric
definite NPs. Second, because of this naming convention, definite functions are distinct
unless an equality is asserted between them. Third, since we represent each definite
as a function with a restriction and the restriction provides us with a mechanism for
determining the final meaning of the definite, we are able to capture the properties
of a definite description without neglecting anaphoric definites. Fourth, while defi-
nite quantifiers can violate the compactness and formal consistency constraints,&apos; our
approach does not.
7.2.2 Heim (1982) and Discourse Representation Theory. Another approach to mod-
eling definites was developed by Heim (1982) and Discourse Representation Theory
(DRT) researchers Kamp (1981), Roberts (1987), Klein (1987). A hallmark of these ap-
proaches is their ability to handle anaphoric definites in a reasonable way and the
commitment to modeling the meaning of a series of sentences in discourse, not just
individual sentences.
Heim (1982) treats definites and indefinites very similarly in her theory since both
can be referred to across sentence boundaries, unlike universal NPs. To provide an
interpretation for a sentence, Heim first determines the logical form for a sentence. Her
logical form is essentially a parse tree with quantifier scoping information indicated,
though it is not a logical representation for the meaning of the sentence. Once the logical
form for a sentence is constructed, she provides a file change semantics for the sentence
using felicity conditions to distinguish definites from indefinites. For example, the
novelty-familiarity felicity condition states that indefinites should always cause a new
discourse referent (or file card) to be created in the discourse model but definite NPs
should not introduce a new discourse referent (or file card). Clearly, Heim&apos;s approach
emphasizes the anaphoric aspect of the definite NP, which both definite descriptions
and definite quantifiers fail to handle well.
Heim&apos;s model handles anaphoric definites, but she must introduce accommodation
to cover nonanaphoric definites. Consider the sentence Every man; loves his, mother.
</bodyText>
<note confidence="0.315335">
17 Formal consistency is violated when a wide scope definite is replaced with something that cannot be
</note>
<footnote confidence="0.681018">
described as a constant and compactness is violated when a different representation is introduced to
handle anaphoric definites.
</footnote>
<page confidence="0.996773">
455
</page>
<figure confidence="0.999513636363636">
Computational Linguistics Volume 18, Number 4
a.
x2
person(x2)
xl (love x2 xl)
person(xl)
1
person(x1)
—Po
person(x2)
(love x2 xl)
</figure>
<figureCaption confidence="0.9561">
Figure 5
</figureCaption>
<bodyText confidence="0.9909005">
Discourse representations for Someone loves everyone.
Accommodation, a concept introduced by Lewis (1979), allows the introduction of a
new file card for a definite NP if and only if that NP is related to a previous file card.
In the example, his mother is nonanaphoric; however, given that the antecedent for
his is every man, accommodation allows the introduction of a new discourse referent.
However, to provide a file card for his mother, the model must know that his refers to
every man; accommodation requires more than syntax and sentence-level information to
provide the representation for some definite NPs. Additionally, Heim&apos;s model would
have trouble handling any definite NPs without an accommodation link to a previous
NP in the discourse model.
Heim&apos;s approach requires a considerable amount of information before a definite
or indefinite NP is represented in file change semantics (including quantifier scoping
information and pronoun antecedents). Hence, the process of representing sentences
in file change semantics does not seem to comply with our modularity constraint.
Kamp (1981) introduces a discourse theory similar to Heim&apos;s, called Discourse
Representation Theory (DRT), providing a model-theoretic interpretation for discourse
models. Both theories are motivated by the fact that pronouns in one sentence can
have definite and indefinite antecedents in another sentence, while universals cannot
bind pronouns in other sentences. Kamp&apos;s approach has been extended by several
researchers (e.g., Klein [19871; Roberts [19871). Since Kamp does not discuss quantifier
scope ambiguities, we introduce DRT as discussed by Roberts.
In DRT, a set of construction rules converts natural language into discourse struc-
tures. To do so, however, quantifier scoping information must be specified. Consider
the two DRT representations for Someone loves everyone. The first, shown in Figure 5a,
corresponds to the reading in which someone has scope over everyone. The discourse
referents for everyone and someone are xl and x2, respectively. The universal NP causes
the creation of the antecedent-consequent box. Because x2 is defined outside of x/&apos;s
antecedent-consequent box, it acts like a constant. The second, shown in Figure 5b,
corresponds to the reading in which everyone has scope over someone. Because the
discourse referent for someone is created in the consequent box of the universal, its
denotation depends on xl, the discourse referent for everyone. Each quantifier scoping
requires a different discourse representation for the meaning of the sentence.
Mapping into a discourse representation is a top-down process that reduces the
original sentence to a structure with a discourse referent for each noun phrase, with
predicates indicating restrictions on the discourse referents as well as relations between
discourse referents. As we already pointed out, a universal is represented by placing
its discourse referent and restriction into an antecedent box, with additional sentence
information placed in the consequent box (resulting in a meaning like a universal in
</bodyText>
<page confidence="0.997683">
456
</page>
<note confidence="0.819326">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<figureCaption confidence="0.891581">
Figure 6
</figureCaption>
<subsubsectionHeader confidence="0.632284">
Discourse representation for Every miner who owns a donkey beats it.
</subsubsectionHeader>
<bodyText confidence="0.99992525">
predicate calculus). Indefinites and definites are represented by placing their discourse
referents and restriction information in the box corresponding to the current level in
the model. An accessibility relation determines when a pronoun can have a particular
discourse referent as its antecedent. A pronoun&apos;s antecedent can be any discourse
referent defined in the box where the pronoun is instantiated or in any box containing
that box. Additionally, a pronoun in a consequent box can also refer to anything in
the antecedent box (unless the antecedent is embedded in another box contained in
the antecedent box).
Roberts (1987) combines DRT with c-command to distinguish two types of bind-
ing, c-command binding and discourse binding. C-command binding occurs when the
best way to represent the anaphoric NP is by replacing it with the variable associated
with the operator of the NP that c-commands it. On the other hand, discourse binding
is needed to handle anaphoric dependencies on things that don&apos;t c-command a pro-
noun or anaphoric definite. For example, consider the sentence Every miner who owns a
donkey beats it. In Robert&apos;s approach, if a donkey had c-commanded it, then no discourse
referent would be created for it; instead, the pronoun would be represented using the
discourse referent of its antecedent. However, because a donkey does not c-command it,
the sentence is handled as shown in Figure 6. Notice that the pronoun is represented
as a discourse referent x3, which is equated with the discourse referent for a donkey
(i.e., x2). Pronouns that haven&apos;t already been replaced by a discourse referent must be
equated with some accessible discourse referent.
Klein (1987) has augmented DRT to handle VPE by introducing a concept that
is very similar to lambda abstraction. He is able to represent VPs and abstract the
syntactic subject of the sentence. Consider how Example 3 is handled.
</bodyText>
<table confidence="0.79036725">
Example 3 Fred, loves his, wife.
Trigger Sentence: George) does too.
Elided Sentence: 1. George loves Fred&apos;s wife. (strict meaning)
Possible Meanings: 2. George loves George&apos;s wife. (sloppy meaning)
</table>
<bodyText confidence="0.998754375">
The discourse representation for the two readings of the elided sentence are shown
in Figure 7. Klein represents the trigger VP as a boxed structure named P. Within this
box is a distinguished variable x2 (distinguished variables are marked with brackets),
which corresponds to the abstracted subject. The trigger sentence is represented as
P(x0), which is very similar to applying the discourse referent for the subject to a
lambda function named P. The discourse referent for his is x4, which can either be
equated with the distinguished discourse referent (i.e., x2) or with something outside
of the VP box. To get the sloppy reading, it is equated with the distinguished discourse
</bodyText>
<figure confidence="0.88533184375">
xl x2
miner(xl)
donkey(x2)
(own x1 x2)
x3
(beat x1 x3)
(= x3 x2)
457
Computational Linguistics Volume 18, Number 4
a.
x0 xl P Q
Fred(x0)
[x2] x3 x4
wife(x3)
possess(x4 x3)
love(x2 x3)
x4 = x2
P(x0)
George(xl)
Q(xl)
Q = P
P:
x0
Fred(x0)
wife(x3)
possess(x4 x3)
love(x2 x3)
x4 = x0
P(x0)
George(x1)
Q(xl)
Q = P
</figure>
<figureCaption confidence="0.999105">
Figure 7
</figureCaption>
<bodyText confidence="0.975290923076923">
Discourse representations for the readings of Example 3.
referent, as shown in Figure 7a. The elided sentence is represented initially as Q(xl),
where xl is the discourse referent for the subject of the elided sentence. The sloppy
reading for the sentence is provided when Q is equated with P.
On the other hand, to derive the strict reading of the elided sentence, the discourse
referent for the pronoun in the VP is equated with the discourse referent for the subject,
namely x0 (as shown in Figure 7b). Again the meaning of the elided sentence is derived
by equating Q with P. but in this case the pronoun&apos;s discourse referent is equated with
the discourse referent for the subject. Hence, Klein derives the two expected readings
for the elided sentence in 3.
This approach to VPE is similar to ours, except we introduce explicit differences
between definite and indefinite NPs. To see why this is an issue, compare Examples 75
and 57.
</bodyText>
<subsectionHeader confidence="0.640884">
Example 75
</subsectionHeader>
<bodyText confidence="0.493604333333333">
Fred, saw his, friend.
George) did too.
Possible Meanings: 1. George saw Fred&apos;s friend.
</bodyText>
<sectionHeader confidence="0.300151" genericHeader="method">
2. George saw George&apos;s friend.
</sectionHeader>
<subsectionHeader confidence="0.701849">
Example 57
</subsectionHeader>
<bodyText confidence="0.632041">
Fred, saw a friend of his,.
George) did too.
Possible Meanings: 1. George saw the same friend of Fred&apos;s.
</bodyText>
<listItem confidence="0.8390625">
2. George saw a different friend of Fred&apos;s.
3. George saw a friend of George&apos;s.
</listItem>
<bodyText confidence="0.9998092">
Because definites and indefinites are represented in the same way in DRT, the sloppy
readings for both of these examples are represented in precisely the same way (shown
in Figure 8a), as are the strict readings (shown in Figure 8b). However, the meaning
of his friend is quite different from the meaning of a friend of his in VPE. The elided
sentence in 75 cannot mean George saw a different friend of Fred&apos;s, in contrast to the elided
</bodyText>
<page confidence="0.992188">
458
</page>
<figure confidence="0.991761851851852">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
a.
b.
x0 x1 P Q
Fred(x0)
[x2] x3 x4
friend(x3)
possess(x4 x3)
see(x2 x3)
x4 = x2
P(x0)
George(xl)
Q(xl)
Q = P
P:
x0 xl P Q
Fred(x0)
[x2] x3 x4
friend(x3)
possess(x4 x3)
see(x2 x3)
x4 = x0
P(x0)
George(xl)
Q(xl)
Q = P
P:
</figure>
<figureCaption confidence="0.982642">
Figure 8
</figureCaption>
<bodyText confidence="0.991994043478261">
Discourse representations for the readings of Examples 57 and 75.
sentence in 57. One more interpretation is available for the elided sentence in 57 than
for the elided sentence in 75, but in each case, only two representations are provided.
In our approach, definites and indefinites are treated quite differently, not simply in
how they are initially represented, but also in how they are processed to determine
final meanings. It is therefore easier for us to explain the differences between examples
57 and 75. In Section 5.3, we demonstrated how our approach is able to provide the
three readings for the elided sentence in 57. In contrast, our approach provides only
two readings for the elided sentence in 75, as shown with a similar example (i.e.,
Example 3) in Section 4.4.
In Klein&apos;s (1987) approach to VPE, the discourse referents for definites and in-
definites are provided only after quantifier scoping information is available. Hence,
Klein&apos;s discourse representation for these NPs is similar to our refined representations
for definites and indefinites (i.e., definite functions following argument simplification
and indefinite functions), where a discourse referent that is created in a box introduced
by a universal corresponds to a function of a universal variable. However, Klein&apos;s ap-
proach does not determine whether lambda operators (i.e., distinguished variables)
have scope over discourse referents in a VP box. To handle Examples 57 and 75 in
the framework of DRT, Klein must determine whether a discourse referent should be
defined inside or outside of the VP box, stipulating that a discourse referent is cre-
ated inside a box if and only if the operator responsible for introducing that box has
scope over the NP. In contrast to our approach, the information required to make this
decision must be known before building the discourse model.
</bodyText>
<sectionHeader confidence="0.86551" genericHeader="method">
8. Conclusion
</sectionHeader>
<bodyText confidence="0.999945333333333">
We began with the idea that LF, a compact intermediate level of representation de-
rived only from syntactic and sentence-level information, is a valuable component in
any computer model generating meaning for sentences. It can be used to postpone
the determination of an unambiguous meaning for a sentence until the information
required to select the intended meaning becomes available. Even though the mean-
ing of the logical form for a sentence is ambiguous, it can be used by a contextual
</bodyText>
<page confidence="0.995437">
459
</page>
<note confidence="0.6053">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.999892368421053">
processing module to guide the refinement of its own meaning (as well as the meaning
of other sentences&apos; LFs).
We have developed logical form representations for pronouns, definites, and in-
definites and have demonstrated through a variety of detailed examples that these
representations accurately model the linguistic behavior of the language (for a dis-
cussion of a wider variety of examples see Harper [1989, 1990]). We have proposed
three computational constraints for using LF in a computational framework and have
demonstrated that our LF conforms to these constraints. And finally, we used our rep-
resentation in an implementation that was capable of processing nontrivial examples.
There are two topics that we have only touched on in this paper: the extraction
of information from context and the handling of syntactic ambiguity. Though LF con-
strains the information sought by a contextual module, it does not completely specify
a strategy for locating and processing contextual information. A single parse tree can
be automatically mapped into LF. However, in syntactically ambiguous sentences (e.g.,
Fred saw the bird with his binoculars) more than one parse is possible. A solution is to
allow multiple LFs for a sentence (though this would violate the compactness con-
straint). Another solution, which we are currently pursuing, is to associate LFs with a
parse forest for the sentence (resulting in a compact representation for the parse trees
and logical forms).
</bodyText>
<sectionHeader confidence="0.985392" genericHeader="method">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.99949525">
This paper contains results from the
author&apos;s thesis in the Computer Science
Department at Brown University. The paper
has benefited from discussions with Eugene
Charniak, Leora Morgenstern, Tom Dean,
Paul Harper, Kate Sanders, and Frederic
Evans. It has also benefited from the helpful
suggestions of the referees. The work was
supported in part by the NSF grants IST
8416034, 1ST 8515005, and 1ST 9011179 and
ONR grant N00014-79-C-0529, and AFOSR
grant F49620-88-c-0132.
</bodyText>
<sectionHeader confidence="0.990937" genericHeader="method">
References
</sectionHeader>
<reference confidence="0.999618357142857">
Allen, James (1987). Natural Language
Understanding. The Benjamin/Cummings
Publishing Company.
Alshawi, Hiyan, and van Eijck, Jan (1989).
&amp;quot;Logical forms in the core language
engine.&amp;quot; In Proceedings, 27th Annual
Meeting of the Association for Computational
Linguistics. Vancouver, Canada, 25-32.
Bach, Emmon, and Partee, Barbara (1980).
&amp;quot;Anaphora and semantic structure.&amp;quot; In
Papers from the Parasession on Pronouns and
Anaphora, edited by Jody Kreiman and
A. E. Ojeda, Chicago Linguistic Society,
1-40.
Charniak, Eugene, and McDermott, Drew V.
(1985). Introduction to Artificial Intelligence.
Addison-Wesley.
Creaney, Norman, and McTear, Michael F.
(1990). The Incremental Disambiguation of
Quantifier Scoping Ambiguities.
Unpublished manuscript, University of
Ulster, N. Ireland.
Dowty, David R.; Wall, Robert E.; and
Peters, Stanley (1981). Introduction to
Montague Semantics. D. Reidel Publishing
Company.
Evans, Gareth (1980). &amp;quot;Pronouns.&amp;quot; Linguistic
Inquiry, 11, 337-362.
Geach, Peter T. (1962). Reference and
Generality. Cornell University Press.
Harper, Mary P. (1988). &amp;quot;Representing
pronouns in logical form: Computational
constraints and linguistic evidence.&amp;quot; In
Proceedings, 7th National Meetings of AAAI.
Saint Paul, Minnesota, 712-717.
Harper, Mary P. (1989). &amp;quot;The representation
of noun phrases in logical form.&amp;quot;
Memorandum CS-89-46, Brown
University, Providence, Rhode Island.
Harper, Mary P. (1990). The representation of
noun phrases in logical form. Doctoral
dissertation, Brown University,
Providence, Rhode Island.
Heim, Irene (1982). The semantics of definite
and indefinite noun phrases. Doctoral
dissertation, University of Massachusetts,
Amherst, Massachusetts.
Hintikka, Jaako (1979). &amp;quot;Quantifiers in logic
and quantifiers in natural language.&amp;quot; In
Game Theoretical Semantics, edited by
E. Saarinen, 81-117. D. Reidel.
Hintikka, Jaako, and Kulas, Jack (1985).
Anaphora and Definite Descriptions: Two
Applications of Game-Theoretical Semantics.
D. Reidel.
Hobbs, Jerry R. (1983). &amp;quot;An improper
</reference>
<page confidence="0.993112">
460
</page>
<reference confidence="0.995183788888889">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
treatment of quantification in ordinary
English.&amp;quot; In Proceedings, 21st Annual
Meeting of Annual Meeting of Association for
Computational Linguistics. Cambridge,
Massachusetts, 57-63.
Hornstein, Norbert (1984). Logic as Grammar:
An Approach to Meaning in Natural
Language. MIT Press, 277-322.
Kamp, Hans (1981). &amp;quot;A theory of truth and
semantic representation.&amp;quot; In Formal
Methods in the Study of Language, Volume /,
edited by Jeroen Groenendijk, Theo
Janssen, and Martin Stokhof.
Mathematische Centrum.
Kartunnen, Lauri (1969). &amp;quot;Pronouns and
variables.&amp;quot; In Proceedings, Fifth Regional
Meeting of the Chicago Linguistic Society.
108-116.
Klein, Ewan (1987). &amp;quot;VP ellipsis in DR
theory.&amp;quot; In Studies in Discourse
Representation and the Theory of Generalized
Quantifiers, edited by J. Groenendijk,
D. de Jongh, and M. Stokhof. Foris.
161-187.
Lewis, David (1979). &amp;quot;Score keeping in a
language game.&amp;quot; In Journal of Philosophical
Logic, 8(3), 339-359.
May, Robert (1985). Logical Form: Its Structure
and Deviation. MIT Press.
Montague, Richard (1970). &amp;quot;Universal
grammar.&amp;quot; Theoria, 36,373-398.
Morgenstern, Leora (1988). Foundations of a
logic of knowledge, action, and communication.
Doctoral dissertation, New York
University, New York, New York.
Partee, Barbara, and Bach, Emmon (1981).
&amp;quot;Quantification, pronouns, and VP
anaphora.&amp;quot; In Formal Methods in the Study
of Language, Volume 1, edited by Jeroen
Groenendijk, Theo Janssen, and Martin
Stokhof. Mathematische Centrum,
445-481.
Pollack, Martha E., and Pereira, Fernando
C. N. (1988). &amp;quot;An integrated framework
for semantic and pragmatic
interpretation.&amp;quot; In Proceedings, 26th Annual
Meeting of Annual Meeting of Association for
Computational Linguistics. Buffalo, New
York, 75-86.
Reinhart, Tanya (1983). Anaphora and
Semantic Interpretation. Croom Helm.
Roberts, Craige (1987). Modal subordination,
anaphora, and distributivity. Doctoral
dissertation, University of Massachusetts,
Amherst, Massachusetts.
Ross, John R. (1967). Constraints on variables
in syntax. Doctoral dissertation, MIT,
Cambridge, Massachusetts.
Russell, Bertram (1971). &amp;quot;Reference.&amp;quot; In
Readings in the Philosophy of Language,
edited by J. E Rosenberg and C. Travis.
Prentice-Hall, 163-175.
Sag, Ivan A. (1976). Deletion and logical form.
Doctoral dissertation, MIT, Cambridge,
Massachusetts.
Schubert, Lenhart K., and Pelletier, Francis
J. (1984). &amp;quot;From English to logic:
Context-free computation of
&apos;conventional&apos; logical translations.&amp;quot;
American Journal of Computational
Linguistics, 10,165-176.
Sells, Peter; Zaenen, Annie; and Zec, Draga
(1985). &amp;quot;Reflexivization variation:
Relations between syntax, semantics, and
lexical structure.&amp;quot; In Studies in Grammatical
Theory and Discourse Structure, Volume 1,
edited by M. Iida, S. Wechsler, and
D. Zec. CSLI.
Webber, Bonnie L. (1978). A formal approach
to discourse anaphora. Doctoral dissertation,
Harvard University, Cambridge,
Massachusetts.
Webber, Bonnie L. (1983). &amp;quot;So what can we
talk about now?&amp;quot; In Computational Models
of Discourse, edited by M. Brady and
R. Berwick, 331-371. MIT Press.
Williams, Edwin S. (1977). &amp;quot;Discourse and
logical form.&amp;quot; Linguistic Inquiry, 8,
101-139.
</reference>
<page confidence="0.999079">
461
</page>
<bodyText confidence="0.229273">
Computational Linguistics Volume 18, Number 4
</bodyText>
<sectionHeader confidence="0.972048" genericHeader="method">
Appendix A: The Syntax and Semantics of Logical Form
</sectionHeader>
<bodyText confidence="0.990586666666667">
In this appendix, we provide a syntax and semantics for our logical form (adapted from
Morgenstern [19881). We represent a sentence S using the formula T, )(w)ç, where T is
a term representing the subject and A(w)0 is the lambda function representing the VP.
</bodyText>
<sectionHeader confidence="0.973425" genericHeader="conclusions">
A.1 Syntax
</sectionHeader>
<reference confidence="0.986932625">
1. The logical constants: --,, V, A, -&gt;, ), (,=, V, :, I, A. We often use
English equivalents of the logical constants (e.g., and for A).
2. Nonlogical constants: These include numerical constants (e.g., 1, 2, etc.),
character constants (e.g., A, b, etc.), nonnumerical, noncharacter
constants (e.g., Fred34).
3. Variables: For example, x, y, z.
4. Predicate symbols: For example, run, boy, etc.
5. Function symbols: For example, def4, indef66, his66.
</reference>
<bodyText confidence="0.8677715">
We will also characterize terms, q-terms, f-terms, atomic formulae, well-formed for-
mulae, and sentences.
</bodyText>
<listItem confidence="0.966613571428572">
1. Terms: A term is any expression that refers to an object. Formally, they
are defined by the following rules:
(a) If 7- is a constant, 7- is a term.
(b) If T is a variable, T is a term.
(c) If r1, r2, , rn are terms, and 6 is an n-ary function symbol, then
(0 rir2...rn) is a term.
2. Q-term: We introduce the idea of a q-term to the syntax. A q-term is a
</listItem>
<bodyText confidence="0.78912985">
quantifier, restriction (which is a well-formed formula), and variable
used as a pseudo-term in a formula. The meaning of a q-term will be
introduced in the section on semantics. For example, [Va: a] is a
q-term, where a is a variable and IP is a well-formed formula.
3. F-term: We introduce the idea of an f-term to the syntax. An f-term
consists of a function and a restriction (which is a well-formed formula).
The meaning of an f-term will be introduced in the section on semantics.
For example, ((0 T1 &apos;T2. • • 7n) I 11)) is an f-term, where is a well-formed
formula.
4. Atomic formula: If 7r is an n-ary predicate symbol, and yi, r2) • • , 7-n are
terms, f-terms or q-terms, then (7r Ti T2 . Tn) is an atomic formula.
5. Well-formed formula: well-formed formulas are defined by the following
formation rules:
(a) If 0 is an atomic formula, then it is a well-formed formula.
(b) If 0 is a well-formed formula T1 =T2 and T1 and T2 are terms,
then 0 is a well-formed formula.
(c) If 0 is a well-formed formula, then is a well-formed formula.
(d) If 01 and 02 are well-formed formulae, then (or 01 02), (ora
02), (and 01 02), (if 01 (1)2), and (iff 02) are well-formed
formulae.
</bodyText>
<page confidence="0.997514">
462
</page>
<note confidence="0.609076">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<bodyText confidence="0.917516">
(e) If 0 is a well-formed formula and a is a variable, then Va (b and
]a are well-formed formulae.
</bodyText>
<listItem confidence="0.812800076923077">
(f) If (b is a formula containing q-terms or f-terms, then that
formula is well-formed.
(g) If 0 is a well-formed formula and T is a term, q-term, or f-term,
then 7, A(X)0 is a well-formed formula.
6. Sentences: Sentences are well-formed formulae that do not contain free
variables and are capable of being mapped to a truth value, which
requires:
(a) the refinement of the meanings of pronoun functions and
anaphoric definite functions,
(b) the simplification of the argument list of nonanaphoric definite
functions,
(c) the selection of one statement in ora forms,
(d) the determination of quantifier scoping,
</listItem>
<bodyText confidence="0.96954325">
(e) the replacement existential variables not in the scope of negation
with indefinite functions,
(f) the replacement of dummy VPs.
Note that ora is used as a device (outside of the logical system) for
updating LF with additional (though ambiguous) information or for
enumerating all possible meanings for a LF.
A.2 Semantics
The model M for language L.
</bodyText>
<listItem confidence="0.973930428571429">
1. Domain D of objects in the world.
2. A mapping assigning each nonlogical constant of the language a
member of the domain.
3. A mapping assigning each n-ary predicate of L a set consisting of
n-tuples that can be formed out of elements of D.
4. A mapping assigning each n-ary function of L a set of n + 1 tuples
formed from the elements of D.
</listItem>
<bodyText confidence="0.957636">
We define the value of a constant term T under interpretation M as follows:
</bodyText>
<listItem confidence="0.661293333333333">
1. If 7 is a constant, then the value of 7 under M is the element of D that M
maps to T.
2. If 7 is of the form (0 T1 12 ...7n) where 0 is an n-ary function symbol, cri
</listItem>
<bodyText confidence="0.892093833333333">
is the value for r1, az is the value for 72, , is the value for 7n, and
[al, 02, , an, a] is an element in the set of n +1 tuples that M maps to 0,
then a is the value of T.
To this we add:
1. If (pro, ri 72...7n) occurs in a formula 0 and , Tn are terms and for
any ri that is a variable bound by Mr), the lambda operator must have
</bodyText>
<page confidence="0.997257">
463
</page>
<note confidence="0.365861">
Computational Linguistics Volume 18, Number 4
</note>
<bodyText confidence="0.996622384615385">
scope over the function. Also for any variable Ti not bound by a lambda
operator, then if there is an operator over Ti contained as a q-term in the
formula containing the pronoun function (or in a higher formula), then
that operator op) has scope over the pronoun function.
2. If (def, TI T2 . . Tn) occurs in a formula 0 and Th Tn are terms and for
any 7-, that is a variable bound by A(T,), then the lambda operator has
scope over the function. Also for any variable T) not bound by a lambda
operator, then if there is an operator over T) contained in a q-term in the
same formula (or in a higher formula) as the function but outside of the
function&apos;s restriction, then that operator op) has scope over the function.
On the other hand, if for any T1 that is a variable whose operator is a
universal or an existential contained in the function&apos;s restriction, the
function can receive one of the following 2 meanings:
</bodyText>
<listItem confidence="0.919901833333333">
1. Opp-) (clef, T1 r2. • • T1 • • • Tn)
2. (def, TIT2.. • 7]-1 TH-1 • • • Ta))
What it means for a sentence 0 to be true under an interpretation M:
1. If 0 is an atomic sentence (i.e., 0 is of the form (7r ,T) where al is
the value of 7-1, ..., and crn is the value of T a) , then M 1= 0 if and only if
• • , an] is a member of the set that M assigns to it.
</listItem>
<bodyText confidence="0.85466475">
2. If 0 has the form -01, where 01 is an atomic sentence of the form (7r
7-1 • • • TO and 0-1 is the value of ..., and an is the value of Ta), then M
cb if and only if [o-i , • • • , an] is in the antiextension of the set that M
assigns to it.
3. If 0 has the form 01 V 02, M jz=0 if and only if M 1=01 or M 02 or
both.
4. If 0 has the form 01 A 02, M 0 if and only if M 01 and M 02.
5. If 0 has the form 01 —&gt; 02, M =zcb if and only if M = or M I=02 or
both.
6. If 01 has the form 01 02, M cb if and only if M 01 and M 02 or
M = -01 and M
7. For sentences of the form `MO or 3a5, we use /3-variants. If M and M&apos;
are interpretations with identical domains and 0 is a constant, M is a
0-variant of M&apos; if M and M&apos; differ only in what they assign to 0.
1) If 0 has the form Vali), M 0 if and only if, for all M&apos;, if M&apos; is a
13-variant of M, M&apos; q,b(0/a), where 11)(3/a) is the expression
obtained by substituting )3 for all free occurrences a in 0.
2) If 0 has the form ]atP, M cb if and only if, for some M&apos;, if M&apos; is
a /3-variant of M, M&apos; =&apos;(/3/a), where O(/3/ a) is the expression
obtained by substituting 0 for all free occurrences a in 0.
8. If 0 has the form T, A(X)1P2 and T is a term, then M =0 if and only if M
(where is 02(r/x)).
9. If 0 has the form T, A(x)02 and T is the q-term [Va: 01 a], then M 0 if
and only if M j= Va (if 01 OD (where 4 is 02(a/x)).
</bodyText>
<page confidence="0.999071">
464
</page>
<note confidence="0.571553">
Mary P. Harper Ambiguous Noun Phrases in Logical Form
</note>
<reference confidence="0.98794025">
10. If 0 has the form 7-, A(x)02 and T is the q-term [3a: 01 a], then M H0 if
and only if M H 3a (and oi ,,p) (where 1!) is &apos;02(a/x)).
11. If 0 has the form T, A(x)02 and T is the f-term ((0 Ti 12 ... 7a) OA then
M H0 if and only if M H (and &apos;01 &apos;O) (where is 11)2((O TI T2 ... r)/x)
Additionally:
1. If ((0 T1 72••• rn) 01) is contained in a formula 0, the formula is
equivalent to (and 0&apos; 01), where 0&apos; is the formula obtained by replacing
the f-term with (6+ Ti 72 ...Tn) in 0.
2. If (7r [opi al: 0] ...) is a formula, then this is equivalent to:
opi (and 0 (7r al )) if opi is 3 or opi (if 0 (7r al )) if opi is V.
3. If (7r ... Eopial: bj aj] [op,a,: ) and a) is free in 0, then °mai
must have scope over op,.
4. If Tl, A(ai)(7r [op,a,: ail ...) and op, is an existential operator, then
replace the q-term with an f-term, where the function&apos;s arguments
include all of the variables corresponding to operators that have scope
over it (possibly including al)) and replace all occurrences of a, with the
function.
5. If 7-1, A(ai)(7r [opia,: a,] ) and al is free in 0, then Mai) must
have scope over op,.
6. (7r [opi 01 al] [op2a2: 2 a21 ... [opnan: On an]) is consistent with the
set of meanings (using ora to enumerate them) derived by enumerating
all sentences with a legal partial order of the quantifiers given the above
quantifier scoping constraints: opi al, op2a2, ..., and opnan. To map the
sentence to a truth-value, one partial order must be selected.
</reference>
<page confidence="0.999593">
465
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.448371">
<title confidence="0.992608">Ambiguous Noun Phrases in Logical Form</title>
<author confidence="0.999969">Mary P Harper</author>
<affiliation confidence="0.999915">Purdue University</affiliation>
<abstract confidence="0.9928458">In this paper, logical form representations for pronouns, singular definite noun phrases (NPs), and singular indefinite NPs are developed. These representations allow decisions about the precise meaning of a sentence to be postponed until the required information becomes available. Three computational constraints for this logical form are proposed: compactness, modularity, and formal consistency. Initially, NPs are represented using a composite representation for all allowable meanings, conforming with the compactness constraint. This representation is provided using only syntactic and sentence level information, consistent with the modularity constraint. When an ambiguity can be resolved, the precise behavior is specified in a way compatible with the initial representation, conforming with the formal consistency constraint. The scope of this approach is demonstrated by using a wide variety of examples, and a computer implementation is described.</abstract>
<note confidence="0.513265">Related approaches are also discussed.</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>James Allen</author>
</authors>
<title>Natural Language Understanding.</title>
<date>1987</date>
<publisher>The Benjamin/Cummings Publishing Company.</publisher>
<contexts>
<context position="2126" citStr="Allen 1987" startWordPosition="303" endWordPosition="304">is approach. First, the enumeration and testing of each possible reading of an ambiguous sentence to determine which is correct can require significant computational resources. Second, an application may not require the precise meaning for a sentence; hence, determining a single meaning would be a waste of resources. Third, many times an ambiguous sentence cannot be disambiguated until information contained in subsequent sentences has been processed. Another approach, the one adopted in this paper, is to use an intermediate representation called logical form (LF) (Schubert and Pelletier 1984; Allen 1987; Harper 1988) to avoid immediately committing to a single meaning of an ambiguous sentence. LF partially specifies the meaning of a sentence based on syntactic and sentence-level information, without considering the effects of pragmatics and context. This partial specification of meaning allows us to process additional sentences before further limiting the meaning of an ambiguous sentence. Later, as relevant information becomes available (from a context processing module), the intermediate representation of the ambiguous sentence can be incrementally updated. This process can continue until a</context>
<context position="3723" citStr="Allen (1987)" startWordPosition="537" endWordPosition="538">t should accurately model the * School of Electrical Engineering, Purdue University, West Lafayette, IN 47907. © 1992 Association for Computational Linguistics Computational Linguistics Volume 18, Number 4 Process to Update Logical Form Contextual Information Figure 1 An architecture for language processing. linguistic behavior of language. Second, it should be computationally tractable. In fact, we have defined three constraints for using LF in a computational framework (Harper 1988, 1990). 1. Compactness Constraint: The compactness constraint, which captures the spirit of LF as presented by Allen (1987), is important in a computer model of language comprehension because of the need to postpone decisions about ambiguity without large storage requirements. LF should compactly represent the underdetermined meaning of a sentence—underdetermined in that ambiguities and anaphora are not resolved. Ideally, LF should only require polynomial (in the number of words in a sentence) space. 2. Modularity Constraint: The modularity constraint requires LF to be initially computable from syntax and local (sentence-level) semantics only. In particular, it should not be initially dependent on contextual infor</context>
<context position="5950" citStr="Allen 1987" startWordPosition="864" endWordPosition="865">ntation conforms to our computational constraints. Then, we introduce our LF representations for pronouns, singular definite NPs, and singular indefinite NPs, considering how to update each representation when new information becomes available (though not how to determine that information). We also discuss an implementation that uses our representations and compare our approach with related work. 2. Quantifier Scope Ambiguity in Logical Form Quantifier scope ambiguity has been handled by some researchers by using an intermediate scope-neutral LF (e.g., Hobbs 1983; Schubert and Pelletier 1984; Allen 1987) for the initial representation of sentences. Hence, sentences like Someone loves everyone are initially represented without committing to one particular meaning, as shown in Example 1. Example 1 Someone loves everyone. Possible Meanings: 1. 2x Vy (love x y) 2. Vy 2x (love x y) Scope-neutral Form: (love [2x xl [Vy yl) Initially, in scope-neutral LF, the quantifiers are stored in the predicate argumentstructure with no scoping preference indicated, hence the representation does not commit to a specific meaning for the sentence; it is simply a compact way of expressing the set of all possible re</context>
<context position="7325" citStr="Allen (1987)" startWordPosition="1078" endWordPosition="1079"> cases subsumes readings where the existential is outside of the scope of the universal. However, if we are to handle NPs containing pronouns and sentences with verb phrase ellipsis, this solution is inadequate. An LF that avoids committing to a single meaning must be capable of being updated once information is available to limit the scoping possibilities. There are a variety of mechanisms for expressing scoping decisions. For example, Schubert and Pelletier (1984) indicate quantifier scoping by extracting and linearly ordering the quantifiers to the left of the predicate-argument structure. Allen (1987) indicates for each pair of quantifiers which one has scope over the other; a method that is not limited to a linear sequence of operators. Finally, Creaney and McTear (1990) use constraints to limit scope possibilities. Hintikka (1979) has noted that the linear ordering of quantifiers is not sufficient to capture all possible meanings of a sentence when four or more quantifiers occur in the sentence. Consider a sentence with four quantifiers, two universals and two existentials: Every boyi wanted every girl I to introduce a friend of his, to a friend of hersj. It should be possible for every </context>
</contexts>
<marker>Allen, 1987</marker>
<rawString>Allen, James (1987). Natural Language Understanding. The Benjamin/Cummings Publishing Company.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hiyan Alshawi</author>
<author>van Eijck</author>
</authors>
<title>Logical forms in the core language engine.&amp;quot;</title>
<date>1989</date>
<booktitle>In Proceedings, 27th Annual Meeting of the Association for Computational Linguistics.</booktitle>
<pages>25--32</pages>
<location>Vancouver, Canada,</location>
<marker>Alshawi, van Eijck, 1989</marker>
<rawString>Alshawi, Hiyan, and van Eijck, Jan (1989). &amp;quot;Logical forms in the core language engine.&amp;quot; In Proceedings, 27th Annual Meeting of the Association for Computational Linguistics. Vancouver, Canada, 25-32.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emmon Bach</author>
<author>Barbara Partee</author>
</authors>
<title>Anaphora and semantic structure.&amp;quot;</title>
<date>1980</date>
<booktitle>In Papers from the Parasession on Pronouns and Anaphora, edited by Jody Kreiman</booktitle>
<pages>1--40</pages>
<publisher>Chicago Linguistic Society,</publisher>
<contexts>
<context position="24795" citStr="Bach and Partee (1980)" startWordPosition="3865" endWordPosition="3868">The difference between Example 5 and the previous two sentences is that in 5 the quantified NP in question is contained in a relative clause attached to an NP, whereas in the other two sentences they are not. A quantified NP is prevented from binding any pronoun outside of the clause even though the NP containing it c-commands the pronoun. Hence, we adapt Reinhart&apos;s binding rule&apos; to allow quantified NPs to bind a pronoun if they c-command the pronoun or are embedded in another c-commanding NP but not contained in a relative clause. 4 We could have also adapted the binding constraints found in Bach and Partee (1980). 426 Mary P. Harper Ambiguous Noun Phrases in Logical Form Armed with this syntactic rule for determining which quantified NPs can have an impact on the meaning of a pronoun, we can now specify a pronoun&apos;s representation. A pronoun is represented as a uniquely named function of all the variables corresponding to operators that can have scope over it. These operators include: • any lambda operator that has scope over the pronoun function in LF, • any nonsubject quantified variable corresponding to an NP that can bind the pronoun given our modification of Reinhart&apos;s binding rule. Because a quan</context>
</contexts>
<marker>Bach, Partee, 1980</marker>
<rawString>Bach, Emmon, and Partee, Barbara (1980). &amp;quot;Anaphora and semantic structure.&amp;quot; In Papers from the Parasession on Pronouns and Anaphora, edited by Jody Kreiman and A. E. Ojeda, Chicago Linguistic Society, 1-40.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eugene Charniak</author>
<author>Drew V McDermott</author>
</authors>
<title>Introduction to Artificial Intelligence.</title>
<date>1985</date>
<publisher>Addison-Wesley.</publisher>
<contexts>
<context position="20816" citStr="Charniak and McDermott (1985)" startWordPosition="3207" endWordPosition="3210">nal constraints. To be consistent with the modularity constraint, a pronoun&apos;s representation must be generated without utilizing the contextual information needed to select its antecedent. To obey the compactness and formal consistency constraints, a pronoun must be represented using a single representation that is consistent with the ways the pronoun can act given its position in a sentence. To conform with these constraints, we represent a pronoun as a pronoun function in LF. This representation of pronouns is similar in spirit to the representation of pronouns as unique skolem constants in Charniak and McDermott (1985). Their representation allows the construction of basic logical structure of the sentence to precede pronoun resolution, a division consistent with our compactness and modularity constraints. However, because a constant is incompatible with a variable, their pronoun representation is incompatible with a bound variable meaning. A pronoun function is a composite representation reminiscent of a skolem function. Its role is to limit the range of possible antecedents for the pronoun without committing to one in particular. Each pronoun function is assigned a unique name (supplied by adding a unique</context>
</contexts>
<marker>Charniak, McDermott, 1985</marker>
<rawString>Charniak, Eugene, and McDermott, Drew V. (1985). Introduction to Artificial Intelligence. Addison-Wesley.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Norman Creaney</author>
<author>Michael F McTear</author>
</authors>
<title>The Incremental Disambiguation of Quantifier Scoping Ambiguities.</title>
<date>1990</date>
<institution>University of Ulster, N.</institution>
<note>Unpublished manuscript,</note>
<contexts>
<context position="7499" citStr="Creaney and McTear (1990)" startWordPosition="1106" endWordPosition="1109">verb phrase ellipsis, this solution is inadequate. An LF that avoids committing to a single meaning must be capable of being updated once information is available to limit the scoping possibilities. There are a variety of mechanisms for expressing scoping decisions. For example, Schubert and Pelletier (1984) indicate quantifier scoping by extracting and linearly ordering the quantifiers to the left of the predicate-argument structure. Allen (1987) indicates for each pair of quantifiers which one has scope over the other; a method that is not limited to a linear sequence of operators. Finally, Creaney and McTear (1990) use constraints to limit scope possibilities. Hintikka (1979) has noted that the linear ordering of quantifiers is not sufficient to capture all possible meanings of a sentence when four or more quantifiers occur in the sentence. Consider a sentence with four quantifiers, two universals and two existentials: Every boyi wanted every girl I to introduce a friend of his, to a friend of hersj. It should be possible for every boy to have scope over a friend of his, without having scope over a friend of hers. Similarly, every girl could have scope over a friend of hers, but not a friend of his. The</context>
</contexts>
<marker>Creaney, McTear, 1990</marker>
<rawString>Creaney, Norman, and McTear, Michael F. (1990). The Incremental Disambiguation of Quantifier Scoping Ambiguities. Unpublished manuscript, University of Ulster, N. Ireland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David R Dowty</author>
<author>Robert E Wall</author>
<author>Stanley Peters</author>
</authors>
<title>Introduction to Montague Semantics.</title>
<date>1981</date>
<publisher>D. Reidel Publishing Company.</publisher>
<marker>Dowty, Wall, Peters, 1981</marker>
<rawString>Dowty, David R.; Wall, Robert E.; and Peters, Stanley (1981). Introduction to Montague Semantics. D. Reidel Publishing Company.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gareth Evans</author>
</authors>
<title>Pronouns.&amp;quot;</title>
<date>1980</date>
<journal>Linguistic Inquiry,</journal>
<volume>11</volume>
<pages>337--362</pages>
<contexts>
<context position="14582" citStr="Evans (1980)" startWordPosition="2222" endWordPosition="2223"> operator associated with its antecedent. In contrast, the meaning of a referential pronoun is the discourse entity evoked by its antecedent. The bound versus referential dichotomy divides the world of pronouns differently than does the intrasentential—intersentential dichotomy. Pronouns with intersentential antecedents are typically referential.&apos; However, pronouns with intrasentential antecedents can be bound or referential (Webber 1978; Reinhart 1983). The bound—referential dichotomy doesn&apos;t cover the entire range of behaviors possible for pronouns. There is another category of pronoun that Evans (1980) dubs E-type pronouns and that appears to be a bound variable, but on closer inspection is not. Donkey sentences (originally noticed by Geach [19621) can be used to demonstrate this difficulty, for example: Every miner who owns a donkey beats it. Given that every miner has scope over a donkey, the indefinite cannot be referential and the existential operator is blocked from binding the pronoun because of the scope island; quantified NPs embedded in a relative clause attached to an NP cannot bind pronouns outside of the relative clause environment.&apos; However, a donkey can be the antecedent for t</context>
</contexts>
<marker>Evans, 1980</marker>
<rawString>Evans, Gareth (1980). &amp;quot;Pronouns.&amp;quot; Linguistic Inquiry, 11, 337-362.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter T Geach</author>
</authors>
<title>Reference and Generality.</title>
<date>1962</date>
<publisher>Cornell University Press.</publisher>
<marker>Geach, 1962</marker>
<rawString>Geach, Peter T. (1962). Reference and Generality. Cornell University Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary P Harper</author>
</authors>
<title>Representing pronouns in logical form: Computational constraints and linguistic evidence.&amp;quot;</title>
<date>1988</date>
<booktitle>In Proceedings, 7th National Meetings of AAAI. Saint Paul,</booktitle>
<pages>712--717</pages>
<location>Minnesota,</location>
<contexts>
<context position="2140" citStr="Harper 1988" startWordPosition="305" endWordPosition="306"> First, the enumeration and testing of each possible reading of an ambiguous sentence to determine which is correct can require significant computational resources. Second, an application may not require the precise meaning for a sentence; hence, determining a single meaning would be a waste of resources. Third, many times an ambiguous sentence cannot be disambiguated until information contained in subsequent sentences has been processed. Another approach, the one adopted in this paper, is to use an intermediate representation called logical form (LF) (Schubert and Pelletier 1984; Allen 1987; Harper 1988) to avoid immediately committing to a single meaning of an ambiguous sentence. LF partially specifies the meaning of a sentence based on syntactic and sentence-level information, without considering the effects of pragmatics and context. This partial specification of meaning allows us to process additional sentences before further limiting the meaning of an ambiguous sentence. Later, as relevant information becomes available (from a context processing module), the intermediate representation of the ambiguous sentence can be incrementally updated. This process can continue until all of the ambi</context>
<context position="3599" citStr="Harper 1988" startWordPosition="519" endWordPosition="520">ause LF is a component of a computer model for language comprehension, it must be designed with two goals in mind. First, it should accurately model the * School of Electrical Engineering, Purdue University, West Lafayette, IN 47907. © 1992 Association for Computational Linguistics Computational Linguistics Volume 18, Number 4 Process to Update Logical Form Contextual Information Figure 1 An architecture for language processing. linguistic behavior of language. Second, it should be computationally tractable. In fact, we have defined three constraints for using LF in a computational framework (Harper 1988, 1990). 1. Compactness Constraint: The compactness constraint, which captures the spirit of LF as presented by Allen (1987), is important in a computer model of language comprehension because of the need to postpone decisions about ambiguity without large storage requirements. LF should compactly represent the underdetermined meaning of a sentence—underdetermined in that ambiguities and anaphora are not resolved. Ideally, LF should only require polynomial (in the number of words in a sentence) space. 2. Modularity Constraint: The modularity constraint requires LF to be initially computable fr</context>
</contexts>
<marker>Harper, 1988</marker>
<rawString>Harper, Mary P. (1988). &amp;quot;Representing pronouns in logical form: Computational constraints and linguistic evidence.&amp;quot; In Proceedings, 7th National Meetings of AAAI. Saint Paul, Minnesota, 712-717.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary P Harper</author>
</authors>
<title>The representation of noun phrases in logical form.&amp;quot;</title>
<date>1989</date>
<journal>Memorandum</journal>
<pages>89--46</pages>
<institution>Brown University,</institution>
<location>Providence, Rhode Island.</location>
<marker>Harper, 1989</marker>
<rawString>Harper, Mary P. (1989). &amp;quot;The representation of noun phrases in logical form.&amp;quot; Memorandum CS-89-46, Brown University, Providence, Rhode Island.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary P Harper</author>
</authors>
<title>The representation of noun phrases in logical form. Doctoral dissertation,</title>
<date>1990</date>
<institution>Brown University,</institution>
<location>Providence, Rhode Island.</location>
<contexts>
<context position="90699" citStr="Harper (1990)" startWordPosition="14837" endWordPosition="14838">((defi) I (name (defi) Fred), A(y)(see (subject y) (object ((def4 y) I (and (picture (def4 y)) (possess ((def3 y) I (and (mother (def3 y)) (possess y (def3 y)))) (def4 y)))))) In the event that the trigger sentence contains more than one VP, the program prompts the user to select the trigger VP. Since there is only one VP in 68, the program checks it to ensure that it contains no free variables,&apos; is compatible with the voice of the elided VP, and that a trigger sentence with more than one pronoun whose antecedent is the same syntactic subject obeys the multiple pronoun constraint discussed in Harper (1990). Notice that the VP in 68 contains no free variables and is compatible in voice to the elided VP in 67. Hence, the program replaces the elided VP with the trigger VP as shown in 69, and the meaning of the elided sentence is determined. Example 69 Sentence: George did too. Meaning: George saw George&apos;s mother&apos;s pict ure. ((def7) I (name (def7) George)), A(y)(see (subject y) (object ((clef,&apos; y) I (and (picture (def4 y)) (possess ((def3 y) I (and (mother (def3 y)) (possess y (def3 y)))) (def4 y)))))) 7. Related Work Other researchers have developed an intermediate representation for a sentence fr</context>
</contexts>
<marker>Harper, 1990</marker>
<rawString>Harper, Mary P. (1990). The representation of noun phrases in logical form. Doctoral dissertation, Brown University, Providence, Rhode Island.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Irene Heim</author>
</authors>
<title>The semantics of definite and indefinite noun phrases. Doctoral dissertation,</title>
<date>1982</date>
<institution>University of Massachusetts,</institution>
<location>Amherst, Massachusetts.</location>
<contexts>
<context position="105027" citStr="Heim (1982)" startWordPosition="17143" endWordPosition="17144"> named function provides a mechanism for handling anaphoric definite NPs. Second, because of this naming convention, definite functions are distinct unless an equality is asserted between them. Third, since we represent each definite as a function with a restriction and the restriction provides us with a mechanism for determining the final meaning of the definite, we are able to capture the properties of a definite description without neglecting anaphoric definites. Fourth, while definite quantifiers can violate the compactness and formal consistency constraints,&apos; our approach does not. 7.2.2 Heim (1982) and Discourse Representation Theory. Another approach to modeling definites was developed by Heim (1982) and Discourse Representation Theory (DRT) researchers Kamp (1981), Roberts (1987), Klein (1987). A hallmark of these approaches is their ability to handle anaphoric definites in a reasonable way and the commitment to modeling the meaning of a series of sentences in discourse, not just individual sentences. Heim (1982) treats definites and indefinites very similarly in her theory since both can be referred to across sentence boundaries, unlike universal NPs. To provide an interpretation for</context>
</contexts>
<marker>Heim, 1982</marker>
<rawString>Heim, Irene (1982). The semantics of definite and indefinite noun phrases. Doctoral dissertation, University of Massachusetts, Amherst, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jaako Hintikka</author>
</authors>
<title>Quantifiers in logic and quantifiers in natural language.&amp;quot;</title>
<date>1979</date>
<journal>In Game Theoretical Semantics, edited by E. Saarinen, 81-117. D. Reidel.</journal>
<contexts>
<context position="7561" citStr="Hintikka (1979)" startWordPosition="1116" endWordPosition="1117">mitting to a single meaning must be capable of being updated once information is available to limit the scoping possibilities. There are a variety of mechanisms for expressing scoping decisions. For example, Schubert and Pelletier (1984) indicate quantifier scoping by extracting and linearly ordering the quantifiers to the left of the predicate-argument structure. Allen (1987) indicates for each pair of quantifiers which one has scope over the other; a method that is not limited to a linear sequence of operators. Finally, Creaney and McTear (1990) use constraints to limit scope possibilities. Hintikka (1979) has noted that the linear ordering of quantifiers is not sufficient to capture all possible meanings of a sentence when four or more quantifiers occur in the sentence. Consider a sentence with four quantifiers, two universals and two existentials: Every boyi wanted every girl I to introduce a friend of his, to a friend of hersj. It should be possible for every boy to have scope over a friend of his, without having scope over a friend of hers. Similarly, every girl could have scope over a friend of hers, but not a friend of his. There is no way to express this with a linear quantifier scoping </context>
</contexts>
<marker>Hintikka, 1979</marker>
<rawString>Hintikka, Jaako (1979). &amp;quot;Quantifiers in logic and quantifiers in natural language.&amp;quot; In Game Theoretical Semantics, edited by E. Saarinen, 81-117. D. Reidel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jaako Hintikka</author>
<author>Jack Kulas</author>
</authors>
<title>Anaphora and Definite Descriptions: Two Applications of Game-Theoretical Semantics.</title>
<date>1985</date>
<tech>D. Reidel.</tech>
<marker>Hintikka, Kulas, 1985</marker>
<rawString>Hintikka, Jaako, and Kulas, Jack (1985). Anaphora and Definite Descriptions: Two Applications of Game-Theoretical Semantics. D. Reidel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jerry R Hobbs</author>
</authors>
<date>1983</date>
<note>An improper</note>
<contexts>
<context position="5908" citStr="Hobbs 1983" startWordPosition="858" endWordPosition="859">fier scope ambiguity and how this representation conforms to our computational constraints. Then, we introduce our LF representations for pronouns, singular definite NPs, and singular indefinite NPs, considering how to update each representation when new information becomes available (though not how to determine that information). We also discuss an implementation that uses our representations and compare our approach with related work. 2. Quantifier Scope Ambiguity in Logical Form Quantifier scope ambiguity has been handled by some researchers by using an intermediate scope-neutral LF (e.g., Hobbs 1983; Schubert and Pelletier 1984; Allen 1987) for the initial representation of sentences. Hence, sentences like Someone loves everyone are initially represented without committing to one particular meaning, as shown in Example 1. Example 1 Someone loves everyone. Possible Meanings: 1. 2x Vy (love x y) 2. Vy 2x (love x y) Scope-neutral Form: (love [2x xl [Vy yl) Initially, in scope-neutral LF, the quantifiers are stored in the predicate argumentstructure with no scoping preference indicated, hence the representation does not commit to a specific meaning for the sentence; it is simply a compact wa</context>
</contexts>
<marker>Hobbs, 1983</marker>
<rawString>Hobbs, Jerry R. (1983). &amp;quot;An improper</rawString>
</citation>
<citation valid="false">
<authors>
<author>Mary P Harper</author>
</authors>
<title>Ambiguous Noun Phrases in Logical Form treatment of quantification in ordinary English.&amp;quot;</title>
<booktitle>In Proceedings, 21st Annual Meeting of Annual Meeting of Association for Computational Linguistics.</booktitle>
<pages>57--63</pages>
<location>Cambridge, Massachusetts,</location>
<marker>Harper, </marker>
<rawString>Mary P. Harper Ambiguous Noun Phrases in Logical Form treatment of quantification in ordinary English.&amp;quot; In Proceedings, 21st Annual Meeting of Annual Meeting of Association for Computational Linguistics. Cambridge, Massachusetts, 57-63.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Norbert Hornstein</author>
</authors>
<title>Logic as Grammar: An Approach to Meaning in Natural Language.</title>
<date>1984</date>
<pages>277--322</pages>
<publisher>MIT Press,</publisher>
<contexts>
<context position="103972" citStr="Hornstein (1984)" startWordPosition="16987" endWordPosition="16988">ing of the elided sentence in Example 18 is difficult for a quantified definite representation to account for. Finally, pronoun references to definites are not constrained in the way that pronoun references to other quantified NPs are. For example, when a quantifier is embedded in a relative clause attached to a noun phrase, it cannot bind a pronoun outside of that clause, as in Fred gave the psychiatrist who cares for every woman her diary. In contrast, the pronoun her in Every man gave the psychiatrist who cares for his mother her diary can have his mother as its antecedent. One might, like Hornstein (1984), assume that definites are quantified but have different properties than universal quantifiers. However, this assumption does not correct some of the problems of definite quantifiers, such as uniqueness or their inability to model anaphoric definites. Rather than modifying definite quantifiers, it seems appropriate to represent definites as functions and gain four immediate benefits. First, the representation of a definite NP as a uniquely named function provides a mechanism for handling anaphoric definite NPs. Second, because of this naming convention, definite functions are distinct unless </context>
</contexts>
<marker>Hornstein, 1984</marker>
<rawString>Hornstein, Norbert (1984). Logic as Grammar: An Approach to Meaning in Natural Language. MIT Press, 277-322.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hans Kamp</author>
</authors>
<title>A theory of truth and semantic representation.&amp;quot;</title>
<date>1981</date>
<booktitle>In Formal Methods in the Study of Language, Volume /,</booktitle>
<institution>Mathematische Centrum.</institution>
<note>edited by</note>
<contexts>
<context position="105198" citStr="Kamp (1981)" startWordPosition="17166" endWordPosition="17167">asserted between them. Third, since we represent each definite as a function with a restriction and the restriction provides us with a mechanism for determining the final meaning of the definite, we are able to capture the properties of a definite description without neglecting anaphoric definites. Fourth, while definite quantifiers can violate the compactness and formal consistency constraints,&apos; our approach does not. 7.2.2 Heim (1982) and Discourse Representation Theory. Another approach to modeling definites was developed by Heim (1982) and Discourse Representation Theory (DRT) researchers Kamp (1981), Roberts (1987), Klein (1987). A hallmark of these approaches is their ability to handle anaphoric definites in a reasonable way and the commitment to modeling the meaning of a series of sentences in discourse, not just individual sentences. Heim (1982) treats definites and indefinites very similarly in her theory since both can be referred to across sentence boundaries, unlike universal NPs. To provide an interpretation for a sentence, Heim first determines the logical form for a sentence. Her logical form is essentially a parse tree with quantifier scoping information indicated, though it i</context>
<context position="108092" citStr="Kamp (1981)" startWordPosition="17607" endWordPosition="17608">; accommodation requires more than syntax and sentence-level information to provide the representation for some definite NPs. Additionally, Heim&apos;s model would have trouble handling any definite NPs without an accommodation link to a previous NP in the discourse model. Heim&apos;s approach requires a considerable amount of information before a definite or indefinite NP is represented in file change semantics (including quantifier scoping information and pronoun antecedents). Hence, the process of representing sentences in file change semantics does not seem to comply with our modularity constraint. Kamp (1981) introduces a discourse theory similar to Heim&apos;s, called Discourse Representation Theory (DRT), providing a model-theoretic interpretation for discourse models. Both theories are motivated by the fact that pronouns in one sentence can have definite and indefinite antecedents in another sentence, while universals cannot bind pronouns in other sentences. Kamp&apos;s approach has been extended by several researchers (e.g., Klein [19871; Roberts [19871). Since Kamp does not discuss quantifier scope ambiguities, we introduce DRT as discussed by Roberts. In DRT, a set of construction rules converts natur</context>
</contexts>
<marker>Kamp, 1981</marker>
<rawString>Kamp, Hans (1981). &amp;quot;A theory of truth and semantic representation.&amp;quot; In Formal Methods in the Study of Language, Volume /, edited by Jeroen Groenendijk, Theo Janssen, and Martin Stokhof. Mathematische Centrum.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lauri Kartunnen</author>
</authors>
<title>Pronouns and variables.&amp;quot;</title>
<date>1969</date>
<booktitle>In Proceedings, Fifth Regional Meeting of the Chicago Linguistic Society.</booktitle>
<pages>108--116</pages>
<marker>Kartunnen, 1969</marker>
<rawString>Kartunnen, Lauri (1969). &amp;quot;Pronouns and variables.&amp;quot; In Proceedings, Fifth Regional Meeting of the Chicago Linguistic Society. 108-116.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ewan Klein</author>
</authors>
<title>VP ellipsis in DR theory.&amp;quot;</title>
<date>1987</date>
<booktitle>In Studies in Discourse Representation and the Theory of Generalized Quantifiers,</booktitle>
<pages>161--187</pages>
<note>edited by</note>
<contexts>
<context position="105228" citStr="Klein (1987)" startWordPosition="17170" endWordPosition="17171"> since we represent each definite as a function with a restriction and the restriction provides us with a mechanism for determining the final meaning of the definite, we are able to capture the properties of a definite description without neglecting anaphoric definites. Fourth, while definite quantifiers can violate the compactness and formal consistency constraints,&apos; our approach does not. 7.2.2 Heim (1982) and Discourse Representation Theory. Another approach to modeling definites was developed by Heim (1982) and Discourse Representation Theory (DRT) researchers Kamp (1981), Roberts (1987), Klein (1987). A hallmark of these approaches is their ability to handle anaphoric definites in a reasonable way and the commitment to modeling the meaning of a series of sentences in discourse, not just individual sentences. Heim (1982) treats definites and indefinites very similarly in her theory since both can be referred to across sentence boundaries, unlike universal NPs. To provide an interpretation for a sentence, Heim first determines the logical form for a sentence. Her logical form is essentially a parse tree with quantifier scoping information indicated, though it is not a logical representation</context>
<context position="111912" citStr="Klein (1987)" startWordPosition="18194" endWordPosition="18195">ntence Every miner who owns a donkey beats it. In Robert&apos;s approach, if a donkey had c-commanded it, then no discourse referent would be created for it; instead, the pronoun would be represented using the discourse referent of its antecedent. However, because a donkey does not c-command it, the sentence is handled as shown in Figure 6. Notice that the pronoun is represented as a discourse referent x3, which is equated with the discourse referent for a donkey (i.e., x2). Pronouns that haven&apos;t already been replaced by a discourse referent must be equated with some accessible discourse referent. Klein (1987) has augmented DRT to handle VPE by introducing a concept that is very similar to lambda abstraction. He is able to represent VPs and abstract the syntactic subject of the sentence. Consider how Example 3 is handled. Example 3 Fred, loves his, wife. Trigger Sentence: George) does too. Elided Sentence: 1. George loves Fred&apos;s wife. (strict meaning) Possible Meanings: 2. George loves George&apos;s wife. (sloppy meaning) The discourse representation for the two readings of the elided sentence are shown in Figure 7. Klein represents the trigger VP as a boxed structure named P. Within this box is a disti</context>
</contexts>
<marker>Klein, 1987</marker>
<rawString>Klein, Ewan (1987). &amp;quot;VP ellipsis in DR theory.&amp;quot; In Studies in Discourse Representation and the Theory of Generalized Quantifiers, edited by J. Groenendijk, D. de Jongh, and M. Stokhof. Foris. 161-187.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Lewis</author>
</authors>
<title>Score keeping in a language game.&amp;quot;</title>
<date>1979</date>
<journal>In Journal of Philosophical Logic,</journal>
<volume>8</volume>
<issue>3</issue>
<pages>339--359</pages>
<contexts>
<context position="107095" citStr="Lewis (1979)" startWordPosition="17451" endWordPosition="17452">finites, but she must introduce accommodation to cover nonanaphoric definites. Consider the sentence Every man; loves his, mother. 17 Formal consistency is violated when a wide scope definite is replaced with something that cannot be described as a constant and compactness is violated when a different representation is introduced to handle anaphoric definites. 455 Computational Linguistics Volume 18, Number 4 a. x2 person(x2) xl (love x2 xl) person(xl) 1 person(x1) —Po person(x2) (love x2 xl) Figure 5 Discourse representations for Someone loves everyone. Accommodation, a concept introduced by Lewis (1979), allows the introduction of a new file card for a definite NP if and only if that NP is related to a previous file card. In the example, his mother is nonanaphoric; however, given that the antecedent for his is every man, accommodation allows the introduction of a new discourse referent. However, to provide a file card for his mother, the model must know that his refers to every man; accommodation requires more than syntax and sentence-level information to provide the representation for some definite NPs. Additionally, Heim&apos;s model would have trouble handling any definite NPs without an accom</context>
</contexts>
<marker>Lewis, 1979</marker>
<rawString>Lewis, David (1979). &amp;quot;Score keeping in a language game.&amp;quot; In Journal of Philosophical Logic, 8(3), 339-359.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert May</author>
</authors>
<title>Logical Form: Its Structure and Deviation.</title>
<date>1985</date>
<publisher>MIT Press.</publisher>
<contexts>
<context position="40633" citStr="May (1985)" startWordPosition="6474" endWordPosition="6475">ite, then there is one particular person who heads all of the public authorities. Our initial representation must be compatible with either possibility. Not all embedded quantified NPs can distribute over a definite. Quantified NPs embedded in relative clauses attached to a definite NP are unable to distribute over the definite. This constraint prevents every boy from quantifying over the child who cares for every man, so the definite can only denote one particular child. Universal NPs that cannot distribute over a definite NP are also unable to bind a pronoun outside that phrase, as noted by May (1985) and Roberts (1987). We must also consider the behavior of definite NPs in VPE. The meaning of a definite NP is ambiguous whenever it contains a pronoun whose antecedent is the subject of the sentence,&apos; as in the following example. Example 18 The postman, saw his, dog. The policemanj did too. Possible Meanings: 1. The policeman saw the postman&apos;s dog. (strict reading) 2. The policeman saw his own dog. (sloppy reading) We must also provide a good representation for a definite subject, one that will account for the differences between universal and definite subjects in VPE (compare Example 19 wit</context>
<context position="47587" citStr="May 1985" startWordPosition="7618" endWordPosition="7619">s of such a function, see Appendix A). Later, after we decide whether or not the quantifier distributes over the definite, the initial representation will be updated, as discussed in the next section. The decision about whether a quantified object of a PP attached to a definite distributes over it cannot be made at the level of LF, though it has an impact on the quantifier&apos;s ability to bind pronouns (or anaphoric definites) in the sentence. Quantified objects of prepositions attached to a definite NP can bind pronouns in the sentence only when they distribute over the definite (Roberts 19879; May 1985). For example, in The secretary of every spy keeps an eye on him, the NP every spy can bind the pronoun him only when it has scope over the definite NP, giving it a distributive reading. However, we cannot make our representation of the pronoun him contingent on quantifier scoping decisions. Hence, we must include the variable in the argument list of the pronoun, and add a constraint to the pronoun resolution module preventing a pronoun function from being bound by a quantifier unless it distributes over the NP containing it. Because a definite function is initially a composite representation </context>
</contexts>
<marker>May, 1985</marker>
<rawString>May, Robert (1985). Logical Form: Its Structure and Deviation. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Montague</author>
</authors>
<title>Universal grammar.&amp;quot;</title>
<date>1970</date>
<journal>Theoria,</journal>
<pages>36--373</pages>
<marker>Montague, 1970</marker>
<rawString>Montague, Richard (1970). &amp;quot;Universal grammar.&amp;quot; Theoria, 36,373-398.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Leora Morgenstern</author>
</authors>
<title>Foundations of a logic of knowledge, action, and communication. Doctoral dissertation,</title>
<date>1988</date>
<location>New York University, New York, New York.</location>
<marker>Morgenstern, 1988</marker>
<rawString>Morgenstern, Leora (1988). Foundations of a logic of knowledge, action, and communication. Doctoral dissertation, New York University, New York, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Barbara Partee</author>
<author>Emmon Bach</author>
</authors>
<title>Quantification, pronouns, and VP anaphora.&amp;quot;</title>
<date>1981</date>
<journal>Mathematische Centrum,</journal>
<booktitle>In Formal Methods in the Study of Language,</booktitle>
<volume>1</volume>
<pages>445--481</pages>
<note>edited by</note>
<contexts>
<context position="92227" citStr="Partee and Bach 1981" startWordPosition="15081" endWordPosition="15084">cheme for indicating the final meaning of a sentence and do not handle VPE. In the rest of this section, we review past representations of pronouns, definite NPs, and indefinite NPs. We emphasize VPE research because it considers not only the representation of sentences in general, but also the representation of trigger sentences. Each approach is examined in the light of its modeling capability and our computational constraints. 7.1 Verb Phrase Ellipsis and Models of Pronouns Pronouns are often classified as either bound variable or referential pronouns (Sag 1976; Webber 1978; Reinhart 1983; Partee and Bach 1981), but the adequacy of this dichotomy is questionable (as discussed in Section 3.1). Models of VPE must consider not only pronouns in normal sentences but also pronouns in trigger sentences, and must account for the ambiguity that arises when a pronoun&apos;s antecedent is the syntactic subject of a trigger sentence. Sag (1976) and Webber (1978) handle this ambiguity by introducing a rule to replace a pronoun whose antecedent is known to be the syntactic 15 This program only deals with intersentential VPE. Hence, all variables in the trigger VP must be bound in the VP, otherwise the elided sentence </context>
<context position="95934" citStr="Partee and Bach (1981)" startWordPosition="15690" endWordPosition="15693">ider Example 71 (which was inspired by an example in Sells, Zaenen, and Zec [19891). Example 71 Every man, believes that (his, wife), can defend herself, better than he, can. Possible Meanings: 1. Every man believes that his wife can defend herself better than he can defend himself. 2. Every man believes that his wife can defend herself better than he can defend her. Reinhart&apos;s approach can only provide the first meaning of the elided sentence in 71. This example suggests that pronouns can refer to definite subjects in two nonreferential ways; lambda abstraction accounts for only one of them. Partee and Bach (1981) attempt to dispense with LF in translating from syntax to final interpretation, building on Montague&apos;s (1970) general theory (with a few modifications to get around the strict compositionality of that approach). All of the possible representations for ambiguous sentences are simultaneously generated, avoiding the 452 Mary P. Harper Ambiguous Noun Phrases in Logical Form need for an intermediate level of representation. They directly provide model-theoretic interpretations for sentences containing pronouns and elided VPs. In their approach, null or elided VPs and pronouns are initially represe</context>
</contexts>
<marker>Partee, Bach, 1981</marker>
<rawString>Partee, Barbara, and Bach, Emmon (1981). &amp;quot;Quantification, pronouns, and VP anaphora.&amp;quot; In Formal Methods in the Study of Language, Volume 1, edited by Jeroen Groenendijk, Theo Janssen, and Martin Stokhof. Mathematische Centrum, 445-481.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martha E Pollack</author>
<author>Fernando C N Pereira</author>
</authors>
<title>An integrated framework for semantic and pragmatic interpretation.&amp;quot;</title>
<date>1988</date>
<booktitle>In Proceedings, 26th Annual Meeting of Annual Meeting of Association for Computational Linguistics.</booktitle>
<pages>75--86</pages>
<location>Buffalo, New York,</location>
<contexts>
<context position="91349" citStr="Pollack and Pereira 1988" startWordPosition="14943" endWordPosition="14946"> contains no free variables and is compatible in voice to the elided VP in 67. Hence, the program replaces the elided VP with the trigger VP as shown in 69, and the meaning of the elided sentence is determined. Example 69 Sentence: George did too. Meaning: George saw George&apos;s mother&apos;s pict ure. ((def7) I (name (def7) George)), A(y)(see (subject y) (object ((clef,&apos; y) I (and (picture (def4 y)) (possess ((def3 y) I (and (mother (def3 y)) (possess y (def3 y)))) (def4 y)))))) 7. Related Work Other researchers have developed an intermediate representation for a sentence from syntactic information (Pollack and Pereira 1988; Alshawi and van Eijck 1989). These approaches agree that in order to determine the meaning of a sentence, it is useful to build a partial meaning that is augmented once contextual information becomes available. These approaches, however, use a different scheme for indicating the final meaning of a sentence and do not handle VPE. In the rest of this section, we review past representations of pronouns, definite NPs, and indefinite NPs. We emphasize VPE research because it considers not only the representation of sentences in general, but also the representation of trigger sentences. Each appro</context>
</contexts>
<marker>Pollack, Pereira, 1988</marker>
<rawString>Pollack, Martha E., and Pereira, Fernando C. N. (1988). &amp;quot;An integrated framework for semantic and pragmatic interpretation.&amp;quot; In Proceedings, 26th Annual Meeting of Annual Meeting of Association for Computational Linguistics. Buffalo, New York, 75-86.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tanya Reinhart</author>
</authors>
<title>Anaphora and Semantic Interpretation. Croom Helm.</title>
<date>1983</date>
<contexts>
<context position="14427" citStr="Reinhart 1983" startWordPosition="2199" endWordPosition="2200">e antecedent for a bound variable pronoun occurs in the same sentence as the pronoun and the meaning of the pronoun is represented as a variable bound by the operator associated with its antecedent. In contrast, the meaning of a referential pronoun is the discourse entity evoked by its antecedent. The bound versus referential dichotomy divides the world of pronouns differently than does the intrasentential—intersentential dichotomy. Pronouns with intersentential antecedents are typically referential.&apos; However, pronouns with intrasentential antecedents can be bound or referential (Webber 1978; Reinhart 1983). The bound—referential dichotomy doesn&apos;t cover the entire range of behaviors possible for pronouns. There is another category of pronoun that Evans (1980) dubs E-type pronouns and that appears to be a bound variable, but on closer inspection is not. Donkey sentences (originally noticed by Geach [19621) can be used to demonstrate this difficulty, for example: Every miner who owns a donkey beats it. Given that every miner has scope over a donkey, the indefinite cannot be referential and the existential operator is blocked from binding the pronoun because of the scope island; quantified NPs embe</context>
<context position="23363" citStr="Reinhart 1983" startWordPosition="3615" endWordPosition="3616">uistics Volume 18, Number 4 Si NP1 VP Det Noun S2 Virb NP4 I I Every man NP2 VP kicked Det Noun I /N who Verb NP3 his dog saw De It Nolun every boy Figure 2 Parse tree for Every man who saw every boy kicked his dog. which NPs can bind a pronoun in a sentence, we adapt Reinhart&apos;s (1983) c-command (or constituent-command), which is a relation on nodes in the sentence&apos;s parse tree. Node A c(constituent)-commands node B iff the branching node al most immediately dominating A either dominates B or is immediately dominated by a node a2 which dominates B, and a2 is of the same category type as ai . (Reinhart 1983, p. 23) To illustrate the concept of c-command, consider the parse tree for the sentence in Example 5, shown in Figure 2. Example 5 Every man who saw every boy kicked his dog. In Figure 2, NP1 c-commands his, but NP2 and NP3 do not. Reinhart claims that a pronoun can be bound by an NP if and only if the NP c-commands the pronoun. Hence, every man who saw every boy can bind his, but every boy cannot. C-command is very useful for ruling out incorrect antecedents for pronouns, as illustrated by Example 5. Unfortunately, it also makes some incorrect predictions. For example, it does not allow eve</context>
<context position="92204" citStr="Reinhart 1983" startWordPosition="15079" endWordPosition="15080">e a different scheme for indicating the final meaning of a sentence and do not handle VPE. In the rest of this section, we review past representations of pronouns, definite NPs, and indefinite NPs. We emphasize VPE research because it considers not only the representation of sentences in general, but also the representation of trigger sentences. Each approach is examined in the light of its modeling capability and our computational constraints. 7.1 Verb Phrase Ellipsis and Models of Pronouns Pronouns are often classified as either bound variable or referential pronouns (Sag 1976; Webber 1978; Reinhart 1983; Partee and Bach 1981), but the adequacy of this dichotomy is questionable (as discussed in Section 3.1). Models of VPE must consider not only pronouns in normal sentences but also pronouns in trigger sentences, and must account for the ambiguity that arises when a pronoun&apos;s antecedent is the syntactic subject of a trigger sentence. Sag (1976) and Webber (1978) handle this ambiguity by introducing a rule to replace a pronoun whose antecedent is known to be the syntactic 15 This program only deals with intersentential VPE. Hence, all variables in the trigger VP must be bound in the VP, otherwi</context>
<context position="94029" citStr="Reinhart (1983)" startWordPosition="15372" endWordPosition="15373"> showed (his, mother), her, dog. Elided Sentence: George/ did too. Possible Readings: 1. George showed Fred&apos;s mother Fred&apos;s mother&apos;s dog. 2. George showed George&apos;s mother George&apos;s mother&apos;s dog. Impossible Readings: 3. *George showed George&apos;s mother Fred&apos;s mother&apos;s dog. 4. *George showed Fred&apos;s mother George&apos;s mother&apos;s dog. Given the indices on the NPs, the elided sentence has meanings 1 and 2, shown in 70. Sag&apos;s and Webber&apos;s models correctly allow meaning 1 and incorrectly allow meaning 3 at the expense of meaning 2 (because Fred&apos;s mother can be the only meaning for her given their approach). Reinhart (1983) also indicates that pronouns are either bound variables or referential, providing a syntactic rule for determining when a pronoun can be bound by its antecedent: a pronoun can be bound by an NP if and only if it c-commands the pronoun. Reinhart does not represent pronouns or definites as quantified terms, yet she claims that when a pronoun&apos;s antecedent is a definite NP or a pronoun that ccommands the pronoun, then the pronoun is bound by a lambda operator abstracting the antecedent. At first glance, the idea of binding a pronoun with the lambda operator of its antecedent (given that the NP c-</context>
</contexts>
<marker>Reinhart, 1983</marker>
<rawString>Reinhart, Tanya (1983). Anaphora and Semantic Interpretation. Croom Helm.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Craige Roberts</author>
</authors>
<title>Modal subordination, anaphora, and distributivity. Doctoral dissertation,</title>
<date>1987</date>
<institution>University of Massachusetts,</institution>
<location>Amherst, Massachusetts.</location>
<contexts>
<context position="40652" citStr="Roberts (1987)" startWordPosition="6477" endWordPosition="6478"> is one particular person who heads all of the public authorities. Our initial representation must be compatible with either possibility. Not all embedded quantified NPs can distribute over a definite. Quantified NPs embedded in relative clauses attached to a definite NP are unable to distribute over the definite. This constraint prevents every boy from quantifying over the child who cares for every man, so the definite can only denote one particular child. Universal NPs that cannot distribute over a definite NP are also unable to bind a pronoun outside that phrase, as noted by May (1985) and Roberts (1987). We must also consider the behavior of definite NPs in VPE. The meaning of a definite NP is ambiguous whenever it contains a pronoun whose antecedent is the subject of the sentence,&apos; as in the following example. Example 18 The postman, saw his, dog. The policemanj did too. Possible Meanings: 1. The policeman saw the postman&apos;s dog. (strict reading) 2. The policeman saw his own dog. (sloppy reading) We must also provide a good representation for a definite subject, one that will account for the differences between universal and definite subjects in VPE (compare Example 19 with 18). Example 19 E</context>
<context position="47575" citStr="Roberts 1987" startWordPosition="7616" endWordPosition="7617">or the semantics of such a function, see Appendix A). Later, after we decide whether or not the quantifier distributes over the definite, the initial representation will be updated, as discussed in the next section. The decision about whether a quantified object of a PP attached to a definite distributes over it cannot be made at the level of LF, though it has an impact on the quantifier&apos;s ability to bind pronouns (or anaphoric definites) in the sentence. Quantified objects of prepositions attached to a definite NP can bind pronouns in the sentence only when they distribute over the definite (Roberts 19879; May 1985). For example, in The secretary of every spy keeps an eye on him, the NP every spy can bind the pronoun him only when it has scope over the definite NP, giving it a distributive reading. However, we cannot make our representation of the pronoun him contingent on quantifier scoping decisions. Hence, we must include the variable in the argument list of the pronoun, and add a constraint to the pronoun resolution module preventing a pronoun function from being bound by a quantifier unless it distributes over the NP containing it. Because a definite function is initially a composite rep</context>
<context position="105214" citStr="Roberts (1987)" startWordPosition="17168" endWordPosition="17169">een them. Third, since we represent each definite as a function with a restriction and the restriction provides us with a mechanism for determining the final meaning of the definite, we are able to capture the properties of a definite description without neglecting anaphoric definites. Fourth, while definite quantifiers can violate the compactness and formal consistency constraints,&apos; our approach does not. 7.2.2 Heim (1982) and Discourse Representation Theory. Another approach to modeling definites was developed by Heim (1982) and Discourse Representation Theory (DRT) researchers Kamp (1981), Roberts (1987), Klein (1987). A hallmark of these approaches is their ability to handle anaphoric definites in a reasonable way and the commitment to modeling the meaning of a series of sentences in discourse, not just individual sentences. Heim (1982) treats definites and indefinites very similarly in her theory since both can be referred to across sentence boundaries, unlike universal NPs. To provide an interpretation for a sentence, Heim first determines the logical form for a sentence. Her logical form is essentially a parse tree with quantifier scoping information indicated, though it is not a logical </context>
<context position="110852" citStr="Roberts (1987)" startWordPosition="18022" endWordPosition="18023">). Indefinites and definites are represented by placing their discourse referents and restriction information in the box corresponding to the current level in the model. An accessibility relation determines when a pronoun can have a particular discourse referent as its antecedent. A pronoun&apos;s antecedent can be any discourse referent defined in the box where the pronoun is instantiated or in any box containing that box. Additionally, a pronoun in a consequent box can also refer to anything in the antecedent box (unless the antecedent is embedded in another box contained in the antecedent box). Roberts (1987) combines DRT with c-command to distinguish two types of binding, c-command binding and discourse binding. C-command binding occurs when the best way to represent the anaphoric NP is by replacing it with the variable associated with the operator of the NP that c-commands it. On the other hand, discourse binding is needed to handle anaphoric dependencies on things that don&apos;t c-command a pronoun or anaphoric definite. For example, consider the sentence Every miner who owns a donkey beats it. In Robert&apos;s approach, if a donkey had c-commanded it, then no discourse referent would be created for it;</context>
</contexts>
<marker>Roberts, 1987</marker>
<rawString>Roberts, Craige (1987). Modal subordination, anaphora, and distributivity. Doctoral dissertation, University of Massachusetts, Amherst, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John R Ross</author>
</authors>
<title>Constraints on variables in syntax. Doctoral dissertation, MIT,</title>
<date>1967</date>
<location>Cambridge, Massachusetts.</location>
<contexts>
<context position="15677" citStr="Ross (1967)" startWordPosition="2405" endWordPosition="2406">n NP cannot bind pronouns outside of the relative clause environment.&apos; However, a donkey can be the antecedent for the pronoun. 2 The only exception are pronouns like those in paycheck sentences (first noticed by Kartunnen [1969]). Consider the sentence Fred gave his paycheck to his wife. George gave it to his mistress. The pronoun it is not referential. For that matter, it is not bound. The pronoun seems to take his paycheck as its antecedent where the pronoun is instantiated to a different individual than in the original sentence. 3 This is related to the Complex NP Constraint introduced by Ross (1967), which prevents wh-movement out of a relative clause attached to an NP. 423 Computational Linguistics Volume 18, Number 4 Donkey sentences provide evidence that all of the following cannot be simultaneously true (adapted from Heim [1982, p. 102]). 1. Indefinites should be represented using existential quantifiers. 2. Indefinites obey the same scope-island restriction as universals. 3. Pronouns are either bound variables or referential. Many researchers have attacked one or more of these assumptions, but we prefer to modify the third by adding an additional type of pronoun: pronouns that adopt</context>
</contexts>
<marker>Ross, 1967</marker>
<rawString>Ross, John R. (1967). Constraints on variables in syntax. Doctoral dissertation, MIT, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bertram Russell</author>
</authors>
<title>Reference.&amp;quot; In Readings in the Philosophy of Language,</title>
<date>1971</date>
<journal>edited by J. E Rosenberg</journal>
<pages>163--175</pages>
<publisher>Prentice-Hall,</publisher>
<contexts>
<context position="42473" citStr="Russell 1971" startWordPosition="6772" endWordPosition="6773">n the remainder of this section, we introduce our LF representation for definites, describe ways to update this 6 Or whenever it contains an embedded indefinite. We consider sloppy indefinites in Section 5.3. 432 Mary P. Harper Ambiguous Noun Phrases in Logical Form representation once ambiguity is resolved, and discuss how the representation is used in VPE. 4.2 Definite NPs: An Initial Representation We represent definite NPs as functions of all of the variables that can affect their meanings. This representation satisfies our constraints by combining the advantages of definite descriptions (Russell 1971) (discussed in Section 7.2.1) with the functional notation we introduced to represent pronouns. A definite function is assigned a unique name (i.e., def with a unique integer subscript) to distinguish two occurrences of the same definite NP, has a restriction consisting of a single predicate or a conjunction of predicates derived from information contained in the NP, and has a (possibly empty) list of arguments containing: • any variables associated with lambda operators that have scope over it, • any variables associated with nonsubject quantified NPs that could bind a pronoun in that positio</context>
<context position="51144" citStr="Russell 1971" startWordPosition="8194" endWordPosition="8195">escriptions or definite quantifiers, which provide no mechanism for handling bound variable, anaphoric definites. 4.3.2 Updating Structurally Complex Definites. To determine the meaning of a structurally complex definite NP (i.e., an NP containing embedded pronouns and quantified NPs), we must: 1) determine the meanings for all embedded NPs and 2) decide whether quantifiers corresponding to embedded quantified NPs not contained in relative clauses distribute over the definite. Given this information, we can refine the meaning of a definite function using the behavior of definite descriptions (Russell 1971) as our model. Any definite description that does not contain variables bound by outside quantifiers acts like a constant because of the uniqueness assumption (see Section 7.2.1 for a discussion of definite descriptions). On the other hand, if a quantifier has scope over the definite description (either because an embedded quantified NP distributes over it or the antecedent for an embedded pronoun is quantified), it denotes different individuals depending on the instantiation of that variable. Once we determine the meanings of the NPs contained in a definite function&apos;s restriction and decide w</context>
<context position="99350" citStr="Russell (1971)" startWordPosition="16226" endWordPosition="16227">e and Bach&apos;s approach (1981) does not conform with the compactness constraint. 7.2 Past Representations of Definites and Indefinites In this section, we examine previous representations of definite NPs. In particular, we review definite descriptions and definite quantifiers. We also examine some recent work that departs from traditional representations of definite NPs (e.g., Heim [1982]; Roberts [1987]; Kamp [19811; Klein [19871). 7.2.1 Definite Descriptions and Definite Quantifiers. Many researchers have attempted to represent definite NPs using definite descriptions or definite quantifiers. Russell (1971) introduced definite descriptions to capture the meaning of definite NPs like the dog in Example 72. Example 72 The dog barked.: (barked (tx)(dog x)) which means: Ax (and (Dog x) ; The dog exists. Vy ((dog y) 4- x=y) ; It is the one-and-only dog. (barked x)) ; It barked. 453 Computational Linguistics Volume 18, Number 4 The definite description, (a)(dog x), which stands for the object x such that the property (dog x) is true names a unique object, and hence, is translated into the formula, 3x (and (dog x) Vy ((dog y) 4-+(= x y))). Notice three important features of the meaning of the sentence </context>
</contexts>
<marker>Russell, 1971</marker>
<rawString>Russell, Bertram (1971). &amp;quot;Reference.&amp;quot; In Readings in the Philosophy of Language, edited by J. E Rosenberg and C. Travis. Prentice-Hall, 163-175.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ivan A Sag</author>
</authors>
<title>Deletion and logical form. Doctoral dissertation, MIT,</title>
<date>1976</date>
<location>Cambridge, Massachusetts.</location>
<contexts>
<context position="92176" citStr="Sag 1976" startWordPosition="15075" endWordPosition="15076">approaches, however, use a different scheme for indicating the final meaning of a sentence and do not handle VPE. In the rest of this section, we review past representations of pronouns, definite NPs, and indefinite NPs. We emphasize VPE research because it considers not only the representation of sentences in general, but also the representation of trigger sentences. Each approach is examined in the light of its modeling capability and our computational constraints. 7.1 Verb Phrase Ellipsis and Models of Pronouns Pronouns are often classified as either bound variable or referential pronouns (Sag 1976; Webber 1978; Reinhart 1983; Partee and Bach 1981), but the adequacy of this dichotomy is questionable (as discussed in Section 3.1). Models of VPE must consider not only pronouns in normal sentences but also pronouns in trigger sentences, and must account for the ambiguity that arises when a pronoun&apos;s antecedent is the syntactic subject of a trigger sentence. Sag (1976) and Webber (1978) handle this ambiguity by introducing a rule to replace a pronoun whose antecedent is known to be the syntactic 15 This program only deals with intersentential VPE. Hence, all variables in the trigger VP must</context>
</contexts>
<marker>Sag, 1976</marker>
<rawString>Sag, Ivan A. (1976). Deletion and logical form. Doctoral dissertation, MIT, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lenhart K Schubert</author>
<author>Francis J Pelletier</author>
</authors>
<title>From English to logic: Context-free computation of &apos;conventional&apos; logical translations.&amp;quot;</title>
<date>1984</date>
<journal>American Journal of Computational Linguistics,</journal>
<pages>10--165</pages>
<contexts>
<context position="2114" citStr="Schubert and Pelletier 1984" startWordPosition="299" endWordPosition="302">ver, several problems with this approach. First, the enumeration and testing of each possible reading of an ambiguous sentence to determine which is correct can require significant computational resources. Second, an application may not require the precise meaning for a sentence; hence, determining a single meaning would be a waste of resources. Third, many times an ambiguous sentence cannot be disambiguated until information contained in subsequent sentences has been processed. Another approach, the one adopted in this paper, is to use an intermediate representation called logical form (LF) (Schubert and Pelletier 1984; Allen 1987; Harper 1988) to avoid immediately committing to a single meaning of an ambiguous sentence. LF partially specifies the meaning of a sentence based on syntactic and sentence-level information, without considering the effects of pragmatics and context. This partial specification of meaning allows us to process additional sentences before further limiting the meaning of an ambiguous sentence. Later, as relevant information becomes available (from a context processing module), the intermediate representation of the ambiguous sentence can be incrementally updated. This process can cont</context>
<context position="5937" citStr="Schubert and Pelletier 1984" startWordPosition="860" endWordPosition="863">mbiguity and how this representation conforms to our computational constraints. Then, we introduce our LF representations for pronouns, singular definite NPs, and singular indefinite NPs, considering how to update each representation when new information becomes available (though not how to determine that information). We also discuss an implementation that uses our representations and compare our approach with related work. 2. Quantifier Scope Ambiguity in Logical Form Quantifier scope ambiguity has been handled by some researchers by using an intermediate scope-neutral LF (e.g., Hobbs 1983; Schubert and Pelletier 1984; Allen 1987) for the initial representation of sentences. Hence, sentences like Someone loves everyone are initially represented without committing to one particular meaning, as shown in Example 1. Example 1 Someone loves everyone. Possible Meanings: 1. 2x Vy (love x y) 2. Vy 2x (love x y) Scope-neutral Form: (love [2x xl [Vy yl) Initially, in scope-neutral LF, the quantifiers are stored in the predicate argumentstructure with no scoping preference indicated, hence the representation does not commit to a specific meaning for the sentence; it is simply a compact way of expressing the set of al</context>
<context position="7183" citStr="Schubert and Pelletier (1984)" startWordPosition="1057" endWordPosition="1060">gs. Another type of scope-neutral form initially gives universal quantifiers scope over all existentials. This solution provides a general reading that in many cases subsumes readings where the existential is outside of the scope of the universal. However, if we are to handle NPs containing pronouns and sentences with verb phrase ellipsis, this solution is inadequate. An LF that avoids committing to a single meaning must be capable of being updated once information is available to limit the scoping possibilities. There are a variety of mechanisms for expressing scoping decisions. For example, Schubert and Pelletier (1984) indicate quantifier scoping by extracting and linearly ordering the quantifiers to the left of the predicate-argument structure. Allen (1987) indicates for each pair of quantifiers which one has scope over the other; a method that is not limited to a linear sequence of operators. Finally, Creaney and McTear (1990) use constraints to limit scope possibilities. Hintikka (1979) has noted that the linear ordering of quantifiers is not sufficient to capture all possible meanings of a sentence when four or more quantifiers occur in the sentence. Consider a sentence with four quantifiers, two univer</context>
</contexts>
<marker>Schubert, Pelletier, 1984</marker>
<rawString>Schubert, Lenhart K., and Pelletier, Francis J. (1984). &amp;quot;From English to logic: Context-free computation of &apos;conventional&apos; logical translations.&amp;quot; American Journal of Computational Linguistics, 10,165-176.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter Sells</author>
<author>Annie Zaenen</author>
<author>Draga Zec</author>
</authors>
<title>Reflexivization variation: Relations between syntax, semantics, and lexical structure.&amp;quot;</title>
<date>1985</date>
<booktitle>In Studies in Grammatical Theory and Discourse Structure,</booktitle>
<volume>1</volume>
<publisher>CSLI.</publisher>
<note>edited by</note>
<marker>Sells, Zaenen, Zec, 1985</marker>
<rawString>Sells, Peter; Zaenen, Annie; and Zec, Draga (1985). &amp;quot;Reflexivization variation: Relations between syntax, semantics, and lexical structure.&amp;quot; In Studies in Grammatical Theory and Discourse Structure, Volume 1, edited by M. Iida, S. Wechsler, and D. Zec. CSLI.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bonnie L Webber</author>
</authors>
<title>A formal approach to discourse anaphora. Doctoral dissertation,</title>
<date>1978</date>
<institution>Harvard University,</institution>
<location>Cambridge, Massachusetts.</location>
<contexts>
<context position="13266" citStr="Webber (1978)" startWordPosition="2020" endWordPosition="2021">en that pronoun cannot act like a bound variable, since quantifiers do not have scope across sentences in English. Consider the following two sentences: Fred likes everyone. But, he doesn&apos;t return the sentiment. The pronoun in the second sentence cannot be bound by the quantifier corresponding to everyone in the first sentence. However, a quantified NP in one sentence can be the antecedent for a pronoun in another sentence, as in Fred likes everyone. But, they don&apos;t return the sentiment. In this case, they adopts the discourse entity for the group of individuals that everyone quantifies over. Webber (1978) discusses how to construct discourse entities for nonanaphoric NPs in a sentence (both for quantified NPs and definite NPs that are quantified over) once that sentence has been disambiguated. A discourse entity is a designator for the entity or set of entities the NP evokes in the discourse model of the speaker or hearer. If an NP in one sentence is the antecedent for a pronoun in another, the pronoun is replaced with the antecedent&apos;s discourse entity. Pronouns have also been classified as bound variable pronouns or referential pronouns. The antecedent for a bound variable pronoun occurs in t</context>
<context position="74648" citStr="Webber (1978)" startWordPosition="12132" endWordPosition="12133"> woman does not have scope over the existential. Consider the initial representation of the first sentence. Example 51 Every woman saw a dog. Vx: (woman x) x, A(y)(see y [az: (dog z) z1) Now, suppose that the universal has scope over the indefinite, then the LF would be updated as follows. Example 52 Vx: (woman x) x, A(y)(see y ((indefm x) I (dog (indef34 x)))) A consequence of this scoping decision is that a dog cannot be the antecedent for it, without causing a violation of the formal consistency constraint.&apos; On the other hand, 11 Even if we construct a discourse entity for a dog, following Webber (1978), the discourse entity for (indef34 x) would denote a set of dogs, and the pronoun resolution module would not allow a plural entity to be the antecedent for a singular pronoun. 444 Mary P. Harper Ambiguous Noun Phrases in Logical Form if the universal does not have scope over a dog, then the LF for the first sentence (shown in 51) is updated as shown in 53. Example 53 Vx: (woman x) x, A(y)(see y ((indef37) I (dog (indef37)))) Because a dog is represented as a function with no arguments, it is compatible with the pronoun function representing it.&apos; The representation is also useful for handling</context>
<context position="92189" citStr="Webber 1978" startWordPosition="15077" endWordPosition="15078">, however, use a different scheme for indicating the final meaning of a sentence and do not handle VPE. In the rest of this section, we review past representations of pronouns, definite NPs, and indefinite NPs. We emphasize VPE research because it considers not only the representation of sentences in general, but also the representation of trigger sentences. Each approach is examined in the light of its modeling capability and our computational constraints. 7.1 Verb Phrase Ellipsis and Models of Pronouns Pronouns are often classified as either bound variable or referential pronouns (Sag 1976; Webber 1978; Reinhart 1983; Partee and Bach 1981), but the adequacy of this dichotomy is questionable (as discussed in Section 3.1). Models of VPE must consider not only pronouns in normal sentences but also pronouns in trigger sentences, and must account for the ambiguity that arises when a pronoun&apos;s antecedent is the syntactic subject of a trigger sentence. Sag (1976) and Webber (1978) handle this ambiguity by introducing a rule to replace a pronoun whose antecedent is known to be the syntactic 15 This program only deals with intersentential VPE. Hence, all variables in the trigger VP must be bound in </context>
</contexts>
<marker>Webber, 1978</marker>
<rawString>Webber, Bonnie L. (1978). A formal approach to discourse anaphora. Doctoral dissertation, Harvard University, Cambridge, Massachusetts.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bonnie L Webber</author>
</authors>
<title>So what can we talk about now?&amp;quot;</title>
<date>1983</date>
<booktitle>In Computational Models of Discourse,</booktitle>
<pages>331--371</pages>
<publisher>MIT Press.</publisher>
<note>edited by</note>
<marker>Webber, 1983</marker>
<rawString>Webber, Bonnie L. (1983). &amp;quot;So what can we talk about now?&amp;quot; In Computational Models of Discourse, edited by M. Brady and R. Berwick, 331-371. MIT Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Edwin S Williams</author>
</authors>
<title>Discourse and logical form.&amp;quot;</title>
<date>1977</date>
<journal>Linguistic Inquiry,</journal>
<volume>8</volume>
<pages>101--139</pages>
<marker>Williams, 1977</marker>
<rawString>Williams, Edwin S. (1977). &amp;quot;Discourse and logical form.&amp;quot; Linguistic Inquiry, 8, 101-139.</rawString>
</citation>
<citation valid="false">
<title>The logical constants:</title>
<marker></marker>
<rawString>1. The logical constants: --,, V, A, -&gt;, ), (,=, V, :, I, A. We often use English equivalents of the logical constants (e.g., and for A).</rawString>
</citation>
<citation valid="false">
<title>Nonlogical constants: These include numerical constants (e.g.,</title>
<volume>1</volume>
<note>etc.), character constants (e.g., A, b, etc.), nonnumerical, noncharacter constants (e.g., Fred34).</note>
<marker></marker>
<rawString>2. Nonlogical constants: These include numerical constants (e.g., 1, 2, etc.), character constants (e.g., A, b, etc.), nonnumerical, noncharacter constants (e.g., Fred34).</rawString>
</citation>
<citation valid="false">
<authors>
<author>Variables</author>
</authors>
<title>For example, x, y, z. 4. Predicate symbols: For example, run, boy, etc. 5. Function symbols: For example, def4,</title>
<pages>66--66</pages>
<marker>Variables, </marker>
<rawString>3. Variables: For example, x, y, z. 4. Predicate symbols: For example, run, boy, etc. 5. Function symbols: For example, def4, indef66, his66.</rawString>
</citation>
<citation valid="false">
<title>If 0 has the form 7-, A(x)02 and T is the q-term [3a: 01 a], then M H0 if and only if M H 3a (and oi ,,p) (where 1!) is</title>
<booktitle>02(a/x)). 11. If 0 has the form T, A(x)02 and T is the f-term ((0 Ti 12 ... 7a) OA then M H0 if and only if M H (and &apos;01 &apos;O) (where is 11)2((O TI T2 ... r)/x) Additionally:</booktitle>
<marker></marker>
<rawString>10. If 0 has the form 7-, A(x)02 and T is the q-term [3a: 01 a], then M H0 if and only if M H 3a (and oi ,,p) (where 1!) is &apos;02(a/x)). 11. If 0 has the form T, A(x)02 and T is the f-term ((0 Ti 12 ... 7a) OA then M H0 if and only if M H (and &apos;01 &apos;O) (where is 11)2((O TI T2 ... r)/x) Additionally:</rawString>
</citation>
<citation valid="false">
<title>If ((0 T1 72••• rn) 01) is contained in a formula 0, the formula is equivalent to (and 0&apos; 01), where 0&apos; is the formula obtained by replacing the f-term with (6+ Ti 72 ...Tn)</title>
<note>in 0.</note>
<marker></marker>
<rawString>1. If ((0 T1 72••• rn) 01) is contained in a formula 0, the formula is equivalent to (and 0&apos; 01), where 0&apos; is the formula obtained by replacing the f-term with (6+ Ti 72 ...Tn) in 0.</rawString>
</citation>
<citation valid="false">
<title>If (7r [opi al: 0] ...) is a formula, then this is equivalent to: opi (and 0 (7r al )) if opi is 3 or opi (if 0 (7r al )) if opi is V.</title>
<marker></marker>
<rawString>2. If (7r [opi al: 0] ...) is a formula, then this is equivalent to: opi (and 0 (7r al )) if opi is 3 or opi (if 0 (7r al )) if opi is V.</rawString>
</citation>
<citation valid="false">
<title>If (7r ... Eopial: bj aj] [op,a,: ) and a) is free in 0, then °mai must have scope over op,.</title>
<marker></marker>
<rawString>3. If (7r ... Eopial: bj aj] [op,a,: ) and a) is free in 0, then °mai must have scope over op,.</rawString>
</citation>
<citation valid="false">
<title>If Tl, A(ai)(7r [op,a,: ail ...) and op, is an existential operator, then replace the q-term with an f-term, where the function&apos;s arguments include all of the variables corresponding to operators that have scope over it (possibly including al)) and replace all occurrences of a, with the function.</title>
<marker></marker>
<rawString>4. If Tl, A(ai)(7r [op,a,: ail ...) and op, is an existential operator, then replace the q-term with an f-term, where the function&apos;s arguments include all of the variables corresponding to operators that have scope over it (possibly including al)) and replace all occurrences of a, with the function.</rawString>
</citation>
<citation valid="false">
<title>If 7-1, A(ai)(7r [opia,: a,] ) and al is free in 0, then Mai) must have scope over op,.</title>
<marker></marker>
<rawString>5. If 7-1, A(ai)(7r [opia,: a,] ) and al is free in 0, then Mai) must have scope over op,.</rawString>
</citation>
<citation valid="false">
<title>7r [opi 01 al] [op2a2: 2 a21 ... [opnan: On an]) is consistent with the set of meanings (using ora to enumerate them) derived by enumerating all sentences with a legal partial order of the quantifiers given the above quantifier scoping constraints: opi al, op2a2, ..., and opnan. To map the sentence to a truth-value, one partial order must be selected.</title>
<marker></marker>
<rawString>6. (7r [opi 01 al] [op2a2: 2 a21 ... [opnan: On an]) is consistent with the set of meanings (using ora to enumerate them) derived by enumerating all sentences with a legal partial order of the quantifiers given the above quantifier scoping constraints: opi al, op2a2, ..., and opnan. To map the sentence to a truth-value, one partial order must be selected.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>